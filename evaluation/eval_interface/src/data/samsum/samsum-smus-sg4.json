[{"instance_id": "samsum-0", "summary": "Judy is staying for the weekend. Derek asks Judy to feed his animals on Friday and Saturday. Judy agrees. Derek will give her his keys on Thursday and provide Judy with details.", "summary_trees": ["# ::snt Judy is staying for the weekend.\n(s / stay-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Judy\"))\n      :time (w / weekend))", "# ::snt Derek asks Judy to feed his animals on Friday and Saturday.\n(a / ask-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Derek\"))\n      :ARG1 (f / feed-01\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Judy\"))\n            :ARG2 (a2 / animal\n                  :poss p)\n            :time (a3 / and\n                  :op1 (d / date-entity\n                        :weekday (f2 / friday))\n                  :op2 (d2 / date-entity\n                        :weekday (s / saturday))))\n      :ARG2 p2)", "# ::snt Judy agrees.\n(a / agree-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Judy\")))", "# ::snt Derek will give her his keys on Thursday and provide Judy with details.\n(a / and\n      :op1 (g / give-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Derek\"))\n            :ARG1 (k / key\n                  :poss p)\n            :ARG2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Judy\"))\n            :time (d / date-entity\n                  :weekday (t / thursday)))\n      :op2 (p3 / provide-01\n            :ARG0 p\n            :ARG1 (d2 / detail)\n            :ARG2 p2))"], "tree": ["(s / stay-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Judy\")))", "(s / stay-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Judy\"))\n   :time (w / weekend))", "(f / feed-01\n   :time (d / date-entity\n            :weekday (f2 / friday)))", "(f / feed-01\n   :time (d2 / date-entity\n             :weekday (s / saturday)))", "(f / feed-01\n   :time (a3 / and\n             :op1 (d / date-entity\n                     :weekday (f2 / friday))\n             :op2 (d2 / date-entity\n                      :weekday (s / saturday))))", "(a / ask-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Derek\"))\n   :ARG1 (f / feed-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Judy\"))\n            :ARG2 (a2 / animal\n                      :poss p)\n            :time (d / date-entity\n                     :weekday (f2 / friday))))", "(a / ask-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Derek\"))\n   :ARG1 (f / feed-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Judy\"))\n            :ARG2 (a2 / animal\n                      :poss p)\n            :time (d / date-entity\n                     :weekday (f2 / friday))))", "(a / ask-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Derek\"))\n   :ARG1 (f / feed-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Judy\"))\n            :ARG2 (a2 / animal\n                      :poss p)\n            :time (d2 / date-entity\n                      :weekday (s / saturday))))", "(a / ask-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Derek\"))\n   :ARG1 (f / feed-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Judy\"))\n            :ARG2 (a2 / animal\n                      :poss p)\n            :time (d / date-entity\n                     :weekday (f2 / friday))))", "(a / ask-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Derek\"))\n   :ARG1 (f / feed-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Judy\"))\n            :ARG2 (a2 / animal\n                      :poss p)\n            :time (d2 / date-entity\n                      :weekday (s / saturday)))\n   :ARG2 p2)", "(a / ask-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Derek\"))\n   :ARG1 (f / feed-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Judy\"))\n            :ARG2 (a2 / animal\n                      :poss p)\n            :time (d2 / date-entity\n                      :weekday (s / saturday)))\n   :ARG2 p2)", "(a / ask-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Derek\"))\n   :ARG1 (f / feed-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Judy\"))\n            :ARG2 (a2 / animal\n                      :poss p)\n            :time (a3 / and\n                      :op1 (d / date-entity\n                              :weekday (f2 / friday))\n                      :op2 (d2 / date-entity\n                               :weekday (s / saturday)))))", "(a / ask-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Derek\"))\n   :ARG1 (f / feed-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Judy\"))\n            :ARG2 (a2 / animal\n                      :poss p)\n            :time (a3 / and\n                      :op1 (d / date-entity\n                              :weekday (f2 / friday))\n                      :op2 (d2 / date-entity\n                               :weekday (s / saturday))))\n   :ARG2 p2)", "(a / ask-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Derek\"))\n   :ARG1 (f / feed-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Judy\"))\n            :ARG2 (a2 / animal\n                      :poss p)\n            :time (a3 / and\n                      :op1 (d / date-entity\n                              :weekday (f2 / friday))\n                      :op2 (d2 / date-entity\n                               :weekday (s / saturday))))\n   :ARG2 p2)", "(a / agree-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Judy\")))", "(a / agree-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Judy\")))", "(p3 / provide-01\n    :ARG0 (p / person :name (n / name :op1 \"Derek\"))\n    :ARG1 (d2 / detail))", "(g / give-01\n   :ARG1 (k / key\n            :poss (p / person :name (n / name :op1 \"Derek\"))))", "(p3 / provide-01\n    :ARG0 (p / person :name (n / name :op1 \"Derek\"))\n    :ARG1 (d2 / detail)\n    :ARG2 (p2 / person :name (n2 / name :op1 \"Judy\")))", "(p3 / provide-01\n    :ARG0 (p / person :name (n / name :op1 \"Derek\"))\n    :ARG1 (d2 / detail)\n    :ARG2 (p2 / person :name (n2 / name :op1 \"Judy\")))", "(g / give-01\n   :time (d / date-entity\n            :weekday (t / thursday)))", "(g / give-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Derek\"))\n   :ARG1 (k / key\n            :poss p))", "(g / give-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Derek\"))\n   :ARG1 (k / key\n            :poss p)\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Judy\")))", "(g / give-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Derek\"))\n   :ARG1 (k / key\n            :poss p)\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Judy\"))\n   :time (d / date-entity\n            :weekday (t / thursday)))"], "smus": ["-Judy is staying.", "-Judy is staying the weekend.", "Feed Friday.", "Feed on Saturday.", "Feed on Friday and Saturday.", "Derek asks that Judy feed her animals on Friday.", "Derek asks that Judy feed her animals on Friday.", "Derek asks that Judy feed her animals on Saturday.", "Derek asks that Judy feed her animals on Friday.", "Derek asks that Judy feed her animals Saturday.", "Derek asks that Judy feed her animals Saturday.", "Derek asks that Judy feed her animals on Friday and Saturday.", "Derek asks that Judy feed her animals on Friday and Saturday.", "Derek asks that Judy feed her animals on Friday and Saturday.", "Judy agrees.", "Judy agrees.", "Derek will provide details.", "Give Derek's keys.", "Derek will provide details to Judy.", "Derek will provide details to Judy.", "Give on Thursday.", "Derek will give his keys.", "Derek will give his keys to Judy.", "Thursday, Derek will give his keys to Judy."]}, {"instance_id": "samsum-1", "summary": "Peter has been working out at the gym near their office lately to improve his health. Lisa is considering working out and eating better to be healthier.", "summary_trees": ["# ::snt Peter has been working out at the gym near their office lately to improve his health.\n(w / work-out-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Peter\"))\n      :location (g / gym\n            :ARG1-of (n2 / near-02\n                  :ARG2 (o / office\n                        :poss (t / they))))\n      :time (l / lately)\n      :purpose (ii / improve-01\n            :ARG0 p\n            :ARG1 (h / healthy\n                  :domain p)))", "# ::snt Lisa is considering working out and eating better to be healthier.\n(c / consider-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Lisa\"))\n      :ARG1 (a / and\n            :op1 (w / work-out-03\n                  :ARG0 p)\n            :op2 (e / eat-01\n                  :ARG0 p\n                  :ARG1-of (h / have-degree-91\n                        :ARG2 (g / good-02)\n                        :ARG3 (m / more)))\n            :purpose (h2 / have-degree-91\n                  :ARG1 p\n                  :ARG2 (h3 / healthy)\n                  :ARG3 (m2 / more))))"], "tree": ["(n2 / near-02\n    :ARG2 (o / office\n             :poss (t / they)))", "(w / work-out-02\n   :location (g / gym)\n   :time (l / lately)\n   :purpose (ii / improve-01))", "(w / work-out-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Peter\"))\n   :location (g / gym\n                :ARG1 (n2 / near-02\n                          :ARG2 (o / office\n                                   :poss (t / they))))\n   :time (l / lately)\n   :purpose (ii / improve-01\n                :ARG0 p\n                :ARG1 (h / healthy\n                         :domain p)))", "(h / have-degree-91\n   :ARG2 (g / good-02)\n   :ARG3 (m / more))", "(c / consider-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lisa\"))\n   :ARG1 (w / work-out-03\n            :ARG0 p))", "(c / consider-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lisa\"))\n   :ARG1 (e / eat-01\n            :ARG0 p\n            :ARG1 (h / have-degree-91\n                     :ARG2 (g / good-02)\n                     :ARG3 (m / more))\n            :purpose (h2 / have-degree-91\n                         :ARG1 p\n                         :ARG2 (h3 / healthy)\n                         :ARG3 (m2 / more))))", "(c / consider-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lisa\"))\n   :ARG1 (a / and\n            :op1 (w / work-out-03\n                    :ARG0 p)\n            :op2 (e / eat-01\n                    :ARG0 p\n                    :ARG1 (h / have-degree-91\n                             :ARG2 (g / good-02)\n                             :ARG3 (m / more)))\n            :purpose (h2 / have-degree-91\n                         :ARG1 p\n                         :ARG2 (h3 / healthy)\n                         :ARG3 (m2 / more))))"], "smus": ["Near their office.", "Workouts in the gym lately to improve", "Peter has been working out in the gym near their office lately to improve his health.", "Better.", "Lisa is considering working out.", "Lisa is considering eating better to be healthier.", "Lisa is considering working out and eating better to be healthier."]}, {"instance_id": "samsum-2", "summary": "Ken feels stressed because of work and fighting with Brad. There is also too much going on at mom's. Ken is going to a show on Saturday night. On Sunday Ken is seeing the grandkids at the zoo.", "summary_trees": ["# ::snt Ken feels stressed because of work and fighting with Brad.\n(f / feel-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Ken\"))\n      :ARG1 (s / stress-02\n            :ARG0 (a / and\n                  :op1 (w / work-01\n                        :ARG0 p)\n                  :op2 (f2 / fight-01\n                        :ARG0 p\n                        :ARG1 (p2 / person\n                              :name (n2 / name\n                                    :op1 \"Brad\"))))\n            :ARG1 p))", "# ::snt There is also too much going on at mom's.\n(g / go-on-15\n      :ARG1 (t / thing\n            :ARG1-of (h / have-quant-91\n                  :ARG2 (m / much)\n                  :ARG3 (t2 / too)))\n      :location (h2 / home\n            :poss (p / person\n                  :ARG0-of (h3 / have-rel-role-91\n                        :ARG2 (m2 / mom))))\n      :mod (a / also))", "# ::snt Ken is going to a show on Saturday night.\n(g / go-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Ken\"))\n      :ARG4 (s / show-04)\n      :time (d / date-entity\n            :weekday (s2 / saturday)\n            :dayperiod (n2 / night)))", "# ::snt On Sunday Ken is seeing the grandkids at the zoo.\n(s / see-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Ken\"))\n      :ARG1 (p2 / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 p\n                  :ARG2 (g / grandkid)))\n      :time (d / date-entity\n            :weekday (s2 / sunday))\n      :location (z / zoo))"], "tree": ["(s / stress-02\n   :ARG0 (w / work-01\n            :ARG0 (p / person :name (n / name :op1 \"Ken\"))))", "(s / stress-02\n   :ARG0 (w / work-01\n            :ARG0 (p / person :name (n / name :op1 \"Ken\"))))", "(f2 / fight-01\n    :ARG1 (p2 / person\n              :name (n2 / name\n                        :op1 \"Brad\")))", "(f2 / fight-01\n    :ARG0 (p / person :name (n / name :op1 \"Ken\"))\n    :ARG1 (p2 / person\n              :name (n2 / name\n                        :op1 \"Brad\")))", "(f2 / fight-01\n    :ARG0 (p / person :name (n / name :op1 \"Ken\"))\n    :ARG1 (p2 / person\n              :name (n2 / name\n                        :op1 \"Brad\")))", "(s / stress-02\n   :ARG0 (f2 / fight-01\n             :ARG0 (p / person :name (n / name :op1 \"Ken\"))\n             :ARG1 (p2 / person\n                       :name (n2 / name\n                                 :op1 \"Brad\"))))", "(s / stress-02\n   :ARG0 (f2 / fight-01\n             :ARG0 (p / person :name (n / name :op1 \"Ken\"))\n             :ARG1 (p2 / person\n                       :name (n2 / name\n                                 :op1 \"Brad\")))\n   :ARG1 p)", "(f / feel-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ken\"))\n   :ARG1 (s / stress-02\n            :ARG0 (w / work-01\n                     :ARG0 p)))", "(f / feel-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ken\"))\n   :ARG1 (s / stress-02\n            :ARG0 (w / work-01\n                     :ARG0 p)))", "(s / stress-02\n   :ARG0 (a / and\n            :op1 (w / work-01\n                    :ARG0 p)\n            :op2 (f2 / fight-01\n                     :ARG0 (p / person :name (n / name :op1 \"Ken\"))\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Brad\")))))", "(s / stress-02\n   :ARG0 (a / and\n            :op1 (w / work-01\n                    :ARG0 p)\n            :op2 (f2 / fight-01\n                     :ARG0 (p / person :name (n / name :op1 \"Ken\"))\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Brad\"))))\n   :ARG1 p)", "(f / feel-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ken\"))\n   :ARG1 (s / stress-02\n            :ARG0 (f2 / fight-01\n                      :ARG0 p\n                      :ARG1 (p2 / person\n                                :name (n2 / name\n                                          :op1 \"Brad\")))\n            :ARG1 p))", "(f / feel-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ken\"))\n   :ARG1 (s / stress-02\n            :ARG0 (f2 / fight-01\n                      :ARG0 p\n                      :ARG1 (p2 / person\n                                :name (n2 / name\n                                          :op1 \"Brad\")))\n            :ARG1 p))", "(f / feel-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ken\"))\n   :ARG1 (s / stress-02\n            :ARG0 (a / and\n                     :op1 (w / work-01\n                             :ARG0 p)\n                     :op2 (f2 / fight-01\n                              :ARG0 p\n                              :ARG1 (p2 / person\n                                        :name (n2 / name\n                                                  :op1 \"Brad\"))))\n            :ARG1 p))", "(f / feel-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ken\"))\n   :ARG1 (s / stress-02\n            :ARG0 (a / and\n                     :op1 (w / work-01\n                             :ARG0 p)\n                     :op2 (f2 / fight-01\n                              :ARG0 p\n                              :ARG1 (p2 / person\n                                        :name (n2 / name\n                                                  :op1 \"Brad\"))))\n            :ARG1 p))", "(h / have-quant-91\n   :ARG2 (m / much)\n   :ARG3 (t2 / too))", "(g / go-on-15\n   :location (h2 / home\n                 :poss (p / person))\n   :mod (a / also))", "(g / go-on-15\n   :ARG1 (t / thing\n            :ARG1 (h / have-quant-91\n                     :ARG2 (m / much)\n                     :ARG3 (t2 / too))))", "(g / go-on-15\n   :ARG1 (t / thing\n            :ARG1 (h / have-quant-91\n                     :ARG2 (m / much)\n                     :ARG3 (t2 / too)))\n   :location (h2 / home\n                 :poss (p / person\n                          :ARG0 (h3 / have-rel-role-91\n                                    :ARG2 (m2 / mom))))\n   :mod (a / also))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ken\")))", "(g / go-02\n   :time (d / date-entity\n            :weekday (s2 / saturday)\n            :dayperiod (n2 / night)))", "(g / go-02\n   :time (d / date-entity\n            :weekday (s2 / saturday)\n            :dayperiod (n2 / night)))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ken\"))\n   :ARG4 (s / show-04))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ken\")))", "(s / see-01\n   :time (d / date-entity\n            :weekday (s2 / sunday))\n   :location (z / zoo))", "(s / see-01\n   :ARG1 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 (p / person :name (n / name :op1 \"Ken\"))\n                      :ARG2 (g / grandkid))))", "(s / see-01\n   :ARG1 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 (p / person :name (n / name :op1 \"Ken\"))\n                      :ARG2 (g / grandkid)))\n   :location (z / zoo))", "(s / see-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ken\"))\n   :ARG1 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 p\n                      :ARG2 (g / grandkid))))", "(s / see-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ken\"))\n   :ARG1 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 p\n                      :ARG2 (g / grandkid)))\n   :time (d / date-entity\n            :weekday (s2 / sunday)))", "(s / see-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ken\"))\n   :ARG1 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 p\n                      :ARG2 (g / grandkid)))\n   :time (d / date-entity\n            :weekday (s2 / sunday))\n   :location (z / zoo))"], "smus": ["Ken's work has stressed him out.", "Ken's work has stressed him out.", "Fighting Brad.", "Ken is fighting Brad.", "Ken is fighting Brad.", "The stress of Ken fighting Brad.", "Ken fighting Brad has stressed him.", "Ken feels stressed out at work.", "Ken feels stressed out at work.", "Stressed by his work and Ken fighting Brad.", "He was stressed over work and Ken fighting Brad.", "Ken feels stressed about fighting Brad.", "Ken feels stressed about fighting Brad.", "Ken feels stressed out over work and fighting Brad.", "Ken feels stressed out over work and fighting Brad.", "Too much.", "Also, in people's homes, things are going on.", "Too much going on.", "Too much goes on at mom's home also.", "Ken is going.", "Going Saturday night.", "Going Saturday night.", "Ken is going to the show.", "Ken is going.", "Seeking at the zoo on Sunday.", "Ken's grandchildren are seeing.", "Ken's grandchildren are seeing at the zoo.", "Ken is seeing his grandchildren.", "Ken was seeing his grandchildren Sunday.", "Ken was seeing his grandchildren Sunday at the zoo."]}, {"instance_id": "samsum-3", "summary": "Anna proposes Charlie eating a pizza tonight. Charlie refuses, because he is upset about the things that happened.", "summary_trees": ["# ::snt Anna proposes Charlie eating a pizza tonight.\n(p / propose-01\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Anna\"))\n      :ARG1 (e / eat-01\n            :ARG0 (p3 / person\n                  :name (n2 / name\n                        :op1 \"Charlie\"))\n            :ARG1 (p4 / pizza)\n            :time (d / date-entity\n                  :dayperiod (n3 / night)\n                  :mod (t / today))))", "# ::snt Charlie refuses, because he is upset about the things that happened.\n(r / refuse-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Charlie\"))\n      :ARG1-of (c / cause-01\n            :ARG0 (u / upset-01\n                  :ARG0 (t / thing)\n                  :ARG1 p)))"], "tree": ["(e / eat-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"Charlie\")))", "(e / eat-01\n   :time (d / date-entity\n            :dayperiod (n3 / night)\n            :mod (t / today)))", "(e / eat-01\n   :time (d / date-entity\n            :dayperiod (n3 / night)\n            :mod (t / today)))", "(e / eat-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"Charlie\"))\n   :ARG1 (p4 / pizza))", "(e / eat-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"Charlie\"))\n   :ARG1 (p4 / pizza)\n   :time (d / date-entity\n            :dayperiod (n3 / night)\n            :mod (t / today)))", "(e / eat-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"Charlie\"))\n   :ARG1 (p4 / pizza)\n   :time (d / date-entity\n            :dayperiod (n3 / night)\n            :mod (t / today)))", "(p / propose-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Anna\"))\n   :ARG1 (e / eat-01\n            :ARG0 (p3 / person\n                      :name (n2 / name\n                                :op1 \"Charlie\"))\n            :ARG1 (p4 / pizza)\n            :time (d / date-entity\n                     :dayperiod (n3 / night)\n                     :mod (t / today))))", "(p / propose-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Anna\"))\n   :ARG1 (e / eat-01\n            :ARG0 (p3 / person\n                      :name (n2 / name\n                                :op1 \"Charlie\"))\n            :ARG1 (p4 / pizza)\n            :time (d / date-entity\n                     :dayperiod (n3 / night)\n                     :mod (t / today))))", "(u / upset-01\n   :ARG0 (t / thing)\n   :ARG1 (p / person :name (n / name :op1 \"Charlie\")))", "(u / upset-01\n   :ARG0 (t / thing)\n   :ARG1 (p / person :name (n / name :op1 \"Charlie\")))", "(c / cause-01\n   :ARG0 (u / upset-01\n            :ARG0 (t / thing)\n            :ARG1 (p / person :name (n / name :op1 \"Charlie\"))))", "(r / refuse-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Charlie\"))\n   :ARG1 (c / cause-01\n            :ARG0 (u / upset-01\n                     :ARG0 (t / thing)\n                     :ARG1 p)))"], "smus": ["Charlie was eating.", "Eating tonight.", "Eating tonight.", "Charlie was eating pizza.", "Charlie was eating pizza tonight.", "Charlie was eating pizza tonight.", "Anna proposes Charlie is eating pizza tonight.", "Anna proposes Charlie is eating pizza tonight.", "Charlie was upset by things.", "Charlie was upset by things.", "Because things upset Charlie.", "Charlie refuses because things upset him."]}, {"instance_id": "samsum-4", "summary": "It's Tom's birthday. Lara and Gary will come to Tom's place about 5 pm to prepare everything before Tom gets back home at 5:30. Gary has already paid for the cake - Lara will pick it up and she will also get the balloons. ", "summary_trees": ["# ::snt It's Tom's birthday.\n(b / birthday\n      :poss (p / person\n            :name (n / name\n                  :op1 \"Tom\")))", "# ::snt Lara and Gary will come to Tom's place about 5 pm to prepare everything before Tom gets back home at 5:30.\n(c / come-01\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Lara\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Gary\")))\n      :ARG4 (p3 / place\n            :poss (p4 / person\n                  :name (n3 / name\n                        :op1 \"Tom\")))\n      :time (a2 / about\n            :op1 (d / date-entity\n                  :time \"17:00\"))\n      :purpose (p5 / prepare-01\n            :ARG0 a\n            :ARG1 (e / everything)\n            :time (b / before\n                  :op1 (g / get-back-10\n                        :ARG1 p4\n                        :ARG2 (h / home)\n                        :time (d2 / date-entity\n                              :time \"5:30\")))))", "# ::snt Gary has already paid for the cake - Lara will pick it up and she will also get the balloons.\n(a / and\n      :op1 (p / pay-01\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Gary\"))\n            :ARG3 (c / cake)\n            :time (a2 / already))\n      :op2 (a3 / and\n            :op1 (p3 / pick-up-04\n                  :ARG0 (p4 / person\n                        :name (n2 / name\n                              :op1 \"Lara\"))\n                  :ARG1 c)\n            :op2 (g / get-01\n                  :ARG0 p4\n                  :ARG1 (b / balloon)\n                  :mod (a4 / also))))"], "tree": ["(b / birthday\n   :poss (p / person\n            :name (n / name\n                     :op1 \"Tom\")))", "(p5 / prepare-01\n    :ARG0 (a / and)\n    :ARG1 (e / everything))", "(g / get-back-10\n   :time (d2 / date-entity\n             :time \"5:30\"))", "(c / come-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Gary\")))", "(g / get-back-10\n   :ARG1 (p4 / person :name (n3 / name :op1 \"Tom\"))\n   :ARG2 (h / home)\n   :time (d2 / date-entity\n             :time \"5:30\"))", "(p5 / prepare-01\n    :time (b / before\n             :op1 (g / get-back-10\n                     :time (d2 / date-entity\n                               :time \"5:30\"))))", "(c / come-01\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Lara\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Gary\"))))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Lara\"))\n   :ARG4 (p3 / place\n             :poss (p4 / person\n                       :name (n3 / name\n                                 :op1 \"Tom\"))))", "(p5 / prepare-01\n    :ARG0 (a / and)\n    :ARG1 (e / everything)\n    :time (b / before\n             :op1 (g / get-back-10\n                     :ARG1 (p4 / person :name (n3 / name :op1 \"Tom\"))\n                     :ARG2 (h / home)\n                     :time (d2 / date-entity\n                               :time \"5:30\"))))", "(c / come-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Gary\"))\n   :ARG4 (p3 / place\n             :poss (p4 / person\n                       :name (n3 / name\n                                 :op1 \"Tom\")))\n   :ARG4 p3)", "(c / come-01\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Lara\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Gary\")))\n   :ARG4 (p3 / place\n             :poss (p4 / person\n                       :name (n3 / name\n                                 :op1 \"Tom\"))))", "(g / get-01\n   :ARG0 (p4 / person :name (n2 / name :op1 \"Lara\"))\n   :ARG1 (b / balloon)\n   :mod (a4 / also))", "(p / pay-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Gary\")))", "(p / pay-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Gary\"))\n   :ARG3 (c / cake))", "(p / pay-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Gary\"))\n   :ARG3 (c / cake)\n   :time (a2 / already))"], "smus": ["Tom's birthday", "Prepare everything.", "Get back at 5:30", "Come Gary.", "Tom got back home at 5.30pm.", "Prepare before getting back at 5.30pm.", "Come, Laura and Gary.", "\"Lara, come to Tom's place.\"", "Everything will be prepared before Tom gets back home at 5.30pm.", "Gary will come to Tom's place.", "Both Laura and Gary will come to Tom's place.", "Laura will also get the balloons.", "Gary has paid.", "Gary has paid for the cake.", "Gary has already paid for the cake."]}, {"instance_id": "samsum-5", "summary": "Rashi is confused by too many career choices. Teacher advises him to choose something he has passion for and what interests him.", "summary_trees": ["# ::snt Rashi is confused by too many career choices.\n(c / confuse-01\n      :ARG0 (c2 / choose-01\n            :ARG1 (c3 / career)\n            :ARG1-of (h / have-quant-91\n                  :ARG2 (m / many)\n                  :ARG3 (t / too)))\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Rashi\")))", "# ::snt Teacher advises him to choose something he has passion for and what interests him.\n(a / advise-01\n      :ARG0 (p / person\n            :ARG0-of (t / teach-01))\n      :ARG1 (h / he)\n      :ARG2 (c / choose-01\n            :ARG0 h\n            :ARG1 (a2 / and\n                  :op1 (s / something\n                        :ARG1-of (p2 / passion-01\n                              :ARG0 h))\n                  :op2 (t2 / thing\n                        :ARG0-of (ii / interest-01\n                              :ARG1 h)))))"], "tree": ["(h / have-quant-91\n   :ARG2 (m / many)\n   :ARG3 (t / too))", "(c / confuse-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Rashi\")))", "(c2 / choose-01\n    :ARG1 (c3 / career)\n    :ARG1 (h / have-quant-91\n             :ARG2 (m / many)\n             :ARG3 (t / too)))", "(c / confuse-01\n   :ARG0 (c2 / choose-01\n             :ARG1 (c3 / career)\n             :ARG1 (h / have-quant-91\n                      :ARG2 (m / many)\n                      :ARG3 (t / too))))", "(c / confuse-01\n   :ARG0 (c2 / choose-01\n             :ARG1 (c3 / career)\n             :ARG1 (h / have-quant-91\n                      :ARG2 (m / many)\n                      :ARG3 (t / too)))\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Rashi\")))", "(c / confuse-01\n   :ARG0 (c2 / choose-01\n             :ARG1 (c3 / career)\n             :ARG1 (h / have-quant-91\n                      :ARG2 (m / many)\n                      :ARG3 (t / too)))\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Rashi\")))", "(a / advise-01\n   :ARG0 (p / person\n            :ARG0 (t / teach-01))\n   :ARG1 (h / he)\n   :ARG2 (c / choose-01\n            :ARG0 h\n            :ARG1 (s / something\n                     :ARG1 (p2 / passion-01\n                               :ARG0 h))))", "(a / advise-01\n   :ARG0 (p / person\n            :ARG0 (t / teach-01))\n   :ARG1 (h / he)\n   :ARG2 (c / choose-01\n            :ARG0 h\n            :ARG1 (t2 / thing\n                      :ARG0 (ii / interest-01\n                                :ARG1 h))))", "(a / advise-01\n   :ARG0 (p / person\n            :ARG0 (t / teach-01))\n   :ARG1 (h / he)\n   :ARG2 (c / choose-01\n            :ARG0 h\n            :ARG1 (a2 / and\n                      :op1 (s / something\n                              :ARG1 (p2 / passion-01\n                                        :ARG0 h))\n                      :op2 (t2 / thing\n                               :ARG0 (ii / interest-01\n                                         :ARG1 h)))))"], "smus": ["Too many.", "Rash was confused.", "Too many career choices.", "Too many career choices are confusing.", "Too many career choices confuse Rash.", "Too many career choices confuse Rash.", "He is advised by a teacher to choose something that is his passion.", "The teacher advises him to choose what interests him.", "He is advised by a teacher to choose something that is his passion and what interests him."]}, {"instance_id": "samsum-6", "summary": "Sarah paid 500 quid to go back home for Passover. Sarah is going to the desert with the whole family. Lia went to Negev last year. Passover is both Lia and Sarah's favorite holiday. Lia will talk to her mum about the tickets. Sarah is flying on the 28th.", "summary_trees": ["# ::snt Sarah paid 500 quid to go back home for Passover.\n(p / pay-01\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Sarah\"))\n      :ARG1 (m / monetary-quantity\n            :quant 500\n            :unit (p3 / pound))\n      :ARG3 (g / go-02\n            :ARG0 p2\n            :ARG4 (h / home)\n            :direction (b / back)\n            :purpose (f / festival\n                  :name (n2 / name\n                        :op1 \"Passover\"))))", "# ::snt Sarah is going to the desert with the whole family.\n(g / go-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Sarah\"))\n      :ARG4 (d / desert)\n      :accompanier (f / family\n            :mod (w / whole)))", "# ::snt Lia went to Negev last year.\n(g / go-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Lia\"))\n      :ARG4 (l / local-region\n            :name (n2 / name\n                  :op1 \"Negev\"))\n      :time (y / year\n            :mod (l2 / last)))", "# ::snt Passover is both Lia and Sarah's favorite holiday.\n(h / holiday\n      :domain (f / festival\n            :name (n / name\n                  :op1 \"Passover\"))\n      :ARG1-of (f2 / favor-01\n            :ARG0 (a / and\n                  :op1 (p / person\n                        :name (n2 / name\n                              :op1 \"Lia\"))\n                  :op2 (p2 / person\n                        :name (n3 / name\n                              :op1 \"Sarah\")))))", "# ::snt Lia will talk to her mum about the tickets.\n(t / talk-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Lia\"))\n      :ARG1 (t2 / ticket)\n      :ARG2 (p2 / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 p\n                  :ARG2 (m / mum))))", "# ::snt Sarah is flying on the 28th.\n(f / fly-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Sarah\"))\n      :time (d / date-entity\n            :day 28))"], "tree": ["(g / go-02\n   :ARG0 (p2 / person :name (n / name :op1 \"Sarah\"))\n   :ARG4 (h / home))", "(p / pay-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Sarah\")))", "(g / go-02\n   :purpose (f / festival\n               :name (n2 / name\n                         :op1 \"Passover\")))", "(g / go-02\n   :direction (b / back)\n   :purpose (f / festival\n               :name (n2 / name\n                         :op1 \"Passover\")))", "(g / go-02\n   :ARG0 (p2 / person :name (n / name :op1 \"Sarah\"))\n   :ARG4 (h / home)\n   :purpose (f / festival\n               :name (n2 / name\n                         :op1 \"Passover\")))", "(g / go-02\n   :ARG0 (p2 / person :name (n / name :op1 \"Sarah\"))\n   :ARG4 (h / home)\n   :direction (b / back)\n   :purpose (f / festival\n               :name (n2 / name\n                         :op1 \"Passover\")))", "(p / pay-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Sarah\"))\n   :ARG3 (g / go-02\n            :ARG0 p2\n            :ARG4 (h / home)\n            :direction (b / back)\n            :purpose (f / festival\n                        :name (n2 / name\n                                  :op1 \"Passover\"))))", "(g / go-02\n   :accompanier (f / family\n                   :mod (w / whole)))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sarah\")))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sarah\"))\n   :ARG4 (d / desert))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sarah\"))\n   :ARG4 (d / desert)\n   :accompanier (f / family\n                   :mod (w / whole)))", "(g / go-02\n   :time (y / year\n            :mod (l2 / last)))", "(g / go-02\n   :time (y / year\n            :mod (l2 / last)))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lia\")))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lia\"))\n   :ARG4 (l / local-region\n            :name (n2 / name\n                      :op1 \"Negev\")))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lia\"))\n   :ARG4 (l / local-region\n            :name (n2 / name\n                      :op1 \"Negev\"))\n   :time (y / year\n            :mod (l2 / last)))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lia\"))\n   :ARG4 (l / local-region\n            :name (n2 / name\n                      :op1 \"Negev\"))\n   :time (y / year\n            :mod (l2 / last)))", "(t / talk-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lia\")))", "(t / talk-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lia\"))\n   :ARG1 (t2 / ticket))", "(t / talk-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lia\"))\n   :ARG2 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 p\n                      :ARG2 (m / mum))))", "(t / talk-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lia\"))\n   :ARG1 (t2 / ticket)\n   :ARG2 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 p\n                      :ARG2 (m / mum))))", "(t / talk-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lia\"))\n   :ARG1 (t2 / ticket)\n   :ARG2 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 p\n                      :ARG2 (m / mum))))", "(f / fly-01\n   :time (d / date-entity\n            :day 28))", "(f / fly-01\n   :time (d / date-entity\n            :day 28))", "(f / fly-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Sarah\")))", "(f / fly-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Sarah\"))\n   :time (d / date-entity\n            :day 28))", "(f / fly-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Sarah\"))\n   :time (d / date-entity\n            :day 28))"], "smus": ["Sarah will go home.", "Sarah paid.", "Go for Passover.", "Go back for Passover.", "Sarah will go home for Passover.", "Sarah will go back home for Passover.", "Sarah paid to go back home for Passover.", "Going with the whole family.", "Sarah is going.", "Sarah is going to the desert.", "Sarah was going to the desert with her whole family.", "went last year.", "went last year.", "Lia went.", "Lia went to Negev.", "Lia went to Negev last year.", "Lia went to Negev last year.", "Lia, talk.", "Lia, talk about the tickets.", "Lia will talk to her mum.", "Lia will talk to her mum about the tickets.", "Lia will talk to her mum about the tickets.", "Flying on the 28th.", "Flying on the 28th.", "Sarah is flying.", "Sarah will be flying on the 28th.", "Sarah will be flying on the 28th."]}, {"instance_id": "samsum-7", "summary": "Ann doesn't know what she should give to her dad as a birthday gift. He's turning 50. Fiona tries to help her and suggests a paintball match.", "summary_trees": ["# ::snt Ann doesn't know what she should give to her dad as a birthday gift.\n(k / know-01\n      :polarity -\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Ann\"))\n      :ARG1 (t / thing\n            :ARG1-of (g / gift-01\n                  :ARG2 (p2 / person\n                        :ARG0-of (h / have-rel-role-91\n                              :ARG1 p\n                              :ARG2 (d / dad)))\n                  :purpose (b / birthday))\n            :ARG1-of (g2 / give-01\n                  :ARG0 p\n                  :ARG2 p2\n                  :ARG1-of (r / recommend-01))))", "# ::snt He's turning 50.\n(t / turn-02\n      :ARG1 (h / he)\n      :ARG2 (a / age-01\n            :ARG1 h\n            :ARG2 (t2 / temporal-quantity\n                  :quant 50\n                  :unit (y / year))))", "# ::snt Fiona tries to help her and suggests a paintball match.\n(a / and\n      :op1 (t / try-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Fiona\"))\n            :ARG1 (h / help-01\n                  :ARG0 p\n                  :ARG1 (s / she)))\n      :op2 (s2 / suggest-01\n            :ARG0 p\n            :ARG1 (m / match-03\n                  :ARG2 (p2 / paintball))))"], "tree": ["(h / have-rel-role-91\n   :ARG1 (p / person :name (n / name :op1 \"Ann\"))\n   :ARG2 (d / dad))", "(k / know-01\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ann\"))\n   :ARG1 (t / thing\n            :ARG1 (g / gift-01\n                     :ARG2 (p2 / person\n                               :ARG0 (h / have-rel-role-91\n                                        :ARG1 p\n                                        :ARG2 (d / dad)))\n                     :purpose (b / birthday))))", "(k / know-01\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ann\"))\n   :ARG1 (t / thing\n            :ARG1 (g / gift-01\n                     :ARG2 (p2 / person\n                               :ARG0 (h / have-rel-role-91\n                                        :ARG1 p\n                                        :ARG2 (d / dad)))\n                     :purpose (b / birthday))))", "(a / age-01\n   :ARG1 (h / he)\n   :ARG2 (t2 / temporal-quantity\n             :quant 50\n             :unit (y / year)))", "(a / age-01\n   :ARG1 (h / he)\n   :ARG2 (t2 / temporal-quantity\n             :quant 50\n             :unit (y / year)))", "(t / turn-02\n   :ARG1 (h / he)\n   :ARG2 (a / age-01\n            :ARG1 h\n            :ARG2 (t2 / temporal-quantity\n                      :quant 50\n                      :unit (y / year))))", "(t / turn-02\n   :ARG1 (h / he)\n   :ARG2 (a / age-01\n            :ARG1 h\n            :ARG2 (t2 / temporal-quantity\n                      :quant 50\n                      :unit (y / year))))", "(h / help-01\n   :ARG0 (p / person :name (n / name :op1 \"Fiona\"))\n   :ARG1 (s / she))", "(h / help-01\n   :ARG0 (p / person :name (n / name :op1 \"Fiona\"))\n   :ARG1 (s / she))", "(s2 / suggest-01\n    :ARG0 (p / person :name (n / name :op1 \"Fiona\"))\n    :ARG1 (m / match-03\n             :ARG2 (p2 / paintball)))", "(s2 / suggest-01\n    :ARG0 (p / person :name (n / name :op1 \"Fiona\"))\n    :ARG1 (m / match-03\n             :ARG2 (p2 / paintball)))", "(t / try-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Fiona\"))\n   :ARG1 (h / help-01\n            :ARG0 p\n            :ARG1 (s / she)))", "(t / try-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Fiona\"))\n   :ARG1 (h / help-01\n            :ARG0 p\n            :ARG1 (s / she)))"], "smus": ["Ann's dad", "Ann didn't know what her dad was getting for her birthday.", "Ann didn't know what her dad was getting for her birthday.", "He is 50.", "He is 50.", "He is turning 50.", "He is turning 50.", "Fiona would help her.", "Fiona would help her.", "Fiona suggests a paintball match.", "Fiona suggests a paintball match.", "Fiona tries to help her.", "Fiona tries to help her."]}, {"instance_id": "samsum-8", "summary": "Emma, Peter and Daniel are going to Amiens tomorrow. Emma and Daniel are tired of Paris. Emma and Daniel will meet at Emma's place tomorrow at 9 AM.", "summary_trees": ["# ::snt Emma, Peter and Daniel are going to Amiens tomorrow.\n(g / go-02\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Emma\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Peter\"))\n            :op3 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Daniel\")))\n      :ARG4 (c / city\n            :name (n4 / name\n                  :op1 \"Amiens\"))\n      :time (t / tomorrow))", "# ::snt Emma and Daniel are tired of Paris.\n(t / tire-03\n      :ARG0 (c / city\n            :name (n / name\n                  :op1 \"Paris\"))\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n2 / name\n                        :op1 \"Emma\"))\n            :op2 (p2 / person\n                  :name (n3 / name\n                        :op1 \"Daniel\"))))", "# ::snt Emma and Daniel will meet at Emma's place tomorrow at 9 AM.\n(m / meet-03\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Emma\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Daniel\"))\n      :time (t / tomorrow\n            :time \"9:00\")\n      :location (p3 / place\n            :poss p))"], "tree": ["(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Emma\")))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Peter\")))", "(g / go-02\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Daniel\")))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Emma\"))\n   :ARG4 (c / city\n            :name (n4 / name\n                      :op1 \"Amiens\")))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Peter\"))\n   :ARG4 (c / city\n            :name (n4 / name\n                      :op1 \"Amiens\")))", "(g / go-02\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Daniel\"))\n   :ARG4 (c / city\n            :name (n4 / name\n                      :op1 \"Amiens\"))\n   :ARG4 c)", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Emma\"))\n   :ARG4 (c / city\n            :name (n4 / name\n                      :op1 \"Amiens\"))\n   :time (t / tomorrow))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Peter\"))\n   :ARG4 (c / city\n            :name (n4 / name\n                      :op1 \"Amiens\"))\n   :time (t / tomorrow))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Emma\"))\n   :ARG4 (c / city\n            :name (n4 / name\n                      :op1 \"Amiens\"))\n   :time (t / tomorrow))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Peter\"))\n   :ARG4 (c / city\n            :name (n4 / name\n                      :op1 \"Amiens\"))\n   :time (t / tomorrow))", "(g / go-02\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Daniel\"))\n   :ARG4 (c / city\n            :name (n4 / name\n                      :op1 \"Amiens\"))\n   :ARG4 c\n   :time (t / tomorrow))", "(g / go-02\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Daniel\"))\n   :ARG4 (c / city\n            :name (n4 / name\n                      :op1 \"Amiens\"))\n   :ARG4 c\n   :time (t / tomorrow))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Emma\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Peter\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Daniel\"))))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Emma\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Peter\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Daniel\")))\n   :ARG4 (c / city\n            :name (n4 / name\n                      :op1 \"Amiens\")))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Emma\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Peter\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Daniel\")))\n   :ARG4 (c / city\n            :name (n4 / name\n                      :op1 \"Amiens\"))\n   :time (t / tomorrow))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Emma\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Peter\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Daniel\")))\n   :ARG4 (c / city\n            :name (n4 / name\n                      :op1 \"Amiens\"))\n   :time (t / tomorrow))", "(t / tire-03\n   :ARG0 (c / city\n            :name (n / name\n                     :op1 \"Paris\"))\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Emma\")))", "(t / tire-03\n   :ARG0 (c / city\n            :name (n / name\n                     :op1 \"Paris\"))\n   :ARG1 (p2 / person\n             :name (n3 / name\n                       :op1 \"Daniel\")))", "(t / tire-03\n   :ARG0 (c / city\n            :name (n / name\n                     :op1 \"Paris\"))\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n2 / name\n                              :op1 \"Emma\"))\n            :op2 (p2 / person\n                     :name (n3 / name\n                               :op1 \"Daniel\"))))", "(m / meet-03\n   :location (p3 / place\n                 :poss (p / person :name (n / name :op1 \"Emma\"))))", "(m / meet-03\n   :time (t / tomorrow\n            :time \"9:00\"))", "(m / meet-03\n   :time (t / tomorrow\n            :time \"9:00\"))", "(m / meet-03\n   :time (t / tomorrow\n            :time \"9:00\"))", "(m / meet-03\n   :location (p3 / place\n                 :poss (p / person :name (n / name :op1 \"Emma\"))))", "(m / meet-03\n   :time (t / tomorrow\n            :time \"9:00\"))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Emma\")))", "(m / meet-03\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Daniel\")))", "(m / meet-03\n   :time (t / tomorrow\n            :time \"9:00\")\n   :location (p3 / place))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Emma\"))\n   :location (p3 / place\n                 :poss p))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Emma\"))\n   :time (t / tomorrow\n            :time \"9:00\"))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Emma\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Daniel\")))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Emma\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Daniel\"))\n   :time (t / tomorrow\n            :time \"9:00\"))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Emma\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Daniel\"))\n   :location (p3 / place\n                 :poss p))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Emma\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Daniel\"))\n   :time (t / tomorrow\n            :time \"9:00\")\n   :location (p3 / place\n                 :poss p))"], "smus": ["Emma is going.", "Peter is going.", "Daniel is going.", "Emma is going to Amiens.", "Peter is going to Amiens.", "Daniel is going to Amiens.", "Emma is going to Amiens tomorrow.", "Peter is going to Amiens tomorrow.", "Emma is going to Amiens tomorrow.", "Peter is going to Amiens tomorrow.", "Daniel is going to Amiens tomorrow.", "Daniel is going to Amiens tomorrow.", "Emma, Peter and Daniel are going.", "Emma, Peter and Daniel are going to Amiens.", "Emma, Peter and Daniel are going to Amiens tomorrow.", "Emma, Peter and Daniel are going to Amiens tomorrow.", "Emma is tired of Paris.", "Daniel is tired of Paris.", "Emma and Daniel are tired of Paris.", "Meet at Emma's place.", "Meet tomorrow at 9am.", "Meet tomorrow at 9am.", "Meet tomorrow at 9am.", "Meet at Emma's place.", "Meet tomorrow at 9am.", "Emma will meet.", "meet Daniel", "Meet at the place at 9am tomorrow.", "Emma will meet at her place.", "Emma will meet at 9am tomorrow.", "Emma will meet Daniel.", "Emma will meet Daniel at 9am tomorrow.", "Emma will meet Daniel at her place.", "Emma will meet Daniel at her place at 9am tomorrow."]}, {"instance_id": "samsum-9", "summary": "Sam won't finish work till 5. Sam is bringing him over about 9 am. Sam will see Abdellilah in the morning. ", "summary_trees": ["# ::snt Sam won't finish work till 5.\n(f / finish-01\n      :polarity -\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Sam\"))\n      :ARG1 (w / work-01\n            :ARG0 p)\n      :time (t / till\n            :op1 (d / date-entity\n                  :time \"17:00\")))", "# ::snt Sam is bringing him over about 9 am.\n(b / bring-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Sam\"))\n      :ARG1 (h / he)\n      :ARG2 (o / over)\n      :time (a / about\n            :op1 (d / date-entity\n                  :time \"9:00\")))", "# ::snt Sam will see Abdellilah in the morning.\n(s / see-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Sam\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Abdellilah\"))\n      :time (d / date-entity\n            :dayperiod (m / morning)))"], "tree": ["(f / finish-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sam\")))", "(f / finish-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sam\"))\n   :ARG1 (w / work-01\n            :ARG0 p))", "(b / bring-01\n   :ARG1 (h / he)\n   :ARG2 (o / over))", "(b / bring-01\n   :time (a / about\n            :op1 (d / date-entity\n                    :time \"9:00\")))", "(b / bring-01\n   :time (a / about\n            :op1 (d / date-entity\n                    :time \"9:00\")))", "(b / bring-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sam\"))\n   :ARG1 (h / he))", "(b / bring-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sam\"))\n   :ARG1 (h / he)\n   :ARG2 (o / over))", "(s / see-01\n   :time (d / date-entity\n            :dayperiod (m / morning)))", "(s / see-01\n   :time (d / date-entity\n            :dayperiod (m / morning)))", "(s / see-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sam\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Abdellilah\")))", "(s / see-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sam\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Abdellilah\"))\n   :time (d / date-entity\n            :dayperiod (m / morning)))", "(s / see-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sam\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Abdellilah\"))\n   :time (d / date-entity\n            :dayperiod (m / morning)))"], "smus": ["Sam will finish.", "Sam will finish his work.", "Bringing him over.", "Bringing about 9 a.m.", "Bringing about 9 a.m.", "Sam was bringing him.", "Sam was bringing him over.", "See this morning.", "See this morning.", "Sam will see Abdellilah.", "Sam will see Abdellilah this morning.", "Sam will see Abdellilah this morning."]}, {"instance_id": "samsum-10", "summary": "Jeff and Mark are amazed by his car. They bet 100 dollars who gets to drive it first.", "summary_trees": ["# ::snt Jeff and Mark are amazed by his car.\n(a / amaze-01\n      :ARG0 (c / car\n            :poss (h / he))\n      :ARG1 (a2 / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Jeff\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Mark\"))))", "# ::snt They bet 100 dollars who gets to drive it first.\n(b / bet-01\n      :ARG0 (t / they)\n      :ARG1 (m / monetary-quantity\n            :quant 100\n            :unit (d / dollar))\n      :ARG2 (d2 / drive-01\n            :ARG0 (a / amr-unknown)\n            :ARG1 (ii / it)\n            :ord (o / ordinal-entity\n                  :value 1)))"], "tree": ["(a / amaze-01\n   :ARG0 (c / car\n            :poss (h / he)))", "(a / amaze-01\n   :ARG0 (c / car\n            :poss (h / he))\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Jeff\")))", "(a / amaze-01\n   :ARG0 (c / car\n            :poss (h / he))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Mark\")))", "(a / amaze-01\n   :ARG0 (c / car\n            :poss (h / he))\n   :ARG1 (a2 / and\n             :op1 (p / person\n                     :name (n / name\n                              :op1 \"Jeff\"))\n             :op2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Mark\"))))", "(d2 / drive-01\n    :ord (o / ordinal-entity\n            :value 1))", "(d2 / drive-01\n    :ARG0 (a / amr-unknown)\n    :ARG1 (ii / it))", "(d2 / drive-01\n    :ARG0 (a / amr-unknown)\n    :ARG1 (ii / it)\n    :ord (o / ordinal-entity\n            :value 1))", "(b / bet-01\n   :ARG0 (t / they)\n   :ARG1 (m / monetary-quantity\n            :quant 100\n            :unit (d / dollar)))", "(b / bet-01\n   :ARG2 (d2 / drive-01\n             :ARG0 (a / amr-unknown)\n             :ARG1 (ii / it)\n             :ord (o / ordinal-entity\n                     :value 1)))", "(b / bet-01\n   :ARG0 (t / they)\n   :ARG2 (d2 / drive-01\n             :ARG0 (a / amr-unknown)\n             :ARG1 (ii / it)\n             :ord (o / ordinal-entity\n                     :value 1)))", "(b / bet-01\n   :ARG0 (t / they)\n   :ARG1 (m / monetary-quantity\n            :quant 100\n            :unit (d / dollar))\n   :ARG2 (d2 / drive-01\n             :ARG0 (a / amr-unknown)\n             :ARG1 (ii / it)\n             :ord (o / ordinal-entity\n                     :value 1)))"], "smus": ["His car was amazing.", "Jeff was amazed by his car.", "Mark was amazed by his car.", "Jeff and Mark were amazed by his car.", "Drive first.", "Who would drive it?", "Who would drive it first?", "They bet 100 dollars.", "Who do you bet will drive it first?", "They bet who will drive it first.", "They bet 100 dollars on who will drive it first."]}, {"instance_id": "samsum-11", "summary": "Jannet thanks Nadia for coming to her place yesterday. Nadia enjoyed the party and is still in a dancing mood. They are going to the disco next time.", "summary_trees": ["# ::snt Jannet thanks Nadia for coming to her place yesterday.\n(t / thank-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jannet\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Nadia\"))\n      :ARG2 (c / come-01\n            :ARG1 p2\n            :ARG4 (p3 / place\n                  :poss p)\n            :time (y / yesterday)))", "# ::snt Nadia enjoyed the party and is still in a dancing mood.\n(a / and\n      :op1 (e / enjoy-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Nadia\"))\n            :ARG1 (p2 / party-01))\n      :op2 (d / dance-01\n            :ARG0 p\n            :time (s / still)))", "# ::snt They are going to the disco next time.\n(g / go-02\n      :ARG0 (t / they)\n      :ARG4 (d / disco)\n      :time (t2 / time\n            :mod (n / next)))"], "tree": ["(c / come-01\n   :ARG1 (p2 / person :name (n2 / name :op1 \"Nadia\"))\n   :time (y / yesterday))", "(c / come-01\n   :ARG1 (p2 / person :name (n2 / name :op1 \"Nadia\"))\n   :ARG4 (p3 / place\n             :poss (p / person :name (n / name :op1 \"Jannet\")))\n   :time (y / yesterday))", "(c / come-01\n   :ARG1 (p2 / person :name (n2 / name :op1 \"Nadia\"))\n   :ARG4 (p3 / place\n             :poss (p / person :name (n / name :op1 \"Jannet\")))\n   :time (y / yesterday))", "(t / thank-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jannet\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Nadia\")))", "(t / thank-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jannet\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Nadia\"))\n   :ARG2 (c / come-01\n            :ARG1 p2\n            :ARG4 (p3 / place\n                      :poss p)\n            :time (y / yesterday)))", "(t / thank-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jannet\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Nadia\"))\n   :ARG2 (c / come-01\n            :ARG1 p2\n            :ARG4 (p3 / place\n                      :poss p)\n            :time (y / yesterday)))", "(d / dance-01\n   :ARG0 (p / person :name (n / name :op1 \"Nadia\"))\n   :time (s / still))", "(e / enjoy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nadia\"))\n   :ARG1 (p2 / party-01))", "(e / enjoy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nadia\"))\n   :ARG1 (p2 / party-01))", "(g / go-02\n   :ARG0 (t / they)\n   :ARG4 (d / disco))", "(g / go-02\n   :time (t2 / time\n             :mod (n / next)))", "(g / go-02\n   :time (t2 / time\n             :mod (n / next)))", "(g / go-02\n   :ARG0 (t / they)\n   :ARG4 (d / disco)\n   :time (t2 / time\n             :mod (n / next)))", "(g / go-02\n   :ARG0 (t / they)\n   :ARG4 (d / disco)\n   :time (t2 / time\n             :mod (n / next)))"], "smus": ["Nadia was coming yesterday.", "Nadia was coming to Janet's place yesterday.", "Nadia was coming to Janet's place yesterday.", "Janet thanks Nadia", "Janet thanks Nadia for coming into her place yesterday.", "Janet thanks Nadia for coming into her place yesterday.", "Nadia is still dancing.", "Nadia enjoyed the party.", "Nadia enjoyed the party.", "They were going to a disco.", "Going next time.", "Going next time.", "Next time they will be going to a disco.", "Next time they will be going to a disco."]}, {"instance_id": "samsum-12", "summary": "Lisa isn't going home yet. Daisy wants her to be back before 11 p.m.", "summary_trees": ["# ::snt Lisa isn't going home yet.\n(g / go-02\n      :polarity -\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Lisa\"))\n      :ARG4 (h / home)\n      :time (y / yet))", "# ::snt Daisy wants her to be back before 11 p.m.\n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Daisy\"))\n      :ARG1 (r / return-01\n            :ARG1 (s / she)\n            :time (b / before\n                  :op1 (d / date-entity\n                        :time \"23:00\"))))"], "tree": ["(g / go-02\n   :polarity -\n   :time (y / yet))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lisa\"))\n   :ARG4 (h / home)\n   :time (y / yet))", "(g / go-02\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lisa\"))\n   :ARG4 (h / home)\n   :time (y / yet))", "(r / return-01\n   :time (b / before\n            :op1 (d / date-entity\n                    :time \"23:00\")))", "(r / return-01\n   :time (b / before\n            :op1 (d / date-entity\n                    :time \"23:00\")))"], "smus": ["Not going yet.", "Lisa is going home yet.", "Lisa isn't going home yet.", "Return before 23:00", "Return before 23:00"]}, {"instance_id": "samsum-13", "summary": "Paula needs the paper from the office to submit an application.", "summary_trees": ["# ::snt Paula needs the paper from the office to submit an application.\n(n / need-01\n      :ARG0 (p / person\n            :name (n2 / name\n                  :op1 \"Paula\"))\n      :ARG1 (p2 / paper\n            :source (o / office))\n      :purpose (s / submit-01\n            :ARG0 p\n            :ARG1 (a / apply-01\n                  :ARG0 p)))"], "tree": ["(s / submit-01\n   :ARG1 (a / apply-01\n            :ARG0 (p / person :name (n2 / name :op1 \"Paula\"))))", "(s / submit-01\n   :ARG0 (p / person :name (n2 / name :op1 \"Paula\"))\n   :ARG1 (a / apply-01\n            :ARG0 p))", "(s / submit-01\n   :ARG0 (p / person :name (n2 / name :op1 \"Paula\"))\n   :ARG1 (a / apply-01\n            :ARG0 p))", "(n / need-01\n   :ARG1 (p2 / paper\n             :source (o / office)))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Paula\")))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Paula\"))\n   :ARG1 (p2 / paper\n             :source (o / office)))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Paula\"))\n   :ARG1 (p2 / paper\n             :source (o / office))\n   :purpose (s / submit-01\n               :ARG0 p\n               :ARG1 (a / apply-01\n                        :ARG0 p)))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Paula\"))\n   :ARG1 (p2 / paper\n             :source (o / office))\n   :purpose (s / submit-01\n               :ARG0 p\n               :ARG1 (a / apply-01\n                        :ARG0 p)))"], "smus": ["Submit your application to Paula.", "Paula, submit your application.", "Paula, submit your application.", "Needs office paper.", "Paula needs.", "Paula needs office paper.", "Paula needs a paper from the office to submit her application.", "Paula needs a paper from the office to submit her application."]}, {"instance_id": "samsum-14", "summary": "Jacob hasn't listened to the song Harry sent him 3 days ago. Jacob will do it later tonight and let Harry know what he thinks.", "summary_trees": ["# ::snt Jacob hasn't listened to the song Harry sent him 3 days ago.\n(l / listen-01\n      :polarity -\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jacob\"))\n      :ARG1 (s / song\n            :ARG1-of (s2 / send-01\n                  :ARG0 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Harry\"))\n                  :ARG2 p\n                  :time (b / before\n                        :op1 (n3 / now)\n                        :quant (t / temporal-quantity\n                              :quant 3\n                              :unit (d / day))))))", "# ::snt Jacob will do it later tonight and let Harry know what he thinks.\n(a / and\n      :op1 (d / do-02\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Jacob\"))\n            :ARG1 (ii / it)\n            :time (a2 / after\n                  :op1 (n2 / now))\n            :time (d2 / date-entity\n                  :dayperiod (n3 / night)\n                  :mod (t / today)))\n      :op2 (l / let-know-07\n            :ARG0 p\n            :ARG1 (p2 / person\n                  :name (n4 / name\n                        :op1 \"Harry\"))\n            :ARG2 (t2 / thing\n                  :ARG1-of (t3 / think-01\n                        :ARG0 p))))"], "tree": ["(s2 / send-01\n    :ARG0 (p2 / person\n              :name (n2 / name\n                        :op1 \"Harry\"))\n    :ARG2 (p / person :name (n / name :op1 \"Jacob\"))\n    :time (b / before\n             :op1 (n3 / now)\n             :quant (t / temporal-quantity\n                       :quant 3\n                       :unit (d / day))))", "(l / listen-01\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jacob\"))\n   :ARG1 (s / song\n            :ARG1 (s2 / send-01\n                      :ARG0 (p2 / person\n                                :name (n2 / name\n                                          :op1 \"Harry\"))\n                      :ARG2 p\n                      :time (b / before\n                               :op1 (n3 / now)\n                               :quant (t / temporal-quantity\n                                         :quant 3\n                                         :unit (d / day))))))", "(d / do-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jacob\"))\n   :ARG1 (ii / it)\n   :time (a2 / after\n             :op1 (n2 / now))\n   :time (d2 / date-entity\n             :dayperiod (n3 / night)\n             :mod (t / today)))"], "smus": ["Harry sent Jacob three days ago.", "Jacob hasn't listened to the song Harry sent him three days ago.", "Jacob will do it later tonight."]}, {"instance_id": "samsum-15", "summary": "Pam doesn't have rota for Lauren, but Manager may give Lauren more tomorrow. Pam and Lauren will meet tomorrow and discuss Lauren's holiday. ", "summary_trees": ["# ::snt Pam doesn't have rota for Lauren, but Manager may give Lauren more tomorrow.\n(c / contrast-01\n      :ARG1 (h / have-03\n            :polarity -\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Pam\"))\n            :ARG1 (r / rotate-02\n                  :beneficiary (p2 / person\n                        :name (n2 / name\n                              :op1 \"Lauren\"))))\n      :ARG2 (p3 / possible-01\n            :ARG1 (g / give-01\n                  :ARG0 (p4 / person\n                        :ARG0-of (m / manage-01))\n                  :ARG1 (r2 / rotate-02\n                        :mod (m2 / more))\n                  :ARG2 p2\n                  :time (t / tomorrow))))", "# ::snt Pam and Lauren will meet tomorrow and discuss Lauren's holiday.\n(a / and\n      :op1 (m / meet-03\n            :ARG0 (a2 / and\n                  :op1 (p / person\n                        :name (n / name\n                              :op1 \"Pam\"))\n                  :op2 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Lauren\")))\n            :time (t / tomorrow))\n      :op2 (d / discuss-01\n            :ARG0 a2\n            :ARG1 (h / holiday-01\n                  :ARG0 p2)))"], "tree": ["(g / give-01\n   :ARG0 (p4 / person\n             :ARG0 (m / manage-01))\n   :ARG1 (r2 / rotate-02\n             :mod (m2 / more))\n   :ARG2 (p2 / person :name (n2 / name :op1 \"Lauren\"))\n   :time (t / tomorrow))", "(p3 / possible-01\n    :ARG1 (g / give-01\n             :ARG0 (p4 / person\n                       :ARG0 (m / manage-01))\n             :ARG1 (r2 / rotate-02\n                       :mod (m2 / more))\n             :ARG2 (p2 / person :name (n2 / name :op1 \"Lauren\"))\n             :time (t / tomorrow)))", "(h / have-03\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Pam\"))\n   :ARG1 (r / rotate-02\n            :beneficiary (p2 / person\n                             :name (n2 / name\n                                       :op1 \"Lauren\"))))", "(c / contrast-01\n   :ARG1 (h / have-03\n            :polarity -\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Pam\"))\n            :ARG1 (r / rotate-02\n                     :beneficiary (p2 / person\n                                      :name (n2 / name\n                                                :op1 \"Lauren\"))))\n   :ARG2 (p3 / possible-01\n             :ARG1 (g / give-01\n                      :ARG0 (p4 / person\n                                :ARG0 (m / manage-01))\n                      :ARG1 (r2 / rotate-02\n                                :mod (m2 / more))\n                      :ARG2 p2\n                      :time (t / tomorrow))))", "(d / discuss-01\n   :ARG1 (h / holiday-01\n            :ARG0 (p2 / person :name (n2 / name :op1 \"Lauren\"))))", "(d / discuss-01\n   :ARG0 (a2 / and)\n   :ARG1 (h / holiday-01\n            :ARG0 (p2 / person :name (n2 / name :op1 \"Lauren\"))))", "(d / discuss-01\n   :ARG0 (a2 / and)\n   :ARG1 (h / holiday-01\n            :ARG0 (p2 / person :name (n2 / name :op1 \"Lauren\"))))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Pam\")))", "(m / meet-03\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Lauren\")))", "(m / meet-03\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Lauren\"))\n   :time (t / tomorrow)\n   :time t)", "(m / meet-03\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Lauren\"))\n   :time (t / tomorrow)\n   :time t)", "(m / meet-03\n   :ARG0 (a2 / and\n             :op1 (p / person\n                     :name (n / name\n                              :op1 \"Pam\"))\n             :op2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Lauren\"))))", "(m / meet-03\n   :ARG0 (a2 / and\n             :op1 (p / person\n                     :name (n / name\n                              :op1 \"Pam\"))\n             :op2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Lauren\")))\n   :time (t / tomorrow))", "(m / meet-03\n   :ARG0 (a2 / and\n             :op1 (p / person\n                     :name (n / name\n                              :op1 \"Pam\"))\n             :op2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Lauren\")))\n   :time (t / tomorrow))"], "smus": ["Tomorrow, the Manager will give Lauren more rotation.", "The Manager could give Laurenn more rotation tomorrow.", "Pam didn't have a rotation for Lauren.", "Pam didn't have a rotation for Lauren, but the Manager could give Lauren more rotation tomorrow.", "Discuss Lauren's holiday.", "and discuss Lauren's holiday.", "and discuss Lauren's holiday.", "Pam will meet.", "Lauren will meet.", "Lauren will meet tomorrow.", "Lauren will meet tomorrow.", "Pam and Lauren will meet.", "Pam and Lauren will meet tomorrow.", "Pam and Lauren will meet tomorrow."]}, {"instance_id": "samsum-16", "summary": "Deborah and Nathan want to start packing today as they won't have time tomorrow. They need warm clothes for the girls so Deborah's parents could take them to the forest. Deborah and Nathan want to spend some time alone. They will have a quick bite before their leave. Nathan will be home around 6.", "summary_trees": ["# ::snt Deborah and Nathan want to start packing today as they won't have time tomorrow.\n(w / want-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Deborah\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Nathan\")))\n      :ARG1 (s / start-01\n            :ARG0 a\n            :ARG1 (p3 / pack-01\n                  :ARG0 a)\n            :time (t / today))\n      :ARG1-of (c / cause-01\n            :ARG0 (h / have-03\n                  :polarity -\n                  :ARG0 a\n                  :ARG1 (t2 / time)\n                  :time (t3 / tomorrow))))", "# ::snt They need warm clothes for the girls so Deborah's parents could take them to the forest.\n(n / need-01\n      :ARG0 (t / they)\n      :ARG1 (c / clothes\n            :ARG1-of (w / warm-07)\n            :beneficiary (g / girl))\n      :purpose (p / possible-01\n            :ARG1 (t2 / take-01\n                  :ARG0 (p2 / person\n                        :ARG0-of (h / have-rel-role-91\n                              :ARG1 (p3 / person\n                                    :name (n2 / name\n                                          :op1 \"Deborah\"))\n                              :ARG2 (p4 / parent)))\n                  :ARG1 g\n                  :ARG3 (f / forest))))", "# ::snt Deborah and Nathan want to spend some time alone.\n(w / want-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Deborah\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Nathan\")))\n      :ARG1 (s / spend-02\n            :ARG0 a\n            :ARG1 (t / time\n                  :quant (s2 / some)\n                  :mod (a2 / alone))))", "# ::snt They will have a quick bite before their leave.\n(h / have-06\n      :ARG0 (t / they)\n      :ARG1 (b / bite\n            :ARG1-of (q / quick-02))\n      :time (b2 / before\n            :op1 (l / leave-11\n                  :ARG0 t)))", "# ::snt Nathan will be home around 6.\n(n / Nathan\n      :ARG0-of (b / be-located-at-91\n            :ARG1 (h / home)\n            :time (a / around\n                  :op1 (d / date-entity\n                        :time \"18:00\"))))"], "tree": ["(h / have-03\n   :polarity -\n   :time (t3 / tomorrow))", "(s / start-01\n   :ARG0 (a / and)\n   :ARG1 (p3 / pack-01\n             :ARG0 a))", "(s / start-01\n   :ARG1 (p3 / pack-01\n             :ARG0 (a / and))\n   :time (t / today))", "(h / have-03\n   :polarity -\n   :ARG0 (a / and)\n   :ARG1 (t2 / time)\n   :time (t3 / tomorrow))", "(s / start-01\n   :ARG0 (a / and)\n   :ARG1 (p3 / pack-01\n             :ARG0 a)\n   :time (t / today))", "(s / start-01\n   :ARG0 (a / and)\n   :ARG1 (p3 / pack-01\n             :ARG0 a)\n   :time (t / today))", "(c / cause-01\n   :ARG0 (h / have-03\n            :polarity -\n            :ARG0 (a / and)\n            :ARG1 (t2 / time)\n            :time (t3 / tomorrow)))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Deborah\"))\n   :ARG1 (s / start-01\n            :ARG0 p\n            :ARG1 (p3 / pack-01\n                      :ARG0 p)\n            :time (t / today)))", "(w / want-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Nathan\"))\n   :ARG1 (s / start-01\n            :ARG0 p2\n            :ARG1 (p3 / pack-01\n                      :ARG0 p2)\n            :time (t / today))\n   :ARG1 s)", "(w / want-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Deborah\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Nathan\")))\n   :ARG1 (s / start-01\n            :ARG0 a\n            :ARG1 (p3 / pack-01\n                      :ARG0 a)\n            :time (t / today)))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Deborah\"))\n   :ARG1 (s / start-01\n            :ARG0 p\n            :ARG1 (p3 / pack-01\n                      :ARG0 p)\n            :time (t / today))\n   :ARG1 (c / cause-01\n            :ARG0 (h / have-03\n                     :polarity -\n                     :ARG0 p\n                     :ARG1 (t2 / time)\n                     :time (t3 / tomorrow))))", "(w / want-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Nathan\"))\n   :ARG1 (s / start-01\n            :ARG0 p2\n            :ARG1 (p3 / pack-01\n                      :ARG0 p2)\n            :time (t / today))\n   :ARG1 s\n   :ARG1 (c / cause-01\n            :ARG0 (h / have-03\n                     :polarity -\n                     :ARG0 p2\n                     :ARG1 (t2 / time)\n                     :time (t3 / tomorrow))))", "(w / want-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Deborah\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Nathan\")))\n   :ARG1 (s / start-01\n            :ARG0 a\n            :ARG1 (p3 / pack-01\n                      :ARG0 a)\n            :time (t / today))\n   :ARG1 (c / cause-01\n            :ARG0 (h / have-03\n                     :polarity -\n                     :ARG0 a\n                     :ARG1 (t2 / time)\n                     :time (t3 / tomorrow))))", "(h / have-rel-role-91\n   :ARG1 (p3 / person\n             :name (n2 / name\n                       :op1 \"Deborah\"))\n   :ARG2 (p4 / parent))", "(t2 / take-01\n    :ARG0 (p2 / person\n              :ARG0 (h / have-rel-role-91\n                       :ARG1 (p3 / person\n                                 :name (n2 / name\n                                           :op1 \"Deborah\"))\n                       :ARG2 (p4 / parent)))\n    :ARG1 (g / girl))", "(t2 / take-01\n    :ARG0 (p2 / person\n              :ARG0 (h / have-rel-role-91\n                       :ARG1 (p3 / person\n                                 :name (n2 / name\n                                           :op1 \"Deborah\"))\n                       :ARG2 (p4 / parent)))\n    :ARG1 (g / girl)\n    :ARG3 (f / forest))", "(p / possible-01\n   :ARG1 (t2 / take-01\n             :ARG0 (p2 / person\n                       :ARG0 (h / have-rel-role-91\n                                :ARG1 (p3 / person\n                                          :name (n2 / name\n                                                    :op1 \"Deborah\"))\n                                :ARG2 (p4 / parent)))\n             :ARG1 (g / girl)\n             :ARG3 (f / forest)))", "(p / possible-01\n   :ARG1 (t2 / take-01\n             :ARG0 (p2 / person\n                       :ARG0 (h / have-rel-role-91\n                                :ARG1 (p3 / person\n                                          :name (n2 / name\n                                                    :op1 \"Deborah\"))\n                                :ARG2 (p4 / parent)))\n             :ARG1 (g / girl)\n             :ARG3 (f / forest)))", "(n / need-01\n   :ARG0 (t / they)\n   :ARG1 (c / clothes\n            :ARG1 (w / warm-07)\n            :beneficiary (g / girl))\n   :purpose (p / possible-01\n               :ARG1 (t2 / take-01\n                         :ARG0 (p2 / person\n                                   :ARG0 (h / have-rel-role-91\n                                            :ARG1 (p3 / person\n                                                      :name (n2 / name\n                                                                :op1 \"Deborah\"))\n                                            :ARG2 (p4 / parent)))\n                         :ARG1 g\n                         :ARG3 (f / forest))))", "(s / spend-02\n   :ARG0 (a / and)\n   :ARG1 (t / time\n            :quant (s2 / some)\n            :mod (a2 / alone)))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Deborah\"))\n   :ARG1 (s / spend-02\n            :ARG0 p\n            :ARG1 (t / time\n                     :quant (s2 / some)\n                     :mod (a2 / alone))))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Deborah\"))\n   :ARG1 (s / spend-02\n            :ARG0 p\n            :ARG1 (t / time\n                     :quant (s2 / some)\n                     :mod (a2 / alone))))", "(w / want-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Nathan\"))\n   :ARG1 (s / spend-02\n            :ARG0 p2\n            :ARG1 (t / time\n                     :quant (s2 / some)\n                     :mod (a2 / alone)))\n   :ARG1 s)", "(w / want-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Nathan\"))\n   :ARG1 (s / spend-02\n            :ARG0 p2\n            :ARG1 (t / time\n                     :quant (s2 / some)\n                     :mod (a2 / alone)))\n   :ARG1 s)", "(w / want-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Deborah\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Nathan\")))\n   :ARG1 (s / spend-02\n            :ARG0 a\n            :ARG1 (t / time\n                     :quant (s2 / some)\n                     :mod (a2 / alone))))", "(w / want-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Deborah\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Nathan\")))\n   :ARG1 (s / spend-02\n            :ARG0 a\n            :ARG1 (t / time\n                     :quant (s2 / some)\n                     :mod (a2 / alone))))", "(h / have-06\n   :time (b2 / before\n             :op1 (l / leave-11)))", "(h / have-06\n   :ARG0 (t / they)\n   :ARG1 (b / bite\n            :ARG1 (q / quick-02))\n   :time (b2 / before\n             :op1 (l / leave-11\n                     :ARG0 t)))"], "smus": ["No tomorrow.", "and start packing.", "Packing and packing will start today.", "And tomorrow, they won't have time.", "And today they will start packing.", "And today they will start packing.", "Because tomorrow, they won't have time.", "Deborah want's to start packing today.", "Nathan wants to start packing today.", "Deborah and Nathan want to start packing today.", "Deborah wants to start packing today because she won't have time tomorrow.", "Nathan wants to start packing today because he won't have time tomorrow.", "Deborah and Nathan want to start packing today because they won't have time tomorrow.", "Deborah's parents", "Deborah's parents will take the girls.", "Deborah's parents would take the girls to the forest.", "Deborah's parents may take the girls to the forest.", "Deborah's parents may take the girls to the forest.", "They need warm clothes for the girls so that Deborah's parents can take her to the forest.", "and spend some time alone.", "Deborah want's to spend some time alone.", "Deborah want's to spend some time alone.", "Nathan wants to spend some time alone.", "Nathan wants to spend some time alone.", "Deborah and Nathan want to spend some time alone.", "Deborah and Nathan want to spend some time alone.", "Have before leaving.", "They'll have a quick bite before they leave."]}, {"instance_id": "samsum-17", "summary": "Cheryl had an argument with her mom. She forgot to close the window, got angry and started a fight. Her mom gave her time till the end of the year to move out.", "summary_trees": ["# ::snt Cheryl had an argument with her mom.\n(a / argue-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Cheryl\"))\n      :ARG1 (p2 / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 p\n                  :ARG2 (m / mom))))", "# ::snt She forgot to close the window, got angry and started a fight.\n(a / and\n      :op1 (f / forget-01\n            :ARG0 (s / she)\n            :ARG1 (c / close-01\n                  :ARG0 s\n                  :ARG1 (w / window)))\n      :op2 (a2 / anger-01\n            :ARG1 s)\n      :op3 (s2 / start-01\n            :ARG0 s\n            :ARG1 (f2 / fight-01\n                  :ARG0 s)))", "# ::snt Her mom gave her time till the end of the year to move out.\n(g / give-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (s / she)\n                  :ARG2 (m / mom)))\n      :ARG1 (t / time\n            :duration (t2 / till\n                  :op1 (e / end-01\n                        :ARG1 (y / year))))\n      :ARG2 s\n      :purpose (m2 / move-01\n            :ARG0 s\n            :ARG2 (o / out)))"], "tree": ["(a / argue-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Cheryl\"))\n   :ARG1 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 p\n                      :ARG2 (m / mom))))", "(a / argue-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Cheryl\"))\n   :ARG1 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 p\n                      :ARG2 (m / mom))))", "(s2 / start-01\n    :ARG1 (f2 / fight-01\n              :ARG0 (s / she)))", "(s2 / start-01\n    :ARG0 (s / she)\n    :ARG1 (f2 / fight-01\n              :ARG0 s))", "(s2 / start-01\n    :ARG0 (s / she)\n    :ARG1 (f2 / fight-01\n              :ARG0 s))", "(f / forget-01\n   :ARG1 (c / close-01\n            :ARG0 (s / she)\n            :ARG1 (w / window)))", "(f / forget-01\n   :ARG0 (s / she)\n   :ARG1 (c / close-01\n            :ARG0 s\n            :ARG1 (w / window)))", "(f / forget-01\n   :ARG0 (s / she)\n   :ARG1 (c / close-01\n            :ARG0 s\n            :ARG1 (w / window)))", "(h / have-rel-role-91\n   :ARG1 (s / she)\n   :ARG2 (m / mom))", "(g / give-01\n   :ARG1 (t / time\n            :duration (t2 / till\n                          :op1 (e / end-01\n                                  :ARG1 (y / year)))))", "(g / give-01\n   :ARG1 (t / time\n            :duration (t2 / till\n                          :op1 (e / end-01\n                                  :ARG1 (y / year))))\n   :ARG2 (s / she))", "(g / give-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (s / she)\n                     :ARG2 (m / mom)))\n   :ARG1 (t / time\n            :duration (t2 / till\n                          :op1 (e / end-01\n                                  :ARG1 (y / year)))))", "(g / give-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (s / she)\n                     :ARG2 (m / mom)))\n   :ARG1 (t / time\n            :duration (t2 / till\n                          :op1 (e / end-01\n                                  :ARG1 (y / year))))\n   :ARG2 s)", "(g / give-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (s / she)\n                     :ARG2 (m / mom)))\n   :ARG1 (t / time\n            :duration (t2 / till\n                          :op1 (e / end-01\n                                  :ARG1 (y / year))))\n   :ARG2 s\n   :purpose (m2 / move-01\n                :ARG0 s\n                :ARG2 (o / out)))"], "smus": ["Cheryl and her mom had an argument.", "Cheryl and her mom had an argument.", "She started a fight.", "She started a fight.", "She started a fight.", "She forgets to close the window.", "She forgets to close the window.", "She forgets to close the window.", "She's a mom.", "given time till the end of the year", "She was given time till the end of the year.", "Her mom gave time till the end of the year.", "Her mom gave her time till the end of the year.", "Her mom gave her time till the end of the year to move out."]}, {"instance_id": "samsum-18", "summary": "After work, Mike is going to go to the gym and then home. He invites Jason to bring some food and come over. They can play 2 on ps4.", "summary_trees": ["# ::snt After work, Mike is going to go to the gym and then home.\n(a / and\n      :op1 (g / go-02\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Mike\"))\n            :ARG4 (g2 / gym))\n      :op2 (h / home\n            :time (t / then))\n      :time (a2 / after\n            :op1 (w / work-01\n                  :ARG0 p)))", "# ::snt He invites Jason to bring some food and come over.\n(ii / invite-01\n      :ARG0 (h / he)\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Jason\"))\n      :ARG2 (a / and\n            :op1 (b / bring-01\n                  :ARG0 p\n                  :ARG1 (f / food\n                        :quant (s / some)))\n            :op2 (c / come-01\n                  :ARG1 p\n                  :ARG4 (o / over))))", "# ::snt They can play 2 on ps4.\n(p / possible-01\n      :ARG1 (p2 / play-01\n            :ARG0 (t / they)\n            :ARG1 (g / game\n                  :quant 2\n                  :name (n / name\n                        :op1 \"PS4\"))))"], "tree": ["(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mike\")))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mike\"))\n   :ARG4 (g2 / gym))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mike\"))\n   :ARG4 (g2 / gym))", "(c / come-01\n   :ARG1 (p / person :name (n / name :op1 \"Jason\"))\n   :ARG4 (o / over))", "(c / come-01\n   :ARG1 (p / person :name (n / name :op1 \"Jason\"))\n   :ARG4 (o / over))", "(ii / invite-01\n    :ARG0 (h / he)\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Jason\")))", "(ii / invite-01\n    :ARG0 (h / he)\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Jason\"))\n    :ARG2 (c / come-01\n             :ARG1 p\n             :ARG4 (o / over)))", "(ii / invite-01\n    :ARG0 (h / he)\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Jason\"))\n    :ARG2 (c / come-01\n             :ARG1 p\n             :ARG4 (o / over)))", "(ii / invite-01\n    :ARG0 (h / he)\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Jason\"))\n    :ARG2 (b / bring-01\n             :ARG0 p\n             :ARG1 (f / food\n                      :quant (s / some))))", "(ii / invite-01\n    :ARG0 (h / he)\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Jason\"))\n    :ARG2 (b / bring-01\n             :ARG0 p\n             :ARG1 (f / food\n                      :quant (s / some))))", "(ii / invite-01\n    :ARG0 (h / he)\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Jason\"))\n    :ARG2 (a / and\n             :op1 (b / bring-01\n                     :ARG0 p\n                     :ARG1 (f / food\n                              :quant (s / some)))\n             :op2 (c / come-01\n                     :ARG1 p\n                     :ARG4 (o / over))))", "(ii / invite-01\n    :ARG0 (h / he)\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Jason\"))\n    :ARG2 (a / and\n             :op1 (b / bring-01\n                     :ARG0 p\n                     :ARG1 (f / food\n                              :quant (s / some)))\n             :op2 (c / come-01\n                     :ARG1 p\n                     :ARG4 (o / over))))", "(p / possible-01\n   :ARG1 (p2 / play-01\n             :ARG0 (t / they)\n             :ARG1 (g / game\n                      :quant 2\n                      :name (n / name\n                               :op1 \"PS4\"))))", "(p / possible-01\n   :ARG1 (p2 / play-01\n             :ARG0 (t / they)\n             :ARG1 (g / game\n                      :quant 2\n                      :name (n / name\n                               :op1 \"PS4\"))))"], "smus": ["Mike is going.", "Mike was going to the gym.", "Mike was going to the gym.", "Jason, come over.", "Jason, come over.", "He invites Jason.", "He invites Jason to come over.", "He invites Jason to come over.", "He invites Jason to bring some food.", "He invites Jason to bring some food.", "He invites Jason to bring some food and come over.", "He invites Jason to bring some food and come over.", "They can play two PS4's.", "They can play two PS4's."]}, {"instance_id": "samsum-19", "summary": "Allison send Alan budget estimation for this year. Extra other expenses are boss's trip to Japan, for a convention.", "summary_trees": ["# ::snt Allison send Alan budget estimation for this year.\n(s / send-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Allison\"))\n      :ARG1 (e / estimate-01\n            :ARG1 (b / budget\n                  :time (y / year\n                        :mod (t / this)))\n            :ARG2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Alan\"))))", "# ::snt Extra other expenses are boss's trip to Japan, for a convention.\n(e / expend-01\n      :ARG2 (t / trip-03\n            :ARG0 (p / person\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG2 (b / boss)))\n            :ARG1 (c / country\n                  :name (n / name\n                        :op1 \"Japan\"))\n            :purpose (c2 / convention))\n      :mod (o / other)\n      :mod (e2 / extra))"], "tree": ["(e / estimate-01\n   :ARG1 (b / budget\n            :time (y / year\n                     :mod (t / this))))", "(e / estimate-01\n   :ARG1 (b / budget\n            :time (y / year\n                     :mod (t / this)))\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Alan\")))", "(e / estimate-01\n   :ARG1 (b / budget\n            :time (y / year\n                     :mod (t / this)))\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Alan\")))", "(e / expend-01\n   :mod (o / other)\n   :mod (e2 / extra))", "(t / trip-03\n   :ARG1 (c / country\n            :name (n / name\n                     :op1 \"Japan\")))", "(t / trip-03\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (b / boss))))", "(t / trip-03\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (b / boss)))\n   :ARG1 (c / country\n            :name (n / name\n                     :op1 \"Japan\")))", "(t / trip-03\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (b / boss)))\n   :ARG1 (c / country\n            :name (n / name\n                     :op1 \"Japan\"))\n   :purpose (c2 / convention))", "(e / expend-01\n   :ARG2 (t / trip-03\n            :ARG0 (p / person\n                     :ARG0 (h / have-rel-role-91\n                              :ARG2 (b / boss)))\n            :ARG1 (c / country\n                     :name (n / name\n                              :op1 \"Japan\"))\n            :purpose (c2 / convention)))", "(e / expend-01\n   :ARG2 (t / trip-03\n            :ARG0 (p / person\n                     :ARG0 (h / have-rel-role-91\n                              :ARG2 (b / boss)))\n            :ARG1 (c / country\n                     :name (n / name\n                              :op1 \"Japan\"))\n            :purpose (c2 / convention))\n   :mod (o / other)\n   :mod (e2 / extra))"], "smus": ["Budget estimate for this year", "Alan, this year's budget is an estimate.", "Alan, this year's budget is an estimate.", "Other extra expenses", "Trip to Japan", "The boss took the trip.", "The boss took a trip to Japan.", "The boss made a trip to Japan for the convention.", "expenses of boss trip to Japan for convention", "Other extra expenses: The boss took an extra trip to Japan for the convention."]}, {"instance_id": "samsum-20", "summary": "Rory wants Mitch to take Bill and Sammy and they'll chip in for gas. Mitch will be leaving Sunday, the 29th to get there by 9 am on Monday. Bill will arrive around 10 am Sunday and Joanna will be picking him. Mitch will meet Bill after.", "summary_trees": ["# ::snt Rory wants Mitch to take Bill and Sammy and they'll chip in for gas.\n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Rory\"))\n      :ARG1 (a / and\n            :op1 (t / take-01\n                  :ARG0 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Mitch\"))\n                  :ARG1 (a2 / and\n                        :op1 (p3 / person\n                              :name (n3 / name\n                                    :op1 \"Bill\"))\n                        :op2 (p4 / person\n                              :name (n4 / name\n                                    :op1 \"Sammy\"))))\n            :op2 (c / chip-in-02\n                  :ARG0 a2\n                  :ARG1 (g / gas))))", "# ::snt Mitch will be leaving Sunday, the 29th to get there by 9 am on Monday.\n(l / leave-11\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Mitch\"))\n      :time (d / date-entity\n            :weekday (s / sunday))\n      :time (d2 / date-entity\n            :day 29)\n      :purpose (g / get-05\n            :ARG1 p\n            :ARG2 (t / there)\n            :time (b / by\n                  :op1 (d3 / date-entity\n                        :time \"9:00\"\n                        :weekday (m / monday)))))", "# ::snt Bill will arrive around 10 am Sunday and Joanna will be picking him.\n(a / and\n      :op1 (a2 / arrive-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Bill\"))\n            :time (a3 / around\n                  :op1 (d / date-entity\n                        :time \"10:00\"\n                        :weekday (s / sunday))))\n      :op2 (p2 / pick-01\n            :ARG0 (p3 / person\n                  :name (n2 / name\n                        :op1 \"Joanna\"))\n            :ARG1 p))", "# ::snt Mitch will meet Bill after.\n(m / meet-03\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Mitch\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Bill\"))\n      :time (a / after))"], "tree": ["(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rory\"))\n   :ARG1 (c / chip-in-02\n            :ARG0 (a2 / and)\n            :ARG1 (g / gas)))", "(g / get-05\n   :ARG1 (p / person :name (n / name :op1 \"Mitch\"))\n   :ARG2 (t / there))", "(g / get-05\n   :time (b / by\n            :op1 (d3 / date-entity\n                     :time \"9:00\"\n                     :weekday (m / monday))))", "(g / get-05\n   :time (b / by\n            :op1 (d3 / date-entity\n                     :time \"9:00\"\n                     :weekday (m / monday))))", "(l / leave-11\n   :time (d / date-entity\n            :weekday (s / sunday))\n   :time (d2 / date-entity\n             :day 29)\n   :purpose (g / get-05))", "(a2 / arrive-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Bill\")))", "(p2 / pick-01\n    :ARG0 (p3 / person\n              :name (n2 / name\n                        :op1 \"Joanna\"))\n    :ARG1 (p / person :name (n / name :op1 \"Bill\")))", "(p2 / pick-01\n    :ARG0 (p3 / person\n              :name (n2 / name\n                        :op1 \"Joanna\"))\n    :ARG1 (p / person :name (n / name :op1 \"Bill\")))", "(a2 / arrive-01\n    :time (a3 / around\n              :op1 (d / date-entity\n                      :time \"10:00\"\n                      :weekday (s / sunday))))", "(a2 / arrive-01\n    :time (a3 / around\n              :op1 (d / date-entity\n                      :time \"10:00\"\n                      :weekday (s / sunday))))", "(a2 / arrive-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Bill\"))\n    :time (a3 / around\n              :op1 (d / date-entity\n                      :time \"10:00\"\n                      :weekday (s / sunday))))", "(a2 / arrive-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Bill\"))\n    :time (a3 / around\n              :op1 (d / date-entity\n                      :time \"10:00\"\n                      :weekday (s / sunday))))", "(a2 / arrive-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Bill\")))", "(m / meet-03\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Bill\")))"], "smus": ["Ry wants the gas chipped in.", "Get there, Mitch.", "Get by by Monday at 9am.", "Get by by Monday at 9am.", "Leave Sunday, 29th to get in.", "Bill will arrive.", "Joanna is picking Bill.", "Joanna is picking Bill.", "Arrive around 10 am on Sunday.", "Arrive around 10 am on Sunday.", "Bill will arrive around 10 a.m. Sunday.", "Bill will arrive around 10 a.m. Sunday.", "Bill will arrive.", "Bill will meet."]}, {"instance_id": "samsum-21", "summary": "Raymond can't decide whether he wants pizza or pasta. He invites Charlotte over for a dinner at 15.", "summary_trees": ["# ::snt Raymond can't decide whether he wants pizza or pasta.\n(p / possible-01\n      :polarity -\n      :ARG1 (d / decide-01\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Raymond\"))\n            :ARG1 (t / truth-value\n                  :polarity-of (w / want-01\n                        :ARG0 p2\n                        :ARG1 (o / or\n                              :op1 (p3 / pizza)\n                              :op2 (p4 / pasta))))))", "# ::snt He invites Charlotte over for a dinner at 15.\n(ii / invite-01\n      :ARG0 (h / he)\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Charlotte\"))\n      :ARG2 (o / over)\n      :purpose (d / dinner)\n      :time (a / age-01\n            :ARG1 p\n            :ARG2 (t / temporal-quantity\n                  :quant 15\n                  :unit (y / year))))"], "tree": ["(w / want-01\n   :ARG0 (p2 / person :name (n / name :op1 \"Raymond\"))\n   :ARG1 (o / or\n            :op1 (p3 / pizza)\n            :op2 (p4 / pasta)))", "(w / want-01\n   :ARG0 (p2 / person :name (n / name :op1 \"Raymond\"))\n   :ARG1 (o / or\n            :op1 (p3 / pizza)\n            :op2 (p4 / pasta)))", "(d / decide-01\n   :ARG1 (t / truth-value\n            :polarity (w / want-01\n                         :ARG0 (p2 / person :name (n / name :op1 \"Raymond\"))\n                         :ARG1 (o / or\n                                  :op1 (p3 / pizza)\n                                  :op2 (p4 / pasta)))))", "(p / possible-01\n   :polarity -\n   :ARG1 (d / decide-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Raymond\"))\n            :ARG1 (t / truth-value\n                     :polarity (w / want-01\n                                  :ARG0 p2\n                                  :ARG1 (o / or\n                                           :op1 (p3 / pizza)\n                                           :op2 (p4 / pasta))))))", "(ii / invite-01\n    :purpose (d / dinner)\n    :time (a / age-01))", "(ii / invite-01\n    :ARG0 (h / he)\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Charlotte\")))", "(ii / invite-01\n    :ARG0 (h / he)\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Charlotte\"))\n    :ARG2 (o / over))", "(ii / invite-01\n    :ARG0 (h / he)\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Charlotte\"))\n    :ARG2 (o / over)\n    :time (a / age-01\n             :ARG1 p\n             :ARG2 (t / temporal-quantity\n                      :quant 15\n                      :unit (y / year))))", "(ii / invite-01\n    :ARG0 (h / he)\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Charlotte\"))\n    :ARG2 (o / over)\n    :purpose (d / dinner)\n    :time (a / age-01\n             :ARG1 p\n             :ARG2 (t / temporal-quantity\n                      :quant 15\n                      :unit (y / year))))"], "smus": ["Raymond wants pizza or pasta.", "Raymond wants pizza or pasta.", "Decide if Raymond wants pizza or pasta.", "Raymond can't decide if he wants pizza or pasta.", "a href=\"http://www.youtube.com/watch?v=gbbq\">I invites for dinner/a>", "He invites Charlotte.", "He invites Charlotte over.", "He invites Charlotte over when she's 15.", "He invites Charlotte over for dinner when she's 15."]}, {"instance_id": "samsum-22", "summary": "Mike considers going to Egypt for holiday. It's too hot for Celia, she suggests Croatia instead. Mark likes the idea, he's never been there. ", "summary_trees": ["# ::snt Mike considers going to Egypt for holiday.\n(c / consider-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Mike\"))\n      :ARG1 (g / go-02\n            :ARG0 p\n            :ARG4 (c2 / country\n                  :name (n2 / name\n                        :op1 \"Egypt\"))\n            :purpose (h / holiday-01\n                  :ARG0 p)))", "# ::snt It's too hot for Celia, she suggests Croatia instead.\n(c / cause-01\n      :ARG0 (h / have-degree-91\n            :ARG1 (ii / it)\n            :ARG2 (h2 / hot-05\n                  :ARG1 ii)\n            :ARG3 (t / too)\n            :ARG6 (p / person\n                  :name (n / name\n                        :op1 \"Celia\")))\n      :ARG1 (s / suggest-01\n            :ARG0 p\n            :ARG1 (c2 / country\n                  :name (n2 / name\n                        :op1 \"Croatia\")\n                  :ARG1-of (ii2 / instead-of-91))))", "# ::snt Mark likes the idea, he's never been there.\n(l / like-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Mark\")\n            :ARG1-of (b / be-located-at-91\n                  :polarity -\n                  :ARG2 (t / there)\n                  :time (e / ever)))\n      :ARG1 (ii / idea))"], "tree": ["(c / consider-02\n   :ARG1 (g / go-02\n            :ARG0 (p / person :name (n / name :op1 \"Mike\"))\n            :ARG4 (c2 / country\n                      :name (n2 / name\n                                :op1 \"Egypt\"))\n            :purpose (h / holiday-01\n                        :ARG0 p)))", "(c / consider-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mike\"))\n   :ARG1 (g / go-02\n            :ARG0 p\n            :ARG4 (c2 / country\n                      :name (n2 / name\n                                :op1 \"Egypt\"))\n            :purpose (h / holiday-01\n                        :ARG0 p)))", "(c / consider-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mike\"))\n   :ARG1 (g / go-02\n            :ARG0 p\n            :ARG4 (c2 / country\n                      :name (n2 / name\n                                :op1 \"Egypt\"))\n            :purpose (h / holiday-01\n                        :ARG0 p)))", "(h / have-degree-91\n   :ARG6 (p / person\n            :name (n / name\n                     :op1 \"Celia\")))", "(h / have-degree-91\n   :ARG1 (ii / it)\n   :ARG2 (h2 / hot-05\n             :ARG1 ii)\n   :ARG3 (t / too))", "(s / suggest-01\n   :ARG0 (p / person :name (n / name :op1 \"Celia\"))\n   :ARG1 (c2 / country\n             :name (n2 / name\n                       :op1 \"Croatia\")\n             :ARG1 (ii2 / instead-of-91)))", "(s / suggest-01\n   :ARG0 (p / person :name (n / name :op1 \"Celia\"))\n   :ARG1 (c2 / country\n             :name (n2 / name\n                       :op1 \"Croatia\")\n             :ARG1 (ii2 / instead-of-91)))", "(h / have-degree-91\n   :ARG1 (ii / it)\n   :ARG2 (h2 / hot-05\n             :ARG1 ii)\n   :ARG3 (t / too)\n   :ARG6 (p / person\n            :name (n / name\n                     :op1 \"Celia\")))", "(c / cause-01\n   :ARG0 (h / have-degree-91\n            :ARG1 (ii / it)\n            :ARG2 (h2 / hot-05\n                      :ARG1 ii)\n            :ARG3 (t / too)\n            :ARG6 (p / person\n                     :name (n / name\n                              :op1 \"Celia\")))\n   :ARG1 (s / suggest-01\n            :ARG0 p\n            :ARG1 (c2 / country\n                      :name (n2 / name\n                                :op1 \"Croatia\")\n                      :ARG1 (ii2 / instead-of-91))))", "(b / be-located-at-91\n   :polarity -\n   :time (e / ever))", "(b / be-located-at-91\n   :polarity -\n   :ARG2 (t / there)\n   :time (e / ever))"], "smus": ["Mike considers going to Egypt for a holiday.", "Mike considers going to Egypt for a holiday.", "Mike considers going to Egypt for a holiday.", "Celia", "It was too hot.", "Celine suggests Croatia instead.", "Celine suggests Croatia instead.", "It was too hot for Celia.", "It's too hot for Celine, so she suggests Croatia instead.", "Never been.", "Never been there."]}, {"instance_id": "samsum-23", "summary": "Suzanne is at work and is having a break now. Morgan invites Suzanne to a concert of Maroon 5 which takes place next week at the Hulu Theatre at Madison Square Garden. Suzzanne agrees.", "summary_trees": ["# ::snt Suzanne is at work and is having a break now.\n(a / and\n      :op1 (b / be-located-at-91\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Suzanne\"))\n            :ARG2 (w / work-01))\n      :op2 (b2 / break-19\n            :ARG0 p\n            :time (n2 / now)))", "# ::snt Morgan invites Suzanne to a concert of Maroon 5 which takes place next week at the Hulu Theatre at Madison Square Garden.\n(ii / invite-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Morgan\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Suzanne\"))\n      :ARG2 (c / concert\n            :mod (b / band\n                  :name (n3 / name\n                        :op1 \"Maroon\"\n                        :op2 5))\n            :time (w / week\n                  :mod (n4 / next))\n            :location (f / facility\n                  :name (n5 / name\n                        :op1 \"Hulu\"\n                        :op2 \"Theatre\")\n                  :part-of f\n                  :name (n6 / name\n                        :op1 \"Madison\"\n                        :op2 \"Square\"\n                        :op3 \"Garden\"))))", "# ::snt Suzzanne agrees.\n(a / agree-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Suzzanne\")))"], "tree": ["(b2 / break-19\n    :ARG0 (p / person :name (n / name :op1 \"Suzanne\"))\n    :time (n2 / now))", "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Suzanne\"))\n   :ARG2 (w / work-01))", "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Suzanne\"))\n   :ARG2 (w / work-01))", "(ii / invite-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Morgan\"))\n    :ARG1 (p2 / person\n              :name (n2 / name\n                        :op1 \"Suzanne\")))", "(ii / invite-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Morgan\"))\n    :ARG1 (p2 / person\n              :name (n2 / name\n                        :op1 \"Suzanne\"))\n    :ARG2 (c / concert\n             :mod (b / band\n                     :name (n3 / name\n                               :op1 \"Maroon\"\n                               :op2 5))\n             :time (w / week\n                      :mod (n4 / next))\n             :location (f / facility\n                          :name (n5 / name\n                                    :op1 \"Hulu\"\n                                    :op2 \"Theatre\")\n                          :part f\n                          :name (n6 / name\n                                    :op1 \"Madison\"\n                                    :op2 \"Square\"\n                                    :op3 \"Garden\"))))", "(ii / invite-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Morgan\"))\n    :ARG1 (p2 / person\n              :name (n2 / name\n                        :op1 \"Suzanne\"))\n    :ARG2 (c / concert\n             :mod (b / band\n                     :name (n3 / name\n                               :op1 \"Maroon\"\n                               :op2 5))\n             :time (w / week\n                      :mod (n4 / next))\n             :location (f / facility\n                          :name (n5 / name\n                                    :op1 \"Hulu\"\n                                    :op2 \"Theatre\")\n                          :part f\n                          :name (n6 / name\n                                    :op1 \"Madison\"\n                                    :op2 \"Square\"\n                                    :op3 \"Garden\"))))", "(a / agree-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Suzzanne\")))", "(a / agree-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Suzzanne\")))"], "smus": ["Now, Suzanne is on break.", "Suzanne is at work.", "Suzanne is at work.", "Morgan invites Suzanne", "Morgan invites Suzanne to a Maroon 5 concert next week at the Madison Square Garden's Hulu Theater.", "Morgan invites Suzanne to a Maroon 5 concert next week at the Madison Square Garden's Hulu Theater.", "Suzanne agrees.", "Suzanne agrees."]}, {"instance_id": "samsum-24", "summary": "John sent Henry Bristol Stool Scale. John was expecting a pic of Henry's poop. Henry had a nice poop this morning but isn't willing to send a pic. ", "summary_trees": ["# ::snt John sent Henry Bristol Stool Scale.\n(s / send-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"John\"))\n      :ARG1 (s2 / scale\n            :name (n2 / name\n                  :op1 \"Henry\"\n                  :op2 \"Bristol\"\n                  :op3 \"Stool\"\n                  :op4 \"Scale\")))", "# ::snt John was expecting a pic of Henry's poop.\n(e / expect-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"John\"))\n      :ARG1 (p2 / pic\n            :topic (p3 / poop\n                  :poss (p4 / person\n                        :name (n2 / name\n                              :op1 \"Henry\")))))", "# ::snt Henry had a nice poop this morning but isn't willing to send a pic.\n(c / contrast-01\n      :ARG1 (p / poo-01\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Henry\"))\n            :ARG1-of (n2 / nice-01)\n            :time (d / date-entity\n                  :dayperiod (m / morning)\n                  :mod (t / today)))\n      :ARG2 (w / will-02\n            :polarity -\n            :ARG0 p2\n            :ARG1 (s / send-01\n                  :ARG0 p2\n                  :ARG1 (p3 / picture))))"], "tree": ["(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\"))\n   :ARG1 (s2 / scale\n             :name (n2 / name\n                       :op1 \"Henry\"\n                       :op2 \"Bristol\"\n                       :op3 \"Stool\"\n                       :op4 \"Scale\")))", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\"))\n   :ARG1 (s2 / scale\n             :name (n2 / name\n                       :op1 \"Henry\"\n                       :op2 \"Bristol\"\n                       :op3 \"Stool\"\n                       :op4 \"Scale\")))", "(e / expect-01\n   :ARG1 (p2 / pic\n             :topic (p3 / poop\n                        :poss (p4 / person\n                                  :name (n2 / name\n                                            :op1 \"Henry\")))))", "(e / expect-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\"))\n   :ARG1 (p2 / pic\n             :topic (p3 / poop\n                        :poss (p4 / person\n                                  :name (n2 / name\n                                            :op1 \"Henry\")))))", "(e / expect-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\"))\n   :ARG1 (p2 / pic\n             :topic (p3 / poop\n                        :poss (p4 / person\n                                  :name (n2 / name\n                                            :op1 \"Henry\")))))", "(p / poo-01\n   :time (d / date-entity\n            :dayperiod (m / morning)\n            :mod (t / today)))", "(w / will-02\n   :polarity -\n   :ARG0 (p2 / person :name (n / name :op1 \"Henry\"))\n   :ARG1 (s / send-01\n            :ARG0 p2\n            :ARG1 (p3 / picture)))", "(p / poo-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Henry\"))\n   :ARG1 (n2 / nice-01)\n   :time (d / date-entity\n            :dayperiod (m / morning)\n            :mod (t / today)))", "(c / contrast-01\n   :ARG1 (p / poo-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Henry\"))\n            :ARG1 (n2 / nice-01)\n            :time (d / date-entity\n                     :dayperiod (m / morning)\n                     :mod (t / today)))\n   :ARG2 (w / will-02\n            :polarity -\n            :ARG0 p2\n            :ARG1 (s / send-01\n                     :ARG0 p2\n                     :ARG1 (p3 / picture))))"], "smus": ["John sent the Henry Bristol Scale.", "John sent the Henry Bristol Scale.", "Expecting a pic of Henry's poop.", "John was expecting a pic of Henry's poop.", "John was expecting a pic of Henry's poop.", "Pooing this morning.", "Henry was unwilling to send a picture.", "Henry pooped on nice this morning.", "Henry pooped nice this morning, but was unwilling to send a picture."]}, {"instance_id": "samsum-25", "summary": "Daniel will see Missy after 6 for drinks.", "summary_trees": ["# ::snt Daniel will see Missy after 6 for drinks.\n(s / see-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Daniel\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Missy\"))\n      :time (a / after\n            :op1 (d / date-entity\n                  :time \"18:00\"))\n      :purpose (d2 / drink-01))"], "tree": ["(s / see-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Missy\")))", "(s / see-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Daniel\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Missy\")))"], "smus": ["See Missy.", "Daniel will see Missy."]}, {"instance_id": "samsum-26", "summary": "Ann wants to buy Josh's laptop for $200. Josh doesn't want to negotiate the price. Ann will take it for $250 with accessories. ", "summary_trees": ["# ::snt Ann wants to buy Josh's laptop for $200.\n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Ann\"))\n      :ARG1 (b / buy-01\n            :ARG0 p\n            :ARG1 (l / laptop\n                  :poss (p2 / person\n                        :name (n2 / name\n                              :op1 \"Josh\")))\n            :ARG4 (m / monetary-quantity\n                  :quant 200\n                  :unit (d / dollar))))", "# ::snt Josh doesn't want to negotiate the price.\n(w / want-01\n      :polarity -\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Josh\"))\n      :ARG1 (n2 / negotiate-01\n            :ARG0 p\n            :ARG2 (t / thing\n                  :ARG2-of (p2 / price-01))))", "# ::snt Ann will take it for $250 with accessories.\n(t / take-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Ann\"))\n      :ARG1 (ii / it)\n      :ARG3 (m / monetary-quantity\n            :quant 250\n            :unit (d / dollar)\n            :prep-with (a / accessory)))"], "tree": ["(b / buy-01\n   :ARG1 (l / laptop\n            :poss (p2 / person\n                      :name (n2 / name\n                                :op1 \"Josh\"))))", "(b / buy-01\n   :ARG0 (p / person :name (n / name :op1 \"Ann\"))\n   :ARG1 (l / laptop\n            :poss (p2 / person\n                      :name (n2 / name\n                                :op1 \"Josh\")))\n   :ARG4 (m / monetary-quantity\n            :quant 200\n            :unit (d / dollar)))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ann\"))\n   :ARG1 (b / buy-01\n            :ARG0 p\n            :ARG1 (l / laptop\n                     :poss (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Josh\")))\n            :ARG4 (m / monetary-quantity\n                     :quant 200\n                     :unit (d / dollar))))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ann\"))\n   :ARG1 (b / buy-01\n            :ARG0 p\n            :ARG1 (l / laptop\n                     :poss (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Josh\")))\n            :ARG4 (m / monetary-quantity\n                     :quant 200\n                     :unit (d / dollar))))", "(w / want-01\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Josh\"))\n   :ARG1 (n2 / negotiate-01\n             :ARG0 p\n             :ARG2 (t / thing\n                      :ARG2 (p2 / price-01))))", "(t / take-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ann\"))\n   :ARG1 (ii / it))", "(t / take-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ann\"))\n   :ARG1 (ii / it)\n   :ARG3 (m / monetary-quantity\n            :quant 250\n            :unit (d / dollar)\n            :prep-with (a / accessory)))"], "smus": ["buy Josh's laptop", "Ann will buy Josh's laptop for $200.", "Ann wants to buy Josh's laptop for $200.", "Ann wants to buy Josh's laptop for $200.", "Josh doesn't want to negotiate a price.", "Ann, take it.", "Ann will take it for $250 wit accessories."]}, {"instance_id": "samsum-27", "summary": "Laura is going to visit her parents next Saturday. Keith might make a lasagne for her. Laura's mom has a birthday gift for her. ", "summary_trees": ["# ::snt Laura is going to visit her parents next Saturday.\n(v / visit-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Laura\"))\n      :ARG1 (p2 / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 p\n                  :ARG2 (p3 / parent)))\n      :time (d / date-entity\n            :weekday (s / saturday)\n            :mod (n2 / next)))", "# ::snt Keith might make a lasagne for her.\n(p / possible-01\n      :ARG1 (m / make-01\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Keith\"))\n            :ARG1 (l / lasagne)\n            :ARG3 (s / she)))", "# ::snt Laura's mom has a birthday gift for her.\n(h / have-03\n      :ARG0 (p / person\n            :ARG0-of (h2 / have-rel-role-91\n                  :ARG1 (p2 / person\n                        :name (n / name\n                              :op1 \"Laura\"))\n                  :ARG2 (m / mom)))\n      :ARG1 (g / gift\n            :mod (b / birthday)))"], "tree": ["(h / have-rel-role-91\n   :ARG1 (p / person :name (n / name :op1 \"Laura\"))\n   :ARG2 (p3 / parent))", "(v / visit-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Laura\")))", "(v / visit-01\n   :time (d / date-entity\n            :weekday (s / saturday)\n            :mod (n2 / next)))", "(v / visit-01\n   :time (d / date-entity\n            :weekday (s / saturday)\n            :mod (n2 / next)))", "(v / visit-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Laura\"))\n   :ARG1 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 p\n                      :ARG2 (p3 / parent))))", "(v / visit-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Laura\"))\n   :ARG1 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 p\n                      :ARG2 (p3 / parent)))\n   :time (d / date-entity\n            :weekday (s / saturday)\n            :mod (n2 / next)))", "(v / visit-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Laura\"))\n   :ARG1 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 p\n                      :ARG2 (p3 / parent)))\n   :time (d / date-entity\n            :weekday (s / saturday)\n            :mod (n2 / next)))", "(m / make-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Keith\"))\n   :ARG1 (l / lasagne)\n   :ARG3 (s / she))", "(p / possible-01\n   :ARG1 (m / make-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Keith\"))\n            :ARG1 (l / lasagne)\n            :ARG3 (s / she)))", "(p / possible-01\n   :ARG1 (m / make-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Keith\"))\n            :ARG1 (l / lasagne)\n            :ARG3 (s / she)))", "(h / have-03\n   :ARG0 (p / person\n            :ARG0 (h2 / have-rel-role-91\n                      :ARG1 (p2 / person\n                                :name (n / name\n                                         :op1 \"Laura\"))\n                      :ARG2 (m / mom)))\n   :ARG1 (g / gift\n            :mod (b / birthday)))", "(h / have-03\n   :ARG0 (p / person\n            :ARG0 (h2 / have-rel-role-91\n                      :ARG1 (p2 / person\n                                :name (n / name\n                                         :op1 \"Laura\"))\n                      :ARG2 (m / mom)))\n   :ARG1 (g / gift\n            :mod (b / birthday)))"], "smus": ["Laura's parents", "Laura will visit.", "Visit next Saturday.", "Visit next Saturday.", "Laura will visit her parents.", "Laura will visit her parents next Saturday.", "Laura will visit her parents next Saturday.", "Keith would make her lasagne.", "Keith can make her lasagne.", "Keith can make her lasagne.", "Laura's mom has a birthday gift.", "Laura's mom has a birthday gift."]}, {"instance_id": "samsum-28", "summary": "Sharol forgot about her sociology assignment. She needs to research feminist act, and it's due tomorrow. Kate has already finished it, and she rushes Sharol.", "summary_trees": ["# ::snt Sharol forgot about her sociology assignment.\n(f / forget-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Sharol\"))\n      :ARG1 (t / thing\n            :ARG1-of (a / assign-01\n                  :ARG2 p)\n            :topic (s / sociology)))", "# ::snt She needs to research feminist act, and it's due tomorrow.\n(a / and\n      :op1 (n / need-01\n            :ARG0 (s / she)\n            :ARG1 (r / research-01\n                  :ARG0 s\n                  :ARG1 (a2 / act\n                        :topic (f / feminism))))\n      :op2 (d / due-01\n            :ARG1 a2\n            :time (t / tomorrow)))", "# ::snt Kate has already finished it, and she rushes Sharol.\n(a / and\n      :op1 (f / finish-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Kate\"))\n            :ARG1 (ii / it)\n            :time (a2 / already))\n      :op2 (r / rush-01\n            :ARG0 p\n            :ARG1 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Sharol\"))))"], "tree": ["(f / forget-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sharol\")))", "(f / forget-01\n   :ARG1 (t / thing\n            :ARG1 (a / assign-01\n                     :ARG2 (p / person :name (n / name :op1 \"Sharol\")))\n            :topic (s / sociology)))", "(f / forget-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sharol\"))\n   :ARG1 (t / thing\n            :ARG1 (a / assign-01\n                     :ARG2 p)\n            :topic (s / sociology)))", "(f / forget-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sharol\"))\n   :ARG1 (t / thing\n            :ARG1 (a / assign-01\n                     :ARG2 p)\n            :topic (s / sociology)))", "(d / due-01\n   :ARG1 (a2 / act)\n   :time (t / tomorrow))", "(n / need-01\n   :ARG1 (r / research-01\n            :ARG0 (s / she)\n            :ARG1 (a2 / act\n                      :topic (f / feminism))))", "(n / need-01\n   :ARG0 (s / she)\n   :ARG1 (r / research-01\n            :ARG0 s\n            :ARG1 (a2 / act\n                      :topic (f / feminism))))", "(n / need-01\n   :ARG0 (s / she)\n   :ARG1 (r / research-01\n            :ARG0 s\n            :ARG1 (a2 / act\n                      :topic (f / feminism))))", "(f / finish-01\n   :ARG1 (ii / it)\n   :time (a2 / already))", "(f / finish-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kate\")))", "(r / rush-01\n   :ARG0 (p / person :name (n / name :op1 \"Kate\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Sharol\")))", "(r / rush-01\n   :ARG0 (p / person :name (n / name :op1 \"Kate\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Sharol\")))", "(f / finish-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kate\"))\n   :ARG1 (ii / it))", "(f / finish-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kate\"))\n   :ARG1 (ii / it)\n   :time (a2 / already))", "(f / finish-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kate\"))\n   :ARG1 (ii / it)\n   :time (a2 / already))"], "smus": ["Sharon forgot.", "The sociological assignment to Sharon was forgotten.", "Sharon forgot his sociological assignment.", "Sharon forgot his sociological assignment.", "The act is due tomorrow.", "She needs to research a feminist act.", "She needs to research the act of feminism.", "She needs to research the act of feminism.", "It's already finished.", "Kate has finished.", "Kate rushes over to Sharol.", "Kate rushes over to Sharol.", "Kate has finished it.", "Kate has already finished it.", "Kate has already finished it."]}, {"instance_id": "samsum-29", "summary": "Flo cannot get an appointment at the salon until the 6th. Flo worries she's going to be gray. Flo will have to get a touch-up kit at Tesco.", "summary_trees": ["# ::snt Flo cannot get an appointment at the salon until the 6th.\n(p / possible-01\n      :polarity -\n      :ARG1 (g / get-01\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Flo\"))\n            :ARG1 (a / appointment-02\n                  :ARG0 p2\n                  :ARG1 (s / salon))\n            :time (u / until\n                  :op1 (d / date-entity\n                        :day 6))))", "# ::snt Flo worries she's going to be gray.\n(w / worry-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Flo\"))\n      :ARG1 (g / gray-02\n            :ARG1 p))", "# ::snt Flo will have to get a touch-up kit at Tesco.\n(o / obligate-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Flo\"))\n      :ARG2 (g / get-01\n            :ARG0 p\n            :ARG1 (k / kit\n                  :purpose (t / touch-up-03))\n            :ARG4 (c / company\n                  :name (n2 / name\n                        :op1 \"Tesco\"))))"], "tree": ["(p / possible-01\n   :polarity -\n   :ARG1 (g / get-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Flo\"))\n            :ARG1 (a / appointment-02\n                     :ARG0 p2\n                     :ARG1 (s / salon))\n            :time (u / until\n                     :op1 (d / date-entity\n                             :day 6))))", "(w / worry-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Flo\")))", "(w / worry-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Flo\"))\n   :ARG1 (g / gray-02\n            :ARG1 p))", "(w / worry-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Flo\"))\n   :ARG1 (g / gray-02\n            :ARG1 p))", "(o / obligate-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Flo\"))\n   :ARG2 (g / get-01\n            :ARG0 p\n            :ARG1 (k / kit\n                     :purpose (t / touch-up-03))\n            :ARG4 (c / company\n                     :name (n2 / name\n                               :op1 \"Tesco\"))))"], "smus": ["Flo could not get an appointment at the salon until the 6th.", "Flo worries.", "Flo worries about being gray.", "Flo worries about being gray.", "Flo has to get a touch up kit from Tesco."]}, {"instance_id": "samsum-30", "summary": "Charlee is attending Portuguese theater as a subject at university. He and other students are preparing a play by Mro\u017cek translated into Portuguese.", "summary_trees": ["# ::snt Charlee is attending Portuguese theater as a subject at university.\n(a / attend-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Charlee\"))\n      :ARG1 (t / theater\n            :mod (c / country\n                  :name (n2 / name\n                        :op1 \"Portugal\"))\n            :mod (s / subject))\n      :location (u / university))", "# ::snt He and other students are preparing a play by Mro\u017cek translated into Portuguese.\n(p / prepare-01\n      :ARG0 (a / and\n            :op1 (h / he)\n            :op2 (p2 / person\n                  :mod (o / other)\n                  :ARG0-of (s / study-01)))\n      :ARG1 (p3 / play-11\n            :ARG0 (p4 / person\n                  :name (n / name\n                        :op1 \"Mro\u017cek\"))\n            :ARG1-of (t / translate-01\n                  :ARG2 (l / language\n                        :name (n2 / name\n                              :op1 \"Portuguese\")))))"], "tree": ["(a / attend-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Charlee\"))\n   :ARG1 (t / theater\n            :mod (c / country\n                    :name (n2 / name\n                              :op1 \"Portugal\"))\n            :mod (s / subject)))", "(t / translate-01\n   :ARG2 (l / language\n            :name (n2 / name\n                      :op1 \"Portuguese\")))", "(p3 / play-11\n    :ARG0 (p4 / person\n              :name (n / name\n                       :op1 \"Mro\u017cek\")))", "(p / prepare-01\n   :ARG1 (p3 / play-11\n             :ARG0 (p4 / person\n                       :name (n / name\n                                :op1 \"Mro\u017cek\"))\n             :ARG1 (t / translate-01\n                      :ARG2 (l / language\n                               :name (n2 / name\n                                         :op1 \"Portuguese\")))))", "(p / prepare-01\n   :ARG0 (h / he)\n   :ARG1 (p3 / play-11\n             :ARG0 (p4 / person\n                       :name (n / name\n                                :op1 \"Mro\u017cek\"))\n             :ARG1 (t / translate-01\n                      :ARG2 (l / language\n                               :name (n2 / name\n                                         :op1 \"Portuguese\")))))", "(p / prepare-01\n   :ARG0 (h / he)\n   :ARG1 (p3 / play-11\n             :ARG0 (p4 / person\n                       :name (n / name\n                                :op1 \"Mro\u017cek\"))\n             :ARG1 (t / translate-01\n                      :ARG2 (l / language\n                               :name (n2 / name\n                                         :op1 \"Portuguese\")))))", "(p / prepare-01\n   :ARG0 (p2 / person\n             :mod (o / other)\n             :ARG0 (s / study-01))\n   :ARG1 (p3 / play-11\n             :ARG0 (p4 / person\n                       :name (n / name\n                                :op1 \"Mro\u017cek\"))\n             :ARG1 (t / translate-01\n                      :ARG2 (l / language\n                               :name (n2 / name\n                                         :op1 \"Portuguese\"))))\n   :ARG1 p3)", "(p / prepare-01\n   :ARG0 (p2 / person\n             :mod (o / other)\n             :ARG0 (s / study-01))\n   :ARG1 (p3 / play-11\n             :ARG0 (p4 / person\n                       :name (n / name\n                                :op1 \"Mro\u017cek\"))\n             :ARG1 (t / translate-01\n                      :ARG2 (l / language\n                               :name (n2 / name\n                                         :op1 \"Portuguese\"))))\n   :ARG1 p3)", "(p / prepare-01\n   :ARG0 (a / and\n            :op1 (h / he)\n            :op2 (p2 / person\n                     :mod (o / other)\n                     :ARG0 (s / study-01)))\n   :ARG1 (p3 / play-11\n             :ARG0 (p4 / person\n                       :name (n / name\n                                :op1 \"Mro\u017cek\"))\n             :ARG1 (t / translate-01\n                      :ARG2 (l / language\n                               :name (n2 / name\n                                         :op1 \"Portuguese\")))))", "(p / prepare-01\n   :ARG0 (a / and\n            :op1 (h / he)\n            :op2 (p2 / person\n                     :mod (o / other)\n                     :ARG0 (s / study-01)))\n   :ARG1 (p3 / play-11\n             :ARG0 (p4 / person\n                       :name (n / name\n                                :op1 \"Mro\u017cek\"))\n             :ARG1 (t / translate-01\n                      :ARG2 (l / language\n                               :name (n2 / name\n                                         :op1 \"Portuguese\")))))"], "smus": ["Charlese was attending a Portuguese theater as a subject.", "Translated into Portuguese", "Mroek is in play.", "Mroek's play translated into Portuguese is preparing.", "He was preparing Mroek's play translated into Portuguese.", "He was preparing Mroek's play translated into Portuguese.", "The students are preparing for Mroek's play translated into Portuguese.", "The students are preparing for Mroek's play translated into Portuguese.", "He and the students were preparing Mroek's play translated into Portuguese.", "He and the students were preparing Mroek's play translated into Portuguese."]}, {"instance_id": "samsum-31", "summary": "Lenny can't decide which trousers to buy. Bob advised Lenny on that topic. Lenny goes with Bob's advice to pick the trousers that are of best quality.", "summary_trees": ["# ::snt Lenny can't decide which trousers to buy.\n(p / possible-01\n      :polarity -\n      :ARG1 (d / decide-01\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Lenny\"))\n            :ARG1 (t / trousers\n                  :ARG1-of (b / buy-01\n                        :ARG0 p2))))", "# ::snt Bob advised Lenny on that topic.\n(a / advise-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Bob\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Lenny\"))\n      :ARG2 (t / topic\n            :mod (t2 / that)))", "# ::snt Lenny goes with Bob's advice to pick the trousers that are of best quality.\n(g / go-06\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Lenny\"))\n      :ARG1 (a / advise-01\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Bob\"))\n            :ARG1 p\n            :ARG2 (p3 / pick-01\n                  :ARG0 p\n                  :ARG1 (t / trousers\n                        :mod (q / quality\n                              :ARG1-of (h / have-degree-91\n                                    :ARG2 (g2 / good-02\n                                          :ARG1 q)\n                                    :ARG3 (m / most)))))))"], "tree": ["(a / advise-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Bob\")))", "(a / advise-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Bob\")))", "(h / have-degree-91\n   :ARG2 (g2 / good-02\n             :ARG1 (q / quality))\n   :ARG3 (m / most))", "(g / go-06\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lenny\")))", "(a / advise-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Bob\"))\n   :ARG1 (p / person :name (n / name :op1 \"Lenny\")))", "(p3 / pick-01\n    :ARG1 (t / trousers\n             :mod (q / quality\n                     :ARG1 (h / have-degree-91\n                              :ARG2 (g2 / good-02\n                                        :ARG1 q)\n                              :ARG3 (m / most)))))", "(p3 / pick-01\n    :ARG0 (p / person :name (n / name :op1 \"Lenny\"))\n    :ARG1 (t / trousers\n             :mod (q / quality\n                     :ARG1 (h / have-degree-91\n                              :ARG2 (g2 / good-02\n                                        :ARG1 q)\n                              :ARG3 (m / most)))))", "(p3 / pick-01\n    :ARG0 (p / person :name (n / name :op1 \"Lenny\"))\n    :ARG1 (t / trousers\n             :mod (q / quality\n                     :ARG1 (h / have-degree-91\n                              :ARG2 (g2 / good-02\n                                        :ARG1 q)\n                              :ARG3 (m / most)))))", "(a / advise-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Bob\"))\n   :ARG1 (p / person :name (n / name :op1 \"Lenny\"))\n   :ARG2 (p3 / pick-01\n             :ARG0 p\n             :ARG1 (t / trousers\n                      :mod (q / quality\n                              :ARG1 (h / have-degree-91\n                                       :ARG2 (g2 / good-02\n                                                 :ARG1 q)\n                                       :ARG3 (m / most))))))", "(a / advise-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Bob\"))\n   :ARG1 (p / person :name (n / name :op1 \"Lenny\"))\n   :ARG2 (p3 / pick-01\n             :ARG0 p\n             :ARG1 (t / trousers\n                      :mod (q / quality\n                              :ARG1 (h / have-degree-91\n                                       :ARG2 (g2 / good-02\n                                                 :ARG1 q)\n                                       :ARG3 (m / most))))))", "(g / go-06\n   :ARG1 (a / advise-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Bob\"))\n            :ARG1 (p / person :name (n / name :op1 \"Lenny\"))\n            :ARG2 (p3 / pick-01\n                      :ARG0 p\n                      :ARG1 (t / trousers\n                               :mod (q / quality\n                                       :ARG1 (h / have-degree-91\n                                                :ARG2 (g2 / good-02\n                                                          :ARG1 q)\n                                                :ARG3 (m / most)))))))", "(g / go-06\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lenny\"))\n   :ARG1 (a / advise-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Bob\"))\n            :ARG1 p\n            :ARG2 (p3 / pick-01\n                      :ARG0 p\n                      :ARG1 (t / trousers\n                               :mod (q / quality\n                                       :ARG1 (h / have-degree-91\n                                                :ARG2 (g2 / good-02\n                                                          :ARG1 q)\n                                                :ARG3 (m / most)))))))", "(g / go-06\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lenny\"))\n   :ARG1 (a / advise-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Bob\"))\n            :ARG1 p\n            :ARG2 (p3 / pick-01\n                      :ARG0 p\n                      :ARG1 (t / trousers\n                               :mod (q / quality\n                                       :ARG1 (h / have-degree-91\n                                                :ARG2 (g2 / good-02\n                                                          :ARG1 q)\n                                                :ARG3 (m / most)))))))"], "smus": ["Bob advised --", "Bob advised --", "Best quality", "Glenny goes.", "Bob gave Glenny advice.", "Pick the best quality trousers.", "Glenny would pick the best quality trousers.", "Glenny would pick the best quality trousers.", "Bob's advice to Glenny is to pick the best quality trousers.", "Bob's advice to Glenny is to pick the best quality trousers.", "Bob goes to tell Glenny to pick the best quality trousers.", "\"Lenny goes with Bob's advice to pick the best quality trousers.", "\"Lenny goes with Bob's advice to pick the best quality trousers."]}, {"instance_id": "samsum-32", "summary": "Yaz and Mary are meeting tonight around 6 and going for the slimming club together. They expect to be scolded for eating too much. ", "summary_trees": ["# ::snt Yaz and Mary are meeting tonight around 6 and going for the slimming club together.\n(a / and\n      :op1 (m / meet-03\n            :ARG0 (a2 / and\n                  :op1 (p / person\n                        :name (n / name\n                              :op1 \"Yaz\"))\n                  :op2 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Mary\")))\n            :time (d / date-entity\n                  :time \"19:00\"\n                  :dayperiod (n3 / night)\n                  :mod (t / today)))\n      :op2 (g / go-02\n            :ARG0 a2\n            :ARG4 (c / club\n                  :purpose (s / slim-01))\n            :manner (t2 / together)))", "# ::snt They expect to be scolded for eating too much.\n(e / expect-01\n      :ARG0 (t / they)\n      :ARG1 (s / scold-01\n            :ARG1 t\n            :ARG2 (e2 / eat-01\n                  :ARG0 t\n                  :ARG1-of (h / have-quant-91\n                        :ARG2 (m / much)\n                        :ARG3 (t2 / too)))))"], "tree": ["(g / go-02\n   :ARG0 (a2 / and)\n   :ARG4 (c / club\n            :purpose (s / slim-01))\n   :manner (t2 / together))", "(h / have-quant-91\n   :ARG2 (m / much)\n   :ARG3 (t2 / too))", "(e2 / eat-01\n    :ARG0 (t / they)\n    :ARG1 (h / have-quant-91\n             :ARG2 (m / much)\n             :ARG3 (t2 / too)))", "(e / expect-01\n   :ARG0 (t / they)\n   :ARG1 (s / scold-01\n            :ARG1 t\n            :ARG2 (e2 / eat-01\n                      :ARG0 t\n                      :ARG1 (h / have-quant-91\n                               :ARG2 (m / much)\n                               :ARG3 (t2 / too)))))"], "smus": ["Together, they are going to a slimming club.", "Too much.", "They are eating too much.", "They expect to be scolded for eating too much."]}, {"instance_id": "samsum-33", "summary": "Sage is having a beer. Lindsey has just finished her class but is not going to the next one. Just like last week, Lindsey has asked a classmate to fake her signature on the attendance list.", "summary_trees": ["# ::snt Sage is having a beer.\n(h / have-06\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Sage\"))\n      :ARG1 (b / beer))", "# ::snt Lindsey has just finished her class but is not going to the next one.\n(c / contrast-01\n      :ARG1 (f / finish-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Lindsey\"))\n            :ARG1 (c2 / class\n                  :poss p)\n            :time (j / just))\n      :ARG2 (g / go-02\n            :polarity -\n            :ARG0 p\n            :ARG4 (c3 / class\n                  :mod (n2 / next))))", "# ::snt Just like last week, Lindsey has asked a classmate to fake her signature on the attendance list.\n(a / ask-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Lindsey\"))\n      :ARG1 (f / fake-01\n            :ARG0 (c / classmate)\n            :ARG1 (s / sign-01\n                  :ARG0 c\n                  :ARG1 (l / list-01\n                        :ARG1 (a2 / attend-01))))\n      :ARG2 c\n      :ARG1-of (r / resemble-01\n            :ARG2 (w / week\n                  :mod (l2 / last))\n            :mod (j / just)))"], "tree": ["(h / have-06\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sage\"))\n   :ARG1 (b / beer))", "(f / finish-01\n   :ARG1 (c2 / class\n             :poss (p / person :name (n / name :op1 \"Lindsey\")))\n   :time (j / just))", "(f / finish-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lindsey\")))", "(g / go-02\n   :polarity -\n   :ARG0 (p / person :name (n / name :op1 \"Lindsey\"))\n   :ARG4 (c3 / class\n             :mod (n2 / next)))", "(f / finish-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lindsey\"))\n   :ARG1 (c2 / class\n             :poss p))", "(f / finish-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lindsey\"))\n   :ARG1 (c2 / class\n             :poss p)\n   :time (j / just))", "(f / finish-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lindsey\"))\n   :ARG1 (c2 / class\n             :poss p)\n   :time (j / just))", "(c / contrast-01\n   :ARG1 (f / finish-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Lindsey\"))\n            :ARG1 (c2 / class\n                      :poss p)\n            :time (j / just))\n   :ARG2 (g / go-02\n            :polarity -\n            :ARG0 p\n            :ARG4 (c3 / class\n                      :mod (n2 / next))))", "(c / contrast-01\n   :ARG1 (f / finish-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Lindsey\"))\n            :ARG1 (c2 / class\n                      :poss p)\n            :time (j / just))\n   :ARG2 (g / go-02\n            :polarity -\n            :ARG0 p\n            :ARG4 (c3 / class\n                      :mod (n2 / next))))", "(r / resemble-01\n   :ARG2 (w / week\n            :mod (l2 / last))\n   :mod (j / just))", "(a / ask-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lindsey\"))\n   :ARG1 (f / fake-01\n            :ARG0 (c / classmate)\n            :ARG1 (s / sign-01\n                     :ARG0 c\n                     :ARG1 (l / list-01\n                              :ARG1 (a2 / attend-01))))\n   :ARG2 c\n   :ARG1 (r / resemble-01\n            :ARG2 (w / week\n                     :mod (l2 / last))\n            :mod (j / just)))"], "smus": ["Sage was having a beer.", "Lindsey's class just finished.", "Lindsey has finished.", "Lindsey is not going to the next class.", "Lindsey has finished her class.", "Lindsey has just finished her class.", "Lindsey has just finished her class.", "Lindsey has just finished her class, but is not going to the next class.", "Lindsey has just finished her class, but is not going to the next class.", "Just like last week.", "Lindsey had asked her classmate to fake her signature on the attendance list, just like last week."]}, {"instance_id": "samsum-34", "summary": "Terence accused Daniel of taking his money. Terence finds the money later and apologizes to Daniel. Daniel is still upset.", "summary_trees": ["# ::snt Terence accused Daniel of taking his money.\n(a / accuse-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Terence\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Daniel\"))\n      :ARG2 (t / take-01\n            :ARG0 p2\n            :ARG1 (m / money\n                  :poss p)))", "# ::snt Terence finds the money later and apologizes to Daniel.\n(a / and\n      :op1 (f / find-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Terence\"))\n            :ARG1 (m / money)\n            :time (a2 / after))\n      :op2 (a3 / apologize-01\n            :ARG0 p\n            :ARG2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Daniel\"))))", "# ::snt Daniel is still upset.\n(u / upset-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Daniel\"))\n      :mod (s / still))"], "tree": ["(a / accuse-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Terence\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Daniel\"))\n   :ARG2 (t / take-01\n            :ARG0 p2\n            :ARG1 (m / money\n                     :poss p)))", "(a / accuse-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Terence\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Daniel\"))\n   :ARG2 (t / take-01\n            :ARG0 p2\n            :ARG1 (m / money\n                     :poss p)))", "(a3 / apologize-01\n    :ARG0 (p / person :name (n / name :op1 \"Terence\"))\n    :ARG2 (p2 / person\n              :name (n2 / name\n                        :op1 \"Daniel\")))", "(a3 / apologize-01\n    :ARG0 (p / person :name (n / name :op1 \"Terence\"))\n    :ARG2 (p2 / person\n              :name (n2 / name\n                        :op1 \"Daniel\")))", "(f / find-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Terence\"))\n   :ARG1 (m / money))", "(f / find-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Terence\"))\n   :ARG1 (m / money)\n   :time (a2 / after))", "(u / upset-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Daniel\")))", "(u / upset-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Daniel\"))\n   :mod (s / still))"], "smus": ["Terence accused Daniel of taking his money.", "Terence accused Daniel of taking his money.", "Terence apologizes to Daniel.", "Terence apologizes to Daniel.", "Terence finds the money.", "Terence finds the money later.", "Daniel is upset.", "Daniel is still upset."]}, {"instance_id": "samsum-35", "summary": "Chris and Tom are planning a meeting at Chris' place. Chris has a Jacuzzi in his garden. Chris has WiFi and can bring his TV outside. Tom has a low internet limit whenever he's outside of Ireland.", "summary_trees": ["# ::snt Chris and Tom are planning a meeting at Chris' place.\n(p / plan-01\n      :ARG0 (a / and\n            :op1 (p2 / person\n                  :name (n / name\n                        :op1 \"Chris\"))\n            :op2 (p3 / person\n                  :name (n2 / name\n                        :op1 \"Tom\")))\n      :ARG1 (m / meet-03\n            :location (p4 / place\n                  :poss p2)))", "# ::snt Chris has a Jacuzzi in his garden.\n(h / have-03\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Chris\"))\n      :ARG1 (j / Jacuzzi)\n      :location (g / garden\n            :poss p))", "# ::snt Chris has WiFi and can bring his TV outside.\n(a / and\n      :op1 (h / have-03\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Chris\"))\n            :ARG1 (w / WiFi))\n      :op2 (p2 / possible-01\n            :ARG1 (b / bring-01\n                  :ARG0 p\n                  :ARG1 (t / television\n                        :poss p)\n                  :ARG2 (o / outside))))", "# ::snt Tom has a low internet limit whenever he's outside of Ireland.\n(l / limit-01\n      :ARG1 (ii / internet)\n      :ARG2 (p / person\n            :name (n / name\n                  :op1 \"Tom\"))\n      :ARG1-of (l2 / low-04)\n      :time (b / be-located-at-91\n            :ARG1 p\n            :ARG2 (o / outside\n                  :op1 (c / country\n                        :name (n2 / name\n                              :op1 \"Ireland\")))\n            :mod (a / any)))"], "tree": ["(p / plan-01\n   :ARG1 (m / meet-03\n            :location (p4 / place\n                          :poss (p2 / person :name (n / name :op1 \"Chris\")))))", "(p / plan-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Chris\"))\n   :ARG1 (m / meet-03\n            :location (p4 / place\n                          :poss p2)))", "(p / plan-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Chris\"))\n   :ARG1 (m / meet-03\n            :location (p4 / place\n                          :poss p2)))", "(p / plan-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"Tom\"))\n   :ARG1 (m / meet-03\n            :location (p4 / place\n                          :poss (p2 / person :name (n / name :op1 \"Chris\"))))\n   :ARG1 m)", "(p / plan-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"Tom\"))\n   :ARG1 (m / meet-03\n            :location (p4 / place\n                          :poss (p2 / person :name (n / name :op1 \"Chris\"))))\n   :ARG1 m)", "(p / plan-01\n   :ARG0 (a / and\n            :op1 (p2 / person\n                     :name (n / name\n                              :op1 \"Chris\"))\n            :op2 (p3 / person\n                     :name (n2 / name\n                               :op1 \"Tom\")))\n   :ARG1 (m / meet-03\n            :location (p4 / place\n                          :poss p2)))", "(p / plan-01\n   :ARG0 (a / and\n            :op1 (p2 / person\n                     :name (n / name\n                              :op1 \"Chris\"))\n            :op2 (p3 / person\n                     :name (n2 / name\n                               :op1 \"Tom\")))\n   :ARG1 (m / meet-03\n            :location (p4 / place\n                          :poss p2)))", "(h / have-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Chris\"))\n   :ARG1 (j / Jacuzzi))", "(h / have-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Chris\"))\n   :ARG1 (j / Jacuzzi)\n   :location (g / garden\n                :poss p))", "(b / bring-01\n   :ARG1 (t / television\n            :poss (p / person :name (n / name :op1 \"Chris\")))\n   :ARG2 (o / outside))", "(h / have-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Chris\"))\n   :ARG1 (w / WiFi))", "(h / have-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Chris\"))\n   :ARG1 (w / WiFi))", "(p2 / possible-01\n    :ARG1 (b / bring-01\n             :ARG0 (p / person :name (n / name :op1 \"Chris\"))\n             :ARG1 (t / television\n                      :poss p)\n             :ARG2 (o / outside)))", "(p2 / possible-01\n    :ARG1 (b / bring-01\n             :ARG0 (p / person :name (n / name :op1 \"Chris\"))\n             :ARG1 (t / television\n                      :poss p)\n             :ARG2 (o / outside)))", "(b / be-located-at-91\n   :ARG1 (p / person :name (n / name :op1 \"Tom\"))\n   :ARG2 (o / outside\n            :op1 (c / country\n                    :name (n2 / name\n                              :op1 \"Ireland\"))))", "(l / limit-01\n   :ARG1 (ii / internet)\n   :ARG2 (p / person\n            :name (n / name\n                     :op1 \"Tom\"))\n   :ARG1 (l2 / low-04)\n   :time (b / be-located-at-91\n            :ARG1 p\n            :ARG2 (o / outside\n                     :op1 (c / country\n                             :name (n2 / name\n                                       :op1 \"Ireland\")))\n            :mod (a / any)))"], "smus": ["The meeting is planning to take place at Chris' place.", "Chris is planning a meeting at his place.", "Chris is planning a meeting at his place.", "Tom is planning a meeting at Chris' place.", "Tom is planning a meeting at Chris' place.", "Chris and Tom are planning a meeting at their place.", "Chris and Tom are planning a meeting at their place.", "Chris has a Jacuzzi.", "Chris has a Jacuzzi in his garden.", "Bring Chris' TV outside.", "Chris has WiFi.", "Chris has WiFi.", "Chris can bring his television outside.", "Chris can bring his television outside.", "Tom is outside Ireland.", "Tom has a low Internet limit any time he is outside of Ireland."]}, {"instance_id": "samsum-36", "summary": "Sue wants Graham to give her some dates for weekends in the Romford area. Lady Louise wants another 2 half days and focus on motorways. Graham has 2/3/9/10/16/17/23. Sue will let Graham know when Lady Louise comes back to her.", "summary_trees": ["# ::snt Sue wants Graham to give her some dates for weekends in the Romford area.\n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Sue\"))\n      :ARG1 (g / give-01\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Graham\"))\n            :ARG1 (d / date\n                  :quant (s / some)\n                  :purpose (w2 / weekend)\n                  :location (a / area\n                        :mod (c / city\n                              :name (n3 / name\n                                    :op1 \"Romford\"))))\n            :ARG2 p))", "# ::snt Lady Louise wants another 2 half days and focus on motorways.\n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Lady\"\n                  :op2 \"Louise\"))\n      :ARG1 (a / and\n            :op1 (t / temporal-quantity\n                  :quant 2.5\n                  :unit (d / day)\n                  :mod (a2 / another))\n            :op2 (f / focus-01\n                  :ARG0 p\n                  :ARG2 (m / motorway))))", "# ::snt Graham has 2/3/9/10/16/17/23.\n(h / have-03\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Graham\"))\n      :time (d / date-entity\n            :year 2017\n            :month 9\n            :day 3))", "# ::snt Sue will let Graham know when Lady Louise comes back to her.\n(l / let-know-07\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Sue\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Graham\"))\n      :ARG2 (c / come-01\n            :ARG1 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Lady\"\n                        :op2 \"Louise\"))\n            :direction (b / back)\n            :destination p))"], "tree": ["(g / give-01\n   :ARG1 (d / date\n            :quant (s / some)\n            :purpose (w2 / weekend)\n            :location (a / area\n                         :mod (c / city\n                                 :name (n3 / name\n                                           :op1 \"Romford\")))))", "(f / focus-01\n   :ARG0 (p / person :name (n / name :op1 \"Lady\" :op2 \"Louise\"))\n   :ARG2 (m / motorway))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lady\"\n                     :op2 \"Louise\"))\n   :ARG1 (f / focus-01\n            :ARG0 p\n            :ARG2 (m / motorway)))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lady\"\n                     :op2 \"Louise\"))\n   :ARG1 (f / focus-01\n            :ARG0 p\n            :ARG2 (m / motorway)))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lady\"\n                     :op2 \"Louise\"))\n   :ARG1 (t / temporal-quantity\n            :quant 2.5\n            :unit (d / day)\n            :mod (a2 / another)))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lady\"\n                     :op2 \"Louise\"))\n   :ARG1 (t / temporal-quantity\n            :quant 2.5\n            :unit (d / day)\n            :mod (a2 / another)))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lady\"\n                     :op2 \"Louise\"))\n   :ARG1 (a / and\n            :op1 (t / temporal-quantity\n                    :quant 2.5\n                    :unit (d / day)\n                    :mod (a2 / another))\n            :op2 (f / focus-01\n                    :ARG0 p\n                    :ARG2 (m / motorway))))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lady\"\n                     :op2 \"Louise\"))\n   :ARG1 (a / and\n            :op1 (t / temporal-quantity\n                    :quant 2.5\n                    :unit (d / day)\n                    :mod (a2 / another))\n            :op2 (f / focus-01\n                    :ARG0 p\n                    :ARG2 (m / motorway))))", "(c / come-01\n   :ARG1 (p3 / person\n             :name (n3 / name\n                       :op1 \"Lady\"\n                       :op2 \"Louise\")))", "(c / come-01\n   :ARG1 (p3 / person\n             :name (n3 / name\n                       :op1 \"Lady\"\n                       :op2 \"Louise\"))\n   :direction (b / back)\n   :destination (p / person :name (n / name :op1 \"Sue\")))", "(l / let-know-07\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sue\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Graham\"))\n   :ARG2 (c / come-01\n            :ARG1 (p3 / person\n                      :name (n3 / name\n                                :op1 \"Lady\"\n                                :op2 \"Louise\"))\n            :direction (b / back)\n            :destination p))"], "smus": ["Give some weekends dates in the romford area.", "Lady Louise will focus on the motorways.", "Lady Louise wants to focus on the motorways.", "Lady Louise wants to focus on the motorways.", "Lady Louise wants another two and a half days.", "Lady Louise wants another two and a half days.", "Lady Louise wants another two and a half days and to focus on the motorways.", "Lady Louise wants another two and a half days and to focus on the motorways.", "comes Lady Louise.", "Lady Louise comes back to Sue.", "Sue lets Graham know that Lady Louise comes back to her."]}, {"instance_id": "samsum-37", "summary": "Josh is upset, because he lost his new sneakers on Tuesday. Josh has already called the gym, but they didn't find anything. Josh will check the swimming pool and give Mark a call.", "summary_trees": ["# ::snt Josh is upset, because he lost his new sneakers on Tuesday.\n(u / upset-01\n      :ARG0 (l / lose-02\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Josh\"))\n            :ARG1 (s / sneaker\n                  :poss p\n                  :ARG1-of (n2 / new-01))\n            :time (d / date-entity\n                  :weekday (t / tuesday)))\n      :ARG1 p)", "# ::snt Josh has already called the gym, but they didn't find anything.\n(c / call-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Josh\"))\n      :ARG1 (g / gym)\n      :time (a / already)\n      :concession (f / find-01\n            :polarity -\n            :ARG0 g\n            :ARG1 (a2 / anything)))", "# ::snt Josh will check the swimming pool and give Mark a call.\n(a / and\n      :op1 (c / check-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Josh\"))\n            :ARG1 (p2 / pool\n                  :mod (s / swim-01)))\n      :op2 (c2 / call-02\n            :ARG0 p\n            :ARG1 (p3 / person\n                  :name (n2 / name\n                        :op1 \"Mark\"))))"], "tree": ["(l / lose-02\n   :time (d / date-entity\n            :weekday (t / tuesday)))", "(l / lose-02\n   :time (d / date-entity\n            :weekday (t / tuesday)))", "(l / lose-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Josh\"))\n   :ARG1 (s / sneaker\n            :poss p\n            :ARG1 (n2 / new-01)))", "(l / lose-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Josh\"))\n   :ARG1 (s / sneaker\n            :poss p\n            :ARG1 (n2 / new-01))\n   :time (d / date-entity\n            :weekday (t / tuesday)))", "(l / lose-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Josh\"))\n   :ARG1 (s / sneaker\n            :poss p\n            :ARG1 (n2 / new-01))\n   :time (d / date-entity\n            :weekday (t / tuesday)))", "(u / upset-01\n   :ARG0 (l / lose-02\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Josh\"))\n            :ARG1 (s / sneaker\n                     :poss p\n                     :ARG1 (n2 / new-01))\n            :time (d / date-entity\n                     :weekday (t / tuesday))))", "(u / upset-01\n   :ARG0 (l / lose-02\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Josh\"))\n            :ARG1 (s / sneaker\n                     :poss p\n                     :ARG1 (n2 / new-01))\n            :time (d / date-entity\n                     :weekday (t / tuesday)))\n   :ARG1 p)", "(u / upset-01\n   :ARG0 (l / lose-02\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Josh\"))\n            :ARG1 (s / sneaker\n                     :poss p\n                     :ARG1 (n2 / new-01))\n            :time (d / date-entity\n                     :weekday (t / tuesday)))\n   :ARG1 p)", "(f / find-01\n   :ARG0 (g / gym)\n   :ARG1 (a2 / anything))", "(f / find-01\n   :polarity -\n   :ARG0 (g / gym)\n   :ARG1 (a2 / anything))", "(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Josh\")))", "(c / call-02\n   :time (a / already)\n   :concession (f / find-01\n                  :polarity -))", "(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Josh\"))\n   :ARG1 (g / gym))", "(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Josh\"))\n   :ARG1 (g / gym)\n   :time (a / already))", "(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Josh\"))\n   :ARG1 (g / gym)\n   :time (a / already)\n   :concession (f / find-01\n                  :polarity -\n                  :ARG0 g\n                  :ARG1 (a2 / anything)))", "(c / check-01\n   :ARG1 (p2 / pool\n             :mod (s / swim-01)))", "(c2 / call-02\n    :ARG1 (p3 / person\n              :name (n2 / name\n                        :op1 \"Mark\")))", "(c / check-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Josh\"))\n   :ARG1 (p2 / pool\n             :mod (s / swim-01)))", "(c / check-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Josh\"))\n   :ARG1 (p2 / pool\n             :mod (s / swim-01)))"], "smus": ["Tuesday, lost.", "Tuesday, lost.", "Josh lost his new sneakers.", "Josh lost his new sneakers Tuesday.", "Josh lost his new sneakers Tuesday.", "Josh was upset that he lost his new sneakers Tuesday.", "Josh was upset that he lost his new sneakers Tuesday.", "Josh was upset that he lost his new sneakers Tuesday.", "The gym doesn't find anything.", "The gym didn't find anything.", "Josh called.", "Called already, but didn't find.", "Josh has called the gym.", "Josh has already called the gym.", "Josh has already called the gym, but didn't find anything.", "Check the swimming pool.", "Call to Mark.", "Josh, check the swimming pool.", "Josh, check the swimming pool."]}, {"instance_id": "samsum-38", "summary": "Emilia is still angry.", "summary_trees": ["# ::snt Emilia is still angry.\n(a / angry\n      :domain (p / person\n            :name (n / name\n                  :op1 \"Emilia\"))\n      :time (s / still))"], "tree": ["(a / angry\n   :domain (p / person\n              :name (n / name\n                       :op1 \"Emilia\"))\n   :time (s / still))"], "smus": ["Emilia is still angry."]}, {"instance_id": "samsum-39", "summary": "Joanna got her dress stained. Ethel recommends her dry-cleaner at Jagielonska 3. ", "summary_trees": ["# ::snt Joanna got her dress stained.\n(g / get-04\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Joanna\"))\n      :ARG1 (s / stain-01\n            :ARG1 (d / dress\n                  :poss p)))", "# ::snt Ethel recommends her dry-cleaner at Jagielonska 3.\n(r / recommend-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Ethel\"))\n      :ARG1 (c / company\n            :name (n2 / name\n                  :op1 \"Jagielonska\"\n                  :op2 3)\n            :ARG0-of (c2 / clean-01\n                  :mod (d / dry))\n            :poss p))"], "tree": ["(s / stain-01\n   :ARG1 (d / dress\n            :poss (p / person :name (n / name :op1 \"Joanna\"))))", "(g / get-04\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Joanna\"))\n   :ARG1 (s / stain-01\n            :ARG1 (d / dress\n                     :poss p)))", "(r / recommend-01\n   :ARG1 (c / company\n            :name (n2 / name\n                      :op1 \"Jagielonska\"\n                      :op2 3)\n            :ARG0 (c2 / clean-01\n                      :mod (d / dry))\n            :poss (p / person :name (n / name :op1 \"Ethel\"))))", "(r / recommend-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ethel\"))\n   :ARG1 (c / company\n            :name (n2 / name\n                      :op1 \"Jagielonska\"\n                      :op2 3)\n            :ARG0 (c2 / clean-01\n                      :mod (d / dry))\n            :poss p))"], "smus": ["Joanna's dress was stained.", "Joanna got her dress stained.", "Thel recommends Jagielonska 3 for his dry cleaning.", "a href=\"http://www.jls.com/news/ethel/2011/03/jagielonska-3-dry-cleaning--ethel-recommends-jagielonska-3-dry-cleaning--ethel.html\">Ethel recommends Jagielonska 3 dry cleaning/a>"]}, {"instance_id": "samsum-40", "summary": "Hollie says hello to Amy, but Amy is busy working and can't chat right now.", "summary_trees": ["# ::snt Hollie says hello to Amy, but Amy is busy working and can't chat right now.\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Hollie\"))\n      :ARG1 (h / hello)\n      :ARG2 (p2 / person\n            :name (n2 / name\n                  :op1 \"Amy\"))\n      :concession-of (a / and\n            :op1 (b / busy-01\n                  :ARG1 p2\n                  :ARG2 (w / work-01\n                        :ARG0 p2))\n            :op2 (p3 / possible-01\n                  :polarity -\n                  :ARG1 (c / chat-01\n                        :ARG0 p2\n                        :ARG2 p\n                        :time (n3 / now\n                              :mod (r / right))))))"], "tree": ["(s / say-01\n   :concession (p3 / possible-01\n                   :polarity -))", "(b / busy-01\n   :ARG1 (p2 / person :name (n2 / name :op1 \"Amy\"))\n   :ARG2 (w / work-01\n            :ARG0 p2))", "(p3 / possible-01\n    :polarity -\n    :ARG1 (c / chat-01\n             :ARG0 (p2 / person :name (n2 / name :op1 \"Amy\"))\n             :ARG2 (p / person :name (n / name :op1 \"Hollie\"))\n             :time (n3 / now\n                       :mod (r / right))))", "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hollie\"))\n   :ARG1 (h / hello)\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Amy\"))\n   :concession (p3 / possible-01\n                   :polarity -\n                   :ARG1 (c / chat-01\n                            :ARG0 p2\n                            :ARG2 p\n                            :time (n3 / now\n                                      :mod (r / right)))))", "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hollie\"))\n   :ARG1 (h / hello)\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Amy\"))\n   :concession (a / and\n                  :op1 (b / busy-01\n                          :ARG1 p2\n                          :ARG2 (w / work-01\n                                   :ARG0 p2))\n                  :op2 (p3 / possible-01\n                           :polarity -\n                           :ARG1 (c / chat-01\n                                    :ARG0 p2\n                                    :ARG2 p\n                                    :time (n3 / now\n                                              :mod (r / right))))))"], "smus": ["Says, but can't.", "Amy is busy working.", "Amy and Hollie can't chat right now.", "Hello Amy, but can't chat with you right now, Hollie says.", "hollie says hello to amy despite being busy working and unable to chat right now."]}, {"instance_id": "samsum-41", "summary": "Farrah shared his collection of fossils with the class, and Enrique was very impressed. Enrique would like Farrah to show the collection for the 4th grade students as well.", "summary_trees": ["# ::snt Farrah shared his collection of fossils with the class, and Enrique was very impressed.\n(a / and\n      :op1 (s / share-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Farrah\"))\n            :ARG1 (c / collect-01\n                  :ARG0 p\n                  :ARG1 (f / fossil))\n            :ARG2 (c2 / class))\n      :op2 (ii / impress-01\n            :ARG1 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Enrique\"))\n            :degree (v / very)))", "# ::snt Enrique would like Farrah to show the collection for the 4th grade students as well.\n(l / like-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Enrique\"))\n      :ARG1 (s / show-01\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Farrah\"))\n            :ARG1 (c / collect-01)\n            :ARG2 (p3 / person\n                  :ARG0-of (s2 / study-01)\n                  :mod (g / grade\n                        :ord (o / ordinal-entity\n                              :value 4)))\n            :mod (a / as-well)))"], "tree": ["(c / collect-01\n   :ARG0 (p / person :name (n / name :op1 \"Farrah\"))\n   :ARG1 (f / fossil))", "(c / collect-01\n   :ARG0 (p / person :name (n / name :op1 \"Farrah\"))\n   :ARG1 (f / fossil))", "(s / share-01\n   :ARG1 (c / collect-01\n            :ARG0 (p / person :name (n / name :op1 \"Farrah\"))\n            :ARG1 (f / fossil)))", "(ii / impress-01\n    :ARG1 (p2 / person\n              :name (n2 / name\n                        :op1 \"Enrique\"))\n    :degree (v / very))", "(s / share-01\n   :ARG1 (c / collect-01\n            :ARG0 (p / person :name (n / name :op1 \"Farrah\"))\n            :ARG1 (f / fossil))\n   :ARG2 (c2 / class))", "(s / share-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Farrah\"))\n   :ARG1 (c / collect-01\n            :ARG0 p\n            :ARG1 (f / fossil))\n   :ARG2 (c2 / class))", "(s / share-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Farrah\"))\n   :ARG1 (c / collect-01\n            :ARG0 p\n            :ARG1 (f / fossil))\n   :ARG2 (c2 / class))", "(l / like-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Enrique\"))\n   :ARG1 (s / show-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Farrah\"))\n            :ARG1 (c / collect-01)\n            :ARG2 (p3 / person\n                      :ARG0 (s2 / study-01)\n                      :mod (g / grade\n                              :ord (o / ordinal-entity\n                                      :value 4)))\n            :mod (a / as-well)))", "(l / like-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Enrique\"))\n   :ARG1 (s / show-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Farrah\"))\n            :ARG1 (c / collect-01)\n            :ARG2 (p3 / person\n                      :ARG0 (s2 / study-01)\n                      :mod (g / grade\n                              :ord (o / ordinal-entity\n                                      :value 4)))\n            :mod (a / as-well)))"], "smus": ["Farrah's collection of fossils:", "Farrah's collection of fossils:", "Farrah's collection of fossils shared.", "Enrique was very impressive.", "Farrah's fossil collection shared the class.", "Farrah shared his fossil collection with the class.", "Farrah shared his fossil collection with the class.", "Enrique would like Farrah to show the collection to 4th grade students as well.", "Enrique would like Farrah to show the collection to 4th grade students as well."]}, {"instance_id": "samsum-42", "summary": "Linda refuses to accept plants for her garden from Mika. She would not be able to plant them before leaving.", "summary_trees": ["# ::snt Linda refuses to accept plants for her garden from Mika.\n(r / refuse-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Linda\"))\n      :ARG1 (a / accept-01\n            :ARG0 p\n            :ARG1 (p2 / plant\n                  :purpose (g / garden\n                        :poss p))\n            :ARG2 (p3 / person\n                  :name (n2 / name\n                        :op1 \"Mika\"))))", "# ::snt She would not be able to plant them before leaving.\n(p / possible-01\n      :polarity -\n      :ARG1 (p2 / plant-01\n            :ARG0 (s / she)\n            :ARG1 (t / they)\n            :time (b / before\n                  :op1 (l / leave-11\n                        :ARG0 s))))"], "tree": ["(r / refuse-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Linda\"))\n   :ARG1 (a / accept-01\n            :ARG0 p\n            :ARG1 (p2 / plant\n                      :purpose (g / garden\n                                  :poss p))\n            :ARG2 (p3 / person\n                      :name (n2 / name\n                                :op1 \"Mika\"))))", "(r / refuse-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Linda\"))\n   :ARG1 (a / accept-01\n            :ARG0 p\n            :ARG1 (p2 / plant\n                      :purpose (g / garden\n                                  :poss p))\n            :ARG2 (p3 / person\n                      :name (n2 / name\n                                :op1 \"Mika\"))))", "(p / possible-01\n   :polarity -\n   :ARG1 (p2 / plant-01\n             :ARG0 (s / she)\n             :ARG1 (t / they)\n             :time (b / before\n                      :op1 (l / leave-11\n                              :ARG0 s))))"], "smus": ["Linda refuses to accept Mika's garden plants.", "Linda refuses to accept Mika's garden plants.", "She cannot plant them before she leaves."]}, {"instance_id": "samsum-43", "summary": "Ana wants to visit grandma tomorrow. Catherine will go with her. She will call Anna when she wakes up.", "summary_trees": ["# ::snt Ana wants to visit grandma tomorrow.\n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Ana\"))\n      :ARG1 (v / visit-01\n            :ARG0 p\n            :ARG1 (p2 / person\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 p\n                        :ARG2 (g / grandma)))\n            :time (t / tomorrow)))", "# ::snt Catherine will go with her.\n(a / accompany-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Catherine\"))\n      :ARG1 (s / she))", "# ::snt She will call Anna when she wakes up.\n(c / call-02\n      :ARG0 (s / she)\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Anna\"))\n      :time (w / wake-up-02\n            :ARG1 s))"], "tree": ["(v / visit-01\n   :ARG0 (p / person :name (n / name :op1 \"Ana\"))\n   :ARG1 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 p\n                      :ARG2 (g / grandma))))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ana\"))\n   :ARG1 (v / visit-01\n            :ARG0 p\n            :ARG1 (p2 / person\n                      :ARG0 (h / have-rel-role-91\n                               :ARG1 p\n                               :ARG2 (g / grandma)))\n            :time (t / tomorrow)))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ana\"))\n   :ARG1 (v / visit-01\n            :ARG0 p\n            :ARG1 (p2 / person\n                      :ARG0 (h / have-rel-role-91\n                               :ARG1 p\n                               :ARG2 (g / grandma)))\n            :time (t / tomorrow)))", "(a / accompany-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Catherine\")))", "(a / accompany-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Catherine\"))\n   :ARG1 (s / she))", "(a / accompany-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Catherine\"))\n   :ARG1 (s / she))", "(c / call-02\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Anna\")))", "(c / call-02\n   :ARG0 (s / she)\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Anna\")))", "(c / call-02\n   :ARG0 (s / she)\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Anna\"))\n   :time (w / wake-up-02\n            :ARG1 s))", "(c / call-02\n   :ARG0 (s / she)\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Anna\"))\n   :time (w / wake-up-02\n            :ARG1 s))"], "smus": ["Ana will visit her grandma.", "Ana wants to visit her grandma tomorrow.", "Ana wants to visit her grandma tomorrow.", "Catherine with her.", "Catherine with her.", "Catherine with her.", "Call Anna.", "She'll call Anna.", "When she wakes up, she will call Anna.", "When she wakes up, she will call Anna."]}, {"instance_id": "samsum-44", "summary": "Jasmine loves Charlie Puth and his new song. Paola thinks Charlie Puth is attractive. Paola likes the song \"Galway Girl\" by Ed Sheeran.", "summary_trees": ["# ::snt Jasmine loves Charlie Puth and his new song.\n(l / love-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jasmine\"))\n      :ARG1 (a / and\n            :op1 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Charlie\"\n                        :op2 \"Puth\"))\n            :op2 (s / song\n                  :ARG1-of (n3 / new-01)\n                  :poss p2)))", "# ::snt Paola thinks Charlie Puth is attractive.\n(t / think-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Paola\"))\n      :ARG1 (a / attract-01\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Charlie\"\n                        :op2 \"Puth\"))))", "# ::snt Paola likes the song \"Galway Girl\" by Ed Sheeran.\n(l / like-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Paola\"))\n      :ARG1 (s / song\n            :name (n2 / name\n                  :op1 \"Galway\"\n                  :op2 \"Girl\")\n            :source (p2 / person\n                  :name (n3 / name\n                        :op1 \"Ed\"\n                        :op2 \"Sheeran\"))))"], "tree": ["(l / love-01\n   :ARG1 (s / song\n            :ARG1 (n3 / new-01)\n            :poss (p2 / person :name (n2 / name :op1 \"Charlie\" :op2 \"Puth\"))))", "(l / love-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Charlie\"\n                       :op2 \"Puth\")))", "(l / love-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jasmine\"))\n   :ARG1 (s / song\n            :ARG1 (n3 / new-01)\n            :poss (p2 / person :name (n2 / name :op1 \"Charlie\" :op2 \"Puth\"))))", "(l / love-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jasmine\"))\n   :ARG1 (s / song\n            :ARG1 (n3 / new-01)\n            :poss (p2 / person :name (n2 / name :op1 \"Charlie\" :op2 \"Puth\"))))", "(l / love-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jasmine\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Charlie\"\n                       :op2 \"Puth\")))", "(l / love-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jasmine\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Charlie\"\n                       :op2 \"Puth\")))", "(l / love-01\n   :ARG1 (a / and\n            :op1 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Charlie\"\n                               :op2 \"Puth\"))\n            :op2 (s / song\n                    :ARG1 (n3 / new-01)\n                    :poss p2)))", "(a / attract-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Charlie\"\n                       :op2 \"Puth\")))", "(a / attract-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Charlie\"\n                       :op2 \"Puth\")))", "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Paola\"))\n   :ARG1 (a / attract-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Charlie\"\n                                :op2 \"Puth\"))))", "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Paola\"))\n   :ARG1 (a / attract-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Charlie\"\n                                :op2 \"Puth\"))))", "(l / like-01\n   :ARG1 (s / song\n            :name (n2 / name\n                      :op1 \"Galway\"\n                      :op2 \"Girl\")\n            :source (p2 / person\n                        :name (n3 / name\n                                  :op1 \"Ed\"\n                                  :op2 \"Sheeran\"))))", "(l / like-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Paola\"))\n   :ARG1 (s / song\n            :name (n2 / name\n                      :op1 \"Galway\"\n                      :op2 \"Girl\")\n            :source (p2 / person\n                        :name (n3 / name\n                                  :op1 \"Ed\"\n                                  :op2 \"Sheeran\"))))", "(l / like-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Paola\"))\n   :ARG1 (s / song\n            :name (n2 / name\n                      :op1 \"Galway\"\n                      :op2 \"Girl\")\n            :source (p2 / person\n                        :name (n3 / name\n                                  :op1 \"Ed\"\n                                  :op2 \"Sheeran\"))))"], "smus": ["Loves Charlie Puth's new song.", "Loves Charlie Puth.", "Jasmine loves Charlie Puth's new song.", "Jasmine loves Charlie Puth's new song.", "Jasmine loves Charlie Puth.", "Jasmine loves Charlie Puth.", "Loves Charlie Puth and his new song.", "Charlie Puth is attractive.", "Charlie Puth is attractive.", "Paola thinks Charlie Puth is attractive.", "Paola thinks Charlie Puth is attractive.", "Likes the song Galway Girl by Ed Sheeran.", "Paola likes the song Galway Girl by Ed Sheeran.", "Paola likes the song Galway Girl by Ed Sheeran."]}, {"instance_id": "samsum-45", "summary": "Caroline and Megan play a guessing game - they need to guess which film a quote comes from.", "summary_trees": ["# ::snt Caroline and Megan play a guessing game - they need to guess which film a quote comes from.\n(p / play-01\n      :ARG0 (a / and\n            :op1 (p2 / person\n                  :name (n / name\n                        :op1 \"Caroline\"))\n            :op2 (p3 / person\n                  :name (n2 / name\n                        :op1 \"Megan\")))\n      :ARG1 (g / game\n            :mod (g2 / guess-01)\n            :ARG1-of (m / mean-01\n                  :ARG2 (n3 / need-01\n                        :ARG0 a\n                        :ARG1 (g3 / guess-01\n                              :ARG0 a\n                              :ARG1 (t / thing\n                                    :ARG2-of (f / film-01\n                                          :ARG2-of (c / come-03\n                                                :ARG1 (t2 / thing\n                                                      :ARG1-of (q / quote-01))))))))))"], "tree": ["(g3 / guess-01\n    :ARG0 (a / and)\n    :ARG1 (t / thing))", "(g3 / guess-01\n    :ARG0 (a / and)\n    :ARG1 (t / thing))", "(p / play-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Caroline\")))", "(p / play-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"Megan\")))", "(f / film-01\n   :ARG2 (c / come-03\n            :ARG1 (t2 / thing\n                      :ARG1 (q / quote-01))))", "(n3 / need-01\n    :ARG0 (a / and)\n    :ARG1 (g3 / guess-01\n              :ARG0 a\n              :ARG1 (t / thing)))", "(n3 / need-01\n    :ARG0 (a / and)\n    :ARG1 (g3 / guess-01\n              :ARG0 a\n              :ARG1 (t / thing)))", "(m / mean-01\n   :ARG2 (n3 / need-01\n             :ARG0 (a / and)\n             :ARG1 (g3 / guess-01\n                       :ARG0 a\n                       :ARG1 (t / thing))))", "(p / play-01\n   :ARG0 (a / and\n            :op1 (p2 / person\n                     :name (n / name\n                              :op1 \"Caroline\"))\n            :op2 (p3 / person\n                     :name (n2 / name\n                               :op1 \"Megan\"))))", "(p / play-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Caroline\"))\n   :ARG1 (g / game\n            :mod (g2 / guess-01)\n            :ARG1 (m / mean-01\n                     :ARG2 (n3 / need-01\n                               :ARG0 p2\n                               :ARG1 (g3 / guess-01\n                                         :ARG0 p2\n                                         :ARG1 (t / thing))))))", "(p / play-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Caroline\"))\n   :ARG1 (g / game\n            :mod (g2 / guess-01)\n            :ARG1 (m / mean-01\n                     :ARG2 (n3 / need-01\n                               :ARG0 p2\n                               :ARG1 (g3 / guess-01\n                                         :ARG0 p2\n                                         :ARG1 (t / thing))))))"], "smus": ["Guess what.", "Guess what.", "Caroline play.", "Megan play.", "The film is where the quote comes from.", "And guess what, people need to guess.", "And guess what, people need to guess.", "Meaning, people need to guess what's going on.", "Caroline and Meghan play.", "Caroline play the guess game, \"I need to guess what.\"", "Caroline play the guess game, \"I need to guess what.\""]}, {"instance_id": "samsum-46", "summary": "Titus agrees to help Emely with a language exercise. Emely sends Titus a photo of the filled out exercise, but he has trouble reading it.", "summary_trees": ["# ::snt Titus agrees to help Emely with a language exercise.\n(a / agree-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Titus\"))\n      :ARG1 (h / help-01\n            :ARG0 p\n            :ARG1 (e / exercise-02\n                  :ARG1 (l / language))\n            :ARG2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Emely\"))))", "# ::snt Emely sends Titus a photo of the filled out exercise, but he has trouble reading it.\n(c / contrast-01\n      :ARG1 (s / send-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Emely\"))\n            :ARG1 (p2 / photo\n                  :topic (e / exercise\n                        :ARG1-of (f / fill-out-03)))\n            :ARG2 (p3 / person\n                  :name (n2 / name\n                        :op1 \"Titus\")))\n      :ARG2 (h / have-trouble-04\n            :ARG0 p3\n            :ARG1 (r / read-01\n                  :ARG0 p3\n                  :ARG1 p2)))"], "tree": ["(h / help-01\n   :ARG0 (p / person :name (n / name :op1 \"Titus\"))\n   :ARG1 (e / exercise-02\n            :ARG1 (l / language)))", "(a / agree-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Titus\")))", "(h / help-01\n   :ARG0 (p / person :name (n / name :op1 \"Titus\"))\n   :ARG1 (e / exercise-02\n            :ARG1 (l / language))\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Emely\")))", "(a / agree-01\n   :ARG1 (h / help-01\n            :ARG0 (p / person :name (n / name :op1 \"Titus\"))\n            :ARG1 (e / exercise-02\n                     :ARG1 (l / language))\n            :ARG2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Emely\"))))", "(a / agree-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Titus\"))\n   :ARG1 (h / help-01\n            :ARG0 p\n            :ARG1 (e / exercise-02\n                     :ARG1 (l / language))\n            :ARG2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Emely\"))))", "(a / agree-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Titus\"))\n   :ARG1 (h / help-01\n            :ARG0 p\n            :ARG1 (e / exercise-02\n                     :ARG1 (l / language))\n            :ARG2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Emely\"))))", "(h / have-trouble-04\n   :ARG0 (p3 / person :name (n2 / name :op1 \"Titus\"))\n   :ARG1 (r / read-01\n            :ARG0 p3\n            :ARG1 (p2 / photo)))"], "smus": ["Titus would help with the language exercise.", "Titus agrees.", "Titus helped Emely with the language exercise.", "Agrees with Emely that Titus would help with the language exercise.", "Titus agrees to help Emely with the language exercise.", "Titus agrees to help Emely with the language exercise.", "Titus has trouble reading the photo."]}, {"instance_id": "samsum-47", "summary": "Son is coming to see his parents' this weekend.", "summary_trees": ["# ::snt Son is coming to see his parents' this weekend.\n(c / come-01\n      :ARG1 (p / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (h2 / he)\n                  :ARG2 (s / son)))\n      :purpose (s2 / see-01\n            :ARG0 p\n            :ARG1 (p2 / person\n                  :ARG0-of (h3 / have-rel-role-91\n                        :ARG1 p\n                        :ARG2 (p3 / parent))))\n      :time (w / weekend\n            :mod (t / this)))"], "tree": ["(h3 / have-rel-role-91\n    :ARG1 (p / person)\n    :ARG2 (p3 / parent))", "(h / have-rel-role-91\n   :ARG1 (h2 / he)\n   :ARG2 (s / son))", "(c / come-01\n   :time (w / weekend\n            :mod (t / this)))", "(c / come-01\n   :purpose (s2 / see-01)\n   :time (w / weekend\n            :mod (t / this)))", "(s2 / see-01\n    :ARG1 (p2 / person\n              :ARG0 (h3 / have-rel-role-91\n                        :ARG1 (p / person)\n                        :ARG2 (p3 / parent))))", "(s2 / see-01\n    :ARG0 (p / person)\n    :ARG1 (p2 / person\n              :ARG0 (h3 / have-rel-role-91\n                        :ARG1 p\n                        :ARG2 (p3 / parent))))", "(s2 / see-01\n    :ARG0 (p / person)\n    :ARG1 (p2 / person\n              :ARG0 (h3 / have-rel-role-91\n                        :ARG1 p\n                        :ARG2 (p3 / parent))))", "(c / come-01\n   :ARG1 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (h2 / he)\n                     :ARG2 (s / son))))", "(c / come-01\n   :ARG1 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (h2 / he)\n                     :ARG2 (s / son)))\n   :time (w / weekend\n            :mod (t / this)))", "(c / come-01\n   :ARG1 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (h2 / he)\n                     :ARG2 (s / son)))\n   :purpose (s2 / see-01\n                :ARG0 p\n                :ARG1 (p2 / person\n                          :ARG0 (h3 / have-rel-role-91\n                                    :ARG1 p\n                                    :ARG2 (p3 / parent))))\n   :time (w / weekend\n            :mod (t / this)))"], "smus": ["People are parents.", "His son", "Coming this weekend.", "Coming to see this weekend.", "See the People's Parents.", "People DO see their parents.", "People DO see their parents.", "His Son was coming.", "His son is coming this weekend.", "His son is coming this weekend to see his parents."]}, {"instance_id": "samsum-48", "summary": "Linda and Laura are going to an Italian restaurant tomorrow.", "summary_trees": ["# ::snt Linda and Laura are going to an Italian restaurant tomorrow.\n(g / go-02\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Linda\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Laura\")))\n      :ARG4 (r / restaurant\n            :mod (c / country\n                  :name (n3 / name\n                        :op1 \"Italy\")))\n      :time (t / tomorrow))"], "tree": ["(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Linda\")))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Laura\")))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Linda\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Laura\"))))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Linda\"))\n   :ARG4 (r / restaurant\n            :mod (c / country\n                    :name (n3 / name\n                              :op1 \"Italy\"))))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Laura\"))\n   :ARG4 (r / restaurant\n            :mod (c / country\n                    :name (n3 / name\n                              :op1 \"Italy\")))\n   :ARG4 r)", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Linda\"))\n   :ARG4 (r / restaurant\n            :mod (c / country\n                    :name (n3 / name\n                              :op1 \"Italy\")))\n   :time (t / tomorrow))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Linda\"))\n   :ARG4 (r / restaurant\n            :mod (c / country\n                    :name (n3 / name\n                              :op1 \"Italy\")))\n   :time (t / tomorrow))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Laura\"))\n   :ARG4 (r / restaurant\n            :mod (c / country\n                    :name (n3 / name\n                              :op1 \"Italy\")))\n   :ARG4 r\n   :time (t / tomorrow))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Laura\"))\n   :ARG4 (r / restaurant\n            :mod (c / country\n                    :name (n3 / name\n                              :op1 \"Italy\")))\n   :ARG4 r\n   :time (t / tomorrow))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Linda\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Laura\")))\n   :ARG4 (r / restaurant\n            :mod (c / country\n                    :name (n3 / name\n                              :op1 \"Italy\"))))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Linda\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Laura\")))\n   :ARG4 (r / restaurant\n            :mod (c / country\n                    :name (n3 / name\n                              :op1 \"Italy\")))\n   :time (t / tomorrow))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Linda\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Laura\")))\n   :ARG4 (r / restaurant\n            :mod (c / country\n                    :name (n3 / name\n                              :op1 \"Italy\")))\n   :time (t / tomorrow))"], "smus": ["Linda is going.", "Laura is going.", "Linda and Laura are going.", "Linda was going to an italian restaurant.", "Laura was going to an italian restaurant.", "Linda is going to an italian restaurant tomorrow.", "Linda is going to an italian restaurant tomorrow.", "Laura will be going to an italian restaurant tomorrow.", "Laura will be going to an italian restaurant tomorrow.", "Linda and Laura are going to an italian restaurant.", "Linda and Laura will be going to an italian restaurant tomorrow.", "Linda and Laura will be going to an italian restaurant tomorrow."]}, {"instance_id": "samsum-49", "summary": "USA won last night. England is playing against Croatia tomorrow at 2.", "summary_trees": ["# ::snt USA won last night.\n(w / win-01\n      :ARG0 (t / team\n            :name (n / name\n                  :op1 \"USA\"))\n      :time (d / date-entity\n            :dayperiod (n2 / night)\n            :mod (y / yesterday)))", "# ::snt England is playing against Croatia tomorrow at 2.\n(p / play-01\n      :ARG0 (t / team\n            :name (n / name\n                  :op1 \"England\"))\n      :ARG3 (t2 / team\n            :name (n2 / name\n                  :op1 \"Croatia\"))\n      :time (t3 / tomorrow)\n      :time (d / date-entity\n            :time \"2:00\"))"], "tree": ["(w / win-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"USA\")))", "(w / win-01\n   :time (d / date-entity\n            :dayperiod (n2 / night)\n            :mod (y / yesterday)))", "(w / win-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"USA\"))\n   :time (d / date-entity\n            :dayperiod (n2 / night)\n            :mod (y / yesterday)))", "(p / play-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"England\")))", "(p / play-01\n   :time (t3 / tomorrow)\n   :time (d / date-entity\n            :time \"2:00\"))", "(p / play-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"England\"))\n   :ARG3 (t2 / team\n             :name (n2 / name\n                       :op1 \"Croatia\"))\n   :time (t3 / tomorrow)\n   :time (d / date-entity\n            :time \"2:00\"))"], "smus": ["USA won.", "The victory happened last night.", "USA won last night.", "England are playing", "Playing tomorrow at 2 p.m.", "England v Croatia at 2pm tomorrow"]}, {"instance_id": "samsum-50", "summary": "Julia broke Tom's cup, which made him sad. She will buy him a new one.", "summary_trees": ["# ::snt Julia broke Tom's cup, which made him sad.\n(b / break-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Julia\"))\n      :ARG1 (c / cup\n            :poss (p2 / person\n                  :name (n2 / name\n                        :op1 \"Tom\")))\n      :ARG0-of (m / make-02\n            :ARG1 (s / sad-02\n                  :ARG1 p2)))", "# ::snt She will buy him a new one.\n(b / buy-01\n      :ARG0 (s / she)\n      :ARG1 (o / one\n            :ARG1-of (n / new-01))\n      :ARG4 (h / he))"], "tree": ["(m / make-02\n   :ARG1 (s / sad-02\n            :ARG1 (p2 / person :name (n2 / name :op1 \"Tom\"))))", "(b / break-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Julia\"))\n   :ARG1 (c / cup\n            :poss (p2 / person\n                      :name (n2 / name\n                                :op1 \"Tom\"))))", "(b / buy-01\n   :ARG1 (o / one\n            :ARG1 (n / new-01)))", "(b / buy-01\n   :ARG0 (s / she)\n   :ARG1 (o / one\n            :ARG1 (n / new-01)))", "(b / buy-01\n   :ARG0 (s / she)\n   :ARG1 (o / one\n            :ARG1 (n / new-01))\n   :ARG4 (h / he))"], "smus": ["Made Tom sad.", "Julia broke Tom's cup.", "Buy a new one.", "She'll buy a new one.", "She'll buy him a new one."]}, {"instance_id": "samsum-51", "summary": "Sophie accepts some quince from Noah. Noah has left the quince in a basket on his terrace and the twins can pick it up any time. The twins are in college. Noah's son is in the military. He is still single but reportedly not gay.", "summary_trees": ["# ::snt Sophie accepts some quince from Noah.\n(a / accept-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Sophie\"))\n      :ARG1 (q / quince\n            :quant (s / some))\n      :ARG2 (p2 / person\n            :name (n2 / name\n                  :op1 \"Noah\")))", "# ::snt Noah has left the quince in a basket on his terrace and the twins can pick it up any time.\n(a / and\n      :op1 (l / leave-12\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Noah\"))\n            :ARG1 (q / quince)\n            :ARG2 (b / basket\n                  :location (t / terrace\n                        :poss p)))\n      :op2 (p2 / possible-01\n            :ARG1 (p3 / pick-up-04\n                  :ARG0 (t2 / twin)\n                  :ARG1 q\n                  :time (t3 / time\n                        :mod (a2 / any)))))", "# ::snt The twins are in college.\n(b / be-located-at-91\n      :ARG1 (t / twin)\n      :ARG2 (c / college))", "# ::snt Noah's son is in the military.\n(h / have-rel-role-91\n      :ARG0 (p / person)\n      :ARG1 (p2 / person\n            :name (n / name\n                  :op1 \"Noah\"))\n      :ARG2 (s / son)\n      :ARG3 (m / military))", "# ::snt He is still single but reportedly not gay.\n(c / contrast-01\n      :ARG1 (s / single-03\n            :ARG1 (h / he)\n            :mod (s2 / still))\n      :ARG2 (g / gay-01\n            :polarity -\n            :ARG1 h\n            :ARG1-of (r / report-01)))"], "tree": ["(a / accept-01\n   :ARG1 (q / quince\n            :quant (s / some)))", "(a / accept-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sophie\"))\n   :ARG1 (q / quince\n            :quant (s / some)))", "(a / accept-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sophie\"))\n   :ARG1 (q / quince\n            :quant (s / some))\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Noah\")))", "(a / accept-01\n   :ARG1 (q / quince\n            :quant (s / some)))", "(p3 / pick-up-04\n    :time (t3 / time\n              :mod (a2 / any)))", "(p3 / pick-up-04\n    :time (t3 / time\n              :mod (a2 / any)))", "(p3 / pick-up-04\n    :ARG0 (t2 / twin)\n    :ARG1 (q / quince)\n    :time (t3 / time\n              :mod (a2 / any)))", "(p3 / pick-up-04\n    :ARG0 (t2 / twin)\n    :ARG1 (q / quince)\n    :time (t3 / time\n              :mod (a2 / any)))", "(p2 / possible-01\n    :ARG1 (p3 / pick-up-04\n              :ARG0 (t2 / twin)\n              :ARG1 (q / quince)\n              :time (t3 / time\n                        :mod (a2 / any))))", "(p2 / possible-01\n    :ARG1 (p3 / pick-up-04\n              :ARG0 (t2 / twin)\n              :ARG1 (q / quince)\n              :time (t3 / time\n                        :mod (a2 / any))))", "(l / leave-12\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Noah\"))\n   :ARG1 (q / quince)\n   :ARG2 (b / basket\n            :location (t / terrace\n                         :poss p)))", "(b / be-located-at-91\n   :ARG1 (t / twin)\n   :ARG2 (c / college))", "(b / be-located-at-91\n   :ARG1 (t / twin)\n   :ARG2 (c / college))", "(h / have-rel-role-91\n   :ARG0 (p / person)\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Noah\"))\n   :ARG2 (s / son))", "(h / have-rel-role-91\n   :ARG0 (p / person)\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Noah\"))\n   :ARG2 (s / son)\n   :ARG3 (m / military))", "(g / gay-01\n   :polarity -\n   :ARG1 (h / he)\n   :ARG1 (r / report-01))", "(s / single-03\n   :ARG1 (h / he)\n   :mod (s2 / still))", "(c / contrast-01\n   :ARG1 (s / single-03\n            :ARG1 (h / he)\n            :mod (s2 / still))\n   :ARG2 (g / gay-01\n            :polarity -\n            :ARG1 h\n            :ARG1 (r / report-01)))", "(c / contrast-01\n   :ARG1 (s / single-03\n            :ARG1 (h / he)\n            :mod (s2 / still))\n   :ARG2 (g / gay-01\n            :polarity -\n            :ARG1 h\n            :ARG1 (r / report-01)))"], "smus": ["accepts some quince.", "Sophie accepts some quince.", "Sophie accepts some quince from Noah.", "accepts some quince.", "Pick up any time.", "Pick up any time.", "The twins will pick up quince any time.", "The twins will pick up quince any time.", "The twins can pick up quince at any time.", "The twins can pick up quince at any time.", "Noah had left a quince in a basket on his terrace.", "The twins are in college.", "The twins are in college.", "Noah's son", "Noah's son is in the military.", "He is not reported to be gay.", "He's still single.", "He's still single, but reportedly not gay.", "He's still single, but reportedly not gay."]}, {"instance_id": "samsum-52", "summary": "Bella wants to talk with Clara and she will come to her place after 7:30.", "summary_trees": ["# ::snt Bella wants to talk with Clara and she will come to her place after 7:30.\n(a / and\n      :op1 (w / want-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Bella\"))\n            :ARG1 (t / talk-01\n                  :ARG0 p\n                  :ARG2 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Clara\"))))\n      :op2 (c / come-01\n            :ARG1 p\n            :ARG4 (p3 / place\n                  :poss p2)\n            :time (a2 / after\n                  :op1 (d / date-entity\n                        :time \"19:30\"))))"], "tree": ["(c / come-01\n   :ARG1 (p / person :name (n / name :op1 \"Bella\"))\n   :ARG4 (p3 / place\n             :poss (p2 / person :name (n2 / name :op1 \"Clara\"))))", "(t / talk-01\n   :ARG0 (p / person :name (n / name :op1 \"Bella\"))\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Clara\")))", "(t / talk-01\n   :ARG0 (p / person :name (n / name :op1 \"Bella\"))\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Clara\")))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Bella\"))\n   :ARG1 (t / talk-01\n            :ARG0 p\n            :ARG2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Clara\"))))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Bella\"))\n   :ARG1 (t / talk-01\n            :ARG0 p\n            :ARG2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Clara\"))))"], "smus": ["Bella would come to Clara's place.", "Bella and Clara will talk.", "Bella and Clara will talk.", "Bella wants to talk to Clara.", "Bella wants to talk to Clara."]}, {"instance_id": "samsum-53", "summary": "Greg and Betsy have a lot of work today, so they cannot pick up Johnny from the kindergarten. However, it's Greg's turn to do it. Greg will try to find a solution.", "summary_trees": ["# ::snt Greg and Betsy have a lot of work today, so they cannot pick up Johnny from the kindergarten.\n(c / cause-01\n      :ARG0 (w / work-01\n            :ARG0 (a / and\n                  :op1 (p / person\n                        :name (n / name\n                              :op1 \"Greg\"))\n                  :op2 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Betsy\")))\n            :ARG1 (l / lot)\n            :time (t / today))\n      :ARG1 (p3 / possible-01\n            :polarity -\n            :ARG1 (p4 / pick-up-04\n                  :ARG0 a\n                  :ARG1 (p5 / person\n                        :name (n3 / name\n                              :op1 \"Johnny\"))\n                  :ARG2 (k / kindergarten))))", "# ::snt However, it's Greg's turn to do it.\n(c / contrast-01\n      :ARG2 (d / do-02\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Greg\"))\n            :ARG1 (ii / it)\n            :mod (t / turn\n                  :poss p)))", "# ::snt Greg will try to find a solution.\n(t / try-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Greg\"))\n      :ARG1 (f / find-01\n            :ARG0 p\n            :ARG1 (t2 / thing\n                  :ARG2-of (s / solve-01))))"], "tree": ["(w / work-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Greg\")))", "(w / work-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Betsy\")))", "(w / work-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Greg\"))\n   :ARG1 (l / lot))", "(w / work-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Greg\"))\n   :ARG1 (l / lot)\n   :time (t / today))", "(w / work-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Betsy\"))\n   :ARG1 (l / lot)\n   :ARG1 l\n   :time (t / today))", "(w / work-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Greg\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Betsy\"))))", "(w / work-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Greg\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Betsy\")))\n   :ARG1 (l / lot))", "(w / work-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Greg\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Betsy\")))\n   :ARG1 (l / lot)\n   :time (t / today))", "(c / cause-01\n   :ARG0 (w / work-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Greg\"))\n            :ARG1 (l / lot)\n            :time (t / today))\n   :ARG1 (p3 / possible-01\n             :polarity -\n             :ARG1 (p4 / pick-up-04\n                       :ARG0 p\n                       :ARG1 (p5 / person\n                                 :name (n3 / name\n                                           :op1 \"Johnny\"))\n                       :ARG2 (k / kindergarten))))", "(c / cause-01\n   :ARG0 (w / work-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Betsy\"))\n            :ARG1 (l / lot)\n            :ARG1 l\n            :time (t / today))\n   :ARG1 (p3 / possible-01\n             :polarity -\n             :ARG1 (p4 / pick-up-04\n                       :ARG0 p2\n                       :ARG1 (p5 / person\n                                 :name (n3 / name\n                                           :op1 \"Johnny\"))\n                       :ARG2 (k / kindergarten))))", "(c / cause-01\n   :ARG0 (w / work-01\n            :ARG0 (a / and\n                     :op1 (p / person\n                             :name (n / name\n                                      :op1 \"Greg\"))\n                     :op2 (p2 / person\n                              :name (n2 / name\n                                        :op1 \"Betsy\")))\n            :ARG1 (l / lot)\n            :time (t / today))\n   :ARG1 (p3 / possible-01\n             :polarity -\n             :ARG1 (p4 / pick-up-04\n                       :ARG0 a\n                       :ARG1 (p5 / person\n                                 :name (n3 / name\n                                           :op1 \"Johnny\"))\n                       :ARG2 (k / kindergarten))))", "(d / do-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Greg\"))\n   :ARG1 (ii / it)\n   :mod (t / turn\n           :poss p))", "(f / find-01\n   :ARG1 (t2 / thing\n             :ARG2 (s / solve-01)))", "(t / try-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Greg\"))\n   :ARG1 (f / find-01\n            :ARG0 p\n            :ARG1 (t2 / thing\n                      :ARG2 (s / solve-01))))", "(t / try-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Greg\"))\n   :ARG1 (f / find-01\n            :ARG0 p\n            :ARG1 (t2 / thing\n                      :ARG2 (s / solve-01))))"], "smus": ["Greg works.", "Betsy is at work.", "Greg works a lot.", "Greg is working a lot today.", "Betsy is working a lot on it today.", "Greg and Betsy are at work.", "Greg and Betsy are working a lot.", "Today, Greg and Betsy are working a lot.", "Greg is working a lot today so he can't pick Johnny up from kindergarten.", "Betsy is working a lot on it today so she can't pick Johnny up from kindergarten.", "Greg and Betsy are working a lot today so they can't pick Johnny up from kindergarten.", "Greg did it in his turn.", "Find a solution.", "Greg will try to find a solution.", "Greg will try to find a solution."]}, {"instance_id": "samsum-54", "summary": "Wanda wants to throw a party. She asks Gina to borrow her father's car and go do groceries together. They set the date for Friday. ", "summary_trees": ["# ::snt Wanda wants to throw a party.\n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Wanda\"))\n      :ARG1 (t / throw-01\n            :ARG0 p\n            :ARG1 (p2 / party)))", "# ::snt She asks Gina to borrow her father's car and go do groceries together.\n(a / ask-02\n      :ARG0 (s / she)\n      :ARG1 (a2 / and\n            :op1 (b / borrow-01\n                  :ARG0 (p / person\n                        :name (n / name\n                              :op1 \"Gina\"))\n                  :ARG1 (c / car\n                        :poss (p2 / person\n                              :ARG0-of (h / have-rel-role-91\n                                    :ARG1 p\n                                    :ARG2 (f / father)))))\n            :op2 (g / go-02\n                  :ARG0 p\n                  :ARG4 (g2 / grocery)\n                  :manner (t / together)))\n      :ARG2 p)", "# ::snt They set the date for Friday.\n(s / set-02\n      :ARG0 (t / they)\n      :ARG1 (d / date)\n      :ARG2 (d2 / date-entity\n            :weekday (f / friday)))"], "tree": ["(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Wanda\"))\n   :ARG1 (t / throw-01\n            :ARG0 p\n            :ARG1 (p2 / party)))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Wanda\"))\n   :ARG1 (t / throw-01\n            :ARG0 p\n            :ARG1 (p2 / party)))", "(g / go-02\n   :ARG0 (p / person :name (n / name :op1 \"Gina\"))\n   :ARG4 (g2 / grocery)\n   :manner (t / together))", "(a / ask-02\n   :ARG0 (s / she)\n   :ARG1 (g / go-02\n            :ARG0 (p / person :name (n / name :op1 \"Gina\"))\n            :ARG4 (g2 / grocery)\n            :manner (t / together)))", "(a / ask-02\n   :ARG0 (s / she)\n   :ARG1 (g / go-02\n            :ARG0 (p / person :name (n / name :op1 \"Gina\"))\n            :ARG4 (g2 / grocery)\n            :manner (t / together))\n   :ARG2 p)", "(a / ask-02\n   :ARG0 (s / she)\n   :ARG1 (g / go-02\n            :ARG0 (p / person :name (n / name :op1 \"Gina\"))\n            :ARG4 (g2 / grocery)\n            :manner (t / together))\n   :ARG2 p)", "(b / borrow-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Gina\"))\n   :ARG1 (c / car\n            :poss (p2 / person\n                      :ARG0 (h / have-rel-role-91\n                               :ARG1 p\n                               :ARG2 (f / father)))))", "(a / ask-02\n   :ARG0 (s / she)\n   :ARG1 (b / borrow-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Gina\"))\n            :ARG1 (c / car\n                     :poss (p2 / person\n                               :ARG0 (h / have-rel-role-91\n                                        :ARG1 p\n                                        :ARG2 (f / father))))))", "(a / ask-02\n   :ARG0 (s / she)\n   :ARG1 (b / borrow-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Gina\"))\n            :ARG1 (c / car\n                     :poss (p2 / person\n                               :ARG0 (h / have-rel-role-91\n                                        :ARG1 p\n                                        :ARG2 (f / father))))))", "(a / ask-02\n   :ARG0 (s / she)\n   :ARG1 (b / borrow-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Gina\"))\n            :ARG1 (c / car\n                     :poss (p2 / person\n                               :ARG0 (h / have-rel-role-91\n                                        :ARG1 p\n                                        :ARG2 (f / father))))))", "(a / ask-02\n   :ARG1 (a2 / and\n             :op1 (b / borrow-01\n                     :ARG0 (p / person\n                              :name (n / name\n                                       :op1 \"Gina\"))\n                     :ARG1 (c / car\n                              :poss (p2 / person\n                                        :ARG0 (h / have-rel-role-91\n                                                 :ARG1 p\n                                                 :ARG2 (f / father)))))\n             :op2 (g / go-02\n                     :ARG0 p\n                     :ARG4 (g2 / grocery)\n                     :manner (t / together)))\n   :ARG2 p)", "(a / ask-02\n   :ARG0 (s / she)\n   :ARG1 (a2 / and\n             :op1 (b / borrow-01\n                     :ARG0 (p / person\n                              :name (n / name\n                                       :op1 \"Gina\"))\n                     :ARG1 (c / car\n                              :poss (p2 / person\n                                        :ARG0 (h / have-rel-role-91\n                                                 :ARG1 p\n                                                 :ARG2 (f / father)))))\n             :op2 (g / go-02\n                     :ARG0 p\n                     :ARG4 (g2 / grocery)\n                     :manner (t / together))))", "(a / ask-02\n   :ARG0 (s / she)\n   :ARG1 (a2 / and\n             :op1 (b / borrow-01\n                     :ARG0 (p / person\n                              :name (n / name\n                                       :op1 \"Gina\"))\n                     :ARG1 (c / car\n                              :poss (p2 / person\n                                        :ARG0 (h / have-rel-role-91\n                                                 :ARG1 p\n                                                 :ARG2 (f / father)))))\n             :op2 (g / go-02\n                     :ARG0 p\n                     :ARG4 (g2 / grocery)\n                     :manner (t / together)))\n   :ARG2 p)", "(a / ask-02\n   :ARG0 (s / she)\n   :ARG1 (a2 / and\n             :op1 (b / borrow-01\n                     :ARG0 (p / person\n                              :name (n / name\n                                       :op1 \"Gina\"))\n                     :ARG1 (c / car\n                              :poss (p2 / person\n                                        :ARG0 (h / have-rel-role-91\n                                                 :ARG1 p\n                                                 :ARG2 (f / father)))))\n             :op2 (g / go-02\n                     :ARG0 p\n                     :ARG4 (g2 / grocery)\n                     :manner (t / together)))\n   :ARG2 p)", "(s / set-02\n   :ARG1 (d / date)\n   :ARG2 (d2 / date-entity\n             :weekday (f / friday)))", "(s / set-02\n   :ARG0 (t / they)\n   :ARG1 (d / date)\n   :ARG2 (d2 / date-entity\n             :weekday (f / friday)))"], "smus": ["Wanda wants to throw a party.", "Wanda wants to throw a party.", "Gina and I will go to the grocery stores together.", "She asks Gina to go to the grocery stores together.", "She asks Gina to go to the grocery stores together.", "She asks Gina to go to the grocery stores together.", "Gina would borrow her father's car.", "She asks Gina to borrow her father's car.", "She asks Gina to borrow her father's car.", "She asks Gina to borrow her father's car.", "Gina asks to borrow her father's car and go to the groceryes together.", "She asks Gina to borrow her father's car and go to the groceryes together.", "She asks Gina to borrow her father's car and go to the grocery store together.", "She asks Gina to borrow her father's car and go to the grocery store together.", "The date was set for Friday.", "They set the date for Friday."]}, {"instance_id": "samsum-55", "summary": "Paul is late for a meeting with Laura and she refuses to wait any longer.", "summary_trees": ["# ::snt Paul is late for a meeting with Laura and she refuses to wait any longer.\n(a / and\n      :op1 (l / late-02\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Paul\"))\n            :ARG2 (m / meet-03\n                  :ARG0 p\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Laura\"))))\n      :op2 (r / refuse-01\n            :ARG0 p2\n            :ARG1 (w / wait-01\n                  :ARG1 p2\n                  :ARG2 m\n                  :ARG1-of (h / have-degree-91\n                        :ARG2 (l2 / long-03\n                              :ARG1 w)\n                        :ARG3 (m2 / more\n                              :mod (a2 / any))))))"], "tree": ["(m / meet-03\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Laura\")))", "(l / late-02\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Paul\")))", "(m / meet-03\n   :ARG0 (p / person :name (n / name :op1 \"Paul\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Laura\")))", "(m / meet-03\n   :ARG0 (p / person :name (n / name :op1 \"Paul\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Laura\")))", "(l / late-02\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Paul\"))\n   :ARG2 (m / meet-03\n            :ARG0 p\n            :ARG1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Laura\"))))", "(r / refuse-01\n   :ARG0 (p2 / person :name (n2 / name :op1 \"Laura\"))\n   :ARG1 (w / wait-01\n            :ARG1 p2\n            :ARG2 (m / meet-03)\n            :ARG1 (h / have-degree-91\n                     :ARG2 (l2 / long-03\n                               :ARG1 w)\n                     :ARG3 (m2 / more\n                               :mod (a2 / any)))))", "(r / refuse-01\n   :ARG0 (p2 / person :name (n2 / name :op1 \"Laura\"))\n   :ARG1 (w / wait-01\n            :ARG1 p2\n            :ARG2 (m / meet-03)\n            :ARG1 (h / have-degree-91\n                     :ARG2 (l2 / long-03\n                               :ARG1 w)\n                     :ARG3 (m2 / more\n                               :mod (a2 / any)))))"], "smus": ["Laura met.", "Paul was late.", "Paul and Laura met.", "Paul and Laura met.", "Paul was late for a meeting with Laura.", "Laura refuses to wait any longer for a meeting.", "Laura refuses to wait any longer for a meeting."]}, {"instance_id": "samsum-56", "summary": "Jesse broke his razor and wants to borrow Stig's.", "summary_trees": ["# ::snt Jesse broke his razor and wants to borrow Stig's.\n(a / and\n      :op1 (b / break-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Jesse\"))\n            :ARG1 (r / razor\n                  :poss p))\n      :op2 (w / want-01\n            :ARG0 p\n            :ARG1 (b2 / borrow-01\n                  :ARG0 p\n                  :ARG1 (r2 / razor\n                        :poss (p2 / person\n                              :name (n2 / name\n                                    :op1 \"Stig\"))))))"], "tree": ["(b / break-01\n   :ARG1 (r / razor\n            :poss (p / person :name (n / name :op1 \"Jesse\"))))", "(w / want-01\n   :ARG0 (p / person :name (n / name :op1 \"Jesse\"))\n   :ARG1 (b2 / borrow-01\n             :ARG0 p\n             :ARG1 (r2 / razor\n                       :poss (p2 / person\n                                 :name (n2 / name\n                                           :op1 \"Stig\")))))", "(w / want-01\n   :ARG0 (p / person :name (n / name :op1 \"Jesse\"))\n   :ARG1 (b2 / borrow-01\n             :ARG0 p\n             :ARG1 (r2 / razor\n                       :poss (p2 / person\n                                 :name (n2 / name\n                                           :op1 \"Stig\")))))"], "smus": ["Jesse's razor broke.", "Jesse wants to borrow Stig's razor.", "Jesse wants to borrow Stig's razor."]}, {"instance_id": "samsum-57", "summary": "Ann thanks Katie for hosting her son Tim on Monday evening and driving him to the railway station next morning. Kate will send a message to Tim tomorrow, to ask about the place where she should be waiting for him.", "summary_trees": ["# ::snt Ann thanks Katie for hosting her son Tim on Monday evening and driving him to the railway station next morning.\n(t / thank-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Ann\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Katie\"))\n      :ARG2 (a / and\n            :op1 (h / host-01\n                  :ARG0 p2\n                  :ARG1 (p3 / person\n                        :name (n3 / name\n                              :op1 \"Tim\")\n                        :ARG0-of (h2 / have-rel-role-91\n                              :ARG1 p\n                              :ARG2 (s / son)))\n                  :time (d / date-entity\n                        :weekday (m / monday)\n                        :dayperiod (e / evening)))\n            :op2 (d2 / drive-01\n                  :ARG0 p2\n                  :ARG1 p3\n                  :destination (s2 / station\n                        :mod (r / railway))\n                  :time (d3 / date-entity\n                        :dayperiod (m2 / morning)\n                        :mod (n4 / next)))))", "# ::snt Kate will send a message to Tim tomorrow, to ask about the place where she should be waiting for him.\n(s / send-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Kate\"))\n      :ARG1 (m / message-01)\n      :ARG2 (p2 / person\n            :name (n2 / name\n                  :op1 \"Tim\"))\n      :time (t / tomorrow)\n      :purpose (a / ask-01\n            :ARG0 p\n            :ARG1 (p3 / place\n                  :location-of (r / recommend-01\n                        :ARG1 (w / wait-01\n                              :ARG1 p\n                              :ARG2 p2)))))"], "tree": ["(h2 / have-rel-role-91\n    :ARG1 (p / person :name (n / name :op1 \"Ann\"))\n    :ARG2 (s / son))", "(h / host-01\n   :time (d / date-entity\n            :weekday (m / monday)\n            :dayperiod (e / evening)))", "(t / thank-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ann\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Katie\")))", "(d2 / drive-01\n    :destination (s2 / station\n                     :mod (r / railway))\n    :time (d3 / date-entity\n              :dayperiod (m2 / morning)\n              :mod (n4 / next)))", "(d2 / drive-01\n    :ARG0 (p2 / person :name (n2 / name :op1 \"Katie\"))\n    :ARG1 (p3 / person :name (n3 / name :op1 \"Tim\")))\n    :destination (s2 / station\n                     :mod (r / railway))\n    :time (d3 / date-entity\n              :dayperiod (m2 / morning)\n              :mod (n4 / next)))", "(h / host-01\n   :ARG0 (p2 / person :name (n2 / name :op1 \"Katie\"))\n   :ARG1 (p3 / person\n             :name (n3 / name\n                       :op1 \"Tim\")\n             :ARG0 (h2 / have-rel-role-91\n                       :ARG1 (p / person :name (n / name :op1 \"Ann\"))\n                       :ARG2 (s / son)))\n   :time (d / date-entity\n            :weekday (m / monday)\n            :dayperiod (e / evening)))", "(t / thank-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ann\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Katie\"))\n   :ARG2 (d2 / drive-01\n             :ARG0 p2\n             :ARG1 (p3 / person :name (n3 / name :op1 \"Tim\")))\n             :destination (s2 / station\n                              :mod (r / railway))\n             :time (d3 / date-entity\n                       :dayperiod (m2 / morning)\n                       :mod (n4 / next))))", "(t / thank-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ann\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Katie\"))\n   :ARG2 (d2 / drive-01\n             :ARG0 p2\n             :ARG1 (p3 / person :name (n3 / name :op1 \"Tim\")))\n             :destination (s2 / station\n                              :mod (r / railway))\n             :time (d3 / date-entity\n                       :dayperiod (m2 / morning)\n                       :mod (n4 / next))))", "(t / thank-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ann\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Katie\"))\n   :ARG2 (h / host-01\n            :ARG0 p2\n            :ARG1 (p3 / person\n                      :name (n3 / name\n                                :op1 \"Tim\")\n                      :ARG0 (h2 / have-rel-role-91\n                                :ARG1 p\n                                :ARG2 (s / son)))\n            :time (d / date-entity\n                     :weekday (m / monday)\n                     :dayperiod (e / evening))))", "(t / thank-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ann\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Katie\"))\n   :ARG2 (h / host-01\n            :ARG0 p2\n            :ARG1 (p3 / person\n                      :name (n3 / name\n                                :op1 \"Tim\")\n                      :ARG0 (h2 / have-rel-role-91\n                                :ARG1 p\n                                :ARG2 (s / son)))\n            :time (d / date-entity\n                     :weekday (m / monday)\n                     :dayperiod (e / evening))))", "(t / thank-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ann\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Katie\"))\n   :ARG2 (a / and\n            :op1 (h / host-01\n                    :ARG0 p2\n                    :ARG1 (p3 / person\n                              :name (n3 / name\n                                        :op1 \"Tim\")\n                              :ARG0 (h2 / have-rel-role-91\n                                        :ARG1 p\n                                        :ARG2 (s / son)))\n                    :time (d / date-entity\n                             :weekday (m / monday)\n                             :dayperiod (e / evening)))\n            :op2 (d2 / drive-01\n                     :ARG0 p2\n                     :ARG1 p3\n                     :destination (s2 / station\n                                      :mod (r / railway))\n                     :time (d3 / date-entity\n                               :dayperiod (m2 / morning)\n                               :mod (n4 / next)))))", "(t / thank-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ann\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Katie\"))\n   :ARG2 (a / and\n            :op1 (h / host-01\n                    :ARG0 p2\n                    :ARG1 (p3 / person\n                              :name (n3 / name\n                                        :op1 \"Tim\")\n                              :ARG0 (h2 / have-rel-role-91\n                                        :ARG1 p\n                                        :ARG2 (s / son)))\n                    :time (d / date-entity\n                             :weekday (m / monday)\n                             :dayperiod (e / evening)))\n            :op2 (d2 / drive-01\n                     :ARG0 p2\n                     :ARG1 p3\n                     :destination (s2 / station\n                                      :mod (r / railway))\n                     :time (d3 / date-entity\n                               :dayperiod (m2 / morning)\n                               :mod (n4 / next)))))", "(r / recommend-01\n   :ARG1 (w / wait-01\n            :ARG1 (p / person :name (n / name :op1 \"Kate\"))\n            :ARG2 (p2 / person :name (n2 / name :op1 \"Tim\"))))", "(r / recommend-01\n   :ARG1 (w / wait-01\n            :ARG1 (p / person :name (n / name :op1 \"Kate\"))\n            :ARG2 (p2 / person :name (n2 / name :op1 \"Tim\"))))", "(s / send-01\n   :time (t / tomorrow)\n   :purpose (a / ask-01))", "(s / send-01\n   :ARG1 (m / message-01)\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Tim\")))", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kate\"))\n   :ARG1 (m / message-01))", "(a / ask-01\n   :ARG0 (p / person :name (n / name :op1 \"Kate\"))\n   :ARG1 (p3 / place\n             :location (r / recommend-01\n                          :ARG1 (w / wait-01\n                                   :ARG1 p\n                                   :ARG2 (p2 / person :name (n2 / name :op1 \"Tim\"))))))", "(a / ask-01\n   :ARG0 (p / person :name (n / name :op1 \"Kate\"))\n   :ARG1 (p3 / place\n             :location (r / recommend-01\n                          :ARG1 (w / wait-01\n                                   :ARG1 p\n                                   :ARG2 (p2 / person :name (n2 / name :op1 \"Tim\"))))))", "(s / send-01\n   :ARG1 (m / message-01)\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Tim\"))\n   :time (t / tomorrow))", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kate\"))\n   :ARG1 (m / message-01)\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Tim\")))", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kate\"))\n   :ARG1 (m / message-01)\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Tim\"))\n   :time (t / tomorrow))", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kate\"))\n   :ARG1 (m / message-01)\n   :purpose (a / ask-01\n               :ARG0 p\n               :ARG1 (p3 / place\n                         :location (r / recommend-01\n                                      :ARG1 (w / wait-01\n                                               :ARG1 p\n                                               :ARG2 (p2 / person :name (n2 / name :op1 \"Tim\")))))))", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kate\"))\n   :ARG1 (m / message-01)\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Tim\"))\n   :purpose (a / ask-01\n               :ARG0 p\n               :ARG1 (p3 / place\n                         :location (r / recommend-01\n                                      :ARG1 (w / wait-01\n                                               :ARG1 p\n                                               :ARG2 p2)))))", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kate\"))\n   :ARG1 (m / message-01)\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Tim\"))\n   :time (t / tomorrow)\n   :purpose (a / ask-01\n               :ARG0 p\n               :ARG1 (p3 / place\n                         :location (r / recommend-01\n                                      :ARG1 (w / wait-01\n                                               :ARG1 p\n                                               :ARG2 p2)))))"], "smus": ["Ann's son", "Hosted Monday evening.", "Thanks, Ann, Katie.", "Driving to the railway station the next morning.", "The next morning, Katie and Tim were driving to the railway station.", "Katie was hosting Ann's son Tim Monday evening.", "Thanks to Katie for driving Tim to the railway station the next morning.", "Thanks to Katie for driving Tim to the railway station the next morning.", "Thanks to Katie for hosting her son Tim Monday evening.", "Thanks to Katie for hosting her son Tim Monday evening.", "Thanks to Katie for hosting her son Tim on Monday evening and driving him to the railway station the next morning.", "Thanks to Katie for hosting her son Tim on Monday evening and driving him to the railway station the next morning.", "Kate should be waiting for Tim.", "Kate should be waiting for Tim.", "Send tomorrow to ask.", "Send a message to Tim.", "Kate, send a message.", "Kate, ask where should I be waiting for Tim.", "Kate, ask where should I be waiting for Tim.", "Tomorrow, send a message to Tim.", "Kate, send a message to Tim.", "Kate will send Tim a message tomorrow.", "Kate will send a message to ask where she should be waiting for Tim.", "Kate will send Tim a message to ask where she should be waiting.", "Kate will send Tim a message tomorrow asking where she should be waiting."]}, {"instance_id": "samsum-58", "summary": "Railey will buy Tiffany a burger.", "summary_trees": ["# ::snt Railey will buy Tiffany a burger.\n(b / buy-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Railey\"))\n      :ARG1 (b2 / burger)\n      :ARG4 (p2 / person\n            :name (n2 / name\n                  :op1 \"Tiffany\")))"], "tree": ["(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Railey\")))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Railey\"))\n   :ARG1 (b2 / burger))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Railey\"))\n   :ARG1 (b2 / burger)\n   :ARG4 (p2 / person\n             :name (n2 / name\n                       :op1 \"Tiffany\")))"], "smus": ["Riley would buy.", "Riley would buy a burger.", "Riley would buy Tiffany a burger."]}, {"instance_id": "samsum-59", "summary": "Serge is on his way to pick up the film equipment for the shooting tonight. Andrei and Serge are late with a large payment to the company. Serge and Andrei will try to use the credit card to pay the company.", "summary_trees": ["# ::snt Serge is on his way to pick up the film equipment for the shooting tonight.\n(b / be-located-at-91\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Serge\"))\n      :ARG2 (w / way\n            :poss p\n            :direction (p2 / pick-up-04\n                  :ARG0 p\n                  :ARG1 (e / equipment\n                        :mod (f / film)\n                        :purpose (s / shoot-01\n                              :time (d / date-entity\n                                    :dayperiod (n2 / night)\n                                    :mod (t / today)))))))", "# ::snt Andrei and Serge are late with a large payment to the company.\n(l / late-02\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Andrei\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Serge\")))\n      :ARG2 (p3 / pay-01\n            :ARG0 a\n            :ARG2 (c / company)\n            :mod (l2 / large)))", "# ::snt Serge and Andrei will try to use the credit card to pay the company.\n(t / try-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Serge\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Andrei\")))\n      :ARG1 (u / use-01\n            :ARG0 a\n            :ARG1 (c / card\n                  :mod (c2 / credit))\n            :ARG2 (p3 / pay-01\n                  :ARG0 a\n                  :ARG2 (c3 / company))))"], "tree": ["(s / shoot-01\n   :time (d / date-entity\n            :dayperiod (n2 / night)\n            :mod (t / today)))", "(s / shoot-01\n   :time (d / date-entity\n            :dayperiod (n2 / night)\n            :mod (t / today)))", "(p2 / pick-up-04\n    :ARG0 (p / person :name (n / name :op1 \"Serge\"))\n    :ARG1 (e / equipment\n             :mod (f / film)\n             :purpose (s / shoot-01\n                         :time (d / date-entity\n                                  :dayperiod (n2 / night)\n                                  :mod (t / today)))))", "(p2 / pick-up-04\n    :ARG0 (p / person :name (n / name :op1 \"Serge\"))\n    :ARG1 (e / equipment\n             :mod (f / film)\n             :purpose (s / shoot-01\n                         :time (d / date-entity\n                                  :dayperiod (n2 / night)\n                                  :mod (t / today)))))", "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Serge\"))\n   :ARG2 (w / way\n            :poss p\n            :direction (p2 / pick-up-04\n                           :ARG0 p\n                           :ARG1 (e / equipment\n                                    :mod (f / film)\n                                    :purpose (s / shoot-01\n                                                :time (d / date-entity\n                                                         :dayperiod (n2 / night)\n                                                         :mod (t / today)))))))", "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Serge\"))\n   :ARG2 (w / way\n            :poss p\n            :direction (p2 / pick-up-04\n                           :ARG0 p\n                           :ARG1 (e / equipment\n                                    :mod (f / film)\n                                    :purpose (s / shoot-01\n                                                :time (d / date-entity\n                                                         :dayperiod (n2 / night)\n                                                         :mod (t / today)))))))", "(p3 / pay-01\n    :ARG0 (a / and)\n    :ARG2 (c / company)\n    :mod (l2 / large))", "(l / late-02\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Andrei\")))", "(l / late-02\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Serge\")))", "(l / late-02\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Andrei\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Serge\"))))", "(l / late-02\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Andrei\"))\n   :ARG2 (p3 / pay-01\n             :ARG0 p\n             :ARG2 (c / company)\n             :mod (l2 / large)))", "(l / late-02\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Serge\"))\n   :ARG2 (p3 / pay-01\n             :ARG0 p2\n             :ARG2 (c / company)\n             :mod (l2 / large))\n   :ARG2 p3)", "(l / late-02\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Andrei\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Serge\")))\n   :ARG2 (p3 / pay-01\n             :ARG0 a\n             :ARG2 (c / company)\n             :mod (l2 / large)))", "(u / use-01\n   :ARG1 (c / card\n            :mod (c2 / credit)))", "(u / use-01\n   :ARG0 (a / and)\n   :ARG1 (c / card\n            :mod (c2 / credit)))", "(u / use-01\n   :ARG1 (c / card\n            :mod (c2 / credit))\n   :ARG2 (p3 / pay-01\n             :ARG0 (a / and)\n             :ARG2 (c3 / company)))", "(u / use-01\n   :ARG0 (a / and)\n   :ARG1 (c / card\n            :mod (c2 / credit))\n   :ARG2 (p3 / pay-01\n             :ARG0 a\n             :ARG2 (c3 / company)))", "(u / use-01\n   :ARG0 (a / and)\n   :ARG1 (c / card\n            :mod (c2 / credit))\n   :ARG2 (p3 / pay-01\n             :ARG0 a\n             :ARG2 (c3 / company)))", "(t / try-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Serge\"))\n   :ARG1 (u / use-01\n            :ARG0 p\n            :ARG1 (c / card\n                     :mod (c2 / credit))\n            :ARG2 (p3 / pay-01\n                      :ARG0 p\n                      :ARG2 (c3 / company))))", "(t / try-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Serge\"))\n   :ARG1 (u / use-01\n            :ARG0 p\n            :ARG1 (c / card\n                     :mod (c2 / credit))\n            :ARG2 (p3 / pay-01\n                      :ARG0 p\n                      :ARG2 (c3 / company))))", "(t / try-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Andrei\"))\n   :ARG1 (u / use-01\n            :ARG0 p2\n            :ARG1 (c / card\n                     :mod (c2 / credit))\n            :ARG2 (p3 / pay-01\n                      :ARG0 p2\n                      :ARG2 (c3 / company)))\n   :ARG1 u)", "(t / try-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Andrei\"))\n   :ARG1 (u / use-01\n            :ARG0 p2\n            :ARG1 (c / card\n                     :mod (c2 / credit))\n            :ARG2 (p3 / pay-01\n                      :ARG0 p2\n                      :ARG2 (c3 / company)))\n   :ARG1 u)", "(t / try-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Serge\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Andrei\")))\n   :ARG1 (u / use-01\n            :ARG0 a\n            :ARG1 (c / card\n                     :mod (c2 / credit))\n            :ARG2 (p3 / pay-01\n                      :ARG0 a\n                      :ARG2 (c3 / company))))", "(t / try-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Serge\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Andrei\")))\n   :ARG1 (u / use-01\n            :ARG0 a\n            :ARG1 (c / card\n                     :mod (c2 / credit))\n            :ARG2 (p3 / pay-01\n                      :ARG0 a\n                      :ARG2 (c3 / company))))"], "smus": ["The shooting took place tonight.", "The shooting took place tonight.", "Serge will pick up film equipment for tonight's shooting.", "Serge will pick up film equipment for tonight's shooting.", "Serge is on his way to pick up film equipment for tonight's shooting.", "Serge is on his way to pick up film equipment for tonight's shooting.", "The company gets large payments.", "Andrei is late.", "Serge was late.", "Andrei and Serge were late.", "Andrei was late in paying a large company.", "Serge was late in his large company payments.", "Andrei and Serge were late to the large company payments.", "Use a credit card", "and use a credit card", "Use a credit card to pay the company.", "Use a credit card to pay the company.", "Use a credit card to pay the company.", "Serge will try to use a credit card to pay the company.", "Serge will try to use a credit card to pay the company.", "Andrei will try to use a credit card to pay the company.", "Andrei will try to use a credit card to pay the company.", "Serge and Andrei will try to use a credit card to pay the company.", "Serge and Andrei will try to use a credit card to pay the company."]}, {"instance_id": "samsum-60", "summary": "Beatrice wants to buy Leo a scarf, but he doesn't like scarves. She cares about his health and will buy him a scarf no matter his opinion.", "summary_trees": ["# ::snt Beatrice wants to buy Leo a scarf, but he doesn't like scarves.\n(c / contrast-01\n      :ARG1 (w / want-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Beatrice\"))\n            :ARG1 (b / buy-01\n                  :ARG0 p\n                  :ARG1 (s / scarf)\n                  :ARG4 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Leo\"))))\n      :ARG2 (d / dislike-01\n            :ARG0 p2\n            :ARG1 s))", "# ::snt She cares about his health and will buy him a scarf no matter his opinion.\n(a / and\n      :op1 (c / care-01\n            :ARG0 (s / she)\n            :ARG1 (h / health\n                  :poss (h2 / he)))\n      :op2 (b / buy-01\n            :ARG0 s\n            :ARG1 (s2 / scarf)\n            :ARG4 h2\n            :ARG1-of (r / regardless-91\n                  :ARG2 (t / thing\n                        :ARG1-of (o / opine-01\n                              :ARG0 h2)))))"], "tree": ["(b / buy-01\n   :ARG0 (p / person :name (n / name :op1 \"Beatrice\"))\n   :ARG1 (s / scarf))", "(b / buy-01\n   :ARG0 (p / person :name (n / name :op1 \"Beatrice\"))\n   :ARG1 (s / scarf)\n   :ARG4 (p2 / person\n             :name (n2 / name\n                       :op1 \"Leo\")))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Beatrice\"))\n   :ARG1 (b / buy-01\n            :ARG0 p\n            :ARG1 (s / scarf)\n            :ARG4 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Leo\"))))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Beatrice\"))\n   :ARG1 (b / buy-01\n            :ARG0 p\n            :ARG1 (s / scarf)\n            :ARG4 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Leo\"))))", "(c / contrast-01\n   :ARG1 (w / want-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Beatrice\"))\n            :ARG1 (b / buy-01\n                     :ARG0 p\n                     :ARG1 (s / scarf)\n                     :ARG4 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Leo\"))))\n   :ARG2 (d / dislike-01\n            :ARG0 p2\n            :ARG1 s))", "(c / contrast-01\n   :ARG1 (w / want-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Beatrice\"))\n            :ARG1 (b / buy-01\n                     :ARG0 p\n                     :ARG1 (s / scarf)\n                     :ARG4 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Leo\"))))\n   :ARG2 (d / dislike-01\n            :ARG0 p2\n            :ARG1 s))", "(b / buy-01\n   :ARG0 (p / person :name (n / name :op1 \"Beatrice\"))\n   :ARG1 (s / scarf))", "(r / regardless-91\n   :ARG2 (t / thing\n            :ARG1 (o / opine-01\n                     :ARG0 (h2 / he))))", "(b / buy-01\n   :ARG0 (s / she)\n   :ARG1 (s2 / scarf)\n   :ARG4 (h2 / he)\n   :ARG1 (r / regardless-91\n            :ARG2 (t / thing\n                     :ARG1 (o / opine-01\n                              :ARG0 h2))))"], "smus": ["Beatrice would buy a scarf.", "Beatrice would buy Leo a scarf.", "Beatrice wants to buy Leo a scarf.", "Beatrice wants to buy Leo a scarf.", "Beatrice wants to buy Leo a scarf but Leo doesn't.", "Beatrice wants to buy Leo a scarf but Leo doesn't.", "Beatrice would buy a scarf.", "regardless of his opinion.", "She'll buy him a scarf no matter what his opinion is."]}, {"instance_id": "samsum-61", "summary": "Betty and Phil are meeting at 6.30 to watch a thriller at the movies. They will have dinner at Phil's afterwards.", "summary_trees": ["# ::snt Betty and Phil are meeting at 6.30 to watch a thriller at the movies.\n(m / meet-03\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Betty\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Phil\"))\n      :time (d / date-entity\n            :time \"18:30\")\n      :purpose (w / watch-01\n            :ARG0 (a / and\n                  :op1 p\n                  :op2 p2)\n            :ARG1 (t / thriller)\n            :location (m2 / movie)))", "# ::snt They will have dinner at Phil's afterwards.\n(h / have-06\n      :ARG0 (t / they)\n      :ARG1 (d / dinner)\n      :location (h2 / home\n            :poss (p / person\n                  :name (n / name\n                        :op1 \"Phil\")))\n      :time (a / afterwards))"], "tree": ["(w / watch-01\n   :ARG0 (p / person :name (n / name :op1 \"Betty\"))\n   :ARG1 (t / thriller))", "(w / watch-01\n   :ARG0 (a / and\n            :op1 (p / person :name (n / name :op1 \"Betty\"))\n            :op2 (p2 / person :name (n2 / name :op1 \"Phil\"))))", "(m / meet-03\n   :purpose (w / watch-01\n               :location (m2 / movie)))", "(w / watch-01\n   :ARG0 (p2 / person :name (n2 / name :op1 \"Phil\"))\n   :ARG1 (t / thriller)\n   :ARG1 t)", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Betty\")))", "(w / watch-01\n   :ARG0 (p / person :name (n / name :op1 \"Betty\"))\n   :ARG1 (t / thriller)\n   :location (m2 / movie))", "(w / watch-01\n   :ARG0 (a / and\n            :op1 (p / person :name (n / name :op1 \"Betty\"))\n            :op2 (p2 / person :name (n2 / name :op1 \"Phil\")))\n   :ARG1 (t / thriller))", "(w / watch-01\n   :ARG0 (p2 / person :name (n2 / name :op1 \"Phil\"))\n   :ARG1 (t / thriller)\n   :ARG1 t\n   :location (m2 / movie))", "(w / watch-01\n   :ARG0 (a / and\n            :op1 (p / person :name (n / name :op1 \"Betty\"))\n            :op2 (p2 / person :name (n2 / name :op1 \"Phil\")))\n   :ARG1 (t / thriller)\n   :location (m2 / movie))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Betty\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Phil\")))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Betty\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Phil\"))\n   :purpose (w / watch-01\n               :ARG0 p\n               :ARG1 (t / thriller)\n               :location (m2 / movie)))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Betty\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Phil\"))\n   :purpose (w / watch-01\n               :ARG0 p2\n               :ARG1 (t / thriller)\n               :ARG1 t\n               :location (m2 / movie)))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Betty\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Phil\"))\n   :purpose (w / watch-01\n               :ARG0 (a / and\n                        :op1 p\n                        :op2 p2)\n               :ARG1 (t / thriller)\n               :location (m2 / movie)))", "(h / have-06\n   :location (h2 / home\n                 :poss (p / person\n                          :name (n / name\n                                   :op1 \"Phil\")))\n   :time (a / afterwards))", "(h / have-06\n   :ARG0 (t / they)\n   :ARG1 (d / dinner)\n   :location (h2 / home\n                 :poss (p / person\n                          :name (n / name\n                                   :op1 \"Phil\")))\n   :time (a / afterwards))"], "smus": ["Betty watch the thriller.", "Watch Betty and Phil.", "Meeting to watch movies.", "Phil will watch the thriller.", "Betty is meeting.", "Betty will watch a thriller in the movies.", "Betty and Phil will watch the thriller.", "Phil will watch the thriller in the movies.", "Betty and Phil will watch the thriller in the movies.", "Betty and Phil are meeting.", "Betty and Phil are meeting to watch a thriller in movies.", "Betty and Phil are meeting to watch a thriller in movies.", "Betty and Phil are meeting to watch a thriller in movies.", "afterwards have at Phil's home.", "They would have dinner at Phil's home afterwards."]}, {"instance_id": "samsum-62", "summary": "Donna will pay George a visit tonight to discuss a personal matter.", "summary_trees": ["# ::snt Donna will pay George a visit tonight to discuss a personal matter.\n(v / visit-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Donna\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"George\"))\n      :time (d / date-entity\n            :dayperiod (n3 / night)\n            :mod (t / today))\n      :purpose (d2 / discuss-01\n            :ARG0 p\n            :ARG1 (m / matter\n                  :ARG1-of (p3 / personal-02\n                        :ARG2 p2))\n            :ARG2 p2))"], "tree": ["(v / visit-01\n   :time (d / date-entity\n            :dayperiod (n3 / night)\n            :mod (t / today)))", "(v / visit-01\n   :time (d / date-entity\n            :dayperiod (n3 / night)\n            :mod (t / today))\n   :purpose (d2 / discuss-01))", "(v / visit-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Donna\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"George\")))", "(v / visit-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Donna\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"George\"))\n   :time (d / date-entity\n            :dayperiod (n3 / night)\n            :mod (t / today)))"], "smus": ["Visit tonight.", "A visit tonight to discuss.", "Donna and George had a visit.", "Donna will be visiting George tonight."]}, {"instance_id": "samsum-63", "summary": "Mr. Williams invites Ms. Blair for a coffee. They will go to her favourite coffee place near the square in a side alley at 2 p.m.", "summary_trees": ["# ::snt Mr. Williams invites Ms. Blair for a coffee.\n(ii / invite-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Mr.\"\n                  :op2 \"Williams\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Ms.\"\n                  :op2 \"Blair\"))\n      :ARG2 (c / coffee))", "# ::snt They will go to her favourite coffee place near the square in a side alley at 2 p.m.\n(g / go-02\n      :ARG0 (t / they)\n      :ARG4 (p / place\n            :mod (c / coffee)\n            :ARG1-of (f / favor-01\n                  :ARG0 (s / she))\n            :ARG1-of (n / near-02\n                  :ARG2 (s2 / square))\n            :location (a / alley\n                  :mod (s3 / side)))\n      :time (d / date-entity\n            :time \"14:00\"))"], "tree": ["(ii / invite-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Mr.\"\n                      :op2 \"Williams\"))\n    :ARG1 (p2 / person\n              :name (n2 / name\n                        :op1 \"Ms.\"\n                        :op2 \"Blair\")))", "(ii / invite-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Mr.\"\n                      :op2 \"Williams\"))\n    :ARG1 (p2 / person\n              :name (n2 / name\n                        :op1 \"Ms.\"\n                        :op2 \"Blair\"))\n    :ARG2 (c / coffee))", "(ii / invite-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Mr.\"\n                      :op2 \"Williams\"))\n    :ARG1 (p2 / person\n              :name (n2 / name\n                        :op1 \"Ms.\"\n                        :op2 \"Blair\"))\n    :ARG2 (c / coffee))", "(g / go-02\n   :time (d / date-entity\n            :time \"14:00\"))", "(g / go-02\n   :time (d / date-entity\n            :time \"14:00\"))", "(g / go-02\n   :ARG0 (t / they)\n   :ARG4 (p / place\n            :mod (c / coffee)\n            :ARG1 (f / favor-01\n                     :ARG0 (s / she))\n            :ARG1 (n / near-02\n                     :ARG2 (s2 / square))\n            :location (a / alley\n                         :mod (s3 / side))))"], "smus": ["Mr. Williams invites Ms. Blair.", "Mr. Williams invites Ms. Blair for a coffee.", "Mr. Williams invites Ms. Blair for a coffee.", "Go at 2:00pm.", "Go at 2:00pm.", "They'll go to her favorite coffee place near the square in a side alley."]}, {"instance_id": "samsum-64", "summary": "Cyprien irritates Adelina by giving too many responses.", "summary_trees": ["# ::snt Cyprien irritates Adelina by giving too many responses.\n(ii / irritate-01\n      :ARG0 (r / respond-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Cyprien\"))\n            :ARG1-of (h / have-quant-91\n                  :ARG2 (m / many)\n                  :ARG3 (t / too)))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Adelina\")))"], "tree": ["(h / have-quant-91\n   :ARG2 (m / many)\n   :ARG3 (t / too))", "(r / respond-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Cyprien\"))\n   :ARG1 (h / have-quant-91\n            :ARG2 (m / many)\n            :ARG3 (t / too)))", "(ii / irritate-01\n    :ARG0 (r / respond-01\n             :ARG0 (p / person\n                      :name (n / name\n                               :op1 \"Cyprien\"))\n             :ARG1 (h / have-quant-91\n                      :ARG2 (m / many)\n                      :ARG3 (t / too)))\n    :ARG1 (p2 / person\n              :name (n2 / name\n                        :op1 \"Adelina\")))"], "smus": ["Too many.", "Cyprien's responses were too many.", "Cyprien's responses to Adelina irritates her with too many."]}, {"instance_id": "samsum-65", "summary": "Melody's 5-year-old laptop is broken. Tomorrow she'll know what's wrong. She won't be repairing it, because her laptop is too old. Instead, she'll buy a new one.", "summary_trees": ["# ::snt Melody's 5-year-old laptop is broken.\n(b / break-01\n      :ARG1 (l / laptop\n            :age (t / temporal-quantity\n                  :quant 5\n                  :unit (y / year))\n            :poss (p / person\n                  :name (n / name\n                        :op1 \"Melody\"))))", "# ::snt Tomorrow she'll know what's wrong.\n(k / know-01\n      :ARG0 (s / she)\n      :ARG1 (t / thing\n            :ARG1-of (w / wrong-02))\n      :time (t2 / tomorrow))", "# ::snt She won't be repairing it, because her laptop is too old.\n(c / cause-01\n      :ARG0 (h / have-degree-91\n            :ARG1 (l / laptop\n                  :poss (s / she))\n            :ARG2 (o / old)\n            :ARG3 (t / too))\n      :ARG1 (r / repair-01\n            :polarity -\n            :ARG0 s\n            :ARG1 l))", "# ::snt Instead, she'll buy a new one.\n(b / buy-01\n      :ARG0 (s / she)\n      :ARG1 (o / one\n            :ARG1-of (n / new-01))\n      :ARG1-of (ii / instead-of-91))"], "tree": ["(b / break-01\n   :ARG1 (l / laptop\n            :age (t / temporal-quantity\n                    :quant 5\n                    :unit (y / year))\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Melody\"))))", "(b / break-01\n   :ARG1 (l / laptop\n            :age (t / temporal-quantity\n                    :quant 5\n                    :unit (y / year))\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Melody\"))))", "(k / know-01\n   :ARG1 (t / thing\n            :ARG1 (w / wrong-02)))", "(k / know-01\n   :ARG0 (s / she)\n   :ARG1 (t / thing\n            :ARG1 (w / wrong-02))\n   :time (t2 / tomorrow))", "(r / repair-01\n   :polarity -\n   :ARG0 (s / she)\n   :ARG1 (l / laptop))", "(h / have-degree-91\n   :ARG1 (l / laptop\n            :poss (s / she))\n   :ARG2 (o / old)\n   :ARG3 (t / too))", "(h / have-degree-91\n   :ARG1 (l / laptop\n            :poss (s / she))\n   :ARG2 (o / old)\n   :ARG3 (t / too))", "(c / cause-01\n   :ARG0 (h / have-degree-91\n            :ARG1 (l / laptop\n                     :poss (s / she))\n            :ARG2 (o / old)\n            :ARG3 (t / too))\n   :ARG1 (r / repair-01\n            :polarity -\n            :ARG0 s\n            :ARG1 l))", "(b / buy-01\n   :ARG1 (o / one\n            :ARG1 (n / new-01)))", "(b / buy-01\n   :ARG0 (s / she)\n   :ARG1 (o / one\n            :ARG1 (n / new-01)))", "(b / buy-01\n   :ARG0 (s / she)\n   :ARG1 (o / one\n            :ARG1 (n / new-01))\n   :ARG1 (ii / instead-of-91))"], "smus": ["Melody's 5 year old laptop was broken.", "Melody's 5 year old laptop was broken.", "Know what's wrong.", "She will know what's wrong tomorrow.", "She wasn't repairing the laptop.", "Her laptop is too old.", "Her laptop is too old.", "Her laptop is too old for repair, so she's not going to do it.", "Buy a new one.", "She'll buy a new one.", "She'll buy a new one instead."]}, {"instance_id": "samsum-66", "summary": "The particles in Gill's current peeling are too small. She'll try making her own peeling from ground coffee.", "summary_trees": ["# ::snt The particles in Gill's current peeling are too small.\n(h / have-degree-91\n      :ARG1 (p / particle\n            :part-of (p2 / peel-01\n                  :ARG1 (p3 / person\n                        :name (n / name\n                              :op1 \"Gill\"))\n                  :time (c / current)))\n      :ARG2 (s / small)\n      :ARG3 (t / too))", "# ::snt She'll try making her own peeling from ground coffee.\n(t / try-01\n      :ARG0 (s / she)\n      :ARG1 (m / make-01\n            :ARG0 s\n            :ARG1 (p / peel-01\n                  :ARG0 s\n                  :ARG2 (c / coffee\n                        :ARG1-of (g / ground-03)))))"], "tree": ["(h / have-degree-91\n   :ARG1 (p / particle\n            :part (p2 / peel-01\n                      :ARG1 (p3 / person\n                                :name (n / name\n                                         :op1 \"Gill\"))\n                      :time (c / current)))\n   :ARG2 (s / small)\n   :ARG3 (t / too))", "(m / make-01\n   :ARG0 (s / she)\n   :ARG1 (p / peel-01\n            :ARG0 s\n            :ARG2 (c / coffee\n                     :ARG1 (g / ground-03))))", "(t / try-01\n   :ARG0 (s / she)\n   :ARG1 (m / make-01\n            :ARG0 s\n            :ARG1 (p / peel-01\n                     :ARG0 s\n                     :ARG2 (c / coffee\n                              :ARG1 (g / ground-03)))))"], "smus": ["The particles in Gill's current peel are too small.", "She was making a peel of ground coffee.", "She'll try making a peel of ground coffee."]}, {"instance_id": "samsum-67", "summary": "Joe is going to watch Deadpool 2 with his fellows and Pete will join them.", "summary_trees": ["# ::snt Joe is going to watch Deadpool 2 with his fellows and Pete will join them.\n(a / and\n      :op1 (w / watch-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Joe\"))\n            :ARG1 (m / movie\n                  :name (n2 / name\n                        :op1 \"Deadpool\"\n                        :op2 2))\n            :accompanier (f / fellow\n                  :poss p))\n      :op2 (j / join-04\n            :ARG0 (p2 / person\n                  :name (n3 / name\n                        :op1 \"Pete\"))\n            :ARG1 (t / they)))"], "tree": ["(w / watch-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Joe\")))", "(w / watch-01\n   :ARG1 (m / movie\n            :name (n2 / name\n                      :op1 \"Deadpool\"\n                      :op2 2)))", "(j / join-04\n   :ARG0 (p2 / person\n             :name (n3 / name\n                       :op1 \"Pete\"))\n   :ARG1 (t / they))", "(j / join-04\n   :ARG0 (p2 / person\n             :name (n3 / name\n                       :op1 \"Pete\"))\n   :ARG1 (t / they))", "(w / watch-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Joe\"))\n   :ARG1 (m / movie\n            :name (n2 / name\n                      :op1 \"Deadpool\"\n                      :op2 2)))", "(w / watch-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Joe\"))\n   :ARG1 (m / movie\n            :name (n2 / name\n                      :op1 \"Deadpool\"\n                      :op2 2))\n   :accompanier (f / fellow\n                   :poss p))"], "smus": ["Watch Joe.", "Watch Deadpool 2.", "Pete will join them.", "Pete will join them.", "Joe will watch Deadpool 2.", "Joe will watch Deadpool 2 with his fellows."]}, {"instance_id": "samsum-68", "summary": "Dinny's afraid of Terry's dog so he should keep it away.", "summary_trees": ["# ::snt Dinny's afraid of Terry's dog so he should keep it away.\n(f / fear-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Dinny\"))\n      :ARG1 (d / dog\n            :poss (p2 / person\n                  :name (n2 / name\n                        :op1 \"Terry\")))\n      :ARG0-of (c / cause-01\n            :ARG1 (r / recommend-01\n                  :ARG1 (k / keep-04\n                        :ARG0 p\n                        :ARG1 d\n                        :ARG2 (a / away)))))"], "tree": ["(k / keep-04\n   :ARG0 (p / person :name (n / name :op1 \"Dinny\"))\n   :ARG1 (d / dog)\n   :ARG2 (a / away))", "(k / keep-04\n   :ARG0 (p / person :name (n / name :op1 \"Dinny\"))\n   :ARG1 (d / dog)\n   :ARG2 (a / away))", "(r / recommend-01\n   :ARG1 (k / keep-04\n            :ARG0 (p / person :name (n / name :op1 \"Dinny\"))\n            :ARG1 (d / dog)\n            :ARG2 (a / away)))", "(r / recommend-01\n   :ARG1 (k / keep-04\n            :ARG0 (p / person :name (n / name :op1 \"Dinny\"))\n            :ARG1 (d / dog)\n            :ARG2 (a / away)))", "(c / cause-01\n   :ARG1 (r / recommend-01\n            :ARG1 (k / keep-04\n                     :ARG0 (p / person :name (n / name :op1 \"Dinny\"))\n                     :ARG1 (d / dog)\n                     :ARG2 (a / away))))", "(f / fear-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dinny\"))\n   :ARG1 (d / dog\n            :poss (p2 / person\n                      :name (n2 / name\n                                :op1 \"Terry\"))))", "(f / fear-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dinny\"))\n   :ARG1 (d / dog\n            :poss (p2 / person\n                      :name (n2 / name\n                                :op1 \"Terry\")))\n   :ARG0 (c / cause-01\n            :ARG1 (r / recommend-01\n                     :ARG1 (k / keep-04\n                              :ARG0 p\n                              :ARG1 d\n                              :ARG2 (a / away)))))"], "smus": ["Dinny will keep the dog away.", "Dinny will keep the dog away.", "Dinny should keep the dog away.", "Dinny should keep the dog away.", "So Dinny should keep the dog away.", "Dinny is afraid of Terry's dog.", "Dinny was afraid of Terry's dog so he should keep it away."]}, {"instance_id": "samsum-69", "summary": "Agatha is proud of herself because she has finished her presentation in Economics. She is very interested in Economics.", "summary_trees": ["# ::snt Agatha is proud of herself because she has finished her presentation in Economics.\n(p / pride-01\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Agatha\"))\n      :ARG1 p2\n      :ARG1-of (c / cause-01\n            :ARG0 (f / finish-01\n                  :ARG0 p2\n                  :ARG1 (p3 / present-01\n                        :ARG0 p2\n                        :topic (e / economics)))))", "# ::snt She is very interested in Economics.\n(ii / interest-01\n      :ARG1 (s / she)\n      :ARG2 (e / economics)\n      :degree (v / very))"], "tree": ["(f / finish-01\n   :ARG1 (p3 / present-01\n             :ARG0 (p2 / person :name (n / name :op1 \"Agatha\"))\n             :topic (e / economics)))", "(p / pride-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Agatha\")))", "(f / finish-01\n   :ARG0 (p2 / person :name (n / name :op1 \"Agatha\"))\n   :ARG1 (p3 / present-01\n             :ARG0 p2\n             :topic (e / economics)))", "(f / finish-01\n   :ARG0 (p2 / person :name (n / name :op1 \"Agatha\"))\n   :ARG1 (p3 / present-01\n             :ARG0 p2\n             :topic (e / economics)))", "(p / pride-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Agatha\"))\n   :ARG1 p2)", "(c / cause-01\n   :ARG0 (f / finish-01\n            :ARG0 (p2 / person :name (n / name :op1 \"Agatha\"))\n            :ARG1 (p3 / present-01\n                      :ARG0 p2\n                      :topic (e / economics))))", "(p / pride-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Agatha\"))\n   :ARG1 p2\n   :ARG1 (c / cause-01\n            :ARG0 (f / finish-01\n                     :ARG0 p2\n                     :ARG1 (p3 / present-01\n                               :ARG0 p2\n                               :topic (e / economics)))))", "(ii / interest-01\n    :ARG1 (s / she)\n    :ARG2 (e / economics))", "(ii / interest-01\n    :ARG1 (s / she)\n    :ARG2 (e / economics)\n    :degree (v / very))"], "smus": ["Agatha's presentation on Economics is finished.", "Agatha is proud.", "Agatha has finished her presentation on Economics.", "Agatha has finished her presentation on Economics.", "Agatha is proud of herself.", "Because Agatha has finished her presentation on Economics.", "Agatha is proud to have finished her presentation on Economics.", "She is interested in Economics.", "She is very interested in Economics."]}, {"instance_id": "samsum-70", "summary": "Joseph was happy with two of the three hotel job interviews he had this week.", "summary_trees": ["# ::snt Joseph was happy with two of the three hotel job interviews he had this week.\n(h / happy-01\n      :ARG0 (ii / interview-01\n            :quant 2\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Joseph\"))\n            :ARG1-of (ii2 / include-91\n                  :ARG2 (ii3 / interview-01\n                        :quant 3\n                        :ARG1 p\n                        :ARG2 (j / job)\n                        :location (h2 / hotel)\n                        :ARG1-of (h3 / have-06\n                              :ARG0 p\n                              :time (w / week\n                                    :mod (t / this))))))\n      :ARG1 p)"], "tree": ["(ii3 / interview-01\n     :quant 3\n     :location (h2 / hotel))", "(h3 / have-06\n    :time (w / week\n             :mod (t / this)))", "(h3 / have-06\n    :ARG0 (p / person :name (n / name :op1 \"Joseph\"))\n    :time (w / week\n             :mod (t / this)))", "(ii3 / interview-01\n     :quant 3\n     :ARG1 (p / person :name (n / name :op1 \"Joseph\"))\n     :ARG2 (j / job)\n     :location (h2 / hotel)\n     :ARG1 (h3 / have-06\n               :ARG0 p\n               :time (w / week\n                        :mod (t / this))))", "(ii2 / include-91\n     :ARG2 (ii3 / interview-01\n                :quant 3\n                :ARG1 (p / person :name (n / name :op1 \"Joseph\"))\n                :ARG2 (j / job)\n                :location (h2 / hotel)\n                :ARG1 (h3 / have-06\n                          :ARG0 p\n                          :time (w / week\n                                   :mod (t / this)))))", "(h / happy-01\n   :ARG0 (ii / interview-01\n             :quant 2\n             :ARG1 (p / person\n                      :name (n / name\n                               :op1 \"Joseph\"))\n             :ARG1 (ii2 / include-91\n                        :ARG2 (ii3 / interview-01\n                                   :quant 3\n                                   :ARG1 p\n                                   :ARG2 (j / job)\n                                   :location (h2 / hotel)\n                                   :ARG1 (h3 / have-06\n                                             :ARG0 p\n                                             :time (w / week\n                                                      :mod (t / this))))))\n   :ARG1 p)"], "smus": ["iii) Three interviews in the hotel.", "This week had.", "Joseph had this week.", "Joseph had three job interviews at a hotel this week.", "ii) Joseph had three job interviews at a hotel this week.", "Joseph was happy with two of the three job interviews he had in a hotel this week."]}, {"instance_id": "samsum-71", "summary": "The content for November email blast is on the Dropbox, no need to send it.", "summary_trees": ["# ::snt The content for November email blast is on the Dropbox, no need to send it.\n(c / content\n      :location (p / product\n            :name (n / name\n                  :op1 \"Dropbox\"))\n      :time (b / blast-04\n            :ARG1 (e / email-01)\n            :time (d / date-entity\n                  :month 11))\n      :ARG0-of (c2 / cause-01\n            :ARG1 (n2 / need-01\n                  :polarity -\n                  :ARG1 (s / send-01\n                        :ARG1 c))))"], "tree": ["(b / blast-04\n   :time (d / date-entity\n            :month 11))", "(n2 / need-01\n    :polarity -\n    :ARG1 (s / send-01\n             :ARG1 (c / content)))", "(b / blast-04\n   :ARG1 (e / email-01)\n   :time (d / date-entity\n            :month 11))", "(c2 / cause-01\n    :ARG1 (n2 / need-01\n              :polarity -\n              :ARG1 (s / send-01\n                       :ARG1 (c / content))))"], "smus": ["The blast took place in November.", "There is no need for sending content.", "A blast of email in November.", "So no need to send content."]}, {"instance_id": "samsum-72", "summary": "Paul is going to share his Netflix account with Luke. In exchange Luke is going to contribute to the subscription. Paul will send Luke his bank details. Paul is on vacation with his girlfriend till tomorrow.", "summary_trees": ["# ::snt Paul is going to share his Netflix account with Luke.\n(s / share-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Paul\"))\n      :ARG1 (a / account\n            :poss p\n            :mod (c / company\n                  :name (n2 / name\n                        :op1 \"Netflix\")))\n      :ARG2 (p2 / person\n            :name (n3 / name\n                  :op1 \"Luke\")))", "# ::snt In exchange Luke is going to contribute to the subscription.\n(e / exchange-01\n      :ARG3 (c / contribute-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Luke\"))\n            :ARG2 (s / subscribe-01)))", "# ::snt Paul will send Luke his bank details.\n(s / send-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Paul\"))\n      :ARG1 (d / detail\n            :mod (b / bank)\n            :poss (p2 / person\n                  :name (n2 / name\n                        :op1 \"Luke\")))\n      :ARG2 p2)", "# ::snt Paul is on vacation with his girlfriend till tomorrow.\n(v / vacation-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Paul\"))\n            :op2 (p2 / person\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 p\n                        :ARG2 (g / girlfriend))))\n      :time (t / till\n            :op1 (t2 / tomorrow)))"], "tree": ["(s / share-01\n   :ARG1 (a / account\n            :poss (p / person :name (n / name :op1 \"Paul\"))\n            :mod (c / company\n                    :name (n2 / name\n                              :op1 \"Netflix\"))))", "(s / share-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Paul\"))\n   :ARG1 (a / account\n            :poss p\n            :mod (c / company\n                    :name (n2 / name\n                              :op1 \"Netflix\"))))", "(s / share-01\n   :ARG1 (a / account\n            :poss (p / person :name (n / name :op1 \"Paul\"))\n            :mod (c / company\n                    :name (n2 / name\n                              :op1 \"Netflix\")))\n   :ARG2 (p2 / person\n             :name (n3 / name\n                       :op1 \"Luke\")))", "(s / share-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Paul\"))\n   :ARG1 (a / account\n            :poss p\n            :mod (c / company\n                    :name (n2 / name\n                              :op1 \"Netflix\")))\n   :ARG2 (p2 / person\n             :name (n3 / name\n                       :op1 \"Luke\")))", "(s / share-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Paul\"))\n   :ARG1 (a / account\n            :poss p\n            :mod (c / company\n                    :name (n2 / name\n                              :op1 \"Netflix\")))\n   :ARG2 (p2 / person\n             :name (n3 / name\n                       :op1 \"Luke\")))", "(c / contribute-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Luke\")))", "(c / contribute-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Luke\"))\n   :ARG2 (s / subscribe-01))", "(c / contribute-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Luke\"))\n   :ARG2 (s / subscribe-01))", "(e / exchange-01\n   :ARG3 (c / contribute-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Luke\"))\n            :ARG2 (s / subscribe-01)))", "(s / send-01\n   :ARG1 (d / detail\n            :mod (b / bank)\n            :poss (p2 / person\n                      :name (n2 / name\n                                :op1 \"Luke\")))\n   :ARG2 p2)", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Paul\"))\n   :ARG1 (d / detail\n            :mod (b / bank)\n            :poss (p2 / person\n                      :name (n2 / name\n                                :op1 \"Luke\"))))", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Paul\"))\n   :ARG1 (d / detail\n            :mod (b / bank)\n            :poss (p2 / person\n                      :name (n2 / name\n                                :op1 \"Luke\")))\n   :ARG2 p2)", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Paul\"))\n   :ARG1 (d / detail\n            :mod (b / bank)\n            :poss (p2 / person\n                      :name (n2 / name\n                                :op1 \"Luke\")))\n   :ARG2 p2)", "(h / have-rel-role-91\n   :ARG1 (p / person :name (n / name :op1 \"Paul\"))\n   :ARG2 (g / girlfriend))", "(v / vacation-01\n   :time (t / till\n            :op1 (t2 / tomorrow)))", "(v / vacation-01\n   :time (t / till\n            :op1 (t2 / tomorrow)))", "(v / vacation-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Paul\")))", "(v / vacation-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Paul\"))\n   :time (t / till\n            :op1 (t2 / tomorrow)))", "(v / vacation-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Paul\"))\n   :time (t / till\n            :op1 (t2 / tomorrow)))", "(v / vacation-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Paul\"))\n            :op2 (p2 / person\n                     :ARG0 (h / have-rel-role-91\n                              :ARG1 p\n                              :ARG2 (g / girlfriend)))))", "(v / vacation-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Paul\"))\n            :op2 (p2 / person\n                     :ARG0 (h / have-rel-role-91\n                              :ARG1 p\n                              :ARG2 (g / girlfriend))))\n   :time (t / till\n            :op1 (t2 / tomorrow)))", "(v / vacation-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Paul\"))\n            :op2 (p2 / person\n                     :ARG0 (h / have-rel-role-91\n                              :ARG1 p\n                              :ARG2 (g / girlfriend))))\n   :time (t / till\n            :op1 (t2 / tomorrow)))"], "smus": ["Paul's Netflix account will share.", "Paul will share his Netflix account.", "Paul's Netflix account will share with Luke.", "Paul will share his Netflix account with Luke.", "Paul will share his Netflix account with Luke.", "Luke will contribute.", "Luke will contribute to the subscription.", "Luke will contribute to the subscription.", "In exchange, Luke will contribute to the subscription.", "Send Luke's bank details.", "Paul will send Luke's bank details.", "Paul will send Luke's bank details.", "Paul will send Luke's bank details.", "Paul's girlfriend.", "It's vacation till tomorrow.", "It's vacation till tomorrow.", "Paul is on vacation.", "Paul is on vacation till tomorrow.", "Paul is on vacation till tomorrow.", "Paul and his girlfriend are on vacation.", "Paul and his girlfriend are on vacation till tomorrow.", "Paul and his girlfriend are on vacation till tomorrow."]}, {"instance_id": "samsum-73", "summary": "Derek and Alyssa make fun of Fergie's performance of the national anthem.", "summary_trees": ["# ::snt Derek and Alyssa make fun of Fergie's performance of the national anthem.\n(m / make-fun-04\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Derek\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Alyssa\")))\n      :ARG1 (p3 / perform-01\n            :ARG0 (p4 / person\n                  :name (n3 / name\n                        :op1 \"Fergie\"))\n            :ARG1 (a2 / anthem\n                  :mod (n4 / nation))))"], "tree": ["(p3 / perform-01\n    :ARG1 (a2 / anthem\n              :mod (n4 / nation)))", "(p3 / perform-01\n    :ARG0 (p4 / person\n              :name (n3 / name\n                        :op1 \"Fergie\")))", "(p3 / perform-01\n    :ARG0 (p4 / person\n              :name (n3 / name\n                        :op1 \"Fergie\"))\n    :ARG1 (a2 / anthem\n              :mod (n4 / nation)))", "(p3 / perform-01\n    :ARG0 (p4 / person\n              :name (n3 / name\n                        :op1 \"Fergie\"))\n    :ARG1 (a2 / anthem\n              :mod (n4 / nation)))", "(m / make-fun-04\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Derek\"))\n   :ARG1 (p3 / perform-01\n             :ARG0 (p4 / person\n                       :name (n3 / name\n                                 :op1 \"Fergie\"))\n             :ARG1 (a2 / anthem\n                       :mod (n4 / nation))))", "(m / make-fun-04\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Alyssa\"))\n   :ARG1 (p3 / perform-01\n             :ARG0 (p4 / person\n                       :name (n3 / name\n                                 :op1 \"Fergie\"))\n             :ARG1 (a2 / anthem\n                       :mod (n4 / nation)))\n   :ARG1 p3)", "(m / make-fun-04\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Derek\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Alyssa\")))\n   :ARG1 (p3 / perform-01\n             :ARG0 (p4 / person\n                       :name (n3 / name\n                                 :op1 \"Fergie\"))\n             :ARG1 (a2 / anthem\n                       :mod (n4 / nation))))"], "smus": ["The performance of the national anthem", "Fergie's performance", "Fergie gave a performance of the national anthem.", "Fergie gave a performance of the national anthem.", "Derek make fun of Fergie's performance of the national anthem.", "Alyssa make fun of Fergie's performance of the national anthem.", "Derek and Alyssa make fun of Fergie's performance of the national anthem."]}, {"instance_id": "samsum-74", "summary": "Irene will take Crystal's son shopping for clothes.", "summary_trees": ["# ::snt Irene will take Crystal's son shopping for clothes.\n(t / take-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Irene\"))\n      :ARG1 (p2 / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (p3 / person\n                        :name (n2 / name\n                              :op1 \"Crystal\"))\n                  :ARG2 (s / son)))\n      :ARG3 (s2 / shop-01\n            :ARG0 p2\n            :ARG1 (c / clothes)))"], "tree": ["(s2 / shop-01\n    :ARG0 (p2 / person)\n    :ARG1 (c / clothes))", "(s2 / shop-01\n    :ARG0 (p2 / person)\n    :ARG1 (c / clothes))", "(h / have-rel-role-91\n   :ARG1 (p3 / person\n             :name (n2 / name\n                       :op1 \"Crystal\"))\n   :ARG2 (s / son))", "(t / take-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Irene\"))\n   :ARG1 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 (p3 / person\n                                :name (n2 / name\n                                          :op1 \"Crystal\"))\n                      :ARG2 (s / son))))", "(t / take-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Irene\"))\n   :ARG1 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 (p3 / person\n                                :name (n2 / name\n                                          :op1 \"Crystal\"))\n                      :ARG2 (s / son)))\n   :ARG3 (s2 / shop-01\n             :ARG0 p2\n             :ARG1 (c / clothes)))"], "smus": ["People shopping for clothes.", "People shopping for clothes.", "Crystal's son", "Irene would take Crystal's son.", "Irene would take Crystal's son shopping for clothes."]}, {"instance_id": "samsum-75", "summary": "Kamden hasn't used social media recently. He uses messenger only and wants to get Mckinley's photographs.", "summary_trees": ["# ::snt Kamden hasn't used social media recently.\n(u / use-01\n      :polarity -\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Kamden\"))\n      :ARG1 (m / media\n            :mod (s / social))\n      :time (r / recent))", "# ::snt He uses messenger only and wants to get Mckinley's photographs.\n(a / and\n      :op1 (u / use-01\n            :ARG0 (h / he)\n            :ARG1 (m / messenger)\n            :mod (o / only))\n      :op2 (w / want-01\n            :ARG0 h\n            :ARG1 (g / get-01\n                  :ARG0 h\n                  :ARG1 (p / photograph-01\n                        :ARG0 (p2 / person\n                              :name (n / name\n                                    :op1 \"Mckinley\"))))))"], "tree": ["(u / use-01\n   :polarity -\n   :time (r / recent))", "(u / use-01\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kamden\"))\n   :ARG1 (m / media\n            :mod (s / social))\n   :time (r / recent))", "(u / use-01\n   :ARG0 (h / he)\n   :ARG1 (m / messenger))", "(u / use-01\n   :ARG0 (h / he)\n   :ARG1 (m / messenger)\n   :mod (o / only))", "(w / want-01\n   :ARG0 (h / he)\n   :ARG1 (g / get-01\n            :ARG0 h\n            :ARG1 (p / photograph-01\n                     :ARG0 (p2 / person\n                               :name (n / name\n                                        :op1 \"Mckinley\")))))", "(w / want-01\n   :ARG0 (h / he)\n   :ARG1 (g / get-01\n            :ARG0 h\n            :ARG1 (p / photograph-01\n                     :ARG0 (p2 / person\n                               :name (n / name\n                                        :op1 \"Mckinley\")))))"], "smus": ["Not used recently.", "Kamden has recently not used social media.", "He uses messengers.", "He uses messenger only.", "He wants to get McKinley's photos.", "He wants to get McKinley's photos."]}, {"instance_id": "samsum-76", "summary": "Helen has left her laptop at home and needs it for the presentation today. Debbie will bring it to Helen's work. ", "summary_trees": ["# ::snt Helen has left her laptop at home and needs it for the presentation today.\n(a / and\n      :op1 (l / leave-15\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Helen\"))\n            :ARG1 (l2 / laptop\n                  :poss p)\n            :ARG2 (h / home))\n      :op2 (n2 / need-01\n            :ARG0 p\n            :ARG1 l2\n            :purpose (p2 / present-01\n                  :ARG0 p\n                  :time (t / today))))", "# ::snt Debbie will bring it to Helen's work.\n(b / bring-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Debbie\"))\n      :ARG1 (ii / it)\n      :ARG2 (w / work-01\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Helen\"))))"], "tree": ["(n2 / need-01\n    :ARG0 (p / person :name (n / name :op1 \"Helen\"))\n    :ARG1 (l2 / laptop)\n    :purpose (p2 / present-01\n                 :ARG0 p\n                 :time (t / today)))", "(n2 / need-01\n    :ARG0 (p / person :name (n / name :op1 \"Helen\"))\n    :ARG1 (l2 / laptop)\n    :purpose (p2 / present-01\n                 :ARG0 p\n                 :time (t / today)))", "(l / leave-15\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Helen\"))\n   :ARG1 (l2 / laptop\n             :poss p))", "(l / leave-15\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Helen\"))\n   :ARG1 (l2 / laptop\n             :poss p)\n   :ARG2 (h / home))", "(l / leave-15\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Helen\"))\n   :ARG1 (l2 / laptop\n             :poss p)\n   :ARG2 (h / home))", "(w / work-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Helen\")))", "(w / work-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Helen\")))", "(b / bring-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Debbie\"))\n   :ARG1 (ii / it))", "(b / bring-01\n   :ARG1 (ii / it)\n   :ARG2 (w / work-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Helen\"))))", "(b / bring-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Debbie\"))\n   :ARG1 (ii / it)\n   :ARG2 (w / work-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Helen\"))))", "(b / bring-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Debbie\"))\n   :ARG1 (ii / it)\n   :ARG2 (w / work-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Helen\"))))"], "smus": ["Helen needs a laptop for her presentation today.", "Helen needs a laptop for her presentation today.", "Helen had left her laptop.", "Helen had left her laptop at home.", "Helen had left her laptop at home.", "Helen did work.", "Helen did work.", "Debbie will bring it.", "Bring it to Helen's work.", "Debbie will bring it to Helen's work.", "Debbie will bring it to Helen's work."]}, {"instance_id": "samsum-77", "summary": "It's been very long since Melany last had sex. Marvin made an inappropriate joke about it.", "summary_trees": ["# ::snt It's been very long since Melany last had sex.\n(l / long-03\n      :ARG1 (s / since\n            :op1 (s2 / sex-01\n                  :ARG0 (p / person\n                        :name (n / name\n                              :op1 \"Melany\"))\n                  :mod (l2 / last)))\n      :degree (v / very))", "# ::snt Marvin made an inappropriate joke about it.\n(j / joke-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Marvin\"))\n      :ARG2 (ii / it)\n      :ARG1-of (a / appropriate-02\n            :polarity -))"], "tree": ["(s2 / sex-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Melany\")))", "(l / long-03\n   :ARG1 (s / since\n            :op1 (s2 / sex-01\n                     :ARG0 (p / person\n                              :name (n / name\n                                       :op1 \"Melany\"))\n                     :mod (l2 / last))))", "(j / joke-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Marvin\"))\n   :ARG2 (ii / it))", "(j / joke-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Marvin\"))\n   :ARG2 (ii / it)\n   :ARG1 (a / appropriate-02\n            :polarity -))"], "smus": ["Melanie has sex.", "It's been long since Melanie last had sex.", "It was Marvin's joke.", "It was Marvin's inappropriate joke."]}, {"instance_id": "samsum-78", "summary": "Robert will pick up floating balloons for Tom's birthday.", "summary_trees": ["# ::snt Robert will pick up floating balloons for Tom's birthday.\n(p / pick-up-04\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Robert\"))\n      :ARG1 (b / balloon\n            :ARG1-of (f / float-01))\n      :purpose (b2 / birthday\n            :poss (p3 / person\n                  :name (n2 / name\n                        :op1 \"Tom\"))))"], "tree": ["(p / pick-up-04\n   :purpose (b2 / birthday\n                :poss (p3 / person\n                          :name (n2 / name\n                                    :op1 \"Tom\"))))", "(p / pick-up-04\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Robert\"))\n   :ARG1 (b / balloon\n            :ARG1 (f / float-01)))", "(p / pick-up-04\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Robert\"))\n   :ARG1 (b / balloon\n            :ARG1 (f / float-01))\n   :purpose (b2 / birthday\n                :poss (p3 / person\n                          :name (n2 / name\n                                    :op1 \"Tom\"))))"], "smus": ["Pick up for Tom's birthday.", "Robert would pick up floating balloons.", "Robert will pick up floating balloons for Tom's birthday."]}, {"instance_id": "samsum-79", "summary": "Hania has been traveling for 3 hours already. She will get there around 7pm. Julia will order takeaway pizza for her. ", "summary_trees": ["# ::snt Hania has been traveling for 3 hours already.\n(t / travel-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Hania\"))\n      :duration (t2 / temporal-quantity\n            :quant 3\n            :unit (h / hour))\n      :time (a / already))", "# ::snt She will get there around 7pm.\n(g / get-05\n      :ARG1 (s / she)\n      :ARG2 (t / there)\n      :time (a / around\n            :op1 (d / date-entity\n                  :time \"19:00\")))", "# ::snt Julia will order takeaway pizza for her.\n(o / order-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Julia\"))\n      :ARG1 (p2 / pizza\n            :ARG1-of (t / take-01\n                  :ARG3 (h / home)))\n      :ARG3 p)"], "tree": ["(t / travel-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hania\")))", "(t / travel-01\n   :duration (t2 / temporal-quantity\n                 :quant 3\n                 :unit (h / hour))\n   :time (a / already))", "(t / travel-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hania\"))\n   :duration (t2 / temporal-quantity\n                 :quant 3\n                 :unit (h / hour))\n   :time (a / already))", "(g / get-05\n   :ARG1 (s / she)\n   :ARG2 (t / there))", "(o / order-02\n   :ARG1 (p2 / pizza\n             :ARG1 (t / take-01\n                      :ARG3 (h / home))))", "(o / order-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Julia\"))\n   :ARG1 (p2 / pizza\n             :ARG1 (t / take-01\n                      :ARG3 (h / home))))", "(o / order-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Julia\"))\n   :ARG1 (p2 / pizza\n             :ARG1 (t / take-01\n                      :ARG3 (h / home)))\n   :ARG3 p)"], "smus": ["Hannah is traveling.", "It's already been three hours of traveling.", "Hanie had already been traveling for three hours.", "Get there, she's going to.", "Order pizza for take home.", "Julia would order a take home pizza.", "Julia would order her take home pizza."]}, {"instance_id": "samsum-80", "summary": "William is making spaghetti alla vongole for dinner. It's an Italian dish and it involves pasta, garlic, wine and clams.", "summary_trees": ["# ::snt William is making spaghetti alla vongole for dinner.\n(m / make-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"William\"))\n      :ARG1 (s / spaghetti\n            :mod (a / all-a-vongole)\n            :ARG1-of (h / have-purpose-91\n                  :ARG2 (d / dinner))))", "# ::snt It's an Italian dish and it involves pasta, garlic, wine and clams.\n(a / and\n      :op1 (d / dish\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"Italy\"))\n            :domain (ii / it))\n      :op2 (ii2 / involve-01\n            :ARG1 (a2 / and\n                  :op1 (p / pasta)\n                  :op2 (g / garlic)\n                  :op3 (w / wine)\n                  :op4 (c2 / clam))\n            :ARG2 ii))"], "tree": ["(m / make-01\n   :ARG1 (s / spaghetti\n            :mod (a / all-a-vongole)\n            :ARG1 (h / have-purpose-91\n                     :ARG2 (d / dinner))))", "(m / make-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"William\"))\n   :ARG1 (s / spaghetti\n            :mod (a / all-a-vongole)\n            :ARG1 (h / have-purpose-91\n                     :ARG2 (d / dinner))))", "(m / make-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"William\"))\n   :ARG1 (s / spaghetti\n            :mod (a / all-a-vongole)\n            :ARG1 (h / have-purpose-91\n                     :ARG2 (d / dinner))))", "(ii2 / involve-01\n     :ARG1 (c2 / clam)\n     :ARG2 (ii / it))", "(ii2 / involve-01\n     :ARG1 (c2 / clam)\n     :ARG2 (ii / it))", "(ii2 / involve-01\n     :ARG1 (a2 / and\n               :op1 (p / pasta)\n               :op2 (g / garlic)\n               :op3 (w / wine)\n               :op4 (c2 / clam)))", "(ii2 / involve-01\n     :ARG1 (a2 / and\n               :op1 (p / pasta)\n               :op2 (g / garlic)\n               :op3 (w / wine)\n               :op4 (c2 / clam))\n     :ARG2 (ii / it))", "(ii2 / involve-01\n     :ARG1 (a2 / and\n               :op1 (p / pasta)\n               :op2 (g / garlic)\n               :op3 (w / wine)\n               :op4 (c2 / clam))\n     :ARG2 (ii / it))"], "smus": ["Making all avongole spaghetti for dinner.", "William is making all avongole spaghetti for dinner.", "William is making all avongole spaghetti for dinner.", "It involves clams.", "It involves clams.", "involves pasta, garlic, wine and clams.", "It involves pasta, garlic, wine and clams.", "It involves pasta, garlic, wine and clams."]}, {"instance_id": "samsum-81", "summary": "Phoebe cannot go out today because she broke a bottle of her mother's expensive perfume. Phoebe's mother is angry. The smell of the perfume in the apartment is too intense now.", "summary_trees": ["# ::snt Phoebe cannot go out today because she broke a bottle of her mother's expensive perfume.\n(p / possible-01\n      :polarity -\n      :ARG1 (g / go-out-17\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Phoebe\"))\n            :time (t / today))\n      :ARG1-of (c / cause-01\n            :ARG0 (b / break-01\n                  :ARG0 p2\n                  :ARG1 (b2 / bottle\n                        :ARG0-of (c2 / contain-01\n                              :ARG1 (p3 / perfume\n                                    :mod (e / expensive)\n                                    :poss (p4 / person\n                                          :ARG0-of (h / have-rel-role-91\n                                                :ARG1 p2\n                                                :ARG2 (m / mother)))))))))", "# ::snt Phoebe's mother is angry.\n(a / anger-01\n      :ARG1 (p / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (p2 / person\n                        :name (n / name\n                              :op1 \"Phoebe\"))\n                  :ARG2 (m / mother))))", "# ::snt The smell of the perfume in the apartment is too intense now.\n(h / have-degree-91\n      :ARG1 (s / smell-02\n            :ARG1 (p / perfume)\n            :location (a / apartment))\n      :ARG2 (ii / intense-02\n            :ARG1 s)\n      :ARG3 (t / too)\n      :time (n / now))"], "tree": ["(b / break-01\n   :ARG1 (b2 / bottle\n             :ARG0 (c2 / contain-01\n                       :ARG1 (p3 / perfume\n                                 :mod (e / expensive)\n                                 :poss (p4 / person\n                                           :ARG0 (h / have-rel-role-91\n                                                    :ARG1 (p2 / person :name (n / name :op1 \"Phoebe\"))\n                                                    :ARG2 (m / mother)))))))", "(b / break-01\n   :ARG0 (p2 / person :name (n / name :op1 \"Phoebe\"))\n   :ARG1 (b2 / bottle\n             :ARG0 (c2 / contain-01\n                       :ARG1 (p3 / perfume\n                                 :mod (e / expensive)\n                                 :poss (p4 / person\n                                           :ARG0 (h / have-rel-role-91\n                                                    :ARG1 p2\n                                                    :ARG2 (m / mother)))))))", "(b / break-01\n   :ARG0 (p2 / person :name (n / name :op1 \"Phoebe\"))\n   :ARG1 (b2 / bottle\n             :ARG0 (c2 / contain-01\n                       :ARG1 (p3 / perfume\n                                 :mod (e / expensive)\n                                 :poss (p4 / person\n                                           :ARG0 (h / have-rel-role-91\n                                                    :ARG1 p2\n                                                    :ARG2 (m / mother)))))))", "(c / cause-01\n   :ARG0 (b / break-01\n            :ARG0 (p2 / person :name (n / name :op1 \"Phoebe\"))\n            :ARG1 (b2 / bottle\n                      :ARG0 (c2 / contain-01\n                                :ARG1 (p3 / perfume\n                                          :mod (e / expensive)\n                                          :poss (p4 / person\n                                                    :ARG0 (h / have-rel-role-91\n                                                             :ARG1 p2\n                                                             :ARG2 (m / mother))))))))", "(p / possible-01\n   :polarity -\n   :ARG1 (g / go-out-17\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Phoebe\"))\n            :time (t / today))\n   :ARG1 (c / cause-01\n            :ARG0 (b / break-01\n                     :ARG0 p2\n                     :ARG1 (b2 / bottle\n                               :ARG0 (c2 / contain-01\n                                         :ARG1 (p3 / perfume\n                                                   :mod (e / expensive)\n                                                   :poss (p4 / person\n                                                             :ARG0 (h / have-rel-role-91\n                                                                      :ARG1 p2\n                                                                      :ARG2 (m / mother)))))))))", "(h / have-rel-role-91\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Phoebe\"))\n   :ARG2 (m / mother))", "(a / anger-01\n   :ARG1 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :name (n / name\n                                        :op1 \"Phoebe\"))\n                     :ARG2 (m / mother))))", "(a / anger-01\n   :ARG1 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :name (n / name\n                                        :op1 \"Phoebe\"))\n                     :ARG2 (m / mother))))", "(s / smell-02\n   :ARG1 (p / perfume)\n   :location (a / apartment))", "(h / have-degree-91\n   :ARG1 (s / smell-02\n            :ARG1 (p / perfume)\n            :location (a / apartment))\n   :ARG2 (ii / intense-02\n             :ARG1 s)\n   :ARG3 (t / too)\n   :time (n / now))"], "smus": ["A bottle containing Phoebe's expensive mother's perfume broke.", "Phoebe broke into a bottle containing her mother's expensive perfume.", "Phoebe broke into a bottle containing her mother's expensive perfume.", "Because Phoebe broke a bottle containing her mother's expensive perfume.", "Phoebe could not go out today because she broke a bottle containing her mother's expensive perfume.", "Phoebe's mother", "Phoebe's mother was angry.", "Phoebe's mother was angry.", "There is a smell of perfume in the apartment.", "The smell of perfume in the apartment is now too intense."]}, {"instance_id": "samsum-82", "summary": "Derek McCarthy will pick up an Android cable from Tommy's wife at 8:15.", "summary_trees": ["# ::snt Derek McCarthy will pick up an Android cable from Tommy's wife at 8:15.\n(p / pick-up-04\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Derek\"\n                  :op2 \"McCarthy\"))\n      :ARG1 (c / cable\n            :mod (p3 / product\n                  :name (n2 / name\n                        :op1 \"Android\")))\n      :ARG2 (p4 / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (p5 / person\n                        :name (n3 / name\n                              :op1 \"Tommy\"\n                              :op2 \"Robinson\"))\n                  :ARG2 (w / wife)))\n      :time (d / date-entity\n            :time \"8:15\"))"], "tree": ["(p / pick-up-04\n   :time (d / date-entity\n            :time \"8:15\"))", "(p / pick-up-04\n   :time (d / date-entity\n            :time \"8:15\"))", "(p / pick-up-04\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Derek\"\n                      :op2 \"McCarthy\"))\n   :ARG1 (c / cable\n            :mod (p3 / product\n                     :name (n2 / name\n                               :op1 \"Android\")))\n   :time (d / date-entity\n            :time \"8:15\"))"], "smus": ["Pick up at 8:15", "Pick up at 8:15", "@8:15, Derek McCarthy will pick up an Android cable."]}, {"instance_id": "samsum-83", "summary": "Abigail and Damien are going to church on Sunday. Damien has to put on a coat and tie.", "summary_trees": ["# ::snt Abigail and Damien are going to church on Sunday.\n(g / go-02\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Abigail\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Damien\")))\n      :ARG4 (c / church)\n      :time (d / date-entity\n            :weekday (s / sunday)))", "# ::snt Damien has to put on a coat and tie.\n(o / obligate-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Damien\"))\n      :ARG2 (p2 / put-on-08\n            :ARG0 p\n            :ARG1 (a / and\n                  :op1 (c / coat)\n                  :op2 (t / tie))))"], "tree": ["(g / go-02\n   :time (d / date-entity\n            :weekday (s / sunday)))", "(g / go-02\n   :time (d / date-entity\n            :weekday (s / sunday)))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Abigail\")))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Damien\")))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Abigail\"))\n   :ARG4 (c / church))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Damien\"))\n   :ARG4 (c / church)\n   :ARG4 c)", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Abigail\"))\n   :ARG4 (c / church)\n   :time (d / date-entity\n            :weekday (s / sunday)))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Abigail\"))\n   :ARG4 (c / church)\n   :time (d / date-entity\n            :weekday (s / sunday)))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Abigail\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Damien\"))))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Damien\"))\n   :ARG4 (c / church)\n   :ARG4 c\n   :time (d / date-entity\n            :weekday (s / sunday)))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Damien\"))\n   :ARG4 (c / church)\n   :ARG4 c\n   :time (d / date-entity\n            :weekday (s / sunday)))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Abigail\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Damien\")))\n   :ARG4 (c / church))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Abigail\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Damien\")))\n   :ARG4 (c / church)\n   :time (d / date-entity\n            :weekday (s / sunday)))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Abigail\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Damien\")))\n   :ARG4 (c / church)\n   :time (d / date-entity\n            :weekday (s / sunday)))", "(p2 / put-on-08\n    :ARG0 (p / person :name (n / name :op1 \"Damien\"))\n    :ARG1 (c / coat))", "(p2 / put-on-08\n    :ARG0 (p / person :name (n / name :op1 \"Damien\"))\n    :ARG1 (t / tie))", "(p2 / put-on-08\n    :ARG0 (p / person :name (n / name :op1 \"Damien\"))\n    :ARG1 (c / coat))", "(p2 / put-on-08\n    :ARG0 (p / person :name (n / name :op1 \"Damien\"))\n    :ARG1 (t / tie))", "(o / obligate-01\n   :ARG2 (p2 / put-on-08\n             :ARG0 (p / person :name (n / name :op1 \"Damien\"))\n             :ARG1 (c / coat)))", "(o / obligate-01\n   :ARG2 (p2 / put-on-08\n             :ARG0 (p / person :name (n / name :op1 \"Damien\"))\n             :ARG1 (t / tie)))", "(p2 / put-on-08\n    :ARG0 (p / person :name (n / name :op1 \"Damien\"))\n    :ARG1 (a / and\n             :op1 (c / coat)\n             :op2 (t / tie)))", "(p2 / put-on-08\n    :ARG0 (p / person :name (n / name :op1 \"Damien\"))\n    :ARG1 (a / and\n             :op1 (c / coat)\n             :op2 (t / tie)))", "(o / obligate-01\n   :ARG2 (p2 / put-on-08\n             :ARG0 (p / person :name (n / name :op1 \"Damien\"))\n             :ARG1 (a / and\n                      :op1 (c / coat)\n                      :op2 (t / tie))))", "(o / obligate-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Damien\"))\n   :ARG2 (p2 / put-on-08\n             :ARG0 p\n             :ARG1 (c / coat)))", "(o / obligate-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Damien\"))\n   :ARG2 (p2 / put-on-08\n             :ARG0 p\n             :ARG1 (t / tie)))", "(o / obligate-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Damien\"))\n   :ARG2 (p2 / put-on-08\n             :ARG0 p\n             :ARG1 (c / coat)))", "(o / obligate-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Damien\"))\n   :ARG2 (p2 / put-on-08\n             :ARG0 p\n             :ARG1 (t / tie)))", "(o / obligate-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Damien\"))\n   :ARG2 (p2 / put-on-08\n             :ARG0 p\n             :ARG1 (a / and\n                      :op1 (c / coat)\n                      :op2 (t / tie))))", "(o / obligate-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Damien\"))\n   :ARG2 (p2 / put-on-08\n             :ARG0 p\n             :ARG1 (a / and\n                      :op1 (c / coat)\n                      :op2 (t / tie))))"], "smus": ["Going on Sunday.", "Going on Sunday.", "Abigail is going.", "Damien is going.", "Abigail is going to church.", "Dimien is going to church.", "Abigail was going to church Sunday.", "Abigail was going to church Sunday.", "Abigail and Dimien are going.", "On Sunday, Dimien was going to church.", "On Sunday, Dimien was going to church.", "Abigail and Dimien are going to church.", "Abigail and Dimien were going to church Sunday.", "Abigail and Dimien were going to church Sunday.", "Damien put on a coat.", "Damien put on the tie.", "Damien put on a coat.", "Damien put on the tie.", "Damien had to put on a coat.", "Damien had to put on a tie.", "Damien put on a coat and tie.", "Damien put on a coat and tie.", "Damien had to put on a coat and tie.", "Damien had to put on a coat.", "Damien had to put on a tie.", "Damien had to put on a coat.", "Damien had to put on a tie.", "Damien had to put on a coat and tie.", "Damien had to put on a coat and tie."]}, {"instance_id": "samsum-84", "summary": "Jayden explains Brennan why she doesn't want to be pregnant.", "summary_trees": ["# ::snt Jayden explains Brennan why she doesn't want to be pregnant.\n(e / explain-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jayden\"))\n      :ARG1 (t / thing\n            :ARG0-of (c / cause-01\n                  :ARG1 (w / want-01\n                        :polarity -\n                        :ARG0 p\n                        :ARG1 (ii / impregnate-01\n                              :ARG1 p))))\n      :ARG2 (p2 / person\n            :name (n2 / name\n                  :op1 \"Brennan\")))"], "tree": ["(w / want-01\n   :polarity -\n   :ARG0 (p / person :name (n / name :op1 \"Jayden\"))\n   :ARG1 (ii / impregnate-01\n             :ARG1 p))", "(c / cause-01\n   :ARG1 (w / want-01\n            :polarity -\n            :ARG0 (p / person :name (n / name :op1 \"Jayden\"))\n            :ARG1 (ii / impregnate-01\n                      :ARG1 p)))", "(e / explain-01\n   :ARG1 (t / thing\n            :ARG0 (c / cause-01\n                     :ARG1 (w / want-01\n                              :polarity -\n                              :ARG0 (p / person :name (n / name :op1 \"Jayden\"))\n                              :ARG1 (ii / impregnate-01\n                                        :ARG1 p)))))", "(e / explain-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jayden\"))\n   :ARG1 (t / thing\n            :ARG0 (c / cause-01\n                     :ARG1 (w / want-01\n                              :polarity -\n                              :ARG0 p\n                              :ARG1 (ii / impregnate-01\n                                        :ARG1 p))))\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Brennan\")))"], "smus": ["Jayden didn't want to get pregnant.", "So Jayden doesn't want to get pregnant.", "Explains why Jayden didn't want to get pregnant.", "Jayden explains to Brennan why she doesn't want to get pregnant."]}, {"instance_id": "samsum-85", "summary": "Hayden must write her thesis in 1 month. She wonders what degree course would be the most beneficial for her. She's interested in African studies. Hayden claims she could be a flight attendant as she can swim and knows foreign languages.", "summary_trees": ["# ::snt Hayden must write her thesis in 1 month.\n(o / obligate-01\n      :ARG2 (w / write-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Hayden\"))\n            :ARG1 (t / thesis\n                  :poss p)\n            :time (a / after\n                  :op1 (n2 / now)\n                  :quant (t2 / temporal-quantity\n                        :quant 1\n                        :unit (m / month)))))", "# ::snt She wonders what degree course would be the most beneficial for her.\n(w / wonder-01\n      :ARG0 (s / she)\n      :ARG1 (d / degree\n            :degree-of (b / benefit-01\n                  :ARG0 (c / course)\n                  :ARG1 s\n                  :ARG2-of (h / have-degree-91\n                        :ARG1 c\n                        :ARG3 (m / most)))))", "# ::snt She's interested in African studies.\n(ii / interest-01\n      :ARG1 (s / she)\n      :ARG2 (s2 / study-01\n            :ARG1 (c / continent\n                  :name (n / name\n                        :op1 \"Africa\"))))", "# ::snt Hayden claims she could be a flight attendant as she can swim and knows foreign languages.\n(c / claim-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Hayden\"))\n      :ARG1 (p2 / possible-01\n            :ARG1 (p3 / person\n                  :ARG0-of (a / attend-02\n                        :ARG1 (f / fly-01))\n                  :domain p)\n            :ARG1-of (c2 / cause-01\n                  :ARG0 (a2 / and\n                        :op1 (c3 / capable-01\n                              :ARG1 p\n                              :ARG2 (s / swim-01\n                                    :ARG0 p))\n                        :op2 (k / know-03\n                              :ARG0 p\n                              :ARG1 (l / language\n                                    :mod (f2 / foreign)))))))"], "tree": ["(o / obligate-01\n   :ARG2 (w / write-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Hayden\"))\n            :ARG1 (t / thesis\n                     :poss p)\n            :time (a / after\n                     :op1 (n2 / now)\n                     :quant (t2 / temporal-quantity\n                                :quant 1\n                                :unit (m / month)))))", "(o / obligate-01\n   :ARG2 (w / write-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Hayden\"))\n            :ARG1 (t / thesis\n                     :poss p)\n            :time (a / after\n                     :op1 (n2 / now)\n                     :quant (t2 / temporal-quantity\n                                :quant 1\n                                :unit (m / month)))))", "(w / wonder-01\n   :ARG0 (s / she)\n   :ARG1 (d / degree))", "(w / wonder-01\n   :ARG0 (s / she)\n   :ARG1 (d / degree))", "(s2 / study-01\n    :ARG1 (c / continent\n             :name (n / name\n                      :op1 \"Africa\")))", "(ii / interest-01\n    :ARG2 (s2 / study-01\n              :ARG1 (c / continent\n                       :name (n / name\n                                :op1 \"Africa\"))))", "(ii / interest-01\n    :ARG1 (s / she)\n    :ARG2 (s2 / study-01\n              :ARG1 (c / continent\n                       :name (n / name\n                                :op1 \"Africa\"))))", "(ii / interest-01\n    :ARG1 (s / she)\n    :ARG2 (s2 / study-01\n              :ARG1 (c / continent\n                       :name (n / name\n                                :op1 \"Africa\"))))", "(c3 / capable-01\n    :ARG1 (p / person :name (n / name :op1 \"Hayden\"))\n    :ARG2 (s / swim-01\n             :ARG0 p))", "(k / know-03\n   :ARG0 (p / person :name (n / name :op1 \"Hayden\"))\n   :ARG1 (l / language\n            :mod (f2 / foreign)))", "(c2 / cause-01\n    :ARG0 (c3 / capable-01\n              :ARG1 (p / person :name (n / name :op1 \"Hayden\"))\n              :ARG2 (s / swim-01\n                       :ARG0 p)))", "(c2 / cause-01\n    :ARG0 (k / know-03\n             :ARG0 (p / person :name (n / name :op1 \"Hayden\"))\n             :ARG1 (l / language\n                      :mod (f2 / foreign))))", "(c2 / cause-01\n    :ARG0 (a2 / and\n              :op1 (c3 / capable-01\n                       :ARG1 (p / person :name (n / name :op1 \"Hayden\"))\n                       :ARG2 (s / swim-01\n                                :ARG0 p))\n              :op2 (k / know-03\n                      :ARG0 p\n                      :ARG1 (l / language\n                               :mod (f2 / foreign)))))"], "smus": ["Hayden will have to write his thesis in a month.", "Hayden will have to write his thesis in a month.", "She wonders the degree.", "She wonders the degree.", "African studies", "African studies are interesting.", "She is interested in African studies.", "She is interested in African studies.", "Hayden is able to swim.", "Hayden knows foreign languages.", "Because Hayden is able to swim.", "Because Hayden knows foreign languages.", "Because Hayden is able to swim and knows foreign languages."]}, {"instance_id": "samsum-86", "summary": "Mia is going out after work tonight with her female friends. If she wants, Elliot will come and pick her up.", "summary_trees": ["# ::snt Mia is going out after work tonight with her female friends.\n(g / go-out-34\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Mia\"))\n      :accompanier (p2 / person\n            :mod (f / female)\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 p\n                  :ARG2 (f2 / friend)))\n      :time (d / date-entity\n            :dayperiod (n2 / night)\n            :mod (t / today))\n      :time (a / after\n            :op1 (w / work-01\n                  :ARG0 p)))", "# ::snt If she wants, Elliot will come and pick her up.\n(a / and\n      :op1 (c / come-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Elliot\")))\n      :op2 (p2 / pick-up-04\n            :ARG0 p\n            :ARG1 (s / she))\n      :condition (w / want-01\n            :ARG0 s\n            :ARG1 a))"], "tree": ["(g / go-out-34\n   :accompanier (p2 / person\n                    :mod (f / female))\n   :time (d / date-entity\n            :dayperiod (n2 / night)\n            :mod (t / today))\n   :time (a / after\n            :op1 (w / work-01)))", "(g / go-out-34\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mia\"))\n   :accompanier (p2 / person\n                    :mod (f / female)\n                    :ARG0 (h / have-rel-role-91\n                             :ARG1 p\n                             :ARG2 (f2 / friend)))\n   :time (d / date-entity\n            :dayperiod (n2 / night)\n            :mod (t / today))\n   :time (a / after\n            :op1 (w / work-01\n                    :ARG0 p)))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Elliot\")))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Elliot\")))"], "smus": ["Go out tonight with a female after work.", "Mia went out tonight with her female friends after work.", "Come Elliot.", "Come Elliot."]}, {"instance_id": "samsum-87", "summary": "Tina will make it for the bus that is leaving in 3 minutes.", "summary_trees": ["# ::snt Tina will make it for the bus that is leaving in 3 minutes.\n(m / make-it-14\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Tina\"))\n      :ARG1 (b / bus\n            :ARG0-of (l / leave-11\n                  :time (a / after\n                        :op1 (n2 / now)\n                        :quant (t / temporal-quantity\n                              :quant 3\n                              :unit (m2 / minute))))))"], "tree": ["(l / leave-11\n   :time (a / after\n            :op1 (n2 / now)\n            :quant (t / temporal-quantity\n                      :quant 3\n                      :unit (m2 / minute))))", "(l / leave-11\n   :time (a / after\n            :op1 (n2 / now)\n            :quant (t / temporal-quantity\n                      :quant 3\n                      :unit (m2 / minute))))", "(m / make-it-14\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tina\"))\n   :ARG1 (b / bus\n            :ARG0 (l / leave-11\n                     :time (a / after\n                              :op1 (n2 / now)\n                              :quant (t / temporal-quantity\n                                        :quant 3\n                                        :unit (m2 / minute))))))", "(m / make-it-14\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tina\"))\n   :ARG1 (b / bus\n            :ARG0 (l / leave-11\n                     :time (a / after\n                              :op1 (n2 / now)\n                              :quant (t / temporal-quantity\n                                        :quant 3\n                                        :unit (m2 / minute))))))"], "smus": ["leaving in 3 minutes.", "leaving in 3 minutes.", "Tina will make it to the bus leaving in 3 minutes.", "Tina will make it to the bus leaving in 3 minutes."]}, {"instance_id": "samsum-88", "summary": "Stan is meeting the girl of his dreams today in Pat&Gill's. Later he's going to tell Dave how his date went.", "summary_trees": ["# ::snt Stan is meeting the girl of his dreams today in Pat&Gill's.\n(m / meet-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Stan\"))\n      :ARG1 (g / girl\n            :ARG1-of (d / dream-01\n                  :ARG0 p))\n      :time (t / today)\n      :location (c / company\n            :name (n2 / name\n                  :op1 \"Pat\"\n                  :op2 \"&\"\n                  :op3 \"Gill's\")))", "# ::snt Later he's going to tell Dave how his date went.\n(t / tell-01\n      :ARG0 (h / he)\n      :ARG1 (t2 / thing\n            :manner-of (g / go-on-15\n                  :ARG1 (d / date-02\n                        :ARG0 h)))\n      :ARG2 (p / person\n            :name (n / name\n                  :op1 \"Dave\"))\n      :time (a / after))"], "tree": ["(m / meet-02\n   :location (c / company\n                :name (n2 / name\n                          :op1 \"Pat\"\n                          :op2 \"&\"\n                          :op3 \"Gill's\")))", "(m / meet-02\n   :time (t / today)\n   :location (c / company\n                :name (n2 / name\n                          :op1 \"Pat\"\n                          :op2 \"&\"\n                          :op3 \"Gill's\")))", "(m / meet-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Stan\"))\n   :ARG1 (g / girl\n            :ARG1 (d / dream-01\n                     :ARG0 p)))", "(m / meet-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Stan\"))\n   :ARG1 (g / girl\n            :ARG1 (d / dream-01\n                     :ARG0 p))\n   :time (t / today))", "(m / meet-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Stan\"))\n   :ARG1 (g / girl\n            :ARG1 (d / dream-01\n                     :ARG0 p))\n   :location (c / company\n                :name (n2 / name\n                          :op1 \"Pat\"\n                          :op2 \"&\"\n                          :op3 \"Gill's\")))", "(m / meet-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Stan\"))\n   :ARG1 (g / girl\n            :ARG1 (d / dream-01\n                     :ARG0 p))\n   :time (t / today)\n   :location (c / company\n                :name (n2 / name\n                          :op1 \"Pat\"\n                          :op2 \"&\"\n                          :op3 \"Gill's\")))", "(g / go-on-15\n   :ARG1 (d / date-02\n            :ARG0 (h / he)))", "(g / go-on-15\n   :ARG1 (d / date-02\n            :ARG0 (h / he)))", "(t / tell-01\n   :ARG0 (h / he)\n   :ARG1 (t2 / thing\n             :manner (g / go-on-15\n                        :ARG1 (d / date-02\n                                 :ARG0 h))))", "(t / tell-01\n   :ARG0 (h / he)\n   :ARG1 (t2 / thing\n             :manner (g / go-on-15\n                        :ARG1 (d / date-02\n                                 :ARG0 h)))\n   :ARG2 (p / person\n            :name (n / name\n                     :op1 \"Dave\")))", "(t / tell-01\n   :ARG0 (h / he)\n   :ARG1 (t2 / thing\n             :manner (g / go-on-15\n                        :ARG1 (d / date-02\n                                 :ARG0 h)))\n   :ARG2 (p / person\n            :name (n / name\n                     :op1 \"Dave\"))\n   :time (a / after))"], "smus": ["Meeting at Pat & Gill's.", "Meeting today at Pat & Gill's.", "Stan met a girl with dreams.", "Today, Stan is meeting a girl with his dreams.", "Stan met a girl with his dreams at Pat & Gill's.", "Stan met a girl with his dreams today at Pat & Gill's.", "His date went on.", "His date went on.", "He'll tell how his date went on.", "He'll tell Dave how his date went.", "He'll tell Dave later how his date went."]}, {"instance_id": "samsum-89", "summary": "Madeline is in conflict with Martin and Jada. Alex and Madeline will go for a beer tomorrow. Madeline will explain her issues with Martin and Jada to Alex.", "summary_trees": ["# ::snt Madeline is in conflict with Martin and Jada.\n(c / conflict-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Madeline\"))\n      :ARG1 (a / and\n            :op1 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Martin\"))\n            :op2 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Jada\"))))", "# ::snt Alex and Madeline will go for a beer tomorrow.\n(g / go-02\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Alex\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Madeline\")))\n      :ARG4 (b / beer)\n      :time (t / tomorrow))", "# ::snt Madeline will explain her issues with Martin and Jada to Alex.\n(e / explain-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Madeline\"))\n      :ARG1 (ii / issue-02\n            :ARG0 (a / and\n                  :op1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Martin\"))\n                  :op2 (p3 / person\n                        :name (n3 / name\n                              :op1 \"Jada\")))\n            :ARG1 p)\n      :ARG2 (p4 / person\n            :name (n4 / name\n                  :op1 \"Alex\")))"], "tree": ["(c / conflict-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Madeline\")))", "(c / conflict-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Martin\")))", "(c / conflict-01\n   :ARG1 (p3 / person\n             :name (n3 / name\n                       :op1 \"Jada\")))", "(c / conflict-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Madeline\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Martin\")))", "(c / conflict-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Madeline\"))\n   :ARG1 (p3 / person\n             :name (n3 / name\n                       :op1 \"Jada\")))", "(c / conflict-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Madeline\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Martin\")))", "(c / conflict-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Madeline\"))\n   :ARG1 (p3 / person\n             :name (n3 / name\n                       :op1 \"Jada\")))", "(c / conflict-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Madeline\"))\n   :ARG1 (a / and\n            :op1 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Martin\"))\n            :op2 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Jada\"))))", "(c / conflict-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Madeline\"))\n   :ARG1 (a / and\n            :op1 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Martin\"))\n            :op2 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Jada\"))))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Alex\")))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Madeline\")))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Alex\"))\n   :ARG4 (b / beer))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Madeline\"))\n   :ARG4 (b / beer)\n   :ARG4 b)", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Alex\"))\n   :ARG4 (b / beer)\n   :time (t / tomorrow))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Alex\"))\n   :ARG4 (b / beer)\n   :time (t / tomorrow))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Madeline\"))\n   :ARG4 (b / beer)\n   :ARG4 b\n   :time (t / tomorrow))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Madeline\"))\n   :ARG4 (b / beer)\n   :ARG4 b\n   :time (t / tomorrow))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Alex\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Madeline\"))))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Alex\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Madeline\")))\n   :ARG4 (b / beer))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Alex\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Madeline\")))\n   :ARG4 (b / beer)\n   :time (t / tomorrow))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Alex\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Madeline\")))\n   :ARG4 (b / beer)\n   :time (t / tomorrow))", "(ii / issue-02\n    :ARG0 (p2 / person\n              :name (n2 / name\n                        :op1 \"Martin\")))", "(ii / issue-02\n    :ARG0 (p2 / person\n              :name (n2 / name\n                        :op1 \"Martin\")))", "(ii / issue-02\n    :ARG0 (p2 / person\n              :name (n2 / name\n                        :op1 \"Martin\")))", "(e / explain-01\n   :ARG1 (ii / issue-02\n             :ARG0 (p2 / person\n                       :name (n2 / name\n                                 :op1 \"Martin\"))))", "(ii / issue-02\n    :ARG0 (a / and\n             :op1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Martin\"))\n             :op2 (p3 / person\n                      :name (n3 / name\n                                :op1 \"Jada\"))))", "(e / explain-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Madeline\"))\n   :ARG1 (ii / issue-02\n             :ARG0 (p2 / person\n                       :name (n2 / name\n                                 :op1 \"Martin\"))))", "(ii / issue-02\n    :ARG0 (a / and\n             :op1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Martin\"))\n             :op2 (p3 / person\n                      :name (n3 / name\n                                :op1 \"Jada\")))\n    :ARG1 (p / person :name (n / name :op1 \"Madeline\")))", "(ii / issue-02\n    :ARG0 (a / and\n             :op1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Martin\"))\n             :op2 (p3 / person\n                      :name (n3 / name\n                                :op1 \"Jada\")))\n    :ARG1 (p / person :name (n / name :op1 \"Madeline\")))", "(e / explain-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Madeline\"))\n   :ARG1 (ii / issue-02\n             :ARG0 (p3 / person\n                       :name (n3 / name\n                                 :op1 \"Jada\"))\n             :ARG1 p))", "(e / explain-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Madeline\"))\n   :ARG1 (ii / issue-02\n             :ARG0 (p2 / person\n                       :name (n2 / name\n                                 :op1 \"Martin\"))\n             :ARG1 p)\n   :ARG2 (p4 / person\n             :name (n4 / name\n                       :op1 \"Alex\")))", "(e / explain-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Madeline\"))\n   :ARG1 (ii / issue-02\n             :ARG0 (p3 / person\n                       :name (n3 / name\n                                 :op1 \"Jada\"))\n             :ARG1 p\n             :ARG1 p)\n   :ARG2 (p4 / person\n             :name (n4 / name\n                       :op1 \"Alex\")))", "(e / explain-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Madeline\"))\n   :ARG1 (ii / issue-02\n             :ARG0 (a / and\n                      :op1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Martin\"))\n                      :op2 (p3 / person\n                               :name (n3 / name\n                                         :op1 \"Jada\")))\n             :ARG1 p))", "(e / explain-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Madeline\"))\n   :ARG1 (ii / issue-02\n             :ARG0 (a / and\n                      :op1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Martin\"))\n                      :op2 (p3 / person\n                               :name (n3 / name\n                                         :op1 \"Jada\")))\n             :ARG1 p)\n   :ARG2 (p4 / person\n             :name (n4 / name\n                       :op1 \"Alex\")))"], "smus": ["Madeline, there is a conflict.", "There was a conflict with Martin.", "Jada is in conflict.", "Madeline and Martin are in conflict.", "Madeline and Jada are in conflict.", "Madeline and Martin are in conflict.", "Madeline and Jada are in conflict.", "Madeline and Martin and Jada are in conflict.", "Madeline and Martin and Jada are in conflict.", "Alex, go.", "Madeline, go.", "Alex, go for a beer.", "Madeline, go for a beer.", "Alex will go for a beer tomorrow.", "Alex will go for a beer tomorrow.", "Madeline will go for a beer tomorrow.", "Madeline will go for a beer tomorrow.", "Alex and Madeline will go.", "Alex and Madeline go for a beer.", "Alex and Madeline will go for a beer tomorrow.", "Alex and Madeline will go for a beer tomorrow.", "Martin has issues.", "Martin has issues.", "Martin has issues.", "Explain Martin's issues.", "The issues are Martin and Jada.", "Madeline will explain Martin's issues.", "Madeline has issues with Martin and Jada.", "Madeline has issues with Martin and Jada.", "Madeline, explain Jada's issues.", "Madeline will explain to Alex Martin's issues.", "Madeline, explain to Alex Jada's issues.", "Madeline will explain her issues with Martin and Jada.", "Madeline will explain to Alex the issues of Martin and Jada."]}, {"instance_id": "samsum-90", "summary": "Daina needs about an hour more to get ready.", "summary_trees": ["# ::snt Daina needs about an hour more to get ready.\n(n / need-01\n      :ARG0 (p / person\n            :name (n2 / name\n                  :op1 \"Daina\"))\n      :ARG1 (a / about\n            :op1 (t / temporal-quantity\n                  :quant 1\n                  :unit (h / hour)\n                  :mod (m / more)))\n      :purpose (r / ready-02\n            :ARG0 p))"], "tree": ["(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Daina\")))", "(n / need-01\n   :ARG1 (a / about\n            :op1 (t / temporal-quantity\n                    :quant 1\n                    :unit (h / hour)\n                    :mod (m / more))))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Daina\"))\n   :ARG1 (a / about\n            :op1 (t / temporal-quantity\n                    :quant 1\n                    :unit (h / hour)\n                    :mod (m / more))))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Daina\"))\n   :ARG1 (a / about\n            :op1 (t / temporal-quantity\n                    :quant 1\n                    :unit (h / hour)\n                    :mod (m / more)))\n   :purpose (r / ready-02\n               :ARG0 p))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Daina\"))\n   :ARG1 (a / about\n            :op1 (t / temporal-quantity\n                    :quant 1\n                    :unit (h / hour)\n                    :mod (m / more)))\n   :purpose (r / ready-02\n               :ARG0 p))"], "smus": ["Daina needs.", "Needs about an hour more.", "Daina needs about an hour more.", "Daina needs about an hour more to get ready.", "Daina needs about an hour more to get ready."]}, {"instance_id": "samsum-91", "summary": "Stella doesn't want to visit Sandra because she doesn't want to get infected by Sandra's disease. Sandra's doctor prescribed her effective medicines, so she will be fine soon. Stella wants to take Sandra to the cinema for some action movie when she recovers.", "summary_trees": ["# ::snt Stella doesn't want to visit Sandra because she doesn't want to get infected by Sandra's disease.\n(w / want-01\n      :polarity -\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Stella\"))\n      :ARG1 (v / visit-01\n            :ARG0 p\n            :ARG1 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Sandra\")))\n      :ARG1-of (c / cause-01\n            :ARG0 (w2 / want-01\n                  :polarity -\n                  :ARG0 p\n                  :ARG1 (ii / infect-01\n                        :ARG0 (d / disease\n                              :poss p2)\n                        :ARG1 p))))", "# ::snt Sandra's doctor prescribed her effective medicines, so she will be fine soon.\n(p / prescribe-02\n      :ARG0 (p2 / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (p3 / person\n                        :name (n / name\n                              :op1 \"Sandra\"))\n                  :ARG2 (d / doctor)))\n      :ARG1 (m / medicine\n            :ARG0-of (e / effective-04)\n            :poss p3)\n      :ARG0-of (c / cause-01\n            :ARG1 (f / fine-04\n                  :ARG1 p3\n                  :time (s / soon))))", "# ::snt Stella wants to take Sandra to the cinema for some action movie when she recovers.\n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Stella\"))\n      :ARG1 (t / take-01\n            :ARG0 p\n            :ARG1 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Sandra\"))\n            :ARG3 (c / cinema)\n            :purpose (m / movie\n                  :mod (a / action)\n                  :mod (s / some)))\n      :time (r / recover-01\n            :ARG1 p2))"], "tree": ["(w2 / want-01\n    :polarity -\n    :ARG0 (p / person :name (n / name :op1 \"Stella\"))\n    :ARG1 (ii / infect-01\n              :ARG0 (d / disease\n                       :poss (p2 / person :name (n2 / name :op1 \"Sandra\")))\n              :ARG1 p))", "(c / cause-01\n   :ARG0 (w2 / want-01\n             :polarity -\n             :ARG0 (p / person :name (n / name :op1 \"Stella\"))\n             :ARG1 (ii / infect-01\n                       :ARG0 (d / disease\n                                :poss (p2 / person :name (n2 / name :op1 \"Sandra\")))\n                       :ARG1 p)))", "(w / want-01\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Stella\"))\n   :ARG1 (v / visit-01\n            :ARG0 p\n            :ARG1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Sandra\")))\n   :ARG1 (c / cause-01\n            :ARG0 (w2 / want-01\n                      :polarity -\n                      :ARG0 p\n                      :ARG1 (ii / infect-01\n                                :ARG0 (d / disease\n                                         :poss p2)\n                                :ARG1 p))))", "(f / fine-04\n   :ARG1 (p3 / person :name (n / name :op1 \"Sandra\"))\n   :time (s / soon))", "(c / cause-01\n   :ARG1 (f / fine-04\n            :ARG1 (p3 / person :name (n / name :op1 \"Sandra\"))\n            :time (s / soon)))", "(p / prescribe-02\n   :ARG1 (m / medicine\n            :ARG0 (e / effective-04)\n            :poss (p3 / person :name (n / name :op1 \"Sandra\"))))", "(p / prescribe-02\n   :ARG0 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 (p3 / person\n                                :name (n / name\n                                         :op1 \"Sandra\"))\n                      :ARG2 (d / doctor)))\n   :ARG1 (m / medicine\n            :ARG0 (e / effective-04)\n            :poss p3))", "(p / prescribe-02\n   :ARG0 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 (p3 / person\n                                :name (n / name\n                                         :op1 \"Sandra\"))\n                      :ARG2 (d / doctor)))\n   :ARG1 (m / medicine\n            :ARG0 (e / effective-04)\n            :poss p3)\n   :ARG0 (c / cause-01\n            :ARG1 (f / fine-04\n                     :ARG1 p3\n                     :time (s / soon))))", "(t / take-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Sandra\")))", "(t / take-01\n   :ARG0 (p / person :name (n / name :op1 \"Stella\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Sandra\")))", "(t / take-01\n   :purpose (m / movie\n               :mod (a / action)\n               :mod (s / some)))", "(t / take-01\n   :purpose (m / movie\n               :mod (a / action)\n               :mod (s / some)))", "(t / take-01\n   :ARG0 (p / person :name (n / name :op1 \"Stella\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Sandra\"))\n   :purpose (m / movie\n               :mod (a / action)\n               :mod (s / some)))", "(t / take-01\n   :ARG0 (p / person :name (n / name :op1 \"Stella\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Sandra\"))\n   :ARG3 (c / cinema)\n   :purpose (m / movie\n               :mod (a / action)\n               :mod (s / some)))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Stella\"))\n   :ARG1 (t / take-01\n            :ARG0 p\n            :ARG1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Sandra\"))\n            :ARG3 (c / cinema)\n            :purpose (m / movie\n                        :mod (a / action)\n                        :mod (s / some))))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Stella\"))\n   :ARG1 (t / take-01\n            :ARG0 p\n            :ARG1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Sandra\"))\n            :ARG3 (c / cinema)\n            :purpose (m / movie\n                        :mod (a / action)\n                        :mod (s / some)))\n   :time (r / recover-01\n            :ARG1 p2))"], "smus": ["Stella didn't want to be infected with Sandra's disease.", "Because Stella didn't want to be infected with Sandra's disease.", "Stella didn't want to visit Sandra because she didn't want to be infected by her disease.", "Sandra will be fine soon.", "So, Sandra will be fine soon.", "Sandra's effective medicines were prescribed.", "Sandra's doctor prescribed her effective medicines.", "Sandra's doctor prescribed her effective medicines so she would be fine soon.", "Take Sandra.", "Stella, take Sandra.", "Take for some action movie.", "Take for some action movie.", "Stella will take Sandra for some action movie.", "Stella will take Sandra to the cinema for some action movie.", "Stella wants to take Sandra to the cinema for some action movie.", "Stella wants to take Sandra to the cinema for some action movie when she recovers."]}, {"instance_id": "samsum-92", "summary": "Kaylen wants to know if there is left-hand traffic in Rowen's country. He confirms there is. She thinks she wouldn't be able to drive there.", "summary_trees": ["# ::snt Kaylen wants to know if there is left-hand traffic in Rowen's country.\n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Kaylen\"))\n      :ARG1 (k / know-01\n            :ARG0 p\n            :ARG1 (t / truth-value\n                  :polarity-of (t2 / traffic\n                        :mod (l / left-hand)\n                        :location (c / country\n                              :poss (p2 / person\n                                    :name (n2 / name\n                                          :op1 \"Rowen\")))))))", "# ::snt He confirms there is.\n(c / confirm-01\n      :ARG0 (h / he)\n      :ARG1 (e / event))", "# ::snt She thinks she wouldn't be able to drive there.\n(t / think-01\n      :ARG0 (s / she)\n      :ARG1 (p / possible-01\n            :polarity -\n            :ARG1 (d / drive-01\n                  :ARG0 s\n                  :location (t2 / there))))"], "tree": ["(k / know-01\n   :ARG1 (t / truth-value\n            :polarity (t2 / traffic\n                          :mod (l / left-hand)\n                          :location (c / country\n                                       :poss (p2 / person\n                                                 :name (n2 / name\n                                                           :op1 \"Rowen\"))))))", "(k / know-01\n   :ARG0 (p / person :name (n / name :op1 \"Kaylen\"))\n   :ARG1 (t / truth-value\n            :polarity (t2 / traffic\n                          :mod (l / left-hand)\n                          :location (c / country\n                                       :poss (p2 / person\n                                                 :name (n2 / name\n                                                           :op1 \"Rowen\"))))))", "(k / know-01\n   :ARG0 (p / person :name (n / name :op1 \"Kaylen\"))\n   :ARG1 (t / truth-value\n            :polarity (t2 / traffic\n                          :mod (l / left-hand)\n                          :location (c / country\n                                       :poss (p2 / person\n                                                 :name (n2 / name\n                                                           :op1 \"Rowen\"))))))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kaylen\"))\n   :ARG1 (k / know-01\n            :ARG0 p\n            :ARG1 (t / truth-value\n                     :polarity (t2 / traffic\n                                   :mod (l / left-hand)\n                                   :location (c / country\n                                                :poss (p2 / person\n                                                          :name (n2 / name\n                                                                    :op1 \"Rowen\")))))))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kaylen\"))\n   :ARG1 (k / know-01\n            :ARG0 p\n            :ARG1 (t / truth-value\n                     :polarity (t2 / traffic\n                                   :mod (l / left-hand)\n                                   :location (c / country\n                                                :poss (p2 / person\n                                                          :name (n2 / name\n                                                                    :op1 \"Rowen\")))))))", "(c / confirm-01\n   :ARG0 (h / he)\n   :ARG1 (e / event))", "(c / confirm-01\n   :ARG0 (h / he)\n   :ARG1 (e / event))", "(t / think-01\n   :ARG0 (s / she)\n   :ARG1 (p / possible-01\n            :polarity -\n            :ARG1 (d / drive-01\n                     :ARG0 s\n                     :location (t2 / there))))", "(t / think-01\n   :ARG0 (s / she)\n   :ARG1 (p / possible-01\n            :polarity -\n            :ARG1 (d / drive-01\n                     :ARG0 s\n                     :location (t2 / there))))"], "smus": ["Do not know if Rowen's country is left handed traffic.", "Kaylen didn't know if Rowen's country was left handed traffic.", "Kaylen didn't know if Rowen's country was left handed traffic.", "Kaylen wants to know if Rowen's country is left handed traffic.", "Kaylen wants to know if Rowen's country is left handed traffic.", "He confirms it.", "He confirms it.", "She thinks she can't drive there.", "She thinks she can't drive there."]}, {"instance_id": "samsum-93", "summary": "Sophia apologizes to Mason. She sends him a kiss photo on his request.", "summary_trees": ["# ::snt Sophia apologizes to Mason.\n(a / apologize-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Sophia\"))\n      :ARG2 (p2 / person\n            :name (n2 / name\n                  :op1 \"Mason\")))", "# ::snt She sends him a kiss photo on his request.\n(s / send-01\n      :ARG0 (s2 / she)\n      :ARG1 (p / photo\n            :mod (k / kiss-01))\n      :ARG2 (h / he)\n      :ARG1-of (r / request-01\n            :ARG0 h))"], "tree": ["(a / apologize-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sophia\"))\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Mason\")))", "(a / apologize-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sophia\"))\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Mason\")))", "(s / send-01\n   :ARG1 (p / photo\n            :mod (k / kiss-01))\n   :ARG2 (h / he))", "(s / send-01\n   :ARG0 (s2 / she)\n   :ARG1 (p / photo\n            :mod (k / kiss-01)))", "(s / send-01\n   :ARG0 (s2 / she)\n   :ARG1 (p / photo\n            :mod (k / kiss-01))\n   :ARG2 (h / he))", "(s / send-01\n   :ARG0 (s2 / she)\n   :ARG1 (p / photo\n            :mod (k / kiss-01))\n   :ARG2 (h / he)\n   :ARG1 (r / request-01\n            :ARG0 h))"], "smus": ["Sophie apologizes to Mason.", "Sophie apologizes to Mason.", "Sends him a kiss photo.", "She sends a kiss photo.", "She sends him a kiss photo.", "She sends him a kiss photo."]}, {"instance_id": "samsum-94", "summary": "Lily spent an amazing night with Thomas. Thomas is Romanian and comes from a very rich family.", "summary_trees": ["# ::snt Lily spent an amazing night with Thomas.\n(s / spend-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Lily\"))\n      :ARG1 (n2 / night\n            :ARG0-of (a / amaze-01))\n      :ARG2 (p2 / person\n            :name (n3 / name\n                  :op1 \"Thomas\")))", "# ::snt Thomas is Romanian and comes from a very rich family.\n(a / and\n      :op1 (p / person\n            :name (n / name\n                  :op1 \"Thomas\")\n            :mod (c / country\n                  :name (n2 / name\n                        :op1 \"Romania\")))\n      :op2 (c2 / come-03\n            :ARG1 p\n            :ARG2 (f / family\n                  :mod (r / rich\n                        :degree (v / very)))))"], "tree": ["(s / spend-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lily\"))\n   :ARG1 (n2 / night\n             :ARG0 (a / amaze-01))\n   :ARG2 (p2 / person\n             :name (n3 / name\n                       :op1 \"Thomas\")))", "(s / spend-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lily\"))\n   :ARG1 (n2 / night\n             :ARG0 (a / amaze-01))\n   :ARG2 (p2 / person\n             :name (n3 / name\n                       :op1 \"Thomas\")))", "(c2 / come-03\n    :ARG1 (p / person :name (n / name :op1 \"Thomas\")))\n    :ARG2 (f / family\n             :mod (r / rich\n                     :degree (v / very))))", "(c2 / come-03\n    :ARG1 (p / person :name (n / name :op1 \"Thomas\")))\n    :ARG2 (f / family\n             :mod (r / rich\n                     :degree (v / very))))"], "smus": ["Lily spent an amazing night with Thomas.", "Lily spent an amazing night with Thomas.", "Thomas comes from a very rich family.", "Thomas comes from a very rich family."]}, {"instance_id": "samsum-95", "summary": "Anna will go with Fiona to a doctor tomorrow at 8 a.m.", "summary_trees": ["# ::snt Anna will go with Fiona to a doctor tomorrow at 8 a.m.\n(a / accompany-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Anna\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Fiona\"))\n      :ARG4 (d / doctor)\n      :time (t / tomorrow\n            :time \"8:00\"))"], "tree": ["(a / accompany-01\n   :time (t / tomorrow\n            :time \"8:00\"))", "(a / accompany-01\n   :time (t / tomorrow\n            :time \"8:00\"))", "(a / accompany-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Anna\")))", "(a / accompany-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Anna\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Fiona\")))", "(a / accompany-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Anna\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Fiona\"))\n   :time (t / tomorrow\n            :time \"8:00\"))", "(a / accompany-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Anna\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Fiona\"))\n   :ARG4 (d / doctor)\n   :time (t / tomorrow\n            :time \"8:00\"))"], "smus": ["Begun tomorrow at 8 a.m.", "Begun tomorrow at 8 a.m.", "Anna with her.", "Anna and Fiona were with them.", "Tomorrow at 8 o'clock, Anna will be with Fiona.", "Anna will be with Fiona at the doctor at 8 am tomorrow."]}, {"instance_id": "samsum-96", "summary": "Trevor got Abigail pregnant. When they were having sex without protection her father, a church pastor, kicked Trevor in the butt and Trevor came inside Abigail. ", "summary_trees": ["# ::snt Trevor got Abigail pregnant.\n(ii / impregnate-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Trevor\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Abigail\")))", "# ::snt When they were having sex without protection her father, a church pastor, kicked Trevor in the butt and Trevor came inside Abigail.\n(a / and\n      :op1 (k / kick-01\n            :ARG0 (p / person\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 (p2 / person\n                              :name (n / name\n                                    :op1 \"Abigail\"))\n                        :ARG2 (f / father))\n                  :ARG0-of (h2 / have-org-role-91\n                        :ARG1 (c / church)\n                        :ARG2 (p3 / pastor)))\n            :ARG1 (p4 / person\n                  :name (n2 / name\n                        :op1 \"Trevor\")\n                  :part (b / butt))\n            :location b)\n      :op2 (c2 / come-01\n            :ARG1 p4\n            :ARG4 (ii / inside\n                  :op1 p2))\n      :time (s / sex-01\n            :ARG0 (t / they)\n            :manner (p5 / protect-01\n                  :polarity -\n                  :ARG1 t)))"], "tree": ["(ii / impregnate-01\n    :ARG1 (p2 / person\n              :name (n2 / name\n                        :op1 \"Abigail\")))", "(s / sex-01\n   :manner (p5 / protect-01\n               :polarity -))", "(c2 / come-01\n    :ARG1 (p4 / person :name (n2 / name :op1 \"Trevor\")))\n    :ARG4 (ii / inside\n              :op1 (p2 / person :name (n / name :op1 \"Abigail\"))))", "(h2 / have-org-role-91\n    :ARG1 (c / church)\n    :ARG2 (p3 / pastor))", "(c2 / come-01\n    :ARG1 (p4 / person :name (n2 / name :op1 \"Trevor\")))\n    :ARG4 (ii / inside\n              :op1 (p2 / person :name (n / name :op1 \"Abigail\"))))", "(s / sex-01\n   :ARG0 (t / they)\n   :manner (p5 / protect-01\n               :polarity -\n               :ARG1 t))", "(k / kick-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :name (n / name\n                                        :op1 \"Abigail\"))\n                     :ARG2 (f / father))\n            :ARG0 (h2 / have-org-role-91\n                      :ARG1 (c / church)\n                      :ARG2 (p3 / pastor)))\n   :ARG1 (p4 / person\n             :name (n2 / name\n                       :op1 \"Trevor\")\n             :part (b / butt)))", "(k / kick-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :name (n / name\n                                        :op1 \"Abigail\"))\n                     :ARG2 (f / father))\n            :ARG0 (h2 / have-org-role-91\n                      :ARG1 (c / church)\n                      :ARG2 (p3 / pastor)))\n   :ARG1 (p4 / person\n             :name (n2 / name\n                       :op1 \"Trevor\")\n             :part (b / butt\n                      :location-of k)))"], "smus": ["Abigail is pregnant.", "sex without protection.", "Trevor came inside of Abigail.", "The church pastor.", "Trevor came inside of Abigail.", "They have sex without protection.", "Abigail's father kicked Trevor in the butt as the church pastor.", "Abigail's father kicked Trevor in the butt, the pastor of the church."]}, {"instance_id": "samsum-97", "summary": "Danna has a boring weekend and is watching TV. Reed is in bed. He has a free day tomorrow.", "summary_trees": ["# ::snt Danna has a boring weekend and is watching TV.\n(a / and\n      :op1 (h / have-03\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Danna\"))\n            :ARG1 (w / weekend\n                  :ARG0-of (b / bore-02)))\n      :op2 (w2 / watch-01\n            :ARG0 p\n            :ARG1 (t / television)))", "# ::snt Reed is in bed.\n(l / lie-07\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Reed\"))\n      :ARG2 (b / bed))", "# ::snt He has a free day tomorrow.\n(h / have-03\n      :ARG0 (h2 / he)\n      :ARG1 (d / day\n            :ARG1-of (f / free-04))\n      :time (t / tomorrow))"], "tree": ["(w2 / watch-01\n    :ARG0 (p / person :name (n / name :op1 \"Danna\"))\n    :ARG1 (t / television))", "(w2 / watch-01\n    :ARG0 (p / person :name (n / name :op1 \"Danna\"))\n    :ARG1 (t / television))", "(h / have-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Danna\"))\n   :ARG1 (w / weekend\n            :ARG0 (b / bore-02)))", "(h / have-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Danna\"))\n   :ARG1 (w / weekend\n            :ARG0 (b / bore-02)))", "(h / have-03\n   :ARG0 (h2 / he)\n   :ARG1 (d / day\n            :ARG1 (f / free-04)))", "(h / have-03\n   :ARG0 (h2 / he)\n   :ARG1 (d / day\n            :ARG1 (f / free-04))\n   :time (t / tomorrow))", "(h / have-03\n   :ARG0 (h2 / he)\n   :ARG1 (d / day\n            :ARG1 (f / free-04))\n   :time (t / tomorrow))"], "smus": ["Danna was watching TV.", "Danna was watching TV.", "Danna has a bore weekend.", "Danna has a bore weekend.", "He has a day of freedom.", "He has a free day tomorrow.", "He has a free day tomorrow."]}, {"instance_id": "samsum-98", "summary": "The CSS tests for the hockey players are today and will last 3 hours, starting 5pm. Hank will bring his son and Don's son as well. Don is glad.", "summary_trees": ["# ::snt The CSS tests for the hockey players are today and will last 3 hours, starting 5pm.\n(a / and\n      :op1 (t / test-01\n            :ARG1 (t2 / thing\n                  :name (n / name\n                        :op1 \"CSS\"))\n            :ARG2 (p / person\n                  :ARG0-of (p2 / play-01\n                        :ARG1 (h / hockey)))\n            :time (t3 / today))\n      :op2 (l / last-01\n            :ARG1 t\n            :ARG2 (t4 / temporal-quantity\n                  :quant 3\n                  :unit (h2 / hour))\n            :ARG1-of (s / start-01\n                  :time (d / date-entity\n                        :time \"17:00\"))))", "# ::snt Hank will bring his son and Don's son as well.\n(b / bring-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Hank\"))\n      :ARG1 (a / and\n            :op1 (p2 / person\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 p\n                        :ARG2 (s / son)))\n            :op2 (p3 / person\n                  :ARG0-of (h2 / have-rel-role-91\n                        :ARG1 (p4 / person\n                              :name (n2 / name\n                                    :op1 \"Don\"))\n                        :ARG2 (s2 / son)))\n            :mod (a2 / as-well)))", "# ::snt Don is glad.\n(g / glad-02\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Don\")))"], "tree": ["(t / test-01\n   :ARG1 (t2 / thing\n             :name (n / name\n                      :op1 \"CSS\")))", "(l / last-01\n   :ARG1 (t / test-01)\n   :ARG2 (t4 / temporal-quantity\n             :quant 3\n             :unit (h2 / hour)))", "(t / test-01\n   :ARG1 (t2 / thing\n             :name (n / name\n                      :op1 \"CSS\"))\n   :ARG2 (p / person\n            :ARG0 (p2 / play-01\n                      :ARG1 (h / hockey))))", "(h / have-rel-role-91\n   :ARG1 (p / person :name (n / name :op1 \"Hank\"))\n   :ARG2 (s / son))", "(h2 / have-rel-role-91\n    :ARG1 (p4 / person\n              :name (n2 / name\n                        :op1 \"Don\"))\n    :ARG2 (s2 / son))", "(b / bring-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hank\"))\n   :ARG1 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 p\n                      :ARG2 (s / son))))", "(b / bring-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hank\"))\n   :ARG1 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 p\n                      :ARG2 (s / son))))", "(b / bring-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hank\"))\n   :ARG1 (p3 / person\n             :ARG0 (h2 / have-rel-role-91\n                       :ARG1 (p4 / person\n                                 :name (n2 / name\n                                           :op1 \"Don\"))\n                       :ARG2 (s2 / son))\n             :mod (a2 / as-well)))", "(b / bring-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hank\"))\n   :ARG1 (p3 / person\n             :ARG0 (h2 / have-rel-role-91\n                       :ARG1 (p4 / person\n                                 :name (n2 / name\n                                           :op1 \"Don\"))\n                       :ARG2 (s2 / son))\n             :mod (a2 / as-well)))", "(b / bring-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hank\"))\n   :ARG1 (a / and\n            :op1 (p2 / person\n                     :ARG0 (h / have-rel-role-91\n                              :ARG1 p\n                              :ARG2 (s / son)))\n            :op2 (p3 / person\n                     :ARG0 (h2 / have-rel-role-91\n                               :ARG1 (p4 / person\n                                         :name (n2 / name\n                                                   :op1 \"Don\"))\n                               :ARG2 (s2 / son)))\n            :mod (a2 / as-well)))", "(b / bring-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hank\"))\n   :ARG1 (a / and\n            :op1 (p2 / person\n                     :ARG0 (h / have-rel-role-91\n                              :ARG1 p\n                              :ARG2 (s / son)))\n            :op2 (p3 / person\n                     :ARG0 (h2 / have-rel-role-91\n                               :ARG1 (p4 / person\n                                         :name (n2 / name\n                                                   :op1 \"Don\"))\n                               :ARG2 (s2 / son)))\n            :mod (a2 / as-well)))", "(g / glad-02\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Don\")))"], "smus": ["CSS tests.", "The tests will last 3 hours.", "CSS tests for hockey players.", "Hank's son", "Don's son", "Hank would bring his son.", "Hank would bring his son.", "Hank would bring Don's son as well.", "Hank would bring Don's son as well.", "Hank would bring his son and Don's son as well.", "Hank would bring his son and Don's son as well.", "Glad Don."]}, {"instance_id": "samsum-99", "summary": "Ben and Steven will go to Marco's tonight to eat pizza.", "summary_trees": ["# ::snt Ben and Steven will go to Marco's tonight to eat pizza.\n(g / go-02\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Ben\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Steven\")))\n      :ARG4 (r / restaurant\n            :name (n3 / name\n                  :op1 \"Marco's\"))\n      :time (d / date-entity\n            :dayperiod (n4 / night)\n            :mod (t / today))\n      :purpose (e / eat-01\n            :ARG0 a\n            :ARG1 (p3 / pizza)))"], "tree": ["(e / eat-01\n   :ARG0 (a / and)\n   :ARG1 (p3 / pizza))", "(e / eat-01\n   :ARG0 (a / and)\n   :ARG1 (p3 / pizza))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ben\")))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Steven\")))", "(g / go-02\n   :time (d / date-entity\n            :dayperiod (n4 / night)\n            :mod (t / today)))", "(g / go-02\n   :time (d / date-entity\n            :dayperiod (n4 / night)\n            :mod (t / today))\n   :purpose (e / eat-01))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ben\"))\n   :ARG4 (r / restaurant\n            :name (n3 / name\n                      :op1 \"Marco's\")))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Steven\"))\n   :ARG4 (r / restaurant\n            :name (n3 / name\n                      :op1 \"Marco's\"))\n   :ARG4 r)", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Ben\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Steven\"))))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ben\"))\n   :ARG4 (r / restaurant\n            :name (n3 / name\n                      :op1 \"Marco's\"))\n   :purpose (e / eat-01\n               :ARG0 p\n               :ARG1 (p3 / pizza)))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ben\"))\n   :ARG4 (r / restaurant\n            :name (n3 / name\n                      :op1 \"Marco's\"))\n   :time (d / date-entity\n            :dayperiod (n4 / night)\n            :mod (t / today)))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Steven\"))\n   :ARG4 (r / restaurant\n            :name (n3 / name\n                      :op1 \"Marco's\"))\n   :ARG4 r\n   :purpose (e / eat-01\n               :ARG0 p2\n               :ARG1 (p3 / pizza)))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Ben\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Steven\")))\n   :ARG4 (r / restaurant\n            :name (n3 / name\n                      :op1 \"Marco's\")))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Steven\"))\n   :ARG4 (r / restaurant\n            :name (n3 / name\n                      :op1 \"Marco's\"))\n   :ARG4 r\n   :time (d / date-entity\n            :dayperiod (n4 / night)\n            :mod (t / today)))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ben\"))\n   :ARG4 (r / restaurant\n            :name (n3 / name\n                      :op1 \"Marco's\"))\n   :time (d / date-entity\n            :dayperiod (n4 / night)\n            :mod (t / today))\n   :purpose (e / eat-01\n               :ARG0 p\n               :ARG1 (p3 / pizza)))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Ben\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Steven\")))\n   :ARG4 (r / restaurant\n            :name (n3 / name\n                      :op1 \"Marco's\"))\n   :purpose (e / eat-01\n               :ARG0 a\n               :ARG1 (p3 / pizza)))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Steven\"))\n   :ARG4 (r / restaurant\n            :name (n3 / name\n                      :op1 \"Marco's\"))\n   :ARG4 r\n   :time (d / date-entity\n            :dayperiod (n4 / night)\n            :mod (t / today))\n   :purpose (e / eat-01\n               :ARG0 p2\n               :ARG1 (p3 / pizza)))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Ben\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Steven\")))\n   :ARG4 (r / restaurant\n            :name (n3 / name\n                      :op1 \"Marco's\"))\n   :time (d / date-entity\n            :dayperiod (n4 / night)\n            :mod (t / today)))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Ben\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Steven\")))\n   :ARG4 (r / restaurant\n            :name (n3 / name\n                      :op1 \"Marco's\"))\n   :time (d / date-entity\n            :dayperiod (n4 / night)\n            :mod (t / today))\n   :purpose (e / eat-01\n               :ARG0 a\n               :ARG1 (p3 / pizza)))"], "smus": ["Eat pizza.", "Eat pizza.", "Ben, go.", "Steven, go.", "Go tonight.", "Go to eat tonight.", "Ben will go to Marco's.", "Steven will go to Marco's.", "Ben and Steven will go.", "Ben would go to Marco's to eat pizza.", "Ben will go to Marco's tonight.", "Steven would go to Marco's to eat pizza.", "Ben and Steven will go to Marco's.", "Steven will go to Marco's tonight.", "Ben will go to Marco's tonight to eat pizza.", "Ben and Steven will go to Marco's to eat pizza.", "Steven will go to Marco's tonight to eat pizza.", "Ben and Steven will go to Marco's tonight.", "Ben and Steven will go to Marco's tonight to eat pizza."]}, {"instance_id": "samsum-100", "summary": "Javier was initially eager to have a tatoo done at Warsaw Ink but the price turned out to be too high. Javier decided to have a tatoo done in Colombia.", "summary_trees": ["# ::snt Javier was initially eager to have a tatoo done at Warsaw Ink but the price turned out to be too high.\n(c / contrast-01\n      :ARG1 (e / eager-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Javier\"))\n            :ARG1 (d / do-02\n                  :ARG1 (t / tatoo)\n                  :ARG2 p\n                  :location (c2 / company\n                        :name (n2 / name\n                              :op1 \"Warsaw\"\n                              :op2 \"Ink\")))\n            :time (ii / initial))\n      :ARG2 (t2 / turn-out-11\n            :ARG1 (p2 / price-01\n                  :ARG1 t)\n            :ARG2 (h / have-degree-91\n                  :ARG1 p2\n                  :ARG2 (h2 / high-02\n                        :ARG1 p2)\n                  :ARG3 (t3 / too))))", "# ::snt Javier decided to have a tatoo done in Colombia.\n(d / decide-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Javier\"))\n      :ARG1 (h / have-04\n            :ARG0 p\n            :ARG1 (t / tattoo-01\n                  :ARG1 p)\n            :location (c / country\n                  :name (n2 / name\n                        :op1 \"Colombia\"))))"], "tree": ["(h / have-degree-91\n   :ARG1 (p2 / price-01)\n   :ARG2 (h2 / high-02\n             :ARG1 p2)\n   :ARG3 (t3 / too))", "(h / have-degree-91\n   :ARG1 (p2 / price-01)\n   :ARG2 (h2 / high-02\n             :ARG1 p2)\n   :ARG3 (t3 / too))", "(t2 / turn-out-11\n    :ARG1 (p2 / price-01\n              :ARG1 (t / tatoo))\n    :ARG2 (h / have-degree-91\n             :ARG1 p2\n             :ARG2 (h2 / high-02\n                       :ARG1 p2)\n             :ARG3 (t3 / too)))", "(t2 / turn-out-11\n    :ARG1 (p2 / price-01\n              :ARG1 (t / tatoo))\n    :ARG2 (h / have-degree-91\n             :ARG1 p2\n             :ARG2 (h2 / high-02\n                       :ARG1 p2)\n             :ARG3 (t3 / too)))", "(e / eager-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Javier\"))\n   :ARG1 (d / do-02\n            :ARG1 (t / tatoo)\n            :ARG2 p\n            :location (c2 / company\n                          :name (n2 / name\n                                    :op1 \"Warsaw\"\n                                    :op2 \"Ink\")))\n   :time (ii / initial))", "(c / contrast-01\n   :ARG1 (e / eager-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Javier\"))\n            :ARG1 (d / do-02\n                     :ARG1 (t / tatoo)\n                     :ARG2 p\n                     :location (c2 / company\n                                   :name (n2 / name\n                                             :op1 \"Warsaw\"\n                                             :op2 \"Ink\")))\n            :time (ii / initial))\n   :ARG2 (t2 / turn-out-11\n             :ARG1 (p2 / price-01\n                       :ARG1 t)\n             :ARG2 (h / have-degree-91\n                      :ARG1 p2\n                      :ARG2 (h2 / high-02\n                                :ARG1 p2)\n                      :ARG3 (t3 / too))))", "(h / have-04\n   :ARG0 (p / person :name (n / name :op1 \"Javier\"))\n   :ARG1 (t / tattoo-01\n            :ARG1 p))", "(h / have-04\n   :location (c / country\n                :name (n2 / name\n                          :op1 \"Colombia\")))", "(h / have-04\n   :ARG0 (p / person :name (n / name :op1 \"Javier\"))\n   :ARG1 (t / tattoo-01\n            :ARG1 p)\n   :location (c / country\n                :name (n2 / name\n                          :op1 \"Colombia\")))", "(d / decide-01\n   :ARG1 (h / have-04\n            :ARG0 (p / person :name (n / name :op1 \"Javier\"))\n            :ARG1 (t / tattoo-01\n                     :ARG1 p)\n            :location (c / country\n                         :name (n2 / name\n                                   :op1 \"Colombia\"))))", "(d / decide-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Javier\"))\n   :ARG1 (h / have-04\n            :ARG0 p\n            :ARG1 (t / tattoo-01\n                     :ARG1 p)\n            :location (c / country\n                         :name (n2 / name\n                                   :op1 \"Colombia\"))))", "(d / decide-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Javier\"))\n   :ARG1 (h / have-04\n            :ARG0 p\n            :ARG1 (t / tattoo-01\n                     :ARG1 p)\n            :location (c / country\n                         :name (n2 / name\n                                   :op1 \"Colombia\"))))"], "smus": ["The price is too high.", "The price is too high.", "It turned out the price of tatoo was too high.", "It turned out the price of tatoo was too high.", "Javier was initially eager to be done tatoo at Warsaw Ink.", "Javier was initially eager to be done tatooing at Warsaw Ink, but it turned out to be too high a price.", "Javier did have a tattoo.", "Have in Colombia.", "Javier did have a tattoo in Colombia.", "Javier decided to have a tattoo in Colombia.", "Javier decided to have a tattoo in Colombia.", "Javier decided to have a tattoo in Colombia."]}, {"instance_id": "samsum-101", "summary": "Russ received David's report but hasn't read it yet.", "summary_trees": ["# ::snt Russ received David's report but hasn't read it yet.\n(c / contrast-01\n      :ARG1 (r / receive-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Russ\"))\n            :ARG1 (r2 / report-01\n                  :ARG0 (p2 / person\n                        :name (n2 / name\n                              :op1 \"David\"))))\n      :ARG2 (r3 / read-01\n            :polarity -\n            :ARG0 p\n            :ARG1 r2\n            :time (y / yet)))"], "tree": ["(r3 / read-01\n    :polarity -\n    :time (y / yet))", "(r3 / read-01\n    :polarity -\n    :ARG0 (p / person :name (n / name :op1 \"Russ\"))\n    :ARG1 (r2 / report-01)\n    :time (y / yet))", "(r / receive-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Russ\"))\n   :ARG1 (r2 / report-01\n             :ARG0 (p2 / person\n                       :name (n2 / name\n                                 :op1 \"David\"))))", "(r / receive-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Russ\"))\n   :ARG1 (r2 / report-01\n             :ARG0 (p2 / person\n                       :name (n2 / name\n                                 :op1 \"David\"))))", "(c / contrast-01\n   :ARG1 (r / receive-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Russ\"))\n            :ARG1 (r2 / report-01\n                      :ARG0 (p2 / person\n                                :name (n2 / name\n                                          :op1 \"David\"))))\n   :ARG2 (r3 / read-01\n             :polarity -\n             :ARG0 p\n             :ARG1 r2\n             :time (y / yet)))", "(c / contrast-01\n   :ARG1 (r / receive-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Russ\"))\n            :ARG1 (r2 / report-01\n                      :ARG0 (p2 / person\n                                :name (n2 / name\n                                          :op1 \"David\"))))\n   :ARG2 (r3 / read-01\n             :polarity -\n             :ARG0 p\n             :ARG1 r2\n             :time (y / yet)))"], "smus": ["Not read yet.", "Russ hasn't read the report yet.", "Russell received a report from David.", "Russell received a report from David.", "Russell received David's report, but he hasn't read it yet.", "Russell received David's report, but he hasn't read it yet."]}, {"instance_id": "samsum-102", "summary": "Rael finds the atmosphere at her workplace to be unbearable. Many people switch their career paths and move to the IT sector. Rael only needs good analytical skills and an on-line course to start work in IT.", "summary_trees": ["# ::snt Rael finds the atmosphere at her workplace to be unbearable.\n(f / find-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Rael\"))\n      :ARG1 (p2 / possible-01\n            :polarity -\n            :ARG1 (t / tolerate-01\n                  :ARG0 p\n                  :ARG1 (a / atmosphere\n                        :location (w / workplace\n                              :poss p)))))", "# ::snt Many people switch their career paths and move to the IT sector.\n(a / and\n      :op1 (s / switch-01\n            :ARG0 (p / person\n                  :quant (m / many))\n            :ARG1 (p2 / path\n                  :mod (c / career\n                        :poss p)))\n      :op2 (m2 / move-01\n            :ARG0 p\n            :ARG2 (s2 / sector\n                  :mod (t / technology\n                        :mod (ii / information)))))", "# ::snt Rael only needs good analytical skills and an on-line course to start work in IT.\n(n / need-01\n      :ARG0 (p / person\n            :name (n2 / name\n                  :op1 \"Rael\"))\n      :ARG1 (a / and\n            :op1 (s / skill\n                  :topic (a2 / analyze-01)\n                  :ARG1-of (g / good-02))\n            :op2 (c / course\n                  :medium (o / online)))\n      :purpose (s2 / start-01\n            :ARG0 p\n            :ARG1 (w / work-01\n                  :ARG0 p\n                  :ARG1 (t / technology\n                        :mod (ii / information))))\n      :mod (o2 / only))"], "tree": ["(p2 / possible-01\n    :polarity -\n    :ARG1 (t / tolerate-01\n             :ARG0 (p / person :name (n / name :op1 \"Rael\"))\n             :ARG1 (a / atmosphere\n                      :location (w / workplace\n                                   :poss p))))", "(f / find-02\n   :ARG1 (p2 / possible-01\n             :polarity -\n             :ARG1 (t / tolerate-01\n                      :ARG0 (p / person :name (n / name :op1 \"Rael\"))\n                      :ARG1 (a / atmosphere\n                               :location (w / workplace\n                                            :poss p)))))", "(f / find-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rael\"))\n   :ARG1 (p2 / possible-01\n             :polarity -\n             :ARG1 (t / tolerate-01\n                      :ARG0 p\n                      :ARG1 (a / atmosphere\n                               :location (w / workplace\n                                            :poss p)))))", "(f / find-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rael\"))\n   :ARG1 (p2 / possible-01\n             :polarity -\n             :ARG1 (t / tolerate-01\n                      :ARG0 p\n                      :ARG1 (a / atmosphere\n                               :location (w / workplace\n                                            :poss p)))))", "(s / switch-01\n   :ARG0 (p / person\n            :quant (m / many)))", "(m2 / move-01\n    :ARG0 (p / person)\n    :ARG2 (s2 / sector\n              :mod (t / technology\n                      :mod (ii / information))))", "(m2 / move-01\n    :ARG0 (p / person)\n    :ARG2 (s2 / sector\n              :mod (t / technology\n                      :mod (ii / information))))", "(s / switch-01\n   :ARG0 (p / person\n            :quant (m / many))\n   :ARG1 (p2 / path\n             :mod (c / career\n                     :poss p)))", "(s / switch-01\n   :ARG0 (p / person\n            :quant (m / many))\n   :ARG1 (p2 / path\n             :mod (c / career\n                     :poss p)))", "(w / work-01\n   :ARG1 (t / technology\n            :mod (ii / information)))", "(n / need-01\n   :purpose (s2 / start-01)\n   :mod (o2 / only))", "(n / need-01\n   :ARG1 (c / course\n            :medium (o / online)))", "(w / work-01\n   :ARG0 (p / person :name (n2 / name :op1 \"Rael\"))\n   :ARG1 (t / technology\n            :mod (ii / information)))", "(w / work-01\n   :ARG0 (p / person :name (n2 / name :op1 \"Rael\"))\n   :ARG1 (t / technology\n            :mod (ii / information)))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Rael\")))", "(n / need-01\n   :ARG1 (s / skill\n            :topic (a2 / analyze-01)\n            :ARG1 (g / good-02)))", "(s2 / start-01\n    :ARG1 (w / work-01\n             :ARG0 (p / person :name (n2 / name :op1 \"Rael\"))\n             :ARG1 (t / technology\n                      :mod (ii / information))))", "(s2 / start-01\n    :ARG0 (p / person :name (n2 / name :op1 \"Rael\"))\n    :ARG1 (w / work-01\n             :ARG0 p\n             :ARG1 (t / technology\n                      :mod (ii / information))))", "(s2 / start-01\n    :ARG0 (p / person :name (n2 / name :op1 \"Rael\"))\n    :ARG1 (w / work-01\n             :ARG0 p\n             :ARG1 (t / technology\n                      :mod (ii / information))))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Rael\"))\n   :ARG1 (s / skill\n            :topic (a2 / analyze-01)\n            :ARG1 (g / good-02)))", "(n / need-01\n   :ARG1 (a / and\n            :op1 (s / skill\n                    :topic (a2 / analyze-01)\n                    :ARG1 (g / good-02))\n            :op2 (c / course\n                    :medium (o / online))))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Rael\"))\n   :ARG1 (a / and\n            :op1 (s / skill\n                    :topic (a2 / analyze-01)\n                    :ARG1 (g / good-02))\n            :op2 (c / course\n                    :medium (o / online))))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Rael\"))\n   :ARG1 (c / course\n            :medium (o / online))\n   :purpose (s2 / start-01\n                :ARG0 p\n                :ARG1 (w / work-01\n                         :ARG0 p\n                         :ARG1 (t / technology\n                                  :mod (ii / information))))\n   :purpose s2)", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Rael\"))\n   :ARG1 (s / skill\n            :topic (a2 / analyze-01)\n            :ARG1 (g / good-02))\n   :purpose (s2 / start-01\n                :ARG0 p\n                :ARG1 (w / work-01\n                         :ARG0 p\n                         :ARG1 (t / technology\n                                  :mod (ii / information)))))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Rael\"))\n   :ARG1 (c / course\n            :medium (o / online))\n   :purpose (s2 / start-01\n                :ARG0 p\n                :ARG1 (w / work-01\n                         :ARG0 p\n                         :ARG1 (t / technology\n                                  :mod (ii / information))))\n   :purpose s2\n   :mod (o2 / only))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Rael\"))\n   :ARG1 (s / skill\n            :topic (a2 / analyze-01)\n            :ARG1 (g / good-02))\n   :purpose (s2 / start-01\n                :ARG0 p\n                :ARG1 (w / work-01\n                         :ARG0 p\n                         :ARG1 (t / technology\n                                  :mod (ii / information))))\n   :mod (o2 / only))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Rael\"))\n   :ARG1 (a / and\n            :op1 (s / skill\n                    :topic (a2 / analyze-01)\n                    :ARG1 (g / good-02))\n            :op2 (c / course\n                    :medium (o / online)))\n   :purpose (s2 / start-01\n                :ARG0 p\n                :ARG1 (w / work-01\n                         :ARG0 p\n                         :ARG1 (t / technology\n                                  :mod (ii / information)))))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Rael\"))\n   :ARG1 (a / and\n            :op1 (s / skill\n                    :topic (a2 / analyze-01)\n                    :ARG1 (g / good-02))\n            :op2 (c / course\n                    :medium (o / online)))\n   :purpose (s2 / start-01\n                :ARG0 p\n                :ARG1 (w / work-01\n                         :ARG0 p\n                         :ARG1 (t / technology\n                                  :mod (ii / information))))\n   :mod (o2 / only))"], "smus": ["Rael can't tolerate the atmosphere in his workplace.", "Rael finds it impossible to tolerate the atmosphere in his workplace.", "Rael finds it impossible to tolerate the atmosphere in his workplace.", "Rael finds it impossible to tolerate the atmosphere in his workplace.", "Many switch.", "People will move into the information technology sector.", "People will move into the information technology sector.", "Many people switch their career paths.", "Many people switch their career paths.", "IT work.", "Only needs to start to.", "Needs an online course.", "Rael works in information technology.", "Rael works in information technology.", "Rael needs.", "Needs good analytical skills.", "Rael will start working in information technology.", "Rael will start working in information technology.", "Rael will start working in information technology.", "Rael needs good analytical skills.", "Needs good analytical skills and an online course.", "Rael needs good analytical skills and an online course.", "Rael needs an online course to start working in information technology.", "Rael needs good analytical skills to start working in IT.", "Rael only needs an online course to start working in information technology.", "Rael only needs good analytical skills to start working in IT.", "Rael needs good analytical skills and an online course to start working in information technology.", "Rael only needs good analytical skills and an online course to start working in IT."]}, {"instance_id": "samsum-103", "summary": "Lucian is not at home. Desiree wants Lucian to keep her pasta in the microwave.", "summary_trees": ["# ::snt Lucian is not at home.\n(b / be-located-at-91\n      :polarity -\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Lucian\"))\n      :ARG2 (h / home))", "# ::snt Desiree wants Lucian to keep her pasta in the microwave.\n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Desiree\"))\n      :ARG1 (k / keep-01\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Lucian\"))\n            :ARG1 (p3 / pasta\n                  :poss p\n                  :location (m / microwave))))"], "tree": ["(b / be-located-at-91\n   :polarity -\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Lucian\"))\n   :ARG2 (h / home))", "(k / keep-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Lucian\")))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Desiree\"))\n   :ARG1 (k / keep-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Lucian\"))\n            :ARG1 (p3 / pasta\n                      :poss p\n                      :location (m / microwave))))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Desiree\"))\n   :ARG1 (k / keep-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Lucian\"))\n            :ARG1 (p3 / pasta\n                      :poss p\n                      :location (m / microwave))))"], "smus": ["Lucian was not home.", "Lucian, keep.", "Desiree wants Lucian to keep her pasta in the microwave.", "Desiree wants Lucian to keep her pasta in the microwave."]}, {"instance_id": "samsum-104", "summary": "Steve is happy that he got a new dishwasher installed.", "summary_trees": ["# ::snt Steve is happy that he got a new dishwasher installed.\n(h / happy-01\n      :ARG0 (ii / install-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Steve\"))\n            :ARG2 (d / dishwasher\n                  :ARG1-of (n2 / new-01)))\n      :ARG1 p)"], "tree": ["(ii / install-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Steve\"))\n    :ARG2 (d / dishwasher\n             :ARG1 (n2 / new-01)))", "(h / happy-01\n   :ARG0 (ii / install-01\n             :ARG1 (p / person\n                      :name (n / name\n                               :op1 \"Steve\"))\n             :ARG2 (d / dishwasher\n                      :ARG1 (n2 / new-01))))", "(h / happy-01\n   :ARG0 (ii / install-01\n             :ARG1 (p / person\n                      :name (n / name\n                               :op1 \"Steve\"))\n             :ARG2 (d / dishwasher\n                      :ARG1 (n2 / new-01)))\n   :ARG1 p)", "(h / happy-01\n   :ARG0 (ii / install-01\n             :ARG1 (p / person\n                      :name (n / name\n                               :op1 \"Steve\"))\n             :ARG2 (d / dishwasher\n                      :ARG1 (n2 / new-01)))\n   :ARG1 p)"], "smus": ["Steve was installed with a new dishwasher.", "Happy Steve has been installed a new dishwasher.", "Steve was happy to have the new dishwasher installed.", "Steve was happy to have the new dishwasher installed."]}, {"instance_id": "samsum-105", "summary": "Addisyn hasn't talked to Dexter for a long time and he thinks she doesn't love him anymore.", "summary_trees": ["# ::snt Addisyn hasn't talked to Dexter for a long time and he thinks she doesn't love him anymore.\n(a / and\n      :op1 (t / talk-01\n            :polarity -\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Addisyn\"))\n            :ARG2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Dexter\"))\n            :ARG1-of (l / long-03))\n      :op2 (t2 / think-01\n            :ARG0 p\n            :ARG1 (l2 / love-01\n                  :polarity -\n                  :ARG0 p2\n                  :ARG1 p\n                  :mod (a2 / anymore))))"], "tree": ["(t / talk-01\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Addisyn\"))\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Dexter\"))\n   :ARG1 (l / long-03))"], "smus": ["Addisyn hasn't talked to Deexter for long."]}, {"instance_id": "samsum-106", "summary": "James will pick up the car after his work tomorrow. Sue already have sent him money. ", "summary_trees": ["# ::snt James will pick up the car after his work tomorrow.\n(p / pick-up-04\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"James\"))\n      :ARG1 (c / car)\n      :time (a / after\n            :op1 (w / work-01\n                  :ARG0 p2\n                  :time (t / tomorrow))))", "# ::snt Sue already have sent him money.\n(s / send-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Sue\"))\n      :ARG1 (m / money)\n      :ARG2 (h / he)\n      :time (a / already))"], "tree": ["(w / work-01\n   :ARG0 (p2 / person :name (n / name :op1 \"James\"))\n   :time (t / tomorrow))", "(p / pick-up-04\n   :time (a / after\n            :op1 (w / work-01)))", "(p / pick-up-04\n   :time (a / after\n            :op1 (w / work-01)))", "(p / pick-up-04\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"James\"))\n   :ARG1 (c / car))", "(p / pick-up-04\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"James\"))\n   :ARG1 (c / car)\n   :time (a / after\n            :op1 (w / work-01\n                    :ARG0 p2\n                    :time (t / tomorrow))))", "(p / pick-up-04\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"James\"))\n   :ARG1 (c / car)\n   :time (a / after\n            :op1 (w / work-01\n                    :ARG0 p2\n                    :time (t / tomorrow))))", "(s / send-01\n   :ARG1 (m / money)\n   :ARG2 (h / he))", "(s / send-01\n   :ARG1 (m / money)\n   :ARG2 (h / he)\n   :time (a / already))", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sue\"))\n   :ARG1 (m / money))", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sue\"))\n   :ARG1 (m / money)\n   :ARG2 (h / he))", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sue\"))\n   :ARG1 (m / money)\n   :ARG2 (h / he)\n   :time (a / already))", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sue\"))\n   :ARG1 (m / money)\n   :ARG2 (h / he)\n   :time (a / already))"], "smus": ["James will be at work tomorrow.", "Pick up after work.", "Pick up after work.", "James will pick up the car.", "James will pick up the car after work tomorrow.", "James will pick up the car after work tomorrow.", "He was sent money.", "He had already been sent money.", "Sue has sent the money.", "Sue had sent him the money.", "Sue had already sent him the money.", "Sue had already sent him the money."]}, {"instance_id": "samsum-107", "summary": "Adelle has to clean the hamster cage after school.", "summary_trees": ["# ::snt Adelle has to clean the hamster cage after school.\n(o / obligate-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Adelle\"))\n      :ARG2 (c / clean-01\n            :ARG0 p\n            :ARG1 (c2 / cage\n                  :mod (h / hamster))\n            :time (a / after\n                  :op1 (s / school))))"], "tree": ["(c / clean-01\n   :ARG1 (c2 / cage\n             :mod (h / hamster)))", "(c / clean-01\n   :time (a / after\n            :op1 (s / school)))", "(c / clean-01\n   :ARG0 (p / person :name (n / name :op1 \"Adelle\"))\n   :ARG1 (c2 / cage\n             :mod (h / hamster)))", "(c / clean-01\n   :ARG0 (p / person :name (n / name :op1 \"Adelle\"))\n   :ARG1 (c2 / cage\n             :mod (h / hamster))\n   :time (a / after\n            :op1 (s / school)))", "(o / obligate-01\n   :ARG2 (c / clean-01\n            :ARG0 (p / person :name (n / name :op1 \"Adelle\"))\n            :ARG1 (c2 / cage\n                      :mod (h / hamster))\n            :time (a / after\n                     :op1 (s / school))))", "(o / obligate-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Adelle\"))\n   :ARG2 (c / clean-01\n            :ARG0 p\n            :ARG1 (c2 / cage\n                      :mod (h / hamster))\n            :time (a / after\n                     :op1 (s / school))))", "(o / obligate-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Adelle\"))\n   :ARG2 (c / clean-01\n            :ARG0 p\n            :ARG1 (c2 / cage\n                      :mod (h / hamster))\n            :time (a / after\n                     :op1 (s / school))))"], "smus": ["Clean the hamster cage.", "After school, clean.", "Adelle was to clean the hamster cage.", "After school Adelle would clean the hamster cage.", "Adelle had to clean the hamster cage after school.", "Adelle had to clean the hamster cage after school.", "Adelle had to clean the hamster cage after school."]}, {"instance_id": "samsum-108", "summary": "Pat is interested in baseball and hockey, he doesn't know much about basketball anymore. He plans to play basketball with Mike one day.", "summary_trees": ["# ::snt Pat is interested in baseball and hockey, he doesn't know much about basketball anymore.\n(a / and\n      :op1 (ii / interest-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Pat\"))\n            :ARG2 (a2 / and\n                  :op1 (b / baseball)\n                  :op2 (h / hockey)))\n      :op2 (k / know-01\n            :polarity -\n            :ARG0 p\n            :ARG1 (m / much\n                  :topic (b2 / basketball))\n            :time (a3 / anymore)))", "# ::snt He plans to play basketball with Mike one day.\n(p / plan-01\n      :ARG0 (h / he)\n      :ARG1 (p2 / play-01\n            :ARG0 h\n            :ARG1 (b / basketball)\n            :accompanier (p3 / person\n                  :name (n / name\n                        :op1 \"Mike\"))\n            :time (d / day\n                  :mod (o / one))))"], "tree": ["(k / know-01\n   :polarity -\n   :time (a3 / anymore))", "(k / know-01\n   :ARG1 (m / much\n            :topic (b2 / basketball)))", "(k / know-01\n   :ARG0 (p / person :name (n / name :op1 \"Pat\"))\n   :ARG1 (m / much\n            :topic (b2 / basketball)))", "(k / know-01\n   :polarity -\n   :ARG0 (p / person :name (n / name :op1 \"Pat\"))\n   :ARG1 (m / much\n            :topic (b2 / basketball)))", "(ii / interest-01\n    :ARG2 (a2 / and\n              :op1 (b / baseball)\n              :op2 (h / hockey)))", "(ii / interest-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Pat\"))\n    :ARG2 (b / baseball))", "(ii / interest-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Pat\"))\n    :ARG2 (h / hockey))", "(ii / interest-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Pat\"))\n    :ARG2 (b / baseball))", "(ii / interest-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Pat\"))\n    :ARG2 (h / hockey))", "(k / know-01\n   :polarity -\n   :ARG0 (p / person :name (n / name :op1 \"Pat\"))\n   :ARG1 (m / much\n            :topic (b2 / basketball))\n   :time (a3 / anymore))", "(ii / interest-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Pat\"))\n    :ARG2 (a2 / and\n              :op1 (b / baseball)\n              :op2 (h / hockey)))", "(ii / interest-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Pat\"))\n    :ARG2 (a2 / and\n              :op1 (b / baseball)\n              :op2 (h / hockey)))", "(p2 / play-01\n    :time (d / day\n             :mod (o / one)))", "(p2 / play-01\n    :ARG0 (h / he)\n    :ARG1 (b / basketball)\n    :time (d / day\n             :mod (o / one)))", "(p2 / play-01\n    :accompanier (p3 / person\n                     :name (n / name\n                              :op1 \"Mike\"))\n    :time (d / day\n             :mod (o / one)))", "(p2 / play-01\n    :ARG0 (h / he)\n    :ARG1 (b / basketball)\n    :accompanier (p3 / person\n                     :name (n / name\n                              :op1 \"Mike\"))\n    :time (d / day\n             :mod (o / one)))", "(p / plan-01\n   :ARG1 (p2 / play-01\n             :ARG0 (h / he)\n             :ARG1 (b / basketball)\n             :accompanier (p3 / person\n                              :name (n / name\n                                       :op1 \"Mike\"))\n             :time (d / day\n                      :mod (o / one))))", "(p / plan-01\n   :ARG0 (h / he)\n   :ARG1 (p2 / play-01\n             :ARG0 h\n             :ARG1 (b / basketball)\n             :accompanier (p3 / person\n                              :name (n / name\n                                       :op1 \"Mike\"))\n             :time (d / day\n                      :mod (o / one))))", "(p / plan-01\n   :ARG0 (h / he)\n   :ARG1 (p2 / play-01\n             :ARG0 h\n             :ARG1 (b / basketball)\n             :accompanier (p3 / person\n                              :name (n / name\n                                       :op1 \"Mike\"))\n             :time (d / day\n                      :mod (o / one))))"], "smus": ["Don't know anymore.", "Don't know much about basketball.", "Pat doesn't know much about basketball.", "Pat doesn't know much about basketball.", "Interesting to both baseball and hockey.", "Pat is interested in baseball.", "Pat is interested in hockey.", "Pat is interested in baseball.", "Pat is interested in hockey.", "Pat doesn't know much about basketball anymore.", "Pat is interested in baseball and hockey.", "Pat is interested in baseball and hockey.", "Play one day.", "One day he would play basketball.", "One day, play with Mike.", "One day he would play basketball with Mike.", "One day he plans to play basketball with Mike.", "He plans to play basketball with Mike one day.", "He plans to play basketball with Mike one day."]}, {"instance_id": "samsum-109", "summary": "Tim does not need mum for anything important at the moment.", "summary_trees": ["# ::snt Tim does not need mum for anything important at the moment.\n(n / need-01\n      :polarity -\n      :ARG0 (p / person\n            :name (n2 / name\n                  :op1 \"Tim\"))\n      :ARG1 (p2 / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 p\n                  :ARG2 (m / mum)))\n      :purpose (a / anything\n            :ARG1-of (ii / important-01)\n            :time (m2 / moment)))"], "tree": ["(h / have-rel-role-91\n   :ARG1 (p / person :name (n2 / name :op1 \"Tim\"))\n   :ARG2 (m / mum))", "(n / need-01\n   :polarity -\n   :purpose (a / anything\n               :time (m2 / moment)))", "(n / need-01\n   :polarity -\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Tim\"))\n   :ARG1 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 p\n                      :ARG2 (m / mum)))\n   :purpose (a / anything\n               :ARG1 (ii / important-01)\n               :time (m2 / moment)))"], "smus": ["Tim's mum.", "Not that there is anything necessary at the moment.", "Tim does not need his mum for anything important at the moment."]}, {"instance_id": "samsum-110", "summary": "Dwayne will watch the new season of \"Jersey Shore\" on Zack's advice. The first episodes of the new season are hilarious. Season 2 is upcoming.", "summary_trees": ["# ::snt Dwayne will watch the new season of \"Jersey Shore\" on Zack's advice.\n(w / watch-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Dwayne\"))\n      :ARG1 (s / season\n            :ARG1-of (n2 / new-01)\n            :part-of (b / broadcast-program\n                  :name (n3 / name\n                        :op1 \"Jersey\"\n                        :op2 \"Shore\")))\n      :ARG1-of (a / advise-01\n            :ARG0 (p2 / person\n                  :name (n4 / name\n                        :op1 \"Zack\"))))", "# ::snt The first episodes of the new season are hilarious.\n(h / hilarious\n      :domain (e / episode\n            :ord (o / ordinal-entity\n                  :value 1)\n            :part-of (s / season\n                  :ARG1-of (n / new-01))))", "# ::snt Season 2 is upcoming.\n(u / upcoming\n      :domain (s / season\n            :mod 2))"], "tree": ["(a / advise-01\n   :ARG0 (p2 / person\n             :name (n4 / name\n                       :op1 \"Zack\")))", "(a / advise-01\n   :ARG0 (p2 / person\n             :name (n4 / name\n                       :op1 \"Zack\")))", "(w / watch-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dwayne\")))", "(w / watch-01\n   :ARG1 (s / season\n            :ARG1 (n2 / new-01)\n            :part (b / broadcast-program\n                     :name (n3 / name\n                               :op1 \"Jersey\"\n                               :op2 \"Shore\"))))", "(w / watch-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dwayne\"))\n   :ARG1 (s / season\n            :ARG1 (n2 / new-01)\n            :part (b / broadcast-program\n                     :name (n3 / name\n                               :op1 \"Jersey\"\n                               :op2 \"Shore\"))))", "(w / watch-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dwayne\"))\n   :ARG1 (s / season\n            :ARG1 (n2 / new-01)\n            :part (b / broadcast-program\n                     :name (n3 / name\n                               :op1 \"Jersey\"\n                               :op2 \"Shore\")))\n   :ARG1 (a / advise-01\n            :ARG0 (p2 / person\n                      :name (n4 / name\n                                :op1 \"Zack\"))))", "(h / hilarious\n   :domain (e / episode\n              :ord (o / ordinal-entity\n                      :value 1)\n              :part-of (s / season\n                          :ARG1-of (n / new-01))))", "(u / upcoming\n   :domain (s / season\n              :mod 2))"], "smus": ["advice from Zach", "advice from Zach", "Dwayne will watch.", "Watch the new season of Jersey Shore.", "Dwayne will watch the new season of Jersey Shore.", "Dwayne will watch the new season of Jersey Shore for Zach's advice.", "The first episodes of the new season were hilarious.", "The second season is upcoming."]}, {"instance_id": "samsum-111", "summary": "Willy and Vinny will car pool with Winny's red Mustang.", "summary_trees": ["# ::snt Willy and Vinny will car pool with Winny's red Mustang.\n(p / pool-01\n      :ARG0 (a / and\n            :op1 (p2 / person\n                  :name (n / name\n                        :op1 \"Willy\"))\n            :op2 (p3 / person\n                  :name (n2 / name\n                        :op1 \"Vinny\")))\n      :ARG1 (c / car)\n      :accompanier (c2 / car\n            :name (n3 / name\n                  :op1 \"Mustang\")\n            :poss p3\n            :ARG1-of (r / red-02)))"], "tree": ["(p / pool-01\n   :accompanier (c2 / car\n                    :name (n3 / name\n                              :op1 \"Mustang\")))", "(p / pool-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Willy\"))\n   :ARG1 (c / car)\n   :accompanier (c2 / car\n                    :name (n3 / name\n                              :op1 \"Mustang\")\n                    :poss (p3 / person :name (n2 / name :op1 \"Vinny\"))\n                    :ARG1 (r / red-02)))", "(p / pool-01\n   :ARG0 (a / and\n            :op1 (p2 / person\n                     :name (n / name\n                              :op1 \"Willy\"))\n            :op2 (p3 / person\n                     :name (n2 / name\n                               :op1 \"Vinny\")))\n   :ARG1 (c / car)\n   :accompanier (c2 / car\n                    :name (n3 / name\n                              :op1 \"Mustang\")\n                    :poss p3\n                    :ARG1 (r / red-02)))"], "smus": ["Pool with Mustang car", "Willow pooled the car with Vinny's red Mustang.", "Willow and Vinny pooled the car with their red Mustang."]}, {"instance_id": "samsum-112", "summary": "Selah called a person that did not pick up.", "summary_trees": ["# ::snt Selah called a person that did not pick up.\n(c / call-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Selah\"))\n      :ARG1 (p2 / person\n            :ARG0-of (p3 / pick-up-04\n                  :polarity -)))"], "tree": ["(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Selah\")))", "(c / call-02\n   :ARG1 (p2 / person\n             :ARG0 (p3 / pick-up-04\n                       :polarity -)))", "(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Selah\"))\n   :ARG1 (p2 / person\n             :ARG0 (p3 / pick-up-04\n                       :polarity -)))", "(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Selah\"))\n   :ARG1 (p2 / person\n             :ARG0 (p3 / pick-up-04\n                       :polarity -)))"], "smus": ["Selah called.", "called for a person not to pick up.", "Selah called the person not to pick up.", "Selah called the person not to pick up."]}, {"instance_id": "samsum-113", "summary": "Ludmila's favourite dinosaur when she was little was the Triceratops.", "summary_trees": ["# ::snt Ludmila's favourite dinosaur when she was little was the Triceratops.\n(f / favor-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Ludmila\"))\n      :ARG1 (d / dinosaur\n            :name (n2 / name\n                  :op1 \"Tricatops\"))\n      :time (l / little\n            :domain p))"], "tree": ["(f / favor-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ludmila\"))\n   :ARG1 (d / dinosaur\n            :name (n2 / name\n                      :op1 \"Tricatops\")))", "(f / favor-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ludmila\"))\n   :ARG1 (d / dinosaur\n            :name (n2 / name\n                      :op1 \"Tricatops\"))\n   :time (l / little\n            :domain p))"], "smus": ["Ludmila is pro-Tricatops dinosaur.", "Ludmila was a favoritism for Tricatops when she was little."]}, {"instance_id": "samsum-114", "summary": "Eric, Samantha and Noah's professor is commenting a recent scandal on the news. ", "summary_trees": ["# ::snt Eric, Samantha and Noah's professor is commenting a recent scandal on the news.\n(c / comment-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Eric\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Samantha\"))\n            :op3 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Noah\"))\n            :op4 (p4 / professor\n                  :poss p3))\n      :ARG3 (s / scandal\n            :time (r / recent))\n      :medium (n4 / news))"], "tree": ["(c / comment-01\n   :ARG0 (p4 / professor\n             :poss (p3 / person :name (n3 / name :op1 \"Noah\"))))", "(c / comment-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Eric\")))", "(c / comment-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Samantha\")))", "(c / comment-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Eric\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Samantha\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Noah\"))\n            :op4 (p4 / professor\n                     :poss p3)))"], "smus": ["Noah's professor was commenting.", "Eric was commenting.", "Samantha was commenting.", "Eric, Samantha, Noah and his professor are commenting."]}, {"instance_id": "samsum-115", "summary": "Jamie, Marlo, Jimmy and Alex's teacher requires their class to divide into 2 groups, each making a presentation. The teacher sent them the presentation subjects via e-mail. Jamie, Marlo, Jimmy and Alex consider dividing the class into groups by gender. ", "summary_trees": ["# ::snt Jamie, Marlo, Jimmy and Alex's teacher requires their class to divide into 2 groups, each making a presentation.\n(r / require-01\n      :ARG0 (p / person\n            :ARG0-of (t / teach-01)\n            :poss (a / and\n                  :op1 (p2 / person\n                        :name (n / name\n                              :op1 \"Jamie\"))\n                  :op2 (p3 / person\n                        :name (n2 / name\n                              :op1 \"Marlo\"))\n                  :op3 (p4 / person\n                        :name (n3 / name\n                              :op1 \"Jimmy\"))\n                  :op4 (p5 / person\n                        :name (n4 / name\n                              :op1 \"Alex\"))))\n      :ARG1 (d / divide-02\n            :ARG0 p\n            :ARG1 (c / class\n                  :poss a)\n            :ARG2 (g / group\n                  :quant 2\n                  :ARG0-of (m / make-01\n                        :ARG1 (p6 / presentation)))))", "# ::snt The teacher sent them the presentation subjects via e-mail.\n(s / send-01\n      :ARG0 (p / person\n            :ARG0-of (t / teach-01))\n      :ARG1 (s2 / subject\n            :topic-of (p2 / present-01))\n      :ARG2 (t2 / they)\n      :medium (e / email))", "# ::snt Jamie, Marlo, Jimmy and Alex consider dividing the class into groups by gender.\n(c / consider-02\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Jamie\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Marlo\"))\n            :op3 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Jimmy\"))\n            :op4 (p4 / person\n                  :name (n4 / name\n                        :op1 \"Alex\")))\n      :ARG1 (d / divide-02\n            :ARG0 a\n            :ARG1 (c2 / class)\n            :ARG2 (g / group)\n            :ARG3 (g2 / gender)))"], "tree": ["(d / divide-02\n   :ARG1 (c / class\n            :poss (a / and)))", "(r / require-01\n   :ARG0 (p / person\n            :ARG0 (t / teach-01)\n            :poss (p2 / person\n                      :name (n / name\n                               :op1 \"Jamie\"))))", "(r / require-01\n   :ARG0 (p / person\n            :ARG0 (t / teach-01)\n            :poss (p4 / person\n                      :name (n3 / name\n                                :op1 \"Jimmy\"))))", "(r / require-01\n   :ARG0 (p / person\n            :ARG0 (t / teach-01)\n            :poss (p2 / person\n                      :name (n / name\n                               :op1 \"Jamie\"))))", "(r / require-01\n   :ARG0 (p / person\n            :ARG0 (t / teach-01)\n            :poss (p4 / person\n                      :name (n3 / name\n                                :op1 \"Jimmy\"))))", "(d / divide-02\n   :ARG1 (c / class\n            :poss (a / and))\n   :ARG2 (g / group\n            :quant 2\n            :ARG0 (m / make-01\n                     :ARG1 (p6 / presentation))))", "(d / divide-02\n   :ARG0 (p / person)\n   :ARG1 (c / class\n            :poss (a / and))\n   :ARG2 (g / group\n            :quant 2\n            :ARG0 (m / make-01\n                     :ARG1 (p6 / presentation))))", "(d / divide-02\n   :ARG0 (p / person)\n   :ARG1 (c / class\n            :poss (a / and))\n   :ARG2 (g / group\n            :quant 2\n            :ARG0 (m / make-01\n                     :ARG1 (p6 / presentation))))", "(r / require-01\n   :ARG1 (d / divide-02\n            :ARG0 (p / person)\n            :ARG1 (c / class\n                     :poss (a / and))\n            :ARG2 (g / group\n                     :quant 2\n                     :ARG0 (m / make-01\n                              :ARG1 (p6 / presentation)))))", "(r / require-01\n   :ARG0 (p / person\n            :ARG0 (t / teach-01)\n            :poss (p5 / person\n                      :name (n4 / name\n                                :op1 \"Alex\")))\n   :ARG1 (d / divide-02\n            :ARG0 p\n            :ARG1 (c / class\n                     :poss p5)\n            :ARG2 (g / group\n                     :quant 2\n                     :ARG0 (m / make-01\n                              :ARG1 (p6 / presentation)))))", "(r / require-01\n   :ARG0 (p / person\n            :ARG0 (t / teach-01)\n            :poss (p5 / person\n                      :name (n4 / name\n                                :op1 \"Alex\")))\n   :ARG1 (d / divide-02\n            :ARG0 p\n            :ARG1 (c / class\n                     :poss p5)\n            :ARG2 (g / group\n                     :quant 2\n                     :ARG0 (m / make-01\n                              :ARG1 (p6 / presentation)))))", "(r / require-01\n   :ARG0 (p / person\n            :ARG0 (t / teach-01)\n            :poss (a / and\n                     :op1 (p2 / person\n                              :name (n / name\n                                       :op1 \"Jamie\"))\n                     :op2 (p3 / person\n                              :name (n2 / name\n                                        :op1 \"Marlo\"))\n                     :op3 (p4 / person\n                              :name (n3 / name\n                                        :op1 \"Jimmy\"))\n                     :op4 (p5 / person\n                              :name (n4 / name\n                                        :op1 \"Alex\"))))\n   :ARG1 (d / divide-02\n            :ARG0 p\n            :ARG1 (c / class\n                     :poss a)\n            :ARG2 (g / group\n                     :quant 2\n                     :ARG0 (m / make-01\n                              :ARG1 (p6 / presentation)))))", "(r / require-01\n   :ARG0 (p / person\n            :ARG0 (t / teach-01)\n            :poss (a / and\n                     :op1 (p2 / person\n                              :name (n / name\n                                       :op1 \"Jamie\"))\n                     :op2 (p3 / person\n                              :name (n2 / name\n                                        :op1 \"Marlo\"))\n                     :op3 (p4 / person\n                              :name (n3 / name\n                                        :op1 \"Jimmy\"))\n                     :op4 (p5 / person\n                              :name (n4 / name\n                                        :op1 \"Alex\"))))\n   :ARG1 (d / divide-02\n            :ARG0 p\n            :ARG1 (c / class\n                     :poss a)\n            :ARG2 (g / group\n                     :quant 2\n                     :ARG0 (m / make-01\n                              :ARG1 (p6 / presentation)))))", "(s / send-01\n   :ARG1 (s2 / subject\n             :topic (p2 / present-01))\n   :ARG2 (t2 / they))", "(s / send-01\n   :ARG0 (p / person\n            :ARG0 (t / teach-01))\n   :ARG1 (s2 / subject\n             :topic (p2 / present-01)))", "(s / send-01\n   :ARG0 (p / person\n            :ARG0 (t / teach-01))\n   :ARG1 (s2 / subject\n             :topic (p2 / present-01))\n   :ARG2 (t2 / they))", "(s / send-01\n   :ARG0 (p / person\n            :ARG0 (t / teach-01))\n   :ARG1 (s2 / subject\n             :topic (p2 / present-01))\n   :ARG2 (t2 / they)\n   :medium (e / email))", "(d / divide-02\n   :ARG1 (c2 / class)\n   :ARG2 (g / group))", "(d / divide-02\n   :ARG0 (a / and)\n   :ARG1 (c2 / class)\n   :ARG2 (g / group)\n   :ARG3 (g2 / gender))", "(c / consider-02\n   :ARG1 (d / divide-02\n            :ARG0 (a / and)\n            :ARG1 (c2 / class)\n            :ARG2 (g / group)\n            :ARG3 (g2 / gender)))", "(c / consider-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jamie\"))\n   :ARG1 (d / divide-02\n            :ARG0 p\n            :ARG1 (c2 / class)\n            :ARG2 (g / group)\n            :ARG3 (g2 / gender)))", "(c / consider-02\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Jimmy\"))\n   :ARG1 (d / divide-02\n            :ARG0 p3\n            :ARG1 (c2 / class)\n            :ARG2 (g / group)\n            :ARG3 (g2 / gender)))", "(c / consider-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jamie\"))\n   :ARG1 (d / divide-02\n            :ARG0 p\n            :ARG1 (c2 / class)\n            :ARG2 (g / group)\n            :ARG3 (g2 / gender)))", "(c / consider-02\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Jimmy\"))\n   :ARG1 (d / divide-02\n            :ARG0 p3\n            :ARG1 (c2 / class)\n            :ARG2 (g / group)\n            :ARG3 (g2 / gender)))", "(c / consider-02\n   :ARG0 (p4 / person\n             :name (n4 / name\n                       :op1 \"Alex\"))\n   :ARG1 (d / divide-02\n            :ARG0 p4\n            :ARG1 (c2 / class)\n            :ARG2 (g / group)\n            :ARG3 (g2 / gender))\n   :ARG1 d)", "(c / consider-02\n   :ARG0 (p4 / person\n             :name (n4 / name\n                       :op1 \"Alex\"))\n   :ARG1 (d / divide-02\n            :ARG0 p4\n            :ARG1 (c2 / class)\n            :ARG2 (g / group)\n            :ARG3 (g2 / gender))\n   :ARG1 d)", "(c / consider-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Jamie\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Marlo\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Jimmy\"))\n            :op4 (p4 / person\n                     :name (n4 / name\n                               :op1 \"Alex\")))\n   :ARG1 (d / divide-02\n            :ARG0 a\n            :ARG1 (c2 / class)\n            :ARG2 (g / group)\n            :ARG3 (g2 / gender)))", "(c / consider-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Jamie\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Marlo\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Jimmy\"))\n            :op4 (p4 / person\n                     :name (n4 / name\n                               :op1 \"Alex\")))\n   :ARG1 (d / divide-02\n            :ARG0 a\n            :ARG1 (c2 / class)\n            :ARG2 (g / group)\n            :ARG3 (g2 / gender)))"], "smus": ["Divide the class of the people.", "Jamie's teacher requires.", "Jimmy's teacher requires...", "Jamie's teacher requires.", "Jimmy's teacher requires...", "Divide the class of and into two groups for making the presentation.", "People will divide their class into two groups making a presentation.", "People will divide their class into two groups making a presentation.", "It requires people to divide their class into two groups for making a presentation.", "Alex's teacher requires him to divide his class into two groups, making a presentation.", "Alex's teacher requires him to divide his class into two groups, making a presentation.", "Jimmie, Marco, Jimmy, Alex's teacher requires them to divide their class into two groups making the presentation.", "Jimmie, Marco, Jimmy, Alex's teacher requires them to divide their class into two groups making the presentation.", "They were sent presentation subjects.", "The teacher sent the presentation subjects.", "The teacher sent them presentation subjects.", "The teacher sent them presentations subjects via email.", "Dividing classes into groups.", "Class and groups are dividing by gender.", "Consider class and gender division among groups.", "Jamie would consider dividing classes into groups by gender.", "Jimmy would consider dividing classes into groups by gender.", "Jamie would consider dividing classes into groups by gender.", "Jimmy would consider dividing classes into groups by gender.", "Alex would consider dividing classes into groups by gender.", "Alex would consider dividing classes into groups by gender.", "Jamie, Marco, Jimmy and Alex would consider dividing classes into groups by gender.", "Jamie, Marco, Jimmy and Alex would consider dividing classes into groups by gender."]}, {"instance_id": "samsum-116", "summary": "Nancy asks Vic and Phil about various social media, which prompts them to discuss and compare the different platforms. Phil is not into Instagram but likes Twitter. Vic prefers Facebook over Twitter and likes Instagram. Phil and Vic both don't use Tumblr. ", "summary_trees": ["# ::snt Nancy asks Vic and Phil about various social media, which prompts them to discuss and compare the different platforms.\n(p / prompt-01\n      :ARG0 (a / ask-01\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Nancy\"))\n            :ARG1 (m / media\n                  :mod (s / social)\n                  :mod (v / various))\n            :ARG2 (a2 / and\n                  :op1 (p3 / person\n                        :name (n2 / name\n                              :op1 \"Vic\"))\n                  :op2 (p4 / person\n                        :name (n3 / name\n                              :op1 \"Phil\"))))\n      :ARG1 (a3 / and\n            :op1 (d / discuss-01\n                  :ARG0 a2\n                  :ARG1 (p5 / platform\n                        :ARG1-of (d2 / differ-02)))\n            :op2 (c / compare-01\n                  :ARG0 a2\n                  :ARG1 p5)))", "# ::snt Phil is not into Instagram but likes Twitter.\n(c / contrast-01\n      :ARG1 (ii / into-00\n            :polarity -\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Phil\"))\n            :ARG1 (p2 / publication\n                  :name (n2 / name\n                        :op1 \"Instagram\")))\n      :ARG2 (l / like-01\n            :ARG0 p\n            :ARG1 (p3 / publication\n                  :name (n3 / name\n                        :op1 \"Twitter\"))))", "# ::snt Vic prefers Facebook over Twitter and likes Instagram.\n(a / and\n      :op1 (p / prefer-01\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Vic\"))\n            :ARG1 (p3 / publication\n                  :name (n2 / name\n                        :op1 \"Facebook\"))\n            :ARG2 (p4 / publication\n                  :name (n3 / name\n                        :op1 \"Twitter\")))\n      :op2 (l / like-01\n            :ARG0 p2\n            :ARG1 (p5 / publication\n                  :name (n4 / name\n                        :op1 \"Instagram\"))))", "# ::snt Phil and Vic both don't use Tumblr.\n(u / use-01\n      :polarity -\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Phil\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Vic\"))\n            :mod (b / both))\n      :ARG1 (p3 / product\n            :name (n3 / name\n                  :op1 \"Tumblr\")))"], "tree": ["(d / discuss-01\n   :ARG1 (p5 / platform\n             :ARG1 (d2 / differ-02)))", "(d / discuss-01\n   :ARG0 (a2 / and)\n   :ARG1 (p5 / platform\n             :ARG1 (d2 / differ-02)))", "(d / discuss-01\n   :ARG0 (a2 / and)\n   :ARG1 (p5 / platform\n             :ARG1 (d2 / differ-02)))", "(a / ask-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Nancy\"))\n   :ARG1 (m / media\n            :mod (s / social)\n            :mod (v / various)))", "(a / ask-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Nancy\"))\n   :ARG1 (m / media\n            :mod (s / social)\n            :mod (v / various))\n   :ARG2 (p3 / person\n             :name (n2 / name\n                       :op1 \"Vic\")))", "(a / ask-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Nancy\"))\n   :ARG1 (m / media\n            :mod (s / social)\n            :mod (v / various))\n   :ARG2 (p4 / person\n             :name (n3 / name\n                       :op1 \"Phil\")))", "(a / ask-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Nancy\"))\n   :ARG1 (m / media\n            :mod (s / social)\n            :mod (v / various))\n   :ARG2 (p3 / person\n             :name (n2 / name\n                       :op1 \"Vic\")))", "(a / ask-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Nancy\"))\n   :ARG1 (m / media\n            :mod (s / social)\n            :mod (v / various))\n   :ARG2 (p4 / person\n             :name (n3 / name\n                       :op1 \"Phil\")))", "(a / ask-01\n   :ARG1 (m / media\n            :mod (s / social)\n            :mod (v / various))\n   :ARG2 (a2 / and\n             :op1 (p3 / person\n                      :name (n2 / name\n                                :op1 \"Vic\"))\n             :op2 (p4 / person\n                      :name (n3 / name\n                                :op1 \"Phil\"))))", "(p / prompt-01\n   :ARG0 (a / ask-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Nancy\"))\n            :ARG1 (m / media\n                     :mod (s / social)\n                     :mod (v / various))\n            :ARG2 (p3 / person\n                      :name (n2 / name\n                                :op1 \"Vic\"))))", "(p / prompt-01\n   :ARG0 (a / ask-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Nancy\"))\n            :ARG1 (m / media\n                     :mod (s / social)\n                     :mod (v / various))\n            :ARG2 (p3 / person\n                      :name (n2 / name\n                                :op1 \"Vic\"))))", "(a / ask-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Nancy\"))\n   :ARG1 (m / media\n            :mod (s / social)\n            :mod (v / various))\n   :ARG2 (a2 / and\n             :op1 (p3 / person\n                      :name (n2 / name\n                                :op1 \"Vic\"))\n             :op2 (p4 / person\n                      :name (n3 / name\n                                :op1 \"Phil\"))))", "(a / ask-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Nancy\"))\n   :ARG1 (m / media\n            :mod (s / social)\n            :mod (v / various))\n   :ARG2 (a2 / and\n             :op1 (p3 / person\n                      :name (n2 / name\n                                :op1 \"Vic\"))\n             :op2 (p4 / person\n                      :name (n3 / name\n                                :op1 \"Phil\"))))", "(p / prompt-01\n   :ARG0 (a / ask-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Nancy\"))\n            :ARG1 (m / media\n                     :mod (s / social)\n                     :mod (v / various))\n            :ARG2 (p4 / person\n                      :name (n3 / name\n                                :op1 \"Phil\")))\n   :ARG1 (d / discuss-01\n            :ARG0 (a2 / and)\n            :ARG1 (p5 / platform\n                      :ARG1 (d2 / differ-02))\n            :op2 (c / compare-01\n                    :ARG0 a2\n                    :ARG1 p5)))", "(p / prompt-01\n   :ARG0 (a / ask-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Nancy\"))\n            :ARG1 (m / media\n                     :mod (s / social)\n                     :mod (v / various))\n            :ARG2 (p4 / person\n                      :name (n3 / name\n                                :op1 \"Phil\")))\n   :ARG1 (d / discuss-01\n            :ARG0 (a2 / and)\n            :ARG1 (p5 / platform\n                      :ARG1 (d2 / differ-02))\n            :op2 (c / compare-01\n                    :ARG0 a2\n                    :ARG1 p5)))", "(p / prompt-01\n   :ARG0 (a / ask-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Nancy\"))\n            :ARG1 (m / media\n                     :mod (s / social)\n                     :mod (v / various))\n            :ARG2 (a2 / and\n                      :op1 (p3 / person\n                               :name (n2 / name\n                                         :op1 \"Vic\"))\n                      :op2 (p4 / person\n                               :name (n3 / name\n                                         :op1 \"Phil\"))))\n   :ARG1 (a3 / and\n             :op1 (d / discuss-01\n                     :ARG0 a2\n                     :ARG1 (p5 / platform\n                               :ARG1 (d2 / differ-02)))\n             :op2 (c / compare-01\n                     :ARG0 a2\n                     :ARG1 p5)))", "(p / prompt-01\n   :ARG0 (a / ask-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Nancy\"))\n            :ARG1 (m / media\n                     :mod (s / social)\n                     :mod (v / various))\n            :ARG2 (a2 / and\n                      :op1 (p3 / person\n                               :name (n2 / name\n                                         :op1 \"Vic\"))\n                      :op2 (p4 / person\n                               :name (n3 / name\n                                         :op1 \"Phil\"))))\n   :ARG1 (a3 / and\n             :op1 (d / discuss-01\n                     :ARG0 a2\n                     :ARG1 (p5 / platform\n                               :ARG1 (d2 / differ-02)))\n             :op2 (c / compare-01\n                     :ARG0 a2\n                     :ARG1 p5)))", "(d / discuss-01\n   :ARG1 (p5 / platform\n             :ARG1 (d2 / differ-02)))", "(l / like-01\n   :ARG1 (p3 / publication\n             :name (n3 / name\n                       :op1 \"Twitter\")))", "(l / like-01\n   :ARG0 (p / person :name (n / name :op1 \"Phil\"))\n   :ARG1 (p3 / publication\n             :name (n3 / name\n                       :op1 \"Twitter\")))", "(l / like-01\n   :ARG0 (p / person :name (n / name :op1 \"Phil\"))\n   :ARG1 (p3 / publication\n             :name (n3 / name\n                       :op1 \"Twitter\")))", "(ii / into-00\n    :polarity -\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Phil\"))\n    :ARG1 (p2 / publication\n              :name (n2 / name\n                        :op1 \"Instagram\")))", "(c / contrast-01\n   :ARG1 (ii / into-00\n             :polarity -\n             :ARG0 (p / person\n                      :name (n / name\n                               :op1 \"Phil\"))\n             :ARG1 (p2 / publication\n                       :name (n2 / name\n                                 :op1 \"Instagram\")))\n   :ARG2 (l / like-01\n            :ARG0 p\n            :ARG1 (p3 / publication\n                      :name (n3 / name\n                                :op1 \"Twitter\"))))", "(d / discuss-01\n   :ARG1 (p5 / platform\n             :ARG1 (d2 / differ-02)))", "(l / like-01\n   :ARG1 (p5 / publication\n             :name (n4 / name\n                       :op1 \"Instagram\")))", "(l / like-01\n   :ARG0 (p2 / person :name (n / name :op1 \"Vic\"))\n   :ARG1 (p5 / publication\n             :name (n4 / name\n                       :op1 \"Instagram\")))", "(l / like-01\n   :ARG0 (p2 / person :name (n / name :op1 \"Vic\"))\n   :ARG1 (p5 / publication\n             :name (n4 / name\n                       :op1 \"Instagram\")))", "(p / prefer-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Vic\"))\n   :ARG1 (p3 / publication\n             :name (n2 / name\n                       :op1 \"Facebook\")))", "(p / prefer-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Vic\"))\n   :ARG1 (p3 / publication\n             :name (n2 / name\n                       :op1 \"Facebook\"))\n   :ARG2 (p4 / publication\n             :name (n3 / name\n                       :op1 \"Twitter\")))", "(p / prefer-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Vic\"))\n   :ARG1 (p3 / publication\n             :name (n2 / name\n                       :op1 \"Facebook\"))\n   :ARG2 (p4 / publication\n             :name (n3 / name\n                       :op1 \"Twitter\")))", "(d / discuss-01\n   :ARG1 (p5 / platform\n             :ARG1 (d2 / differ-02)))", "(u / use-01\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Phil\"))\n   :ARG1 (p3 / product\n             :name (n3 / name\n                       :op1 \"Tumblr\")))", "(u / use-01\n   :polarity -\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Vic\")\n             :mod (b / both))\n   :ARG1 (p3 / product\n             :name (n3 / name\n                       :op1 \"Tumblr\"))\n   :ARG1 p3)", "(u / use-01\n   :polarity -\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Phil\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Vic\"))\n            :mod (b / both))\n   :ARG1 (p3 / product\n             :name (n3 / name\n                       :op1 \"Tumblr\")))"], "smus": ["Discuss different platforms.", "The two will discuss different platforms.", "The two will discuss different platforms.", "Nancy asks about various social media.", "Nancy asks Vic about various social media.", "Nancy asks Phil about various social media.", "Nancy asks Vic about various social media.", "Nancy asks Phil about various social media.", "Vic and Phil, various social media asks", "Nancy asks Vic about various social media, prompts.", "Nancy asks Vic about various social media, prompts.", "Nancy asks Vic and Phil about the various social media.", "Nancy asks Vic and Phil about the various social media.", "Nancy asks Phil about various social media prompts them to discuss different platforms and compare them.", "Nancy asks Phil about various social media prompts them to discuss different platforms and compare them.", "Nancy asks Vic and Phil about various social media prompts them to discuss and compare different platforms.", "Nancy asks Vic and Phil about various social media prompts them to discuss and compare different platforms.", "Discuss different platforms.", "Like Twitter.", "Phil likes Twitter.", "Phil likes Twitter.", "Phil is not into Instagram.", "Phil is not into Instagram, but likes Twitter.", "Discuss different platforms.", "Likes Instagram.", "vic likes Instagram.", "vic likes Instagram.", "Vic prefers Facebook.", "Vic prefers Facebook over Twitter.", "Vic prefers Facebook over Twitter.", "Discuss different platforms.", "Phil doesn't use tumblr.", "Both Vic don't use tumblr.", "Both Phil and Vic don't use tumblr."]}, {"instance_id": "samsum-117", "summary": "Rob wants to start doing 30 minutes of physical activity every day. Greg is already doing 60 minutes. Anna wants to start exercising just like Rob. ", "summary_trees": ["# ::snt Rob wants to start doing 30 minutes of physical activity every day.\n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Rob\"))\n      :ARG1 (s / start-01\n            :ARG0 p\n            :ARG1 (d / do-02\n                  :ARG0 p\n                  :ARG1 (a / activity-06\n                        :ARG0 p\n                        :mod (p2 / physical)\n                        :duration (t / temporal-quantity\n                              :quant 30\n                              :unit (m / minute)))\n                  :frequency (r / rate-entity-91\n                        :ARG3 t\n                        :quant 1\n                        :unit (d2 / day)))))", "# ::snt Greg is already doing 60 minutes.\n(d / do-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Greg\"))\n      :ARG1 (t / temporal-quantity\n            :quant 60\n            :unit (m / minute))\n      :time (a / already))", "# ::snt Anna wants to start exercising just like Rob.\n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Anna\"))\n      :ARG1 (s / start-01\n            :ARG0 p\n            :ARG1 (e / exercise-02\n                  :ARG0 p)\n            :ARG1-of (r / resemble-01\n                  :ARG2 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Rob\"))\n                  :mod (j / just))))"], "tree": ["(r / rate-entity-91\n   :quant 1\n   :unit (d2 / day))", "(r / rate-entity-91\n   :ARG3 (t / temporal-quantity)\n   :quant 1\n   :unit (d2 / day))", "(a / activity-06\n   :mod (p2 / physical)\n   :duration (t / temporal-quantity\n                :quant 30\n                :unit (m / minute)))", "(d / do-02\n   :ARG1 (a / activity-06\n            :ARG0 (p / person :name (n / name :op1 \"Rob\"))\n            :mod (p2 / physical)\n            :duration (t / temporal-quantity\n                         :quant 30\n                         :unit (m / minute))))", "(d / do-02\n   :ARG0 (p / person :name (n / name :op1 \"Rob\"))\n   :ARG1 (a / activity-06\n            :ARG0 p\n            :mod (p2 / physical)\n            :duration (t / temporal-quantity\n                         :quant 30\n                         :unit (m / minute))))", "(s / start-01\n   :ARG1 (d / do-02\n            :ARG0 (p / person :name (n / name :op1 \"Rob\"))\n            :ARG1 (a / activity-06\n                     :ARG0 p\n                     :mod (p2 / physical)\n                     :duration (t / temporal-quantity\n                                  :quant 30\n                                  :unit (m / minute)))\n            :frequency (r / rate-entity-91\n                          :ARG3 t\n                          :quant 1\n                          :unit (d2 / day))))", "(s / start-01\n   :ARG0 (p / person :name (n / name :op1 \"Rob\"))\n   :ARG1 (d / do-02\n            :ARG0 p\n            :ARG1 (a / activity-06\n                     :ARG0 p\n                     :mod (p2 / physical)\n                     :duration (t / temporal-quantity\n                                  :quant 30\n                                  :unit (m / minute)))\n            :frequency (r / rate-entity-91\n                          :ARG3 t\n                          :quant 1\n                          :unit (d2 / day))))", "(s / start-01\n   :ARG0 (p / person :name (n / name :op1 \"Rob\"))\n   :ARG1 (d / do-02\n            :ARG0 p\n            :ARG1 (a / activity-06\n                     :ARG0 p\n                     :mod (p2 / physical)\n                     :duration (t / temporal-quantity\n                                  :quant 30\n                                  :unit (m / minute)))\n            :frequency (r / rate-entity-91\n                          :ARG3 t\n                          :quant 1\n                          :unit (d2 / day))))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rob\"))\n   :ARG1 (s / start-01\n            :ARG0 p\n            :ARG1 (d / do-02\n                     :ARG0 p\n                     :ARG1 (a / activity-06\n                              :ARG0 p\n                              :mod (p2 / physical)\n                              :duration (t / temporal-quantity\n                                           :quant 30\n                                           :unit (m / minute)))\n                     :frequency (r / rate-entity-91\n                                   :ARG3 t\n                                   :quant 1\n                                   :unit (d2 / day)))))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rob\"))\n   :ARG1 (s / start-01\n            :ARG0 p\n            :ARG1 (d / do-02\n                     :ARG0 p\n                     :ARG1 (a / activity-06\n                              :ARG0 p\n                              :mod (p2 / physical)\n                              :duration (t / temporal-quantity\n                                           :quant 30\n                                           :unit (m / minute)))\n                     :frequency (r / rate-entity-91\n                                   :ARG3 t\n                                   :quant 1\n                                   :unit (d2 / day)))))", "(d / do-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Greg\")))", "(d / do-02\n   :ARG1 (t / temporal-quantity\n            :quant 60\n            :unit (m / minute)))", "(d / do-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Greg\"))\n   :ARG1 (t / temporal-quantity\n            :quant 60\n            :unit (m / minute)))", "(d / do-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Greg\"))\n   :ARG1 (t / temporal-quantity\n            :quant 60\n            :unit (m / minute))\n   :time (a / already))", "(d / do-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Greg\"))\n   :ARG1 (t / temporal-quantity\n            :quant 60\n            :unit (m / minute))\n   :time (a / already))", "(s / start-01\n   :ARG1 (e / exercise-02\n            :ARG0 (p / person :name (n / name :op1 \"Anna\"))))", "(s / start-01\n   :ARG0 (p / person :name (n / name :op1 \"Anna\"))\n   :ARG1 (e / exercise-02\n            :ARG0 p))", "(r / resemble-01\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Rob\"))\n   :mod (j / just))", "(s / start-01\n   :ARG0 (p / person :name (n / name :op1 \"Anna\"))\n   :ARG1 (e / exercise-02\n            :ARG0 p)\n   :ARG1 (r / resemble-01\n            :ARG2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Rob\"))\n            :mod (j / just)))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Anna\"))\n   :ARG1 (s / start-01\n            :ARG0 p\n            :ARG1 (e / exercise-02\n                     :ARG0 p)\n            :ARG1 (r / resemble-01\n                     :ARG2 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Rob\"))\n                     :mod (j / just))))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Anna\"))\n   :ARG1 (s / start-01\n            :ARG0 p\n            :ARG1 (e / exercise-02\n                     :ARG0 p)\n            :ARG1 (r / resemble-01\n                     :ARG2 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Rob\"))\n                     :mod (j / just))))"], "smus": ["Every day.", "Every day.", "30 minutes of physical activity.", "Rob was doing a physical activity for 30 minutes.", "Rob was doing a physical activity for 30 minutes.", "Rob will start doing 30 minutes of physical activity a day.", "Rob will start doing 30 minutes of physical activity a day.", "Rob will start doing 30 minutes of physical activity a day.", "Rob wants to start doing 30 minutes of physical activity a day.", "Rob wants to start doing 30 minutes of physical activity a day.", "Greg is doing.", "Doing 60 minutes.", "Greg was doing 60 minutes.", "Greg is already doing 60 minutes.", "Greg is already doing 60 minutes.", "Anna, start exercising.", "Anna, start exercising.", "Just like Rob.", "Anna would start exercising just like Rob.", "Anna wants to start exercising just like Rob.", "Anna wants to start exercising just like Rob."]}, {"instance_id": "samsum-118", "summary": "Patricia is recommending a fair-trade brand to Elle and Florence.", "summary_trees": ["# ::snt Patricia is recommending a fair-trade brand to Elle and Florence.\n(r / recommend-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Patricia\"))\n      :ARG1 (b / brand\n            :mod (t / trade-01\n                  :ARG1-of (f / fair-01)))\n      :ARG2 (a / and\n            :op1 (c / company\n                  :name (n2 / name\n                        :op1 \"Elle\"))\n            :op2 (c2 / company\n                  :name (n3 / name\n                        :op1 \"Florence\"))))"], "tree": ["(r / recommend-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Patricia\"))\n   :ARG1 (b / brand\n            :mod (t / trade-01\n                    :ARG1 (f / fair-01)))\n   :ARG2 (c / company\n            :name (n2 / name\n                      :op1 \"Elle\")))", "(r / recommend-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Patricia\"))\n   :ARG1 (b / brand\n            :mod (t / trade-01\n                    :ARG1 (f / fair-01)))\n   :ARG2 (a / and\n            :op1 (c / company\n                    :name (n2 / name\n                              :op1 \"Elle\"))\n            :op2 (c2 / company\n                     :name (n3 / name\n                               :op1 \"Florence\"))))"], "smus": ["Patricia recommends Elle as a fair trade brand.", "Patricia recommends Elle and Florence as a fair trade brand."]}, {"instance_id": "samsum-119", "summary": "Brandon has lost his credit card and blocked it in the bank. It will take some time before he gets a new one, and he needs money. Luke is broke, but Ian will lend Brandon some money.", "summary_trees": ["# ::snt Brandon has lost his credit card and blocked it in the bank.\n(a / and\n      :op1 (l / lose-02\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Brandon\"))\n            :ARG1 (c / card\n                  :mod (c2 / credit)\n                  :poss p))\n      :op2 (b / block-01\n            :ARG0 p\n            :ARG1 c\n            :location (b2 / bank)))", "# ::snt It will take some time before he gets a new one, and he needs money.\n(a / and\n      :op1 (t / take-10\n            :ARG0 (g / get-01\n                  :ARG0 (h / he)\n                  :ARG1 (o / one\n                        :ARG1-of (n / new-01)))\n            :ARG1 (t2 / time\n                  :quant (s / some))\n            :ARG2 h)\n      :op2 (n2 / need-01\n            :ARG0 h\n            :ARG1 (m / money)))", "# ::snt Luke is broke, but Ian will lend Brandon some money.\n(h / have-concession-91\n      :ARG1 (l / lend-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Ian\"))\n            :ARG1 (m / money\n                  :quant (s / some))\n            :ARG2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Brandon\")))\n      :ARG2 (b / broke-23\n            :ARG1 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Luke\"))))"], "tree": ["(b / block-01\n   :ARG0 (p / person :name (n / name :op1 \"Brandon\"))\n   :ARG1 (c / card)\n   :location (b2 / bank))", "(l / lose-02\n   :ARG1 (c / card\n            :mod (c2 / credit)\n            :poss (p / person :name (n / name :op1 \"Brandon\"))))", "(l / lose-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Brandon\"))\n   :ARG1 (c / card\n            :mod (c2 / credit)\n            :poss p))", "(l / lose-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Brandon\"))\n   :ARG1 (c / card\n            :mod (c2 / credit)\n            :poss p))", "(n2 / need-01\n    :ARG0 (h / he)\n    :ARG1 (m / money))", "(n2 / need-01\n    :ARG0 (h / he)\n    :ARG1 (m / money))", "(t / take-10\n   :ARG0 (g / get-01\n            :ARG0 (h / he)\n            :ARG1 (o / one\n                     :ARG1 (n / new-01)))\n   :ARG1 (t2 / time\n             :quant (s / some)))", "(t / take-10\n   :ARG0 (g / get-01\n            :ARG0 (h / he)\n            :ARG1 (o / one\n                     :ARG1 (n / new-01)))\n   :ARG1 (t2 / time\n             :quant (s / some))\n   :ARG2 h)", "(t / take-10\n   :ARG0 (g / get-01\n            :ARG0 (h / he)\n            :ARG1 (o / one\n                     :ARG1 (n / new-01)))\n   :ARG1 (t2 / time\n             :quant (s / some))\n   :ARG2 h)", "(b / broke-23\n   :ARG1 (p3 / person\n             :name (n3 / name\n                       :op1 \"Luke\")))", "(l / lend-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ian\"))\n   :ARG1 (m / money\n            :quant (s / some))\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Brandon\")))", "(h / have-concession-91\n   :ARG1 (l / lend-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Ian\"))\n            :ARG1 (m / money\n                     :quant (s / some))\n            :ARG2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Brandon\")))\n   :ARG2 (b / broke-23\n            :ARG1 (p3 / person\n                      :name (n3 / name\n                                :op1 \"Luke\"))))"], "smus": ["Brand blocked the card at the bank.", "Brand's credit card was lost.", "Brand has lost his credit card.", "Brand has lost his credit card.", "He needs mone.", "He needs mone.", "It will take some time before he gets a new one.", "It will take some time before he gets a new one.", "It will take some time before he gets a new one.", "Luke is broke.", "Ian will lend some money to Brandon.", "Luke is broke but Ian did lend Brandon some money."]}, {"instance_id": "samsum-120", "summary": "Ellie's class is in 342 on the second floor.", "summary_trees": ["# ::snt Ellie's class is in 342 on the second floor.\n(b / be-located-at-91\n      :ARG1 (c / class\n            :poss (p / person\n                  :name (n / name\n                        :op1 \"Ellie\")))\n      :ARG2 342\n      :location (f / floor\n            :ord (o / ordinal-entity\n                  :value 2)))"], "tree": ["(b / be-located-at-91\n   :location (f / floor\n                :ord (o / ordinal-entity\n                        :value 2)))", "(b / be-located-at-91\n   :ARG1 (c / class\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Ellie\")))\n   :ARG2 342)", "(b / be-located-at-91\n   :ARG1 (c / class\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Ellie\")))\n   :ARG2 342\n   :location (f / floor\n                :ord (o / ordinal-entity\n                        :value 2)))"], "smus": ["on the second floor.", "Ellie's class is 342.", "Ellie's class is 342 on the 2nd floor."]}, {"instance_id": "samsum-121", "summary": "Josh thinks Stephen accidentally took his notebook. Jack has it and will bring it tomorrow.", "summary_trees": ["# ::snt Josh thinks Stephen accidentally took his notebook.\n(t / think-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Josh\"))\n      :ARG1 (t2 / take-01\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Stephen\"))\n            :ARG1 (n3 / notebook\n                  :poss p)\n            :manner (a / accidental)))", "# ::snt Jack has it and will bring it tomorrow.\n(a / and\n      :op1 (h / have-03\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Jack\"))\n            :ARG1 (ii / it))\n      :op2 (b / bring-01\n            :ARG0 p\n            :ARG1 ii\n            :time (t / tomorrow)))"], "tree": ["(t2 / take-01\n    :ARG0 (p2 / person\n              :name (n2 / name\n                        :op1 \"Stephen\"))\n    :ARG1 (n3 / notebook\n              :poss (p / person :name (n / name :op1 \"Josh\"))))", "(t2 / take-01\n    :ARG0 (p2 / person\n              :name (n2 / name\n                        :op1 \"Stephen\"))\n    :ARG1 (n3 / notebook\n              :poss (p / person :name (n / name :op1 \"Josh\")))\n    :manner (a / accidental))", "(b / bring-01\n   :ARG0 (p / person :name (n / name :op1 \"Jack\"))\n   :ARG1 (ii / it)\n   :time (t / tomorrow))", "(h / have-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jack\"))\n   :ARG1 (ii / it))", "(h / have-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jack\"))\n   :ARG1 (ii / it))"], "smus": ["Stephen took Josh's notebook.", "Stephen accidentally took Josh's notebook.", "Jack will bring it tomorrow.", "Jack has it.", "Jack has it."]}, {"instance_id": "samsum-122", "summary": "Patrycja and Inez enjoyed the Italian evening. Gosia chose a great place. Alicja hasn't been to the new restaurant. They all want a Korean evening on Wednesday in two weeks time.", "summary_trees": ["# ::snt Patrycja and Inez enjoyed the Italian evening.\n(e / enjoy-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Patrycja\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Inez\")))\n      :ARG1 (e2 / evening\n            :mod (c / country\n                  :name (n3 / name\n                        :op1 \"Italy\"))))", "# ::snt Gosia chose a great place.\n(c / choose-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Gosia\"))\n      :ARG1 (p2 / place\n            :mod (g / great)))", "# ::snt Alicja hasn't been to the new restaurant.\n(g / go-02\n      :polarity -\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Alicja\"))\n      :ARG4 (r / restaurant\n            :ARG1-of (n2 / new-01)))", "# ::snt They all want a Korean evening on Wednesday in two weeks time.\n(w / want-01\n      :ARG0 (t / they\n            :mod (a / all))\n      :ARG1 (e / evening\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"Korea\"))\n            :time (d / date-entity\n                  :weekday (w2 / wednesday)\n                  :time (a2 / after\n                        :op1 (n2 / now)\n                        :quant (t2 / temporal-quantity\n                              :quant 2\n                              :unit (w3 / week))))))"], "tree": ["(e / enjoy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Patrycja\"))\n   :ARG1 (e2 / evening\n             :mod (c / country\n                     :name (n3 / name\n                               :op1 \"Italy\"))))", "(e / enjoy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Patrycja\"))\n   :ARG1 (e2 / evening\n             :mod (c / country\n                     :name (n3 / name\n                               :op1 \"Italy\"))))", "(e / enjoy-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Inez\"))\n   :ARG1 (e2 / evening\n             :mod (c / country\n                     :name (n3 / name\n                               :op1 \"Italy\")))\n   :ARG1 e2)", "(e / enjoy-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Inez\"))\n   :ARG1 (e2 / evening\n             :mod (c / country\n                     :name (n3 / name\n                               :op1 \"Italy\")))\n   :ARG1 e2)", "(e / enjoy-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Patrycja\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Inez\")))\n   :ARG1 (e2 / evening\n             :mod (c / country\n                     :name (n3 / name\n                               :op1 \"Italy\"))))", "(e / enjoy-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Patrycja\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Inez\")))\n   :ARG1 (e2 / evening\n             :mod (c / country\n                     :name (n3 / name\n                               :op1 \"Italy\"))))", "(c / choose-01\n   :ARG1 (p2 / place\n             :mod (g / great)))", "(c / choose-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Gosia\")))", "(c / choose-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Gosia\"))\n   :ARG1 (p2 / place\n             :mod (g / great)))", "(c / choose-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Gosia\"))\n   :ARG1 (p2 / place\n             :mod (g / great)))", "(g / go-02\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Alicja\"))\n   :ARG4 (r / restaurant\n            :ARG1 (n2 / new-01)))", "(w / want-01\n   :ARG0 (t / they\n            :mod (a / all))\n   :ARG1 (e / evening\n            :mod (c / country\n                    :name (n / name\n                             :op1 \"Korea\"))\n            :time (d / date-entity\n                     :weekday (w2 / wednesday)\n                     :time (a2 / after\n                               :op1 (n2 / now)\n                               :quant (t2 / temporal-quantity\n                                          :quant 2\n                                          :unit (w3 / week))))))", "(w / want-01\n   :ARG0 (t / they\n            :mod (a / all))\n   :ARG1 (e / evening\n            :mod (c / country\n                    :name (n / name\n                             :op1 \"Korea\"))\n            :time (d / date-entity\n                     :weekday (w2 / wednesday)\n                     :time (a2 / after\n                               :op1 (n2 / now)\n                               :quant (t2 / temporal-quantity\n                                          :quant 2\n                                          :unit (w3 / week))))))"], "smus": ["Patrycja enjoyed an Italian evening.", "Patrycja enjoyed an Italian evening.", "Inez enjoyed an Italian evening.", "Inez enjoyed an Italian evening.", "Patrycja and Inez enjoyed an Italian evening.", "Patrycja and Inez enjoyed an Italian evening.", "The choice was great place.", "Gosia chose.", "Gosia chose a great place.", "Gosia chose a great place.", "Alicja didn't go to the new restaurant.", "They all want a Korean evening on Wednesday in the next two weeks.", "They all want a Korean evening on Wednesday in the next two weeks."]}, {"instance_id": "samsum-123", "summary": "Both Claire and Linda are making curry for dinner. ", "summary_trees": ["# ::snt Both Claire and Linda are making curry for dinner.\n(m / make-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Claire\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Linda\")))\n      :ARG1 (c / curry)\n      :ARG3 (d / dinner))"], "tree": ["(m / make-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Claire\"))\n   :ARG1 (c / curry))", "(m / make-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Linda\"))\n   :ARG1 (c / curry)\n   :ARG1 c)", "(m / make-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Claire\"))\n   :ARG1 (c / curry)\n   :ARG3 (d / dinner))", "(m / make-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Linda\"))\n   :ARG1 (c / curry)\n   :ARG1 c\n   :ARG3 (d / dinner))", "(m / make-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Claire\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Linda\")))\n   :ARG1 (c / curry))", "(m / make-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Claire\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Linda\")))\n   :ARG1 (c / curry)\n   :ARG3 (d / dinner))"], "smus": ["Claire is making curry.", "Linda is making curry from it.", "Claire is making curry for dinner.", "Linda is making curry for dinner.", "Claire and Linda are making curry.", "Claire and Linda are making curry for dinner."]}, {"instance_id": "samsum-124", "summary": "Mike wants someone else to do the washing up this time. Sara agrees, but when she returns from the cinema she is at with Jack.", "summary_trees": ["# ::snt Mike wants someone else to do the washing up this time.\n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Mike\"))\n      :ARG1 (w2 / wash-up-02\n            :ARG0 (s / someone\n                  :mod (e / else))\n            :time (t / this)))", "# ::snt Sara agrees, but when she returns from the cinema she is at with Jack.\n(c / contrast-01\n      :ARG1 (a / agree-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Sara\")))\n      :ARG2 (a2 / accompany-01\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Jack\"))\n            :ARG1 p\n            :time (r / return-01\n                  :ARG1 p\n                  :ARG3 (c2 / cinema))))"], "tree": ["(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mike\"))\n   :ARG1 (w2 / wash-up-02\n             :ARG0 (s / someone\n                      :mod (e / else))\n             :time (t / this)))", "(r / return-01\n   :ARG1 (p / person :name (n / name :op1 \"Sara\"))\n   :ARG3 (c2 / cinema))", "(r / return-01\n   :ARG1 (p / person :name (n / name :op1 \"Sara\"))\n   :ARG3 (c2 / cinema))", "(a / agree-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sara\")))", "(a2 / accompany-01\n    :ARG0 (p2 / person\n              :name (n2 / name\n                        :op1 \"Jack\")))", "(a / agree-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sara\")))", "(a2 / accompany-01\n    :ARG0 (p2 / person\n              :name (n2 / name\n                        :op1 \"Jack\"))\n    :ARG1 (p / person :name (n / name :op1 \"Sara\")))", "(a2 / accompany-01\n    :ARG0 (p2 / person\n              :name (n2 / name\n                        :op1 \"Jack\"))\n    :ARG1 (p / person :name (n / name :op1 \"Sara\"))\n    :time (r / return-01\n             :ARG1 p\n             :ARG3 (c2 / cinema)))", "(a2 / accompany-01\n    :ARG0 (p2 / person\n              :name (n2 / name\n                        :op1 \"Jack\"))\n    :ARG1 (p / person :name (n / name :op1 \"Sara\"))\n    :time (r / return-01\n             :ARG1 p\n             :ARG3 (c2 / cinema)))", "(c / contrast-01\n   :ARG1 (a / agree-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Sara\")))\n   :ARG2 (a2 / accompany-01\n             :ARG0 (p2 / person\n                       :name (n2 / name\n                                 :op1 \"Jack\"))\n             :ARG1 p\n             :time (r / return-01\n                      :ARG1 p\n                      :ARG3 (c2 / cinema))))", "(c / contrast-01\n   :ARG1 (a / agree-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Sara\")))\n   :ARG2 (a2 / accompany-01\n             :ARG0 (p2 / person\n                       :name (n2 / name\n                                 :op1 \"Jack\"))\n             :ARG1 p\n             :time (r / return-01\n                      :ARG1 p\n                      :ARG3 (c2 / cinema))))"], "smus": ["Mike wants someone else to wash this up.", "Sara returns to the cinema.", "Sara returns to the cinema.", "Sara agrees.", "Jack with him.", "Sara agrees.", "Jack and Sara were with each other.", "When Jack returns to the cinema, he will be with Sara.", "When Jack returns to the cinema, he will be with Sara.", "Sara agrees but when she returns to the cinema, Jack will accompany her.", "Sara agrees but when she returns to the cinema, Jack will accompany her."]}, {"instance_id": "samsum-125", "summary": "Next week is Wharton's birthday. Augustine, Darlene, Heather and Walker want to buy him a paper shredder. Walker will make sure if Wharton really wants it. ", "summary_trees": ["# ::snt Next week is Wharton's birthday.\n(b / birthday\n      :poss (p / person\n            :name (n / name\n                  :op1 \"Wharton\"))\n      :time (w / week\n            :mod (n2 / next)))", "# ::snt Augustine, Darlene, Heather and Walker want to buy him a paper shredder.\n(w / want-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Augustine\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Darlene\"))\n            :op3 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Heather\"))\n            :op4 (p4 / person\n                  :name (n4 / name\n                        :op1 \"Walker\")))\n      :ARG1 (b / buy-01\n            :ARG0 a\n            :ARG1 (t / thing\n                  :instrument-of (s / shred-01\n                        :ARG1 (p5 / paper)))))", "# ::snt Walker will make sure if Wharton really wants it.\n(e / ensure-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Walker\"))\n      :condition (w / want-01\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Wharton\"))\n            :ARG1 (ii / it)\n            :ARG1-of (r / real-04)))"], "tree": ["(b / birthday\n   :poss (p / person\n            :name (n / name\n                     :op1 \"Wharton\"))\n   :time (w / week\n            :mod (n2 / next)))", "(b / buy-01\n   :ARG0 (a / and)\n   :ARG1 (t / thing\n            :instrument (s / shred-01\n                           :ARG1 (p5 / paper))))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Augustine\"))\n   :ARG1 (b / buy-01\n            :ARG0 p\n            :ARG1 (t / thing\n                     :instrument (s / shred-01\n                                    :ARG1 (p5 / paper)))))", "(w / want-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Darlene\"))\n   :ARG1 (b / buy-01\n            :ARG0 p2\n            :ARG1 (t / thing\n                     :instrument (s / shred-01\n                                    :ARG1 (p5 / paper)))))", "(w / want-01\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Heather\"))\n   :ARG1 (b / buy-01\n            :ARG0 p3\n            :ARG1 (t / thing\n                     :instrument (s / shred-01\n                                    :ARG1 (p5 / paper)))))", "(w / want-01\n   :ARG0 (p4 / person\n             :name (n4 / name\n                       :op1 \"Walker\"))\n   :ARG1 (b / buy-01\n            :ARG0 p4\n            :ARG1 (t / thing\n                     :instrument (s / shred-01\n                                    :ARG1 (p5 / paper))))\n   :ARG1 b)", "(w / want-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Augustine\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Darlene\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Heather\"))\n            :op4 (p4 / person\n                     :name (n4 / name\n                               :op1 \"Walker\")))\n   :ARG1 (b / buy-01\n            :ARG0 a\n            :ARG1 (t / thing\n                     :instrument (s / shred-01\n                                    :ARG1 (p5 / paper)))))"], "smus": ["Wharton's birthday is next week.", "and buy paper shredding.", "Augustine want's to buy a paper shredder.", "Darlene want's to buy a paper shredder.", "Heather want's to buy a paper shredder.", "Walker wants to buy a paper shredder.", "Augustine, Darlene, Heather and Walker want to buy a paper shredder."]}, {"instance_id": "samsum-126", "summary": "Jesse, Melvin, Lee and Maxine are going to take part in the Christmas charity action of the foundation called Refuge, which helps women and children who escape from abuse.", "summary_trees": ["# ::snt Jesse, Melvin, Lee and Maxine are going to take part in the Christmas charity action of the foundation called Refuge, which helps women and children who escape from abuse.\n(p / participate-01\n      :ARG0 (a / and\n            :op1 (p2 / person\n                  :name (n / name\n                        :op1 \"Jesse\"))\n            :op2 (p3 / person\n                  :name (n2 / name\n                        :op1 \"Melvin\"))\n            :op3 (p4 / person\n                  :name (n3 / name\n                        :op1 \"Lee\"))\n            :op4 (p5 / person\n                  :name (n4 / name\n                        :op1 \"Maxine\")))\n      :ARG1 (a2 / act-02\n            :ARG0 (f / foundation\n                  :name (n5 / name\n                        :op1 \"Refuge\")\n                  :ARG0-of (h / help-01\n                        :ARG1 (e / escape-01\n                              :ARG0 (a3 / and\n                                    :op1 (w / woman)\n                                    :op2 (c / child))\n                              :ARG1 (a4 / abuse-01\n                                    :ARG1 a3))))\n            :mod (c2 / charity)\n            :mod (f2 / festival\n                  :name (n6 / name\n                        :op1 \"Christmas\"))))"], "tree": ["(e / escape-01\n   :ARG0 (w / woman)\n   :ARG1 (a4 / abuse-01\n             :ARG1 w))", "(e / escape-01\n   :ARG0 (w / woman)\n   :ARG1 (a4 / abuse-01\n             :ARG1 w))", "(p / participate-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"Melvin\")))", "(p / participate-01\n   :ARG0 (p4 / person\n             :name (n3 / name\n                       :op1 \"Lee\")))", "(p / participate-01\n   :ARG0 (p5 / person\n             :name (n4 / name\n                       :op1 \"Maxine\")))", "(e / escape-01\n   :ARG0 (a3 / and\n             :op1 (w / woman)\n             :op2 (c / child)))", "(e / escape-01\n   :ARG0 (c / child)\n   :ARG1 (a4 / abuse-01\n             :ARG1 c)\n   :ARG1 a4)", "(e / escape-01\n   :ARG0 (c / child)\n   :ARG1 (a4 / abuse-01\n             :ARG1 c)\n   :ARG1 a4)", "(a2 / act-02\n    :mod (c2 / charity)\n    :mod (f2 / festival\n             :name (n6 / name\n                       :op1 \"Christmas\")))", "(h / help-01\n   :ARG1 (e / escape-01\n            :ARG0 (w / woman)\n            :ARG1 (a4 / abuse-01\n                      :ARG1 w)))", "(h / help-01\n   :ARG1 (e / escape-01\n            :ARG0 (c / child)\n            :ARG1 (a4 / abuse-01\n                      :ARG1 c)\n            :ARG1 a4))", "(e / escape-01\n   :ARG0 (a3 / and\n             :op1 (w / woman)\n             :op2 (c / child))\n   :ARG1 (a4 / abuse-01\n             :ARG1 a3))", "(e / escape-01\n   :ARG0 (a3 / and\n             :op1 (w / woman)\n             :op2 (c / child))\n   :ARG1 (a4 / abuse-01\n             :ARG1 a3))", "(h / help-01\n   :ARG1 (e / escape-01\n            :ARG0 (a3 / and\n                      :op1 (w / woman)\n                      :op2 (c / child))\n            :ARG1 (a4 / abuse-01\n                      :ARG1 a3)))", "(a2 / act-02\n    :ARG0 (f / foundation\n             :name (n5 / name\n                       :op1 \"Refuge\")\n             :ARG0 (h / help-01\n                      :ARG1 (e / escape-01\n                               :ARG0 (w / woman)\n                               :ARG1 (a4 / abuse-01\n                                         :ARG1 w)))))", "(a2 / act-02\n    :ARG0 (f / foundation\n             :name (n5 / name\n                       :op1 \"Refuge\")\n             :ARG0 (h / help-01\n                      :ARG1 (e / escape-01\n                               :ARG0 (c / child)\n                               :ARG1 (a4 / abuse-01\n                                         :ARG1 c)\n                               :ARG1 a4))))", "(a2 / act-02\n    :ARG0 (f / foundation\n             :name (n5 / name\n                       :op1 \"Refuge\")\n             :ARG0 (h / help-01\n                      :ARG1 (e / escape-01\n                               :ARG0 (a3 / and\n                                         :op1 (w / woman)\n                                         :op2 (c / child))\n                               :ARG1 (a4 / abuse-01\n                                         :ARG1 a3)))))", "(a2 / act-02\n    :ARG0 (f / foundation\n             :name (n5 / name\n                       :op1 \"Refuge\")\n             :ARG0 (h / help-01\n                      :ARG1 (e / escape-01\n                               :ARG0 (w / woman)\n                               :ARG1 (a4 / abuse-01\n                                         :ARG1 w))))\n    :mod (c2 / charity)\n    :mod (f2 / festival\n             :name (n6 / name\n                       :op1 \"Christmas\")))", "(p / participate-01\n   :ARG0 (a / and\n            :op1 (p2 / person\n                     :name (n / name\n                              :op1 \"Jesse\"))\n            :op2 (p3 / person\n                     :name (n2 / name\n                               :op1 \"Melvin\"))\n            :op3 (p4 / person\n                     :name (n3 / name\n                               :op1 \"Lee\"))\n            :op4 (p5 / person\n                     :name (n4 / name\n                               :op1 \"Maxine\"))))", "(a2 / act-02\n    :ARG0 (f / foundation\n             :name (n5 / name\n                       :op1 \"Refuge\")\n             :ARG0 (h / help-01\n                      :ARG1 (e / escape-01\n                               :ARG0 (c / child)\n                               :ARG1 (a4 / abuse-01\n                                         :ARG1 c)\n                               :ARG1 a4)))\n    :mod (c2 / charity)\n    :mod (f2 / festival\n             :name (n6 / name\n                       :op1 \"Christmas\")))", "(a2 / act-02\n    :ARG0 (f / foundation\n             :name (n5 / name\n                       :op1 \"Refuge\")\n             :ARG0 (h / help-01\n                      :ARG1 (e / escape-01\n                               :ARG0 (a3 / and\n                                         :op1 (w / woman)\n                                         :op2 (c / child))\n                               :ARG1 (a4 / abuse-01\n                                         :ARG1 a3))))\n    :mod (c2 / charity)\n    :mod (f2 / festival\n             :name (n6 / name\n                       :op1 \"Christmas\")))", "(p / participate-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Jesse\"))\n   :ARG1 (a2 / act-02\n             :ARG0 (f / foundation\n                      :name (n5 / name\n                                :op1 \"Refuge\")\n                      :ARG0 (h / help-01\n                               :ARG1 (e / escape-01\n                                        :ARG0 (w / woman)\n                                        :ARG1 (a4 / abuse-01\n                                                  :ARG1 w))))\n             :mod (c2 / charity)\n             :mod (f2 / festival\n                      :name (n6 / name\n                                :op1 \"Christmas\"))))", "(p / participate-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"Melvin\"))\n   :ARG1 (a2 / act-02\n             :ARG0 (f / foundation\n                      :name (n5 / name\n                                :op1 \"Refuge\")\n                      :ARG0 (h / help-01\n                               :ARG1 (e / escape-01\n                                        :ARG0 (w / woman)\n                                        :ARG1 (a4 / abuse-01\n                                                  :ARG1 w))))\n             :mod (c2 / charity)\n             :mod (f2 / festival\n                      :name (n6 / name\n                                :op1 \"Christmas\"))))", "(p / participate-01\n   :ARG0 (p4 / person\n             :name (n3 / name\n                       :op1 \"Lee\"))\n   :ARG1 (a2 / act-02\n             :ARG0 (f / foundation\n                      :name (n5 / name\n                                :op1 \"Refuge\")\n                      :ARG0 (h / help-01\n                               :ARG1 (e / escape-01\n                                        :ARG0 (w / woman)\n                                        :ARG1 (a4 / abuse-01\n                                                  :ARG1 w))))\n             :mod (c2 / charity)\n             :mod (f2 / festival\n                      :name (n6 / name\n                                :op1 \"Christmas\"))))", "(p / participate-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Jesse\"))\n   :ARG1 (a2 / act-02\n             :ARG0 (f / foundation\n                      :name (n5 / name\n                                :op1 \"Refuge\")\n                      :ARG0 (h / help-01\n                               :ARG1 (e / escape-01\n                                        :ARG0 (w / woman)\n                                        :ARG1 (a4 / abuse-01\n                                                  :ARG1 w))))\n             :mod (c2 / charity)\n             :mod (f2 / festival\n                      :name (n6 / name\n                                :op1 \"Christmas\"))))", "(p / participate-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"Melvin\"))\n   :ARG1 (a2 / act-02\n             :ARG0 (f / foundation\n                      :name (n5 / name\n                                :op1 \"Refuge\")\n                      :ARG0 (h / help-01\n                               :ARG1 (e / escape-01\n                                        :ARG0 (w / woman)\n                                        :ARG1 (a4 / abuse-01\n                                                  :ARG1 w))))\n             :mod (c2 / charity)\n             :mod (f2 / festival\n                      :name (n6 / name\n                                :op1 \"Christmas\"))))", "(p / participate-01\n   :ARG0 (p4 / person\n             :name (n3 / name\n                       :op1 \"Lee\"))\n   :ARG1 (a2 / act-02\n             :ARG0 (f / foundation\n                      :name (n5 / name\n                                :op1 \"Refuge\")\n                      :ARG0 (h / help-01\n                               :ARG1 (e / escape-01\n                                        :ARG0 (w / woman)\n                                        :ARG1 (a4 / abuse-01\n                                                  :ARG1 w))))\n             :mod (c2 / charity)\n             :mod (f2 / festival\n                      :name (n6 / name\n                                :op1 \"Christmas\"))))", "(p / participate-01\n   :ARG0 (p5 / person\n             :name (n4 / name\n                       :op1 \"Maxine\"))\n   :ARG1 (a2 / act-02\n             :ARG0 (f / foundation\n                      :name (n5 / name\n                                :op1 \"Refuge\")\n                      :ARG0 (h / help-01\n                               :ARG1 (e / escape-01\n                                        :ARG0 (w / woman)\n                                        :ARG1 (a4 / abuse-01\n                                                  :ARG1 w))))\n             :mod (c2 / charity)\n             :mod (f2 / festival\n                      :name (n6 / name\n                                :op1 \"Christmas\")))\n   :ARG1 a2)", "(p / participate-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Jesse\"))\n   :ARG1 (a2 / act-02\n             :ARG0 (f / foundation\n                      :name (n5 / name\n                                :op1 \"Refuge\")\n                      :ARG0 (h / help-01\n                               :ARG1 (e / escape-01\n                                        :ARG0 (c / child)\n                                        :ARG1 (a4 / abuse-01\n                                                  :ARG1 c)\n                                        :ARG1 a4)))\n             :mod (c2 / charity)\n             :mod (f2 / festival\n                      :name (n6 / name\n                                :op1 \"Christmas\"))))", "(p / participate-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"Melvin\"))\n   :ARG1 (a2 / act-02\n             :ARG0 (f / foundation\n                      :name (n5 / name\n                                :op1 \"Refuge\")\n                      :ARG0 (h / help-01\n                               :ARG1 (e / escape-01\n                                        :ARG0 (c / child)\n                                        :ARG1 (a4 / abuse-01\n                                                  :ARG1 c)\n                                        :ARG1 a4)))\n             :mod (c2 / charity)\n             :mod (f2 / festival\n                      :name (n6 / name\n                                :op1 \"Christmas\"))))", "(p / participate-01\n   :ARG0 (p4 / person\n             :name (n3 / name\n                       :op1 \"Lee\"))\n   :ARG1 (a2 / act-02\n             :ARG0 (f / foundation\n                      :name (n5 / name\n                                :op1 \"Refuge\")\n                      :ARG0 (h / help-01\n                               :ARG1 (e / escape-01\n                                        :ARG0 (c / child)\n                                        :ARG1 (a4 / abuse-01\n                                                  :ARG1 c)\n                                        :ARG1 a4)))\n             :mod (c2 / charity)\n             :mod (f2 / festival\n                      :name (n6 / name\n                                :op1 \"Christmas\"))))", "(p / participate-01\n   :ARG0 (p5 / person\n             :name (n4 / name\n                       :op1 \"Maxine\"))\n   :ARG1 (a2 / act-02\n             :ARG0 (f / foundation\n                      :name (n5 / name\n                                :op1 \"Refuge\")\n                      :ARG0 (h / help-01\n                               :ARG1 (e / escape-01\n                                        :ARG0 (w / woman)\n                                        :ARG1 (a4 / abuse-01\n                                                  :ARG1 w))))\n             :mod (c2 / charity)\n             :mod (f2 / festival\n                      :name (n6 / name\n                                :op1 \"Christmas\")))\n   :ARG1 a2)", "(p / participate-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Jesse\"))\n   :ARG1 (a2 / act-02\n             :ARG0 (f / foundation\n                      :name (n5 / name\n                                :op1 \"Refuge\")\n                      :ARG0 (h / help-01\n                               :ARG1 (e / escape-01\n                                        :ARG0 (c / child)\n                                        :ARG1 (a4 / abuse-01\n                                                  :ARG1 c)\n                                        :ARG1 a4)))\n             :mod (c2 / charity)\n             :mod (f2 / festival\n                      :name (n6 / name\n                                :op1 \"Christmas\"))))", "(p / participate-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"Melvin\"))\n   :ARG1 (a2 / act-02\n             :ARG0 (f / foundation\n                      :name (n5 / name\n                                :op1 \"Refuge\")\n                      :ARG0 (h / help-01\n                               :ARG1 (e / escape-01\n                                        :ARG0 (c / child)\n                                        :ARG1 (a4 / abuse-01\n                                                  :ARG1 c)\n                                        :ARG1 a4)))\n             :mod (c2 / charity)\n             :mod (f2 / festival\n                      :name (n6 / name\n                                :op1 \"Christmas\"))))", "(p / participate-01\n   :ARG0 (p4 / person\n             :name (n3 / name\n                       :op1 \"Lee\"))\n   :ARG1 (a2 / act-02\n             :ARG0 (f / foundation\n                      :name (n5 / name\n                                :op1 \"Refuge\")\n                      :ARG0 (h / help-01\n                               :ARG1 (e / escape-01\n                                        :ARG0 (c / child)\n                                        :ARG1 (a4 / abuse-01\n                                                  :ARG1 c)\n                                        :ARG1 a4)))\n             :mod (c2 / charity)\n             :mod (f2 / festival\n                      :name (n6 / name\n                                :op1 \"Christmas\"))))", "(p / participate-01\n   :ARG0 (p5 / person\n             :name (n4 / name\n                       :op1 \"Maxine\"))\n   :ARG1 (a2 / act-02\n             :ARG0 (f / foundation\n                      :name (n5 / name\n                                :op1 \"Refuge\")\n                      :ARG0 (h / help-01\n                               :ARG1 (e / escape-01\n                                        :ARG0 (c / child)\n                                        :ARG1 (a4 / abuse-01\n                                                  :ARG1 c)\n                                        :ARG1 a4)))\n             :mod (c2 / charity)\n             :mod (f2 / festival\n                      :name (n6 / name\n                                :op1 \"Christmas\")))\n   :ARG1 a2)", "(p / participate-01\n   :ARG0 (p5 / person\n             :name (n4 / name\n                       :op1 \"Maxine\"))\n   :ARG1 (a2 / act-02\n             :ARG0 (f / foundation\n                      :name (n5 / name\n                                :op1 \"Refuge\")\n                      :ARG0 (h / help-01\n                               :ARG1 (e / escape-01\n                                        :ARG0 (c / child)\n                                        :ARG1 (a4 / abuse-01\n                                                  :ARG1 c)\n                                        :ARG1 a4)))\n             :mod (c2 / charity)\n             :mod (f2 / festival\n                      :name (n6 / name\n                                :op1 \"Christmas\")))\n   :ARG1 a2)"], "smus": ["Women escape abuse.", "Women escape abuse.", "Melvin was a participant.", "Lee was a participant.", "Maxine was a participant.", "Women and children escape.", "Children escape abuse.", "Children escape abuse.", "Christmas charity act", "Helps women escape abuse.", "Helps children escape abuse.", "Women and children escape abuse.", "Women and children escape abuse.", "Helps women and children escape abuse.", "Refuge is an act of action that helps women escape abuse.", "Refuge is an act of action that helps children escape abuse.", "Refuge is an act of action that helps women and children escape abuse.", "Refuge is a Christmas charity act that helps women escape abuse.", "Jesse, Melvin, Lee and Maxine were in attendance.", "Refuge is a Christmas charity act that helps children escape abuse.", "Refuge is a Christmas charity act that helps women and children escape abuse.", "Jesse is a participant in the Christmas charity act of Refuge, a foundation that helps women escape abuse.", "Melvin is a participant in the Christmas charity act of Refuge, a foundation that helps women escape abuse.", "Lee is a participant in the Christmas charity act of Refuge, a foundation that helps women escape abuse.", "Jesse is a participant in the Christmas charity act of Refuge, a foundation that helps women escape abuse.", "Melvin is a participant in the Christmas charity act of Refuge, a foundation that helps women escape abuse.", "Lee is a participant in the Christmas charity act of Refuge, a foundation that helps women escape abuse.", "Maxine is a participant in the Christmas charity act of Refuge, a foundation that helps women escape abuse.", "Jesse is a participant in the Christmas charity act of Refuge, a foundation that helps children escape abuse.", "Melvin is a participant in the Christmas charity act of Refuge, a foundation that helps children escape abuse.", "Lee is a participant in the Christmas charity act of Refuge, a foundation that helps children escape abuse.", "Maxine is a participant in the Christmas charity act of Refuge, a foundation that helps women escape abuse.", "Jesse is a participant in the Christmas charity act of Refuge, a foundation that helps children escape abuse.", "Melvin is a participant in the Christmas charity act of Refuge, a foundation that helps children escape abuse.", "Lee is a participant in the Christmas charity act of Refuge, a foundation that helps children escape abuse.", "Maxine is a participant in the Christmas charity act of Refuge, a foundation that helps children escape abuse.", "Maxine is a participant in the Christmas charity act of Refuge, a foundation that helps children escape abuse."]}, {"instance_id": "samsum-127", "summary": "Dan,Tim, Chris and Martin will meet at 8. Dan and Martin will take it easy this time. Tom can't make it as he has a party at in-laws.", "summary_trees": ["# ::snt Dan,Tim, Chris and Martin will meet at 8.\n(m / meet-03\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Dan\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Tim\"))\n            :op3 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Chris\"))\n            :op4 (p4 / person\n                  :name (n4 / name\n                        :op1 \"Martin\")))\n      :time (d / date-entity\n            :time \"8:00\"))", "# ::snt Dan and Martin will take it easy this time.\n(t / take-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Dan\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Martin\")))\n      :ARG1 (ii / it)\n      :ARG1-of (e / easy-05)\n      :time (t2 / time\n            :mod (t3 / this)))", "# ::snt Tom can't make it as he has a party at in-laws.\n(p / possible-01\n      :polarity -\n      :ARG1 (m / make-it-14\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Tom\")))\n      :ARG1-of (c / cause-01\n            :ARG0 (p3 / party-01\n                  :ARG0 p2\n                  :location (p4 / person\n                        :ARG0-of (h / have-rel-role-91\n                              :ARG1 p2\n                              :ARG2 (ii / in-law))))))"], "tree": ["(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dan\")))", "(m / meet-03\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Tim\")))", "(m / meet-03\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Chris\")))", "(m / meet-03\n   :ARG0 (p4 / person\n             :name (n4 / name\n                       :op1 \"Martin\")))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dan\"))\n   :time (d / date-entity\n            :time \"8:00\"))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dan\"))\n   :time (d / date-entity\n            :time \"8:00\"))", "(m / meet-03\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Dan\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Tim\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Chris\"))\n            :op4 (p4 / person\n                     :name (n4 / name\n                               :op1 \"Martin\"))))", "(m / meet-03\n   :ARG0 (p4 / person\n             :name (n4 / name\n                       :op1 \"Martin\")))", "(t / take-01\n   :time (t2 / time\n             :mod (t3 / this)))", "(t / take-01\n   :time (t2 / time\n             :mod (t3 / this)))", "(t / take-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Martin\"))\n   :ARG1 (ii / it)\n   :ARG1 ii)", "(t / take-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dan\"))\n   :ARG1 (ii / it)\n   :time (t2 / time\n             :mod (t3 / this)))", "(t / take-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Martin\"))\n   :ARG1 (ii / it)\n   :ARG1 ii\n   :time (t2 / time\n             :mod (t3 / this)))", "(t / take-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dan\"))\n   :ARG1 (ii / it)\n   :ARG1 (e / easy-05)\n   :time (t2 / time\n             :mod (t3 / this)))", "(t / take-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Dan\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Martin\")))\n   :ARG1 (ii / it))", "(t / take-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Martin\"))\n   :ARG1 (ii / it)\n   :ARG1 ii\n   :ARG1 (e / easy-05)\n   :time (t2 / time\n             :mod (t3 / this)))", "(t / take-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Dan\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Martin\")))\n   :ARG1 (ii / it)\n   :ARG1 (e / easy-05)\n   :time (t2 / time\n             :mod (t3 / this)))"], "smus": ["Dan will meet.", "Tim will meet.", "Chris will meet.", "Martin will meet.", "Dan will meet at 8 o'clock.", "Dan will meet at 8 o'clock.", "Meet Dan, Tim, Chris and Martin.", "Martin will meet.", "Take this time.", "Take this time.", "Martin will take it.", "Dan will take it this time.", "Martin will take it this time.", "Dan will take it easy this time.", "Dan and Martin will take it.", "Martin will take it easy this time.", "Dan and Martin will take it easy this time."]}, {"instance_id": "samsum-128", "summary": "Freddy will pick Luke up at about 3:15 pm.", "summary_trees": ["# ::snt Freddy will pick Luke up at about 3:15 pm.\n(p / pick-up-04\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Freddy\"))\n      :ARG1 (p3 / person\n            :name (n2 / name\n                  :op1 \"Luke\"))\n      :time (a / about\n            :op1 (d / date-entity\n                  :time \"15:15\")))"], "tree": [], "smus": []}, {"instance_id": "samsum-129", "summary": "Kelly is scared of sculpture garden figures in Finnland, she finds figure's faces morbid. For Ollie it's Nagoro village in Japan, it's creepy. ", "summary_trees": ["# ::snt Kelly is scared of sculpture garden figures in Finnland, she finds figure's faces morbid.\n(a / and\n      :op1 (s / scare-01\n            :ARG0 (f / figure\n                  :location (g / garden\n                        :mod (s2 / sculpture)\n                        :location (ii / island\n                              :name (n / name\n                                    :op1 \"Finnland\"))))\n            :ARG1 (p / person\n                  :name (n2 / name\n                        :op1 \"Kelly\")))\n      :op2 (f2 / find-02\n            :ARG0 p\n            :ARG1 (f3 / face\n                  :part-of (f4 / figure)\n                  :mod (m / morbid))))", "# ::snt For Ollie it's Nagoro village in Japan, it's creepy.\n(a / and\n      :op1 (v / village\n            :name (n / name\n                  :op1 \"Nagoro\")\n            :location (c / country\n                  :name (n2 / name\n                        :op1 \"Japan\")))\n      :op2 (c2 / creepy-04\n            :ARG0 (ii / it)\n            :ARG1 (p / person\n                  :name (n3 / name\n                        :op1 \"Ollie\"))))"], "tree": ["(f2 / find-02\n    :ARG1 (f3 / face\n              :part (f4 / figure)\n              :mod (m / morbid)))", "(f2 / find-02\n    :ARG0 (p / person :name (n2 / name :op1 \"Kelly\"))\n    :ARG1 (f3 / face\n              :part (f4 / figure)\n              :mod (m / morbid)))", "(f2 / find-02\n    :ARG0 (p / person :name (n2 / name :op1 \"Kelly\"))\n    :ARG1 (f3 / face\n              :part (f4 / figure)\n              :mod (m / morbid)))", "(s / scare-01\n   :ARG0 (f / figure\n            :location (g / garden\n                         :mod (s2 / sculpture)\n                         :location (ii / island\n                                       :name (n / name\n                                                :op1 \"Finnland\")))))", "(s / scare-01\n   :ARG0 (f / figure\n            :location (g / garden\n                         :mod (s2 / sculpture)\n                         :location (ii / island\n                                       :name (n / name\n                                                :op1 \"Finnland\"))))\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Kelly\")))", "(s / scare-01\n   :ARG0 (f / figure\n            :location (g / garden\n                         :mod (s2 / sculpture)\n                         :location (ii / island\n                                       :name (n / name\n                                                :op1 \"Finnland\"))))\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Kelly\")))", "(c2 / creepy-04\n    :ARG0 (ii / it)\n    :ARG1 (p / person\n             :name (n3 / name\n                       :op1 \"Ollie\")))"], "smus": ["Finds morbid faces of figure", "Kelly finds the figures morbid faces.", "Kelly finds the figures morbid faces.", "Scared by the figure in Finland's sculpture garden.", "Kelly was scared by a figure in Finland's sculpture garden.", "Kelly was scared by a figure in Finland's sculpture garden.", "It's creepy for Ollie."]}, {"instance_id": "samsum-130", "summary": "No one wants to play ball with Sawyer tonight.", "summary_trees": ["# ::snt No one wants to play ball with Sawyer tonight.\n(w / want-01\n      :ARG0 (n / no-one)\n      :ARG1 (p / play-01\n            :ARG0 n\n            :ARG1 (b / ball)\n            :ARG3 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Sawyer\"))\n            :time (d / date-entity\n                  :dayperiod (n3 / night)\n                  :mod (t / today))))"], "tree": ["(p / play-01\n   :ARG0 (n / no-one)\n   :ARG1 (b / ball))", "(p / play-01\n   :time (d / date-entity\n            :dayperiod (n3 / night)\n            :mod (t / today)))", "(p / play-01\n   :time (d / date-entity\n            :dayperiod (n3 / night)\n            :mod (t / today)))", "(p / play-01\n   :ARG0 (n / no-one)\n   :ARG1 (b / ball)\n   :ARG3 (p2 / person\n             :name (n2 / name\n                       :op1 \"Sawyer\"))\n   :time (d / date-entity\n            :dayperiod (n3 / night)\n            :mod (t / today)))", "(w / want-01\n   :ARG0 (n / no-one)\n   :ARG1 (p / play-01\n            :ARG0 n\n            :ARG1 (b / ball)\n            :ARG3 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Sawyer\"))\n            :time (d / date-entity\n                     :dayperiod (n3 / night)\n                     :mod (t / today))))", "(w / want-01\n   :ARG0 (n / no-one)\n   :ARG1 (p / play-01\n            :ARG0 n\n            :ARG1 (b / ball)\n            :ARG3 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Sawyer\"))\n            :time (d / date-entity\n                     :dayperiod (n3 / night)\n                     :mod (t / today))))"], "smus": ["No one is going to play the ball.", "Play tonight.", "Play tonight.", "No one will play a ball with Sawyer tonight.", "No one wants to play for Sawyer tonight.", "No one wants to play for Sawyer tonight."]}, {"instance_id": "samsum-131", "summary": "Casey got a new nail polish and did her nails herself. It took her nearly 4 hours, so she won't do her friends' nails, as it takes too long.", "summary_trees": ["# ::snt Casey got a new nail polish and did her nails herself.\n(a / and\n      :op1 (g / get-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Casey\")\n                  :part (n2 / nail))\n            :ARG1 (p2 / polish\n                  :ARG1-of (n3 / new-01)\n                  :mod (n4 / nail)))\n      :op2 (d / do-02\n            :ARG0 p\n            :ARG1 n2))", "# ::snt It took her nearly 4 hours, so she won't do her friends' nails, as it takes too long.\n(c / cause-01\n      :ARG0 (t / take-10\n            :ARG0 (ii / it)\n            :ARG1 (n / nearly\n                  :op1 (t2 / temporal-quantity\n                        :quant 4\n                        :unit (h / hour)))\n            :ARG2 (s / she))\n      :ARG1 (d / do-02\n            :polarity -\n            :ARG0 s\n            :ARG1 (n2 / nail\n                  :part-of (p / person\n                        :ARG0-of (h2 / have-rel-role-91\n                              :ARG1 s\n                              :ARG2 (f / friend))))\n            :ARG1-of (c2 / cause-01\n                  :ARG0 (t3 / take-10\n                        :ARG0 (d2 / do-02\n                              :ARG0 s\n                              :ARG1 n2)\n                        :ARG1 (l / long-03\n                              :ARG1 n2\n                              :ARG2-of (h3 / have-degree-91\n                                    :ARG1 d2\n                                    :ARG3 (t4 / too)))))))"], "tree": ["(g / get-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Casey\")\n            :part (n2 / nail))\n   :ARG1 (p2 / polish\n             :ARG1 (n3 / new-01)\n             :mod (n4 / nail)))", "(g / get-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Casey\")\n            :part (n2 / nail))\n   :ARG1 (p2 / polish\n             :ARG1 (n3 / new-01)\n             :mod (n4 / nail)))", "(t / take-10\n   :ARG0 (ii / it)\n   :ARG1 (n / nearly\n            :op1 (t2 / temporal-quantity\n                     :quant 4\n                     :unit (h / hour))))", "(t / take-10\n   :ARG0 (ii / it)\n   :ARG1 (n / nearly\n            :op1 (t2 / temporal-quantity\n                     :quant 4\n                     :unit (h / hour)))\n   :ARG2 (s / she))", "(t / take-10\n   :ARG0 (ii / it)\n   :ARG1 (n / nearly\n            :op1 (t2 / temporal-quantity\n                     :quant 4\n                     :unit (h / hour)))\n   :ARG2 (s / she))", "(t3 / take-10\n    :ARG0 (d2 / do-02\n              :ARG0 (s / she)\n              :ARG1 n2)\n    :ARG1 (l / long-03\n             :ARG1 (n2 / nail)\n             :ARG2 (h3 / have-degree-91\n                       :ARG1 d2\n                       :ARG3 (t4 / too))))", "(t3 / take-10\n    :ARG0 (d2 / do-02\n              :ARG0 (s / she)\n              :ARG1 n2)\n    :ARG1 (l / long-03\n             :ARG1 (n2 / nail)\n             :ARG2 (h3 / have-degree-91\n                       :ARG1 d2\n                       :ARG3 (t4 / too))))", "(c2 / cause-01\n    :ARG0 (t3 / take-10\n              :ARG0 (d2 / do-02\n                        :ARG0 (s / she)\n                        :ARG1 n2)\n              :ARG1 (l / long-03\n                       :ARG1 (n2 / nail)\n                       :ARG2 (h3 / have-degree-91\n                                 :ARG1 d2\n                                 :ARG3 (t4 / too)))))", "(c / cause-01\n   :ARG0 (t / take-10\n            :ARG0 (ii / it)\n            :ARG1 (n / nearly\n                     :op1 (t2 / temporal-quantity\n                              :quant 4\n                              :unit (h / hour)))\n            :ARG2 (s / she))\n   :ARG1 (d / do-02\n            :polarity -\n            :ARG0 s\n            :ARG1 (n2 / nail)))"], "smus": ["Casey got a new nail polish.", "Casey got a new nail polish.", "It takes nearly four hours.", "It takes her nearly four hours.", "It takes her nearly four hours.", "It takes too long for her to do it.", "It takes too long for her to do it.", "Because it takes too long for her to do it.", "It takes her nearly four hours to do it, so she won't do the nails."]}, {"instance_id": "samsum-132", "summary": "Claudia, Andy and Mark stayed after hours at Mr. Benson's request. Mr. Benson is currently discussing a contract with a new client in Per and he wants to organize their work remotely.", "summary_trees": ["# ::snt Claudia, Andy and Mark stayed after hours at Mr. Benson's request.\n(s / stay-01\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Claudia\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Andy\"))\n            :op3 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Mark\")))\n      :time (a2 / after-hours)\n      :ARG1-of (r / request-01\n            :ARG0 (p4 / person\n                  :name (n4 / name\n                        :op1 \"Mr.\"\n                        :op2 \"Benson\"))))", "# ::snt Mr. Benson is currently discussing a contract with a new client in Per and he wants to organize their work remotely.\n(a / and\n      :op1 (d / discuss-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Mr.\"\n                        :op2 \"Benson\"))\n            :ARG1 (c / contract-02\n                  :ARG0 p\n                  :ARG2 (p2 / person\n                        :ARG0-of (h / have-rel-role-91\n                              :ARG1 p\n                              :ARG2 (c2 / client))\n                        :ARG1-of (n2 / new-01)\n                        :location (c3 / city\n                              :name (n3 / name\n                                    :op1 \"Per\"))))\n            :ARG2 p2\n            :time (c4 / current))\n      :op2 (w / want-01\n            :ARG0 p\n            :ARG1 (o / organize-01\n                  :ARG0 p\n                  :ARG1 (w2 / work-01\n                        :ARG0 (t / they))\n                  :manner (r / remote))))"], "tree": ["(s / stay-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Claudia\")))", "(s / stay-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Andy\")))", "(s / stay-01\n   :ARG1 (p3 / person\n             :name (n3 / name\n                       :op1 \"Mark\")))", "(s / stay-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Andy\"))\n   :time (a2 / after-hours)\n   :ARG1 (r / request-01\n            :ARG0 (p4 / person\n                      :name (n4 / name\n                                :op1 \"Mr.\"\n                                :op2 \"Benson\"))))", "(s / stay-01\n   :ARG1 (p3 / person\n             :name (n3 / name\n                       :op1 \"Mark\"))\n   :time (a2 / after-hours)\n   :time a2\n   :ARG1 (r / request-01\n            :ARG0 (p4 / person\n                      :name (n4 / name\n                                :op1 \"Mr.\"\n                                :op2 \"Benson\"))))", "(s / stay-01\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Claudia\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Andy\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Mark\"))))", "(s / stay-01\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Claudia\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Andy\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Mark\")))\n   :time (a2 / after-hours)\n   :ARG1 (r / request-01\n            :ARG0 (p4 / person\n                      :name (n4 / name\n                                :op1 \"Mr.\"\n                                :op2 \"Benson\"))))", "(o / organize-01\n   :ARG1 (w2 / work-01\n             :ARG0 (t / they)))", "(o / organize-01\n   :ARG0 (p / person :name (n / name :op1 \"Mr.\" :op2 \"Benson\"))\n   :ARG1 (w2 / work-01\n             :ARG0 (t / they)))", "(o / organize-01\n   :ARG0 (p / person :name (n / name :op1 \"Mr.\" :op2 \"Benson\"))\n   :ARG1 (w2 / work-01\n             :ARG0 (t / they))\n   :manner (r / remote))", "(w / want-01\n   :ARG0 (p / person :name (n / name :op1 \"Mr.\" :op2 \"Benson\"))\n   :ARG1 (o / organize-01\n            :ARG0 p\n            :ARG1 (w2 / work-01\n                      :ARG0 (t / they))\n            :manner (r / remote)))", "(w / want-01\n   :ARG0 (p / person :name (n / name :op1 \"Mr.\" :op2 \"Benson\"))\n   :ARG1 (o / organize-01\n            :ARG0 p\n            :ARG1 (w2 / work-01\n                      :ARG0 (t / they))\n            :manner (r / remote)))", "(d / discuss-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mr.\"\n                     :op2 \"Benson\"))\n   :ARG1 (c / contract-02\n            :ARG0 p\n            :ARG2 (p2 / person\n                      :ARG0 (h / have-rel-role-91\n                               :ARG1 p\n                               :ARG2 (c2 / client))\n                      :ARG1 (n2 / new-01)\n                      :location (c3 / city\n                                    :name (n3 / name\n                                              :op1 \"Per\")))))", "(d / discuss-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mr.\"\n                     :op2 \"Benson\"))\n   :ARG1 (c / contract-02\n            :ARG0 p\n            :ARG2 (p2 / person\n                      :ARG0 (h / have-rel-role-91\n                               :ARG1 p\n                               :ARG2 (c2 / client))\n                      :ARG1 (n2 / new-01)\n                      :location (c3 / city\n                                    :name (n3 / name\n                                              :op1 \"Per\"))))\n   :ARG2 p2\n   :time (c4 / current))"], "smus": ["Claudia stayed.", "Andy stayed.", "Mark stayed.", "Andy stayed after hours to Mr. Benson's request.", "Mark stayed after hours when Mr. Benson made his request.", "Claudia, Andy and Mark stayed.", "Claudia, Andy and Mark stayed after hours for Mr. Benson's request.", "organize their work.", "Mr. Benson would organize their work.", "Mr. Benson would organize their work remotely.", "Mr. Benson wants to organize their work remotely.", "Mr. Benson wants to organize their work remotely.", "Mr. Benson was discussing a new client contract in Per.", "Mr. Benson is currently discussing a new client contract with him in Per."]}, {"instance_id": "samsum-133", "summary": "Shelly is voluntering at a food shelter and asks if others do some volunteer work. Tracy is not into that, but Jody always does some charity for Christmas.", "summary_trees": ["# ::snt Shelly is voluntering at a food shelter and asks if others do some volunteer work.\n(a / and\n      :op1 (v / volunter-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Shelly\"))\n            :location (s / shelter-01\n                  :ARG2 (f / food)))\n      :op2 (a2 / ask-01\n            :ARG0 p\n            :ARG1 (t / truth-value\n                  :polarity-of (w / work-01\n                        :ARG0 (p2 / person\n                              :mod (o / other))\n                        :ARG1-of (v2 / volunteer-01)\n                        :quant (s2 / some)))))", "# ::snt Tracy is not into that, but Jody always does some charity for Christmas.\n(c / contrast-01\n      :ARG1 (ii / interest-01\n            :polarity -\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Tracy\"))\n            :ARG2 (t / that))\n      :ARG2 (d / do-02\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Jody\"))\n            :ARG1 (c2 / charity\n                  :quant (s / some))\n            :ARG3 (f / festival\n                  :name (n3 / name\n                        :op1 \"Christmas\"))\n            :time (a / always)))"], "tree": ["(a2 / ask-01\n    :ARG0 (p / person :name (n / name :op1 \"Shelly\"))\n    :ARG1 (t / truth-value))", "(a2 / ask-01\n    :ARG0 (p / person :name (n / name :op1 \"Shelly\"))\n    :ARG1 (t / truth-value))", "(w / work-01\n   :ARG0 (p2 / person\n             :mod (o / other)))", "(v / volunter-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Shelly\"))\n   :location (s / shelter-01\n                :ARG2 (f / food)))", "(w / work-01\n   :ARG0 (p2 / person\n             :mod (o / other)))", "(d / do-02\n   :ARG1 (c2 / charity\n             :quant (s / some)))", "(d / do-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Jody\")))", "(ii / interest-01\n    :polarity -\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Tracy\"))\n    :ARG2 (t / that))", "(d / do-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Jody\"))\n   :ARG1 (c2 / charity\n             :quant (s / some)))", "(d / do-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Jody\"))\n   :ARG1 (c2 / charity\n             :quant (s / some))\n   :time (a / always))", "(d / do-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Jody\"))\n   :ARG1 (c2 / charity\n             :quant (s / some))\n   :ARG3 (f / festival\n            :name (n3 / name\n                      :op1 \"Christmas\"))\n   :time (a / always))", "(c / contrast-01\n   :ARG1 (ii / interest-01\n             :polarity -\n             :ARG1 (p / person\n                      :name (n / name\n                               :op1 \"Tracy\"))\n             :ARG2 (t / that))\n   :ARG2 (d / do-02\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Jody\"))\n            :ARG1 (c2 / charity\n                      :quant (s / some))\n            :ARG3 (f / festival\n                     :name (n3 / name\n                               :op1 \"Christmas\"))\n            :time (a / always)))", "(c / contrast-01\n   :ARG1 (ii / interest-01\n             :polarity -\n             :ARG1 (p / person\n                      :name (n / name\n                               :op1 \"Tracy\"))\n             :ARG2 (t / that))\n   :ARG2 (d / do-02\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Jody\"))\n            :ARG1 (c2 / charity\n                      :quant (s / some))\n            :ARG3 (f / festival\n                     :name (n3 / name\n                               :op1 \"Christmas\"))\n            :time (a / always)))"], "smus": ["Shelly asks:", "Shelly asks:", "Other peoples work.", "Shelly was volvering in food shelter.", "Other peoples work.", "Do some charity.", "Jody did.", "Tracy is not interested in that.", "Jody does some charity.", "Jody has always done some charity.", "Jody always does some charity for Christmas.", "Tracy is not interested in that, but Jody has always done some charity for Christmas.", "Tracy is not interested in that, but Jody has always done some charity for Christmas."]}, {"instance_id": "samsum-134", "summary": "Mary and Patricia are flying to Japan in a week. Patricia is scared of long flight, earth-quakes and tsunamis. James is comforting her. Mary tried to comfort Patricia too with no effect.", "summary_trees": ["# ::snt Mary and Patricia are flying to Japan in a week.\n(f / fly-01\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Mary\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Patricia\")))\n      :destination (c / country\n            :name (n3 / name\n                  :op1 \"Japan\"))\n      :time (a2 / after\n            :op1 (n4 / now)\n            :quant (t / temporal-quantity\n                  :quant 1\n                  :unit (w / week))))", "# ::snt Patricia is scared of long flight, earth-quakes and tsunamis.\n(s / scare-01\n      :ARG0 (a / and\n            :op1 (f / fly-01\n                  :ARG1-of (l / long-03))\n            :op2 (q / quake\n                  :mod (e / earth))\n            :op3 (t / tsunami))\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Patricia\")))", "# ::snt James is comforting her.\n(c / comfort-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"James\"))\n      :ARG1 (s / she))", "# ::snt Mary tried to comfort Patricia too with no effect.\n(t / try-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Mary\"))\n      :ARG1 (c / comfort-01\n            :ARG0 p\n            :ARG1 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Patricia\"))\n            :mod (t2 / too))\n      :ARG1-of (e / effect-03\n            :polarity -))"], "tree": ["(f / fly-01\n   :destination (c / country\n                   :name (n3 / name\n                             :op1 \"Japan\")))", "(f / fly-01\n   :destination (c / country\n                   :name (n3 / name\n                             :op1 \"Japan\")))", "(f / fly-01\n   :destination (c / country\n                   :name (n3 / name\n                             :op1 \"Japan\")))", "(f / fly-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Mary\")))", "(f / fly-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Patricia\")))", "(f / fly-01\n   :time (a2 / after\n             :op1 (n4 / now)\n             :quant (t / temporal-quantity\n                       :quant 1\n                       :unit (w / week))))", "(f / fly-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Mary\"))\n   :destination (c / country\n                   :name (n3 / name\n                             :op1 \"Japan\")))", "(f / fly-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Patricia\"))\n   :destination (c / country\n                   :name (n3 / name\n                             :op1 \"Japan\"))\n   :destination c)", "(f / fly-01\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Mary\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Patricia\"))))", "(f / fly-01\n   :destination (c / country\n                   :name (n3 / name\n                             :op1 \"Japan\"))\n   :time (a2 / after\n             :op1 (n4 / now)\n             :quant (t / temporal-quantity\n                       :quant 1\n                       :unit (w / week))))", "(f / fly-01\n   :destination (c / country\n                   :name (n3 / name\n                             :op1 \"Japan\"))\n   :time (a2 / after\n             :op1 (n4 / now)\n             :quant (t / temporal-quantity\n                       :quant 1\n                       :unit (w / week))))", "(f / fly-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Mary\"))\n   :time (a2 / after\n             :op1 (n4 / now)\n             :quant (t / temporal-quantity\n                       :quant 1\n                       :unit (w / week))))", "(f / fly-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Patricia\"))\n   :time (a2 / after\n             :op1 (n4 / now)\n             :quant (t / temporal-quantity\n                       :quant 1\n                       :unit (w / week)))\n   :time a2)", "(f / fly-01\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Mary\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Patricia\")))\n   :destination (c / country\n                   :name (n3 / name\n                             :op1 \"Japan\")))", "(f / fly-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Mary\"))\n   :destination (c / country\n                   :name (n3 / name\n                             :op1 \"Japan\"))\n   :time (a2 / after\n             :op1 (n4 / now)\n             :quant (t / temporal-quantity\n                       :quant 1\n                       :unit (w / week))))", "(f / fly-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Mary\"))\n   :destination (c / country\n                   :name (n3 / name\n                             :op1 \"Japan\"))\n   :time (a2 / after\n             :op1 (n4 / now)\n             :quant (t / temporal-quantity\n                       :quant 1\n                       :unit (w / week))))", "(f / fly-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Patricia\"))\n   :destination (c / country\n                   :name (n3 / name\n                             :op1 \"Japan\"))\n   :destination c\n   :time (a2 / after\n             :op1 (n4 / now)\n             :quant (t / temporal-quantity\n                       :quant 1\n                       :unit (w / week))))", "(f / fly-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Patricia\"))\n   :destination (c / country\n                   :name (n3 / name\n                             :op1 \"Japan\"))\n   :destination c\n   :time (a2 / after\n             :op1 (n4 / now)\n             :quant (t / temporal-quantity\n                       :quant 1\n                       :unit (w / week))))", "(f / fly-01\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Mary\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Patricia\")))\n   :time (a2 / after\n             :op1 (n4 / now)\n             :quant (t / temporal-quantity\n                       :quant 1\n                       :unit (w / week))))", "(f / fly-01\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Mary\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Patricia\")))\n   :destination (c / country\n                   :name (n3 / name\n                             :op1 \"Japan\"))\n   :time (a2 / after\n             :op1 (n4 / now)\n             :quant (t / temporal-quantity\n                       :quant 1\n                       :unit (w / week))))", "(f / fly-01\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Mary\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Patricia\")))\n   :destination (c / country\n                   :name (n3 / name\n                             :op1 \"Japan\"))\n   :time (a2 / after\n             :op1 (n4 / now)\n             :quant (t / temporal-quantity\n                       :quant 1\n                       :unit (w / week))))", "(s / scare-01\n   :ARG0 (f / fly-01\n            :ARG1 (l / long-03)))", "(s / scare-01\n   :ARG0 (q / quake\n            :mod (e / earth)))", "(s / scare-01\n   :ARG0 (t / tsunami)\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Patricia\"))\n   :ARG1 p)", "(s / scare-01\n   :ARG0 (t / tsunami)\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Patricia\"))\n   :ARG1 p)", "(s / scare-01\n   :ARG0 (f / fly-01\n            :ARG1 (l / long-03))\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Patricia\")))", "(s / scare-01\n   :ARG0 (q / quake\n            :mod (e / earth))\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Patricia\")))", "(s / scare-01\n   :ARG0 (f / fly-01\n            :ARG1 (l / long-03))\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Patricia\")))", "(s / scare-01\n   :ARG0 (q / quake\n            :mod (e / earth))\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Patricia\")))", "(s / scare-01\n   :ARG0 (a / and\n            :op1 (f / fly-01\n                    :ARG1 (l / long-03))\n            :op2 (q / quake\n                    :mod (e / earth))\n            :op3 (t / tsunami)))", "(s / scare-01\n   :ARG0 (a / and\n            :op1 (f / fly-01\n                    :ARG1 (l / long-03))\n            :op2 (q / quake\n                    :mod (e / earth))\n            :op3 (t / tsunami))\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Patricia\")))", "(s / scare-01\n   :ARG0 (a / and\n            :op1 (f / fly-01\n                    :ARG1 (l / long-03))\n            :op2 (q / quake\n                    :mod (e / earth))\n            :op3 (t / tsunami))\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Patricia\")))", "(c / comfort-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"James\"))\n   :ARG1 (s / she))", "(t / try-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mary\"))\n   :ARG1 (c / comfort-01\n            :ARG0 p\n            :ARG1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Patricia\"))\n            :mod (t2 / too))\n   :ARG1 (e / effect-03\n            :polarity -))"], "smus": ["Flying to Japan.", "Flying to Japan.", "Flying to Japan.", "Mary was flying.", "Patricia is flying.", "Flying in a week.", "Mary was flying to Japan.", "Patricia is flying to Japan.", "Mary and Patricia are flying.", "Flying to Japan in a week.", "Flying to Japan in a week.", "Mary will be flying in a week.", "Patricia will be flying in a week.", "Mary and Patricia are flying to Japan.", "Mary will be flying to Japan in a week.", "Mary will be flying to Japan in a week.", "Patricia will be flying to Japan in a week.", "Patricia will be flying to Japan in a week.", "Mary and Patricia will be flying in a week.", "Mary and Patricia will be flying to Japan in a week.", "Mary and Patricia will be flying to Japan in a week.", "Long flight scared.", "Earthquakes are scary.", "Patricia was scared of the tsunami.", "Patricia was scared of the tsunami.", "Patricia is scared of long flights.", "Patricia was scared of earthquakes.", "Patricia is scared of long flights.", "Patricia was scared of earthquakes.", "Long flight, earthquakes and tsunamis are scary.", "Patricia was scared of a long flight, earthquakes and a tsunami.", "Patricia was scared of a long flight, earthquakes and a tsunami.", "James was comforting her.", "Mary tried to comfort Patricia too, but no effect."]}, {"instance_id": "samsum-135", "summary": "Debbie can't decide between buying a red dress and a green one. On Kelly and Denise's advice she will buy the green one. Kelly is considering buying the red one for herself.", "summary_trees": ["# ::snt Debbie can't decide between buying a red dress and a green one.\n(p / possible-01\n      :polarity -\n      :ARG1 (d / decide-01\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Debbie\"))\n            :ARG1 (b / between\n                  :op1 (b2 / buy-01\n                        :ARG0 p2\n                        :ARG1 (d2 / dress\n                              :ARG1-of (r / red-02)))\n                  :op2 (b3 / buy-01\n                        :ARG0 p2\n                        :ARG1 (d3 / dress\n                              :mod (g / green))))))", "# ::snt On Kelly and Denise's advice she will buy the green one.\n(b / buy-01\n      :ARG0 (s / she)\n      :ARG1 (o / one\n            :ARG1-of (g / green-03))\n      :ARG1-of (a / advise-01\n            :ARG0 (a2 / and\n                  :op1 (p / person\n                        :name (n / name\n                              :op1 \"Kelly\"))\n                  :op2 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Denise\")))\n            :ARG2 s))", "# ::snt Kelly is considering buying the red one for herself.\n(c / consider-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Kelly\"))\n      :ARG1 (b / buy-01\n            :ARG0 p\n            :ARG1 (o / one\n                  :ARG1-of (r / red-02))\n            :mod (b2 / by-oneself)))"], "tree": ["(d / decide-01\n   :ARG1 (b / between\n            :op1 (b2 / buy-01\n                     :ARG0 (p2 / person :name (n / name :op1 \"Debbie\"))\n                     :ARG1 (d2 / dress\n                               :ARG1 (r / red-02)))\n            :op2 (b3 / buy-01\n                     :ARG0 p2\n                     :ARG1 (d3 / dress\n                               :mod (g / green)))))", "(p / possible-01\n   :polarity -\n   :ARG1 (d / decide-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Debbie\"))\n            :ARG1 (b / between\n                     :op1 (b2 / buy-01\n                              :ARG0 p2\n                              :ARG1 (d2 / dress\n                                        :ARG1 (r / red-02)))\n                     :op2 (b3 / buy-01\n                              :ARG0 p2\n                              :ARG1 (d3 / dress\n                                        :mod (g / green))))))", "(b / buy-01\n   :ARG1 (o / one\n            :ARG1 (g / green-03)))", "(b / buy-01\n   :ARG0 (s / she)\n   :ARG1 (o / one\n            :ARG1 (g / green-03)))", "(a / advise-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Denise\"))\n   :ARG2 (s / she))", "(a / advise-01\n   :ARG0 (a2 / and\n             :op1 (p / person\n                     :name (n / name\n                              :op1 \"Kelly\"))\n             :op2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Denise\"))))", "(a / advise-01\n   :ARG0 (a2 / and\n             :op1 (p / person\n                     :name (n / name\n                              :op1 \"Kelly\"))\n             :op2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Denise\")))\n   :ARG2 (s / she))", "(b / buy-01\n   :ARG0 (s / she)\n   :ARG1 (o / one\n            :ARG1 (g / green-03))\n   :ARG1 (a / advise-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Kelly\"))))", "(b / buy-01\n   :ARG0 (s / she)\n   :ARG1 (o / one\n            :ARG1 (g / green-03))\n   :ARG1 (a / advise-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Denise\"))\n            :ARG2 s))", "(b / buy-01\n   :ARG0 (s / she)\n   :ARG1 (o / one\n            :ARG1 (g / green-03))\n   :ARG1 (a / advise-01\n            :ARG0 (a2 / and\n                      :op1 (p / person\n                              :name (n / name\n                                       :op1 \"Kelly\"))\n                      :op2 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Denise\")))\n            :ARG2 s))", "(b / buy-01\n   :ARG1 (o / one\n            :ARG1 (r / red-02)))"], "smus": ["Decide between Debbie buying a red dress and a green dress.", "Debbie can't decide between buying a red dress and a green dress.", "Buy a green one.", "She'll buy a green one.", "Denise gave her advice.", "Advice from Kelly and Denise.", "Kelly and Denise gave her advice.", "She'll buy a green one with Kelly's advice.", "Denise's advice is that she will buy a green one.", "She'll buy a green one with the advice of Kelly and Denise.", "buying a red one."]}, {"instance_id": "samsum-136", "summary": "Freddie, Kelly, Jim, Greg, Bob, Mike, Mary, Alan and Nancy are watching different shows on Netflix.", "summary_trees": ["# ::snt Freddie, Kelly, Jim, Greg, Bob, Mike, Mary, Alan and Nancy are watching different shows on Netflix.\n(w / watch-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Freddie\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Kelly\"))\n            :op3 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Jim\"))\n            :op4 (p4 / person\n                  :name (n4 / name\n                        :op1 \"Greg\"))\n            :op5 (p5 / person\n                  :name (n5 / name\n                        :op1 \"Bob\"))\n            :op6 (p6 / person\n                  :name (n6 / name\n                        :op1 \"Mike\"))\n            :op7 (p7 / person\n                  :name (n7 / name\n                        :op1 \"Mary\"))\n            :op8 (p8 / person\n                  :name (n8 / name\n                        :op1 \"Alan\"))\n            :op9 (p9 / person\n                  :name (n9 / name\n                        :op1 \"Nancy\")))\n      :ARG1 (s / show-04\n            :ARG1-of (d / differ-02))\n      :medium (c / company\n            :name (n10 / name\n                  :op1 \"Netflix\")))"], "tree": ["(w / watch-01\n   :ARG1 (s / show-04\n            :ARG1 (d / differ-02)))", "(w / watch-01\n   :medium (c / company\n              :name (n10 / name\n                         :op1 \"Netflix\")))", "(w / watch-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Freddie\")))", "(w / watch-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Kelly\")))", "(w / watch-01\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Jim\")))", "(w / watch-01\n   :ARG0 (p4 / person\n             :name (n4 / name\n                       :op1 \"Greg\")))", "(w / watch-01\n   :ARG0 (p5 / person\n             :name (n5 / name\n                       :op1 \"Bob\")))", "(w / watch-01\n   :ARG0 (p6 / person\n             :name (n6 / name\n                       :op1 \"Mike\")))", "(w / watch-01\n   :ARG0 (p7 / person\n             :name (n7 / name\n                       :op1 \"Mary\")))", "(w / watch-01\n   :ARG0 (p8 / person\n             :name (n8 / name\n                       :op1 \"Alan\")))", "(w / watch-01\n   :ARG0 (p9 / person\n             :name (n9 / name\n                       :op1 \"Nancy\")))", "(w / watch-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Freddie\"))\n   :ARG1 (s / show-04\n            :ARG1 (d / differ-02)))", "(w / watch-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Kelly\"))\n   :ARG1 (s / show-04\n            :ARG1 (d / differ-02)))", "(w / watch-01\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Jim\"))\n   :ARG1 (s / show-04\n            :ARG1 (d / differ-02)))", "(w / watch-01\n   :ARG0 (p4 / person\n             :name (n4 / name\n                       :op1 \"Greg\"))\n   :ARG1 (s / show-04\n            :ARG1 (d / differ-02)))", "(w / watch-01\n   :ARG0 (p5 / person\n             :name (n5 / name\n                       :op1 \"Bob\"))\n   :ARG1 (s / show-04\n            :ARG1 (d / differ-02)))", "(w / watch-01\n   :ARG0 (p6 / person\n             :name (n6 / name\n                       :op1 \"Mike\"))\n   :ARG1 (s / show-04\n            :ARG1 (d / differ-02)))", "(w / watch-01\n   :ARG0 (p7 / person\n             :name (n7 / name\n                       :op1 \"Mary\"))\n   :ARG1 (s / show-04\n            :ARG1 (d / differ-02)))", "(w / watch-01\n   :ARG0 (p8 / person\n             :name (n8 / name\n                       :op1 \"Alan\"))\n   :ARG1 (s / show-04\n            :ARG1 (d / differ-02)))", "(w / watch-01\n   :ARG0 (p9 / person\n             :name (n9 / name\n                       :op1 \"Nancy\"))\n   :ARG1 (s / show-04\n            :ARG1 (d / differ-02))\n   :ARG1 s)", "(w / watch-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Freddie\"))\n   :ARG1 (s / show-04\n            :ARG1 (d / differ-02))\n   :medium (c / company\n              :name (n10 / name\n                         :op1 \"Netflix\")))", "(w / watch-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Kelly\"))\n   :ARG1 (s / show-04\n            :ARG1 (d / differ-02))\n   :medium (c / company\n              :name (n10 / name\n                         :op1 \"Netflix\")))", "(w / watch-01\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Jim\"))\n   :ARG1 (s / show-04\n            :ARG1 (d / differ-02))\n   :medium (c / company\n              :name (n10 / name\n                         :op1 \"Netflix\")))", "(w / watch-01\n   :ARG0 (p4 / person\n             :name (n4 / name\n                       :op1 \"Greg\"))\n   :ARG1 (s / show-04\n            :ARG1 (d / differ-02))\n   :medium (c / company\n              :name (n10 / name\n                         :op1 \"Netflix\")))", "(w / watch-01\n   :ARG0 (p5 / person\n             :name (n5 / name\n                       :op1 \"Bob\"))\n   :ARG1 (s / show-04\n            :ARG1 (d / differ-02))\n   :medium (c / company\n              :name (n10 / name\n                         :op1 \"Netflix\")))", "(w / watch-01\n   :ARG0 (p6 / person\n             :name (n6 / name\n                       :op1 \"Mike\"))\n   :ARG1 (s / show-04\n            :ARG1 (d / differ-02))\n   :medium (c / company\n              :name (n10 / name\n                         :op1 \"Netflix\")))", "(w / watch-01\n   :ARG0 (p7 / person\n             :name (n7 / name\n                       :op1 \"Mary\"))\n   :ARG1 (s / show-04\n            :ARG1 (d / differ-02))\n   :medium (c / company\n              :name (n10 / name\n                         :op1 \"Netflix\")))", "(w / watch-01\n   :ARG0 (p8 / person\n             :name (n8 / name\n                       :op1 \"Alan\"))\n   :ARG1 (s / show-04\n            :ARG1 (d / differ-02))\n   :medium (c / company\n              :name (n10 / name\n                         :op1 \"Netflix\")))", "(w / watch-01\n   :ARG0 (p9 / person\n             :name (n9 / name\n                       :op1 \"Nancy\"))\n   :ARG1 (s / show-04\n            :ARG1 (d / differ-02))\n   :ARG1 s\n   :medium (c / company\n              :name (n10 / name\n                         :op1 \"Netflix\")))", "(w / watch-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Freddie\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Kelly\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Jim\"))\n            :op4 (p4 / person\n                     :name (n4 / name\n                               :op1 \"Greg\"))\n            :op5 (p5 / person\n                     :name (n5 / name\n                               :op1 \"Bob\"))\n            :op6 (p6 / person\n                     :name (n6 / name\n                               :op1 \"Mike\"))\n            :op7 (p7 / person\n                     :name (n7 / name\n                               :op1 \"Mary\"))\n            :op8 (p8 / person\n                     :name (n8 / name\n                               :op1 \"Alan\"))\n            :op9 (p9 / person\n                     :name (n9 / name\n                               :op1 \"Nancy\"))))", "(w / watch-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Freddie\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Kelly\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Jim\"))\n            :op4 (p4 / person\n                     :name (n4 / name\n                               :op1 \"Greg\"))\n            :op5 (p5 / person\n                     :name (n5 / name\n                               :op1 \"Bob\"))\n            :op6 (p6 / person\n                     :name (n6 / name\n                               :op1 \"Mike\"))\n            :op7 (p7 / person\n                     :name (n7 / name\n                               :op1 \"Mary\"))\n            :op8 (p8 / person\n                     :name (n8 / name\n                               :op1 \"Alan\"))\n            :op9 (p9 / person\n                     :name (n9 / name\n                               :op1 \"Nancy\")))\n   :ARG1 (s / show-04\n            :ARG1 (d / differ-02)))", "(w / watch-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Freddie\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Kelly\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Jim\"))\n            :op4 (p4 / person\n                     :name (n4 / name\n                               :op1 \"Greg\"))\n            :op5 (p5 / person\n                     :name (n5 / name\n                               :op1 \"Bob\"))\n            :op6 (p6 / person\n                     :name (n6 / name\n                               :op1 \"Mike\"))\n            :op7 (p7 / person\n                     :name (n7 / name\n                               :op1 \"Mary\"))\n            :op8 (p8 / person\n                     :name (n8 / name\n                               :op1 \"Alan\"))\n            :op9 (p9 / person\n                     :name (n9 / name\n                               :op1 \"Nancy\")))\n   :ARG1 (s / show-04\n            :ARG1 (d / differ-02))\n   :medium (c / company\n              :name (n10 / name\n                         :op1 \"Netflix\")))"], "smus": ["watching different shows.", "Watching on Netflix.", "Freddie was watching.", "Kelly is watching.", "Jim is watching.", "Greg was watching.", "Bob was watching.", "Mike was watching.", "Mary was watching.", "Alan was watching.", "Nancy is watching.", "Freddie was watching different shows.", "Kelly was watching different shows.", "Jim was watching the different shows.", "Greg was watching different shows.", "Bob was watching different shows.", "Mike was watching different shows.", "Mary was watching different shows.", "Alan was watching different shows.", "Nancy is watching different shows.", "Freddie was watching different shows on netflix.", "Kelly was watching different shows on Netflix.", "Jim was watching different shows on netflix.", "Greg was watching different shows on netflix.", "Bob was watching different shows on netflix.", "Mike was watching different shows on netflix.", "Mary was watching different shows on Netflix.", "Alan was watching different shows on netflix.", "Nancy was watching different shows on Netflix.", "Freddie, Kelly, Jim, Greg, Bob, Mike, Mary, Alan and Nancy are watching.", "Freddie, Kelly, Jim, Greg, Bob, Mike, Mary, Alan and Nancy are watching the different shows.", "Freddie, Kelly, Jim, Greg, Bob, Mike, Mary, Alan and Nancy are watching the different shows on Netflix."]}, {"instance_id": "samsum-137", "summary": "Becky and Trent are taking care of Joel's cat Coco. Coco likes them both and is behaving rather well so far. ", "summary_trees": ["# ::snt Becky and Trent are taking care of Joel's cat Coco.\n(c / care-03\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Becky\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Trent\")))\n      :ARG1 (c2 / cat\n            :name (n3 / name\n                  :op1 \"Coco\")\n            :poss (p3 / person\n                  :name (n4 / name\n                        :op1 \"Joel\"))))", "# ::snt Coco likes them both and is behaving rather well so far.\n(a / and\n      :op1 (l / like-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Coco\"))\n            :ARG1 (t / they\n                  :mod (b / both)))\n      :op2 (b2 / behave-01\n            :ARG0 p\n            :ARG1 (w / well-09\n                  :degree (r / rather))\n            :time (s / so-far)))"], "tree": ["(c / care-03\n   :ARG1 (c2 / cat\n             :name (n3 / name\n                       :op1 \"Coco\")\n             :poss (p3 / person\n                       :name (n4 / name\n                                 :op1 \"Joel\"))))", "(c / care-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Becky\"))\n   :ARG1 (c2 / cat\n             :name (n3 / name\n                       :op1 \"Coco\")\n             :poss (p3 / person\n                       :name (n4 / name\n                                 :op1 \"Joel\"))))", "(c / care-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Becky\"))\n   :ARG1 (c2 / cat\n             :name (n3 / name\n                       :op1 \"Coco\")\n             :poss (p3 / person\n                       :name (n4 / name\n                                 :op1 \"Joel\"))))", "(c / care-03\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Trent\"))\n   :ARG1 (c2 / cat\n             :name (n3 / name\n                       :op1 \"Coco\")\n             :poss (p3 / person\n                       :name (n4 / name\n                                 :op1 \"Joel\")))\n   :ARG1 c2)", "(c / care-03\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Trent\"))\n   :ARG1 (c2 / cat\n             :name (n3 / name\n                       :op1 \"Coco\")\n             :poss (p3 / person\n                       :name (n4 / name\n                                 :op1 \"Joel\")))\n   :ARG1 c2)", "(c / care-03\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Becky\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Trent\")))\n   :ARG1 (c2 / cat\n             :name (n3 / name\n                       :op1 \"Coco\")\n             :poss (p3 / person\n                       :name (n4 / name\n                                 :op1 \"Joel\"))))", "(c / care-03\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Becky\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Trent\")))\n   :ARG1 (c2 / cat\n             :name (n3 / name\n                       :op1 \"Coco\")\n             :poss (p3 / person\n                       :name (n4 / name\n                                 :op1 \"Joel\"))))", "(b2 / behave-01\n    :ARG1 (w / well-09\n             :degree (r / rather)))", "(l / like-01\n   :ARG1 (t / they\n            :mod (b / both)))", "(b2 / behave-01\n    :ARG0 (p / person :name (n / name :op1 \"Coco\"))\n    :ARG1 (w / well-09\n             :degree (r / rather)))", "(b2 / behave-01\n    :ARG0 (p / person :name (n / name :op1 \"Coco\"))\n    :ARG1 (w / well-09\n             :degree (r / rather))\n    :time (s / so-far))", "(l / like-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Coco\"))\n   :ARG1 (t / they\n            :mod (b / both)))", "(l / like-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Coco\"))\n   :ARG1 (t / they\n            :mod (b / both)))"], "smus": ["Care for Joel's Coco cat", "Becky takes care of Joel's Coco cat.", "Becky takes care of Joel's Coco cat.", "Trent took care of Joel's Coco cat.", "Trent took care of Joel's Coco cat.", "Becky and Trent took care of Joel's Coco cat.", "Becky and Trent took care of Joel's Coco cat.", "Behaving rather well.", "Likes them both.", "Coco was acting rather well.", "Coco is acting rather well so far.", "Coco likes them both.", "Coco likes them both."]}, {"instance_id": "samsum-138", "summary": "George, Robert and Paul are going to play basketball on Friday at 7. Yousuf will be late.", "summary_trees": ["# ::snt George, Robert and Paul are going to play basketball on Friday at 7.\n(p / play-01\n      :ARG0 (a / and\n            :op1 (p2 / person\n                  :name (n / name\n                        :op1 \"George\"))\n            :op2 (p3 / person\n                  :name (n2 / name\n                        :op1 \"Robert\"))\n            :op3 (p4 / person\n                  :name (n3 / name\n                        :op1 \"Paul\")))\n      :ARG1 (b / basketball)\n      :time (d / date-entity\n            :time \"19:00\"\n            :weekday (f / friday)))", "# ::snt Yousuf will be late.\n(l / late-02\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Yousuf\")))"], "tree": ["(p / play-01\n   :time (d / date-entity\n            :time \"19:00\"\n            :weekday (f / friday)))", "(p / play-01\n   :time (d / date-entity\n            :time \"19:00\"\n            :weekday (f / friday)))", "(p / play-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"George\")))", "(p / play-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"Robert\")))", "(p / play-01\n   :ARG0 (p4 / person\n             :name (n3 / name\n                       :op1 \"Paul\")))", "(p / play-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"George\"))\n   :ARG1 (b / basketball))", "(p / play-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"Robert\"))\n   :ARG1 (b / basketball))", "(p / play-01\n   :ARG0 (p4 / person\n             :name (n3 / name\n                       :op1 \"Paul\"))\n   :ARG1 (b / basketball)\n   :ARG1 b)", "(p / play-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"George\"))\n   :ARG1 (b / basketball)\n   :time (d / date-entity\n            :time \"19:00\"\n            :weekday (f / friday)))", "(p / play-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"Robert\"))\n   :ARG1 (b / basketball)\n   :time (d / date-entity\n            :time \"19:00\"\n            :weekday (f / friday)))", "(p / play-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"George\"))\n   :ARG1 (b / basketball)\n   :time (d / date-entity\n            :time \"19:00\"\n            :weekday (f / friday)))", "(p / play-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"Robert\"))\n   :ARG1 (b / basketball)\n   :time (d / date-entity\n            :time \"19:00\"\n            :weekday (f / friday)))", "(p / play-01\n   :ARG0 (p4 / person\n             :name (n3 / name\n                       :op1 \"Paul\"))\n   :ARG1 (b / basketball)\n   :ARG1 b\n   :time (d / date-entity\n            :time \"19:00\"\n            :weekday (f / friday)))", "(p / play-01\n   :ARG0 (p4 / person\n             :name (n3 / name\n                       :op1 \"Paul\"))\n   :ARG1 (b / basketball)\n   :ARG1 b\n   :time (d / date-entity\n            :time \"19:00\"\n            :weekday (f / friday)))", "(p / play-01\n   :ARG0 (a / and\n            :op1 (p2 / person\n                     :name (n / name\n                              :op1 \"George\"))\n            :op2 (p3 / person\n                     :name (n2 / name\n                               :op1 \"Robert\"))\n            :op3 (p4 / person\n                     :name (n3 / name\n                               :op1 \"Paul\"))))", "(p / play-01\n   :ARG0 (a / and\n            :op1 (p2 / person\n                     :name (n / name\n                              :op1 \"George\"))\n            :op2 (p3 / person\n                     :name (n2 / name\n                               :op1 \"Robert\"))\n            :op3 (p4 / person\n                     :name (n3 / name\n                               :op1 \"Paul\")))\n   :ARG1 (b / basketball))", "(p / play-01\n   :ARG0 (a / and\n            :op1 (p2 / person\n                     :name (n / name\n                              :op1 \"George\"))\n            :op2 (p3 / person\n                     :name (n2 / name\n                               :op1 \"Robert\"))\n            :op3 (p4 / person\n                     :name (n3 / name\n                               :op1 \"Paul\")))\n   :ARG1 (b / basketball)\n   :time (d / date-entity\n            :time \"19:00\"\n            :weekday (f / friday)))", "(p / play-01\n   :ARG0 (a / and\n            :op1 (p2 / person\n                     :name (n / name\n                              :op1 \"George\"))\n            :op2 (p3 / person\n                     :name (n2 / name\n                               :op1 \"Robert\"))\n            :op3 (p4 / person\n                     :name (n3 / name\n                               :op1 \"Paul\")))\n   :ARG1 (b / basketball)\n   :time (d / date-entity\n            :time \"19:00\"\n            :weekday (f / friday)))", "(l / late-02\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Yousuf\")))", "(l / late-02\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Yousuf\")))"], "smus": ["Play at 7pm Friday.", "Play at 7pm Friday.", "George will play.", "Robert plays.", "Paul will play.", "George will play basketball.", "Robert will play basketball.", "Paul will play basketball.", "George will play basketball at 7 p.m. Friday.", "Robert will play basketball at 7 p.m. Friday.", "George will play basketball at 7 p.m. Friday.", "Robert will play basketball at 7 p.m. Friday.", "Paul will play basketball at 7 p.m. Friday.", "Paul will play basketball at 7 p.m. Friday.", "George, Robert and Paul will play.", "George, Robert and Paul will play basketball.", "George, Robert and Paul will play basketball at 7 p.m. Friday.", "George, Robert and Paul will play basketball at 7 p.m. Friday.", "Yousuf is late.", "Yousuf is late."]}, {"instance_id": "samsum-139", "summary": "Ann, Sue and Julie did a great job and they will have a little celebration tonight.", "summary_trees": ["# ::snt Ann, Sue and Julie did a great job and they will have a little celebration tonight.\n(a / and\n      :op1 (d / do-02\n            :ARG0 (a2 / and\n                  :op1 (p / person\n                        :name (n / name\n                              :op1 \"Ann\"))\n                  :op2 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Sue\"))\n                  :op3 (p3 / person\n                        :name (n3 / name\n                              :op1 \"Julie\")))\n            :ARG1 (j / job\n                  :mod (g / great)))\n      :op2 (c / celebrate-02\n            :ARG0 a2\n            :mod (l / little)\n            :time (d2 / date-entity\n                  :dayperiod (n4 / night)\n                  :mod (t / today))))"], "tree": ["(d / do-02\n   :ARG1 (j / job\n            :mod (g / great)))", "(d / do-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ann\")))", "(d / do-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Sue\")))", "(d / do-02\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Julie\")))", "(c / celebrate-02\n   :mod (l / little)\n   :time (d2 / date-entity\n             :dayperiod (n4 / night)\n             :mod (t / today)))", "(c / celebrate-02\n   :ARG0 (a2 / and)\n   :mod (l / little)\n   :time (d2 / date-entity\n             :dayperiod (n4 / night)\n             :mod (t / today)))", "(d / do-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ann\"))\n   :ARG1 (j / job\n            :mod (g / great)))", "(d / do-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Sue\"))\n   :ARG1 (j / job\n            :mod (g / great)))", "(d / do-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ann\"))\n   :ARG1 (j / job\n            :mod (g / great)))", "(d / do-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Sue\"))\n   :ARG1 (j / job\n            :mod (g / great)))", "(d / do-02\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Julie\"))\n   :ARG1 (j / job\n            :mod (g / great))\n   :ARG1 j)", "(d / do-02\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Julie\"))\n   :ARG1 (j / job\n            :mod (g / great))\n   :ARG1 j)", "(d / do-02\n   :ARG0 (a2 / and\n             :op1 (p / person\n                     :name (n / name\n                              :op1 \"Ann\"))\n             :op2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Sue\"))\n             :op3 (p3 / person\n                      :name (n3 / name\n                                :op1 \"Julie\"))))", "(d / do-02\n   :ARG0 (a2 / and\n             :op1 (p / person\n                     :name (n / name\n                              :op1 \"Ann\"))\n             :op2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Sue\"))\n             :op3 (p3 / person\n                      :name (n3 / name\n                                :op1 \"Julie\")))\n   :ARG1 (j / job\n            :mod (g / great)))", "(d / do-02\n   :ARG0 (a2 / and\n             :op1 (p / person\n                     :name (n / name\n                              :op1 \"Ann\"))\n             :op2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Sue\"))\n             :op3 (p3 / person\n                      :name (n3 / name\n                                :op1 \"Julie\")))\n   :ARG1 (j / job\n            :mod (g / great)))"], "smus": ["Great job did.", "Ann did.", "Sue did.", "Julie did.", "A little celebration tonight.", "There will be little celebration tonight.", "Ann did a great job.", "Sue did a great job.", "Ann did a great job.", "Sue did a great job.", "Julie did a great job.", "Julie did a great job.", "Ann, Sue and Julia did.", "Ann, Sue and Julia did a great job.", "Ann, Sue and Julia did a great job."]}, {"instance_id": "samsum-140", "summary": "Miranda called Tom yesterday and spoke to him in a sweet way. Anne is angry with her because Anne is dating Tom.", "summary_trees": ["# ::snt Miranda called Tom yesterday and spoke to him in a sweet way.\n(a / and\n      :op1 (c / call-02\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Miranda\"))\n            :ARG1 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Tom\"))\n            :time (y / yesterday))\n      :op2 (s / speak-01\n            :ARG0 p\n            :ARG2 p2\n            :manner (s2 / sweet-03)))", "# ::snt Anne is angry with her because Anne is dating Tom.\n(a / anger-01\n      :ARG0 (s / she)\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Anne\"))\n      :ARG1-of (c / cause-01\n            :ARG0 (d / date-02\n                  :ARG0 p\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Tom\")))))"], "tree": ["(s / speak-01\n   :ARG0 (p / person :name (n / name :op1 \"Miranda\"))\n   :ARG2 (p2 / person :name (n2 / name :op1 \"Tom\"))\n   :manner (s2 / sweet-03))", "(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Miranda\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Tom\"))\n   :time (y / yesterday))", "(a / anger-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Anne\")))", "(d / date-02\n   :ARG0 (p / person :name (n / name :op1 \"Anne\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Tom\")))", "(d / date-02\n   :ARG0 (p / person :name (n / name :op1 \"Anne\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Tom\")))", "(a / anger-01\n   :ARG0 (s / she)\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Anne\")))", "(c / cause-01\n   :ARG0 (d / date-02\n            :ARG0 (p / person :name (n / name :op1 \"Anne\"))\n            :ARG1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Tom\"))))", "(a / anger-01\n   :ARG0 (s / she)\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Anne\"))\n   :ARG1 (c / cause-01\n            :ARG0 (d / date-02\n                     :ARG0 p\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Tom\")))))"], "smus": ["Miranda spoke sweetly to Tom.", "Yesterday, Miranda called Tom.", "Anne was angry.", "Anne is dating Tom.", "Anne is dating Tom.", "She was angry at Anne.", "Because Anne is dating Tom.", "She was angry with Anne because she was dating Tom."]}, {"instance_id": "samsum-141", "summary": "Pipe under the wash basin exploded when Dan wanted to wash his hands. Andrea is going to write to the owner about it.", "summary_trees": ["# ::snt Pipe under the wash basin exploded when Dan wanted to wash his hands.\n(e / explode-01\n      :ARG1 (p / pipe\n            :location (u / under\n                  :op1 (b / basin\n                        :purpose (w / wash-01))))\n      :time (w2 / want-01\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Dan\")\n                  :part (h / hand))\n            :ARG1 (w3 / wash-01\n                  :ARG0 p2\n                  :ARG1 h)))", "# ::snt Andrea is going to write to the owner about it.\n(w / write-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Andrea\"))\n      :ARG1 (ii / it)\n      :ARG2 (p2 / person\n            :ARG0-of (o / own-01)))"], "tree": ["(e / explode-01\n   :ARG1 (p / pipe\n            :location (u / under\n                         :op1 (b / basin\n                                 :purpose (w / wash-01)))))", "(w2 / want-01\n    :ARG0 (p2 / person\n              :name (n / name\n                       :op1 \"Dan\")\n              :part (h / hand))\n    :ARG1 (w3 / wash-01\n              :ARG0 p2\n              :ARG1 h))", "(w2 / want-01\n    :ARG0 (p2 / person\n              :name (n / name\n                       :op1 \"Dan\")\n              :part (h / hand))\n    :ARG1 (w3 / wash-01\n              :ARG0 p2\n              :ARG1 h))", "(e / explode-01\n   :ARG1 (p / pipe\n            :location (u / under\n                         :op1 (b / basin\n                                 :purpose (w / wash-01))))\n   :time (w2 / want-01\n             :ARG0 (p2 / person\n                       :name (n / name\n                                :op1 \"Dan\")\n                       :part (h / hand))\n             :ARG1 (w3 / wash-01\n                       :ARG0 p2\n                       :ARG1 h)))", "(w / write-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Andrea\")))", "(w / write-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Andrea\"))\n   :ARG1 (ii / it))", "(w / write-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Andrea\"))\n   :ARG1 (ii / it)\n   :ARG2 (p2 / person\n             :ARG0 (o / own-01)))"], "smus": ["The pipe under the wash basin exploded.", "Dan wanted to wash his hands.", "Dan wanted to wash his hands.", "When Dan on the hands wanted to wash his hands, the pipe under the wash basin exploded.", "writ Andrea", "Andrea, writ it.", "Andrea writ it out to the owners."]}, {"instance_id": "samsum-142", "summary": "Breann and Dianne are going to buy a cheetah print pet hut with a 10% coupon code.", "summary_trees": ["# ::snt Breann and Dianne are going to buy a cheetah print pet hut with a 10% coupon code.\n(b / buy-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Breann\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Dianne\")))\n      :ARG1 (h / hut\n            :purpose (p3 / pet)\n            :ARG1-of (p4 / print-01\n                  :ARG2 (c / cheetah)))\n      :prep-with (c2 / code\n            :mod (c3 / coupon)\n            :mod (p5 / percentage-entity\n                  :value 10)))"], "tree": ["(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Breann\")))", "(b / buy-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Dianne\")))", "(b / buy-01\n   :prep-with (c2 / code\n                  :mod (c3 / coupon)\n                  :mod (p5 / percentage-entity\n                           :value 10)))", "(b / buy-01\n   :ARG1 (h / hut\n            :purpose (p3 / pet)\n            :ARG1 (p4 / print-01\n                      :ARG2 (c / cheetah))))", "(b / buy-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Breann\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Dianne\"))))", "(b / buy-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Dianne\"))\n   :ARG1 (h / hut\n            :purpose (p3 / pet)\n            :ARG1 (p4 / print-01\n                      :ARG2 (c / cheetah)))\n   :ARG1 h)", "(b / buy-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Breann\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Dianne\")))\n   :ARG1 (h / hut\n            :purpose (p3 / pet)\n            :ARG1 (p4 / print-01\n                      :ARG2 (c / cheetah))))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Breann\"))\n   :ARG1 (h / hut\n            :purpose (p3 / pet)\n            :ARG1 (p4 / print-01\n                      :ARG2 (c / cheetah)))\n   :prep-with (c2 / code\n                  :mod (c3 / coupon)\n                  :mod (p5 / percentage-entity\n                           :value 10)))", "(b / buy-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Dianne\"))\n   :ARG1 (h / hut\n            :purpose (p3 / pet)\n            :ARG1 (p4 / print-01\n                      :ARG2 (c / cheetah)))\n   :ARG1 h\n   :prep-with (c2 / code\n                  :mod (c3 / coupon)\n                  :mod (p5 / percentage-entity\n                           :value 10)))", "(b / buy-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Breann\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Dianne\")))\n   :ARG1 (h / hut\n            :purpose (p3 / pet)\n            :ARG1 (p4 / print-01\n                      :ARG2 (c / cheetah)))\n   :prep-with (c2 / code\n                  :mod (c3 / coupon)\n                  :mod (p5 / percentage-entity\n                           :value 10)))"], "smus": ["Breann will buy.", "Dianne would buy.", "Buy with a 10% coupon code.", "Buy a cheetah print pet hut.", "Breann and Dianne would buy.", "Dianne would buy a cheetah print hut for her pet.", "Breann and Dianne will buy a cheetah print hut for the pet.", "Breann would buy a cheetah print pet hut with a 10% coupon code.", "Dianne would buy a cheetah print pet hut with a 10% coupon code.", "Breann and Dianne will buy a cheetah print pet hut with a 10% coupon code."]}, {"instance_id": "samsum-143", "summary": "Ethan, Toby and Marshall are making fun of Scott.", "summary_trees": ["# ::snt Ethan, Toby and Marshall are making fun of Scott.\n(m / make-fun-04\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Ethan\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Toby\"))\n            :op3 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Marshall\")))\n      :ARG1 (p4 / person\n            :name (n4 / name\n                  :op1 \"Scott\")))"], "tree": ["(m / make-fun-04\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ethan\"))\n   :ARG1 (p4 / person\n             :name (n4 / name\n                       :op1 \"Scott\")))", "(m / make-fun-04\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Toby\"))\n   :ARG1 (p4 / person\n             :name (n4 / name\n                       :op1 \"Scott\")))", "(m / make-fun-04\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Marshall\"))\n   :ARG1 (p4 / person\n             :name (n4 / name\n                       :op1 \"Scott\"))\n   :ARG1 p4)"], "smus": ["Ethan is making fun of Scott.", "Toby is making fun of Scott.", "Marshall is making fun of Scott."]}, {"instance_id": "samsum-144", "summary": "Lauren want's to have a small tattoo above her ankle.", "summary_trees": ["# ::snt Lauren want's to have a small tattoo above her ankle.\n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Lauren\")\n            :part (a / ankle))\n      :ARG1 (h / have-06\n            :ARG0 p\n            :ARG1 (t / tattoo-01\n                  :ARG1 p\n                  :ARG2 (s / small)\n                  :location (a2 / above\n                        :op1 a))))"], "tree": ["(t / tattoo-01\n   :location (a2 / above\n                 :op1 (a / ankle)))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lauren\")\n            :part (a / ankle))\n   :ARG1 (h / have-06\n            :ARG0 p\n            :ARG1 (t / tattoo-01\n                     :ARG1 p\n                     :ARG2 (s / small)\n                     :location (a2 / above\n                                   :op1 a))))"], "smus": ["Tattooed above the ankle.", "Laurens on the ankle wants to have a small tattoo above her ankle."]}, {"instance_id": "samsum-145", "summary": "Brett's cousin met his wife while playing a game together. Andrew's favorite game is the Final Fantasy. Brett and John haven't heard about it.", "summary_trees": ["# ::snt Brett's cousin met his wife while playing a game together.\n(m / meet-02\n      :ARG0 (p / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (p2 / person\n                        :name (n / name\n                              :op1 \"Brett\"))\n                  :ARG2 (c / cousin)))\n      :ARG1 (p3 / person\n            :ARG0-of (h2 / have-rel-role-91\n                  :ARG1 p\n                  :ARG2 (w / wife)))\n      :time (p4 / play-01\n            :ARG0 (a / and\n                  :op1 p\n                  :op2 p3)\n            :ARG1 (g / game)\n            :mod (t / together)))", "# ::snt Andrew's favorite game is the Final Fantasy.\n(f / favor-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Andrew\"))\n      :ARG1 (g / game\n            :name (n2 / name\n                  :op1 \"Final\"\n                  :op2 \"Fantasy\")))", "# ::snt Brett and John haven't heard about it.\n(h / hear-01\n      :polarity -\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Brett\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"John\")))\n      :ARG1 (ii / it))"], "tree": ["(h2 / have-rel-role-91\n    :ARG1 (p / person)\n    :ARG2 (w / wife))", "(p4 / play-01\n    :ARG0 (p / person)\n    :ARG1 (g / game))", "(p4 / play-01\n    :ARG0 (a / and\n             :op1 (p / person)\n             :op2 (p3 / person)))", "(m / meet-02\n   :time (p4 / play-01\n             :mod (t / together)))", "(m / meet-02\n   :time (p4 / play-01\n             :mod (t / together)))", "(p4 / play-01\n    :ARG0 (p3 / person)\n    :ARG1 (g / game)\n    :ARG1 g)", "(p4 / play-01\n    :ARG0 (p / person)\n    :ARG1 (g / game)\n    :mod (t / together))", "(p4 / play-01\n    :ARG0 (a / and\n             :op1 (p / person)\n             :op2 (p3 / person))\n    :ARG1 (g / game))", "(p4 / play-01\n    :ARG0 (p3 / person)\n    :ARG1 (g / game)\n    :ARG1 g\n    :mod (t / together))", "(p4 / play-01\n    :ARG0 (a / and\n             :op1 (p / person)\n             :op2 (p3 / person))\n    :ARG1 (g / game)\n    :mod (t / together))", "(m / meet-02\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :name (n / name\n                                        :op1 \"Brett\"))\n                     :ARG2 (c / cousin)))\n   :ARG1 (p3 / person\n             :ARG0 (h2 / have-rel-role-91\n                       :ARG1 p\n                       :ARG2 (w / wife))))", "(m / meet-02\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :name (n / name\n                                        :op1 \"Brett\"))\n                     :ARG2 (c / cousin)))\n   :ARG1 (p3 / person\n             :ARG0 (h2 / have-rel-role-91\n                       :ARG1 p\n                       :ARG2 (w / wife)))\n   :time (p4 / play-01\n             :ARG0 p\n             :ARG1 (g / game)\n             :mod (t / together)))", "(m / meet-02\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :name (n / name\n                                        :op1 \"Brett\"))\n                     :ARG2 (c / cousin)))\n   :ARG1 (p3 / person\n             :ARG0 (h2 / have-rel-role-91\n                       :ARG1 p\n                       :ARG2 (w / wife)))\n   :time (p4 / play-01\n             :ARG0 p\n             :ARG1 (g / game)\n             :mod (t / together)))", "(m / meet-02\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :name (n / name\n                                        :op1 \"Brett\"))\n                     :ARG2 (c / cousin)))\n   :ARG1 (p3 / person\n             :ARG0 (h2 / have-rel-role-91\n                       :ARG1 p\n                       :ARG2 (w / wife)))\n   :time (p4 / play-01\n             :ARG0 p3\n             :ARG1 (g / game)\n             :ARG1 g\n             :mod (t / together)))", "(m / meet-02\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :name (n / name\n                                        :op1 \"Brett\"))\n                     :ARG2 (c / cousin)))\n   :ARG1 (p3 / person\n             :ARG0 (h2 / have-rel-role-91\n                       :ARG1 p\n                       :ARG2 (w / wife)))\n   :time (p4 / play-01\n             :ARG0 p3\n             :ARG1 (g / game)\n             :ARG1 g\n             :mod (t / together)))", "(m / meet-02\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :name (n / name\n                                        :op1 \"Brett\"))\n                     :ARG2 (c / cousin)))\n   :ARG1 (p3 / person\n             :ARG0 (h2 / have-rel-role-91\n                       :ARG1 p\n                       :ARG2 (w / wife)))\n   :time (p4 / play-01\n             :ARG0 (a / and\n                      :op1 p\n                      :op2 p3)\n             :ARG1 (g / game)\n             :mod (t / together)))", "(m / meet-02\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :name (n / name\n                                        :op1 \"Brett\"))\n                     :ARG2 (c / cousin)))\n   :ARG1 (p3 / person\n             :ARG0 (h2 / have-rel-role-91\n                       :ARG1 p\n                       :ARG2 (w / wife)))\n   :time (p4 / play-01\n             :ARG0 (a / and\n                      :op1 p\n                      :op2 p3)\n             :ARG1 (g / game)\n             :mod (t / together)))", "(p4 / play-01\n    :ARG0 (p / person)\n    :ARG1 (g / game))", "(p4 / play-01\n    :ARG0 (a / and\n             :op1 (p / person)\n             :op2 (p3 / person)))", "(p4 / play-01\n    :ARG0 (p3 / person)\n    :ARG1 (g / game)\n    :ARG1 g)", "(p4 / play-01\n    :ARG0 (a / and\n             :op1 (p / person)\n             :op2 (p3 / person))\n    :ARG1 (g / game))", "(f / favor-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Andrew\"))\n   :ARG1 (g / game\n            :name (n2 / name\n                      :op1 \"Final\"\n                      :op2 \"Fantasy\")))", "(f / favor-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Andrew\"))\n   :ARG1 (g / game\n            :name (n2 / name\n                      :op1 \"Final\"\n                      :op2 \"Fantasy\")))", "(h / hear-01\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Brett\"))\n   :ARG1 (ii / it))", "(h / hear-01\n   :polarity -\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"John\"))\n   :ARG1 (ii / it)\n   :ARG1 ii)", "(h / hear-01\n   :polarity -\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Brett\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"John\")))\n   :ARG1 (ii / it))"], "smus": ["The wife.", "People are playing the game.", "People are playing.", "The meeting occurred while playing together.", "The meeting occurred while playing together.", "People are playing the game.", "People playing the game together.", "People are playing the game.", "People playing the game together.", "People and people playing the game together.", "Brett's cousin met his wife.", "Brett's cousin met his wife while playing the game together.", "Brett's cousin met his wife while playing the game together.", "Brett's cousin met his wife while playing a game together.", "Brett's cousin met his wife while playing a game together.", "When Brett and his wife were playing a game together, a cousin and his wife met.", "When Brett and his wife were playing a game together, a cousin and his wife met.", "People are playing the game.", "People are playing.", "People are playing the game.", "People are playing the game.", "Andrew is in favor of Final Fantasy.", "Andrew is in favor of Final Fantasy.", "Brett hasn't heard of it.", "John hasn't heard of it.", "Brett and John haven't heard of it."]}, {"instance_id": "samsum-146", "summary": "Karen wants something cheaper than sushi for lunch. Linda, Ronnie and Karen will get takeout pasta boxes to the park.", "summary_trees": ["# ::snt Karen wants something cheaper than sushi for lunch.\n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Karen\"))\n      :ARG1 (s / something\n            :ARG1-of (h / have-degree-91\n                  :ARG2 (c / cheap-02)\n                  :ARG3 (m / more)\n                  :ARG4 (s2 / sushi)))\n      :purpose (l / lunch))", "# ::snt Linda, Ronnie and Karen will get takeout pasta boxes to the park.\n(g / get-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Linda\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Ronnie\"))\n            :op3 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Karen\")))\n      :ARG1 (b / box\n            :mod (p4 / pasta)\n            :ARG1-of (t / take-out-11))\n      :ARG4 (p5 / park))"], "tree": ["(h / have-degree-91\n   :ARG2 (c / cheap-02)\n   :ARG3 (m / more)\n   :ARG4 (s2 / sushi))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Karen\"))\n   :ARG1 (s / something\n            :ARG1 (h / have-degree-91\n                     :ARG2 (c / cheap-02)\n                     :ARG3 (m / more)\n                     :ARG4 (s2 / sushi))))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Karen\"))\n   :ARG1 (s / something\n            :ARG1 (h / have-degree-91\n                     :ARG2 (c / cheap-02)\n                     :ARG3 (m / more)\n                     :ARG4 (s2 / sushi)))\n   :purpose (l / lunch))", "(g / get-01\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Karen\"))\n   :ARG1 (b / box\n            :mod (p4 / pasta)\n            :ARG1 (t / take-out-11))\n   :ARG1 b)", "(g / get-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Linda\"))\n   :ARG1 (b / box\n            :mod (p4 / pasta)\n            :ARG1 (t / take-out-11))\n   :ARG4 (p5 / park))", "(g / get-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Ronnie\"))\n   :ARG1 (b / box\n            :mod (p4 / pasta)\n            :ARG1 (t / take-out-11))\n   :ARG4 (p5 / park))", "(g / get-01\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Karen\"))\n   :ARG1 (b / box\n            :mod (p4 / pasta)\n            :ARG1 (t / take-out-11))\n   :ARG1 b\n   :ARG4 (p5 / park))", "(g / get-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Linda\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Ronnie\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Karen\")))\n   :ARG1 (b / box\n            :mod (p4 / pasta)\n            :ARG1 (t / take-out-11)))", "(g / get-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Linda\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Ronnie\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Karen\")))\n   :ARG1 (b / box\n            :mod (p4 / pasta)\n            :ARG1 (t / take-out-11))\n   :ARG4 (p5 / park))"], "smus": ["Cheaper than sushi.", "Karen wants something cheaper than sushi.", "Karen wants something cheaper for lunch than sushi.", "Karen will get her take out pasta boxes.", "Linda would get take out pasta boxes from the park.", "Rony would get take out pasta boxes from the park.", "Karen will get the take out pasta boxes from the park.", "Linda, Ronnie and Karen will get take out pasta boxes.", "Linda, Ronnie and Karen will get take out pasta boxes from the park."]}, {"instance_id": "samsum-147", "summary": "Uncle Sam was in hospital, but it was nothing serious. He and Lucy are like second parents to Chiara and Yvonne. Chiara and Yvonne were in Chicago 2 weeks ago at their cousin's wedding. Yvonne is dating an Argentinian.", "summary_trees": ["# ::snt Uncle Sam was in hospital, but it was nothing serious.\n(h / have-concession-91\n      :ARG1 (b / be-located-at-91\n            :ARG1 (g / government-organization\n                  :name (n / name\n                        :op1 \"Uncle\"\n                        :op2 \"Sam\"))\n            :ARG2 (h2 / hospital))\n      :ARG2 (s / serious-02\n            :ARG1 (n2 / nothing)))", "# ::snt He and Lucy are like second parents to Chiara and Yvonne.\n(r / resemble-01\n      :ARG1 (a / and\n            :op1 (h / he)\n            :op2 (p / person\n                  :name (n / name\n                        :op1 \"Lucy\")))\n      :ARG2 (a2 / and\n            :op1 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Chiara\"))\n            :op2 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Yvonne\"))\n            :ARG0-of (h2 / have-rel-role-91\n                  :ARG2 (p4 / parent\n                        :ord (o / ordinal-entity\n                              :value 2)))\n            :ARG1-of h2))", "# ::snt Chiara and Yvonne were in Chicago 2 weeks ago at their cousin's wedding.\n(b / be-located-at-91\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Chiara\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Yvonne\")))\n      :ARG2 (c / city\n            :name (n3 / name\n                  :op1 \"Chicago\"))\n      :time (b2 / before\n            :op1 (n4 / now)\n            :quant (t / temporal-quantity\n                  :quant 2\n                  :unit (w / week)))\n      :purpose (w2 / wed-01\n            :ARG1 (p3 / person\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 a\n                        :ARG2 (c2 / cousin)))))", "# ::snt Yvonne is dating an Argentinian.\n(d / date-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Yvonne\"))\n      :ARG1 (p2 / person\n            :mod (c / country\n                  :name (n2 / name\n                        :op1 \"Argentina\"))))"], "tree": ["(b / be-located-at-91\n   :ARG1 (g / government-organization\n            :name (n / name\n                     :op1 \"Uncle\"\n                     :op2 \"Sam\"))\n   :ARG2 (h2 / hospital))", "(b / be-located-at-91\n   :ARG1 (g / government-organization\n            :name (n / name\n                     :op1 \"Uncle\"\n                     :op2 \"Sam\"))\n   :ARG2 (h2 / hospital))", "(h / have-concession-91\n   :ARG1 (b / be-located-at-91\n            :ARG1 (g / government-organization\n                     :name (n / name\n                              :op1 \"Uncle\"\n                              :op2 \"Sam\"))\n            :ARG2 (h2 / hospital)))", "(h / have-concession-91\n   :ARG1 (b / be-located-at-91\n            :ARG1 (g / government-organization\n                     :name (n / name\n                              :op1 \"Uncle\"\n                              :op2 \"Sam\"))\n            :ARG2 (h2 / hospital))\n   :ARG2 (s / serious-02\n            :ARG1 (n2 / nothing)))", "(h / have-concession-91\n   :ARG1 (b / be-located-at-91\n            :ARG1 (g / government-organization\n                     :name (n / name\n                              :op1 \"Uncle\"\n                              :op2 \"Sam\"))\n            :ARG2 (h2 / hospital))\n   :ARG2 (s / serious-02\n            :ARG1 (n2 / nothing)))", "(h2 / have-rel-role-91\n    :ARG2 (p4 / parent\n              :ord (o / ordinal-entity\n                      :value 2))\n    :ARG1 (a2 / and))", "(r / resemble-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Lucy\"))\n   :ARG2 (a2 / and)\n   :ARG2 (p3 / person\n             :name (n3 / name\n                       :op1 \"Yvonne\")\n             :ARG0 (h2 / have-rel-role-91\n                       :ARG2 (p4 / parent\n                                 :ord (o / ordinal-entity\n                                         :value 2))\n                       :ARG1 p3)))", "(r / resemble-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Lucy\"))\n   :ARG2 (a2 / and)\n   :ARG2 (p3 / person\n             :name (n3 / name\n                       :op1 \"Yvonne\")\n             :ARG0 (h2 / have-rel-role-91\n                       :ARG2 (p4 / parent\n                                 :ord (o / ordinal-entity\n                                         :value 2))\n                       :ARG1 p3)))", "(r / resemble-01\n   :ARG1 (a / and\n            :op1 (h / he)\n            :op2 (p / person\n                    :name (n / name\n                             :op1 \"Lucy\")))\n   :ARG2 (a2 / and\n             :op1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Chiara\"))\n             :op2 (p3 / person\n                      :name (n3 / name\n                                :op1 \"Yvonne\"))\n             :ARG0 (h2 / have-rel-role-91\n                       :ARG2 (p4 / parent\n                                 :ord (o / ordinal-entity\n                                         :value 2))\n                       :ARG1 a2)))", "(r / resemble-01\n   :ARG1 (a / and\n            :op1 (h / he)\n            :op2 (p / person\n                    :name (n / name\n                             :op1 \"Lucy\")))\n   :ARG2 (a2 / and\n             :op1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Chiara\"))\n             :op2 (p3 / person\n                      :name (n3 / name\n                                :op1 \"Yvonne\"))\n             :ARG0 (h2 / have-rel-role-91\n                       :ARG2 (p4 / parent\n                                 :ord (o / ordinal-entity\n                                         :value 2))\n                       :ARG1 a2)))", "(h / have-rel-role-91\n   :ARG1 (a / and)\n   :ARG2 (c2 / cousin))", "(w2 / wed-01\n    :ARG1 (p3 / person\n              :ARG0 (h / have-rel-role-91\n                       :ARG1 (a / and)\n                       :ARG2 (c2 / cousin))))", "(w2 / wed-01\n    :ARG1 (p3 / person\n              :ARG0 (h / have-rel-role-91\n                       :ARG1 (a / and)\n                       :ARG2 (c2 / cousin))))", "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Chiara\"))\n   :ARG2 (c / city\n            :name (n3 / name\n                      :op1 \"Chicago\")))", "(b / be-located-at-91\n   :time (b2 / before\n             :op1 (n4 / now)\n             :quant (t / temporal-quantity\n                       :quant 2\n                       :unit (w / week)))\n   :purpose (w2 / wed-01))", "(b / be-located-at-91\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Yvonne\"))\n   :ARG2 (c / city\n            :name (n3 / name\n                      :op1 \"Chicago\"))\n   :ARG2 c)", "(b / be-located-at-91\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Chiara\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Yvonne\")))\n   :ARG2 (c / city\n            :name (n3 / name\n                      :op1 \"Chicago\")))", "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Chiara\"))\n   :ARG2 (c / city\n            :name (n3 / name\n                      :op1 \"Chicago\"))\n   :time (b2 / before\n             :op1 (n4 / now)\n             :quant (t / temporal-quantity\n                       :quant 2\n                       :unit (w / week)))\n   :purpose (w2 / wed-01\n                :ARG1 (p3 / person\n                          :ARG0 (h / have-rel-role-91\n                                   :ARG1 p\n                                   :ARG2 (c2 / cousin)))))", "(b / be-located-at-91\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Yvonne\"))\n   :ARG2 (c / city\n            :name (n3 / name\n                      :op1 \"Chicago\"))\n   :ARG2 c\n   :time (b2 / before\n             :op1 (n4 / now)\n             :quant (t / temporal-quantity\n                       :quant 2\n                       :unit (w / week)))\n   :purpose (w2 / wed-01\n                :ARG1 (p3 / person\n                          :ARG0 (h / have-rel-role-91\n                                   :ARG1 p2\n                                   :ARG2 (c2 / cousin)))))", "(b / be-located-at-91\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Chiara\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Yvonne\")))\n   :ARG2 (c / city\n            :name (n3 / name\n                      :op1 \"Chicago\"))\n   :time (b2 / before\n             :op1 (n4 / now)\n             :quant (t / temporal-quantity\n                       :quant 2\n                       :unit (w / week)))\n   :purpose (w2 / wed-01\n                :ARG1 (p3 / person\n                          :ARG0 (h / have-rel-role-91\n                                   :ARG1 a\n                                   :ARG2 (c2 / cousin)))))", "(d / date-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Yvonne\")))", "(d / date-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Yvonne\"))\n   :ARG1 (p2 / person\n             :mod (c / country\n                     :name (n2 / name\n                               :op1 \"Argentina\"))))", "(d / date-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Yvonne\"))\n   :ARG1 (p2 / person\n             :mod (c / country\n                     :name (n2 / name\n                               :op1 \"Argentina\"))))"], "smus": ["Uncle Sam is in the hospital.", "Uncle Sam is in the hospital.", "Uncle Sam was in the hospital though.", "Nothing serious, but Uncle Sam is in the hospital.", "Nothing serious, but Uncle Sam is in the hospital.", "and have second parents.", "Lucy and Yvonne are like their second parents.", "Lucy and Yvonne are like their second parents.", "He and Lucy are like Chiara and Yvonne, their second parents.", "He and Lucy are like Chiara and Yvonne, their second parents.", "and cousin.", "The cousins got married.", "The cousins got married.", "Chiara is in Chicago.", "Two weeks ago for the wedding.", "Yvonne is in Chicago.", "Chiara and Yvonne are in Chicago.", "Chiara was in Chicago two weeks ago for her cousin's wedding.", "Yvonne was in Chicago two weeks ago for her cousin's wedding.", "Chiara and Yvonne were in Chicago two weeks ago for their cousin's wedding.", "Yvonne is dating.", "Yvonne is dating an Argentinian.", "Yvonne is dating an Argentinian."]}, {"instance_id": "samsum-148", "summary": "They are meeting at Fratellis, upstairs.", "summary_trees": ["# ::snt They are meeting at Fratellis, upstairs.\n(m / meet-03\n      :ARG0 (t / they)\n      :location (o / organization\n            :name (n / name\n                  :op1 \"Fratellis\")\n            :location (u / upstairs)))"], "tree": ["(m / meet-03\n   :location (o / organization\n                :name (n / name\n                         :op1 \"Fratellis\")\n                :location (u / upstairs)))", "(m / meet-03\n   :location (o / organization\n                :name (n / name\n                         :op1 \"Fratellis\")\n                :location (u / upstairs)))", "(m / meet-03\n   :location (o / organization\n                :name (n / name\n                         :op1 \"Fratellis\")\n                :location (u / upstairs)))", "(m / meet-03\n   :location (o / organization\n                :name (n / name\n                         :op1 \"Fratellis\")\n                :location (u / upstairs)))", "(m / meet-03\n   :ARG0 (t / they)\n   :location (o / organization\n                :name (n / name\n                         :op1 \"Fratellis\")\n                :location (u / upstairs)))", "(m / meet-03\n   :ARG0 (t / they)\n   :location (o / organization\n                :name (n / name\n                         :op1 \"Fratellis\")\n                :location (u / upstairs)))"], "smus": ["Meeting upstairs at Fratellis.", "Meeting upstairs at Fratellis.", "Meeting upstairs at Fratellis.", "Meeting upstairs at Fratellis.", "They were meeting upstairs at the Fratellis.", "They were meeting upstairs at the Fratellis."]}, {"instance_id": "samsum-149", "summary": "Hilary has the keys to the apartment. Benjamin wants to get them and go take a nap. Hilary is having lunch with some French people at La Cantina. Hilary is meeting them at the entrance to the conference hall at 2 pm. Benjamin and Elliot might join them. They're meeting for the drinks in the evening.", "summary_trees": ["# ::snt Hilary has the keys to the apartment.\n(h / have-03\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Hilary\"))\n      :ARG1 (k / key\n            :mod (a / apartment)))", "# ::snt Benjamin wants to get them and go take a nap.\n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Benjamin\"))\n      :ARG1 (a / and\n            :op1 (g / get-01\n                  :ARG0 p\n                  :ARG1 (t / they))\n            :op2 (g2 / go-02\n                  :ARG0 p\n                  :ARG1 (n2 / nap-01\n                        :ARG0 p))))", "# ::snt Hilary is having lunch with some French people at La Cantina.\n(l / lunch-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Hilary\"))\n      :accompanier (p2 / person\n            :mod (c / country\n                  :name (n2 / name\n                        :op1 \"France\"))\n            :quant (s / some))\n      :location (f / facility\n            :name (n3 / name\n                  :op1 \"La\"\n                  :op2 \"Cantina\")))", "# ::snt Hilary is meeting them at the entrance to the conference hall at 2 pm.\n(m / meet-03\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Hilary\"))\n      :ARG1 (t / they)\n      :location (e / entrance\n            :destination (h / hall\n                  :mod (c / conference)))\n      :time (d / date-entity\n            :time \"14:00\"))", "# ::snt Benjamin and Elliot might join them.\n(p / possible-01\n      :ARG1 (j / join-04\n            :ARG0 (a / and\n                  :op1 (p2 / person\n                        :name (n / name\n                              :op1 \"Benjamin\"))\n                  :op2 (p3 / person\n                        :name (n2 / name\n                              :op1 \"Elliot\")))\n            :ARG1 (t / they)))", "# ::snt They're meeting for the drinks in the evening.\n(m / meet-03\n      :ARG0 (t / they)\n      :purpose (d / drink-01\n            :ARG0 t)\n      :time (d2 / date-entity\n            :dayperiod (e / evening)))"], "tree": ["(h / have-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hilary\"))\n   :ARG1 (k / key\n            :mod (a / apartment)))", "(h / have-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hilary\"))\n   :ARG1 (k / key\n            :mod (a / apartment)))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Benjamin\"))\n   :ARG1 (g / get-01\n            :ARG0 p\n            :ARG1 (t / they)))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Benjamin\"))\n   :ARG1 (g2 / go-02\n             :ARG0 p\n             :ARG1 (n2 / nap-01\n                       :ARG0 p)))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Benjamin\"))\n   :ARG1 (a / and\n            :op1 (g / get-01\n                    :ARG0 p\n                    :ARG1 (t / they))\n            :op2 (g2 / go-02\n                     :ARG0 p\n                     :ARG1 (n2 / nap-01\n                               :ARG0 p))))", "(l / lunch-01\n   :accompanier (p2 / person\n                    :mod (c / country\n                            :name (n2 / name\n                                      :op1 \"France\"))\n                    :quant (s / some))\n   :location (f / facility\n                :name (n3 / name\n                          :op1 \"La\"\n                          :op2 \"Cantina\")))", "(l / lunch-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hilary\"))\n   :accompanier (p2 / person\n                    :mod (c / country\n                            :name (n2 / name\n                                      :op1 \"France\"))\n                    :quant (s / some))\n   :location (f / facility\n                :name (n3 / name\n                          :op1 \"La\"\n                          :op2 \"Cantina\")))", "(m / meet-03\n   :time (d / date-entity\n            :time \"14:00\"))", "(m / meet-03\n   :time (d / date-entity\n            :time \"14:00\"))", "(m / meet-03\n   :time (d / date-entity\n            :time \"14:00\"))", "(m / meet-03\n   :time (d / date-entity\n            :time \"14:00\"))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hilary\")))", "(m / meet-03\n   :location (e / entrance\n                :destination (h / hall\n                                :mod (c / conference))))", "(m / meet-03\n   :location (e / entrance\n                :destination (h / hall\n                                :mod (c / conference))))", "(m / meet-03\n   :location (e / entrance\n                :destination (h / hall\n                                :mod (c / conference))))", "(m / meet-03\n   :location (e / entrance\n                :destination (h / hall\n                                :mod (c / conference))))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hilary\"))\n   :ARG1 (t / they))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hilary\"))\n   :time (d / date-entity\n            :time \"14:00\"))", "(m / meet-03\n   :location (e / entrance\n                :destination (h / hall\n                                :mod (c / conference)))\n   :time (d / date-entity\n            :time \"14:00\"))", "(m / meet-03\n   :location (e / entrance\n                :destination (h / hall\n                                :mod (c / conference)))\n   :time (d / date-entity\n            :time \"14:00\"))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hilary\"))\n   :ARG1 (t / they)\n   :time (d / date-entity\n            :time \"14:00\"))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hilary\"))\n   :location (e / entrance\n                :destination (h / hall\n                                :mod (c / conference))))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hilary\"))\n   :ARG1 (t / they)\n   :location (e / entrance\n                :destination (h / hall\n                                :mod (c / conference))))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hilary\"))\n   :location (e / entrance\n                :destination (h / hall\n                                :mod (c / conference)))\n   :time (d / date-entity\n            :time \"14:00\"))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hilary\"))\n   :ARG1 (t / they)\n   :location (e / entrance\n                :destination (h / hall\n                                :mod (c / conference)))\n   :time (d / date-entity\n            :time \"14:00\"))", "(p / possible-01\n   :ARG1 (j / join-04\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Benjamin\"))\n            :ARG1 (t / they)))", "(p / possible-01\n   :ARG1 (j / join-04\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Benjamin\"))\n            :ARG1 (t / they)))", "(p / possible-01\n   :ARG1 (j / join-04\n            :ARG0 (p3 / person\n                      :name (n2 / name\n                                :op1 \"Elliot\"))\n            :ARG1 (t / they)\n            :ARG1 t))", "(p / possible-01\n   :ARG1 (j / join-04\n            :ARG0 (p3 / person\n                      :name (n2 / name\n                                :op1 \"Elliot\"))\n            :ARG1 (t / they)\n            :ARG1 t))", "(p / possible-01\n   :ARG1 (j / join-04\n            :ARG0 (a / and\n                     :op1 (p2 / person\n                              :name (n / name\n                                       :op1 \"Benjamin\"))\n                     :op2 (p3 / person\n                              :name (n2 / name\n                                        :op1 \"Elliot\")))\n            :ARG1 (t / they)))", "(p / possible-01\n   :ARG1 (j / join-04\n            :ARG0 (a / and\n                     :op1 (p2 / person\n                              :name (n / name\n                                       :op1 \"Benjamin\"))\n                     :op2 (p3 / person\n                              :name (n2 / name\n                                        :op1 \"Elliot\")))\n            :ARG1 (t / they)))", "(m / meet-03\n   :time (d2 / date-entity\n             :dayperiod (e / evening)))", "(m / meet-03\n   :time (d2 / date-entity\n             :dayperiod (e / evening)))", "(m / meet-03\n   :time (d2 / date-entity\n             :dayperiod (e / evening)))", "(m / meet-03\n   :ARG0 (t / they)\n   :time (d2 / date-entity\n             :dayperiod (e / evening)))", "(m / meet-03\n   :purpose (d / drink-01)\n   :time (d2 / date-entity\n             :dayperiod (e / evening)))", "(m / meet-03\n   :ARG0 (t / they)\n   :purpose (d / drink-01\n               :ARG0 t)\n   :time (d2 / date-entity\n             :dayperiod (e / evening)))"], "smus": ["Hillary has the keys to the apartment.", "Hillary has the keys to the apartment.", "Benjamin wants to get them.", "Benjamin wants to go to nap.", "Benjamin wants to get them and go to nap.", "Lunch with some French people at La Cantina.", "Hillary had lunch with some French people at La Cantina.", "Meeting at 2:00pm", "Meeting at 2:00pm", "Meeting at 2:00pm", "Meeting at 2:00pm", "Hillary is meeting.", "Meeting at the entrance to conference hall.", "Meeting at the entrance to conference hall.", "Meeting at the entrance to conference hall.", "Meeting at the entrance to conference hall.", "Hillary is meeting them.", "Hillary is meeting at 2:00 pm.", "Meeting at the entrance to conference hall at 2:00pm", "Meeting at the entrance to conference hall at 2:00pm", "Hillary was meeting them at 2:00 pm.", "Hillary was meeting at the entrance to the conference hall.", "Hillary and them were meeting at the entrance to the conference hall.", "Hillary was meeting at the entrance to the conference hall at 2:00 pm.", "Hillary was meeting them at the entrance to the conference hall at 2:00 pm.", "Maybe Benjamin will join them.", "Maybe Benjamin will join them.", "Elliot might join them.", "Elliot might join them.", "Maybe Benjamin and Elliot will join them.", "Maybe Benjamin and Elliot will join them.", "Meeting in the evening.", "Meeting in the evening.", "Meeting in the evening.", "They will be meeting in the evening.", "Meeting for drinks in the evening.", "They are meeting for drinks in the evening."]}, {"instance_id": "samsum-150", "summary": "Hugh shares a photo of his son with Joan and Julia. ", "summary_trees": ["# ::snt Hugh shares a photo of his son with Joan and Julia.\n(s / share-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Hugh\"))\n      :ARG1 (p2 / photo\n            :topic (p3 / person\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 p\n                        :ARG2 (s2 / son))))\n      :ARG2 (a / and\n            :op1 (p4 / person\n                  :name (n2 / name\n                        :op1 \"Joan\"))\n            :op2 (p5 / person\n                  :name (n3 / name\n                        :op1 \"Julia\"))))"], "tree": ["(s / share-01\n   :ARG1 (p2 / photo\n             :topic (p3 / person\n                        :ARG0 (h / have-rel-role-91\n                                 :ARG1 (p / person :name (n / name :op1 \"Hugh\"))\n                                 :ARG2 (s2 / son)))))", "(s / share-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hugh\"))\n   :ARG1 (p2 / photo\n             :topic (p3 / person\n                        :ARG0 (h / have-rel-role-91\n                                 :ARG1 p\n                                 :ARG2 (s2 / son)))))", "(s / share-01\n   :ARG1 (p2 / photo\n             :topic (p3 / person\n                        :ARG0 (h / have-rel-role-91\n                                 :ARG1 (p / person :name (n / name :op1 \"Hugh\"))\n                                 :ARG2 (s2 / son))))\n   :ARG2 (p4 / person\n             :name (n2 / name\n                       :op1 \"Joan\")))", "(s / share-01\n   :ARG1 (p2 / photo\n             :topic (p3 / person\n                        :ARG0 (h / have-rel-role-91\n                                 :ARG1 (p / person :name (n / name :op1 \"Hugh\"))\n                                 :ARG2 (s2 / son))))\n   :ARG2 (p5 / person\n             :name (n3 / name\n                       :op1 \"Julia\")))", "(s / share-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hugh\"))\n   :ARG1 (p2 / photo\n             :topic (p3 / person\n                        :ARG0 (h / have-rel-role-91\n                                 :ARG1 p\n                                 :ARG2 (s2 / son))))\n   :ARG2 (p4 / person\n             :name (n2 / name\n                       :op1 \"Joan\")))", "(s / share-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hugh\"))\n   :ARG1 (p2 / photo\n             :topic (p3 / person\n                        :ARG0 (h / have-rel-role-91\n                                 :ARG1 p\n                                 :ARG2 (s2 / son))))\n   :ARG2 (p5 / person\n             :name (n3 / name\n                       :op1 \"Julia\")))", "(s / share-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hugh\"))\n   :ARG1 (p2 / photo\n             :topic (p3 / person\n                        :ARG0 (h / have-rel-role-91\n                                 :ARG1 p\n                                 :ARG2 (s2 / son))))\n   :ARG2 (p4 / person\n             :name (n2 / name\n                       :op1 \"Joan\")))", "(s / share-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hugh\"))\n   :ARG1 (p2 / photo\n             :topic (p3 / person\n                        :ARG0 (h / have-rel-role-91\n                                 :ARG1 p\n                                 :ARG2 (s2 / son))))\n   :ARG2 (p5 / person\n             :name (n3 / name\n                       :op1 \"Julia\")))", "(s / share-01\n   :ARG1 (p2 / photo\n             :topic (p3 / person\n                        :ARG0 (h / have-rel-role-91\n                                 :ARG1 (p / person :name (n / name :op1 \"Hugh\"))\n                                 :ARG2 (s2 / son))))\n   :ARG2 (a / and\n            :op1 (p4 / person\n                     :name (n2 / name\n                               :op1 \"Joan\"))\n            :op2 (p5 / person\n                     :name (n3 / name\n                               :op1 \"Julia\"))))", "(s / share-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hugh\"))\n   :ARG1 (p2 / photo\n             :topic (p3 / person\n                        :ARG0 (h / have-rel-role-91\n                                 :ARG1 p\n                                 :ARG2 (s2 / son))))\n   :ARG2 (a / and\n            :op1 (p4 / person\n                     :name (n2 / name\n                               :op1 \"Joan\"))\n            :op2 (p5 / person\n                     :name (n3 / name\n                               :op1 \"Julia\"))))", "(s / share-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hugh\"))\n   :ARG1 (p2 / photo\n             :topic (p3 / person\n                        :ARG0 (h / have-rel-role-91\n                                 :ARG1 p\n                                 :ARG2 (s2 / son))))\n   :ARG2 (a / and\n            :op1 (p4 / person\n                     :name (n2 / name\n                               :op1 \"Joan\"))\n            :op2 (p5 / person\n                     :name (n3 / name\n                               :op1 \"Julia\"))))"], "smus": ["Shares photo of Hugh's son", "Hugh shares a photo of his son.", "The photo of Hugh's son shares with Joan.", "The photo of Hugh's son shares with Julia.", "Hugh shares a photo of his son with Joan.", "Hugh shares a photo of his son with Julia.", "Hugh shares a photo of his son with Joan.", "Hugh shares a photo of his son with Julia.", "The photo of Hugh's son shares with Joan and Julia.", "a href=\"http://www.youtube.com/watch?v=hugh_1\">Hugh shares a photo of his son with Joan and Julia./a>", "a href=\"http://www.youtube.com/watch?v=hugh_1\">Hugh shares a photo of his son with Joan and Julia./a>"]}, {"instance_id": "samsum-151", "summary": "They are going to do some research on holiday options and discuss them later. They will most likely choose a cheap offer from a tour operator.", "summary_trees": ["# ::snt They are going to do some research on holiday options and discuss them later.\n(a / and\n      :op1 (r / research-01\n            :ARG0 (t / they)\n            :ARG1 (o / option\n                  :mod (h / holiday-01))\n            :mod (s / some))\n      :op2 (d / discuss-01\n            :ARG0 t\n            :ARG1 o\n            :time (a2 / after\n                  :op1 r)))", "# ::snt They will most likely choose a cheap offer from a tour operator.\n(l / likely-01\n      :ARG1 (c / choose-01\n            :ARG0 (t / they)\n            :ARG1 (o / offer-01\n                  :ARG0 (c2 / company\n                        :ARG0-of (o2 / operate-01\n                              :ARG1 (t2 / tour-01)))\n                  :ARG1-of (c3 / cheap-02)))\n      :ARG2-of (h / have-degree-91\n            :ARG1 c\n            :ARG3 (m / most)))"], "tree": ["(d / discuss-01\n   :time (a2 / after\n             :op1 (r / research-01)))", "(d / discuss-01\n   :ARG0 (t / they)\n   :ARG1 (o / option)\n   :time (a2 / after\n             :op1 (r / research-01)))", "(r / research-01\n   :ARG0 (t / they)\n   :ARG1 (o / option\n            :mod (h / holiday-01))\n   :mod (s / some))", "(o / offer-01\n   :ARG0 (c2 / company\n             :ARG0 (o2 / operate-01\n                       :ARG1 (t2 / tour-01)))\n   :ARG1 (c3 / cheap-02))", "(c / choose-01\n   :ARG1 (o / offer-01\n            :ARG0 (c2 / company\n                      :ARG0 (o2 / operate-01\n                                :ARG1 (t2 / tour-01)))\n            :ARG1 (c3 / cheap-02)))", "(c / choose-01\n   :ARG0 (t / they)\n   :ARG1 (o / offer-01\n            :ARG0 (c2 / company\n                      :ARG0 (o2 / operate-01\n                                :ARG1 (t2 / tour-01)))\n            :ARG1 (c3 / cheap-02)))", "(c / choose-01\n   :ARG0 (t / they)\n   :ARG1 (o / offer-01\n            :ARG0 (c2 / company\n                      :ARG0 (o2 / operate-01\n                                :ARG1 (t2 / tour-01)))\n            :ARG1 (c3 / cheap-02)))", "(l / likely-01\n   :ARG1 (c / choose-01\n            :ARG0 (t / they)\n            :ARG1 (o / offer-01\n                     :ARG0 (c2 / company\n                               :ARG0 (o2 / operate-01\n                                         :ARG1 (t2 / tour-01)))\n                     :ARG1 (c3 / cheap-02))))"], "smus": ["Discuss after the research.", "After the research they will discuss the options.", "They did some research on holiday options.", "Tour operator offers a cheap offer.", "Choose the cheapest offer from the tour operator.", "They would choose a tour operator that offers a cheap offer.", "They would choose a tour operator that offers a cheap offer.", "They will likely choose the cheapest offer from the tour operator."]}, {"instance_id": "samsum-152", "summary": "Alexander finds Mr Linda's voice monotonous. Igor fell asleep during the lecture. Casper reckons it's a waste of time. They are going to meet near the university and go somewhere else instead. ", "summary_trees": ["# ::snt Alexander finds Mr Linda's voice monotonous.\n(f / find-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Alexander\"))\n      :ARG1 (m / monotonous\n            :domain (v / voice\n                  :poss (p2 / person\n                        :name (n2 / name\n                              :op1 \"Mr\"\n                              :op2 \"Linda\")))))", "# ::snt Igor fell asleep during the lecture.\n(f / fall-07\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Igor\"))\n      :ARG2 (s / sleep-01\n            :ARG0 p)\n      :time (l / lecture-01))", "# ::snt Casper reckons it's a waste of time.\n(r / reckons-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Casper\"))\n      :ARG1 (w / waste-01\n            :ARG1 (t / time)\n            :ARG2 (ii / it)))", "# ::snt They are going to meet near the university and go somewhere else instead.\n(a / and\n      :op1 (m / meet-03\n            :ARG0 (t / they)\n            :location (n / near-02\n                  :ARG2 (u / university)))\n      :op2 (g / go-02\n            :ARG0 t\n            :ARG4 (s / somewhere\n                  :mod (e / else)))\n      :ARG1-of (ii / instead-of-91\n            :ARG2 m))"], "tree": ["(f / find-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Alexander\"))\n   :ARG1 (m / monotonous\n            :domain (v / voice\n                       :poss (p2 / person\n                                 :name (n2 / name\n                                           :op1 \"Mr\"\n                                           :op2 \"Linda\")))))", "(f / find-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Alexander\"))\n   :ARG1 (m / monotonous\n            :domain (v / voice\n                       :poss (p2 / person\n                                 :name (n2 / name\n                                           :op1 \"Mr\"\n                                           :op2 \"Linda\")))))", "(f / fall-07\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Igor\"))\n   :ARG2 (s / sleep-01\n            :ARG0 p))", "(f / fall-07\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Igor\"))\n   :ARG2 (s / sleep-01\n            :ARG0 p)\n   :time (l / lecture-01))", "(w / waste-01\n   :ARG1 (t / time)\n   :ARG2 (ii / it))", "(r / reckons-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Casper\"))\n   :ARG1 (w / waste-01\n            :ARG1 (t / time)\n            :ARG2 (ii / it)))", "(m / meet-03\n   :location (n / near-02\n                :ARG2 (u / university)))", "(g / go-02\n   :ARG0 (t / they)\n   :ARG4 (s / somewhere\n            :mod (e / else)))", "(g / go-02\n   :ARG0 (t / they)\n   :ARG4 (s / somewhere\n            :mod (e / else)))", "(m / meet-03\n   :ARG0 (t / they)\n   :location (n / near-02\n                :ARG2 (u / university)))", "(m / meet-03\n   :ARG0 (t / they)\n   :location (n / near-02\n                :ARG2 (u / university)))"], "smus": ["Alexander finds Mr Linda's voice monotonous.", "Alexander finds Mr Linda's voice monotonous.", "Igor fell asleep.", "Igor fell asleep during the lecture.", "It's a waste of time.", "Casper reckons it's a waste of time.", "Meet near the university.", "They are going somewhere else.", "They are going somewhere else.", "They will meet near the university.", "They will meet near the university."]}, {"instance_id": "samsum-153", "summary": "Dan's had an injection with anaesthesis because he got swollen. He feels it's not working though and it still hurts him.", "summary_trees": ["# ::snt Dan's had an injection with anaesthesis because he got swollen.\n(ii / inject-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Dan\"))\n      :ARG2 (a / anesthetic)\n      :ARG1-of (c / cause-01\n            :ARG0 (s / swell-01\n                  :ARG1 p)))", "# ::snt He feels it's not working though and it still hurts him.\n(h / have-concession-91\n      :ARG1 (a / and\n            :op1 (f / feel-02\n                  :ARG0 (h2 / he)\n                  :ARG1 (w / work-09\n                        :polarity -\n                        :ARG1 (ii / it)))\n            :op2 (h3 / hurt-01\n                  :ARG0 ii\n                  :ARG1 h2\n                  :mod (s / still))))"], "tree": ["(c / cause-01\n   :ARG0 (s / swell-01\n            :ARG1 (p / person :name (n / name :op1 \"Dan\"))))", "(ii / inject-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Dan\"))\n    :ARG2 (a / anesthetic)\n    :ARG1 (c / cause-01\n             :ARG0 (s / swell-01\n                      :ARG1 p)))", "(w / work-09\n   :polarity -\n   :ARG1 (ii / it))", "(w / work-09\n   :polarity -\n   :ARG1 (ii / it))", "(h3 / hurt-01\n    :ARG0 (ii / it)\n    :ARG1 (h2 / he)\n    :mod (s / still))", "(h / have-concession-91\n   :ARG1 (h3 / hurt-01\n             :ARG0 (ii / it)\n             :ARG1 (h2 / he)\n             :mod (s / still)))", "(h / have-concession-91\n   :ARG1 (h3 / hurt-01\n             :ARG0 (ii / it)\n             :ARG1 (h2 / he)\n             :mod (s / still)))", "(f / feel-02\n   :ARG0 (h2 / he)\n   :ARG1 (w / work-09\n            :polarity -\n            :ARG1 (ii / it)))", "(f / feel-02\n   :ARG0 (h2 / he)\n   :ARG1 (w / work-09\n            :polarity -\n            :ARG1 (ii / it)))", "(h / have-concession-91\n   :ARG1 (f / feel-02\n            :ARG0 (h2 / he)\n            :ARG1 (w / work-09\n                     :polarity -\n                     :ARG1 (ii / it))))", "(h / have-concession-91\n   :ARG1 (f / feel-02\n            :ARG0 (h2 / he)\n            :ARG1 (w / work-09\n                     :polarity -\n                     :ARG1 (ii / it))))", "(h / have-concession-91\n   :ARG1 (a / and\n            :op1 (f / feel-02\n                    :ARG0 (h2 / he)\n                    :ARG1 (w / work-09\n                             :polarity -\n                             :ARG1 (ii / it)))\n            :op2 (h3 / hurt-01\n                     :ARG0 ii\n                     :ARG1 h2\n                     :mod (s / still))))", "(h / have-concession-91\n   :ARG1 (a / and\n            :op1 (f / feel-02\n                    :ARG0 (h2 / he)\n                    :ARG1 (w / work-09\n                             :polarity -\n                             :ARG1 (ii / it)))\n            :op2 (h3 / hurt-01\n                     :ARG0 ii\n                     :ARG1 h2\n                     :mod (s / still))))"], "smus": ["Because Dan is swelling.", "Dan had been given an anesthetic injection because he was swelling.", "It's not working.", "It's not working.", "It still hurts him.", "But it still hurts him.", "But it still hurts him.", "He feels that it isn't working.", "He feels that it isn't working.", "But he feels it isn't working.", "But he feels it isn't working.", "But he feels it isn't working and it still hurts him.", "But he feels it isn't working and it still hurts him."]}, {"instance_id": "samsum-154", "summary": "Joe's job is wearing him up. Tim's friend Terry quit his job because he was burned out.", "summary_trees": ["# ::snt Joe's job is wearing him up.\n(w / wear-up-04\n      :ARG0 (j / job\n            :poss (p / person\n                  :name (n / name\n                        :op1 \"Joe\")))\n      :ARG1 p)", "# ::snt Tim's friend Terry quit his job because he was burned out.\n(q / quit-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Terry\")\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Tim\"))\n                  :ARG2 (f / friend)))\n      :ARG1 (j / job\n            :poss p)\n      :ARG1-of (c / cause-01\n            :ARG0 (b / burn-out-03\n                  :ARG1 p)))"], "tree": ["(w / wear-up-04\n   :ARG0 (j / job\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Joe\")))\n   :ARG1 p)", "(c / cause-01\n   :ARG0 (b / burn-out-03\n            :ARG1 (p / person :name (n / name :op1 \"Terry\")))))", "(h / have-rel-role-91\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Tim\"))\n   :ARG2 (f / friend))", "(q / quit-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Terry\")\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Tim\"))\n                     :ARG2 (f / friend)))\n   :ARG1 (j / job\n            :poss p)\n   :ARG1 (c / cause-01\n            :ARG0 (b / burn-out-03\n                     :ARG1 p)))"], "smus": ["Joe's job is wearing him up.", "Because Terry is burnt out.", "Tim is a friend.", "Tim's friend Terry quit his job because he was burnt out."]}, {"instance_id": "samsum-155", "summary": "Nathalie, Pauline, Jacob and Anthony are thinking about spending holidays in Greece together in August. Jacob and Nathalie need to be back by August 10 because of Nathalie's younger sister's wedding. ", "summary_trees": ["# ::snt Nathalie, Pauline, Jacob and Anthony are thinking about spending holidays in Greece together in August.\n(t / think-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Nathalie\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Pauline\"))\n            :op3 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Jacob\"))\n            :op4 (p4 / person\n                  :name (n4 / name\n                        :op1 \"Anthony\")))\n      :ARG1 (s / spend-02\n            :ARG0 a\n            :ARG1 (h / holiday-01\n                  :ARG0 a\n                  :ARG1 (c / country\n                        :name (n5 / name\n                              :op1 \"Greece\")))\n            :time (d / date-entity\n                  :month 8)\n            :manner (t2 / together)))", "# ::snt Jacob and Nathalie need to be back by August 10 because of Nathalie's younger sister's wedding.\n(o / obligate-01\n      :ARG2 (b / be-located-at-91\n            :ARG1 (a / and\n                  :op1 (p / person\n                        :name (n / name\n                              :op1 \"Jacob\"))\n                  :op2 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Nathalie\")))\n            :ARG2 (b2 / back)\n            :time (b3 / by\n                  :op1 (d / date-entity\n                        :month 8\n                        :day 10)))\n      :ARG1-of (c / cause-01\n            :ARG0 (w / wed-01\n                  :ARG1 (p3 / person\n                        :ARG0-of (h / have-rel-role-91\n                              :ARG1 p2\n                              :ARG2 (s / sister\n                                    :ARG1-of (h2 / have-degree-91\n                                          :ARG2 (y / young)\n                                          :ARG3 (m / more))))))))"], "tree": ["(s / spend-02\n   :time (d / date-entity\n            :month 8)\n   :manner (t2 / together))", "(h / holiday-01\n   :ARG0 (a / and)\n   :ARG1 (c / country\n            :name (n5 / name\n                      :op1 \"Greece\")))", "(s / spend-02\n   :ARG0 (a / and)\n   :ARG1 (h / holiday-01\n            :ARG0 a\n            :ARG1 (c / country\n                     :name (n5 / name\n                               :op1 \"Greece\")))\n   :time (d / date-entity\n            :month 8)\n   :manner (t2 / together))", "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nathalie\"))\n   :ARG1 (s / spend-02\n            :ARG0 p\n            :ARG1 (h / holiday-01\n                     :ARG0 p\n                     :ARG1 (c / country\n                              :name (n5 / name\n                                        :op1 \"Greece\")))\n            :time (d / date-entity\n                     :month 8)\n            :manner (t2 / together)))", "(t / think-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Pauline\"))\n   :ARG1 (s / spend-02\n            :ARG0 p2\n            :ARG1 (h / holiday-01\n                     :ARG0 p2\n                     :ARG1 (c / country\n                              :name (n5 / name\n                                        :op1 \"Greece\")))\n            :time (d / date-entity\n                     :month 8)\n            :manner (t2 / together)))", "(t / think-01\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Jacob\"))\n   :ARG1 (s / spend-02\n            :ARG0 p3\n            :ARG1 (h / holiday-01\n                     :ARG0 p3\n                     :ARG1 (c / country\n                              :name (n5 / name\n                                        :op1 \"Greece\")))\n            :time (d / date-entity\n                     :month 8)\n            :manner (t2 / together)))", "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nathalie\"))\n   :ARG1 (s / spend-02\n            :ARG0 p\n            :ARG1 (h / holiday-01\n                     :ARG0 p\n                     :ARG1 (c / country\n                              :name (n5 / name\n                                        :op1 \"Greece\")))\n            :time (d / date-entity\n                     :month 8)\n            :manner (t2 / together)))", "(t / think-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Pauline\"))\n   :ARG1 (s / spend-02\n            :ARG0 p2\n            :ARG1 (h / holiday-01\n                     :ARG0 p2\n                     :ARG1 (c / country\n                              :name (n5 / name\n                                        :op1 \"Greece\")))\n            :time (d / date-entity\n                     :month 8)\n            :manner (t2 / together)))", "(t / think-01\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Jacob\"))\n   :ARG1 (s / spend-02\n            :ARG0 p3\n            :ARG1 (h / holiday-01\n                     :ARG0 p3\n                     :ARG1 (c / country\n                              :name (n5 / name\n                                        :op1 \"Greece\")))\n            :time (d / date-entity\n                     :month 8)\n            :manner (t2 / together)))", "(t / think-01\n   :ARG0 (p4 / person\n             :name (n4 / name\n                       :op1 \"Anthony\"))\n   :ARG1 (s / spend-02\n            :ARG0 p4\n            :ARG1 (h / holiday-01\n                     :ARG0 p4\n                     :ARG1 (c / country\n                              :name (n5 / name\n                                        :op1 \"Greece\")))\n            :time (d / date-entity\n                     :month 8)\n            :manner (t2 / together))\n   :ARG1 s)", "(t / think-01\n   :ARG0 (p4 / person\n             :name (n4 / name\n                       :op1 \"Anthony\"))\n   :ARG1 (s / spend-02\n            :ARG0 p4\n            :ARG1 (h / holiday-01\n                     :ARG0 p4\n                     :ARG1 (c / country\n                              :name (n5 / name\n                                        :op1 \"Greece\")))\n            :time (d / date-entity\n                     :month 8)\n            :manner (t2 / together))\n   :ARG1 s)", "(t / think-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Nathalie\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Pauline\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Jacob\"))\n            :op4 (p4 / person\n                     :name (n4 / name\n                               :op1 \"Anthony\")))\n   :ARG1 (s / spend-02\n            :ARG0 a\n            :ARG1 (h / holiday-01\n                     :ARG0 a\n                     :ARG1 (c / country\n                              :name (n5 / name\n                                        :op1 \"Greece\")))\n            :time (d / date-entity\n                     :month 8)\n            :manner (t2 / together)))", "(t / think-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Nathalie\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Pauline\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Jacob\"))\n            :op4 (p4 / person\n                     :name (n4 / name\n                               :op1 \"Anthony\")))\n   :ARG1 (s / spend-02\n            :ARG0 a\n            :ARG1 (h / holiday-01\n                     :ARG0 a\n                     :ARG1 (c / country\n                              :name (n5 / name\n                                        :op1 \"Greece\")))\n            :time (d / date-entity\n                     :month 8)\n            :manner (t2 / together)))", "(s / spend-02\n   :time (d / date-entity\n            :month 8)\n   :manner (t2 / together))", "(h2 / have-degree-91\n    :ARG2 (y / young)\n    :ARG3 (m / more))", "(b / be-located-at-91\n   :time (b3 / by\n             :op1 (d / date-entity\n                     :month 8\n                     :day 10)))", "(w / wed-01\n   :ARG1 (p3 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 (p2 / person :name (n2 / name :op1 \"Nathalie\"))\n                      :ARG2 (s / sister\n                               :ARG1 (h2 / have-degree-91\n                                         :ARG2 (y / young)\n                                         :ARG3 (m / more))))))", "(w / wed-01\n   :ARG1 (p3 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 (p2 / person :name (n2 / name :op1 \"Nathalie\"))\n                      :ARG2 (s / sister\n                               :ARG1 (h2 / have-degree-91\n                                         :ARG2 (y / young)\n                                         :ARG3 (m / more))))))", "(c / cause-01\n   :ARG0 (w / wed-01\n            :ARG1 (p3 / person\n                      :ARG0 (h / have-rel-role-91\n                               :ARG1 (p2 / person :name (n2 / name :op1 \"Nathalie\"))\n                               :ARG2 (s / sister\n                                        :ARG1 (h2 / have-degree-91\n                                                  :ARG2 (y / young)\n                                                  :ARG3 (m / more)))))))", "(o / obligate-01\n   :ARG2 (b / be-located-at-91\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Jacob\"))\n            :ARG2 (b2 / back)\n            :time (b3 / by\n                      :op1 (d / date-entity\n                              :month 8\n                              :day 10))))", "(o / obligate-01\n   :ARG2 (b / be-located-at-91\n            :ARG1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Nathalie\"))\n            :ARG2 (b2 / back)\n            :ARG2 b2\n            :time (b3 / by\n                      :op1 (d / date-entity\n                              :month 8\n                              :day 10))))", "(o / obligate-01\n   :ARG2 (b / be-located-at-91\n            :ARG1 (a / and\n                     :op1 (p / person\n                             :name (n / name\n                                      :op1 \"Jacob\"))\n                     :op2 (p2 / person\n                              :name (n2 / name\n                                        :op1 \"Nathalie\")))\n            :ARG2 (b2 / back)\n            :time (b3 / by\n                      :op1 (d / date-entity\n                              :month 8\n                              :day 10))))", "(o / obligate-01\n   :ARG2 (b / be-located-at-91\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Jacob\"))\n            :ARG2 (b2 / back)\n            :time (b3 / by\n                      :op1 (d / date-entity\n                              :month 8\n                              :day 10)))\n   :ARG1 (c / cause-01\n            :ARG0 (w / wed-01\n                     :ARG1 (p3 / person\n                               :ARG0 (h / have-rel-role-91\n                                        :ARG1 (p2 / person :name (n2 / name :op1 \"Nathalie\"))\n                                        :ARG2 (s / sister\n                                                 :ARG1 (h2 / have-degree-91\n                                                           :ARG2 (y / young)\n                                                           :ARG3 (m / more))))))))", "(o / obligate-01\n   :ARG2 (b / be-located-at-91\n            :ARG1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Nathalie\"))\n            :ARG2 (b2 / back)\n            :ARG2 b2\n            :time (b3 / by\n                      :op1 (d / date-entity\n                              :month 8\n                              :day 10)))\n   :ARG1 (c / cause-01\n            :ARG0 (w / wed-01\n                     :ARG1 (p3 / person\n                               :ARG0 (h / have-rel-role-91\n                                        :ARG1 p2\n                                        :ARG2 (s / sister\n                                                 :ARG1 (h2 / have-degree-91\n                                                           :ARG2 (y / young)\n                                                           :ARG3 (m / more))))))))", "(o / obligate-01\n   :ARG2 (b / be-located-at-91\n            :ARG1 (a / and\n                     :op1 (p / person\n                             :name (n / name\n                                      :op1 \"Jacob\"))\n                     :op2 (p2 / person\n                              :name (n2 / name\n                                        :op1 \"Nathalie\")))\n            :ARG2 (b2 / back)\n            :time (b3 / by\n                      :op1 (d / date-entity\n                              :month 8\n                              :day 10)))\n   :ARG1 (c / cause-01\n            :ARG0 (w / wed-01\n                     :ARG1 (p3 / person\n                               :ARG0 (h / have-rel-role-91\n                                        :ARG1 p2\n                                        :ARG2 (s / sister\n                                                 :ARG1 (h2 / have-degree-91\n                                                           :ARG2 (y / young)\n                                                           :ARG3 (m / more))))))))"], "smus": ["Spending together in August.", "Greece holidays", "In August, the two will be spending holidays together in Greece.", "Natalie is thinking of spending her August holidays together in Greece.", "Pauline is thinking of spending her August holidays together in Greece.", "Jacob is thinking of spending his August holidays together in Greece.", "Natalie is thinking of spending her August holidays together in Greece.", "Pauline is thinking of spending her August holidays together in Greece.", "Jacob is thinking of spending his August holidays together in Greece.", "Anthony was thinking of spending his August holidays together in Greece.", "Anthony was thinking of spending his August holidays together in Greece.", "Natalie, Pauline, Jacob and Anthony are thinking of spending August holidays together in Greece.", "Natalie, Pauline, Jacob and Anthony are thinking of spending August holidays together in Greece.", "Spending together in August.", "Younger", "By August 10th", "Nathalie's younger sister was wed.", "Nathalie's younger sister was wed.", "Because Nathalie's younger sister was wed.", "Jacob must be back by August 10.", "Nathalie must be back by August 10th.", "Jacob and Nathalie must be back by August 10.", "Nathan had to be back by August 10 because Nathalie's younger sister was getting married.", "Nathalie had to be back by August 10 because her younger sister was getting married.", "Jacob and Nathalie had to be back by August 10 because their younger sister was getting married."]}, {"instance_id": "samsum-156", "summary": "Archie is arriving from Southampton around midnight. He will travel by bus. He will call Judah.", "summary_trees": ["# ::snt Archie is arriving from Southampton around midnight.\n(a / arrive-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Archie\"))\n      :ARG3 (c / city\n            :name (n2 / name\n                  :op1 \"Southampton\"))\n      :time (a2 / around\n            :op1 (m / midnight)))", "# ::snt He will travel by bus.\n(t / travel-01\n      :ARG0 (h / he)\n      :manner (b / bus))", "# ::snt He will call Judah.\n(c / call-02\n      :ARG0 (h / he)\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Judah\")))"], "tree": ["(a / arrive-01\n   :time (a2 / around\n             :op1 (m / midnight)))", "(a / arrive-01\n   :time (a2 / around\n             :op1 (m / midnight)))", "(a / arrive-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Archie\")))", "(a / arrive-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Archie\"))\n   :time (a2 / around\n             :op1 (m / midnight)))", "(a / arrive-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Archie\"))\n   :ARG3 (c / city\n            :name (n2 / name\n                      :op1 \"Southampton\"))\n   :time (a2 / around\n             :op1 (m / midnight)))", "(t / travel-01\n   :ARG0 (h / he)\n   :manner (b / bus))", "(c / call-02\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Judah\")))"], "smus": ["Arriving around midnight.", "Arriving around midnight.", "Archie is arriving.", "Archie arrived around midnight.", "Archie arrived in Southampton around midnight.", "He would travel by bus.", "Call Judah."]}, {"instance_id": "samsum-157", "summary": "Andy is going to visit Paul in about 1 hour.", "summary_trees": ["# ::snt Andy is going to visit Paul in about 1 hour.\n(v / visit-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Andy\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Paul\"))\n      :time (a / after\n            :op1 (n3 / now)\n            :quant (a2 / about\n                  :op1 (t / temporal-quantity\n                        :quant 1\n                        :unit (h / hour)))))"], "tree": ["(v / visit-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Andy\")))", "(v / visit-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Andy\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Paul\")))", "(v / visit-01\n   :time (a / after\n            :op1 (n3 / now)\n            :quant (a2 / about\n                       :op1 (t / temporal-quantity\n                               :quant 1\n                               :unit (h / hour)))))", "(v / visit-01\n   :time (a / after\n            :op1 (n3 / now)\n            :quant (a2 / about\n                       :op1 (t / temporal-quantity\n                               :quant 1\n                               :unit (h / hour)))))", "(v / visit-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Andy\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Paul\"))\n   :time (a / after\n            :op1 (n3 / now)\n            :quant (a2 / about\n                       :op1 (t / temporal-quantity\n                               :quant 1\n                               :unit (h / hour)))))", "(v / visit-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Andy\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Paul\"))\n   :time (a / after\n            :op1 (n3 / now)\n            :quant (a2 / about\n                       :op1 (t / temporal-quantity\n                               :quant 1\n                               :unit (h / hour)))))"], "smus": ["Andy will visit.", "Andy will visit Paul.", "Visit about an hour from now.", "Visit about an hour from now.", "Andy will visit Paul in about an hour.", "Andy will visit Paul in about an hour."]}, {"instance_id": "samsum-158", "summary": "Ariana will do shopping in Midtown. Aviana can't join her.", "summary_trees": ["# ::snt Ariana will do shopping in Midtown.\n(s / shop-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Ariana\"))\n      :location (l / local-region\n            :name (n2 / name\n                  :op1 \"Midtown\")))", "# ::snt Aviana can't join her.\n(p / possible-01\n      :polarity -\n      :ARG1 (j / join-04\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Aviana\"))\n            :ARG1 (s / she)))"], "tree": ["(s / shop-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ariana\")))", "(s / shop-01\n   :location (l / local-region\n                :name (n2 / name\n                          :op1 \"Midtown\")))", "(s / shop-01\n   :location (l / local-region\n                :name (n2 / name\n                          :op1 \"Midtown\")))", "(s / shop-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ariana\"))\n   :location (l / local-region\n                :name (n2 / name\n                          :op1 \"Midtown\")))", "(s / shop-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ariana\"))\n   :location (l / local-region\n                :name (n2 / name\n                          :op1 \"Midtown\")))", "(p / possible-01\n   :polarity -\n   :ARG1 (j / join-04\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Aviana\"))\n            :ARG1 (s / she)))"], "smus": ["Arianna is shopping.", "Shopping in Midtown.", "Shopping in Midtown.", "Arianna is shopping in Midtown.", "Arianna is shopping in Midtown.", "Aviana couldn't join her."]}, {"instance_id": "samsum-159", "summary": "Some girls had to undress because they had been pushed into the pool.", "summary_trees": ["# ::snt Some girls had to undress because they had been pushed into the pool.\n(o / obligate-01\n      :ARG1 (g / girl\n            :quant (s / some))\n      :ARG2 (u / undress-01\n            :ARG0 g)\n      :ARG1-of (c / cause-01\n            :ARG0 (p / push-01\n                  :ARG1 g\n                  :ARG2 (p2 / pool))))"], "tree": ["(p / push-01\n   :ARG1 (g / girl)\n   :ARG2 (p2 / pool))", "(c / cause-01\n   :ARG0 (p / push-01\n            :ARG1 (g / girl)\n            :ARG2 (p2 / pool)))", "(o / obligate-01\n   :ARG1 (g / girl\n            :quant (s / some))\n   :ARG2 (u / undress-01\n            :ARG0 g)\n   :ARG1 (c / cause-01\n            :ARG0 (p / push-01\n                     :ARG1 g\n                     :ARG2 (p2 / pool))))"], "smus": ["The girls were pushed into the pool.", "Because the girls were pushed into the pool.", "Some girls have to undress because they are being pushed into the pool."]}, {"instance_id": "samsum-160", "summary": "Matt got a ticket for Dawid Podsiadlo's concert. Thomas is going, too.", "summary_trees": ["# ::snt Matt got a ticket for Dawid Podsiadlo's concert.\n(g / get-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Matt\"))\n      :ARG1 (t / ticket\n            :destination (c / concert\n                  :poss (p2 / person\n                        :name (n2 / name\n                              :op1 \"Dawid\"\n                              :op2 \"Podsiadlo\")))))", "# ::snt Thomas is going, too.\n(g / go-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Thomas\"))\n      :mod (t / too))"], "tree": ["(g / get-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Matt\"))\n   :ARG1 (t / ticket\n            :destination (c / concert\n                            :poss (p2 / person\n                                      :name (n2 / name\n                                                :op1 \"Dawid\"\n                                                :op2 \"Podsiadlo\")))))", "(g / get-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Matt\"))\n   :ARG1 (t / ticket\n            :destination (c / concert\n                            :poss (p2 / person\n                                      :name (n2 / name\n                                                :op1 \"Dawid\"\n                                                :op2 \"Podsiadlo\")))))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Thomas\")))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Thomas\"))\n   :mod (t / too))"], "smus": ["Matt got a ticket to Dawid Podsiadlo's concert.", "Matt got a ticket to Dawid Podsiadlo's concert.", "Thomas is going.", "Thomas is going too."]}, {"instance_id": "samsum-161", "summary": "Gemma will invite Timmy and his Date, as well as Lona and Michelle to her wedding.", "summary_trees": ["# ::snt Gemma will invite Timmy and his Date, as well as Lona and Michelle to her wedding.\n(ii / invite-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Gemma\"))\n      :ARG1 (a / and\n            :op1 (a2 / and\n                  :op1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Timmy\"))\n                  :op2 (p3 / person\n                        :ARG0-of (h / have-rel-role-91\n                              :ARG1 p2\n                              :ARG2 (d / date))))\n            :op2 (a3 / and\n                  :op1 (p4 / person\n                        :name (n3 / name\n                              :op1 \"Lona\"))\n                  :op2 (p5 / person\n                        :name (n4 / name\n                              :op1 \"Michelle\"))))\n      :ARG2 (w / wed-01\n            :ARG1 p))"], "tree": ["(h / have-rel-role-91\n   :ARG1 (p2 / person :name (n2 / name :op1 \"Timmy\"))\n   :ARG2 (d / date))", "(ii / invite-01\n    :ARG1 (a2 / and\n              :op1 (p2 / person\n                       :name (n2 / name\n                                 :op1 \"Timmy\"))\n              :op2 (p3 / person\n                       :ARG0 (h / have-rel-role-91\n                                :ARG1 p2\n                                :ARG2 (d / date)))))", "(ii / invite-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Gemma\"))\n    :ARG1 (a3 / and\n              :op1 (p4 / person\n                       :name (n3 / name\n                                 :op1 \"Lona\"))\n              :op2 (p5 / person\n                       :name (n4 / name\n                                 :op1 \"Michelle\")))\n    :ARG2 (w / wed-01\n             :ARG1 p)\n    :ARG2 w)", "(ii / invite-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Gemma\"))\n    :ARG1 (a3 / and\n              :op1 (p4 / person\n                       :name (n3 / name\n                                 :op1 \"Lona\"))\n              :op2 (p5 / person\n                       :name (n4 / name\n                                 :op1 \"Michelle\")))\n    :ARG2 (w / wed-01\n             :ARG1 p)\n    :ARG2 w)", "(ii / invite-01\n    :ARG1 (a / and\n             :op1 (a2 / and\n                      :op1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Timmy\"))\n                      :op2 (p3 / person\n                               :ARG0 (h / have-rel-role-91\n                                        :ARG1 p2\n                                        :ARG2 (d / date))))\n             :op2 (a3 / and\n                      :op1 (p4 / person\n                               :name (n3 / name\n                                         :op1 \"Lona\"))\n                      :op2 (p5 / person\n                               :name (n4 / name\n                                         :op1 \"Michelle\")))))", "(ii / invite-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Gemma\"))\n    :ARG1 (a / and\n             :op1 (a2 / and\n                      :op1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Timmy\"))\n                      :op2 (p3 / person\n                               :ARG0 (h / have-rel-role-91\n                                        :ARG1 p2\n                                        :ARG2 (d / date))))\n             :op2 (a3 / and\n                      :op1 (p4 / person\n                               :name (n3 / name\n                                         :op1 \"Lona\"))\n                      :op2 (p5 / person\n                               :name (n4 / name\n                                         :op1 \"Michelle\")))))", "(ii / invite-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Gemma\"))\n    :ARG1 (a / and\n             :op1 (a2 / and\n                      :op1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Timmy\"))\n                      :op2 (p3 / person\n                               :ARG0 (h / have-rel-role-91\n                                        :ARG1 p2\n                                        :ARG2 (d / date))))\n             :op2 (a3 / and\n                      :op1 (p4 / person\n                               :name (n3 / name\n                                         :op1 \"Lona\"))\n                      :op2 (p5 / person\n                               :name (n4 / name\n                                         :op1 \"Michelle\"))))\n    :ARG2 (w / wed-01\n             :ARG1 p))", "(ii / invite-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Gemma\"))\n    :ARG1 (a / and\n             :op1 (a2 / and\n                      :op1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Timmy\"))\n                      :op2 (p3 / person\n                               :ARG0 (h / have-rel-role-91\n                                        :ARG1 p2\n                                        :ARG2 (d / date))))\n             :op2 (a3 / and\n                      :op1 (p4 / person\n                               :name (n3 / name\n                                         :op1 \"Lona\"))\n                      :op2 (p5 / person\n                               :name (n4 / name\n                                         :op1 \"Michelle\"))))\n    :ARG2 (w / wed-01\n             :ARG1 p))"], "smus": ["Timmy is the Date.", "Invite Timmy and date.", "Gemma would invite Linda and Michelle to her wedding.", "Gemma would invite Linda and Michelle to her wedding.", "Invite Timmy and Date and Linda and Michelle.", "Gemma will invite Timothy and date and Linda and Michelle.", "Gemma would invite Timothy and his date, Linda and Michelle to her wedding.", "Gemma would invite Timothy and his date, Linda and Michelle to her wedding."]}, {"instance_id": "samsum-162", "summary": "Jen is about to break up with her boyfriend. Jane knew from the beginning that they were not a good match. Jane is going to support Jen.", "summary_trees": ["# ::snt Jen is about to break up with her boyfriend.\n(b / break-up-08\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Jen\"))\n      :ARG3 (p2 / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 p\n                  :ARG2 (b2 / boyfriend)))\n      :time (a / about-to))", "# ::snt Jane knew from the beginning that they were not a good match.\n(k / know-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jane\"))\n      :ARG1 (m / match-03\n            :ARG1 (t / they)\n            :ARG1-of (g / good-02\n                  :polarity -))\n      :time (f / from\n            :op1 (b / begin-01)))", "# ::snt Jane is going to support Jen.\n(s / support-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jane\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Jen\")))"], "tree": ["(h / have-rel-role-91\n   :ARG1 (p / person :name (n / name :op1 \"Jen\"))\n   :ARG2 (b2 / boyfriend))", "(b / break-up-08\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Jen\"))\n   :time (a / about-to))", "(b / break-up-08\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Jen\"))\n   :ARG3 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 p\n                      :ARG2 (b2 / boyfriend)))\n   :time (a / about-to))", "(k / know-01\n   :time (f / from\n            :op1 (b / begin-01)))", "(m / match-03\n   :ARG1 (t / they)\n   :ARG1 (g / good-02\n            :polarity -))", "(k / know-01\n   :ARG1 (m / match-03\n            :ARG1 (t / they)\n            :ARG1 (g / good-02\n                     :polarity -)))", "(k / know-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jane\"))\n   :ARG1 (m / match-03\n            :ARG1 (t / they)\n            :ARG1 (g / good-02\n                     :polarity -)))", "(k / know-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jane\"))\n   :ARG1 (m / match-03\n            :ARG1 (t / they)\n            :ARG1 (g / good-02\n                     :polarity -))\n   :time (f / from\n            :op1 (b / begin-01)))", "(s / support-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jane\")))", "(s / support-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jane\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Jen\")))", "(s / support-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jane\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Jen\")))"], "smus": ["Jen's boyfriend", "Jen is about to break up.", "Jen and her boyfriend are about to break up.", "Kept from the beginning.", "They are not a good match.", "They were known to not be a good match.", "Jane knew they were not a good match.", "Jane knew from the beginning that they were not a good match.", "Jane would support.", "Jane will support Jen.", "Jane will support Jen."]}, {"instance_id": "samsum-163", "summary": "Sarah will arrive to New York on Thursday. Joshua expects to get a gift.", "summary_trees": ["# ::snt Sarah will arrive to New York on Thursday.\n(a / arrive-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Sarah\"))\n      :ARG4 (c / city\n            :name (n2 / name\n                  :op1 \"New\"\n                  :op2 \"York\"))\n      :time (d / date-entity\n            :weekday (t / thursday)))", "# ::snt Joshua expects to get a gift.\n(e / expect-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Joshua\"))\n      :ARG1 (g / get-01\n            :ARG0 p\n            :ARG1 (g2 / gift)))"], "tree": ["(a / arrive-01\n   :time (d / date-entity\n            :weekday (t / thursday)))", "(a / arrive-01\n   :time (d / date-entity\n            :weekday (t / thursday)))", "(a / arrive-01\n   :time (d / date-entity\n            :weekday (t / thursday)))", "(a / arrive-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Sarah\")))", "(a / arrive-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Sarah\"))\n   :time (d / date-entity\n            :weekday (t / thursday)))", "(a / arrive-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Sarah\"))\n   :ARG4 (c / city\n            :name (n2 / name\n                      :op1 \"New\"\n                      :op2 \"York\")))", "(a / arrive-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Sarah\"))\n   :ARG4 (c / city\n            :name (n2 / name\n                      :op1 \"New\"\n                      :op2 \"York\"))\n   :time (d / date-entity\n            :weekday (t / thursday)))", "(a / arrive-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Sarah\"))\n   :ARG4 (c / city\n            :name (n2 / name\n                      :op1 \"New\"\n                      :op2 \"York\"))\n   :time (d / date-entity\n            :weekday (t / thursday)))"], "smus": ["Arrive Thursday.", "Arrive Thursday.", "Arrive Thursday.", "Sarah will arrive.", "Sarah will arrive Thursday.", "Sarah will arrive in New York.", "Sarah will arrive in New York Thursday.", "Sarah will arrive in New York Thursday."]}, {"instance_id": "samsum-164", "summary": "Amanda will give another try to \"Parks and Rec\".", "summary_trees": ["# ::snt Amanda will give another try to \"Parks and Rec\".\n(t / try-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Amanda\"))\n      :ARG1 (b / broadcast-program\n            :name (n2 / name\n                  :op1 \"Parks\"\n                  :op2 \"and\"\n                  :op3 \"Rec\"))\n      :mod (a / another))"], "tree": ["(t / try-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Amanda\"))\n   :ARG1 (b / broadcast-program\n            :name (n2 / name\n                      :op1 \"Parks\"\n                      :op2 \"and\"\n                      :op3 \"Rec\"))\n   :mod (a / another))"], "smus": ["Amanda is in another trial with Parks and Rec."]}, {"instance_id": "samsum-165", "summary": "Dan wants to apologize to Angela. They will meet at school later.", "summary_trees": ["# ::snt Dan wants to apologize to Angela.\n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Dan\"))\n      :ARG1 (a / apologize-01\n            :ARG0 p\n            :ARG2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Angela\"))))", "# ::snt They will meet at school later.\n(m / meet-03\n      :ARG0 (t / they)\n      :location (s / school)\n      :time (a / after))"], "tree": ["(a / apologize-01\n   :ARG0 (p / person :name (n / name :op1 \"Dan\"))\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Angela\")))", "(a / apologize-01\n   :ARG0 (p / person :name (n / name :op1 \"Dan\"))\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Angela\")))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dan\"))\n   :ARG1 (a / apologize-01\n            :ARG0 p\n            :ARG2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Angela\"))))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dan\"))\n   :ARG1 (a / apologize-01\n            :ARG0 p\n            :ARG2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Angela\"))))", "(m / meet-03\n   :ARG0 (t / they)\n   :location (s / school))", "(m / meet-03\n   :ARG0 (t / they)\n   :time (a / after))", "(m / meet-03\n   :location (s / school)\n   :time (a / after))", "(m / meet-03\n   :location (s / school)\n   :time (a / after))", "(m / meet-03\n   :ARG0 (t / they)\n   :location (s / school)\n   :time (a / after))", "(m / meet-03\n   :ARG0 (t / they)\n   :location (s / school)\n   :time (a / after))"], "smus": ["Dan apologizes to Angela.", "Dan apologizes to Angela.", "Dan wants to apologize to Angela.", "Dan wants to apologize to Angela.", "They will meet at the school.", "They will meet later.", "After school, meet.", "After school, meet.", "They will meet at school later.", "They will meet at school later."]}, {"instance_id": "samsum-166", "summary": "Carl will compete in championship this year. Duncan can't miss this event. Carl will register his family members as VIP.", "summary_trees": ["# ::snt Carl will compete in championship this year.\n(c / compete-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Carl\"))\n      :ARG3 (c2 / championship)\n      :time (y / year\n            :mod (t / this)))", "# ::snt Duncan can't miss this event.\n(p / possible-01\n      :polarity -\n      :ARG1 (m / miss-02\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Duncan\"))\n            :ARG1 (e / event\n                  :mod (t / this))))", "# ::snt Carl will register his family members as VIP.\n(r / register-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Carl\"))\n      :ARG1 (p2 / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (f / family\n                        :ARG1-of (h2 / have-org-role-91\n                              :ARG0 p\n                              :ARG2 (m / member)))\n                  :ARG2 (m2 / member)))\n      :ARG2 (p3 / person\n            :mod (ii / important-01\n                  :degree (v / very))))"], "tree": ["(c / compete-01\n   :time (y / year\n            :mod (t / this)))", "(c / compete-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Carl\")))", "(c / compete-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Carl\"))\n   :ARG3 (c2 / championship)\n   :time (y / year\n            :mod (t / this)))", "(p / possible-01\n   :polarity -\n   :ARG1 (m / miss-02\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Duncan\"))\n            :ARG1 (e / event\n                     :mod (t / this))))", "(h / have-org-role-91\n   :ARG1 (f / family\n            :ARG1 (h2 / have-org-role-91\n                      :ARG0 (p / person :name (n / name :op1 \"Carl\"))\n                      :ARG2 (m / member)))\n   :ARG2 (m2 / member))", "(r / register-02\n   :ARG1 (p2 / person\n             :ARG0 (h / have-org-role-91\n                      :ARG1 (f / family\n                               :ARG1 (h2 / have-org-role-91\n                                         :ARG0 (p / person :name (n / name :op1 \"Carl\"))\n                                         :ARG2 (m / member)))\n                      :ARG2 (m2 / member))))", "(r / register-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Carl\"))\n   :ARG1 (p2 / person\n             :ARG0 (h / have-org-role-91\n                      :ARG1 (f / family\n                               :ARG1 (h2 / have-org-role-91\n                                         :ARG0 p\n                                         :ARG2 (m / member)))\n                      :ARG2 (m2 / member))))", "(r / register-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Carl\"))\n   :ARG1 (p2 / person\n             :ARG0 (h / have-org-role-91\n                      :ARG1 (f / family\n                               :ARG1 (h2 / have-org-role-91\n                                         :ARG0 p\n                                         :ARG2 (m / member)))\n                      :ARG2 (m2 / member)))\n   :ARG2 (p3 / person\n             :mod (ii / important-01\n                      :degree (v / very))))"], "smus": ["Compete this year.", "Carl will compete.", "This year Carl will compete in the championship.", "Duncan can't miss this event.", "Carl's family is a member.", "Family members of Carl register.", "Carl will register as a family member.", "Carl will register his family members as very important people."]}, {"instance_id": "samsum-167", "summary": "Ryan and Sebastian are worried about the political situation in Ukraine.", "summary_trees": ["# ::snt Ryan and Sebastian are worried about the political situation in Ukraine.\n(w / worry-02\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Ryan\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Sebastian\")))\n      :ARG1 (s / situation\n            :mod (p3 / politics)\n            :location (c / country\n                  :name (n3 / name\n                        :op1 \"Ukraine\"))))"], "tree": ["(w / worry-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ryan\")))", "(w / worry-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Sebastian\")))", "(w / worry-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Ryan\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Sebastian\"))))", "(w / worry-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ryan\"))\n   :ARG1 (s / situation\n            :mod (p3 / politics)\n            :location (c / country\n                         :name (n3 / name\n                                   :op1 \"Ukraine\"))))", "(w / worry-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ryan\"))\n   :ARG1 (s / situation\n            :mod (p3 / politics)\n            :location (c / country\n                         :name (n3 / name\n                                   :op1 \"Ukraine\"))))", "(w / worry-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Ryan\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Sebastian\")))\n   :ARG1 (s / situation\n            :mod (p3 / politics)\n            :location (c / country\n                         :name (n3 / name\n                                   :op1 \"Ukraine\"))))", "(w / worry-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Ryan\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Sebastian\")))\n   :ARG1 (s / situation\n            :mod (p3 / politics)\n            :location (c / country\n                         :name (n3 / name\n                                   :op1 \"Ukraine\"))))"], "smus": ["Ryan is worried.", "Sebastian is worried.", "Ryan and Sebastian are worried.", "Ryan is worried about the political situation in Ukraine.", "Ryan is worried about the political situation in Ukraine.", "Ryan and Sebastian are worried about the political situation in Ukraine.", "Ryan and Sebastian are worried about the political situation in Ukraine."]}, {"instance_id": "samsum-168", "summary": "Kim is about to tell mom that Harry bought a new sofa, and he needs grey pillows.", "summary_trees": ["# ::snt Kim is about to tell mom that Harry bought a new sofa, and he needs grey pillows.\n(t / tell-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Kim\"))\n      :ARG1 (a / and\n            :op1 (b / buy-01\n                  :ARG0 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Harry\"))\n                  :ARG1 (s / sofa\n                        :ARG1-of (n3 / new-01)))\n            :op2 (n4 / need-01\n                  :ARG0 p2\n                  :ARG1 (p3 / pillow\n                        :ARG1-of (g / gray-02))))\n      :ARG2 (p4 / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 p\n                  :ARG2 (m / mom)))\n      :time (a2 / about-to))"], "tree": ["(h / have-rel-role-91\n   :ARG1 (p / person :name (n / name :op1 \"Kim\"))\n   :ARG2 (m / mom))", "(n4 / need-01\n    :ARG1 (p3 / pillow\n              :ARG1 (g / gray-02)))", "(b / buy-01\n   :ARG1 (s / sofa\n            :ARG1 (n3 / new-01)))", "(n4 / need-01\n    :ARG0 (p2 / person :name (n2 / name :op1 \"Harry\"))\n    :ARG1 (p3 / pillow\n              :ARG1 (g / gray-02)))", "(n4 / need-01\n    :ARG0 (p2 / person :name (n2 / name :op1 \"Harry\"))\n    :ARG1 (p3 / pillow\n              :ARG1 (g / gray-02)))", "(b / buy-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Harry\")))", "(b / buy-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Harry\"))\n   :ARG1 (s / sofa\n            :ARG1 (n3 / new-01)))", "(b / buy-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Harry\"))\n   :ARG1 (s / sofa\n            :ARG1 (n3 / new-01)))", "(t / tell-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kim\"))\n   :ARG1 (n4 / need-01\n             :ARG0 (p2 / person :name (n2 / name :op1 \"Harry\"))\n             :ARG1 (p3 / pillow\n                       :ARG1 (g / gray-02))))", "(t / tell-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kim\"))\n   :ARG1 (n4 / need-01\n             :ARG0 (p2 / person :name (n2 / name :op1 \"Harry\"))\n             :ARG1 (p3 / pillow\n                       :ARG1 (g / gray-02)))\n   :ARG2 (p4 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 p\n                      :ARG2 (m / mom)))\n   :ARG2 p4)", "(t / tell-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kim\"))\n   :ARG1 (n4 / need-01\n             :ARG0 (p2 / person :name (n2 / name :op1 \"Harry\"))\n             :ARG1 (p3 / pillow\n                       :ARG1 (g / gray-02)))\n   :ARG2 (p4 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 p\n                      :ARG2 (m / mom)))\n   :ARG2 p4\n   :time (a2 / about-to))", "(t / tell-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kim\"))\n   :ARG1 (b / buy-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Harry\"))\n            :ARG1 (s / sofa\n                     :ARG1 (n3 / new-01)))\n   :ARG2 (p4 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 p\n                      :ARG2 (m / mom))))", "(t / tell-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kim\"))\n   :ARG1 (a / and\n            :op1 (b / buy-01\n                    :ARG0 (p2 / person\n                              :name (n2 / name\n                                        :op1 \"Harry\"))\n                    :ARG1 (s / sofa\n                             :ARG1 (n3 / new-01)))\n            :op2 (n4 / need-01\n                     :ARG0 p2\n                     :ARG1 (p3 / pillow\n                               :ARG1 (g / gray-02)))))", "(t / tell-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kim\"))\n   :ARG1 (b / buy-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Harry\"))\n            :ARG1 (s / sofa\n                     :ARG1 (n3 / new-01)))\n   :ARG2 (p4 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 p\n                      :ARG2 (m / mom)))\n   :time (a2 / about-to))", "(t / tell-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kim\"))\n   :ARG1 (a / and\n            :op1 (b / buy-01\n                    :ARG0 (p2 / person\n                              :name (n2 / name\n                                        :op1 \"Harry\"))\n                    :ARG1 (s / sofa\n                             :ARG1 (n3 / new-01)))\n            :op2 (n4 / need-01\n                     :ARG0 p2\n                     :ARG1 (p3 / pillow\n                               :ARG1 (g / gray-02))))\n   :ARG2 (p4 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 p\n                      :ARG2 (m / mom))))", "(t / tell-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kim\"))\n   :ARG1 (a / and\n            :op1 (b / buy-01\n                    :ARG0 (p2 / person\n                              :name (n2 / name\n                                        :op1 \"Harry\"))\n                    :ARG1 (s / sofa\n                             :ARG1 (n3 / new-01)))\n            :op2 (n4 / need-01\n                     :ARG0 p2\n                     :ARG1 (p3 / pillow\n                               :ARG1 (g / gray-02))))\n   :ARG2 (p4 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 p\n                      :ARG2 (m / mom)))\n   :time (a2 / about-to))"], "smus": ["Kim's mom", "Needs gray pillows.", "bought a new sofa.", "Harry needs gray pillows.", "Harry needs gray pillows.", "Harry bought.", "Harry bought a new sofa.", "Harry bought a new sofa.", "Kim will tell Harry needs gray pillows.", "Kim tells his mom that Harry needs gray pillows.", "Kim was about to tell his mom that Harry needs gray pillows.", "Kim told his mom that Harry bought a new sofa.", "Kim will tell you that Harry bought a new sofa and needs gray pillows.", "Kim was about to tell his mom that Harry bought a new sofa.", "Kim tells his mom that Harry bought a new sofa and needs gray pillows.", "Kim was about to tell his mom that Harry bought a new sofa and needs gray pillows."]}, {"instance_id": "samsum-169", "summary": "Nick finds Jane pretty and invites her for a drink to get to know her better. Jane rejects Nick and is unpleasant to him. Nick suggests Jane to forget about their conversation.", "summary_trees": ["# ::snt Nick finds Jane pretty and invites her for a drink to get to know her better.\n(a / and\n      :op1 (f / find-02\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Nick\"))\n            :ARG1 (p2 / pretty\n                  :domain (p3 / person\n                        :name (n2 / name\n                              :op1 \"Jane\"))))\n      :op2 (ii / invite-01\n            :ARG0 p\n            :ARG1 p3\n            :ARG2 (d / drink-01\n                  :ARG0 p\n                  :ARG1 p3)\n            :purpose (g / get-03\n                  :ARG1 p\n                  :ARG2 (k / know-02\n                        :ARG0 p\n                        :ARG1 p3\n                        :ARG1-of (h / have-degree-91\n                              :ARG2 (g2 / good-02\n                                    :ARG1 k)\n                              :ARG3 (m / more))))))", "# ::snt Jane rejects Nick and is unpleasant to him.\n(a / and\n      :op1 (r / reject-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Jane\"))\n            :ARG1 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Nick\")))\n      :op2 (p3 / pleasant-02\n            :polarity -\n            :ARG1 p))", "# ::snt Nick suggests Jane to forget about their conversation.\n(s / suggest-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Nick\"))\n      :ARG1 (f / forget-01\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Jane\"))\n            :ARG1 (c / converse-01\n                  :ARG0 (t / they)))\n      :ARG2 p2)"], "tree": ["(h / have-degree-91\n   :ARG2 (g2 / good-02\n             :ARG1 (k / know-02))\n   :ARG3 (m / more))", "(ii / invite-01\n    :ARG0 (p / person :name (n / name :op1 \"Nick\"))\n    :ARG1 (p3 / person :name (n2 / name :op1 \"Jane\"))\n    :ARG2 (d / drink-01\n             :ARG0 p\n             :ARG1 p3))", "(f / find-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nick\"))\n   :ARG1 (p2 / pretty\n             :domain (p3 / person\n                         :name (n2 / name\n                                   :op1 \"Jane\"))))", "(f / find-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nick\"))\n   :ARG1 (p2 / pretty\n             :domain (p3 / person\n                         :name (n2 / name\n                                   :op1 \"Jane\"))))", "(ii / invite-01\n    :ARG0 (p / person :name (n / name :op1 \"Nick\"))\n    :ARG1 (p3 / person :name (n2 / name :op1 \"Jane\"))\n    :ARG2 (d / drink-01\n             :ARG0 p\n             :ARG1 p3)\n    :purpose (g / get-03\n                :ARG1 p\n                :ARG2 (k / know-02\n                         :ARG0 p\n                         :ARG1 p3\n                         :ARG1 (h / have-degree-91\n                                  :ARG2 (g2 / good-02\n                                            :ARG1 k)\n                                  :ARG3 (m / more)))))", "(r / reject-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jane\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Nick\")))", "(f / forget-01\n   :ARG1 (c / converse-01\n            :ARG0 (t / they)))", "(f / forget-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Jane\")))", "(s / suggest-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nick\"))\n   :ARG1 (f / forget-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Jane\"))\n            :ARG1 (c / converse-01\n                     :ARG0 (t / they))))", "(s / suggest-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nick\"))\n   :ARG1 (f / forget-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Jane\"))\n            :ARG1 (c / converse-01\n                     :ARG0 (t / they)))\n   :ARG2 p2)"], "smus": ["Better to know.", "Nick invites Jane for a drink.", "Nick finds Jane pretty.", "Nick finds Jane pretty.", "Nick invites Jane for a drink to get to know her better.", "Jane rejects Nick.", "forget their conversation.", "Jane, forget it.", "Nick suggests Jane forget their conversation.", "Nick suggests that Jane forget their conversation."]}, {"instance_id": "samsum-170", "summary": "Mike will refill the hand sanitizer on Grace's request.", "summary_trees": ["# ::snt Mike will refill the hand sanitizer on Grace's request.\n(r / refill-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Mike\"))\n      :ARG1 (s / sanitize-01\n            :ARG1 (h / hand))\n      :ARG1-of (r2 / request-01\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Grace\"))))"], "tree": ["(r / refill-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mike\"))\n   :ARG1 (s / sanitize-01\n            :ARG1 (h / hand))\n   :ARG1 (r2 / request-01\n             :ARG0 (p2 / person\n                       :name (n2 / name\n                                 :op1 \"Grace\"))))"], "smus": ["Mike will refill the hand sanitizer on Grace's request."]}, {"instance_id": "samsum-171", "summary": "Jess is in a traffic jam in West Bronx.", "summary_trees": ["# ::snt Jess is in a traffic jam in West Bronx.\n(b / be-located-at-91\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Jess\"))\n      :ARG2 (j / jam-01\n            :ARG1 (t / traffic)\n            :location (c / city-district\n                  :name (n2 / name\n                        :op1 \"West\"\n                        :op2 \"Bronx\"))))"], "tree": ["(j / jam-01\n   :location (c / city-district\n                :name (n2 / name\n                          :op1 \"West\"\n                          :op2 \"Bronx\")))", "(j / jam-01\n   :ARG1 (t / traffic)\n   :location (c / city-district\n                :name (n2 / name\n                          :op1 \"West\"\n                          :op2 \"Bronx\")))", "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Jess\"))\n   :ARG2 (j / jam-01\n            :ARG1 (t / traffic)\n            :location (c / city-district\n                         :name (n2 / name\n                                   :op1 \"West\"\n                                   :op2 \"Bronx\"))))"], "smus": ["Jam in West Bronx", "Traffic jam in West Bronx", "Jess is in a traffic jam in the West Bronx."]}, {"instance_id": "samsum-172", "summary": "Clara and Ron are wondering what that weird smell at Kasia's place last night was.", "summary_trees": ["# ::snt Clara and Ron are wondering what that weird smell at Kasia's place last night was.\n(w / wonder-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Clara\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Ron\")))\n      :ARG1 (t / thing\n            :ARG1-of (s / smell-02\n                  :mod (w2 / weird)\n                  :location (p3 / place\n                        :poss (p4 / person\n                              :name (n3 / name\n                                    :op1 \"Kasia\")))\n                  :time (d / date-entity\n                        :dayperiod (n4 / night)\n                        :mod (y / yesterday)))))"], "tree": ["(s / smell-02\n   :mod (w2 / weird)\n   :location (p3 / place\n                 :poss (p4 / person\n                           :name (n3 / name\n                                     :op1 \"Kasia\")))\n   :time (d / date-entity\n            :dayperiod (n4 / night)\n            :mod (y / yesterday)))", "(s / smell-02\n   :mod (w2 / weird)\n   :location (p3 / place\n                 :poss (p4 / person\n                           :name (n3 / name\n                                     :op1 \"Kasia\")))\n   :time (d / date-entity\n            :dayperiod (n4 / night)\n            :mod (y / yesterday)))", "(w / wonder-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Clara\"))\n   :ARG1 (t / thing\n            :ARG1 (s / smell-02\n                     :mod (w2 / weird)\n                     :location (p3 / place\n                                   :poss (p4 / person\n                                             :name (n3 / name\n                                                       :op1 \"Kasia\")))\n                     :time (d / date-entity\n                              :dayperiod (n4 / night)\n                              :mod (y / yesterday)))))", "(w / wonder-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Ron\"))\n   :ARG1 (t / thing\n            :ARG1 (s / smell-02\n                     :mod (w2 / weird)\n                     :location (p3 / place\n                                   :poss (p4 / person\n                                             :name (n3 / name\n                                                       :op1 \"Kasia\")))\n                     :time (d / date-entity\n                              :dayperiod (n4 / night)\n                              :mod (y / yesterday))))\n   :ARG1 t)"], "smus": ["There was a weird smell in Kasia's place last night.", "There was a weird smell in Kasia's place last night.", "Clara was wondering what the weird smell was in Kasia's place last night.", "Ron was wondering what the weird smell was in Kasa's place last night."]}, {"instance_id": "samsum-173", "summary": "Kathy had her hair cut.", "summary_trees": ["# ::snt Kathy had her hair cut.\n(c / cut-02\n      :ARG1 (h / hair\n            :part-of (p / person\n                  :name (n / name\n                        :op1 \"Kathy\"))))"], "tree": ["(c / cut-02\n   :ARG1 (h / hair\n            :part (p / person\n                     :name (n / name\n                              :op1 \"Kathy\"))))", "(c / cut-02\n   :ARG1 (h / hair\n            :part (p / person\n                     :name (n / name\n                              :op1 \"Kathy\"))))"], "smus": ["Kathy's hair was cut.", "Kathy's hair was cut."]}, {"instance_id": "samsum-174", "summary": "Sebastian is very happy with his life, and shares this happiness with Kevin.", "summary_trees": ["# ::snt Sebastian is very happy with his life, and shares this happiness with Kevin.\n(a / and\n      :op1 (h / happy-01\n            :ARG0 (l / life\n                  :poss (p / person\n                        :name (n / name\n                              :op1 \"Sebastian\")))\n            :ARG1 p\n            :degree (v / very))\n      :op2 (s / share-01\n            :ARG0 p\n            :ARG1 h\n            :ARG2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Kevin\"))))"], "tree": ["(s / share-01\n   :ARG0 (p / person :name (n / name :op1 \"Sebastian\"))\n   :ARG1 (h / happy-01)\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Kevin\")))", "(s / share-01\n   :ARG0 (p / person :name (n / name :op1 \"Sebastian\"))\n   :ARG1 (h / happy-01)\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Kevin\")))", "(h / happy-01\n   :ARG0 (l / life\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Sebastian\"))))", "(h / happy-01\n   :ARG0 (l / life\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Sebastian\")))\n   :ARG1 p)", "(h / happy-01\n   :ARG0 (l / life\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Sebastian\")))\n   :ARG1 p\n   :degree (v / very))", "(h / happy-01\n   :ARG0 (l / life\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Sebastian\")))\n   :ARG1 p\n   :degree (v / very))"], "smus": ["Sebastian shares his happiness with Kevin.", "Sebastian shares his happiness with Kevin.", "Sebastian's life is happy.", "Sebastian's life is happy for him.", "Sebastian is very happy with his life.", "Sebastian is very happy with his life."]}, {"instance_id": "samsum-175", "summary": "Betty shares a photo of a man with a cat with Sandra. Sandra's ex wants to get back. She misses him. Betty comes over with wine at 6.", "summary_trees": ["# ::snt Betty shares a photo of a man with a cat with Sandra.\n(s / share-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Betty\"))\n      :ARG1 (p2 / photograph-01\n            :ARG1 (m / man\n                  :accompanier (c / cat)))\n      :ARG2 (p3 / person\n            :name (n2 / name\n                  :op1 \"Sandra\")))", "# ::snt Sandra's ex wants to get back.\n(w / want-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (p2 / person\n                        :name (n / name\n                              :op1 \"Sandra\"))\n                  :ARG2 (s / significant-other)\n                  :time (e / ex)))\n      :ARG1 (g / get-back-10\n            :ARG1 p))", "# ::snt She misses him.\n(m / miss-01\n      :ARG0 (s / she)\n      :ARG1 (h / he))", "# ::snt Betty comes over with wine at 6.\n(c / come-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Betty\"))\n      :ARG4 (o / over)\n      :accompanier (w / wine)\n      :time (d / date-entity\n            :time \"18:00\"))"], "tree": ["(p2 / photograph-01\n    :ARG1 (m / man\n             :accompanier (c / cat)))", "(s / share-01\n   :ARG1 (p2 / photograph-01\n             :ARG1 (m / man\n                      :accompanier (c / cat))))", "(s / share-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Betty\"))\n   :ARG1 (p2 / photograph-01\n             :ARG1 (m / man\n                      :accompanier (c / cat))))", "(s / share-01\n   :ARG1 (p2 / photograph-01\n             :ARG1 (m / man\n                      :accompanier (c / cat)))\n   :ARG2 (p3 / person\n             :name (n2 / name\n                       :op1 \"Sandra\")))", "(s / share-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Betty\"))\n   :ARG1 (p2 / photograph-01\n             :ARG1 (m / man\n                      :accompanier (c / cat)))\n   :ARG2 (p3 / person\n             :name (n2 / name\n                       :op1 \"Sandra\")))", "(s / share-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Betty\"))\n   :ARG1 (p2 / photograph-01\n             :ARG1 (m / man\n                      :accompanier (c / cat)))\n   :ARG2 (p3 / person\n             :name (n2 / name\n                       :op1 \"Sandra\")))", "(w / want-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :name (n / name\n                                        :op1 \"Sandra\"))\n                     :ARG2 (s / significant-other)\n                     :time (e / ex)))\n   :ARG1 (g / get-back-10\n            :ARG1 p))", "(w / want-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :name (n / name\n                                        :op1 \"Sandra\"))\n                     :ARG2 (s / significant-other)\n                     :time (e / ex)))\n   :ARG1 (g / get-back-10\n            :ARG1 p))", "(m / miss-01\n   :ARG0 (s / she)\n   :ARG1 (h / he))", "(m / miss-01\n   :ARG0 (s / she)\n   :ARG1 (h / he))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Betty\")))"], "smus": ["a href=\"http://www.youtube.com/watch?v=gbbq&target=gbbq\">Photograph of man with cat/a>", "Shares photo of man with cat", "Betty shares a photo of a man with a cat.", "A photo of a man with a cat shares Sandra.", "Betty shares a photo of a man with a cat with Sandra.", "Betty shares a photo of a man with a cat with Sandra.", "Sandra's ex wants to get back.", "Sandra's ex wants to get back.", "She misses him.", "She misses him.", "It's Betty who comes."]}, {"instance_id": "samsum-176", "summary": "Nicky has just left Sam's place. Her phone is off.", "summary_trees": ["# ::snt Nicky has just left Sam's place.\n(l / leave-11\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Nicky\"))\n      :ARG1 (p2 / place\n            :poss (p3 / person\n                  :name (n2 / name\n                        :op1 \"Sam\")))\n      :time (j / just))", "# ::snt Her phone is off.\n(o / off-01\n      :ARG1 (p / phone\n            :poss (s / she)))"], "tree": ["(l / leave-11\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nicky\")))", "(l / leave-11\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nicky\"))\n   :ARG1 (p2 / place\n             :poss (p3 / person\n                       :name (n2 / name\n                                 :op1 \"Sam\"))))", "(l / leave-11\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nicky\"))\n   :ARG1 (p2 / place\n             :poss (p3 / person\n                       :name (n2 / name\n                                 :op1 \"Sam\")))\n   :time (j / just))", "(l / leave-11\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nicky\"))\n   :ARG1 (p2 / place\n             :poss (p3 / person\n                       :name (n2 / name\n                                 :op1 \"Sam\")))\n   :time (j / just))", "(o / off-01\n   :ARG1 (p / phone\n            :poss (s / she)))"], "smus": ["Nicky left.", "Nicky has left Sam's place.", "Nicky has just left Sam's place.", "Nicky has just left Sam's place.", "Her phone went off."]}, {"instance_id": "samsum-177", "summary": "Olivia has to sort out her accounts and upload a few videos on YouTube. Jake is complaining that Sony Music tried to appropriate his own music.", "summary_trees": ["# ::snt Olivia has to sort out her accounts and upload a few videos on YouTube.\n(o / obligate-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Olivia\"))\n      :ARG2 (a / and\n            :op1 (s / sort-out-02\n                  :ARG0 p\n                  :ARG1 (a2 / account\n                        :poss p))\n            :op2 (u / upload-01\n                  :ARG0 p\n                  :ARG1 (v / video\n                        :quant (f / few))\n                  :ARG2 (p2 / publication\n                        :name (n2 / name\n                              :op1 \"YouTube\")))))", "# ::snt Jake is complaining that Sony Music tried to appropriate his own music.\n(c / complain-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jake\"))\n      :ARG1 (t / try-01\n            :ARG0 (c2 / company\n                  :name (n2 / name\n                        :op1 \"Sony\"\n                        :op2 \"Music\"))\n            :ARG1 (a / appropriate-01\n                  :ARG0 c2\n                  :ARG1 (m / music\n                        :poss p))))"], "tree": ["(s / sort-out-02\n   :ARG0 (p / person :name (n / name :op1 \"Olivia\"))\n   :ARG1 (a2 / account\n             :poss p))", "(u / upload-01\n   :ARG0 (p / person :name (n / name :op1 \"Olivia\"))\n   :ARG1 (v / video\n            :quant (f / few)))", "(u / upload-01\n   :ARG1 (v / video\n            :quant (f / few))\n   :ARG2 (p2 / publication\n             :name (n2 / name\n                       :op1 \"YouTube\")))", "(u / upload-01\n   :ARG0 (p / person :name (n / name :op1 \"Olivia\"))\n   :ARG1 (v / video\n            :quant (f / few))\n   :ARG2 (p2 / publication\n             :name (n2 / name\n                       :op1 \"YouTube\")))", "(u / upload-01\n   :ARG0 (p / person :name (n / name :op1 \"Olivia\"))\n   :ARG1 (v / video\n            :quant (f / few))\n   :ARG2 (p2 / publication\n             :name (n2 / name\n                       :op1 \"YouTube\")))", "(o / obligate-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Olivia\"))\n   :ARG2 (s / sort-out-02\n            :ARG0 p\n            :ARG1 (a2 / account\n                      :poss p)))", "(o / obligate-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Olivia\"))\n   :ARG2 (u / upload-01\n            :ARG0 p\n            :ARG1 (v / video\n                     :quant (f / few))\n            :ARG2 (p2 / publication\n                      :name (n2 / name\n                                :op1 \"YouTube\"))))", "(o / obligate-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Olivia\"))\n   :ARG2 (a / and\n            :op1 (s / sort-out-02\n                    :ARG0 p\n                    :ARG1 (a2 / account\n                              :poss p))\n            :op2 (u / upload-01\n                    :ARG0 p\n                    :ARG1 (v / video\n                             :quant (f / few))\n                    :ARG2 (p2 / publication\n                              :name (n2 / name\n                                        :op1 \"YouTube\")))))", "(a / appropriate-01\n   :ARG1 (m / music\n            :poss (p / person :name (n / name :op1 \"Jake\"))))", "(c / complain-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jake\")))", "(t / try-01\n   :ARG0 (c2 / company\n             :name (n2 / name\n                       :op1 \"Sony\"\n                       :op2 \"Music\"))\n   :ARG1 (a / appropriate-01\n            :ARG0 c2\n            :ARG1 (m / music\n                     :poss (p / person :name (n / name :op1 \"Jake\")))))", "(t / try-01\n   :ARG0 (c2 / company\n             :name (n2 / name\n                       :op1 \"Sony\"\n                       :op2 \"Music\"))\n   :ARG1 (a / appropriate-01\n            :ARG0 c2\n            :ARG1 (m / music\n                     :poss (p / person :name (n / name :op1 \"Jake\")))))", "(c / complain-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jake\"))\n   :ARG1 (t / try-01\n            :ARG0 (c2 / company\n                      :name (n2 / name\n                                :op1 \"Sony\"\n                                :op2 \"Music\"))\n            :ARG1 (a / appropriate-01\n                     :ARG0 c2\n                     :ARG1 (m / music\n                              :poss p))))", "(c / complain-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jake\"))\n   :ARG1 (t / try-01\n            :ARG0 (c2 / company\n                      :name (n2 / name\n                                :op1 \"Sony\"\n                                :op2 \"Music\"))\n            :ARG1 (a / appropriate-01\n                     :ARG0 c2\n                     :ARG1 (m / music\n                              :poss p))))"], "smus": ["Olivia will sort out her accounts.", "Olivia will upload a few videos.", "Upload a few videos to YouTube.", "Olivia will upload a few videos to youtube.", "Olivia will upload a few videos to youtube.", "Olivia has to sort out her accounts.", "Olivia has to upload a few videos to YouTube.", "Olivia has to sort out her accounts and upload a few videos to YouTube.", "appropriate the music of Jake", "Jake was complaining.", "Sony Music tried to appropriate Jake's music.", "Sony Music tried to appropriate Jake's music.", "Jake was complaining that Sony Music tried to appropriate his music.", "Jake was complaining that Sony Music tried to appropriate his music."]}, {"instance_id": "samsum-178", "summary": "Kim needs to get some fresh fish in Warsaw. Kim will ask at restaurants about their source. Kim is planning something special but won't share any details with Margot for now.", "summary_trees": ["# ::snt Kim needs to get some fresh fish in Warsaw.\n(n / need-01\n      :ARG0 (p / person\n            :name (n2 / name\n                  :op1 \"Kim\"))\n      :ARG1 (g / get-01\n            :ARG0 p\n            :ARG1 (f / fish\n                  :ARG1-of (f2 / fresh-04)\n                  :quant (s / some))\n            :location (c / city\n                  :name (n3 / name\n                        :op1 \"Warsaw\"))))", "# ::snt Kim will ask at restaurants about their source.\n(a / ask-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Kim\"))\n      :ARG1 (t / thing\n            :ARG2-of (s / source-01\n                  :ARG0 (r / restaurant)))\n      :location r)", "# ::snt Kim is planning something special but won't share any details with Margot for now.\n(c / contrast-01\n      :ARG1 (p / plan-01\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Kim\"))\n            :ARG1 (s / something\n                  :ARG1-of (s2 / special-02)))\n      :ARG2 (s3 / share-01\n            :polarity -\n            :ARG0 p2\n            :ARG1 (d / detail\n                  :mod (a / any))\n            :ARG2 (p3 / person\n                  :name (n2 / name\n                        :op1 \"Margot\"))\n            :time (n3 / now)))"], "tree": ["(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Kim\")))", "(g / get-01\n   :location (c / city\n                :name (n3 / name\n                          :op1 \"Warsaw\")))", "(n / need-01\n   :ARG1 (g / get-01\n            :ARG0 (p / person :name (n2 / name :op1 \"Kim\"))\n            :ARG1 (f / fish\n                     :ARG1 (f2 / fresh-04)\n                     :quant (s / some))\n            :location (c / city\n                         :name (n3 / name\n                                   :op1 \"Warsaw\"))))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Kim\"))\n   :ARG1 (g / get-01\n            :ARG0 p\n            :ARG1 (f / fish\n                     :ARG1 (f2 / fresh-04)\n                     :quant (s / some))\n            :location (c / city\n                         :name (n3 / name\n                                   :op1 \"Warsaw\"))))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Kim\"))\n   :ARG1 (g / get-01\n            :ARG0 p\n            :ARG1 (f / fish\n                     :ARG1 (f2 / fresh-04)\n                     :quant (s / some))\n            :location (c / city\n                         :name (n3 / name\n                                   :op1 \"Warsaw\"))))", "(a / ask-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kim\"))\n   :ARG1 (t / thing\n            :ARG2 (s / source-01\n                     :ARG0 (r / restaurant))))", "(s3 / share-01\n    :polarity -\n    :time (n3 / now))", "(p / plan-01\n   :ARG1 (s / something\n            :ARG1 (s2 / special-02)))", "(p / plan-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Kim\"))\n   :ARG1 (s / something\n            :ARG1 (s2 / special-02)))", "(p / plan-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Kim\"))\n   :ARG1 (s / something\n            :ARG1 (s2 / special-02)))", "(s3 / share-01\n    :polarity -\n    :ARG0 (p2 / person :name (n / name :op1 \"Kim\"))\n    :ARG1 (d / detail\n             :mod (a / any))\n    :ARG2 (p3 / person\n              :name (n2 / name\n                        :op1 \"Margot\"))\n    :time (n3 / now))", "(c / contrast-01\n   :ARG1 (p / plan-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Kim\"))\n            :ARG1 (s / something\n                     :ARG1 (s2 / special-02)))\n   :ARG2 (s3 / share-01\n             :polarity -\n             :ARG0 p2\n             :ARG1 (d / detail\n                      :mod (a / any))\n             :ARG2 (p3 / person\n                       :name (n2 / name\n                                 :op1 \"Margot\"))\n             :time (n3 / now)))", "(c / contrast-01\n   :ARG1 (p / plan-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Kim\"))\n            :ARG1 (s / something\n                     :ARG1 (s2 / special-02)))\n   :ARG2 (s3 / share-01\n             :polarity -\n             :ARG0 p2\n             :ARG1 (d / detail\n                      :mod (a / any))\n             :ARG2 (p3 / person\n                       :name (n2 / name\n                                 :op1 \"Margot\"))\n             :time (n3 / now)))"], "smus": ["Kim needs.", "Get in Warsaw.", "Kim needs to get some fresh fish in Warsaw.", "Kim needs to get some fresh fish in Warsaw.", "Kim needs to get some fresh fish in Warsaw.", "Kim will ask what the restaurants source.", "Now, not to share.", "There is planning something special.", "Kim is planning something special.", "Kim is planning something special.", "Kim doesn't share any details with Margaret now.", "Kim is planning something special, but he won't share any details with Margaret now.", "Kim is planning something special, but he won't share any details with Margaret now."]}, {"instance_id": "samsum-179", "summary": "Nestor wanted to buy a laptop on Black Friday sales, but Olaf advise against it, as the prices in reality are not reduced. Nestor will check it if Olaf helps him to get a good deal from a guy he knows.", "summary_trees": ["# ::snt Nestor wanted to buy a laptop on Black Friday sales, but Olaf advise against it, as the prices in reality are not reduced.\n(c / contrast-01\n      :ARG1 (w / want-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Nestor\"))\n            :ARG1 (b / buy-01\n                  :ARG0 p\n                  :ARG1 (l / laptop)\n                  :time (s / sell-01\n                        :time (f / festival\n                              :name (n2 / name\n                                    :op1 \"Black\"\n                                    :op2 \"Friday\")))))\n      :ARG2 (a / advise-01\n            :ARG0 (p2 / person\n                  :name (n3 / name\n                        :op1 \"Olaf\"))\n            :ARG2 (a2 / against\n                  :op1 b)\n            :ARG1-of (c2 / cause-01\n                  :ARG0 (r / reduce-01\n                        :polarity -\n                        :ARG1 (t / thing\n                              :ARG2-of (p3 / price-01))\n                        :mod (ii / in-reality)))))", "# ::snt Nestor will check it if Olaf helps him to get a good deal from a guy he knows.\n(c / check-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Nestor\"))\n      :ARG1 (ii / it)\n      :condition (h / help-01\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Olaf\"))\n            :ARG1 (g / get-01\n                  :ARG0 p\n                  :ARG1 (d / deal\n                        :ARG1-of (g2 / good-02))\n                  :ARG2 (g3 / guy\n                        :ARG1-of (k / know-02\n                              :ARG0 p)))\n            :ARG2 p))"], "tree": ["(r / reduce-01\n   :polarity -\n   :mod (ii / in-reality))", "(a / advise-01\n   :ARG0 (p2 / person\n             :name (n3 / name\n                       :op1 \"Olaf\")))", "(s / sell-01\n   :time (f / festival\n            :name (n2 / name\n                      :op1 \"Black\"\n                      :op2 \"Friday\")))", "(s / sell-01\n   :time (f / festival\n            :name (n2 / name\n                      :op1 \"Black\"\n                      :op2 \"Friday\")))", "(r / reduce-01\n   :polarity -\n   :ARG1 (t / thing\n            :ARG2 (p3 / price-01))\n   :mod (ii / in-reality))", "(c2 / cause-01\n    :ARG0 (r / reduce-01\n             :polarity -\n             :ARG1 (t / thing\n                      :ARG2 (p3 / price-01))\n             :mod (ii / in-reality)))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nestor\"))\n   :ARG1 (b / buy-01\n            :ARG0 p\n            :ARG1 (l / laptop)\n            :time (s / sell-01\n                     :time (f / festival\n                              :name (n2 / name\n                                        :op1 \"Black\"\n                                        :op2 \"Friday\")))))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nestor\"))\n   :ARG1 (b / buy-01\n            :ARG0 p\n            :ARG1 (l / laptop)\n            :time (s / sell-01\n                     :time (f / festival\n                              :name (n2 / name\n                                        :op1 \"Black\"\n                                        :op2 \"Friday\")))))", "(a / advise-01\n   :ARG0 (p2 / person\n             :name (n3 / name\n                       :op1 \"Olaf\"))\n   :ARG2 (a2 / against\n             :op1 (b / buy-01))\n   :ARG1 (c2 / cause-01\n             :ARG0 (r / reduce-01\n                      :polarity -\n                      :ARG1 (t / thing\n                               :ARG2 (p3 / price-01))\n                      :mod (ii / in-reality))))", "(c / contrast-01\n   :ARG1 (w / want-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Nestor\"))\n            :ARG1 (b / buy-01\n                     :ARG0 p\n                     :ARG1 (l / laptop)\n                     :time (s / sell-01\n                              :time (f / festival\n                                       :name (n2 / name\n                                                 :op1 \"Black\"\n                                                 :op2 \"Friday\")))))\n   :ARG2 (a / advise-01\n            :ARG0 (p2 / person\n                      :name (n3 / name\n                                :op1 \"Olaf\"))\n            :ARG2 (a2 / against\n                      :op1 b)\n            :ARG1 (c2 / cause-01\n                      :ARG0 (r / reduce-01\n                               :polarity -\n                               :ARG1 (t / thing\n                                        :ARG2 (p3 / price-01))\n                               :mod (ii / in-reality)))))", "(c / contrast-01\n   :ARG1 (w / want-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Nestor\"))\n            :ARG1 (b / buy-01\n                     :ARG0 p\n                     :ARG1 (l / laptop)\n                     :time (s / sell-01\n                              :time (f / festival\n                                       :name (n2 / name\n                                                 :op1 \"Black\"\n                                                 :op2 \"Friday\")))))\n   :ARG2 (a / advise-01\n            :ARG0 (p2 / person\n                      :name (n3 / name\n                                :op1 \"Olaf\"))\n            :ARG2 (a2 / against\n                      :op1 b)\n            :ARG1 (c2 / cause-01\n                      :ARG0 (r / reduce-01\n                               :polarity -\n                               :ARG1 (t / thing\n                                        :ARG2 (p3 / price-01))\n                               :mod (ii / in-reality)))))", "(c / check-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nestor\"))\n   :ARG1 (ii / it))", "(h / help-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Olaf\"))\n   :ARG1 (g / get-01\n            :ARG0 (p / person :name (n / name :op1 \"Nestor\"))\n            :ARG1 (d / deal\n                     :ARG1 (g2 / good-02))\n            :ARG2 (g3 / guy\n                      :ARG1 (k / know-02\n                               :ARG0 p))))", "(h / help-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Olaf\"))\n   :ARG1 (g / get-01\n            :ARG0 (p / person :name (n / name :op1 \"Nestor\"))\n            :ARG1 (d / deal\n                     :ARG1 (g2 / good-02))\n            :ARG2 (g3 / guy\n                      :ARG1 (k / know-02\n                               :ARG0 p)))\n   :ARG2 p)", "(c / check-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nestor\"))\n   :ARG1 (ii / it)\n   :condition (h / help-01\n                 :ARG0 (p2 / person\n                           :name (n2 / name\n                                     :op1 \"Olaf\"))\n                 :ARG1 (g / get-01\n                          :ARG0 p\n                          :ARG1 (d / deal\n                                   :ARG1 (g2 / good-02))\n                          :ARG2 (g3 / guy\n                                    :ARG1 (k / know-02\n                                             :ARG0 p)))\n                 :ARG2 p))"], "smus": ["Not reduced in reality.", "Olaf would advise:", "Selling on Black Friday.", "Selling on Black Friday.", "In reality, prices are not reduced.", "Because in reality, prices are not reduced.", "Nestor wanted to buy a laptop when it was on sale on Black Friday.", "Nestor wanted to buy a laptop when it was on sale on Black Friday.", "Olaf would advise against buying because in reality prices are not reduced.", "Nestor wanted to buy a laptop when it was on sale on Black Friday but Olaf would advise against it because in reality prices are not reduced.", "Nestor wanted to buy a laptop when it was on sale on Black Friday but Olaf would advise against it because in reality prices are not reduced.", "Nestor will check it.", "Olaf helps Nestor get a good deal from the guy he knows.", "Olaf helps Nestor get a good deal from the guy he knows.", "Nestor will check it, though Olaf helps get a good deal for the guy he knows."]}, {"instance_id": "samsum-180", "summary": "Nate and Julie are overbooked. Nate is having problems with the registration system so he has to deal with it himself.", "summary_trees": ["# ::snt Nate and Julie are overbooked.\n(o / overbook-00\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Nate\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Julie\"))))", "# ::snt Nate is having problems with the registration system so he has to deal with it himself.\n(c / cause-01\n      :ARG0 (h / have-03\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Nate\"))\n            :ARG1 (p2 / problem\n                  :topic (s / system\n                        :instrument-of (r / register-02))))\n      :ARG1 (o / obligate-01\n            :ARG1 p\n            :ARG2 (d / deal-01\n                  :ARG0 p\n                  :ARG2 p2)))"], "tree": ["(o / overbook-00\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Nate\")))", "(o / overbook-00\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Julie\")))", "(o / overbook-00\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Nate\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Julie\"))))"], "smus": ["Nate was overbooked.", "Julia was overbooked.", "Nate and Julia were overbooked."]}, {"instance_id": "samsum-181", "summary": "Mike took his car into garage today. Ernest is relieved as someone had just crashed into a red Honda which looks like Mike's. ", "summary_trees": ["# ::snt Mike took his car into garage today.\n(t / take-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Mike\"))\n      :ARG1 (c / car\n            :poss p)\n      :ARG3 (g / garage)\n      :time (t2 / today))", "# ::snt Ernest is relieved as someone had just crashed into a red Honda which looks like Mike's.\n(r / relieve-02\n      :ARG0 (c / crash-01\n            :ARG1 (s / someone)\n            :ARG2 (c2 / car-make\n                  :name (n / name\n                        :op1 \"Honda\")\n                  :ARG1-of (r2 / red-02)\n                  :ARG1-of (l / look-02\n                        :poss (p / person\n                              :name (n2 / name\n                                    :op1 \"Mike\")))\n                  :ARG2-of l))\n      :time (j / just)\n      :ARG1 (p2 / person\n            :name (n3 / name\n                  :op1 \"Ernest\")))"], "tree": ["(t / take-01\n   :ARG1 (c / car\n            :poss (p / person :name (n / name :op1 \"Mike\"))))", "(t / take-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mike\"))\n   :ARG1 (c / car\n            :poss p))", "(t / take-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mike\"))\n   :ARG1 (c / car\n            :poss p)\n   :time (t2 / today))", "(t / take-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mike\"))\n   :ARG1 (c / car\n            :poss p)\n   :ARG3 (g / garage)\n   :time (t2 / today))", "(c / crash-01\n   :ARG1 (s / someone)\n   :ARG2 (c2 / car-make\n             :name (n / name\n                      :op1 \"Honda\")\n             :ARG1 (r2 / red-02)\n             :ARG1 (l / look-02\n                      :poss (p / person\n                               :name (n2 / name\n                                         :op1 \"Mike\"))\n                      :ARG2 c2)))", "(c / crash-01\n   :ARG1 (s / someone)\n   :ARG2 (c2 / car-make\n             :name (n / name\n                      :op1 \"Honda\")\n             :ARG1 (r2 / red-02)\n             :ARG1 (l / look-02\n                      :poss (p / person\n                               :name (n2 / name\n                                         :op1 \"Mike\"))\n                      :ARG2 c2)))", "(r / relieve-02\n   :ARG0 (c / crash-01\n            :ARG1 (s / someone)\n            :ARG2 (c2 / car-make\n                      :name (n / name\n                               :op1 \"Honda\")\n                      :ARG1 (r2 / red-02)\n                      :ARG1 (l / look-02\n                               :poss (p / person\n                                        :name (n2 / name\n                                                  :op1 \"Mike\"))\n                               :ARG2 c2)))\n   :time (j / just)\n   :ARG1 (p2 / person\n             :name (n3 / name\n                       :op1 \"Ernest\")))"], "smus": ["Mike's car took.", "Mike took his car.", "Mike took his car today.", "Mike took his car to the garage today.", "Someone was crashed into a Honda red that Mike looks at.", "Someone was crashed into a Honda red that Mike looks at.", "Ernest was just relieved that someone had crashed into a red Honda that Mike looks like it was."]}, {"instance_id": "samsum-182", "summary": "Maddie will buy a white bread and apples on John's request.", "summary_trees": ["# ::snt Maddie will buy a white bread and apples on John's request.\n(b / buy-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Maddie\"))\n      :ARG1 (a / and\n            :op1 (b2 / bread\n                  :ARG1-of (w / white-03))\n            :op2 (a2 / apple))\n      :ARG1-of (r / request-01\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"John\"))))"], "tree": ["(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Maddie\"))\n   :ARG1 (a2 / apple)\n   :ARG1 (r / request-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"John\")))\n   :ARG1 r)", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Maddie\"))\n   :ARG1 (b2 / bread\n             :ARG1 (w / white-03))\n   :ARG1 (r / request-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"John\"))))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Maddie\"))\n   :ARG1 (a / and\n            :op1 (b2 / bread\n                     :ARG1 (w / white-03))\n            :op2 (a2 / apple))\n   :ARG1 (r / request-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"John\"))))"], "smus": ["Maddie would buy apples for John's request.", "Maddie would buy white bread for John's request.", "Maddie would buy John's request white bread and apples."]}, {"instance_id": "samsum-183", "summary": "Angie's having an appointment with Doctor McCormick in an hour. She has strong abdominal pain.", "summary_trees": ["# ::snt Angie's having an appointment with Doctor McCormick in an hour.\n(h / have-06\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Angie\"))\n      :ARG1 (a / appointment-02\n            :ARG0 p\n            :ARG1 (d / doctor\n                  :name (n2 / name\n                        :op1 \"McCormick\"))\n            :time (a2 / after\n                  :op1 (n3 / now)\n                  :quant (t / temporal-quantity\n                        :quant 1\n                        :unit (h2 / hour)))))", "# ::snt She has strong abdominal pain.\n(p / pain-01\n      :ARG1 (s / she)\n      :ARG2 (a / abdominal)\n      :ARG1-of (s2 / strong-02))"], "tree": ["(a / appointment-02\n   :time (a2 / after\n             :op1 (n3 / now)\n             :quant (t / temporal-quantity\n                       :quant 1\n                       :unit (h2 / hour))))", "(a / appointment-02\n   :ARG0 (p / person :name (n / name :op1 \"Angie\"))\n   :ARG1 (d / doctor\n            :name (n2 / name\n                      :op1 \"McCormick\"))\n   :time (a2 / after\n             :op1 (n3 / now)\n             :quant (t / temporal-quantity\n                       :quant 1\n                       :unit (h2 / hour))))", "(h / have-06\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Angie\"))\n   :ARG1 (a / appointment-02\n            :ARG0 p\n            :ARG1 (d / doctor\n                     :name (n2 / name\n                               :op1 \"McCormick\"))\n            :time (a2 / after\n                      :op1 (n3 / now)\n                      :quant (t / temporal-quantity\n                                :quant 1\n                                :unit (h2 / hour)))))", "(p / pain-01\n   :ARG1 (s / she)\n   :ARG2 (a / abdominal)\n   :ARG1 (s2 / strong-02))"], "smus": ["An appointment will be made in an hour.", "Angie will have a Dr. McCormick appointment in an hour.", "Angie is having an appointment with the McCormick Doctor in an hour.", "She had strong abdominal pain."]}, {"instance_id": "samsum-184", "summary": "Adam is complaining about going to the gym. Mair will take Adam and Xander to the gym this week. Mel will bring Xander to Mair at half 10.", "summary_trees": ["# ::snt Adam is complaining about going to the gym.\n(c / complain-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Adam\"))\n      :ARG1 (g / go-02\n            :ARG0 p\n            :ARG4 (g2 / gym)))", "# ::snt Mair will take Adam and Xander to the gym this week.\n(t / take-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Mair\"))\n      :ARG1 (a / and\n            :op1 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Adam\"))\n            :op2 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Xander\")))\n      :ARG3 (g / gym)\n      :time (w / week\n            :mod (t2 / this)))", "# ::snt Mel will bring Xander to Mair at half 10.\n(b / bring-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Mel\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Xander\"))\n      :ARG2 (p3 / person\n            :name (n3 / name\n                  :op1 \"Mair\"))\n      :time (d / date-entity\n            :time \"0:30\"))"], "tree": ["(g / go-02\n   :ARG0 (p / person :name (n / name :op1 \"Adam\"))\n   :ARG4 (g2 / gym))", "(g / go-02\n   :ARG0 (p / person :name (n / name :op1 \"Adam\"))\n   :ARG4 (g2 / gym))", "(c / complain-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Adam\")))", "(c / complain-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Adam\"))\n   :ARG1 (g / go-02\n            :ARG0 p\n            :ARG4 (g2 / gym)))", "(c / complain-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Adam\"))\n   :ARG1 (g / go-02\n            :ARG0 p\n            :ARG4 (g2 / gym)))", "(g / go-02\n   :ARG0 (p / person :name (n / name :op1 \"Adam\"))\n   :ARG4 (g2 / gym))", "(g / go-02\n   :ARG0 (p / person :name (n / name :op1 \"Adam\"))\n   :ARG4 (g2 / gym))", "(t / take-01\n   :time (w / week\n            :mod (t2 / this)))", "(t / take-01\n   :time (w / week\n            :mod (t2 / this)))", "(t / take-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Adam\")))", "(t / take-01\n   :ARG1 (p3 / person\n             :name (n3 / name\n                       :op1 \"Xander\")))", "(t / take-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mair\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Adam\")))", "(t / take-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mair\"))\n   :ARG1 (p3 / person\n             :name (n3 / name\n                       :op1 \"Xander\")))", "(t / take-01\n   :ARG1 (a / and\n            :op1 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Adam\"))\n            :op2 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Xander\"))))", "(t / take-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mair\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Adam\"))\n   :time (w / week\n            :mod (t2 / this)))", "(t / take-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mair\"))\n   :ARG1 (p3 / person\n             :name (n3 / name\n                       :op1 \"Xander\"))\n   :time (w / week\n            :mod (t2 / this))\n   :time w)", "(t / take-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mair\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Adam\"))\n   :ARG3 (g / gym)\n   :time (w / week\n            :mod (t2 / this)))", "(t / take-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mair\"))\n   :ARG1 (p3 / person\n             :name (n3 / name\n                       :op1 \"Xander\"))\n   :ARG3 (g / gym)\n   :ARG3 g\n   :time (w / week\n            :mod (t2 / this)))", "(t / take-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mair\"))\n   :ARG1 (a / and\n            :op1 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Adam\"))\n            :op2 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Xander\")))\n   :time (w / week\n            :mod (t2 / this)))", "(t / take-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mair\"))\n   :ARG1 (a / and\n            :op1 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Adam\"))\n            :op2 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Xander\")))\n   :ARG3 (g / gym)\n   :time (w / week\n            :mod (t2 / this)))", "(t / take-01\n   :ARG1 (p3 / person\n             :name (n3 / name\n                       :op1 \"Xander\")))", "(b / bring-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mel\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Xander\")))"], "smus": ["Adam was going to the gym.", "Adam was going to the gym.", "Adam was complaining.", "Adam was complaining about going to the gym.", "Adam was complaining about going to the gym.", "Adam was going to the gym.", "Adam was going to the gym.", "Take this week.", "Take this week.", "Take Adam.", "Take Xander.", "Mair will take Adam.", "Xander, Air will take you.", "Take Adam and Xander.", "This week,air will take Adam.", "This week,air will take Xander.", "This week,air will take Adam to the gym.", "This week,air will take Xander to the gym.", "This week,air will take Adam and Xander.", "This week,air will take Adam and Xander to the gym.", "Take Xander.", "Mel will bring Xander."]}, {"instance_id": "samsum-185", "summary": "Clara is rewatching Dear White People and strongly recommends it to Neela.", "summary_trees": ["# ::snt Clara is rewatching Dear White People and strongly recommends it to Neela.\n(a / and\n      :op1 (w / watch-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Clara\"))\n            :ARG1 (w2 / work-of-art\n                  :name (n2 / name\n                        :op1 \"Dear\"\n                        :op2 \"White\"\n                        :op3 \"People\"))\n            :mod (a2 / again))\n      :op2 (r / recommend-01\n            :ARG0 p\n            :ARG1 w2\n            :ARG2 (p2 / person\n                  :name (n3 / name\n                        :op1 \"Neela\"))\n            :ARG1-of (s / strong-02)))"], "tree": ["(w / watch-01\n   :ARG1 (w2 / work-of-art\n             :name (n2 / name\n                       :op1 \"Dear\"\n                       :op2 \"White\"\n                       :op3 \"People\")))", "(r / recommend-01\n   :ARG0 (p / person :name (n / name :op1 \"Clara\"))\n   :ARG1 (w2 / work-of-art :name (n2 / name :op1 \"Dear\" :op2 \"White\" :op3 \"People\"))\n   :ARG2 (p2 / person\n             :name (n3 / name\n                       :op1 \"Neela\"))\n   :ARG1 (s / strong-02))", "(w / watch-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Clara\"))\n   :ARG1 (w2 / work-of-art\n             :name (n2 / name\n                       :op1 \"Dear\"\n                       :op2 \"White\"\n                       :op3 \"People\")))", "(w / watch-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Clara\"))\n   :ARG1 (w2 / work-of-art\n             :name (n2 / name\n                       :op1 \"Dear\"\n                       :op2 \"White\"\n                       :op3 \"People\"))\n   :mod (a2 / again))"], "smus": ["Watch \"Dear White People\".", "a href=\"http://www.youtube.com/watch?v=clara_shelby\">Clara recommends Dear White People to Neela Strongly/a>", "a href=\"http://www.youtube.com/watch?v=clara_1\">Clara Watch \"Dear White People/a>", "a href=\"http://www.youtube.com/watch?v=clara_1\">Clara Watching Dear White People/a>"]}, {"instance_id": "samsum-186", "summary": "Laura wants Kas to tidy up her dreads this weekend. Kas will let her know tonight if she is available.", "summary_trees": ["# ::snt Laura wants Kas to tidy up her dreads this weekend.\n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Laura\")\n            :part (d / dread))\n      :ARG1 (t / tidy-up-02\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Kas\"))\n            :ARG1 d)\n      :time (w2 / weekend\n            :mod (t2 / this)))", "# ::snt Kas will let her know tonight if she is available.\n(l / let-know-07\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Kas\"))\n      :ARG1 (s / she)\n      :ARG2 (a / available-02\n            :ARG2 s)\n      :time (d / date-entity\n            :dayperiod (n2 / night)\n            :mod (t / today)))"], "tree": ["(w / want-01\n   :time (w2 / weekend\n             :mod (t2 / this)))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Laura\")\n            :part (d / dread))\n   :ARG1 (t / tidy-up-02\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Kas\"))\n            :ARG1 d)\n   :time (w2 / weekend\n             :mod (t2 / this)))", "(l / let-know-07\n   :time (d / date-entity\n            :dayperiod (n2 / night)\n            :mod (t / today)))", "(l / let-know-07\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kas\"))\n   :ARG1 (s / she)\n   :ARG2 (a / available-02\n            :ARG2 s)\n   :time (d / date-entity\n            :dayperiod (n2 / night)\n            :mod (t / today)))"], "smus": ["Wants this weekend.", "Laura, part dreads, wants Kas to tidy up her own this weekend.", "Let know tonight.", "Kas let her know that she was available tonight."]}, {"instance_id": "samsum-187", "summary": "Rob and Eve will meet on Sunday morning to go to the shops. Eve has something to do at about 3. ", "summary_trees": ["# ::snt Rob and Eve will meet on Sunday morning to go to the shops.\n(m / meet-03\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Rob\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Eve\")))\n      :time (d / date-entity\n            :weekday (s / sunday)\n            :dayperiod (m2 / morning))\n      :purpose (g / go-02\n            :ARG0 a\n            :ARG4 (s2 / shop)))", "# ::snt Eve has something to do at about 3.\n(d / do-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Eve\"))\n      :ARG1 (s / something)\n      :time (a / about\n            :op1 (d2 / date-entity\n                  :time \"3:00\")))"], "tree": ["(g / go-02\n   :ARG0 (a / and)\n   :ARG4 (s2 / shop))", "(g / go-02\n   :ARG0 (a / and)\n   :ARG4 (s2 / shop))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rob\")))", "(m / meet-03\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Eve\")))", "(m / meet-03\n   :time (d / date-entity\n            :weekday (s / sunday)\n            :dayperiod (m2 / morning)))", "(m / meet-03\n   :time (d / date-entity\n            :weekday (s / sunday)\n            :dayperiod (m2 / morning)))", "(m / meet-03\n   :time (d / date-entity\n            :weekday (s / sunday)\n            :dayperiod (m2 / morning)))", "(m / meet-03\n   :time (d / date-entity\n            :weekday (s / sunday)\n            :dayperiod (m2 / morning))\n   :purpose (g / go-02))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rob\"))\n   :time (d / date-entity\n            :weekday (s / sunday)\n            :dayperiod (m2 / morning)))", "(m / meet-03\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Rob\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Eve\"))))", "(m / meet-03\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Eve\"))\n   :time (d / date-entity\n            :weekday (s / sunday)\n            :dayperiod (m2 / morning))\n   :time d)", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rob\"))\n   :time (d / date-entity\n            :weekday (s / sunday)\n            :dayperiod (m2 / morning))\n   :purpose (g / go-02\n               :ARG0 p\n               :ARG4 (s2 / shop)))", "(m / meet-03\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Eve\"))\n   :time (d / date-entity\n            :weekday (s / sunday)\n            :dayperiod (m2 / morning))\n   :time d\n   :purpose (g / go-02\n               :ARG0 p2\n               :ARG4 (s2 / shop)))", "(m / meet-03\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Rob\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Eve\")))\n   :time (d / date-entity\n            :weekday (s / sunday)\n            :dayperiod (m2 / morning)))", "(m / meet-03\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Rob\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Eve\")))\n   :time (d / date-entity\n            :weekday (s / sunday)\n            :dayperiod (m2 / morning))\n   :purpose (g / go-02\n               :ARG0 a\n               :ARG4 (s2 / shop)))", "(d / do-02\n   :time (a / about\n            :op1 (d2 / date-entity\n                     :time \"3:00\")))", "(d / do-02\n   :time (a / about\n            :op1 (d2 / date-entity\n                     :time \"3:00\")))", "(d / do-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Eve\"))\n   :ARG1 (s / something))"], "smus": ["Go to the shops.", "Go to the shops.", "Rob will meet.", "Eve will meet.", "Meet Sunday morning.", "Meet Sunday morning.", "Meet Sunday morning.", "Meet Sunday morning to go.", "Rob will meet Sunday morning.", "Rob and Eve will meet.", "Eve will meet Sunday morning.", "Rob will meet Sunday morning to go to the shops.", "Eve will meet Sunday morning to go to the shops.", "Rob and Eve will meet Sunday morning.", "Rob and Eve will meet Sunday morning to go to the shops.", "Do about 3:00", "Do about 3:00", "Eve did something."]}, {"instance_id": "samsum-188", "summary": "James and Mia want to go to an art exhibition tomorrow. James wants Amelia to go with them but Mia isn't sure about it. James and Mia will go to his place afterwards.", "summary_trees": ["# ::snt James and Mia want to go to an art exhibition tomorrow.\n(w / want-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"James\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Mia\")))\n      :ARG1 (g / go-02\n            :ARG0 a\n            :ARG4 (e / exhibit-01\n                  :ARG1 (a2 / art))\n            :time (t / tomorrow)))", "# ::snt James wants Amelia to go with them but Mia isn't sure about it.\n(c / contrast-01\n      :ARG1 (w / want-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"James\"))\n            :ARG1 (g / go-02\n                  :ARG0 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Amelia\"))\n                  :accompanier (t / they)))\n      :ARG2 (s / sure-02\n            :polarity -\n            :ARG0 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Mia\"))\n            :ARG1 g))", "# ::snt James and Mia will go to his place afterwards.\n(g / go-02\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"James\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Mia\")))\n      :ARG4 (p3 / place\n            :poss (h / he))\n      :time (a2 / afterwards))"], "tree": ["(g / go-02\n   :ARG0 (a / and)\n   :ARG4 (e / exhibit-01\n            :ARG1 (a2 / art)))", "(g / go-02\n   :ARG0 (a / and)\n   :ARG4 (e / exhibit-01\n            :ARG1 (a2 / art))\n   :time (t / tomorrow))", "(g / go-02\n   :ARG0 (a / and)\n   :ARG4 (e / exhibit-01\n            :ARG1 (a2 / art))\n   :time (t / tomorrow))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"James\"))\n   :ARG1 (g / go-02\n            :ARG0 p\n            :ARG4 (e / exhibit-01\n                     :ARG1 (a2 / art))\n            :time (t / tomorrow)))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"James\"))\n   :ARG1 (g / go-02\n            :ARG0 p\n            :ARG4 (e / exhibit-01\n                     :ARG1 (a2 / art))\n            :time (t / tomorrow)))", "(w / want-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Mia\"))\n   :ARG1 (g / go-02\n            :ARG0 p2\n            :ARG4 (e / exhibit-01\n                     :ARG1 (a2 / art))\n            :time (t / tomorrow))\n   :ARG1 g)", "(w / want-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Mia\"))\n   :ARG1 (g / go-02\n            :ARG0 p2\n            :ARG4 (e / exhibit-01\n                     :ARG1 (a2 / art))\n            :time (t / tomorrow))\n   :ARG1 g)", "(w / want-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"James\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Mia\")))\n   :ARG1 (g / go-02\n            :ARG0 a\n            :ARG4 (e / exhibit-01\n                     :ARG1 (a2 / art))\n            :time (t / tomorrow)))", "(w / want-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"James\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Mia\")))\n   :ARG1 (g / go-02\n            :ARG0 a\n            :ARG4 (e / exhibit-01\n                     :ARG1 (a2 / art))\n            :time (t / tomorrow)))", "(s / sure-02\n   :polarity -\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Mia\")))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"James\"))\n   :ARG1 (g / go-02\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Amelia\"))\n            :accompanier (t / they)))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"James\"))\n   :ARG1 (g / go-02\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Amelia\"))\n            :accompanier (t / they)))", "(c / contrast-01\n   :ARG1 (w / want-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"James\"))\n            :ARG1 (g / go-02\n                     :ARG0 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Amelia\"))\n                     :accompanier (t / they)))\n   :ARG2 (s / sure-02\n            :polarity -\n            :ARG0 (p3 / person\n                      :name (n3 / name\n                                :op1 \"Mia\"))\n            :ARG1 g))", "(c / contrast-01\n   :ARG1 (w / want-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"James\"))\n            :ARG1 (g / go-02\n                     :ARG0 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Amelia\"))\n                     :accompanier (t / they)))\n   :ARG2 (s / sure-02\n            :polarity -\n            :ARG0 (p3 / person\n                      :name (n3 / name\n                                :op1 \"Mia\"))\n            :ARG1 g))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"James\")))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Mia\")))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"James\"))\n   :ARG4 (p3 / place\n             :poss (h / he)))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Mia\"))\n   :ARG4 (p3 / place\n             :poss (h / he))\n   :ARG4 p3)", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"James\"))\n   :ARG4 (p3 / place\n             :poss (h / he))\n   :time (a2 / afterwards))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"James\"))\n   :ARG4 (p3 / place\n             :poss (h / he))\n   :time (a2 / afterwards))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"James\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Mia\"))))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Mia\"))\n   :ARG4 (p3 / place\n             :poss (h / he))\n   :ARG4 p3\n   :time (a2 / afterwards))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Mia\"))\n   :ARG4 (p3 / place\n             :poss (h / he))\n   :ARG4 p3\n   :time (a2 / afterwards))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"James\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Mia\")))\n   :ARG4 (p3 / place\n             :poss (h / he)))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"James\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Mia\")))\n   :ARG4 (p3 / place\n             :poss (h / he))\n   :time (a2 / afterwards))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"James\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Mia\")))\n   :ARG4 (p3 / place\n             :poss (h / he))\n   :time (a2 / afterwards))"], "smus": ["And go to an art exhibit.", "And tomorrow, the art exhibit will go.", "And tomorrow, the art exhibit will go.", "James wants to go to an art exhibit tomorrow.", "James wants to go to an art exhibit tomorrow.", "Mia want's to go to an art exhibit tomorrow.", "Mia want's to go to an art exhibit tomorrow.", "James and Mia want to go to an art exhibit tomorrow.", "James and Mia want to go to an art exhibit tomorrow.", "Mia isn't sure.", "James wants Amelia to go with them.", "James wants Amelia to go with them.", "James wants Amelia to go with them, but Mia isn't sure.", "James wants Amelia to go with them, but Mia isn't sure.", "James, go.", "Mia, go.", "James will go to his place.", "Mia would go to his place.", "James would go to his place afterwards.", "James would go to his place afterwards.", "James and Mia will go.", "Mia would go to his place afterwards.", "Mia would go to his place afterwards.", "James and Mia will go to his place.", "James and Mia would go to his place afterwards.", "James and Mia would go to his place afterwards."]}, {"instance_id": "samsum-189", "summary": "Jack and May will drink cocktails later.", "summary_trees": ["# ::snt Jack and May will drink cocktails later.\n(d / drink-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Jack\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"May\")))\n      :ARG1 (c / cocktail)\n      :time (a2 / after))"], "tree": ["(d / drink-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"May\")))", "(d / drink-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jack\"))\n   :ARG1 (c / cocktail))", "(d / drink-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"May\"))\n   :ARG1 (c / cocktail)\n   :ARG1 c)", "(d / drink-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jack\"))\n   :ARG1 (c / cocktail)\n   :time (a2 / after))", "(d / drink-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"May\"))\n   :ARG1 (c / cocktail)\n   :ARG1 c\n   :time (a2 / after))", "(d / drink-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Jack\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"May\"))))", "(d / drink-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Jack\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"May\")))\n   :ARG1 (c / cocktail))", "(d / drink-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Jack\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"May\")))\n   :ARG1 (c / cocktail)\n   :time (a2 / after))"], "smus": ["May, drink.", "Jack would drink cocktails.", "May would drink cocktails with them.", "Jack will drink cocktails later.", "May will drink the cocktails later.", "Jack and May will drink.", "Jack and May will drink cocktails.", "Jack and May will drink cocktails later."]}, {"instance_id": "samsum-190", "summary": "Victor took over Chris's company, which was under a huge debt. He sold the office and did some changes but Chris still works there as Director. David's business goes very slow but he expects it to get better by the end of the year.", "summary_trees": ["# ::snt Victor took over Chris's company, which was under a huge debt.\n(t / take-over-12\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Victor\"))\n      :ARG1 (c / company\n            :poss (p2 / person\n                  :name (n2 / name\n                        :op1 \"Chris\"))\n            :prep-under (d / debt\n                  :mod (h / huge))))", "# ::snt He sold the office and did some changes but Chris still works there as Director.\n(c / contrast-01\n      :ARG1 (a / and\n            :op1 (s / sell-01\n                  :ARG0 (h / he)\n                  :ARG1 (o / office))\n            :op2 (c2 / change-01\n                  :ARG0 h\n                  :ARG1 (s2 / some)))\n      :ARG2 (w / work-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Chris\"))\n            :ARG2 o\n            :ARG3 (d / director)\n            :mod (s3 / still)))", "# ::snt David's business goes very slow\n(g / go-06\n      :ARG0 (b / business\n            :poss (p / person\n                  :name (n / name\n                        :op1 \"David\")))\n      :manner (s / slow-05\n            :degree (v / very)))", "# ::snt but he expects it to get better by the end of the year.\n(c / contrast-01\n      :ARG2 (e / expect-01\n            :ARG0 (h / he)\n            :ARG1 (g / get-03\n                  :ARG1 (ii / it)\n                  :ARG2 (g2 / good-02\n                        :ARG1 ii\n                        :ARG2-of (h2 / have-degree-91\n                              :ARG1 ii\n                              :ARG3 (m / more)))\n                  :time (b / by\n                        :op1 (e2 / end-01\n                              :ARG1 (y / year))))))"], "tree": ["(t / take-over-12\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Victor\")))", "(t / take-over-12\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Victor\"))\n   :ARG1 (c / company\n            :poss (p2 / person\n                      :name (n2 / name\n                                :op1 \"Chris\"))\n            :prep-under (d / debt\n                           :mod (h / huge))))", "(t / take-over-12\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Victor\"))\n   :ARG1 (c / company\n            :poss (p2 / person\n                      :name (n2 / name\n                                :op1 \"Chris\"))\n            :prep-under (d / debt\n                           :mod (h / huge))))", "(c2 / change-01\n    :ARG0 (h / he)\n    :ARG1 (s2 / some))", "(c2 / change-01\n    :ARG0 (h / he)\n    :ARG1 (s2 / some))", "(s / sell-01\n   :ARG0 (h / he)\n   :ARG1 (o / office))", "(s / sell-01\n   :ARG0 (h / he)\n   :ARG1 (o / office))", "(w / work-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Chris\")))", "(w / work-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Chris\"))\n   :ARG2 (o / office))", "(w / work-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Chris\"))\n   :ARG2 (o / office)\n   :ARG3 (d / director)\n   :mod (s3 / still))", "(c / contrast-01\n   :ARG1 (s / sell-01\n            :ARG0 (h / he)\n            :ARG1 (o / office))\n   :ARG2 (w / work-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Chris\"))\n            :ARG2 o\n            :ARG3 (d / director)\n            :mod (s3 / still)))", "(c / contrast-01\n   :ARG1 (c2 / change-01\n             :ARG0 (h / he)\n             :ARG1 (s2 / some))\n   :ARG2 (w / work-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Chris\"))\n            :ARG2 (o / office)\n            :ARG3 (d / director)\n            :mod (s3 / still))\n   :ARG2 w)", "(c / contrast-01\n   :ARG1 (s / sell-01\n            :ARG0 (h / he)\n            :ARG1 (o / office))\n   :ARG2 (w / work-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Chris\"))\n            :ARG2 o\n            :ARG3 (d / director)\n            :mod (s3 / still)))", "(c / contrast-01\n   :ARG1 (c2 / change-01\n             :ARG0 (h / he)\n             :ARG1 (s2 / some))\n   :ARG2 (w / work-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Chris\"))\n            :ARG2 (o / office)\n            :ARG3 (d / director)\n            :mod (s3 / still))\n   :ARG2 w)", "(c / contrast-01\n   :ARG1 (a / and\n            :op1 (s / sell-01\n                    :ARG0 (h / he)\n                    :ARG1 (o / office))\n            :op2 (c2 / change-01\n                     :ARG0 h\n                     :ARG1 (s2 / some)))\n   :ARG2 (w / work-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Chris\"))\n            :ARG2 o\n            :ARG3 (d / director)\n            :mod (s3 / still)))", "(c / contrast-01\n   :ARG1 (a / and\n            :op1 (s / sell-01\n                    :ARG0 (h / he)\n                    :ARG1 (o / office))\n            :op2 (c2 / change-01\n                     :ARG0 h\n                     :ARG1 (s2 / some)))\n   :ARG2 (w / work-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Chris\"))\n            :ARG2 o\n            :ARG3 (d / director)\n            :mod (s3 / still)))", "(g / go-06\n   :manner (s / slow-05\n              :degree (v / very)))", "(g / go-06\n   :ARG0 (b / business\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"David\"))))", "(g / go-06\n   :ARG0 (b / business\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"David\")))\n   :manner (s / slow-05\n              :degree (v / very)))", "(g / get-03\n   :time (b / by\n            :op1 (e2 / end-01)))", "(g / get-03\n   :time (b / by\n            :op1 (e2 / end-01)))", "(g2 / good-02\n    :ARG1 (ii / it)\n    :ARG2 (h2 / have-degree-91\n              :ARG1 ii\n              :ARG3 (m / more)))", "(g / get-03\n   :ARG1 (ii / it)\n   :ARG2 (g2 / good-02\n             :ARG1 ii\n             :ARG2 (h2 / have-degree-91\n                       :ARG1 ii\n                       :ARG3 (m / more))))", "(g / get-03\n   :ARG1 (ii / it)\n   :ARG2 (g2 / good-02\n             :ARG1 ii\n             :ARG2 (h2 / have-degree-91\n                       :ARG1 ii\n                       :ARG3 (m / more)))\n   :time (b / by\n            :op1 (e2 / end-01\n                     :ARG1 (y / year))))", "(g / get-03\n   :ARG1 (ii / it)\n   :ARG2 (g2 / good-02\n             :ARG1 ii\n             :ARG2 (h2 / have-degree-91\n                       :ARG1 ii\n                       :ARG3 (m / more)))\n   :time (b / by\n            :op1 (e2 / end-01\n                     :ARG1 (y / year))))", "(e / expect-01\n   :ARG1 (g / get-03\n            :ARG1 (ii / it)\n            :ARG2 (g2 / good-02\n                      :ARG1 ii\n                      :ARG2 (h2 / have-degree-91\n                                :ARG1 ii\n                                :ARG3 (m / more)))\n            :time (b / by\n                     :op1 (e2 / end-01\n                              :ARG1 (y / year)))))", "(e / expect-01\n   :ARG0 (h / he)\n   :ARG1 (g / get-03\n            :ARG1 (ii / it)\n            :ARG2 (g2 / good-02\n                      :ARG1 ii\n                      :ARG2 (h2 / have-degree-91\n                                :ARG1 ii\n                                :ARG3 (m / more)))\n            :time (b / by\n                     :op1 (e2 / end-01\n                              :ARG1 (y / year)))))", "(e / expect-01\n   :ARG0 (h / he)\n   :ARG1 (g / get-03\n            :ARG1 (ii / it)\n            :ARG2 (g2 / good-02\n                      :ARG1 ii\n                      :ARG2 (h2 / have-degree-91\n                                :ARG1 ii\n                                :ARG3 (m / more)))\n            :time (b / by\n                     :op1 (e2 / end-01\n                              :ARG1 (y / year)))))", "(c / contrast-01\n   :ARG2 (e / expect-01\n            :ARG0 (h / he)\n            :ARG1 (g / get-03\n                     :ARG1 (ii / it)\n                     :ARG2 (g2 / good-02\n                               :ARG1 ii\n                               :ARG2 (h2 / have-degree-91\n                                         :ARG1 ii\n                                         :ARG3 (m / more)))\n                     :time (b / by\n                              :op1 (e2 / end-01\n                                       :ARG1 (y / year))))))"], "smus": ["Victor took over.", "Victor took over Chris' company under huge debt.", "Victor took over Chris' company under huge debt.", "He changes some.", "He changes some.", "He sold the office.", "He sold the office.", "Chris works.", "Chris works in the office.", "Chris still works as Director of the office.", "He sold the office, but Chris still works as Director.", "He changes some, but Chris still works as Director of the office.", "He sold the office, but Chris still works as Director.", "He changes some, but Chris still works as Director of the office.", "He sold the office and made some changes but Chris still works as Director.", "He sold the office and made some changes but Chris still works as Director.", "goes very slowly.", "David's business goes.", "David's business goes very slowly.", "Get by the end.", "Get by the end.", "It would be better.", "It'll get better.", "It will get better by the end of the year.", "It will get better by the end of the year.", "It expects to get better by the end of the year.", "He expects it to get better by the end of the year.", "He expects it to get better by the end of the year.", "But he expects it to get better by the end of the year."]}, {"instance_id": "samsum-191", "summary": "Jessica posts a lot regarding subjects she does nothing about in reality. Julia posts in a more genuine way. But Hillary thinks she does it to death and lacks real life.", "summary_trees": ["# ::snt Jessica posts a lot regarding subjects she does nothing about in reality.\n(p / post-01\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Jessica\"))\n      :ARG1 (l / lot\n            :topic (s / subject\n                  :ARG2-of (d / do-02\n                        :ARG0 p2\n                        :ARG1 (n2 / nothing)\n                        :mod (ii / in-reality)))))", "# ::snt Julia posts in a more genuine way.\n(p / post-01\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Julia\"))\n      :manner (h / have-degree-91\n            :ARG2 (g / genuine)\n            :ARG3 (m / more))\n      :ARG1-of h)", "# ::snt But Hillary thinks she does it to death and lacks real life.\n(c / contrast-01\n      :ARG2 (t / think-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Hillary\"))\n            :ARG1 (a / and\n                  :op1 (d / do-02\n                        :ARG0 p\n                        :ARG1 (ii / it)\n                        :degree (d2 / die-01\n                              :ARG1 p))\n                  :op2 (l / lack-01\n                        :ARG0 p\n                        :ARG1 (l2 / life\n                              :ARG1-of (r / real-04))))))"], "tree": ["(d / do-02\n   :ARG0 (p2 / person :name (n / name :op1 \"Jessica\"))\n   :ARG1 (n2 / nothing))", "(d / do-02\n   :ARG0 (p2 / person :name (n / name :op1 \"Jessica\"))\n   :ARG1 (n2 / nothing)\n   :mod (ii / in-reality))", "(p / post-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Jessica\"))\n   :ARG1 (l / lot\n            :topic (s / subject\n                      :ARG2 (d / do-02\n                               :ARG0 p2\n                               :ARG1 (n2 / nothing)\n                               :mod (ii / in-reality)))))", "(p / post-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Jessica\"))\n   :ARG1 (l / lot\n            :topic (s / subject\n                      :ARG2 (d / do-02\n                               :ARG0 p2\n                               :ARG1 (n2 / nothing)\n                               :mod (ii / in-reality)))))", "(p / post-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Julia\"))\n   :manner (h / have-degree-91\n              :ARG2 (g / genuine)\n              :ARG3 (m / more)\n              :ARG1 p))", "(d / do-02\n   :ARG0 (p / person :name (n / name :op1 \"Hillary\"))\n   :ARG1 (ii / it))", "(l / lack-01\n   :ARG1 (l2 / life\n             :ARG1 (r / real-04)))", "(l / lack-01\n   :ARG0 (p / person :name (n / name :op1 \"Hillary\"))\n   :ARG1 (l2 / life\n             :ARG1 (r / real-04)))", "(l / lack-01\n   :ARG0 (p / person :name (n / name :op1 \"Hillary\"))\n   :ARG1 (l2 / life\n             :ARG1 (r / real-04)))", "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hillary\"))\n   :ARG1 (l / lack-01\n            :ARG0 p\n            :ARG1 (l2 / life\n                      :ARG1 (r / real-04))))", "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hillary\"))\n   :ARG1 (l / lack-01\n            :ARG0 p\n            :ARG1 (l2 / life\n                      :ARG1 (r / real-04))))", "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hillary\"))\n   :ARG1 (d / do-02\n            :ARG0 p\n            :ARG1 (ii / it)\n            :degree (d2 / die-01\n                        :ARG1 p)))", "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hillary\"))\n   :ARG1 (d / do-02\n            :ARG0 p\n            :ARG1 (ii / it)\n            :degree (d2 / die-01\n                        :ARG1 p)))", "(c / contrast-01\n   :ARG2 (t / think-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Hillary\"))\n            :ARG1 (l / lack-01\n                     :ARG0 p\n                     :ARG1 (l2 / life\n                               :ARG1 (r / real-04)))))", "(c / contrast-01\n   :ARG2 (t / think-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Hillary\"))\n            :ARG1 (d / do-02\n                     :ARG0 p\n                     :ARG1 (ii / it)\n                     :degree (d2 / die-01\n                                 :ARG1 p))))", "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hillary\"))\n   :ARG1 (a / and\n            :op1 (d / do-02\n                    :ARG0 p\n                    :ARG1 (ii / it)\n                    :degree (d2 / die-01\n                                :ARG1 p))\n            :op2 (l / lack-01\n                    :ARG0 p\n                    :ARG1 (l2 / life\n                              :ARG1 (r / real-04)))))", "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hillary\"))\n   :ARG1 (a / and\n            :op1 (d / do-02\n                    :ARG0 p\n                    :ARG1 (ii / it)\n                    :degree (d2 / die-01\n                                :ARG1 p))\n            :op2 (l / lack-01\n                    :ARG0 p\n                    :ARG1 (l2 / life\n                              :ARG1 (r / real-04)))))", "(c / contrast-01\n   :ARG2 (t / think-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Hillary\"))\n            :ARG1 (a / and\n                     :op1 (d / do-02\n                             :ARG0 p\n                             :ARG1 (ii / it)\n                             :degree (d2 / die-01\n                                         :ARG1 p))\n                     :op2 (l / lack-01\n                             :ARG0 p\n                             :ARG1 (l2 / life\n                                       :ARG1 (r / real-04))))))"], "smus": ["Jessica does nothing.", "In reality, Jessica does nothing.", "Jessica posts a lot about subjects she does nothing about in reality.", "Jessica posts a lot about subjects she does nothing about in reality.", "Julia posts more genuinely.", "Hillary does it.", "Lacks real life.", "Hillary lacks real life.", "Hillary lacks real life.", "Hillary thinks she lacks a real life.", "Hillary thinks she lacks a real life.", "Hillary thinks she does it to the death.", "Hillary thinks she does it to the death.", "But Hillary thinks she lacks real life.", "But Hillary thinks she does it to the death.", "Hillary thinks she does it to the point of death and lacks real life.", "Hillary thinks she does it to the point of death and lacks real life.", "But Hillary thinks she does it to the death and lacks real life."]}, {"instance_id": "samsum-192", "summary": "Harley and Ruby are discussing the divorce filing. Harley and Ruby agree there are always two sides.", "summary_trees": ["# ::snt Harley and Ruby are discussing the divorce filing.\n(d / discuss-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Harley\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Ruby\")))\n      :ARG1 (f / file-01\n            :ARG1 (d2 / divorce-01\n                  :ARG0 p\n                  :ARG1 p2)))", "# ::snt Harley and Ruby agree there are always two sides.\n(a / agree-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Harley\"))\n      :ARG1 (s / side\n            :quant 2\n            :time (a2 / always))\n      :ARG2 (p2 / person\n            :name (n2 / name\n                  :op1 \"Ruby\")))"], "tree": ["(d / discuss-01\n   :ARG1 (f / file-01\n            :ARG1 (d2 / divorce-01\n                      :ARG0 (p / person :name (n / name :op1 \"Harley\"))\n                      :ARG1 (p2 / person :name (n2 / name :op1 \"Ruby\")))))", "(a / agree-01\n   :ARG1 (s / side\n            :quant 2\n            :time (a2 / always)))", "(a / agree-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Harley\")))"], "smus": ["Discussing the Harvey divorce filing with Ruby.", "Always agree, there are two sides.", "'Harley agrees."]}, {"instance_id": "samsum-193", "summary": "Mum is at school in front of the door. Ludo's rooms is 112 and his class is class 3. The same goes for Hugo and Charles. The building is big and has a big garden. The meeting is about to start.", "summary_trees": ["# ::snt Mum is at school in front of the door.\n(b / be-located-at-91\n      :ARG1 (p / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG2 (m / mum)))\n      :ARG2 (s / school)\n      :location (ii / in-front-of\n            :op1 (d / door)))", "# ::snt Ludo's rooms is 112 and his class is class 3.\n(a / and\n      :op1 (r / room\n            :mod 112\n            :poss (p / person\n                  :name (n / name\n                        :op1 \"Ludo\")))\n      :op2 (c / class\n            :mod 3\n            :poss (r2 / room\n                  :poss p)))", "# ::snt The same goes for Hugo and Charles.\n(g / go-11\n      :ARG1 (s / same-01)\n      :ARG2 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Hugo\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Charles\"))))", "# ::snt The building is big and has a big garden.\n(a / and\n      :op1 (b / big\n            :domain (b2 / building))\n      :op2 (h / have-03\n            :ARG0 b2\n            :ARG1 (g / garden\n                  :mod b)))", "# ::snt The meeting is about to start.\n(s / start-01\n      :ARG1 (m / meet-03)\n      :time (a / about-to))"], "tree": ["(b / be-located-at-91\n   :location (ii / in-front-of\n                 :op1 (d / door)))", "(b / be-located-at-91\n   :ARG1 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (m / mum)))\n   :ARG2 (s / school))", "(b / be-located-at-91\n   :ARG1 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (m / mum)))\n   :ARG2 (s / school)\n   :location (ii / in-front-of\n                 :op1 (d / door)))", "(a / and\n   :op1 (r / room\n           :mod 112\n           :poss (p / person\n                    :name (n / name\n                             :op1 \"Ludo\")))\n   :op2 (c / class\n           :mod 3\n           :poss (r2 / room\n                     :poss p)))", "(g / go-11\n   :ARG1 (s / same-01)\n   :ARG2 (p / person\n            :name (n / name\n                     :op1 \"Hugo\")))", "(g / go-11\n   :ARG1 (s / same-01)\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Charles\")))", "(g / go-11\n   :ARG1 (s / same-01)\n   :ARG2 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Hugo\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Charles\"))))", "(h / have-03\n   :ARG0 (b2 / building)\n   :ARG1 (g / garden\n            :mod (b / big)))", "(h / have-03\n   :ARG0 (b2 / building)\n   :ARG1 (g / garden\n            :mod (b / big)))", "(s / start-01\n   :ARG1 (m / meet-03)\n   :time (a / about-to))", "(s / start-01\n   :ARG1 (m / meet-03)\n   :time (a / about-to))"], "smus": ["In front of the door.", "Mum is in school.", "Mum is in school in front of the door.", "Ludo's rooms are 112 and 3rd class.", "Same goes for Hugo.", "Same goes for Charles.", "Same goes for Hugo and Charles.", "The building has a big garden.", "The building has a big garden.", "The meeting is about to start.", "The meeting is about to start."]}, {"instance_id": "samsum-194", "summary": "Tom arrived safely, but without his luggage.", "summary_trees": ["# ::snt Tom arrived safely, but without his luggage.\n(h / have-concession-91\n      :ARG1 (a / arrive-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Tom\"))\n            :manner (s / safe-01\n                  :ARG1 p))\n      :ARG2 (a2 / accompany-01\n            :polarity -\n            :ARG0 (l / luggage\n                  :poss p)\n            :ARG1 p))"], "tree": ["(a2 / accompany-01\n    :polarity -\n    :ARG0 (l / luggage\n             :poss (p / person :name (n / name :op1 \"Tom\")))\n    :ARG1 p)", "(a2 / accompany-01\n    :polarity -\n    :ARG0 (l / luggage\n             :poss (p / person :name (n / name :op1 \"Tom\")))\n    :ARG1 p)", "(a / arrive-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Tom\")))", "(a / arrive-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Tom\"))\n   :manner (s / safe-01\n              :ARG1 p))", "(h / have-concession-91\n   :ARG1 (a / arrive-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Tom\"))\n            :manner (s / safe-01\n                       :ARG1 p)))", "(h / have-concession-91\n   :ARG1 (a / arrive-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Tom\"))\n            :manner (s / safe-01\n                       :ARG1 p))\n   :ARG2 (a2 / accompany-01\n             :polarity -\n             :ARG0 (l / luggage\n                      :poss p)\n             :ARG1 p))", "(h / have-concession-91\n   :ARG1 (a / arrive-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Tom\"))\n            :manner (s / safe-01\n                       :ARG1 p))\n   :ARG2 (a2 / accompany-01\n             :polarity -\n             :ARG0 (l / luggage\n                      :poss p)\n             :ARG1 p))"], "smus": ["Tom's luggage was not with him.", "Tom's luggage was not with him.", "Tom arrived.", "Tom arrived safely.", "Tom arrived safely though.", "Tom arrived safely, but without his luggage.", "Tom arrived safely, but without his luggage."]}, {"instance_id": "samsum-195", "summary": "Beth wants to organize a girls weekend to celebrate her mother's 40th birthday. She also wants to work at Deidre's beauty salon. Deidre offers her a few hours on Saturdays as work experience. They set up for a meeting tomorrow.", "summary_trees": ["# ::snt Beth wants to organize a girls weekend to celebrate her mother's 40th birthday.\n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Beth\"))\n      :ARG1 (o / organize-01\n            :ARG0 p\n            :ARG1 (w2 / weekend\n                  :mod (g / girl))\n            :purpose (c / celebrate-01\n                  :ARG0 p\n                  :ARG1 (b / birthday\n                        :poss (p2 / person\n                              :ARG0-of (h / have-rel-role-91\n                                    :ARG1 p\n                                    :ARG2 (m / mother)))\n                        :ord (o2 / ordinal-entity\n                              :value 40)))))", "# ::snt She also wants to work at Deidre's beauty salon.\n(w / want-01\n      :ARG0 (s / she)\n      :ARG1 (w2 / work-01\n            :ARG0 s\n            :ARG2 (s2 / salon\n                  :mod (b / beautiful-02)\n                  :poss (p / person\n                        :name (n / name\n                              :op1 \"Deidre\"))))\n      :mod (a / also))", "# ::snt Deidre offers her a few hours on Saturdays as work experience.\n(o / offer-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Deidre\"))\n      :ARG1 (f / few\n            :op1 (t / temporal-quantity\n                  :quant 1\n                  :unit (h / hour))\n            :frequency (r / rate-entity-91\n                  :ARG4 (d / date-entity\n                        :weekday (s / saturday))))\n      :ARG3 (s2 / she)\n      :purpose (e / experience-01\n            :ARG0 s2\n            :ARG1 (w / work-01)))", "# ::snt They set up for a meeting tomorrow.\n(s / set-up-03\n      :ARG0 (t / they)\n      :ARG1 (m / meet-03\n            :ARG0 t\n            :time (t2 / tomorrow)))"], "tree": ["(o / organize-01\n   :ARG1 (w2 / weekend\n             :mod (g / girl)))", "(o / organize-01\n   :ARG0 (p / person :name (n / name :op1 \"Beth\"))\n   :ARG1 (w2 / weekend\n             :mod (g / girl)))", "(c / celebrate-01\n   :ARG0 (p / person :name (n / name :op1 \"Beth\"))\n   :ARG1 (b / birthday\n            :poss (p2 / person\n                      :ARG0 (h / have-rel-role-91\n                               :ARG1 p\n                               :ARG2 (m / mother)))\n            :ord (o2 / ordinal-entity\n                     :value 40)))", "(c / celebrate-01\n   :ARG0 (p / person :name (n / name :op1 \"Beth\"))\n   :ARG1 (b / birthday\n            :poss (p2 / person\n                      :ARG0 (h / have-rel-role-91\n                               :ARG1 p\n                               :ARG2 (m / mother)))\n            :ord (o2 / ordinal-entity\n                     :value 40)))", "(o / organize-01\n   :ARG0 (p / person :name (n / name :op1 \"Beth\"))\n   :ARG1 (w2 / weekend\n             :mod (g / girl))\n   :purpose (c / celebrate-01\n               :ARG0 p\n               :ARG1 (b / birthday\n                        :poss (p2 / person\n                                  :ARG0 (h / have-rel-role-91\n                                           :ARG1 p\n                                           :ARG2 (m / mother)))\n                        :ord (o2 / ordinal-entity\n                                 :value 40))))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Beth\"))\n   :ARG1 (o / organize-01\n            :ARG0 p\n            :ARG1 (w2 / weekend\n                      :mod (g / girl))\n            :purpose (c / celebrate-01\n                        :ARG0 p\n                        :ARG1 (b / birthday\n                                 :poss (p2 / person\n                                           :ARG0 (h / have-rel-role-91\n                                                    :ARG1 p\n                                                    :ARG2 (m / mother)))\n                                 :ord (o2 / ordinal-entity\n                                          :value 40)))))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Beth\"))\n   :ARG1 (o / organize-01\n            :ARG0 p\n            :ARG1 (w2 / weekend\n                      :mod (g / girl))\n            :purpose (c / celebrate-01\n                        :ARG0 p\n                        :ARG1 (b / birthday\n                                 :poss (p2 / person\n                                           :ARG0 (h / have-rel-role-91\n                                                    :ARG1 p\n                                                    :ARG2 (m / mother)))\n                                 :ord (o2 / ordinal-entity\n                                          :value 40)))))", "(w / want-01\n   :ARG0 (s / she)\n   :ARG1 (w2 / work-01\n             :ARG0 s\n             :ARG2 (s2 / salon\n                       :mod (b / beautiful-02)\n                       :poss (p / person\n                                :name (n / name\n                                         :op1 \"Deidre\")))))", "(w / want-01\n   :ARG0 (s / she)\n   :ARG1 (w2 / work-01\n             :ARG0 s\n             :ARG2 (s2 / salon\n                       :mod (b / beautiful-02)\n                       :poss (p / person\n                                :name (n / name\n                                         :op1 \"Deidre\"))))\n   :mod (a / also))", "(r / rate-entity-91\n   :ARG4 (d / date-entity\n            :weekday (s / saturday)))", "(o / offer-01\n   :ARG1 (f / few\n            :op1 (t / temporal-quantity\n                    :quant 1\n                    :unit (h / hour))\n            :frequency (r / rate-entity-91\n                          :ARG4 (d / date-entity\n                                   :weekday (s / saturday)))))", "(o / offer-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Deidre\"))\n   :ARG1 (f / few\n            :op1 (t / temporal-quantity\n                    :quant 1\n                    :unit (h / hour))\n            :frequency (r / rate-entity-91\n                          :ARG4 (d / date-entity\n                                   :weekday (s / saturday)))))", "(o / offer-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Deidre\"))\n   :ARG1 (f / few\n            :op1 (t / temporal-quantity\n                    :quant 1\n                    :unit (h / hour))\n            :frequency (r / rate-entity-91\n                          :ARG4 (d / date-entity\n                                   :weekday (s / saturday))))\n   :ARG3 (s2 / she)\n   :purpose (e / experience-01\n               :ARG0 s2\n               :ARG1 (w / work-01)))", "(m / meet-03\n   :ARG0 (t / they)\n   :time (t2 / tomorrow))", "(m / meet-03\n   :ARG0 (t / they)\n   :time (t2 / tomorrow))", "(s / set-up-03\n   :ARG1 (m / meet-03\n            :ARG0 (t / they)\n            :time (t2 / tomorrow)))", "(s / set-up-03\n   :ARG0 (t / they)\n   :ARG1 (m / meet-03\n            :ARG0 t\n            :time (t2 / tomorrow)))", "(s / set-up-03\n   :ARG0 (t / they)\n   :ARG1 (m / meet-03\n            :ARG0 t\n            :time (t2 / tomorrow)))"], "smus": ["organize a girls weekend.", "Beth will organise a girls weekend.", "Beth will celebrate her mother's 40th birthday.", "Beth will celebrate her mother's 40th birthday.", "Beth will organize a girls weekend to celebrate her mother's 40th birthday.", "Beth wants to organize a girls weekend to celebrate her mother's 40th birthday.", "Beth wants to organize a girls weekend to celebrate her mother's 40th birthday.", "She wants to work at Deidre's beauty salon.", "She also wants to work at Deidre's beauty salon.", "Saturday", "Offers a few hours on Saturday.", "Deidre offers a few hours on Saturday.", "She offers herself a few hours on Saturday for work experience.", "They will meet tomorrow.", "They will meet tomorrow.", "They are set to meet tomorrow.", "They are setting up a meeting tomorrow.", "They are setting up a meeting tomorrow."]}, {"instance_id": "samsum-196", "summary": "Mary ran out of money. Carter is going to lend her some in an hour.", "summary_trees": ["# ::snt Mary ran out of money.\n(r / run-out-05\n      :ARG1 (m / money)\n      :ARG2 (p / person\n            :name (n / name\n                  :op1 \"Mary\")))", "# ::snt Carter is going to lend her some in an hour.\n(l / lend-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Carter\"))\n      :ARG1 (s / some)\n      :ARG2 (s2 / she)\n      :time (a / after\n            :op1 (n2 / now)\n            :quant (t / temporal-quantity\n                  :quant 1\n                  :unit (h / hour))))"], "tree": ["(r / run-out-05\n   :ARG1 (m / money)\n   :ARG2 (p / person\n            :name (n / name\n                     :op1 \"Mary\")))", "(l / lend-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Carter\")))", "(l / lend-01\n   :time (a / after\n            :op1 (n2 / now)\n            :quant (t / temporal-quantity\n                      :quant 1\n                      :unit (h / hour))))", "(l / lend-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Carter\"))\n   :ARG1 (s / some)\n   :ARG2 (s2 / she)\n   :time (a / after\n            :op1 (n2 / now)\n            :quant (t / temporal-quantity\n                      :quant 1\n                      :unit (h / hour))))"], "smus": ["Mary ran out of money.", "Carter will lend.", "Lender in an hour.", "Carter will lend her some in an hour."]}, {"instance_id": "samsum-197", "summary": "Ryan and Jack are going to the casting for a dance show.", "summary_trees": ["# ::snt Ryan and Jack are going to the casting for a dance show.\n(g / go-02\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Ryan\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Jack\")))\n      :ARG4 (c / cast-02\n            :ARG2 (s / show-04\n                  :ARG1 (d / dance-01))))"], "tree": ["(c / cast-02\n   :ARG2 (s / show-04\n            :ARG1 (d / dance-01)))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ryan\")))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Jack\")))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ryan\"))\n   :ARG4 (c / cast-02\n            :ARG2 (s / show-04\n                     :ARG1 (d / dance-01))))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ryan\"))\n   :ARG4 (c / cast-02\n            :ARG2 (s / show-04\n                     :ARG1 (d / dance-01))))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Ryan\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Jack\"))))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Jack\"))\n   :ARG4 (c / cast-02\n            :ARG2 (s / show-04\n                     :ARG1 (d / dance-01)))\n   :ARG4 c)", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Jack\"))\n   :ARG4 (c / cast-02\n            :ARG2 (s / show-04\n                     :ARG1 (d / dance-01)))\n   :ARG4 c)", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Ryan\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Jack\")))\n   :ARG4 (c / cast-02\n            :ARG2 (s / show-04\n                     :ARG1 (d / dance-01))))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Ryan\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Jack\")))\n   :ARG4 (c / cast-02\n            :ARG2 (s / show-04\n                     :ARG1 (d / dance-01))))"], "smus": ["Cast for the dance show.", "Ryan is going.", "Jack is going.", "Ryan is going to the dance show cast.", "Ryan is going to the dance show cast.", "Ryan and Jack are going.", "Jack is going to the dance show cast.", "Jack is going to the dance show cast.", "Ryan and Jack are going to the dance show cast.", "Ryan and Jack are going to the dance show cast."]}, {"instance_id": "samsum-198", "summary": "Chloe will watch the serious recommended by Biwott at the weekend.", "summary_trees": ["# ::snt Chloe will watch the serious recommended by Biwott at the weekend.\n(w / watch-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Chloe\"))\n      :ARG1 (t / thing\n            :ARG1-of (s / serious-02)\n            :ARG1-of (r / recommend-01\n                  :ARG0 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Biwott\"))))\n      :time (w2 / weekend))"], "tree": [], "smus": []}, {"instance_id": "samsum-199", "summary": "Finn and Zadie are going to Elephant and Castle tomorrow at 2. They will meet at the main entrance.", "summary_trees": ["# ::snt Finn and Zadie are going to Elephant and Castle tomorrow at 2.\n(g / go-02\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Finn\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Zadie\")))\n      :ARG4 (f / facility\n            :name (n3 / name\n                  :op1 \"Elephant\"\n                  :op2 \"and\"\n                  :op3 \"Castle\"))\n      :time (t / tomorrow)\n      :time (d / date-entity\n            :time \"14:00\"))", "# ::snt They will meet at the main entrance.\n(m / meet-03\n      :ARG0 (t / they)\n      :location (e / entrance\n            :mod (m2 / main)))"], "tree": ["(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Finn\")))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Zadie\")))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Finn\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Zadie\"))))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Finn\"))\n   :ARG4 (f / facility\n            :name (n3 / name\n                      :op1 \"Elephant\"\n                      :op2 \"and\"\n                      :op3 \"Castle\")))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Zadie\"))\n   :ARG4 (f / facility\n            :name (n3 / name\n                      :op1 \"Elephant\"\n                      :op2 \"and\"\n                      :op3 \"Castle\"))\n   :ARG4 f)", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Finn\"))\n   :ARG4 (f / facility\n            :name (n3 / name\n                      :op1 \"Elephant\"\n                      :op2 \"and\"\n                      :op3 \"Castle\"))\n   :time (t / tomorrow))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Zadie\"))\n   :ARG4 (f / facility\n            :name (n3 / name\n                      :op1 \"Elephant\"\n                      :op2 \"and\"\n                      :op3 \"Castle\"))\n   :ARG4 f\n   :time (t / tomorrow))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Finn\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Zadie\")))\n   :ARG4 (f / facility\n            :name (n3 / name\n                      :op1 \"Elephant\"\n                      :op2 \"and\"\n                      :op3 \"Castle\")))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Finn\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Zadie\")))\n   :ARG4 (f / facility\n            :name (n3 / name\n                      :op1 \"Elephant\"\n                      :op2 \"and\"\n                      :op3 \"Castle\"))\n   :time (t / tomorrow))", "(m / meet-03\n   :location (e / entrance\n                :mod (m2 / main)))", "(m / meet-03\n   :location (e / entrance\n                :mod (m2 / main)))", "(m / meet-03\n   :location (e / entrance\n                :mod (m2 / main)))", "(m / meet-03\n   :location (e / entrance\n                :mod (m2 / main)))", "(m / meet-03\n   :ARG0 (t / they)\n   :location (e / entrance\n                :mod (m2 / main)))", "(m / meet-03\n   :ARG0 (t / they)\n   :location (e / entrance\n                :mod (m2 / main)))"], "smus": ["Finn is going.", "Zadie is going.", "Finn and Zadie are going.", "Finn is going to the Elephant and Castle.", "Zadie was going to the Elephant and Castle.", "Finn is going to the Elephant and Castle tomorrow.", "Zadie will be going to the Elephant and Castle tomorrow.", "Finn and Zadie are going to Elephant and Castle.", "Finn and Zadie will be going to Elephant and Castle tomorrow.", "Meet at main entrance.", "Meet at main entrance.", "Meet at main entrance.", "Meet at main entrance.", "They will meet at the main entrance.", "They will meet at the main entrance."]}, {"instance_id": "samsum-200", "summary": "Mazie and her girlfriends are having a drink tonight. Lee doesn't like some of her friends, for example Sheryl. Lee had spilt a drink on her.", "summary_trees": ["# ::snt Mazie and her girlfriends are having a drink tonight.\n(d / drink-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Mazie\"))\n            :op2 (p2 / person\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 p\n                        :ARG2 (g / girlfriend))))\n      :time (d2 / date-entity\n            :dayperiod (n2 / night)\n            :mod (t / today)))", "# ::snt Lee doesn't like some of her friends, for example Sheryl.\n(d / dislike-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Lee\"))\n      :ARG1 (p2 / person\n            :quant (s / some)\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 p\n                  :ARG2 (f / friend))\n            :example (p3 / person\n                  :name (n2 / name\n                        :op1 \"Sheryl\"))))", "# ::snt Lee had spilt a drink on her.\n(s / spill-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Lee\"))\n      :ARG1 (d / drink)\n      :ARG2 (s2 / she))"], "tree": ["(h / have-rel-role-91\n   :ARG1 (p / person :name (n / name :op1 \"Mazie\"))\n   :ARG2 (g / girlfriend))", "(d / drink-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mazie\")))", "(d / drink-01\n   :time (d2 / date-entity\n             :dayperiod (n2 / night)\n             :mod (t / today)))", "(d / drink-01\n   :ARG0 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 (p / person :name (n / name :op1 \"Mazie\"))\n                      :ARG2 (g / girlfriend))))", "(d / drink-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mazie\"))\n   :time (d2 / date-entity\n             :dayperiod (n2 / night)\n             :mod (t / today)))", "(d / drink-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Mazie\"))\n            :op2 (p2 / person\n                     :ARG0 (h / have-rel-role-91\n                              :ARG1 p\n                              :ARG2 (g / girlfriend)))))", "(d / drink-01\n   :ARG0 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 (p / person :name (n / name :op1 \"Mazie\"))\n                      :ARG2 (g / girlfriend)))\n   :time (d2 / date-entity\n             :dayperiod (n2 / night)\n             :mod (t / today))\n   :time d2)", "(d / drink-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Mazie\"))\n            :op2 (p2 / person\n                     :ARG0 (h / have-rel-role-91\n                              :ARG1 p\n                              :ARG2 (g / girlfriend))))\n   :time (d2 / date-entity\n             :dayperiod (n2 / night)\n             :mod (t / today)))", "(d / dislike-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lee\"))\n   :ARG1 (p2 / person\n             :quant (s / some)\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 p\n                      :ARG2 (f / friend))\n             :example (p3 / person\n                          :name (n2 / name\n                                    :op1 \"Sheryl\"))))", "(d / dislike-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lee\"))\n   :ARG1 (p2 / person\n             :quant (s / some)\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 p\n                      :ARG2 (f / friend))\n             :example (p3 / person\n                          :name (n2 / name\n                                    :op1 \"Sheryl\"))))", "(s / spill-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lee\"))\n   :ARG1 (d / drink))", "(s / spill-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lee\"))\n   :ARG1 (d / drink)\n   :ARG2 (s2 / she))"], "smus": ["Mazie is a girlfriend.", "Mazie had a drink.", "Drink tonight.", "Mazie's girlfriends had a drink.", "Mazie had a drink tonight.", "Mazie and her girlfriends had a drink.", "Mazie's girlfriends had a drink tonight.", "Mazie and her girlfriends had a drink tonight.", "Lee doesn't like some of his friends, like Sheryl.", "Lee doesn't like some of his friends, like Sheryl.", "Lee had spilled the drink.", "Lee had spilled the drink on her."]}, {"instance_id": "samsum-201", "summary": "Sandra and Brenda used to work together in the clothes factory 25 years ago. Sandra still lives in Kings Norton. Brenda lives in Stoke now. Her husband Bill died 5 years ago. They will meet in Birmingham for a lunch next Saturday about 11. They want to organize a reunion for the Lister's girls. ", "summary_trees": ["# ::snt Sandra and Brenda used to work together in the clothes factory 25 years ago.\n(w / work-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Sandra\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Brenda\")))\n      :ARG2 (f / factory\n            :mod (c / clothes))\n      :time (b / before\n            :op1 (n3 / now)\n            :quant (t / temporal-quantity\n                  :quant 25\n                  :unit (y / year)))\n      :manner (t2 / together)\n      :time (u / use-03))", "# ::snt Sandra still lives in Kings Norton.\n(l / live-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Sandra\"))\n      :location (c / city-district\n            :name (n2 / name\n                  :op1 \"Kings\"\n                  :op2 \"Norton\"))\n      :mod (s / still))", "# ::snt Brenda lives in Stoke now.\n(l / live-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Brenda\"))\n      :location (c / city\n            :name (n2 / name\n                  :op1 \"Stoke\"))\n      :time (n3 / now))", "# ::snt Her husband Bill died 5 years ago.\n(d / die-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Bill\")\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (s / she)\n                  :ARG2 (h2 / husband)))\n      :time (b / before\n            :op1 (n2 / now)\n            :quant (t / temporal-quantity\n                  :quant 5\n                  :unit (y / year))))", "# ::snt They will meet in Birmingham for a lunch next Saturday about 11.\n(m / meet-03\n      :ARG0 (t / they)\n      :location (c / city\n            :name (n / name\n                  :op1 \"Birmingham\"))\n      :purpose (l / lunch)\n      :time (d / date-entity\n            :weekday (s / saturday)\n            :mod (n2 / next)\n            :time (a / about\n                  :op1 11)))", "# ::snt They want to organize a reunion for the Lister's girls.\n(w / want-01\n      :ARG0 (t / they)\n      :ARG1 (o / organize-01\n            :ARG0 t\n            :ARG1 (r / reunite-01\n                  :ARG1 (g / girl\n                        :ARG0-of (h / have-rel-role-91\n                              :ARG1 (p / person\n                                    :name (n / name\n                                          :op1 \"Lister\"))\n                              :ARG2 (g2 / girlfriend))))))"], "tree": ["(w / work-01\n   :time (b / before\n            :op1 (n3 / now)\n            :quant (t / temporal-quantity\n                      :quant 25\n                      :unit (y / year)))\n   :manner (t2 / together)\n   :time (u / use-03))", "(w / work-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Brenda\"))\n   :ARG2 (f / factory\n            :mod (c / clothes))\n   :ARG2 f\n   :time (b / before\n            :op1 (n3 / now)\n            :quant (t / temporal-quantity\n                      :quant 25\n                      :unit (y / year)))\n   :manner (t2 / together)\n   :time (u / use-03))", "(w / work-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Sandra\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Brenda\")))\n   :ARG2 (f / factory\n            :mod (c / clothes))\n   :time (b / before\n            :op1 (n3 / now)\n            :quant (t / temporal-quantity\n                      :quant 25\n                      :unit (y / year)))\n   :manner (t2 / together)\n   :time (u / use-03))", "(l / live-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sandra\")))", "(l / live-01\n   :location (c / city-district\n                :name (n2 / name\n                          :op1 \"Kings\"\n                          :op2 \"Norton\")))", "(l / live-01\n   :location (c / city-district\n                :name (n2 / name\n                          :op1 \"Kings\"\n                          :op2 \"Norton\"))\n   :mod (s / still))", "(l / live-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sandra\"))\n   :location (c / city-district\n                :name (n2 / name\n                          :op1 \"Kings\"\n                          :op2 \"Norton\")))", "(l / live-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sandra\"))\n   :location (c / city-district\n                :name (n2 / name\n                          :op1 \"Kings\"\n                          :op2 \"Norton\"))\n   :mod (s / still))", "(l / live-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Brenda\")))", "(l / live-01\n   :location (c / city\n                :name (n2 / name\n                          :op1 \"Stoke\")))", "(l / live-01\n   :location (c / city\n                :name (n2 / name\n                          :op1 \"Stoke\"))\n   :time (n3 / now))", "(l / live-01\n   :location (c / city\n                :name (n2 / name\n                          :op1 \"Stoke\"))\n   :time (n3 / now))", "(l / live-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Brenda\"))\n   :location (c / city\n                :name (n2 / name\n                          :op1 \"Stoke\")))", "(l / live-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Brenda\"))\n   :location (c / city\n                :name (n2 / name\n                          :op1 \"Stoke\"))\n   :time (n3 / now))", "(l / live-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Brenda\"))\n   :location (c / city\n                :name (n2 / name\n                          :op1 \"Stoke\"))\n   :time (n3 / now))", "(d / die-01\n   :time (b / before\n            :op1 (n2 / now)\n            :quant (t / temporal-quantity\n                      :quant 5\n                      :unit (y / year))))", "(d / die-01\n   :time (b / before\n            :op1 (n2 / now)\n            :quant (t / temporal-quantity\n                      :quant 5\n                      :unit (y / year))))", "(d / die-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Bill\")\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (s / she)\n                     :ARG2 (h2 / husband))))", "(d / die-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Bill\")\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (s / she)\n                     :ARG2 (h2 / husband)))\n   :time (b / before\n            :op1 (n2 / now)\n            :quant (t / temporal-quantity\n                      :quant 5\n                      :unit (y / year))))", "(d / die-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Bill\")\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (s / she)\n                     :ARG2 (h2 / husband)))\n   :time (b / before\n            :op1 (n2 / now)\n            :quant (t / temporal-quantity\n                      :quant 5\n                      :unit (y / year))))", "(m / meet-03\n   :location (c / city\n                :name (n / name\n                         :op1 \"Birmingham\")))", "(m / meet-03\n   :location (c / city\n                :name (n / name\n                         :op1 \"Birmingham\")))", "(m / meet-03\n   :location (c / city\n                :name (n / name\n                         :op1 \"Birmingham\")))", "(m / meet-03\n   :ARG0 (t / they)\n   :location (c / city\n                :name (n / name\n                         :op1 \"Birmingham\")))", "(m / meet-03\n   :ARG0 (t / they)\n   :time (d / date-entity\n            :weekday (s / saturday)\n            :mod (n2 / next)\n            :time (a / about\n                     :op1 11)))", "(m / meet-03\n   :location (c / city\n                :name (n / name\n                         :op1 \"Birmingham\"))\n   :time (d / date-entity\n            :weekday (s / saturday)\n            :mod (n2 / next)\n            :time (a / about\n                     :op1 11)))", "(m / meet-03\n   :location (c / city\n                :name (n / name\n                         :op1 \"Birmingham\"))\n   :purpose (l / lunch)\n   :time (d / date-entity\n            :weekday (s / saturday)\n            :mod (n2 / next)\n            :time (a / about\n                     :op1 11)))"], "smus": ["25 years ago, we used to work together.", "Brenda used to work together at a clothes factory 25 years ago.", "Sandra and Brenda used to work together at a clothes factory 25 years ago.", "Sandra lives.", "Lives in Kings Norton.", "Still lives in Kings Norton.", "Sandra lives in Kings Norton.", "Sandra still lives in Kings Norton.", "Brenda lives.", "Lives in Stoke.", "Now, he lives in Stoke.", "Now, he lives in Stoke.", "Brenda lives in Stoke.", "Brenda lives now in Stoke.", "Brenda lives now in Stoke.", "Five years ago, a dead person.", "Five years ago, a dead person.", "Her husband Bill died.", "Her husband Bill died 5 years ago.", "Her husband Bill died 5 years ago.", "Meet in Birmingham.", "Meet in Birmingham.", "Meet in Birmingham.", "They will meet in Birmingham.", "They will meet next Saturday, about 11.", "The meeting will take place in Birmingham next Saturday, about 11.", "Next Saturday, about 11 a.m., meet in Birmingham for lunch."]}, {"instance_id": "samsum-202", "summary": "Will had to stand long in a queue at the post. Chris believe it is part of life in a big city. Will believes it is because of old people, who do not use the internet.", "summary_trees": ["# ::snt Will had to stand long in a queue at the post.\n(o / obligate-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Will\"))\n      :ARG2 (s / stand-01\n            :ARG1 p\n            :ARG2 (q / queue)\n            :location (p2 / post)\n            :ARG1-of (l / long-03)))", "# ::snt Chris believe it is part of life in a big city.\n(b / believe-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Chris\"))\n      :ARG1 (ii / it\n            :part-of (l / life\n                  :location (c / city\n                        :mod (b2 / big)))))", "# ::snt Will believes it is because of old people, who do not use the internet.\n(b / believe-01\n      :ARG1 (c / cause-01\n            :ARG0 (p / person\n                  :mod (o / old)\n                  :ARG0-of (u / use-01\n                        :polarity -\n                        :ARG1 (ii / internet)))\n            :ARG1 (ii2 / it)))"], "tree": ["(s / stand-01\n   :ARG1 (p / person :name (n / name :op1 \"Will\"))\n   :ARG2 (q / queue))", "(s / stand-01\n   :ARG1 (p / person :name (n / name :op1 \"Will\"))\n   :ARG2 (q / queue)\n   :location (p2 / post)\n   :ARG1 (l / long-03))", "(o / obligate-01\n   :ARG2 (s / stand-01\n            :ARG1 (p / person :name (n / name :op1 \"Will\"))\n            :ARG2 (q / queue)\n            :location (p2 / post)\n            :ARG1 (l / long-03)))", "(o / obligate-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Will\"))\n   :ARG2 (s / stand-01\n            :ARG1 p\n            :ARG2 (q / queue)\n            :location (p2 / post)\n            :ARG1 (l / long-03)))", "(o / obligate-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Will\"))\n   :ARG2 (s / stand-01\n            :ARG1 p\n            :ARG2 (q / queue)\n            :location (p2 / post)\n            :ARG1 (l / long-03)))", "(c / cause-01\n   :ARG0 (p / person\n            :mod (o / old)\n            :ARG0 (u / use-01\n                     :polarity -\n                     :ARG1 (ii / internet)))\n   :ARG1 (ii2 / it))", "(b / believe-01\n   :ARG1 (c / cause-01\n            :ARG0 (p / person\n                     :mod (o / old)\n                     :ARG0 (u / use-01\n                              :polarity -\n                              :ARG1 (ii / internet)))\n            :ARG1 (ii2 / it)))", "(b / believe-01\n   :ARG1 (c / cause-01\n            :ARG0 (p / person\n                     :mod (o / old)\n                     :ARG0 (u / use-01\n                              :polarity -\n                              :ARG1 (ii / internet)))\n            :ARG1 (ii2 / it)))"], "smus": ["Will will stand in the queue.", "Will will stand in the queue at the post for a long time.", "Will has to stand in the queue at the post long.", "Will has to stand in a queue at the post for a long time.", "Will has to stand in a queue at the post for a long time.", "It's because the old people don't use the internet.", "Believes it's because the old people don't use the internet.", "Believes it's because the old people don't use the internet."]}, {"instance_id": "samsum-203", "summary": "Sonia is going to San Sebastian in a month. Toni enjoyed her the airbnb place there. Sonia isn't convinced about it and will let Toni know.", "summary_trees": ["# ::snt Sonia is going to San Sebastian in a month.\n(g / go-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Sonia\"))\n      :ARG4 (c / city\n            :name (n2 / name\n                  :op1 \"San\"\n                  :op2 \"Sebastia\"))\n      :time (a / after\n            :op1 (n3 / now)\n            :quant (t / temporal-quantity\n                  :quant 1\n                  :unit (m / month))))", "# ::snt Toni enjoyed her the airbnb place there.\n(e / enjoy-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Toni\"))\n      :ARG1 (p2 / place\n            :poss p\n            :location (t / there)\n            :mod (c / company\n                  :name (n2 / name\n                        :op1 \"Airbnb\"))))", "# ::snt Sonia isn't convinced about it and will let Toni know.\n(a / and\n      :op1 (c / convince-01\n            :polarity -\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Sonia\"))\n            :ARG2 (ii / it))\n      :op2 (l / let-know-07\n            :ARG0 p\n            :ARG1 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Toni\"))))"], "tree": ["(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sonia\")))", "(g / go-02\n   :time (a / after\n            :op1 (n3 / now)\n            :quant (t / temporal-quantity\n                      :quant 1\n                      :unit (m / month))))", "(g / go-02\n   :time (a / after\n            :op1 (n3 / now)\n            :quant (t / temporal-quantity\n                      :quant 1\n                      :unit (m / month))))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sonia\"))\n   :ARG4 (c / city\n            :name (n2 / name\n                      :op1 \"San\"\n                      :op2 \"Sebastia\")))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sonia\"))\n   :ARG4 (c / city\n            :name (n2 / name\n                      :op1 \"San\"\n                      :op2 \"Sebastia\"))\n   :time (a / after\n            :op1 (n3 / now)\n            :quant (t / temporal-quantity\n                      :quant 1\n                      :unit (m / month))))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sonia\"))\n   :ARG4 (c / city\n            :name (n2 / name\n                      :op1 \"San\"\n                      :op2 \"Sebastia\"))\n   :time (a / after\n            :op1 (n3 / now)\n            :quant (t / temporal-quantity\n                      :quant 1\n                      :unit (m / month))))", "(e / enjoy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Toni\"))\n   :ARG1 (p2 / place\n             :poss p\n             :location (t / there)\n             :mod (c / company\n                     :name (n2 / name\n                               :op1 \"Airbnb\"))))", "(e / enjoy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Toni\"))\n   :ARG1 (p2 / place\n             :poss p\n             :location (t / there)\n             :mod (c / company\n                     :name (n2 / name\n                               :op1 \"Airbnb\"))))", "(l / let-know-07\n   :ARG0 (p / person :name (n / name :op1 \"Sonia\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Toni\")))", "(c / convince-01\n   :polarity -\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Sonia\"))\n   :ARG2 (ii / it))"], "smus": ["Sonia is going.", "Going in a month.", "Going in a month.", "Sonia is going to San Sebastian.", "Sonia will be going to San Sebastian in a month.", "Sonia will be going to San Sebastian in a month.", "Tony enjoyed his Airbnb place there.", "Tony enjoyed his Airbnb place there.", "Sonia let Tony know.", "onia was not convinced of it."]}, {"instance_id": "samsum-204", "summary": "Joy is coming back on Thursday.", "summary_trees": ["# ::snt Joy is coming back on Thursday.\n(c / come-01\n      :ARG1 (j / joy)\n      :direction (b / back)\n      :time (d / date-entity\n            :weekday (t / thursday)))"], "tree": ["(c / come-01\n   :time (d / date-entity\n            :weekday (t / thursday)))", "(c / come-01\n   :ARG1 (j / joy)\n   :time (d / date-entity\n            :weekday (t / thursday)))", "(c / come-01\n   :direction (b / back)\n   :time (d / date-entity\n            :weekday (t / thursday)))", "(c / come-01\n   :ARG1 (j / joy)\n   :direction (b / back)\n   :time (d / date-entity\n            :weekday (t / thursday)))"], "smus": ["Coming Thursday.", "Joy is coming Thursday.", "Coming back Thursday.", "Joy will be coming back Thursday."]}, {"instance_id": "samsum-205", "summary": "Susan went on a date to the rollerskating disco and she enjoyed it. Jill doesn't find it exciting.", "summary_trees": ["# ::snt Susan went on a date to the rollerskating disco and she enjoyed it.\n(a / and\n      :op1 (g / go-02\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Susan\"))\n            :ARG1 (d / date)\n            :ARG4 (d2 / disco\n                  :mod (r / roller-skating)))\n      :op2 (e / enjoy-01\n            :ARG0 p\n            :ARG1 d2))", "# ::snt Jill doesn't find it exciting.\n(f / find-02\n      :polarity -\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jill\"))\n      :ARG1 (e / excite-01\n            :ARG0 (ii / it)\n            :ARG1 p))"], "tree": ["(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Susan\")))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Susan\"))\n   :ARG1 (d / date))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Susan\"))\n   :ARG4 (d2 / disco\n             :mod (r / roller-skating)))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Susan\"))\n   :ARG1 (d / date)\n   :ARG4 (d2 / disco\n             :mod (r / roller-skating)))", "(f / find-02\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jill\"))\n   :ARG1 (e / excite-01\n            :ARG0 (ii / it)\n            :ARG1 p))"], "smus": ["Susan went.", "Susan went on a date.", "Susan went to a roller skating disco.", "Susan went on a date to a roller skating disco.", "Jill didn't find it excitable."]}, {"instance_id": "samsum-206", "summary": "Sean overslept again.", "summary_trees": ["# ::snt Sean overslept again.\n(o / oversleep-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Sean\"))\n      :mod (a / again))"], "tree": ["(o / oversleep-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sean\"))\n   :mod (a / again))"], "smus": ["Sean overslept again."]}, {"instance_id": "samsum-207", "summary": "Martin wrote a short review and won 2 cinema tickets on FB. Martin wants Aggie to go with him this week for the new film with Redford.", "summary_trees": ["# ::snt Martin wrote a short review and won 2 cinema tickets on FB.\n(a / and\n      :op1 (w / write-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Martin\"))\n            :ARG1 (r / review\n                  :ARG1-of (s / short-07)))\n      :op2 (w2 / win-01\n            :ARG0 p\n            :ARG1 (t / ticket\n                  :quant 2\n                  :mod (c / cinema))\n            :ARG4 (p2 / publication\n                  :name (n2 / name\n                        :op1 \"Facebook\"))))", "# ::snt Martin wants Aggie to go with him this week for the new film with Redford.\n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Martin\"))\n      :ARG1 (a / accompany-01\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Aggie\"))\n            :ARG1 p\n            :ARG4 (f / film\n                  :ARG1-of (n3 / new-01)\n                  :accompanier (p3 / person\n                        :name (n4 / name\n                              :op1 \"Redford\")))\n            :time (w2 / week\n                  :mod (t / this))))"], "tree": ["(w2 / win-01\n    :ARG0 (p / person :name (n / name :op1 \"Martin\"))\n    :ARG1 (t / ticket\n             :quant 2\n             :mod (c / cinema)))", "(w / write-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Martin\"))\n   :ARG1 (r / review\n            :ARG1 (s / short-07)))", "(w / write-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Martin\"))\n   :ARG1 (r / review\n            :ARG1 (s / short-07)))", "(w2 / win-01\n    :ARG0 (p / person :name (n / name :op1 \"Martin\"))\n    :ARG1 (t / ticket\n             :quant 2\n             :mod (c / cinema))\n    :ARG4 (p2 / publication\n              :name (n2 / name\n                        :op1 \"Facebook\")))", "(a / accompany-01\n   :time (w2 / week\n             :mod (t / this)))", "(a / accompany-01\n   :time (w2 / week\n             :mod (t / this)))", "(a / accompany-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Aggie\")))", "(a / accompany-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Aggie\"))\n   :ARG1 (p / person :name (n / name :op1 \"Martin\"))\n   :time (w2 / week\n             :mod (t / this)))", "(a / accompany-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Aggie\"))\n   :ARG1 (p / person :name (n / name :op1 \"Martin\"))\n   :ARG4 (f / film\n            :ARG1 (n3 / new-01)\n            :accompanier (p3 / person\n                             :name (n4 / name\n                                       :op1 \"Redford\")))\n   :time (w2 / week\n             :mod (t / this)))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Martin\"))\n   :ARG1 (a / accompany-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Aggie\"))\n            :ARG1 p\n            :ARG4 (f / film\n                     :ARG1 (n3 / new-01)\n                     :accompanier (p3 / person\n                                      :name (n4 / name\n                                                :op1 \"Redford\")))\n            :time (w2 / week\n                      :mod (t / this))))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Martin\"))\n   :ARG1 (a / accompany-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Aggie\"))\n            :ARG1 p\n            :ARG4 (f / film\n                     :ARG1 (n3 / new-01)\n                     :accompanier (p3 / person\n                                      :name (n4 / name\n                                                :op1 \"Redford\")))\n            :time (w2 / week\n                      :mod (t / this))))"], "smus": ["Martin won two cinema tickets.", "Martin wrote a short review.", "Martin wrote a short review.", "Martin won 2 cinema tickets on facebook.", "This week with it.", "This week with it.", "With Aggie.", "This week, Aggie and Martin were with each other.", "This week, Aggie and Martin are in a new film with Redford.", "Martin wants Aggie to accompany him to the new film with Redford this week.", "Martin wants Aggie to accompany him to the new film with Redford this week."]}, {"instance_id": "samsum-208", "summary": "Harry waits outside. The movie has already started but Ema needs another 5 minutes, which made Harry angry.", "summary_trees": ["# ::snt Harry waits outside.\n(w / wait-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Harry\"))\n      :location (o / outside))", "# ::snt The movie has already started but Ema needs another 5 minutes, which made Harry angry.\n(h / have-concession-91\n      :ARG1 (s / start-01\n            :ARG1 (m / movie)\n            :time (a / already))\n      :ARG2 (n / need-01\n            :ARG0 (p / person\n                  :name (n2 / name\n                        :op1 \"Eema\"))\n            :ARG1 (t / temporal-quantity\n                  :quant 5\n                  :unit (m2 / minute)\n                  :mod (m3 / more))\n            :ARG0-of (m4 / make-02\n                  :ARG1 (a2 / anger-01\n                        :ARG1 (p2 / person\n                              :name (n3 / name\n                                    :op1 \"Harry\"))))))"], "tree": ["(w / wait-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Harry\")))", "(w / wait-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Harry\"))\n   :location (o / outside))", "(s / start-01\n   :ARG1 (m / movie)\n   :time (a / already))", "(s / start-01\n   :ARG1 (m / movie)\n   :time (a / already))", "(a2 / anger-01\n    :ARG1 (p2 / person\n              :name (n3 / name\n                        :op1 \"Harry\")))", "(a2 / anger-01\n    :ARG1 (p2 / person\n              :name (n3 / name\n                        :op1 \"Harry\")))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Eema\")))", "(h / have-concession-91\n   :ARG1 (s / start-01\n            :ARG1 (m / movie)\n            :time (a / already)))", "(m4 / make-02\n    :ARG1 (a2 / anger-01\n              :ARG1 (p2 / person\n                        :name (n3 / name\n                                  :op1 \"Harry\"))))", "(n / need-01\n   :ARG1 (t / temporal-quantity\n            :quant 5\n            :unit (m2 / minute)\n            :mod (m3 / more)))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Eema\"))\n   :ARG1 (t / temporal-quantity\n            :quant 5\n            :unit (m2 / minute)\n            :mod (m3 / more)))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Eema\"))\n   :ARG1 (t / temporal-quantity\n            :quant 5\n            :unit (m2 / minute)\n            :mod (m3 / more))\n   :ARG0 (m4 / make-02\n             :ARG1 (a2 / anger-01\n                       :ARG1 (p2 / person\n                                 :name (n3 / name\n                                           :op1 \"Harry\")))))", "(h / have-concession-91\n   :ARG1 (s / start-01\n            :ARG1 (m / movie)\n            :time (a / already))\n   :ARG2 (n / need-01\n            :ARG0 (p / person\n                     :name (n2 / name\n                               :op1 \"Eema\"))\n            :ARG1 (t / temporal-quantity\n                     :quant 5\n                     :unit (m2 / minute)\n                     :mod (m3 / more))\n            :ARG0 (m4 / make-02\n                      :ARG1 (a2 / anger-01\n                                :ARG1 (p2 / person\n                                          :name (n3 / name\n                                                    :op1 \"Harry\"))))))", "(h / have-concession-91\n   :ARG1 (s / start-01\n            :ARG1 (m / movie)\n            :time (a / already))\n   :ARG2 (n / need-01\n            :ARG0 (p / person\n                     :name (n2 / name\n                               :op1 \"Eema\"))\n            :ARG1 (t / temporal-quantity\n                     :quant 5\n                     :unit (m2 / minute)\n                     :mod (m3 / more))\n            :ARG0 (m4 / make-02\n                      :ARG1 (a2 / anger-01\n                                :ARG1 (p2 / person\n                                          :name (n3 / name\n                                                    :op1 \"Harry\"))))))"], "smus": ["Harry waits.", "Harry waits outside.", "The movie has already started.", "The movie has already started.", "Harry was angry.", "Harry was angry.", "Eema needs.", "The movie has already started though.", "Made Harry angry.", "Needs 5 minutes more.", "Eema needs 5 minutes more.", "Eema needs 5 more minutes to make Harry angry.", "The movie has already started, but Ema needs 5 more minutes because it made Harry angry.", "The movie has already started, but Ema needs 5 more minutes because it made Harry angry."]}, {"instance_id": "samsum-209", "summary": "Keira wonders why wildangel plays in the wrong order. Lois is considering deleting her account as she could not log on. Lois saw Keira's sister in town, who was supposed to be grounded. Keira might tell on her. ", "summary_trees": ["# ::snt Keira wonders why wildangel plays in the wrong order.\n(w / wonder-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Keira\"))\n      :ARG1 (t / thing\n            :ARG0-of (c / cause-01\n                  :ARG1 (p2 / play-01\n                        :ARG0 (p3 / person\n                              :name (n2 / name\n                                    :op1 \"wildangel\"))\n                        :manner (o / order\n                              :ARG1-of (w2 / wrong-03))))))", "# ::snt Lois is considering deleting her account as she could not log on.\n(c / consider-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Lois\"))\n      :ARG1 (d / delete-01\n            :ARG0 p\n            :ARG1 (a / account\n                  :poss p))\n      :ARG1-of (c2 / cause-01\n            :ARG0 (p2 / possible-01\n                  :polarity -\n                  :ARG1 (l / log-on-02\n                        :ARG0 p))))", "# ::snt Lois saw Keira's sister in town, who was supposed to be grounded.\n(s / see-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Lois\"))\n      :ARG1 (p2 / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (p3 / person\n                        :name (n2 / name\n                              :op1 \"Keira\"))\n                  :ARG2 (s2 / sister))\n            :ARG1-of (s3 / suppose-02\n                  :ARG2 (g / ground-01\n                        :ARG1 p2)))\n      :location (t / town))", "# ::snt Keira might tell on her.\n(p / possible-01\n      :ARG1 (t / tell-01\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Keira\"))\n            :ARG1 (s / she)))"], "tree": ["(p2 / play-01\n    :ARG0 (p3 / person\n              :name (n2 / name\n                        :op1 \"wildangel\"))\n    :manner (o / order\n               :ARG1 (w2 / wrong-03)))", "(c / cause-01\n   :ARG1 (p2 / play-01\n             :ARG0 (p3 / person\n                       :name (n2 / name\n                                 :op1 \"wildangel\"))\n             :manner (o / order\n                        :ARG1 (w2 / wrong-03))))", "(w / wonder-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Keira\"))\n   :ARG1 (t / thing\n            :ARG0 (c / cause-01\n                     :ARG1 (p2 / play-01\n                               :ARG0 (p3 / person\n                                         :name (n2 / name\n                                                   :op1 \"wildangel\"))\n                               :manner (o / order\n                                          :ARG1 (w2 / wrong-03))))))", "(p2 / possible-01\n    :polarity -\n    :ARG1 (l / log-on-02\n             :ARG0 (p / person :name (n / name :op1 \"Lois\"))))", "(c2 / cause-01\n    :ARG0 (p2 / possible-01\n              :polarity -\n              :ARG1 (l / log-on-02\n                       :ARG0 (p / person :name (n / name :op1 \"Lois\")))))", "(s3 / suppose-02\n    :ARG2 (g / ground-01\n             :ARG1 (p2 / person)))", "(h / have-rel-role-91\n   :ARG1 (p3 / person\n             :name (n2 / name\n                       :op1 \"Keira\"))\n   :ARG2 (s2 / sister))", "(s / see-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lois\"))\n   :ARG1 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 (p3 / person\n                                :name (n2 / name\n                                          :op1 \"Keira\"))\n                      :ARG2 (s2 / sister))\n             :ARG1 (s3 / suppose-02\n                       :ARG2 (g / ground-01\n                                :ARG1 p2)))\n   :location (t / town))", "(p / possible-01\n   :ARG1 (t / tell-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Keira\"))\n            :ARG1 (s / she)))", "(p / possible-01\n   :ARG1 (t / tell-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Keira\"))\n            :ARG1 (s / she)))"], "smus": ["Wildangel plays in order of wrong.", "So wildangel plays in the wrong order.", "Keira wonders why wildangel plays in the wrong order.", "Lois could not log on.", "Because Lois was not able to log on.", "People are supposed to be grounded.", "Keira's sister", "In town, Lois saw Keira's sister being supposedly ground.", "Maybe Keira can tell her.", "Maybe Keira can tell her."]}, {"instance_id": "samsum-210", "summary": "Timmy had a bad day at work. Timmy will bring some wine to Gemma's bbq at the weekend.", "summary_trees": ["# ::snt Timmy had a bad day at work.\n(b / bad-07\n      :ARG1 (d / day)\n      :ARG2 (p / person\n            :name (n / name\n                  :op1 \"Timmy\"))\n      :location (w / work-01))", "# ::snt Timmy will bring some wine to Gemma's bbq at the weekend.\n(b / bring-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Timmy\"))\n      :ARG1 (w / wine\n            :quant (s / some))\n      :ARG2 (b2 / barbecue-01\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Gemma\")))\n      :time (w2 / weekend))"], "tree": ["(b2 / barbecue-01\n    :ARG0 (p2 / person\n              :name (n2 / name\n                        :op1 \"Gemma\")))", "(b / bring-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Timmy\"))\n   :ARG1 (w / wine\n            :quant (s / some))\n   :ARG2 (b2 / barbecue-01\n             :ARG0 (p2 / person\n                       :name (n2 / name\n                                 :op1 \"Gemma\")))\n   :time (w2 / weekend))"], "smus": ["Gemma had a barbecue.", "Timmy will bring some wine to Gemma's barbecue over the weekend."]}, {"instance_id": "samsum-211", "summary": "Paul forgot about his physiotherapy and he will schedule a new appointment. Emma will be home after midnight, so Paul will prepare some food for her.", "summary_trees": ["# ::snt Paul forgot about his physiotherapy and he will schedule a new appointment.\n(a / and\n      :op1 (f / forget-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Paul\"))\n            :ARG1 (p2 / physiotherapy\n                  :poss p))\n      :op2 (s / schedule-01\n            :ARG0 p\n            :ARG1 (a2 / appointment-02\n                  :ARG0 p\n                  :ARG1-of (n2 / new-01))))", "# ::snt Emma will be home after midnight, so Paul will prepare some food for her.\n(c / cause-01\n      :ARG0 (b / be-located-at-91\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Emma\"))\n            :ARG2 (h / home)\n            :time (a / after\n                  :op1 (m / midnight)))\n      :ARG1 (p2 / prepare-01\n            :ARG0 (p3 / person\n                  :name (n2 / name\n                        :op1 \"Paul\"))\n            :ARG1 (f / food\n                  :quant (s / some))\n            :ARG3 p))"], "tree": ["(s / schedule-01\n   :ARG0 (p / person :name (n / name :op1 \"Paul\"))\n   :ARG1 (a2 / appointment-02\n             :ARG0 p\n             :ARG1 (n2 / new-01)))", "(f / forget-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Paul\"))\n   :ARG1 (p2 / physiotherapy\n             :poss p))", "(p2 / prepare-01\n    :ARG1 (f / food\n             :quant (s / some)))", "(b / be-located-at-91\n   :time (a / after\n            :op1 (m / midnight)))", "(p2 / prepare-01\n    :ARG0 (p3 / person\n              :name (n2 / name\n                        :op1 \"Paul\"))\n    :ARG1 (f / food\n             :quant (s / some)))", "(p2 / prepare-01\n    :ARG0 (p3 / person\n              :name (n2 / name\n                        :op1 \"Paul\"))\n    :ARG1 (f / food\n             :quant (s / some))\n    :ARG3 (p / person :name (n / name :op1 \"Emma\")))", "(c / cause-01\n   :ARG0 (b / be-located-at-91\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Emma\"))\n            :ARG2 (h / home)\n            :time (a / after\n                     :op1 (m / midnight)))\n   :ARG1 (p2 / prepare-01\n             :ARG0 (p3 / person\n                       :name (n2 / name\n                                 :op1 \"Paul\"))\n             :ARG1 (f / food\n                      :quant (s / some))\n             :ARG3 p))"], "smus": ["Paul will schedule a new appointment.", "Paul forgot about his physiotherapy.", "Prepare some food.", "After midnight.", "Paul will prepare some food.", "Paul will prepare some food for Emma.", "Emma was home after midnight so Paul was going to prepare her some food."]}, {"instance_id": "samsum-212", "summary": "According to Jacky, David did the right thing taking the blame. They will talk when Jack comes back home.", "summary_trees": ["# ::snt According to Jacky, David did the right thing taking the blame.\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jacky\"))\n      :ARG1 (d / do-02\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"David\"))\n            :ARG1 (t / thing\n                  :ARG1-of (r / right-02))\n            :manner (b / blame-01\n                  :ARG1 p2)))", "# ::snt They will talk when Jack comes back home.\n(t / talk-01\n      :ARG0 (t2 / they)\n      :time (c / come-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Jack\"))\n            :ARG4 (h / home)\n            :direction (b / back)))"], "tree": ["(d / do-02\n   :ARG1 (t / thing\n            :ARG1 (r / right-02)))", "(d / do-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"David\"))\n   :ARG1 (t / thing\n            :ARG1 (r / right-02)))", "(d / do-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"David\"))\n   :ARG1 (t / thing\n            :ARG1 (r / right-02))\n   :manner (b / blame-01\n              :ARG1 p2))", "(d / do-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"David\"))\n   :ARG1 (t / thing\n            :ARG1 (r / right-02))\n   :manner (b / blame-01\n              :ARG1 p2))", "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jacky\"))\n   :ARG1 (d / do-02\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"David\"))\n            :ARG1 (t / thing\n                     :ARG1 (r / right-02))\n            :manner (b / blame-01\n                       :ARG1 p2)))", "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jacky\"))\n   :ARG1 (d / do-02\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"David\"))\n            :ARG1 (t / thing\n                     :ARG1 (r / right-02))\n            :manner (b / blame-01\n                       :ARG1 p2)))", "(t / talk-01\n   :time (c / come-01\n            :direction (b / back)))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Jack\")))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Jack\"))\n   :ARG4 (h / home))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Jack\"))\n   :ARG4 (h / home)\n   :direction (b / back))", "(t / talk-01\n   :ARG0 (t2 / they)\n   :time (c / come-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Jack\"))\n            :ARG4 (h / home)\n            :direction (b / back)))"], "smus": ["did the right thing.", "David did the right thing.", "David did the right thing by blaming himself.", "David did the right thing by blaming himself.", "\"David did the right thing by blaming himself,\" Jacky said.", "\"David did the right thing by blaming himself,\" Jacky said.", "Talk when it comes back.", "Comes Jack.", "Jack comes home.", "Jack comes back home.", "They'll talk when Jack comes back home."]}, {"instance_id": "samsum-213", "summary": "Jason wants to meet Dory over the weekend. Dory's friend is going to stay with her for a week. Jason has been working on a movie with Lucy for the past two months. Jason bought a video-creator app.", "summary_trees": ["# ::snt Jason wants to meet Dory over the weekend.\n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jason\"))\n      :ARG1 (m / meet-03\n            :ARG0 p\n            :ARG1 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Dory\"))\n            :time (w2 / weekend)))", "# ::snt Dory's friend is going to stay with her for a week.\n(s / stay-01\n      :ARG1 (p / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (p2 / person\n                        :name (n / name\n                              :op1 \"Dory\"))\n                  :ARG2 (f / friend)))\n      :accompanier p2\n      :duration (t / temporal-quantity\n            :quant 1\n            :unit (w / week)))", "# ::snt Jason has been working on a movie with Lucy for the past two months.\n(w / work-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jason\"))\n      :ARG1 (m / movie)\n      :accompanier (p2 / person\n            :name (n2 / name\n                  :op1 \"Lucy\"))\n      :time (b / before\n            :op1 (n3 / now)\n            :duration (t / temporal-quantity\n                  :quant 2\n                  :unit (m2 / month))))", "# ::snt Jason bought a video-creator app.\n(b / buy-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jason\"))\n      :ARG1 (a / app\n            :purpose (c / create-01\n                  :ARG1 (v / video))))"], "tree": ["(m / meet-03\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Dory\")))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jason\"))\n   :ARG1 (m / meet-03\n            :ARG0 p\n            :ARG1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Dory\"))\n            :time (w2 / weekend)))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jason\"))\n   :ARG1 (m / meet-03\n            :ARG0 p\n            :ARG1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Dory\"))\n            :time (w2 / weekend)))", "(s / stay-01\n   :duration (t / temporal-quantity\n                :quant 1\n                :unit (w / week)))", "(s / stay-01\n   :ARG1 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :name (n / name\n                                        :op1 \"Dory\"))\n                     :ARG2 (f / friend)))\n   :duration (t / temporal-quantity\n                :quant 1\n                :unit (w / week)))", "(w / work-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jason\")))", "(w / work-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jason\"))\n   :ARG1 (m / movie))", "(w / work-01\n   :accompanier (p2 / person\n                    :name (n2 / name\n                              :op1 \"Lucy\"))\n   :time (b / before\n            :op1 (n3 / now)\n            :duration (t / temporal-quantity\n                         :quant 2\n                         :unit (m2 / month))))", "(w / work-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jason\"))\n   :ARG1 (m / movie)\n   :accompanier (p2 / person\n                    :name (n2 / name\n                              :op1 \"Lucy\"))\n   :time (b / before\n            :op1 (n3 / now)\n            :duration (t / temporal-quantity\n                         :quant 2\n                         :unit (m2 / month))))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jason\")))", "(b / buy-01\n   :ARG1 (a / app\n            :purpose (c / create-01\n                        :ARG1 (v / video))))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jason\"))\n   :ARG1 (a / app\n            :purpose (c / create-01\n                        :ARG1 (v / video))))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jason\"))\n   :ARG1 (a / app\n            :purpose (c / create-01\n                        :ARG1 (v / video))))"], "smus": ["Meet Dory.", "Jason wants to meet Dory over the weekend.", "Jason wants to meet Dory over the weekend.", "Stay a week.", "Dory's friend will stay for a week.", "Jason is working.", "Jason is working on the movie.", "Working with Lucy for the past two months.", "Jason has been working on the movie with Lucy for the past two months.", "Jason bought.", "bought a video creation app.", "Jason bought a video creation app.", "Jason bought a video creation app."]}, {"instance_id": "samsum-214", "summary": "Gaia has 6 exams this semestre. One is very difficult.", "summary_trees": ["# ::snt Gaia has 6 exams this semestre.\n(h / have-06\n      :ARG0 (u / university\n            :name (n / name\n                  :op1 \"Gaia\"))\n      :ARG1 (e / exam\n            :quant 6)\n      :time (s / semester\n            :mod (t / this)))", "# ::snt One is very difficult.\n(d / difficult\n      :domain (o / one)\n      :degree (v / very))"], "tree": ["(h / have-06\n   :ARG0 (u / university\n            :name (n / name\n                     :op1 \"Gaia\"))\n   :ARG1 (e / exam\n            :quant 6)\n   :time (s / semester\n            :mod (t / this)))", "(d / difficult\n   :domain (o / one)\n   :degree (v / very))"], "smus": ["Gaia has 6 exams this semester.", "One is very difficult."]}, {"instance_id": "samsum-215", "summary": "Emma will be home soon and she will let Will know.", "summary_trees": ["# ::snt Emma will be home soon and she will let Will know.\n(a / and\n      :op1 (b / be-located-at-91\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Emma\"))\n            :ARG2 (h / home)\n            :time (s / soon))\n      :op2 (l / let-know-07\n            :ARG0 p\n            :ARG1 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Will\"))))"], "tree": ["(l / let-know-07\n   :ARG0 (p / person :name (n / name :op1 \"Emma\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Will\")))", "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Emma\"))\n   :ARG2 (h / home)\n   :time (s / soon))"], "smus": ["Emma let Will know.", "Emma will be home soon."]}, {"instance_id": "samsum-216", "summary": "Jaz will come to dye Sharon's roots on Sunday at 2.30.", "summary_trees": ["# ::snt Jaz will come to dye Sharon's roots on Sunday at 2.30.\n(c / come-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Jaz\"))\n      :purpose (d / dye-01\n            :ARG0 p\n            :ARG1 (r / root\n                  :poss (p2 / person\n                        :name (n2 / name\n                              :op1 \"Sharon\"))))\n      :time (d2 / date-entity\n            :time \"14:30\"\n            :weekday (s / sunday)))"], "tree": ["(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Jaz\")))", "(d / dye-01\n   :ARG1 (r / root\n            :poss (p2 / person\n                      :name (n2 / name\n                                :op1 \"Sharon\"))))", "(c / come-01\n   :purpose (d / dye-01)\n   :time (d2 / date-entity\n             :time \"14:30\"\n             :weekday (s / sunday)))", "(d / dye-01\n   :ARG0 (p / person :name (n / name :op1 \"Jaz\"))\n   :ARG1 (r / root\n            :poss (p2 / person\n                      :name (n2 / name\n                                :op1 \"Sharon\"))))", "(d / dye-01\n   :ARG0 (p / person :name (n / name :op1 \"Jaz\"))\n   :ARG1 (r / root\n            :poss (p2 / person\n                      :name (n2 / name\n                                :op1 \"Sharon\"))))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Jaz\"))\n   :time (d2 / date-entity\n             :time \"14:30\"\n             :weekday (s / sunday)))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Jaz\"))\n   :purpose (d / dye-01\n               :ARG0 p\n               :ARG1 (r / root\n                        :poss (p2 / person\n                                  :name (n2 / name\n                                            :op1 \"Sharon\"))))\n   :time (d2 / date-entity\n             :time \"14:30\"\n             :weekday (s / sunday)))"], "smus": ["Come on Jaz.", "dye Sharon's roots.", "Come dye at 2:30pm Sunday.", "Jaz will dye Sharon's roots.", "Jaz will dye Sharon's roots.", "Jaz will come Sunday at 2:30pm.", "Sunday at 2:30 p.m., Jaz will come dye Sharon's roots."]}, {"instance_id": "samsum-217", "summary": "Jim will check out Max's latest music project when he gets home.", "summary_trees": ["# ::snt Jim will check out Max's latest music project when he gets home.\n(c / check-out-05\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jim\"))\n      :ARG1 (p2 / project\n            :mod (m / music)\n            :mod (l / last)\n            :poss (p3 / person\n                  :name (n2 / name\n                        :op1 \"Max\")))\n      :time (g / get-05\n            :ARG1 p\n            :ARG2 (h / home)))"], "tree": ["(g / get-05\n   :ARG1 (p / person :name (n / name :op1 \"Jim\"))\n   :ARG2 (h / home))", "(g / get-05\n   :ARG1 (p / person :name (n / name :op1 \"Jim\"))\n   :ARG2 (h / home))", "(c / check-out-05\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jim\"))\n   :ARG1 (p2 / project\n             :mod (m / music)\n             :mod (l / last)\n             :poss (p3 / person\n                       :name (n2 / name\n                                 :op1 \"Max\"))))", "(c / check-out-05\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jim\"))\n   :ARG1 (p2 / project\n             :mod (m / music)\n             :mod (l / last)\n             :poss (p3 / person\n                       :name (n2 / name\n                                 :op1 \"Max\")))\n   :time (g / get-05\n            :ARG1 p\n            :ARG2 (h / home)))"], "smus": ["Jim gets home.", "Jim gets home.", "Jim, check out Max's latest music project.", "Jim will check out Max's latest music project when he gets home."]}, {"instance_id": "samsum-218", "summary": "Kelvin and the other class members will discuss the time for their CAT 2 and share their decision with Naheeda soon.", "summary_trees": ["# ::snt Kelvin and the other class members will discuss the time for their CAT 2 and share their decision with Naheeda soon.\n(a / and\n      :op1 (d / discuss-01\n            :ARG0 (a2 / and\n                  :op1 (p / person\n                        :name (n / name\n                              :op1 \"Kelvin\"))\n                  :op2 (p2 / person\n                        :mod (o / other)\n                        :ARG0-of (h / have-org-role-91\n                              :ARG1 (c / class)\n                              :ARG2 (m / member))))\n            :ARG1 (t / time\n                  :time-of (p3 / product\n                        :name (n2 / name\n                              :op1 \"CAT\"\n                              :op2 2)\n                        :poss a2)))\n      :op2 (s / share-01\n            :ARG0 a2\n            :ARG1 (t2 / thing\n                  :ARG1-of (d2 / decide-01\n                        :ARG0 a2))\n            :ARG2 (p4 / person\n                  :name (n3 / name\n                        :op1 \"Naheeda\"))\n            :time (s2 / soon)))"], "tree": ["(h / have-org-role-91\n   :ARG1 (c / class)\n   :ARG2 (m / member))", "(d / discuss-01\n   :ARG1 (t / time\n            :time (p3 / product\n                      :name (n2 / name\n                                :op1 \"CAT\"\n                                :op2 2)\n                      :poss (a2 / and))))", "(s / share-01\n   :ARG0 (a2 / and)\n   :ARG1 (t2 / thing\n             :ARG1 (d2 / decide-01\n                       :ARG0 a2))\n   :ARG2 (p4 / person\n             :name (n3 / name\n                       :op1 \"Naheeda\"))\n   :time (s2 / soon))", "(d / discuss-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kelvin\"))\n   :ARG1 (t / time\n            :time (p3 / product\n                      :name (n2 / name\n                                :op1 \"CAT\"\n                                :op2 2)\n                      :poss p)))", "(d / discuss-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kelvin\"))\n   :ARG1 (t / time\n            :time (p3 / product\n                      :name (n2 / name\n                                :op1 \"CAT\"\n                                :op2 2)\n                      :poss p)))", "(d / discuss-01\n   :ARG0 (p2 / person\n             :mod (o / other)\n             :ARG0 (h / have-org-role-91\n                      :ARG1 (c / class)\n                      :ARG2 (m / member)))\n   :ARG1 (t / time\n            :time (p3 / product\n                      :name (n2 / name\n                                :op1 \"CAT\"\n                                :op2 2)\n                      :poss p2))\n   :ARG1 t)", "(d / discuss-01\n   :ARG0 (p2 / person\n             :mod (o / other)\n             :ARG0 (h / have-org-role-91\n                      :ARG1 (c / class)\n                      :ARG2 (m / member)))\n   :ARG1 (t / time\n            :time (p3 / product\n                      :name (n2 / name\n                                :op1 \"CAT\"\n                                :op2 2)\n                      :poss p2))\n   :ARG1 t)"], "smus": ["Class members.", "Discuss time with CAT 2 of theirs.", "Soon, they will share their decision with Naheeda.", "Kevin will discuss his time on CAT 2.", "Kevin will discuss his time on CAT 2.", "Other class members will discuss their time on CAT 2.", "Other class members will discuss their time on CAT 2."]}, {"instance_id": "samsum-219", "summary": "Eric and Rob are going to watch a stand-up on youtube.", "summary_trees": ["# ::snt Eric and Rob are going to watch a stand-up on youtube.\n(w / watch-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Eric\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Rob\")))\n      :ARG1 (s / stand-up-07\n            :medium (p3 / publication\n                  :name (n3 / name\n                        :op1 \"YouTube\"))))"], "tree": ["(s / stand-up-07\n   :medium (p3 / publication\n               :name (n3 / name\n                         :op1 \"YouTube\")))", "(s / stand-up-07\n   :medium (p3 / publication\n               :name (n3 / name\n                         :op1 \"YouTube\")))", "(w / watch-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Eric\")))", "(w / watch-01\n   :ARG1 (s / stand-up-07\n            :medium (p3 / publication\n                        :name (n3 / name\n                                  :op1 \"YouTube\"))))", "(w / watch-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Eric\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Rob\"))))", "(w / watch-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Rob\"))\n   :ARG1 (s / stand-up-07\n            :medium (p3 / publication\n                        :name (n3 / name\n                                  :op1 \"YouTube\")))\n   :ARG1 s)", "(w / watch-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Rob\"))\n   :ARG1 (s / stand-up-07\n            :medium (p3 / publication\n                        :name (n3 / name\n                                  :op1 \"YouTube\")))\n   :ARG1 s)", "(w / watch-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Eric\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Rob\")))\n   :ARG1 (s / stand-up-07\n            :medium (p3 / publication\n                        :name (n3 / name\n                                  :op1 \"YouTube\"))))", "(w / watch-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Eric\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Rob\")))\n   :ARG1 (s / stand-up-07\n            :medium (p3 / publication\n                        :name (n3 / name\n                                  :op1 \"YouTube\"))))"], "smus": ["Stand up on youtube.", "Stand up on youtube.", "Eric will watch.", "Watch the stand up on youtube.", "Eric and Rob will watch.", "Rob will watch a stand up on youtube.", "Rob will watch a stand up on youtube.", "Eric and Rob will watch a stand up on youtube.", "Eric and Rob will watch a stand up on youtube."]}, {"instance_id": "samsum-220", "summary": "Ahmed wants Sharon to move in with him but she's afraid of her parents' reaction. Ahmed is angry.", "summary_trees": ["# ::snt Ahmed wants Sharon to move in with him but she's afraid of her parents' reaction.\n(c / contrast-01\n      :ARG1 (w / want-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Ahmed\"))\n            :ARG1 (m / move-01\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Sharon\"))\n                  :ARG2 (ii / inside)\n                  :accompanier p))\n      :ARG2 (f / fear-01\n            :ARG0 p2\n            :ARG1 (r / react-01\n                  :ARG0 (p3 / person\n                        :ARG0-of (h / have-rel-role-91\n                              :ARG1 p2\n                              :ARG2 (p4 / parent))))))", "# ::snt Ahmed is angry.\n(a / anger-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Ahmed\")))"], "tree": ["(h / have-rel-role-91\n   :ARG1 (p2 / person :name (n2 / name :op1 \"Sharon\"))\n   :ARG2 (p4 / parent))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ahmed\"))\n   :ARG1 (m / move-01\n            :ARG1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Sharon\"))\n            :ARG2 (ii / inside)\n            :accompanier p))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ahmed\"))\n   :ARG1 (m / move-01\n            :ARG1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Sharon\"))\n            :ARG2 (ii / inside)\n            :accompanier p))", "(a / anger-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Ahmed\")))", "(a / anger-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Ahmed\")))"], "smus": ["Sharon's parents", "Ahmed wants Sharon to move in with him.", "Ahmed wants Sharon to move in with him.", "Ahmed was angry.", "Ahmed was angry."]}, {"instance_id": "samsum-221", "summary": "Anna can't talk to Peter right now, she will call him in 20 minutes. ", "summary_trees": ["# ::snt Anna can't talk to Peter right now, she will call him in 20 minutes.\n(c / cause-01\n      :ARG0 (p / possible-01\n            :polarity -\n            :ARG1 (t / talk-01\n                  :ARG0 (p2 / person\n                        :name (n / name\n                              :op1 \"Anna\"))\n                  :ARG2 (p3 / person\n                        :name (n2 / name\n                              :op1 \"Peter\"))\n                  :time (n3 / now\n                        :mod (r / right))))\n      :ARG1 (c2 / call-02\n            :ARG0 p2\n            :ARG1 p3\n            :time (a / after\n                  :op1 (n4 / now)\n                  :quant (t2 / temporal-quantity\n                        :quant 20\n                        :unit (m / minute)))))"], "tree": ["(t / talk-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Anna\")))", "(c2 / call-02\n    :time (a / after\n             :op1 (n4 / now)\n             :quant (t2 / temporal-quantity\n                        :quant 20\n                        :unit (m / minute))))", "(c2 / call-02\n    :time (a / after\n             :op1 (n4 / now)\n             :quant (t2 / temporal-quantity\n                        :quant 20\n                        :unit (m / minute))))", "(t / talk-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Anna\"))\n   :ARG2 (p3 / person\n             :name (n2 / name\n                       :op1 \"Peter\")))", "(c2 / call-02\n    :ARG0 (p2 / person :name (n / name :op1 \"Anna\"))\n    :ARG1 (p3 / person :name (n2 / name :op1 \"Peter\"))\n    :time (a / after\n             :op1 (n4 / now)\n             :quant (t2 / temporal-quantity\n                        :quant 20\n                        :unit (m / minute))))", "(c2 / call-02\n    :ARG0 (p2 / person :name (n / name :op1 \"Anna\"))\n    :ARG1 (p3 / person :name (n2 / name :op1 \"Peter\"))\n    :time (a / after\n             :op1 (n4 / now)\n             :quant (t2 / temporal-quantity\n                        :quant 20\n                        :unit (m / minute))))", "(p / possible-01\n   :polarity -\n   :ARG1 (t / talk-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Anna\"))\n            :ARG2 (p3 / person\n                      :name (n2 / name\n                                :op1 \"Peter\"))\n            :time (n3 / now\n                      :mod (r / right))))", "(c / cause-01\n   :ARG0 (p / possible-01\n            :polarity -\n            :ARG1 (t / talk-01\n                     :ARG0 (p2 / person\n                               :name (n / name\n                                        :op1 \"Anna\"))\n                     :ARG2 (p3 / person\n                               :name (n2 / name\n                                         :op1 \"Peter\"))\n                     :time (n3 / now\n                               :mod (r / right))))\n   :ARG1 (c2 / call-02\n             :ARG0 p2\n             :ARG1 p3\n             :time (a / after\n                      :op1 (n4 / now)\n                      :quant (t2 / temporal-quantity\n                                 :quant 20\n                                 :unit (m / minute)))))"], "smus": ["Anna will talk.", "Call in 20 minutes.", "Call in 20 minutes.", "Anna will talk to Peter.", "Anna will call Peter in 20 minutes.", "Anna will call Peter in 20 minutes.", "Anna can't talk to Peter right now.", "Anna can't talk to Peter right now, so call him in 20 minutes."]}, {"instance_id": "samsum-222", "summary": "Doug has a cool pair of shoes.", "summary_trees": ["# ::snt Doug has a cool pair of shoes.\n(h / have-03\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Doug\"))\n      :ARG1 (s / shoe\n            :ARG1-of (c / cool-04)\n            :quant (p2 / pair\n                  :quant 1)))"], "tree": ["(h / have-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Doug\"))\n   :ARG1 (s / shoe\n            :ARG1 (c / cool-04)\n            :quant (p2 / pair\n                       :quant 1)))", "(h / have-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Doug\"))\n   :ARG1 (s / shoe\n            :ARG1 (c / cool-04)\n            :quant (p2 / pair\n                       :quant 1)))"], "smus": ["Doug has a pair of cool shoes.", "Doug has a pair of cool shoes."]}, {"instance_id": "samsum-223", "summary": "Harris' friend, Aoki, who lives in Michigan, died yesterday. Harris hasn't seen her for a few months.", "summary_trees": ["# ::snt Harris' friend, Aoki, who lives in Michigan, died yesterday.\n(d / die-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Aoki\")\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Harris\"))\n                  :ARG2 (f / friend))\n            :ARG0-of (l / live-01\n                  :location (s / state\n                        :name (n3 / name\n                              :op1 \"Michigan\"))))\n      :time (y / yesterday))", "# ::snt Harris hasn't seen her for a few months.\n(s / see-01\n      :polarity -\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Harris\"))\n      :ARG1 (s2 / she)\n      :duration (f / few\n            :op1 (t / temporal-quantity\n                  :quant 1\n                  :unit (m / month))))"], "tree": ["(l / live-01\n   :location (s / state\n                :name (n3 / name\n                          :op1 \"Michigan\")))", "(l / live-01\n   :location (s / state\n                :name (n3 / name\n                          :op1 \"Michigan\")))", "(h / have-rel-role-91\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Harris\"))\n   :ARG2 (f / friend))", "(d / die-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Aoki\")\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Harris\"))\n                     :ARG2 (f / friend))\n            :ARG0 (l / live-01\n                     :location (s / state\n                                  :name (n3 / name\n                                            :op1 \"Michigan\")))))", "(d / die-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Aoki\")\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Harris\"))\n                     :ARG2 (f / friend))\n            :ARG0 (l / live-01\n                     :location (s / state\n                                  :name (n3 / name\n                                            :op1 \"Michigan\"))))\n   :time (y / yesterday))", "(d / die-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Aoki\")\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Harris\"))\n                     :ARG2 (f / friend))\n            :ARG0 (l / live-01\n                     :location (s / state\n                                  :name (n3 / name\n                                            :op1 \"Michigan\"))))\n   :time (y / yesterday))", "(s / see-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Harris\"))\n   :ARG1 (s2 / she))", "(s / see-01\n   :polarity -\n   :duration (f / few\n                :op1 (t / temporal-quantity\n                        :quant 1\n                        :unit (m / month))))", "(s / see-01\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Harris\"))\n   :ARG1 (s2 / she)\n   :duration (f / few\n                :op1 (t / temporal-quantity\n                        :quant 1\n                        :unit (m / month))))"], "smus": ["Lives in Michigan.", "Lives in Michigan.", "Harris is a friend.", "Harris friend Aoki died when she lives in Michigan.", "Aoki Harris' friend who lives in Michigan died yesterday.", "Aoki Harris' friend who lives in Michigan died yesterday.", "Harris has seen her.", "Not seen in a few months.", "Harris hasn't seen her in a few months."]}, {"instance_id": "samsum-224", "summary": "Malik and Samanta want to lose weight. They will try to keep a diet, keto or paleo, and go for runs together.", "summary_trees": ["# ::snt Malik and Samanta want to lose weight.\n(w / want-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Malik\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Samanta\")))\n      :ARG1 (l / lose-01\n            :ARG0 a\n            :ARG1 (w2 / weight)))", "# ::snt They will try to keep a diet, keto or paleo, and go for runs together.\n(a / and\n      :op1 (t / try-01\n            :ARG0 (t2 / they)\n            :ARG1 (k / keep-01\n                  :ARG0 t2\n                  :ARG1 (o / or\n                        :op1 (d / diet)\n                        :op2 (k2 / keto)\n                        :op3 (p / paleo))))\n      :op2 (r / run-02\n            :ARG0 t2\n            :manner (t3 / together)))"], "tree": ["(l / lose-01\n   :ARG0 (a / and)\n   :ARG1 (w2 / weight))", "(l / lose-01\n   :ARG0 (a / and)\n   :ARG1 (w2 / weight))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Malik\"))\n   :ARG1 (l / lose-01\n            :ARG0 p\n            :ARG1 (w2 / weight)))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Malik\"))\n   :ARG1 (l / lose-01\n            :ARG0 p\n            :ARG1 (w2 / weight)))", "(w / want-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Samanta\"))\n   :ARG1 (l / lose-01\n            :ARG0 p2\n            :ARG1 (w2 / weight))\n   :ARG1 l)", "(w / want-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Samanta\"))\n   :ARG1 (l / lose-01\n            :ARG0 p2\n            :ARG1 (w2 / weight))\n   :ARG1 l)", "(w / want-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Malik\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Samanta\")))\n   :ARG1 (l / lose-01\n            :ARG0 a\n            :ARG1 (w2 / weight)))", "(w / want-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Malik\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Samanta\")))\n   :ARG1 (l / lose-01\n            :ARG0 a\n            :ARG1 (w2 / weight)))", "(r / run-02\n   :ARG0 (t2 / they)\n   :manner (t3 / together))", "(k / keep-01\n   :ARG0 (t2 / they)\n   :ARG1 (o / or\n            :op1 (d / diet)\n            :op2 (k2 / keto)\n            :op3 (p / paleo)))", "(k / keep-01\n   :ARG0 (t2 / they)\n   :ARG1 (o / or\n            :op1 (d / diet)\n            :op2 (k2 / keto)\n            :op3 (p / paleo)))", "(t / try-01\n   :ARG0 (t2 / they)\n   :ARG1 (k / keep-01\n            :ARG0 t2\n            :ARG1 (o / or\n                     :op1 (d / diet)\n                     :op2 (k2 / keto)\n                     :op3 (p / paleo))))", "(t / try-01\n   :ARG0 (t2 / they)\n   :ARG1 (k / keep-01\n            :ARG0 t2\n            :ARG1 (o / or\n                     :op1 (d / diet)\n                     :op2 (k2 / keto)\n                     :op3 (p / paleo))))"], "smus": ["and lose weight.", "and lose weight.", "Malik wants to lose weight.", "Malik wants to lose weight.", "Samanta wants to lose weight.", "Samanta wants to lose weight.", "Malik and Samanta want to lose weight.", "Malik and Samanta want to lose weight.", "They run together.", "They will keep on a diet, keto, or paleo.", "They will keep on a diet, keto, or paleo.", "They'll try to keep on a diet, keto, or paleo.", "They'll try to keep on a diet, keto, or paleo."]}, {"instance_id": "samsum-225", "summary": "Marika is coming today.", "summary_trees": ["# ::snt Marika is coming today.\n(c / come-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Marika\"))\n      :time (t / today))"], "tree": ["(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Marika\")))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Marika\"))\n   :time (t / today))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Marika\"))\n   :time (t / today))"], "smus": ["Coming Marika.", "Today, Marika is coming.", "Today, Marika is coming."]}, {"instance_id": "samsum-226", "summary": "Murphy is going to Poana\u0144 on Tuesday and coming back on the same day in the afternoon.", "summary_trees": ["# ::snt Murphy is going to Poana\u0144 on Tuesday and coming back on the same day in the afternoon.\n(a / and\n      :op1 (g / go-02\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Murphy\"))\n            :ARG4 (c / city\n                  :name (n2 / name\n                        :op1 \"Poana\u0144\"))\n            :time (d / date-entity\n                  :weekday (t / tuesday)))\n      :op2 (c2 / come-01\n            :ARG1 p\n            :direction (b / back)\n            :time (d2 / date-entity\n                  :dayperiod (a2 / afternoon)\n                  :ARG1-of (s / same-01))))"], "tree": ["(g / go-02\n   :time (d / date-entity\n            :weekday (t / tuesday)))", "(c2 / come-01\n    :time (d2 / date-entity\n              :dayperiod (a2 / afternoon)))", "(g / go-02\n   :time (d / date-entity\n            :weekday (t / tuesday)))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Murphy\")))", "(c2 / come-01\n    :direction (b / back)\n    :time (d2 / date-entity\n              :dayperiod (a2 / afternoon)))", "(c2 / come-01\n    :ARG1 (p / person :name (n / name :op1 \"Murphy\"))\n    :time (d2 / date-entity\n              :dayperiod (a2 / afternoon)\n              :ARG1 (s / same-01)))", "(c2 / come-01\n    :ARG1 (p / person :name (n / name :op1 \"Murphy\"))\n    :direction (b / back)\n    :time (d2 / date-entity\n              :dayperiod (a2 / afternoon)\n              :ARG1 (s / same-01)))"], "smus": ["Tuesday is going to be Tuesday.", "Coming in the afternoon.", "Tuesday is going to be Tuesday.", "Murphy is going.", "Coming back in the afternoon.", "Murphy was coming the same afternoon.", "Murphy was coming back the same afternoon."]}, {"instance_id": "samsum-227", "summary": "Gab wants to meet Kat in real life. Kat doesn't like Gab's insisting so she won't to talk to him at all.", "summary_trees": ["# ::snt Gab wants to meet Kat in real life.\n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Gab\"))\n      :ARG1 (m / meet-03\n            :ARG0 p\n            :ARG1 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Kat\"))\n            :location (l / live-01\n                  :ARG1-of (r / real-04))))", "# ::snt Kat doesn't like Gab's insisting so she won't to talk to him at all.\n(c / cause-01\n      :ARG0 (ii / insist-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Gab\"))\n            :ARG1-of (d / dislike-01\n                  :ARG0 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Kat\"))))\n      :ARG1 (t / talk-01\n            :polarity -\n            :ARG0 p2\n            :ARG2 p\n            :degree (a / at-all)))"], "tree": ["(m / meet-03\n   :location (l / live-01\n                :ARG1 (r / real-04)))", "(m / meet-03\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Kat\")))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Gab\"))\n   :ARG1 (m / meet-03\n            :ARG0 p\n            :ARG1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Kat\"))\n            :location (l / live-01\n                         :ARG1 (r / real-04))))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Gab\"))\n   :ARG1 (m / meet-03\n            :ARG0 p\n            :ARG1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Kat\"))\n            :location (l / live-01\n                         :ARG1 (r / real-04))))", "(t / talk-01\n   :polarity -\n   :degree (a / at-all))", "(t / talk-01\n   :polarity -\n   :ARG0 (p2 / person :name (n2 / name :op1 \"Kat\"))\n   :ARG2 (p / person :name (n / name :op1 \"Gab\"))\n   :degree (a / at-all))", "(d / dislike-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Kat\")))", "(c / cause-01\n   :ARG0 (ii / insist-01\n             :ARG0 (p / person\n                      :name (n / name\n                               :op1 \"Gab\"))\n             :ARG1 (d / dislike-01\n                      :ARG0 (p2 / person\n                                :name (n2 / name\n                                          :op1 \"Kat\"))))\n   :ARG1 (t / talk-01\n            :polarity -\n            :ARG0 p2\n            :ARG2 p\n            :degree (a / at-all)))"], "smus": ["Meet in real life.", "Meet Kat.", "Gab wants to meet Kat in real life.", "Gab wants to meet Kat in real life.", "Don't talk at all.", "Kat didn't talk to Gab at all.", "Kat doesn't like.", "Gab's insistence that Kat doesn't like him caused him to not talk to Kat at all."]}, {"instance_id": "samsum-228", "summary": "John forgot his wallet. He wants Ela to give it to him outside in 10 minutes.", "summary_trees": ["# ::snt John forgot his wallet.\n(f / forget-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"John\"))\n      :ARG1 (w / wallet\n            :poss p))", "# ::snt He wants Ela to give it to him outside in 10 minutes.\n(w / want-01\n      :ARG0 (h / he)\n      :ARG1 (g / give-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Ela\"))\n            :ARG1 (ii / it)\n            :ARG2 h\n            :location (o / outside)\n            :time (a / after\n                  :op1 (n2 / now)\n                  :quant (t / temporal-quantity\n                        :quant 10\n                        :unit (m / minute)))))"], "tree": ["(f / forget-01\n   :ARG1 (w / wallet\n            :poss (p / person :name (n / name :op1 \"John\"))))", "(f / forget-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\")))", "(f / forget-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\"))\n   :ARG1 (w / wallet\n            :poss p))", "(f / forget-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\"))\n   :ARG1 (w / wallet\n            :poss p))", "(g / give-01\n   :ARG1 (ii / it)\n   :ARG2 (h / he))", "(g / give-01\n   :location (o / outside)\n   :time (a / after\n            :op1 (n2 / now)\n            :quant (t / temporal-quantity\n                      :quant 10\n                      :unit (m / minute))))", "(w / want-01\n   :ARG0 (h / he)\n   :ARG1 (g / give-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Ela\"))\n            :ARG1 (ii / it)\n            :ARG2 h\n            :location (o / outside)\n            :time (a / after\n                     :op1 (n2 / now)\n                     :quant (t / temporal-quantity\n                               :quant 10\n                               :unit (m / minute)))))", "(w / want-01\n   :ARG0 (h / he)\n   :ARG1 (g / give-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Ela\"))\n            :ARG1 (ii / it)\n            :ARG2 h\n            :location (o / outside)\n            :time (a / after\n                     :op1 (n2 / now)\n                     :quant (t / temporal-quantity\n                               :quant 10\n                               :unit (m / minute)))))"], "smus": ["John forgot his wallet.", "John forgot.", "John forgot his wallet.", "John forgot his wallet.", "Give it to him.", "Give outside in 10 minutes.", "Ela wants to give him it outside in 10 minutes.", "Ela wants to give him it outside in 10 minutes."]}, {"instance_id": "samsum-229", "summary": "luke and martial want to help the team and play despite their injuries. They will meet at carrington and go to the coach's office.", "summary_trees": ["# ::snt luke and martial want to help the team and play despite their injuries.\n(w / want-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"luke\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Martial\")))\n      :ARG1 (a2 / and\n            :op1 (h / help-01\n                  :ARG0 a\n                  :ARG1 (t / team))\n            :op2 (p3 / play-01\n                  :ARG0 a))\n      :concession (ii / injure-01\n            :ARG1 a))", "# ::snt They will meet at carrington and go to the coach's office.\n(a / and\n      :op1 (m / meet-03\n            :ARG0 (t / they)\n            :location (h / high-school\n                  :name (n / name\n                        :op1 \"Carrington\")))\n      :op2 (g / go-02\n            :ARG0 t\n            :ARG4 (o / office\n                  :poss (p / person\n                        :ARG0-of (c / coach-01)))))"], "tree": ["(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"luke\"))\n   :ARG1 (p3 / play-01\n             :ARG0 (a / and)))", "(w / want-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Martial\"))\n   :ARG1 (a2 / and)\n   :ARG1 (p3 / play-01\n             :ARG0 (a / and)))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"luke\"))\n   :ARG1 (h / help-01\n            :ARG0 (a / and)\n            :ARG1 (t / team)))", "(w / want-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Martial\"))\n   :ARG1 (a2 / and)\n   :ARG1 (h / help-01\n            :ARG0 (a / and)\n            :ARG1 (t / team)))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"luke\"))\n   :ARG1 (p3 / play-01\n             :ARG0 (a / and))\n   :concession (ii / injure-01\n                   :ARG1 a)\n   :concession ii)", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"luke\"))\n   :ARG1 (h / help-01\n            :ARG0 (a / and)\n            :ARG1 (t / team))\n   :concession (ii / injure-01\n                   :ARG1 a))", "(w / want-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Martial\"))\n   :ARG1 (a2 / and)\n   :ARG1 (p3 / play-01\n             :ARG0 (a / and))\n   :concession (ii / injure-01\n                   :ARG1 a)\n   :concession ii)", "(w / want-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"luke\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Martial\")))\n   :ARG1 (a2 / and\n             :op1 (h / help-01\n                     :ARG0 a\n                     :ARG1 (t / team))\n             :op2 (p3 / play-01\n                      :ARG0 a)))", "(w / want-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"luke\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Martial\")))\n   :ARG1 (a2 / and\n             :op1 (h / help-01\n                     :ARG0 a\n                     :ARG1 (t / team))\n             :op2 (p3 / play-01\n                      :ARG0 a))\n   :concession (ii / injure-01\n                   :ARG1 a))", "(m / meet-03\n   :location (h / high-school\n                :name (n / name\n                         :op1 \"Carrington\")))", "(m / meet-03\n   :location (h / high-school\n                :name (n / name\n                         :op1 \"Carrington\")))", "(m / meet-03\n   :location (h / high-school\n                :name (n / name\n                         :op1 \"Carrington\")))", "(m / meet-03\n   :location (h / high-school\n                :name (n / name\n                         :op1 \"Carrington\")))", "(g / go-02\n   :ARG0 (t / they)\n   :ARG4 (o / office\n            :poss (p / person\n                     :ARG0 (c / coach-01))))", "(m / meet-03\n   :ARG0 (t / they)\n   :location (h / high-school\n                :name (n / name\n                         :op1 \"Carrington\")))", "(g / go-02\n   :ARG0 (t / they)\n   :ARG4 (o / office\n            :poss (p / person\n                     :ARG0 (c / coach-01))))", "(m / meet-03\n   :ARG0 (t / they)\n   :location (h / high-school\n                :name (n / name\n                         :op1 \"Carrington\")))"], "smus": ["Luke want's the players to play.", "The martial arts want them to play.", "Luke wants the team and the team to help.", "The martial arts want the team to help.", "Even with the injuries, Luke and the others want to play.", "Luke wants to help the team despite the injuries.", "The martial arts want them to play, even with the injuries, even with the injuries.", "Luke and the martial want to help the team and play.", "Despite the injuries, Luke and the martial want to help the team and play.", "Meet at Carrington.", "Meet at Carrington.", "Meet at Carrington.", "Meet at Carrington.", "They'll go into the coach's office.", "They will meet at Carrington.", "They'll go into the coach's office.", "They will meet at Carrington."]}, {"instance_id": "samsum-230", "summary": "Lori is at Copley. Lori was supposed to meet Maria at Prudential, but misunderstood her. There's a traffic jam, but Lori believes she will meet Maria in several minutes. ", "summary_trees": ["# ::snt Lori is at Copley.\n(b / be-located-at-91\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Lori\"))\n      :ARG2 (f / facility\n            :name (n2 / name\n                  :op1 \"Copley\")))", "# ::snt Lori was supposed to meet Maria at Prudential, but misunderstood her.\n(c / contrast-01\n      :ARG1 (s / suppose-02\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Lori\"))\n            :ARG2 (m / meet-03\n                  :ARG0 p\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Maria\"))\n                  :location (c2 / company\n                        :name (n3 / name\n                              :op1 \"Prudential\"))))\n      :ARG2 (m2 / misunderstand-01\n            :ARG0 p\n            :ARG1 p2))", "# ::snt There's a traffic jam, but Lori believes she will meet Maria in several minutes.\n(h / have-concession-91\n      :ARG1 (b / believe-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Lori\"))\n            :ARG1 (m / meet-03\n                  :ARG0 p\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Maria\"))\n                  :time (a / after\n                        :op1 (n3 / now)\n                        :quant (s / several\n                              :op1 (t / temporal-quantity\n                                    :quant 1\n                                    :unit (m2 / minute))))))\n      :ARG2 (j / jam-01\n            :ARG1 (t2 / traffic)))"], "tree": ["(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Lori\"))\n   :ARG2 (f / facility\n            :name (n2 / name\n                      :op1 \"Copley\")))", "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Lori\"))\n   :ARG2 (f / facility\n            :name (n2 / name\n                      :op1 \"Copley\")))", "(m / meet-03\n   :location (c2 / company\n                 :name (n3 / name\n                           :op1 \"Prudential\")))", "(s / suppose-02\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Lori\"))\n   :ARG2 (m / meet-03\n            :ARG0 p\n            :ARG1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Maria\"))\n            :location (c2 / company\n                          :name (n3 / name\n                                    :op1 \"Prudential\"))))", "(c / contrast-01\n   :ARG1 (s / suppose-02\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Lori\"))\n            :ARG2 (m / meet-03\n                     :ARG0 p\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Maria\"))\n                     :location (c2 / company\n                                   :name (n3 / name\n                                             :op1 \"Prudential\"))))\n   :ARG2 (m2 / misunderstand-01\n             :ARG0 p\n             :ARG1 p2))", "(m / meet-03\n   :time (a / after\n            :op1 (n3 / now)\n            :quant (s / several\n                      :op1 (t / temporal-quantity\n                              :quant 1\n                              :unit (m2 / minute)))))", "(m / meet-03\n   :ARG0 (p / person :name (n / name :op1 \"Lori\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Maria\"))\n   :time (a / after\n            :op1 (n3 / now)\n            :quant (s / several\n                      :op1 (t / temporal-quantity\n                              :quant 1\n                              :unit (m2 / minute)))))"], "smus": ["Lori is at Copley.", "Lori is at Copley.", "Meet at Prudential.", "Lori was supposed to meet Maria at Prudential.", "Lori was supposed to meet Maria at Prudential, but she did misunderstand Maria.", "The meeting will take several minutes.", "Lui will meet Maria several minutes from now."]}, {"instance_id": "samsum-231", "summary": "Ray is locked in the room from the outside and he has to pee. Max's roommate will come and let him out.", "summary_trees": ["# ::snt Ray is locked in the room from the outside and he has to pee.\n(a / and\n      :op1 (l / lock-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Ray\"))\n            :location (r / room)\n            :manner (f / from\n                  :op1 (o / outside)))\n      :op2 (n2 / need-01\n            :ARG0 p\n            :ARG1 (p2 / pee-01\n                  :ARG0 p)))", "# ::snt Max's roommate will come and let him out.\n(a / and\n      :op1 (c / come-01\n            :ARG1 (r / roommate\n                  :poss (p / person\n                        :name (n / name\n                              :op1 \"Max\"))))\n      :op2 (l / let-01\n            :ARG0 r\n            :ARG1 (o / out-06\n                  :ARG1 p)))"], "tree": ["(n2 / need-01\n    :ARG0 (p / person :name (n / name :op1 \"Ray\"))\n    :ARG1 (p2 / pee-01\n              :ARG0 p))", "(l / lock-01\n   :location (r / room)\n   :manner (f / from\n              :op1 (o / outside)))", "(l / lock-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Ray\"))\n   :location (r / room)\n   :manner (f / from\n              :op1 (o / outside)))", "(c / come-01\n   :ARG1 (r / roommate\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Max\"))))", "(c / come-01\n   :ARG1 (r / roommate\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Max\"))))"], "smus": ["Ray needs to pee.", "The room is locked from the outside.", "Ray was locked in the room from the outside.", "Come see Max's roommate.", "Come see Max's roommate."]}, {"instance_id": "samsum-232", "summary": "The toilet upstairs is blocked again. Wendy and David can't afford the plumber as Wendy spent the money on her sister's birthday present.", "summary_trees": ["# ::snt The toilet upstairs is blocked again.\n(b / block-01\n      :ARG1 (t / toilet\n            :location (u / upstairs))\n      :mod (a / again))", "# ::snt Wendy and David can't afford the plumber as Wendy spent the money on her sister's birthday present.\n(c / cause-01\n      :ARG0 (s / spend-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Wendy\"))\n            :ARG1 (p2 / present\n                  :mod (b / birthday)\n                  :poss (p3 / person\n                        :ARG0-of (h / have-rel-role-91\n                              :ARG1 p\n                              :ARG2 (s2 / sister))))\n            :ARG3 (m / money))\n      :ARG1 (p4 / possible-01\n            :polarity -\n            :ARG1 (a / afford-01\n                  :ARG0 (a2 / and\n                        :op1 p\n                        :op2 (p5 / person\n                              :name (n2 / name\n                                    :op1 \"David\")))\n                  :ARG1 (p6 / person\n                        :ARG0-of (p7 / plumb-04)))))"], "tree": ["(b / block-01\n   :ARG1 (t / toilet\n            :location (u / upstairs)))", "(b / block-01\n   :ARG1 (t / toilet\n            :location (u / upstairs))\n   :mod (a / again))", "(p4 / possible-01\n    :polarity -\n    :ARG1 (a / afford-01\n             :ARG0 (p / person :name (n / name :op1 \"Wendy\"))\n             :ARG1 (p6 / person\n                       :ARG0 (p7 / plumb-04))))", "(p4 / possible-01\n    :polarity -\n    :ARG1 (a / afford-01\n             :ARG0 (p5 / person\n                       :name (n2 / name\n                                 :op1 \"David\"))\n             :ARG1 (p6 / person\n                       :ARG0 (p7 / plumb-04))\n             :ARG1 p6))", "(p4 / possible-01\n    :polarity -\n    :ARG1 (a / afford-01\n             :ARG0 (a2 / and\n                       :op1 (p / person :name (n / name :op1 \"Wendy\"))\n                       :op2 (p5 / person\n                                :name (n2 / name\n                                          :op1 \"David\")))\n             :ARG1 (p6 / person\n                       :ARG0 (p7 / plumb-04))))", "(s / spend-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Wendy\"))\n   :ARG1 (p2 / present\n             :mod (b / birthday)\n             :poss (p3 / person\n                       :ARG0 (h / have-rel-role-91\n                                :ARG1 p\n                                :ARG2 (s2 / sister))))\n   :ARG3 (m / money))", "(c / cause-01\n   :ARG0 (s / spend-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Wendy\"))\n            :ARG1 (p2 / present\n                      :mod (b / birthday)\n                      :poss (p3 / person\n                                :ARG0 (h / have-rel-role-91\n                                         :ARG1 p\n                                         :ARG2 (s2 / sister))))\n            :ARG3 (m / money))\n   :ARG1 (p4 / possible-01\n             :polarity -\n             :ARG1 (a / afford-01\n                      :ARG0 p\n                      :ARG1 (p6 / person\n                                :ARG0 (p7 / plumb-04)))))", "(c / cause-01\n   :ARG0 (s / spend-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Wendy\"))\n            :ARG1 (p2 / present\n                      :mod (b / birthday)\n                      :poss (p3 / person\n                                :ARG0 (h / have-rel-role-91\n                                         :ARG1 p\n                                         :ARG2 (s2 / sister))))\n            :ARG3 (m / money))\n   :ARG1 (p4 / possible-01\n             :polarity -\n             :ARG1 (a / afford-01\n                      :ARG0 (p5 / person\n                                :name (n2 / name\n                                          :op1 \"David\"))\n                      :ARG1 (p6 / person\n                                :ARG0 (p7 / plumb-04))\n                      :ARG1 p6)))", "(c / cause-01\n   :ARG0 (s / spend-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Wendy\"))\n            :ARG1 (p2 / present\n                      :mod (b / birthday)\n                      :poss (p3 / person\n                                :ARG0 (h / have-rel-role-91\n                                         :ARG1 p\n                                         :ARG2 (s2 / sister))))\n            :ARG3 (m / money))\n   :ARG1 (p4 / possible-01\n             :polarity -\n             :ARG1 (a / afford-01\n                      :ARG0 (a2 / and\n                                :op1 p\n                                :op2 (p5 / person\n                                         :name (n2 / name\n                                                   :op1 \"David\")))\n                      :ARG1 (p6 / person\n                                :ARG0 (p7 / plumb-04)))))"], "smus": ["The toilet upstairs was blocked.", "The toilet upstairs was blocked again.", "Wendy can't afford a plumb.", "David can't afford a plumb.", "Wendy and David can't afford a plumb.", "Wendy spent the money on her sister's birthday present.", "Wendy spent money on her sister's birthday present, so she couldn't afford a plumber.", "David couldn't afford a plumber because Wendy spent money on her sister's birthday present.", "Wendy spent money on her sister's birthday present, so she and David couldn't afford the plumb."]}, {"instance_id": "samsum-233", "summary": "David is coming home for Christmas next week. Jane has no idea what to buy their father so David is going to order an ipad online.", "summary_trees": ["# ::snt David is coming home for Christmas next week.\n(c / come-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"David\"))\n      :ARG4 (h / home)\n      :purpose (f / festival\n            :name (n2 / name\n                  :op1 \"Christmas\"))\n      :time (w / week\n            :mod (n3 / next)))", "# ::snt Jane has no idea what to buy their father so David is going to order an ipad online.\n(c / cause-01\n      :ARG0 (h / have-03\n            :polarity -\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Jane\"))\n            :ARG1 (ii / idea\n                  :topic (t / thing\n                        :ARG1-of (b / buy-01\n                              :ARG0 p\n                              :ARG4 (p2 / person\n                                    :ARG0-of (h2 / have-rel-role-91\n                                          :ARG1 p\n                                          :ARG2 (f / father)))))))\n      :ARG1 (o / order-02\n            :ARG0 (p3 / person\n                  :name (n2 / name\n                        :op1 \"David\"))\n            :ARG1 (p4 / product\n                  :name (n3 / name\n                        :op1 \"iPad\"))\n            :medium (o2 / online)))"], "tree": ["(c / come-01\n   :time (w / week\n            :mod (n3 / next)))", "(c / come-01\n   :time (w / week\n            :mod (n3 / next)))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"David\")))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"David\"))\n   :ARG4 (h / home))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"David\"))\n   :time (w / week\n            :mod (n3 / next)))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"David\"))\n   :ARG4 (h / home)\n   :time (w / week\n            :mod (n3 / next)))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"David\"))\n   :ARG4 (h / home)\n   :purpose (f / festival\n               :name (n2 / name\n                         :op1 \"Christmas\"))\n   :time (w / week\n            :mod (n3 / next)))", "(o / order-02\n   :ARG1 (p4 / product\n             :name (n3 / name\n                       :op1 \"iPad\")))", "(o / order-02\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"David\"))\n   :ARG1 (p4 / product\n             :name (n3 / name\n                       :op1 \"iPad\")))", "(o / order-02\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"David\"))\n   :ARG1 (p4 / product\n             :name (n3 / name\n                       :op1 \"iPad\"))\n   :medium (o2 / online))", "(h / have-03\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jane\"))\n   :ARG1 (ii / idea\n             :topic (t / thing\n                       :ARG1 (b / buy-01\n                                :ARG0 p\n                                :ARG4 (p2 / person\n                                          :ARG0 (h2 / have-rel-role-91\n                                                    :ARG1 p\n                                                    :ARG2 (f / father)))))))", "(c / cause-01\n   :ARG0 (h / have-03\n            :polarity -\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Jane\"))\n            :ARG1 (ii / idea\n                      :topic (t / thing\n                                :ARG1 (b / buy-01\n                                         :ARG0 p\n                                         :ARG4 (p2 / person\n                                                   :ARG0 (h2 / have-rel-role-91\n                                                             :ARG1 p\n                                                             :ARG2 (f / father)))))))\n   :ARG1 (o / order-02\n            :ARG0 (p3 / person\n                      :name (n2 / name\n                                :op1 \"David\"))\n            :ARG1 (p4 / product\n                      :name (n3 / name\n                                :op1 \"iPad\"))\n            :medium (o2 / online)))"], "smus": ["Coming next week.", "Coming next week.", "David is coming.", "David is coming home.", "David is coming next week.", "David will be coming home next week.", "David will be coming home for Christmas next week.", "Order iPad", "David is ordering an iPad.", "David ordered an iPad online.", "Jane has no idea what her father buys.", "David ordered an iPad online because Jane has no idea what to buy for her father."]}, {"instance_id": "samsum-234", "summary": "Paul will buy red roses following Cindy's advice.", "summary_trees": ["# ::snt Paul will buy red roses following Cindy's advice.\n(b / buy-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Paul\"))\n      :ARG1 (r / rose\n            :ARG1-of (r2 / red-02))\n      :ARG1-of (f / follow-02\n            :ARG2 (a / advise-01\n                  :ARG0 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Cindy\"))\n                  :ARG1 p)))"], "tree": ["(b / buy-01\n   :ARG1 (r / rose\n            :ARG1 (r2 / red-02)))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Paul\")))", "(a / advise-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Cindy\"))\n   :ARG1 (p / person :name (n / name :op1 \"Paul\")))", "(a / advise-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Cindy\"))\n   :ARG1 (p / person :name (n / name :op1 \"Paul\")))", "(f / follow-02\n   :ARG2 (a / advise-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Cindy\"))\n            :ARG1 (p / person :name (n / name :op1 \"Paul\"))))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Paul\"))\n   :ARG1 (r / rose\n            :ARG1 (r2 / red-02)))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Paul\"))\n   :ARG1 (r / rose\n            :ARG1 (r2 / red-02))\n   :ARG1 (f / follow-02\n            :ARG2 (a / advise-01\n                     :ARG0 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Cindy\"))\n                     :ARG1 p)))"], "smus": ["Buy red roses.", "Paul will buy.", "Cindy gave Paul advice.", "Cindy gave Paul advice.", "Following Cindy's advice to Paul.", "Paul would buy red roses.", "Paul would buy the red roses following Cindy's advice."]}, {"instance_id": "samsum-235", "summary": "Bob has bought a new game. Harry can't afford to do it at the moment.", "summary_trees": ["# ::snt Bob has bought a new game.\n(b / buy-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Bob\"))\n      :ARG1 (g / game\n            :ARG1-of (n2 / new-01)))", "# ::snt Harry can't afford to do it at the moment.\n(p / possible-01\n      :polarity -\n      :ARG1 (a / afford-01\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Harry\"))\n            :ARG1 (d / do-02\n                  :ARG0 p2\n                  :ARG1 (ii / it))\n            :time (m / moment)))"], "tree": ["(b / buy-01\n   :ARG1 (g / game\n            :ARG1 (n2 / new-01)))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Bob\")))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Bob\"))\n   :ARG1 (g / game\n            :ARG1 (n2 / new-01)))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Bob\"))\n   :ARG1 (g / game\n            :ARG1 (n2 / new-01)))", "(p / possible-01\n   :polarity -\n   :ARG1 (a / afford-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Harry\"))\n            :ARG1 (d / do-02\n                     :ARG0 p2\n                     :ARG1 (ii / it))\n            :time (m / moment)))"], "smus": ["The new game is bought.", "Bob bought.", "Bob has bought a new game.", "Bob has bought a new game.", "Harry can't afford to do it at the moment."]}, {"instance_id": "samsum-236", "summary": "Bella and Eric dismissed a request of a client. Their boss appreciated the decision. He brings in new clients.", "summary_trees": ["# ::snt Bella and Eric dismissed a request of a client.\n(d / dismiss-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Bella\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Eric\")))\n      :ARG1 (r / request-01\n            :ARG0 (c / client)))", "# ::snt Their boss appreciated the decision.\n(a / appreciate-02\n      :ARG0 (p / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (t / they)\n                  :ARG2 (b / boss)))\n      :ARG1 (t2 / thing\n            :ARG1-of (d / decide-01)))", "# ::snt He brings in new clients.\n(b / bring-01\n      :ARG0 (h / he)\n      :ARG1 (p / person\n            :ARG0-of (h2 / have-rel-role-91\n                  :ARG1 h\n                  :ARG2 (c / client))\n            :ARG1-of (n / new-01)))"], "tree": ["(d / dismiss-01\n   :ARG1 (r / request-01\n            :ARG0 (c / client)))", "(d / dismiss-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Bella\"))\n   :ARG1 (r / request-01\n            :ARG0 (c / client)))", "(d / dismiss-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Eric\"))\n   :ARG1 (r / request-01\n            :ARG0 (c / client))\n   :ARG1 r)", "(d / dismiss-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Bella\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Eric\")))\n   :ARG1 (r / request-01\n            :ARG0 (c / client)))", "(h / have-rel-role-91\n   :ARG1 (t / they)\n   :ARG2 (b / boss))", "(a / appreciate-02\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (t / they)\n                     :ARG2 (b / boss)))\n   :ARG1 (t2 / thing\n             :ARG1 (d / decide-01)))", "(a / appreciate-02\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (t / they)\n                     :ARG2 (b / boss)))\n   :ARG1 (t2 / thing\n             :ARG1 (d / decide-01)))", "(b / bring-01\n   :ARG0 (h / he)\n   :ARG1 (p / person\n            :ARG0 (h2 / have-rel-role-91\n                      :ARG1 h\n                      :ARG2 (c / client))\n            :ARG1 (n / new-01)))", "(b / bring-01\n   :ARG0 (h / he)\n   :ARG1 (p / person\n            :ARG0 (h2 / have-rel-role-91\n                      :ARG1 h\n                      :ARG2 (c / client))\n            :ARG1 (n / new-01)))"], "smus": ["The client's request was dismissed.", "Bella dismissed the client's request.", "Eric dismissed the client's request.", "Bella and Eric dismissed the client's request.", "They are the boss.", "Their boss appreciated the decision.", "Their boss appreciated the decision.", "He brings new clients.", "He brings new clients."]}, {"instance_id": "samsum-237", "summary": "Pam has probably left her phone when she was shopping. Dot suggests there is a way to get it back.", "summary_trees": ["# ::snt Pam has probably left her phone when she was shopping.\n(l / leave-15\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Pam\"))\n      :ARG1 (p2 / phone\n            :poss p)\n      :time (s / shop-01\n            :ARG0 p)\n      :mod (p3 / probable))", "# ::snt Dot suggests there is a way to get it back.\n(s / suggest-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Dot\"))\n      :ARG1 (w / way\n            :manner-of (g / get-back-09\n                  :ARG1 (ii / it))))"], "tree": ["(l / leave-15\n   :time (s / shop-01)\n   :mod (p3 / probable))", "(l / leave-15\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Pam\"))\n   :ARG1 (p2 / phone\n             :poss p))", "(l / leave-15\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Pam\"))\n   :ARG1 (p2 / phone\n             :poss p)\n   :time (s / shop-01\n            :ARG0 p)\n   :mod (p3 / probable))", "(s / suggest-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dot\"))\n   :ARG1 (w / way\n            :manner (g / get-back-09\n                       :ARG1 (ii / it))))"], "smus": ["Probably left while shopping.", "Pam had left her phone.", "Probably when shopping, Pam had left her phone.", "\"Dot suggests a way to get it back.\""]}, {"instance_id": "samsum-238", "summary": "Anna likes a new app in which you can virtually try on clothes. Peter is not quite convinced it is necessary.", "summary_trees": ["# ::snt Anna likes a new app in which you can virtually try on clothes.\n(l / like-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Anna\"))\n      :ARG1 (a / app\n            :ARG1-of (n2 / new-01)\n            :medium-of (p2 / possible-01\n                  :ARG1 (t / try-04\n                        :ARG0 (y / you)\n                        :ARG1 (c / clothes)\n                        :mod (v / virtual)))))", "# ::snt Peter is not quite convinced it is necessary.\n(c / convince-01\n      :polarity -\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Peter\"))\n      :ARG2 (n2 / need-01\n            :ARG1 (ii / it))\n      :degree (q / quite))"], "tree": ["(t / try-04\n   :ARG0 (y / you)\n   :ARG1 (c / clothes)\n   :mod (v / virtual))", "(p2 / possible-01\n    :ARG1 (t / try-04\n             :ARG0 (y / you)\n             :ARG1 (c / clothes)\n             :mod (v / virtual)))", "(l / like-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Anna\"))\n   :ARG1 (a / app\n            :ARG1 (n2 / new-01)\n            :medium (p2 / possible-01\n                        :ARG1 (t / try-04\n                                 :ARG0 (y / you)\n                                 :ARG1 (c / clothes)\n                                 :mod (v / virtual)))))"], "smus": ["You'd virtually try clothes.", "You can virtually try clothes.", "Anna likes the new app where you can virtually try on clothes."]}, {"instance_id": "samsum-239", "summary": "Jared and Michelle used to go out together. Now he'd like to ask Kelly, Michelle's best friend, out. He gets her permission.", "summary_trees": ["# ::snt Jared and Michelle used to go out together.\n(g / go-out-34\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Jared\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Michelle\")))\n      :time (u / use-03)\n      :manner (t / together))", "# ::snt Now he'd like to ask Kelly, Michelle's best friend, out.\n(l / like-02\n      :ARG0 (h / he)\n      :ARG1 (a / ask-out-04\n            :ARG0 h\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Kelly\")\n                  :ARG0-of (h2 / have-rel-role-91\n                        :ARG1 (p2 / person\n                              :name (n2 / name\n                                    :op1 \"Michelle\"))\n                        :ARG2 (f / friend\n                              :ARG1-of (h3 / have-degree-91\n                                    :ARG2 (g / good-02\n                                          :ARG1 f)\n                                    :ARG3 (m / most))))))\n      :time (n3 / now))", "# ::snt He gets her permission.\n(g / get-01\n      :ARG0 (h / he)\n      :ARG1 (p / permit-01\n            :ARG0 (s / she)))"], "tree": ["(g / go-out-34\n   :time (u / use-03)\n   :manner (t / together))", "(g / go-out-34\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jared\"))\n   :time (u / use-03)\n   :manner (t / together))", "(g / go-out-34\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Michelle\"))\n   :time (u / use-03)\n   :time u\n   :manner (t / together))", "(g / go-out-34\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Jared\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Michelle\")))\n   :time (u / use-03)\n   :manner (t / together))", "(h3 / have-degree-91\n    :ARG2 (g / good-02\n             :ARG1 (f / friend))\n    :ARG3 (m / most))", "(a / ask-out-04\n   :ARG0 (h / he)\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Kelly\")\n            :ARG0 (h2 / have-rel-role-91\n                      :ARG1 (p2 / person\n                                :name (n2 / name\n                                          :op1 \"Michelle\"))\n                      :ARG2 (f / friend\n                               :ARG1 (h3 / have-degree-91\n                                         :ARG2 (g / good-02\n                                                  :ARG1 f)\n                                         :ARG3 (m / most))))))", "(g / get-01\n   :ARG0 (h / he)\n   :ARG1 (p / permit-01\n            :ARG0 (s / she)))", "(g / get-01\n   :ARG0 (h / he)\n   :ARG1 (p / permit-01\n            :ARG0 (s / she)))"], "smus": ["Used to go out together.", "Jared used to go out together.", "Michelle used to go out together.", "Jared and Michelle used to go out together.", "Best friend.", "He asked out Kelly to be Michaele's best friend.", "He gets her permission.", "He gets her permission."]}, {"instance_id": "samsum-240", "summary": "Walker and Booker plan to play games all night. Walker will bring his Xbox console at Booker's request.", "summary_trees": ["# ::snt Walker and Booker plan to play games all night.\n(p / plan-01\n      :ARG0 (a / and\n            :op1 (p2 / person\n                  :name (n / name\n                        :op1 \"Walker\"))\n            :op2 (p3 / person\n                  :name (n2 / name\n                        :op1 \"Booker\")))\n      :ARG1 (p4 / play-01\n            :ARG0 a\n            :ARG1 (g / game)\n            :time (d / date-entity\n                  :dayperiod (n3 / night)\n                  :mod (a2 / all))))", "# ::snt Walker will bring his Xbox console at Booker's request.\n(b / bring-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Walker\"))\n      :ARG1 (c / console\n            :mod (p2 / product\n                  :name (n2 / name\n                        :op1 \"Xbox\"))\n            :poss p)\n      :ARG1-of (r / request-01\n            :ARG0 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Booker\"))))"], "tree": ["(p4 / play-01\n    :ARG0 (a / and)\n    :ARG1 (g / game))", "(p4 / play-01\n    :time (d / date-entity\n             :dayperiod (n3 / night)\n             :mod (a2 / all)))", "(p4 / play-01\n    :time (d / date-entity\n             :dayperiod (n3 / night)\n             :mod (a2 / all)))", "(p4 / play-01\n    :ARG0 (a / and)\n    :ARG1 (g / game)\n    :time (d / date-entity\n             :dayperiod (n3 / night)\n             :mod (a2 / all)))", "(p4 / play-01\n    :ARG0 (a / and)\n    :ARG1 (g / game)\n    :time (d / date-entity\n             :dayperiod (n3 / night)\n             :mod (a2 / all)))", "(p / plan-01\n   :ARG1 (p4 / play-01\n             :ARG0 (a / and)\n             :ARG1 (g / game)\n             :time (d / date-entity\n                      :dayperiod (n3 / night)\n                      :mod (a2 / all))))", "(p / plan-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Walker\"))\n   :ARG1 (p4 / play-01\n             :ARG0 p2\n             :ARG1 (g / game)\n             :time (d / date-entity\n                      :dayperiod (n3 / night)\n                      :mod (a2 / all))))", "(p / plan-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Walker\"))\n   :ARG1 (p4 / play-01\n             :ARG0 p2\n             :ARG1 (g / game)\n             :time (d / date-entity\n                      :dayperiod (n3 / night)\n                      :mod (a2 / all))))", "(p / plan-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"Booker\"))\n   :ARG1 (p4 / play-01\n             :ARG0 p3\n             :ARG1 (g / game)\n             :time (d / date-entity\n                      :dayperiod (n3 / night)\n                      :mod (a2 / all)))\n   :ARG1 p4)", "(p / plan-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"Booker\"))\n   :ARG1 (p4 / play-01\n             :ARG0 p3\n             :ARG1 (g / game)\n             :time (d / date-entity\n                      :dayperiod (n3 / night)\n                      :mod (a2 / all)))\n   :ARG1 p4)", "(p / plan-01\n   :ARG0 (a / and\n            :op1 (p2 / person\n                     :name (n / name\n                              :op1 \"Walker\"))\n            :op2 (p3 / person\n                     :name (n2 / name\n                               :op1 \"Booker\")))\n   :ARG1 (p4 / play-01\n             :ARG0 a\n             :ARG1 (g / game)\n             :time (d / date-entity\n                      :dayperiod (n3 / night)\n                      :mod (a2 / all))))", "(p / plan-01\n   :ARG0 (a / and\n            :op1 (p2 / person\n                     :name (n / name\n                              :op1 \"Walker\"))\n            :op2 (p3 / person\n                     :name (n2 / name\n                               :op1 \"Booker\")))\n   :ARG1 (p4 / play-01\n             :ARG0 a\n             :ARG1 (g / game)\n             :time (d / date-entity\n                      :dayperiod (n3 / night)\n                      :mod (a2 / all))))", "(b / bring-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Walker\"))\n   :ARG1 (c / console\n            :mod (p2 / product\n                     :name (n2 / name\n                               :op1 \"Xbox\"))\n            :poss p))", "(b / bring-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Walker\"))\n   :ARG1 (c / console\n            :mod (p2 / product\n                     :name (n2 / name\n                               :op1 \"Xbox\"))\n            :poss p)\n   :ARG1 (r / request-01\n            :ARG0 (p3 / person\n                      :name (n3 / name\n                                :op1 \"Booker\"))))"], "smus": ["Play games.", "Play all night.", "Play all night.", "All night, we'd play games.", "All night, we'd play games.", "The plan is to play the games all night.", "Walker's plan is to play all night long in the games.", "Walker's plan is to play all night long in the games.", "Booker's plan is to play all night long games.", "Booker's plan is to play all night long games.", "Walker and Booker had a plan to play all night long games.", "Walker and Booker had a plan to play all night long games.", "Walker will bring his Xbox console.", "Walker will bring his Xbox console to Booker's request."]}, {"instance_id": "samsum-241", "summary": "Erin will meet Ashley in the restaurant for the interview. ", "summary_trees": ["# ::snt Erin will meet Ashley in the restaurant for the interview.\n(m / meet-03\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Erin\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Ashley\"))\n      :location (r / restaurant)\n      :purpose (ii / interview-01\n            :ARG1 p))"], "tree": ["(m / meet-03\n   :location (r / restaurant)\n   :purpose (ii / interview-01))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Erin\")))", "(m / meet-03\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Ashley\")))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Erin\"))\n   :location (r / restaurant))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Erin\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Ashley\")))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Erin\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Ashley\"))\n   :location (r / restaurant))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Erin\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Ashley\"))\n   :purpose (ii / interview-01\n                :ARG1 p))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Erin\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Ashley\"))\n   :location (r / restaurant)\n   :purpose (ii / interview-01\n                :ARG1 p))"], "smus": ["Meet in restaurant for interview.", "Erin will meet.", "Meet Ashley.", "Erin will meet at the restaurant.", "Erin will meet Ashley.", "Erin and Ashley will meet at the restaurant.", "Erin will meet Ashley for an interview.", "Erin will meet Ashley at the restaurant for an interview."]}, {"instance_id": "samsum-242", "summary": "Robert has a new phone number starting with 304. Robert has lost his job and is looking for a new one. Serge offers to pass on Roberts CV to a contact. ", "summary_trees": ["# ::snt Robert has a new phone number starting with 304.\n(h / have-03\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Robert\"))\n      :ARG1 (n2 / number\n            :mod (p2 / phone)\n            :ARG1-of (n3 / new-01)\n            :ARG1-of (s / start-01\n                  :ARG2 304)))", "# ::snt Robert has lost his job and is looking for a new one.\n(a / and\n      :op1 (l / lose-02\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Robert\"))\n            :ARG1 (j / job\n                  :poss p))\n      :op2 (l2 / look-01\n            :ARG0 p\n            :ARG1 (j2 / job\n                  :ARG1-of (n2 / new-01))))", "# ::snt Serge offers to pass on Roberts CV to a contact.\n(o / offer-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Serge\"))\n      :ARG1 (p2 / pass-on-09\n            :ARG0 p\n            :ARG1 (c / CV\n                  :poss (p3 / person\n                        :name (n2 / name\n                              :op1 \"Roberts\")))\n            :ARG2 (p4 / person\n                  :ARG0-of (c2 / contact-01))))"], "tree": ["(h / have-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Robert\"))\n   :ARG1 (n2 / number\n             :mod (p2 / phone)\n             :ARG1 (n3 / new-01)\n             :ARG1 (s / start-01\n                      :ARG2 304)))", "(h / have-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Robert\"))\n   :ARG1 (n2 / number\n             :mod (p2 / phone)\n             :ARG1 (n3 / new-01)\n             :ARG1 (s / start-01\n                      :ARG2 304)))", "(l / lose-02\n   :ARG1 (j / job\n            :poss (p / person :name (n / name :op1 \"Robert\"))))", "(l2 / look-01\n    :ARG1 (j2 / job\n              :ARG1 (n2 / new-01)))", "(l2 / look-01\n    :ARG0 (p / person :name (n / name :op1 \"Robert\"))\n    :ARG1 (j2 / job\n              :ARG1 (n2 / new-01)))", "(l2 / look-01\n    :ARG0 (p / person :name (n / name :op1 \"Robert\"))\n    :ARG1 (j2 / job\n              :ARG1 (n2 / new-01)))", "(l / lose-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Robert\"))\n   :ARG1 (j / job\n            :poss p))", "(l / lose-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Robert\"))\n   :ARG1 (j / job\n            :poss p))", "(p2 / pass-on-09\n    :ARG0 (p / person :name (n / name :op1 \"Serge\"))\n    :ARG1 (c / CV\n             :poss (p3 / person\n                       :name (n2 / name\n                                 :op1 \"Roberts\")))\n    :ARG2 (p4 / person\n              :ARG0 (c2 / contact-01)))", "(o / offer-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Serge\"))\n   :ARG1 (p2 / pass-on-09\n             :ARG0 p\n             :ARG1 (c / CV\n                      :poss (p3 / person\n                                :name (n2 / name\n                                          :op1 \"Roberts\")))\n             :ARG2 (p4 / person\n                       :ARG0 (c2 / contact-01))))"], "smus": ["Robert has a new phone number starting at 304.", "Robert has a new phone number starting at 304.", "Robert's job was lost.", "Looking for a new job.", "Robert is looking for a new job.", "Robert is looking for a new job.", "Robert has lost his job.", "Robert has lost his job.", "Serge will pass on Roberts' CV to the contact.", "Serge offers to pass on Roberts' CV to the contact."]}, {"instance_id": "samsum-243", "summary": "Jones and Angelina will meet in town in the afternoon.", "summary_trees": ["# ::snt Jones and Angelina will meet in town in the afternoon.\n(m / meet-03\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jones\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Angelina\"))\n      :location (t / town)\n      :time (d / date-entity\n            :dayperiod (a / afternoon)))"], "tree": ["(m / meet-03\n   :time (d / date-entity\n            :dayperiod (a / afternoon)))", "(m / meet-03\n   :time (d / date-entity\n            :dayperiod (a / afternoon)))", "(m / meet-03\n   :time (d / date-entity\n            :dayperiod (a / afternoon)))", "(m / meet-03\n   :time (d / date-entity\n            :dayperiod (a / afternoon)))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jones\")))", "(m / meet-03\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Angelina\")))", "(m / meet-03\n   :location (t / town)\n   :time (d / date-entity\n            :dayperiod (a / afternoon)))", "(m / meet-03\n   :location (t / town)\n   :time (d / date-entity\n            :dayperiod (a / afternoon)))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jones\"))\n   :location (t / town))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jones\"))\n   :time (d / date-entity\n            :dayperiod (a / afternoon)))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jones\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Angelina\")))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jones\"))\n   :location (t / town)\n   :time (d / date-entity\n            :dayperiod (a / afternoon)))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jones\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Angelina\"))\n   :location (t / town))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jones\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Angelina\"))\n   :time (d / date-entity\n            :dayperiod (a / afternoon)))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jones\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Angelina\"))\n   :location (t / town)\n   :time (d / date-entity\n            :dayperiod (a / afternoon)))"], "smus": ["Meet in the afternoon.", "Meet in the afternoon.", "Meet in the afternoon.", "Meet in the afternoon.", "Jones will meet.", "Meet Angelina.", "Meet in town on afternoon", "Meet in town on afternoon", "Jones will meet in town.", "Jones will meet the afternoon.", "Jones will meet Angelina.", "Jones will meet in town on the afternoon.", "Jones will meet Angelina in town.", "Jones will meet Angelina on the afternoon of", "Jones and Angelina would meet in town on the afternoon."]}, {"instance_id": "samsum-244", "summary": "Rob will be home tomorrow. Rob and Susan will have dinner together after Rob's work. Susan will cook something special.", "summary_trees": ["# ::snt Rob will be home tomorrow.\n(h / home\n      :domain (p / person\n            :name (n / name\n                  :op1 \"Rob\"))\n      :time (t / tomorrow))", "# ::snt Rob and Susan will have dinner together after Rob's work.\n(h / have-06\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Rob\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Susan\")))\n      :ARG1 (d / dinner)\n      :time (a2 / after\n            :op1 (w / work-01\n                  :ARG0 p))\n      :mod (t / together))", "# ::snt Susan will cook something special.\n(c / cook-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Susan\"))\n      :ARG1 (s / something\n            :ARG1-of (s2 / special-02)))"], "tree": ["(h / home\n   :domain (p / person\n              :name (n / name\n                       :op1 \"Rob\"))\n   :time (t / tomorrow))", "(h / have-06\n   :time (a2 / after\n             :op1 (w / work-01))\n   :mod (t / together))", "(h / have-06\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Rob\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Susan\")))\n   :ARG1 (d / dinner)\n   :time (a2 / after\n             :op1 (w / work-01\n                     :ARG0 p))\n   :mod (t / together))", "(c / cook-01\n   :ARG1 (s / something\n            :ARG1 (s2 / special-02)))", "(c / cook-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Susan\")))", "(c / cook-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Susan\"))\n   :ARG1 (s / something\n            :ARG1 (s2 / special-02)))"], "smus": ["Rob will be home tomorrow.", "Have together after work.", "Rob and Susan will have dinner together after work.", "Cook something special.", "Susan will cook.", "Susan will cook something special."]}, {"instance_id": "samsum-245", "summary": "Camilla and Tom will go to Dublin this weekend.", "summary_trees": ["# ::snt Camilla and Tom will go to Dublin this weekend.\n(g / go-02\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Camilla\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Tom\")))\n      :ARG4 (c / city\n            :name (n3 / name\n                  :op1 \"Dublin\"))\n      :time (w / weekend\n            :mod (t / this)))"], "tree": ["(g / go-02\n   :time (w / weekend\n            :mod (t / this)))", "(g / go-02\n   :time (w / weekend\n            :mod (t / this)))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Camilla\")))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Tom\")))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Camilla\"))\n   :ARG4 (c / city\n            :name (n3 / name\n                      :op1 \"Dublin\")))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Tom\"))\n   :ARG4 (c / city\n            :name (n3 / name\n                      :op1 \"Dublin\"))\n   :ARG4 c)", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Camilla\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Tom\"))))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Camilla\"))\n   :ARG4 (c / city\n            :name (n3 / name\n                      :op1 \"Dublin\"))\n   :time (w / weekend\n            :mod (t / this)))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Camilla\"))\n   :ARG4 (c / city\n            :name (n3 / name\n                      :op1 \"Dublin\"))\n   :time (w / weekend\n            :mod (t / this)))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Tom\"))\n   :ARG4 (c / city\n            :name (n3 / name\n                      :op1 \"Dublin\"))\n   :ARG4 c\n   :time (w / weekend\n            :mod (t / this)))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Tom\"))\n   :ARG4 (c / city\n            :name (n3 / name\n                      :op1 \"Dublin\"))\n   :ARG4 c\n   :time (w / weekend\n            :mod (t / this)))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Camilla\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Tom\")))\n   :ARG4 (c / city\n            :name (n3 / name\n                      :op1 \"Dublin\")))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Camilla\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Tom\")))\n   :ARG4 (c / city\n            :name (n3 / name\n                      :op1 \"Dublin\"))\n   :time (w / weekend\n            :mod (t / this)))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Camilla\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Tom\")))\n   :ARG4 (c / city\n            :name (n3 / name\n                      :op1 \"Dublin\"))\n   :time (w / weekend\n            :mod (t / this)))"], "smus": ["Go this weekend.", "Go this weekend.", "Camilla, go.", "Tom, go.", "Camilla will go to Dublin.", "Tom will go to Dublin.", "Camilla and Tom will go.", "Camilla will go to Dublin this weekend.", "Camilla will go to Dublin this weekend.", "Tom will go to Dublin this weekend.", "Tom will go to Dublin this weekend.", "Camilla and Tom will go to Dublin.", "Camilla and Tom will go to Dublin this weekend.", "Camilla and Tom will go to Dublin this weekend."]}, {"instance_id": "samsum-246", "summary": "Charlie's sister has passed her last university exam. Charlie and Frank will go out to celebrate that tonight.", "summary_trees": ["# ::snt Charlie's sister has passed her last university exam.\n(p / pass-07\n      :ARG1 (p2 / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (p3 / person\n                        :name (n / name\n                              :op1 \"Charlie\"))\n                  :ARG2 (s / sister)))\n      :ARG2 (e / exam\n            :mod (u / university)\n            :mod (l / last)\n            :poss p2))", "# ::snt Charlie and Frank will go out to celebrate that tonight.\n(g / go-out-34\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Charlie\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Frank\")))\n      :purpose (c / celebrate-01\n            :ARG0 a\n            :ARG1 (t / that))\n      :time (d / date-entity\n            :dayperiod (n3 / night)\n            :mod (t2 / today)))"], "tree": ["(p / pass-07\n   :ARG1 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 (p3 / person\n                                :name (n / name\n                                         :op1 \"Charlie\"))\n                      :ARG2 (s / sister)))\n   :ARG2 (e / exam\n            :mod (u / university)\n            :mod (l / last)\n            :poss p2))", "(c / celebrate-01\n   :ARG0 (a / and)\n   :ARG1 (t / that))", "(c / celebrate-01\n   :ARG0 (a / and)\n   :ARG1 (t / that))", "(g / go-out-34\n   :purpose (c / celebrate-01)\n   :time (d / date-entity\n            :dayperiod (n3 / night)\n            :mod (t2 / today)))", "(g / go-out-34\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Charlie\"))\n   :purpose (c / celebrate-01\n               :ARG0 p\n               :ARG1 (t / that))\n   :time (d / date-entity\n            :dayperiod (n3 / night)\n            :mod (t2 / today)))", "(g / go-out-34\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Charlie\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Frank\")))\n   :purpose (c / celebrate-01\n               :ARG0 a\n               :ARG1 (t / that))\n   :time (d / date-entity\n            :dayperiod (n3 / night)\n            :mod (t2 / today)))"], "smus": ["Charlie's sister has passed her last university exam.", "And celebrate that.", "And celebrate that.", "Go out to celebrate tonight.", "Charlie went out tonight to celebrate that.", "Charlie and Frank went out tonight to celebrate that."]}, {"instance_id": "samsum-247", "summary": "Jill called Sarah. She also sent her some old pictures. ", "summary_trees": ["# ::snt Jill called Sarah.\n(c / call-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jill\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Sarah\")))", "# ::snt She also sent her some old pictures.\n(s / send-01\n      :ARG0 (s2 / she)\n      :ARG1 (p / picture\n            :mod (s3 / some)\n            :mod (o / old))\n      :ARG2 (h / he)\n      :mod (a / also))"], "tree": ["(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jill\")))", "(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jill\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Sarah\")))", "(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jill\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Sarah\")))", "(s / send-01\n   :ARG0 (s2 / she)\n   :ARG1 (p / picture\n            :mod (s3 / some)\n            :mod (o / old)))"], "smus": ["Jill called.", "Jill called Sarah.", "Jill called Sarah.", "She sent some old pictures."]}, {"instance_id": "samsum-248", "summary": "Mark told his sister that Mary is doing an online job. Mark's sister is contacting people to confirm it. Mark thinks she's jealous. Mary hates Mark's sister.", "summary_trees": ["# ::snt Mark told his sister that Mary is doing an online job.\n(t / tell-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Mark\"))\n      :ARG1 (d / do-02\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Mary\"))\n            :ARG1 (j / job\n                  :medium (o / online)))\n      :ARG2 (p3 / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 p\n                  :ARG2 (s / sister))))", "# ::snt Mark's sister is contacting people to confirm it.\n(c / contact-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (p2 / person\n                        :name (n / name\n                              :op1 \"Mark\"))\n                  :ARG2 (s / sister)))\n      :ARG1 (p3 / person)\n      :purpose (c2 / confirm-01\n            :ARG0 p\n            :ARG1 (ii / it)))", "# ::snt Mark thinks she's jealous.\n(t / think-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Mark\"))\n      :ARG1 (j / jealous-02\n            :ARG0 (s / she)))", "# ::snt Mary hates Mark's sister.\n(h / hate-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Mary\"))\n      :ARG1 (p2 / person\n            :ARG0-of (h2 / have-rel-role-91\n                  :ARG1 (p3 / person\n                        :name (n2 / name\n                              :op1 \"Mark\"))\n                  :ARG2 (s / sister))))"], "tree": ["(h / have-rel-role-91\n   :ARG1 (p / person :name (n / name :op1 \"Mark\"))\n   :ARG2 (s / sister))", "(d / do-02\n   :ARG1 (j / job\n            :medium (o / online)))", "(d / do-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Mary\")))", "(d / do-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Mary\"))\n   :ARG1 (j / job\n            :medium (o / online)))", "(d / do-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Mary\"))\n   :ARG1 (j / job\n            :medium (o / online)))", "(t / tell-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mark\"))\n   :ARG1 (d / do-02\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Mary\"))\n            :ARG1 (j / job\n                     :medium (o / online)))\n   :ARG2 (p3 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 p\n                      :ARG2 (s / sister))))", "(t / tell-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mark\"))\n   :ARG1 (d / do-02\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Mary\"))\n            :ARG1 (j / job\n                     :medium (o / online)))\n   :ARG2 (p3 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 p\n                      :ARG2 (s / sister))))", "(h / have-rel-role-91\n   :ARG1 (p / person :name (n / name :op1 \"Mark\"))\n   :ARG2 (s / sister))", "(h / have-rel-role-91\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Mark\"))\n   :ARG2 (s / sister))", "(c / contact-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :name (n / name\n                                        :op1 \"Mark\"))\n                     :ARG2 (s / sister))))", "(c / contact-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :name (n / name\n                                        :op1 \"Mark\"))\n                     :ARG2 (s / sister)))\n   :ARG1 (p3 / person))", "(c / contact-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :name (n / name\n                                        :op1 \"Mark\"))\n                     :ARG2 (s / sister)))\n   :ARG1 (p3 / person)\n   :purpose (c2 / confirm-01\n                :ARG0 p\n                :ARG1 (ii / it)))", "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mark\"))\n   :ARG1 (j / jealous-02\n            :ARG0 (s / she)))", "(h2 / have-rel-role-91\n    :ARG1 (p3 / person\n              :name (n2 / name\n                        :op1 \"Mark\"))\n    :ARG2 (s / sister))", "(h / hate-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mary\"))\n   :ARG1 (p2 / person\n             :ARG0 (h2 / have-rel-role-91\n                       :ARG1 (p3 / person\n                                 :name (n2 / name\n                                           :op1 \"Mark\"))\n                       :ARG2 (s / sister))))", "(h / hate-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mary\"))\n   :ARG1 (p2 / person\n             :ARG0 (h2 / have-rel-role-91\n                       :ARG1 (p3 / person\n                                 :name (n2 / name\n                                           :op1 \"Mark\"))\n                       :ARG2 (s / sister))))"], "smus": ["Mark's sister", "Doing an online job.", "Mary is doing.", "Mary is doing an online job.", "Mary is doing an online job.", "Mark told his sister that Mary was doing an online job.", "Mark told his sister that Mary was doing an online job.", "Mark's sister", "Mark's sister", "Mark's sister is contacting.", "Mark's sister is contacting people.", "Mark's sister is contacting people to confirm it.", "Mark thinks she's jealous.", "Mark's sister", "Mary hates Mark's sister.", "Mary hates Mark's sister."]}, {"instance_id": "samsum-249", "summary": "Sam wants to buy a custom dress as a surprise for his wife. It should be black and elegant. The store employee sent him some pictures for reference. Sam decided on the features he likes. His product number is 898998 and he will place the order on the company's website.", "summary_trees": ["# ::snt Sam wants to buy a custom dress as a surprise for his wife.\n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Sam\"))\n      :ARG1 (b / buy-01\n            :ARG0 p\n            :ARG1 (d / dress\n                  :ARG1-of (c / custom-01))\n            :ARG4 (s / surprise-01\n                  :ARG1 (p2 / person\n                        :ARG0-of (h / have-rel-role-91\n                              :ARG1 p\n                              :ARG2 (w2 / wife))))))", "# ::snt It should be black and elegant.\n(r / recommend-01\n      :ARG1 (a / and\n            :op1 (b / black-05\n                  :ARG1 (ii / it))\n            :op2 (e / elegant\n                  :domain ii)))", "# ::snt The store employee sent him some pictures for reference.\n(s / send-01\n      :ARG0 (p / person\n            :ARG1-of (e / employ-01\n                  :ARG0 (s2 / store)))\n      :ARG1 (p2 / picture\n            :quant (s3 / some))\n      :ARG2 (h / he)\n      :purpose (r / reference-04\n            :ARG0 h\n            :ARG1 p2))", "# ::snt Sam decided on the features he likes.\n(d / decide-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Sam\"))\n      :ARG1 (f / feature\n            :ARG1-of (l / like-01\n                  :ARG0 p)))", "# ::snt His product number is 898998 and he will place the order on the company's website.\n(a / and\n      :op1 (n / number\n            :value 898998\n            :mod (p / product)\n            :poss (h / he))\n      :op2 (p2 / place-01\n            :ARG0 h\n            :ARG1 (o / order-02)\n            :ARG2 (w / website\n                  :poss (c / company))))"], "tree": ["(h / have-rel-role-91\n   :ARG1 (p / person :name (n / name :op1 \"Sam\"))\n   :ARG2 (w2 / wife))", "(b / buy-01\n   :ARG0 (p / person :name (n / name :op1 \"Sam\"))\n   :ARG1 (d / dress\n            :ARG1 (c / custom-01))\n   :ARG4 (s / surprise-01\n            :ARG1 (p2 / person\n                      :ARG0 (h / have-rel-role-91\n                               :ARG1 p\n                               :ARG2 (w2 / wife)))))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sam\"))\n   :ARG1 (b / buy-01\n            :ARG0 p\n            :ARG1 (d / dress\n                     :ARG1 (c / custom-01))\n            :ARG4 (s / surprise-01\n                     :ARG1 (p2 / person\n                               :ARG0 (h / have-rel-role-91\n                                        :ARG1 p\n                                        :ARG2 (w2 / wife))))))", "(r / recommend-01\n   :ARG1 (e / elegant\n            :domain (ii / it)))", "(r / recommend-01\n   :ARG1 (e / elegant\n            :domain (ii / it)))", "(r / recommend-01\n   :ARG1 (b / black-05\n            :ARG1 (ii / it)))", "(r / recommend-01\n   :ARG1 (b / black-05\n            :ARG1 (ii / it)))", "(r / recommend-01\n   :ARG1 (a / and\n            :op1 (b / black-05\n                    :ARG1 (ii / it))\n            :op2 (e / elegant\n                    :domain ii)))", "(r / recommend-01\n   :ARG1 (a / and\n            :op1 (b / black-05\n                    :ARG1 (ii / it))\n            :op2 (e / elegant\n                    :domain ii)))", "(s / send-01\n   :ARG1 (p2 / picture\n             :quant (s3 / some))\n   :ARG2 (h / he))", "(s / send-01\n   :ARG0 (p / person\n            :ARG1 (e / employ-01\n                     :ARG0 (s2 / store)))\n   :ARG1 (p2 / picture\n             :quant (s3 / some)))", "(s / send-01\n   :ARG1 (p2 / picture\n             :quant (s3 / some))\n   :ARG2 (h / he)\n   :purpose (r / reference-04\n               :ARG0 h\n               :ARG1 p2))", "(s / send-01\n   :ARG0 (p / person\n            :ARG1 (e / employ-01\n                     :ARG0 (s2 / store)))\n   :ARG1 (p2 / picture\n             :quant (s3 / some))\n   :ARG2 (h / he))", "(s / send-01\n   :ARG0 (p / person\n            :ARG1 (e / employ-01\n                     :ARG0 (s2 / store)))\n   :ARG1 (p2 / picture\n             :quant (s3 / some))\n   :purpose (r / reference-04\n               :ARG0 (h / he)\n               :ARG1 p2))", "(s / send-01\n   :ARG0 (p / person\n            :ARG1 (e / employ-01\n                     :ARG0 (s2 / store)))\n   :ARG1 (p2 / picture\n             :quant (s3 / some))\n   :ARG2 (h / he)\n   :purpose (r / reference-04\n               :ARG0 h\n               :ARG1 p2))", "(s / send-01\n   :ARG0 (p / person\n            :ARG1 (e / employ-01\n                     :ARG0 (s2 / store)))\n   :ARG1 (p2 / picture\n             :quant (s3 / some))\n   :ARG2 (h / he)\n   :purpose (r / reference-04\n               :ARG0 h\n               :ARG1 p2))", "(d / decide-01\n   :ARG1 (f / feature\n            :ARG1 (l / like-01\n                     :ARG0 (p / person :name (n / name :op1 \"Sam\")))))", "(d / decide-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sam\"))\n   :ARG1 (f / feature\n            :ARG1 (l / like-01\n                     :ARG0 p)))", "(d / decide-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sam\"))\n   :ARG1 (f / feature\n            :ARG1 (l / like-01\n                     :ARG0 p)))", "(p2 / place-01\n    :ARG1 (o / order-02)\n    :ARG2 (w / website\n             :poss (c / company)))", "(p2 / place-01\n    :ARG0 (h / he)\n    :ARG1 (o / order-02)\n    :ARG2 (w / website\n             :poss (c / company)))", "(p2 / place-01\n    :ARG0 (h / he)\n    :ARG1 (o / order-02)\n    :ARG2 (w / website\n             :poss (c / company)))"], "smus": ["Sam's wife", "Sam would buy a custom dress for his wife's surprise.", "Sam wants to buy a custom dress for his wife's surprise.", "It should be elegant.", "It should be elegant.", "It should be black.", "It should be black.", "It should be black and elegant.", "It should be black and elegant.", "Some pictures were sent to him.", "The store employee sent some pictures.", "He sent him some pictures for reference.", "The store employee sent him some pictures.", "The store employee sent him some pictures for reference.", "The store employee sent him some pictures for reference.", "The store employee sent him some pictures for reference.", "Decided on features Sam likes.", "Sam decided what features he likes.", "Sam decided what features he likes.", "Place an order through the company's website.", "He would place the order through the company website.", "He would place the order through the company website."]}, {"instance_id": "samsum-250", "summary": "There was a crowd outside the bookshop today. Cole Grant, who writes about vampires, was allegedly in the bookshop signing his books.", "summary_trees": ["# ::snt There was a crowd outside the bookshop today.\n(c / crowd\n      :location (o / outside\n            :op1 (b / bookshop))\n      :time (t / today))", "# ::snt Cole Grant, who writes about vampires, was allegedly in the bookshop signing his books.\n(b / be-located-at-91\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Cole\"\n                  :op2 \"Grant\")\n            :ARG0-of (w / write-01\n                  :ARG3 (v / vampire)))\n      :ARG2 (b2 / bookshop)\n      :purpose (s / sign-01\n            :ARG0 p\n            :ARG1 (b3 / book\n                  :poss p))\n      :ARG1-of (a / allege-01))"], "tree": ["(c / crowd\n   :location (o / outside\n                :op1 (b / bookshop))\n   :time (t / today))", "(s / sign-01\n   :ARG0 (p / person :name (n / name :op1 \"Cole\" :op2 \"Grant\")))\n   :ARG1 (b3 / book\n             :poss p))", "(s / sign-01\n   :ARG0 (p / person :name (n / name :op1 \"Cole\" :op2 \"Grant\")))\n   :ARG1 (b3 / book\n             :poss p))", "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Cole\"\n                     :op2 \"Grant\")\n            :ARG0 (w / write-01\n                     :ARG3 (v / vampire)))\n   :ARG2 (b2 / bookshop))", "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Cole\"\n                     :op2 \"Grant\")\n            :ARG0 (w / write-01\n                     :ARG3 (v / vampire)))\n   :ARG2 (b2 / bookshop)\n   :purpose (s / sign-01\n               :ARG0 p\n               :ARG1 (b3 / book\n                         :poss p))\n   :ARG1 (a / allege-01))"], "smus": ["There was a crowd outside the bookshop today.", "Cole Grant is signing his books.", "Cole Grant is signing his books.", "vampire writer Cole Grant in the bookshop.", "allegedly, Cole Grant, who writes vampires, is in a bookshop signing his books."]}, {"instance_id": "samsum-251", "summary": "It's derby day today. Titus supports Manchester United. Julius supports City.", "summary_trees": ["# ::snt It's derby day today.\n(d / day\n      :mod (d2 / derby)\n      :time (t / today))", "# ::snt Titus supports Manchester United.\n(s / support-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Titus\"))\n      :ARG1 (t / team\n            :name (n2 / name\n                  :op1 \"Manchester\"\n                  :op2 \"United\")))", "# ::snt Julius supports City.\n(s / support-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Julius\"))\n      :ARG1 (c / city))"], "tree": ["(d / day\n   :mod (d2 / derby)\n   :time (t / today))", "(s / support-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Titus\")))", "(s / support-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Titus\"))\n   :ARG1 (t / team\n            :name (n2 / name\n                      :op1 \"Manchester\"\n                      :op2 \"United\")))", "(s / support-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Titus\"))\n   :ARG1 (t / team\n            :name (n2 / name\n                      :op1 \"Manchester\"\n                      :op2 \"United\")))", "(s / support-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Julius\")))", "(s / support-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Julius\"))\n   :ARG1 (c / city))", "(s / support-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Julius\"))\n   :ARG1 (c / city))"], "smus": ["Today is derby day.", "Titus supports.", "Titus supports Manchester United", "Titus supports Manchester United", "Julius supports.", "Julius supports the City.", "Julius supports the City."]}, {"instance_id": "samsum-252", "summary": "Thomas will buy butter. He is on his way home. Jack is making a mushroom soup, but will wait with cooking until Thomas comes.", "summary_trees": ["# ::snt Thomas will buy butter.\n(b / buy-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Thomas\"))\n      :ARG1 (b2 / butter))", "# ::snt He is on his way home.\n(b / be-destined-for-91\n      :ARG1 (h / he)\n      :ARG2 (h2 / home))", "# ::snt Jack is making a mushroom soup, but will wait with cooking until Thomas comes.\n(c / contrast-01\n      :ARG1 (m / make-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Jack\"))\n            :ARG1 (s / soup\n                  :mod (m2 / mushroom)))\n      :ARG2 (w / wait-01\n            :ARG1 p\n            :ARG2 (c2 / cook-01\n                  :ARG0 p)\n            :time (u / until\n                  :op1 (c3 / come-01\n                        :ARG1 (p2 / person\n                              :name (n2 / name\n                                    :op1 \"Thomas\"))))))"], "tree": ["(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Thomas\")))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Thomas\"))\n   :ARG1 (b2 / butter))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Thomas\"))\n   :ARG1 (b2 / butter))", "(w / wait-01\n   :ARG1 (p / person :name (n / name :op1 \"Jack\"))\n   :ARG2 (c2 / cook-01\n             :ARG0 p))", "(m / make-01\n   :ARG1 (s / soup\n            :mod (m2 / mushroom)))", "(w / wait-01\n   :time (u / until\n            :op1 (c3 / come-01)))", "(w / wait-01\n   :time (u / until\n            :op1 (c3 / come-01)))", "(w / wait-01\n   :time (u / until\n            :op1 (c3 / come-01)))", "(c3 / come-01\n    :ARG1 (p2 / person\n              :name (n2 / name\n                        :op1 \"Thomas\")))", "(c3 / come-01\n    :ARG1 (p2 / person\n              :name (n2 / name\n                        :op1 \"Thomas\")))", "(m / make-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jack\"))\n   :ARG1 (s / soup\n            :mod (m2 / mushroom)))", "(m / make-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jack\"))\n   :ARG1 (s / soup\n            :mod (m2 / mushroom)))", "(w / wait-01\n   :ARG1 (p / person :name (n / name :op1 \"Jack\"))\n   :time (u / until\n            :op1 (c3 / come-01\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Thomas\")))))", "(w / wait-01\n   :ARG1 (p / person :name (n / name :op1 \"Jack\"))\n   :ARG2 (c2 / cook-01\n             :ARG0 p)\n   :time (u / until\n            :op1 (c3 / come-01\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Thomas\")))))", "(w / wait-01\n   :ARG1 (p / person :name (n / name :op1 \"Jack\"))\n   :ARG2 (c2 / cook-01\n             :ARG0 p)\n   :time (u / until\n            :op1 (c3 / come-01\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Thomas\")))))", "(c / contrast-01\n   :ARG1 (m / make-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Jack\"))\n            :ARG1 (s / soup\n                     :mod (m2 / mushroom)))\n   :ARG2 (w / wait-01\n            :ARG1 p\n            :ARG2 (c2 / cook-01\n                      :ARG0 p)\n            :time (u / until\n                     :op1 (c3 / come-01\n                              :ARG1 (p2 / person\n                                        :name (n2 / name\n                                                  :op1 \"Thomas\"))))))", "(c / contrast-01\n   :ARG1 (m / make-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Jack\"))\n            :ARG1 (s / soup\n                     :mod (m2 / mushroom)))\n   :ARG2 (w / wait-01\n            :ARG1 p\n            :ARG2 (c2 / cook-01\n                      :ARG0 p)\n            :time (u / until\n                     :op1 (c3 / come-01\n                              :ARG1 (p2 / person\n                                        :name (n2 / name\n                                                  :op1 \"Thomas\"))))))"], "smus": ["Thomas will buy.", "Thomas will buy butter.", "Thomas will buy butter.", "Wait for Jack to cook.", "Making mushroom soup.", "Wait until it comes.", "Wait until it comes.", "Wait until it comes.", "comes Thomas.", "comes Thomas.", "Jack making mushroom soup.", "Jack making mushroom soup.", "Wait until Thomas comes, Jack.", "Jack will wait for the cook until Thomas comes.", "Jack will wait for the cook until Thomas comes.", "Jack is making mushroom soup, but wait until Thomas comes to cook.", "Jack is making mushroom soup, but wait until Thomas comes to cook."]}, {"instance_id": "samsum-253", "summary": "Jim tracks Finn's package number 45678 which will be delivered to him tomorrow. ", "summary_trees": ["# ::snt Jim tracks Finn's package number 45678 which will be delivered to him tomorrow.\n(t / track-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jim\"))\n      :ARG1 (n2 / number\n            :mod 45678\n            :poss (p2 / person\n                  :name (n3 / name\n                        :op1 \"Finn\"))\n            :ARG1-of (d / deliver-01\n                  :ARG2 p\n                  :time (t2 / tomorrow))\n            :mod (p3 / package)))"], "tree": ["(t / track-01\n   :ARG1 (n2 / number\n             :mod 45678\n             :poss (p2 / person\n                       :name (n3 / name\n                                 :op1 \"Finn\"))\n             :ARG1 (d / deliver-01\n                      :ARG2 (p / person :name (n / name :op1 \"Jim\"))\n                      :time (t2 / tomorrow))\n             :mod (p3 / package)))", "(t / track-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jim\"))\n   :ARG1 (n2 / number\n             :mod 45678\n             :poss (p2 / person\n                       :name (n3 / name\n                                 :op1 \"Finn\"))\n             :ARG1 (d / deliver-01\n                      :ARG2 p\n                      :time (t2 / tomorrow))\n             :mod (p3 / package)))", "(t / track-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jim\"))\n   :ARG1 (n2 / number\n             :mod 45678\n             :poss (p2 / person\n                       :name (n3 / name\n                                 :op1 \"Finn\"))\n             :ARG1 (d / deliver-01\n                      :ARG2 p\n                      :time (t2 / tomorrow))\n             :mod (p3 / package)))"], "smus": ["Finn's number 45678 for Jim to be delivered tomorrow is tracked.", "Jim tracks Finn's package number 45678 for delivery tomorrow.", "Jim tracks Finn's package number 45678 for delivery tomorrow."]}, {"instance_id": "samsum-254", "summary": "Alex is coming for a drink tonight at 8 to Zayna's place.", "summary_trees": ["# ::snt Alex is coming for a drink tonight at 8 to Zayna's place.\n(c / come-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Alex\"))\n      :ARG4 (p2 / place\n            :poss (p3 / person\n                  :name (n2 / name\n                        :op1 \"Zayna\")))\n      :purpose (d / drink-01\n            :ARG0 p)\n      :time (d2 / date-entity\n            :time \"18:00\"\n            :dayperiod (n3 / night)\n            :mod (t / today)))"], "tree": ["(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Alex\")))", "(c / come-01\n   :time (d2 / date-entity\n             :time \"18:00\"\n             :dayperiod (n3 / night)\n             :mod (t / today)))", "(c / come-01\n   :time (d2 / date-entity\n             :time \"18:00\"\n             :dayperiod (n3 / night)\n             :mod (t / today)))", "(c / come-01\n   :purpose (d / drink-01)\n   :time (d2 / date-entity\n             :time \"18:00\"\n             :dayperiod (n3 / night)\n             :mod (t / today)))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Alex\"))\n   :time (d2 / date-entity\n             :time \"18:00\"\n             :dayperiod (n3 / night)\n             :mod (t / today)))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Alex\"))\n   :ARG4 (p2 / place\n             :poss (p3 / person\n                       :name (n2 / name\n                                 :op1 \"Zayna\"))))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Alex\"))\n   :ARG4 (p2 / place\n             :poss (p3 / person\n                       :name (n2 / name\n                                 :op1 \"Zayna\")))\n   :time (d2 / date-entity\n             :time \"18:00\"\n             :dayperiod (n3 / night)\n             :mod (t / today)))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Alex\"))\n   :ARG4 (p2 / place\n             :poss (p3 / person\n                       :name (n2 / name\n                                 :op1 \"Zayna\")))\n   :purpose (d / drink-01\n               :ARG0 p)\n   :time (d2 / date-entity\n             :time \"18:00\"\n             :dayperiod (n3 / night)\n             :mod (t / today)))"], "smus": ["Coming Alex.", "Coming tonight at 8pm.", "Coming tonight at 8pm.", "Coming for a drink at 8 tonight.", "Alex is coming tonight at 8pm.", "Alex is coming to Zayna's place.", "Alex is coming to Zayna's place at 8pm tonight.", "Alex is coming to Zayna's place for a drink at 8pm tonight."]}, {"instance_id": "samsum-255", "summary": "Christine is sick and won't come to school tomorrow. Annie will leave Theraflu sachets in a mailbox. Christine doesn't want to get her sick.", "summary_trees": ["# ::snt Christine is sick and won't come to school tomorrow.\n(a / and\n      :op1 (s / sick-05\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Christine\")))\n      :op2 (c / come-01\n            :polarity -\n            :ARG1 p\n            :ARG4 (s2 / school)\n            :time (t / tomorrow)))", "# ::snt Annie will leave Theraflu sachets in a mailbox.\n(l / leave-12\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Annie\"))\n      :ARG1 (s / sachet\n            :mod (p2 / product\n                  :name (n2 / name\n                        :op1 \"Theraflu\")))\n      :location (m / mailbox))", "# ::snt Christine doesn't want to get her sick.\n(w / want-01\n      :polarity -\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Christine\"))\n      :ARG1 (g / get-04\n            :ARG0 p\n            :ARG1 (s / sick-05\n                  :ARG1 (s2 / she))))"], "tree": ["(c / come-01\n   :polarity -\n   :time (t / tomorrow))", "(s / sick-05\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Christine\")))", "(s / sick-05\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Christine\")))", "(c / come-01\n   :polarity -\n   :ARG1 (p / person :name (n / name :op1 \"Christine\"))\n   :ARG4 (s2 / school)\n   :time (t / tomorrow))", "(l / leave-12\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Annie\"))\n   :ARG1 (s / sachet\n            :mod (p2 / product\n                     :name (n2 / name\n                               :op1 \"Theraflu\")))\n   :location (m / mailbox))", "(w / want-01\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Christine\"))\n   :ARG1 (g / get-04\n            :ARG0 p\n            :ARG1 (s / sick-05\n                     :ARG1 (s2 / she))))"], "smus": ["It doesn't come tomorrow.", "Christine is sick.", "Christine is sick.", "Christine won't come to school tomorrow.", "Annie left the thermoflu sachets in the mailbox.", "Christine doesn't want to get sick."]}, {"instance_id": "samsum-256", "summary": "Ela is not taking Harry's phone calls. Cindy calls Ela at Harry's request.", "summary_trees": ["# ::snt Ela is not taking Harry's phone calls.\n(c / call-02\n      :polarity -\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Harry\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Ela\"))\n      :medium (p3 / phone))", "# ::snt Cindy calls Ela at Harry's request.\n(c / call-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Cindy\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Ela\"))\n      :ARG1-of (r / request-01\n            :ARG0 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Harry\"))))"], "tree": ["(c / call-02\n   :polarity -\n   :medium (p3 / phone))", "(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Harry\")))", "(c / call-02\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Ela\")))", "(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Harry\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Ela\")))", "(c / call-02\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Ela\")))", "(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Cindy\")))", "(c / call-02\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Ela\")))", "(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Cindy\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Ela\")))"], "smus": ["Not phone calls.", "Harry calls.", "Calls to Ela.", "Harry calls Ela.", "Calls to Ela.", "Cindy calls.", "Calls Ela.", "Cindy calls Ela."]}, {"instance_id": "samsum-257", "summary": "Alex will go swimming toghether with Huda in two hours. ", "summary_trees": ["# ::snt Alex will go swimming toghether with Huda in two hours.\n(s / swim-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Alex\"))\n      :accompanier (p2 / person\n            :name (n2 / name\n                  :op1 \"Huda\"))\n      :time (a / after\n            :op1 (n3 / now)\n            :quant (t / temporal-quantity\n                  :quant 2\n                  :unit (h / hour))))"], "tree": ["(s / swim-01\n   :accompanier (p2 / person\n                    :name (n2 / name\n                              :op1 \"Huda\"))\n   :time (a / after\n            :op1 (n3 / now)\n            :quant (t / temporal-quantity\n                      :quant 2\n                      :unit (h / hour))))", "(s / swim-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Alex\"))\n   :accompanier (p2 / person\n                    :name (n2 / name\n                              :op1 \"Huda\"))\n   :time (a / after\n            :op1 (n3 / now)\n            :quant (t / temporal-quantity\n                      :quant 2\n                      :unit (h / hour))))"], "smus": ["2 hours from now, i'll be swimming with humda.", "In 2 hours, Alex will be swimming with Husda."]}, {"instance_id": "samsum-258", "summary": "Peter starts his new job on the 6th. Peter wanted a free babysitter. Aggie will arrange for a babysitter. ", "summary_trees": ["# ::snt Peter starts his new job on the 6th.\n(s / start-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Peter\"))\n      :ARG1 (j / job\n            :poss p\n            :ARG1-of (n2 / new-01))\n      :time (d / date-entity\n            :day 6))", "# ::snt Peter wanted a free babysitter.\n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Peter\"))\n      :ARG1 (b / babysit-01\n            :ARG1-of (f / free-03)))", "# ::snt Aggie will arrange for a babysitter.\n(a / arrange-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Aggie\"))\n      :ARG1 (b / babysitter))"], "tree": ["(s / start-01\n   :ARG1 (j / job\n            :poss (p / person :name (n / name :op1 \"Peter\"))\n            :ARG1 (n2 / new-01)))", "(s / start-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Peter\")))", "(s / start-01\n   :ARG1 (j / job\n            :poss (p / person :name (n / name :op1 \"Peter\"))\n            :ARG1 (n2 / new-01))\n   :time (d / date-entity\n            :day 6))", "(s / start-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Peter\"))\n   :ARG1 (j / job\n            :poss p\n            :ARG1 (n2 / new-01)))", "(s / start-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Peter\"))\n   :ARG1 (j / job\n            :poss p\n            :ARG1 (n2 / new-01))\n   :time (d / date-entity\n            :day 6))", "(s / start-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Peter\"))\n   :ARG1 (j / job\n            :poss p\n            :ARG1 (n2 / new-01))\n   :time (d / date-entity\n            :day 6))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Peter\"))\n   :ARG1 (b / babysit-01\n            :ARG1 (f / free-03)))", "(a / arrange-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Aggie\")))", "(a / arrange-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Aggie\"))\n   :ARG1 (b / babysitter))", "(a / arrange-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Aggie\"))\n   :ARG1 (b / babysitter))"], "smus": ["Peter starts a new job.", "Peter starts.", "Peter starts a new job on the 6th.", "Peter starts his new job.", "Peter starts his new job on the 6th.", "Peter starts his new job on the 6th.", "Peter wanted free babysitting.", "Aggie would arrange.", "Aggie would arrange a babysitter.", "Aggie would arrange a babysitter."]}, {"instance_id": "samsum-259", "summary": "Ronnie uses three different bins for waste. He doesn't use straws, neither plastic bags. Clint and Ronnie agree that environment protection depends on the government. ", "summary_trees": ["# ::snt Ronnie uses three different bins for waste.\n(u / use-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Ronnie\"))\n      :ARG1 (b / bin\n            :quant 3\n            :ARG1-of (d / differ-02))\n      :ARG2 (w / waste))", "# ::snt He doesn't use straws, neither plastic bags.\n(u / use-01\n      :polarity -\n      :ARG0 (h / he)\n      :ARG1 (o / or\n            :op1 (s / straw)\n            :op2 (b / bag\n                  :mod (p / plastic))))", "# ::snt Clint and Ronnie agree that environment protection depends on the government.\n(a / agree-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Clint\"))\n      :ARG1 (d / depend-01\n            :ARG0 (p2 / protect-01\n                  :ARG1 (e / environment))\n            :ARG1 (g / government-organization\n                  :ARG0-of (g2 / govern-01)))\n      :ARG2 (p3 / person\n            :name (n2 / name\n                  :op1 \"Ronnie\")))"], "tree": ["(u / use-01\n   :ARG1 (b / bin\n            :quant 3\n            :ARG1 (d / differ-02)))", "(u / use-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ronnie\")))", "(u / use-01\n   :ARG1 (b / bin\n            :quant 3\n            :ARG1 (d / differ-02))\n   :ARG2 (w / waste))", "(u / use-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ronnie\"))\n   :ARG1 (b / bin\n            :quant 3\n            :ARG1 (d / differ-02)))", "(u / use-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ronnie\"))\n   :ARG1 (b / bin\n            :quant 3\n            :ARG1 (d / differ-02))\n   :ARG2 (w / waste))", "(u / use-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ronnie\"))\n   :ARG1 (b / bin\n            :quant 3\n            :ARG1 (d / differ-02))\n   :ARG2 (w / waste))", "(u / use-01\n   :polarity -\n   :ARG0 (h / he)\n   :ARG1 (o / or\n            :op1 (s / straw)\n            :op2 (b / bag\n                    :mod (p / plastic))))", "(a / agree-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Clint\")))", "(d / depend-01\n   :ARG0 (p2 / protect-01\n             :ARG1 (e / environment))\n   :ARG1 (g / government-organization\n            :ARG0 (g2 / govern-01)))", "(d / depend-01\n   :ARG0 (p2 / protect-01\n             :ARG1 (e / environment))\n   :ARG1 (g / government-organization\n            :ARG0 (g2 / govern-01)))", "(a / agree-01\n   :ARG1 (d / depend-01\n            :ARG0 (p2 / protect-01\n                      :ARG1 (e / environment))\n            :ARG1 (g / government-organization\n                     :ARG0 (g2 / govern-01))))", "(a / agree-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Clint\"))\n   :ARG1 (d / depend-01\n            :ARG0 (p2 / protect-01\n                      :ARG1 (e / environment))\n            :ARG1 (g / government-organization\n                     :ARG0 (g2 / govern-01)))\n   :ARG2 (p3 / person\n             :name (n2 / name\n                       :op1 \"Ronnie\")))"], "smus": ["uses three different bins.", "Ronnie uses...", "3 different bins for waste.", "Ronnie uses three different bins.", "Ronnie uses three different bins for waste.", "Ronnie uses three different bins for waste.", "He doesn't use straws or plastic bags.", "Clint agrees.", "Environmental protection depends on government.", "Environmental protection depends on government.", "Agree that the government's role is to protect the environment.", "Clint and Ronnie agree that environmental protection depends on government."]}, {"instance_id": "samsum-260", "summary": "Tom will meet Ben in the Oval Room at 2pm and tells him to bring the papers. ", "summary_trees": ["# ::snt Tom will meet Ben in the Oval Room at 2pm and tells him to bring the papers.\n(a / and\n      :op1 (m / meet-03\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Tom\"))\n            :ARG1 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Ben\"))\n            :location (r / room\n                  :name (n3 / name\n                        :op1 \"Oval\"\n                        :op2 \"Room\"))\n            :time (d / date-entity\n                  :time \"14:00\"))\n      :op2 (t / tell-01\n            :ARG0 p\n            :ARG1 (b / bring-01\n                  :ARG0 p2\n                  :ARG1 (p3 / paper))\n            :ARG2 p2))"], "tree": ["(m / meet-03\n   :time (d / date-entity\n            :time \"14:00\"))", "(m / meet-03\n   :time (d / date-entity\n            :time \"14:00\"))", "(m / meet-03\n   :time (d / date-entity\n            :time \"14:00\"))", "(m / meet-03\n   :time (d / date-entity\n            :time \"14:00\"))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tom\")))", "(m / meet-03\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Ben\")))", "(t / tell-01\n   :ARG0 (p / person :name (n / name :op1 \"Tom\"))\n   :ARG1 (b / bring-01\n            :ARG0 (p2 / person :name (n2 / name :op1 \"Ben\"))\n            :ARG1 (p3 / paper)))", "(m / meet-03\n   :location (r / room\n                :name (n3 / name\n                          :op1 \"Oval\"\n                          :op2 \"Room\")))", "(m / meet-03\n   :location (r / room\n                :name (n3 / name\n                          :op1 \"Oval\"\n                          :op2 \"Room\")))", "(m / meet-03\n   :location (r / room\n                :name (n3 / name\n                          :op1 \"Oval\"\n                          :op2 \"Room\")))", "(m / meet-03\n   :location (r / room\n                :name (n3 / name\n                          :op1 \"Oval\"\n                          :op2 \"Room\")))", "(t / tell-01\n   :ARG0 (p / person :name (n / name :op1 \"Tom\"))\n   :ARG1 (b / bring-01\n            :ARG0 (p2 / person :name (n2 / name :op1 \"Ben\"))\n            :ARG1 (p3 / paper))\n   :ARG2 p2)", "(t / tell-01\n   :ARG0 (p / person :name (n / name :op1 \"Tom\"))\n   :ARG1 (b / bring-01\n            :ARG0 (p2 / person :name (n2 / name :op1 \"Ben\"))\n            :ARG1 (p3 / paper))\n   :ARG2 p2)", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tom\"))\n   :time (d / date-entity\n            :time \"14:00\"))", "(m / meet-03\n   :location (r / room\n                :name (n3 / name\n                          :op1 \"Oval\"\n                          :op2 \"Room\"))\n   :time (d / date-entity\n            :time \"14:00\"))", "(m / meet-03\n   :location (r / room\n                :name (n3 / name\n                          :op1 \"Oval\"\n                          :op2 \"Room\"))\n   :time (d / date-entity\n            :time \"14:00\"))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tom\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Ben\")))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tom\"))\n   :location (r / room\n                :name (n3 / name\n                          :op1 \"Oval\"\n                          :op2 \"Room\")))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tom\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Ben\"))\n   :time (d / date-entity\n            :time \"14:00\"))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tom\"))\n   :location (r / room\n                :name (n3 / name\n                          :op1 \"Oval\"\n                          :op2 \"Room\"))\n   :time (d / date-entity\n            :time \"14:00\"))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tom\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Ben\"))\n   :location (r / room\n                :name (n3 / name\n                          :op1 \"Oval\"\n                          :op2 \"Room\")))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tom\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Ben\"))\n   :location (r / room\n                :name (n3 / name\n                          :op1 \"Oval\"\n                          :op2 \"Room\"))\n   :time (d / date-entity\n            :time \"14:00\"))"], "smus": ["Meet at 2:00pm", "Meet at 2:00pm", "Meet at 2:00pm", "Meet at 2:00pm", "Tom will meet.", "Meet Ben.", "Tom tells Ben to bring papers.", "Meet in the Oval Room.", "Meet in the Oval Room.", "Meet in the Oval Room.", "Meet in the Oval Room.", "Tom tells Ben to bring the papers.", "Tom tells Ben to bring the papers.", "Tom will meet at 2:00 p.m.", "Meet in the Oval Room at 2:00 pm.", "Meet in the Oval Room at 2:00 pm.", "Tom will meet Ben.", "Tom will meet in the oval room.", "Tom will meet Ben at 2:00 p.m.", "Tom will meet in the oval room at 2:00 p.m.", "Tom and Ben will meet in the oval room.", "Tom and Ben will meet in the oval room at 2:00 p.m."]}, {"instance_id": "samsum-261", "summary": "Vincent's new lamp should be ready to be picked up on Tuesday.", "summary_trees": ["# ::snt Vincent's new lamp should be ready to be picked up on Tuesday.\n(r / recommend-01\n      :ARG1 (r2 / ready-02\n            :ARG1 (l / lamp\n                  :poss (p / person\n                        :name (n / name\n                              :op1 \"Vincent\"))\n                  :ARG1-of (n2 / new-01))\n            :ARG2 (p2 / pick-up-04\n                  :ARG1 l\n                  :time (d / date-entity\n                        :weekday (t / tuesday)))))"], "tree": ["(p2 / pick-up-04\n    :time (d / date-entity\n             :weekday (t / tuesday)))", "(r2 / ready-02\n    :ARG1 (l / lamp\n             :poss (p / person\n                      :name (n / name\n                               :op1 \"Vincent\"))\n             :ARG1 (n2 / new-01)))", "(r2 / ready-02\n    :ARG1 (l / lamp\n             :poss (p / person\n                      :name (n / name\n                               :op1 \"Vincent\"))\n             :ARG1 (n2 / new-01))\n    :ARG2 (p2 / pick-up-04\n              :ARG1 l\n              :time (d / date-entity\n                       :weekday (t / tuesday))))", "(r2 / ready-02\n    :ARG1 (l / lamp\n             :poss (p / person\n                      :name (n / name\n                               :op1 \"Vincent\"))\n             :ARG1 (n2 / new-01))\n    :ARG2 (p2 / pick-up-04\n              :ARG1 l\n              :time (d / date-entity\n                       :weekday (t / tuesday))))", "(r / recommend-01\n   :ARG1 (r2 / ready-02\n             :ARG1 (l / lamp\n                      :poss (p / person\n                               :name (n / name\n                                        :op1 \"Vincent\"))\n                      :ARG1 (n2 / new-01))\n             :ARG2 (p2 / pick-up-04\n                       :ARG1 l\n                       :time (d / date-entity\n                                :weekday (t / tuesday)))))", "(r / recommend-01\n   :ARG1 (r2 / ready-02\n             :ARG1 (l / lamp\n                      :poss (p / person\n                               :name (n / name\n                                        :op1 \"Vincent\"))\n                      :ARG1 (n2 / new-01))\n             :ARG2 (p2 / pick-up-04\n                       :ARG1 l\n                       :time (d / date-entity\n                                :weekday (t / tuesday)))))"], "smus": ["Picked up Tuesday.", "Vincent's lamp is ready for a new.", "Vincent's new lamp was ready to be picked up Tuesday.", "Vincent's new lamp was ready to be picked up Tuesday.", "Vincent's new lamp should be ready to be picked up Tuesday.", "Vincent's new lamp should be ready to be picked up Tuesday."]}, {"instance_id": "samsum-262", "summary": "Paula and Ralph will meet the new person in an hour. ", "summary_trees": ["# ::snt Paula and Ralph will meet the new person in an hour.\n(m / meet-03\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Paula\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Ralph\")))\n      :ARG1 (p3 / person\n            :ARG1-of (n3 / new-02))\n      :time (a2 / after\n            :op1 (n4 / now)\n            :quant (t / temporal-quantity\n                  :quant 1\n                  :unit (h / hour))))"], "tree": ["(m / meet-03\n   :time (a2 / after\n             :op1 (n4 / now)\n             :quant (t / temporal-quantity\n                       :quant 1\n                       :unit (h / hour))))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Paula\"))\n   :ARG1 (p3 / person\n             :ARG1 (n3 / new-02))\n   :time (a2 / after\n             :op1 (n4 / now)\n             :quant (t / temporal-quantity\n                       :quant 1\n                       :unit (h / hour))))", "(m / meet-03\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Ralph\"))\n   :ARG1 (p3 / person\n             :ARG1 (n3 / new-02))\n   :ARG1 p3\n   :time (a2 / after\n             :op1 (n4 / now)\n             :quant (t / temporal-quantity\n                       :quant 1\n                       :unit (h / hour))))", "(m / meet-03\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Paula\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Ralph\")))\n   :ARG1 (p3 / person\n             :ARG1 (n3 / new-02))\n   :time (a2 / after\n             :op1 (n4 / now)\n             :quant (t / temporal-quantity\n                       :quant 1\n                       :unit (h / hour))))"], "smus": ["The meeting will take place in an hour.", "Paula will meet the new person in an hour.", "Ralph will meet the new person in an hour.", "In an hour, Paula and Ralph will meet the new person."]}, {"instance_id": "samsum-263", "summary": "Celine is not at home, but she will call Cara before visiting her.", "summary_trees": ["# ::snt Celine is not at home, but she will call Cara before visiting her.\n(c / contrast-01\n      :ARG1 (b / be-located-at-91\n            :polarity -\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Celine\"))\n            :ARG2 (h / home))\n      :ARG2 (c2 / call-02\n            :ARG0 p\n            :ARG1 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Cara\"))\n            :time (b2 / before\n                  :op1 (v / visit-01\n                        :ARG0 p\n                        :ARG1 p2))))"], "tree": ["(c2 / call-02\n    :time (b2 / before\n              :op1 (v / visit-01)))", "(c2 / call-02\n    :time (b2 / before\n              :op1 (v / visit-01)))", "(c2 / call-02\n    :ARG1 (p2 / person\n              :name (n2 / name\n                        :op1 \"Cara\")))", "(c2 / call-02\n    :ARG0 (p / person :name (n / name :op1 \"Celine\"))\n    :ARG1 (p2 / person\n              :name (n2 / name\n                        :op1 \"Cara\")))", "(b / be-located-at-91\n   :polarity -\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Celine\"))\n   :ARG2 (h / home))", "(c2 / call-02\n    :ARG0 (p / person :name (n / name :op1 \"Celine\"))\n    :ARG1 (p2 / person\n              :name (n2 / name\n                        :op1 \"Cara\"))\n    :time (b2 / before\n              :op1 (v / visit-01\n                      :ARG0 p\n                      :ARG1 p2)))", "(c2 / call-02\n    :ARG0 (p / person :name (n / name :op1 \"Celine\"))\n    :ARG1 (p2 / person\n              :name (n2 / name\n                        :op1 \"Cara\"))\n    :time (b2 / before\n              :op1 (v / visit-01\n                      :ARG0 p\n                      :ARG1 p2)))", "(c / contrast-01\n   :ARG1 (b / be-located-at-91\n            :polarity -\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Celine\"))\n            :ARG2 (h / home))\n   :ARG2 (c2 / call-02\n             :ARG0 p\n             :ARG1 (p2 / person\n                       :name (n2 / name\n                                 :op1 \"Cara\"))\n             :time (b2 / before\n                       :op1 (v / visit-01\n                               :ARG0 p\n                               :ARG1 p2))))", "(c / contrast-01\n   :ARG1 (b / be-located-at-91\n            :polarity -\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Celine\"))\n            :ARG2 (h / home))\n   :ARG2 (c2 / call-02\n             :ARG0 p\n             :ARG1 (p2 / person\n                       :name (n2 / name\n                                 :op1 \"Cara\"))\n             :time (b2 / before\n                       :op1 (v / visit-01\n                               :ARG0 p\n                               :ARG1 p2))))"], "smus": ["Call before visit.", "Call before visit.", "Calling Cara.", "Celine calls Cara.", "Celine was not home.", "Celine called Cara before she visited her.", "Celine called Cara before she visited her.", "Celine was not home, but called Cara before she visited her.", "Celine was not home, but called Cara before she visited her."]}, {"instance_id": "samsum-264", "summary": "Marty thinks she has sprained her ankle. Marty wants to go to the doctor tomorrow. Christine will pick up Marcel from school today. Tomorrow Christine will take Marcel to school and Marty to the doctor. Marty will call the school. Christine and Marty will meet around 4. ", "summary_trees": ["# ::snt Marty thinks she has sprained her ankle.\n(t / think-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Marty\"))\n      :ARG1 (s / sprain-01\n            :ARG0 (s2 / she\n                  :part (a / ankle))\n            :ARG1 a))", "# ::snt Marty wants to go to the doctor tomorrow.\n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Marty\"))\n      :ARG1 (g / go-02\n            :ARG0 p\n            :ARG4 (d / doctor)\n            :time (t / tomorrow)))", "# ::snt Christine will pick up Marcel from school today.\n(p / pick-up-04\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Christine\"))\n      :ARG1 (p3 / person\n            :name (n2 / name\n                  :op1 \"Marcel\"))\n      :ARG2 (s / school)\n      :time (t / today))", "# ::snt Tomorrow Christine will take Marcel to school and Marty to the doctor.\n(a / and\n      :op1 (t / take-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Christine\"))\n            :ARG1 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Marcel\"))\n            :ARG3 (s / school))\n      :op2 (t2 / take-01\n            :ARG0 p\n            :ARG1 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Marty\"))\n            :ARG3 (d / doctor))\n      :time (t3 / tomorrow))", "# ::snt Marty will call the school.\n(c / call-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Marty\"))\n      :ARG1 (s / school))", "# ::snt Christine and Marty will meet around 4.\n(m / meet-03\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Christine\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Marty\")))\n      :time (a2 / around\n            :op1 (d / date-entity\n                  :time \"14:00\")))"], "tree": ["(s / sprain-01\n   :ARG0 (s2 / she\n             :part (a / ankle\n                      :ARG1-of s)))", "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Marty\"))\n   :ARG1 (s / sprain-01\n            :ARG0 (s2 / she\n                      :part (a / ankle\n                               :ARG1-of s))))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Marty\"))\n   :ARG1 (g / go-02\n            :ARG0 p\n            :ARG4 (d / doctor)\n            :time (t / tomorrow)))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Marty\"))\n   :ARG1 (g / go-02\n            :ARG0 p\n            :ARG4 (d / doctor)\n            :time (t / tomorrow)))", "(p / pick-up-04\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Christine\"))\n   :ARG1 (p3 / person\n             :name (n2 / name\n                       :op1 \"Marcel\")))", "(p / pick-up-04\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Christine\"))\n   :ARG1 (p3 / person\n             :name (n2 / name\n                       :op1 \"Marcel\"))\n   :time (t / today))", "(p / pick-up-04\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Christine\"))\n   :ARG1 (p3 / person\n             :name (n2 / name\n                       :op1 \"Marcel\"))\n   :ARG2 (s / school)\n   :time (t / today))", "(p / pick-up-04\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Christine\"))\n   :ARG1 (p3 / person\n             :name (n2 / name\n                       :op1 \"Marcel\")))", "(t2 / take-01\n    :ARG1 (p3 / person\n              :name (n3 / name\n                        :op1 \"Marty\")))", "(t / take-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Marcel\")))", "(t2 / take-01\n    :ARG0 (p / person :name (n / name :op1 \"Christine\"))\n    :ARG1 (p3 / person\n              :name (n3 / name\n                        :op1 \"Marty\")))", "(t2 / take-01\n    :ARG0 (p / person :name (n / name :op1 \"Christine\"))\n    :ARG1 (p3 / person\n              :name (n3 / name\n                        :op1 \"Marty\"))\n    :ARG3 (d / doctor))", "(t / take-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Christine\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Marcel\")))", "(t / take-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Christine\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Marcel\"))\n   :ARG3 (s / school))", "(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Marty\")))", "(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Marty\"))\n   :ARG1 (s / school))", "(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Marty\"))\n   :ARG1 (s / school))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Christine\")))", "(m / meet-03\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Marty\")))", "(m / meet-03\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Christine\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Marty\"))))"], "smus": ["She had a sprain on her ankle.", "Marty thinks she has sprained her ankle.", "Marty wants to go to the doctor tomorrow.", "Marty wants to go to the doctor tomorrow.", "Christine will pick up Marcel.", "Today, Christine will pick up Marcel.", "Christine will pick up Marcel at school today.", "Christine will pick up Marcel.", "Take Marty.", "Take Marcel.", "Christine, take Marty.", "Christine, take Marty to the doctor.", "Christine, take Marcel.", "Christine will take Marcel to school.", "Marty, call.", "Marty would call the school.", "Marty would call the school.", "Christine will meet.", "Marty will meet.", "Christine and Marty will meet."]}, {"instance_id": "samsum-265", "summary": "Millie is sick, so she won't come today.", "summary_trees": ["# ::snt Millie is sick, so she won't come today.\n(s / sick-05\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Millie\"))\n      :ARG0-of (c / cause-01\n            :ARG1 (c2 / come-01\n                  :polarity -\n                  :ARG1 p\n                  :time (t / today))))"], "tree": ["(c2 / come-01\n    :polarity -\n    :time (t / today))", "(c / cause-01\n   :ARG1 (c2 / come-01\n             :polarity -\n             :ARG1 (p / person :name (n / name :op1 \"Millie\"))\n             :time (t / today)))"], "smus": ["Today doesn't come.", "So, today, Marilyn didn't come."]}, {"instance_id": "samsum-266", "summary": "Tina will catch the evening flight back home. Ala is on her way to the meeting. She will let Tina know how it went.", "summary_trees": ["# ::snt Tina will catch the evening flight back home.\n(c / catch-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Tina\"))\n      :ARG1 (f / fly-01\n            :ARG1 p\n            :time (d / date-entity\n                  :dayperiod (e / evening))\n            :direction (h / home)))", "# ::snt Ala is on her way to the meeting.\n(b / be-destined-for-91\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Ala\"))\n      :ARG2 (m / meet-03\n            :ARG0 p))", "# ::snt She will let Tina know how it went.\n(l / let-know-07\n      :ARG0 (s / she)\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Tina\"))\n      :ARG2 (t / thing\n            :manner-of (g / go-06\n                  :ARG0 (ii / it))))"], "tree": ["(f / fly-01\n   :ARG1 (p / person :name (n / name :op1 \"Tina\"))\n   :direction (h / home))", "(f / fly-01\n   :time (d / date-entity\n            :dayperiod (e / evening)))", "(f / fly-01\n   :ARG1 (p / person :name (n / name :op1 \"Tina\"))\n   :time (d / date-entity\n            :dayperiod (e / evening)))", "(f / fly-01\n   :time (d / date-entity\n            :dayperiod (e / evening))\n   :direction (h / home))", "(f / fly-01\n   :ARG1 (p / person :name (n / name :op1 \"Tina\"))\n   :time (d / date-entity\n            :dayperiod (e / evening))\n   :direction (h / home))", "(c / catch-01\n   :ARG1 (f / fly-01\n            :ARG1 (p / person :name (n / name :op1 \"Tina\"))\n            :time (d / date-entity\n                     :dayperiod (e / evening))\n            :direction (h / home)))", "(c / catch-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tina\"))\n   :ARG1 (f / fly-01\n            :ARG1 p\n            :time (d / date-entity\n                     :dayperiod (e / evening))\n            :direction (h / home)))", "(c / catch-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tina\"))\n   :ARG1 (f / fly-01\n            :ARG1 p\n            :time (d / date-entity\n                     :dayperiod (e / evening))\n            :direction (h / home)))", "(b / be-destined-for-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Ala\"))\n   :ARG2 (m / meet-03\n            :ARG0 p))", "(l / let-know-07\n   :ARG0 (s / she)\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Tina\"))\n   :ARG2 (t / thing\n            :manner (g / go-06\n                       :ARG0 (ii / it))))"], "smus": ["Tina flew home.", "Flights are in the evening.", "Tina flew in the evening.", "The evening flight home.", "Tina flew home in the evening.", "Catch Tina on her flight home in the evening.", "Tina did catch an evening flight home.", "Tina did catch an evening flight home.", "Ala is destined for a meeting.", "She let Tina know how it went."]}, {"instance_id": "samsum-267", "summary": "Matt will be staying with homestay parents for one more month. They seem to talk more to Carlos. They have higher electricity bills because Matt spends a lot of time at home.", "summary_trees": ["# ::snt Matt will be staying with homestay parents for one more month.\n(s / stay-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Matt\"))\n      :accompanier (p2 / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG2 (p3 / parent))\n            :mod s\n            :location (h2 / home))\n      :duration (t / temporal-quantity\n            :quant 1\n            :unit (m / month)\n            :mod (m2 / more)))", "# ::snt They seem to talk more to Carlos.\n(s / seem-01\n      :ARG1 (t / talk-01\n            :ARG0 (t2 / they)\n            :ARG2 (p / person\n                  :name (n / name\n                        :op1 \"Carlos\"))\n            :mod (m / more)))", "# ::snt They have higher electricity bills because Matt spends a lot of time at home.\n(c / cause-01\n      :ARG0 (s / spend-02\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Matt\"))\n            :ARG1 (t / time\n                  :quant (l / lot))\n            :location (h / home))\n      :ARG1 (h2 / have-03\n            :ARG0 (t2 / they)\n            :ARG1 (b / bill-01\n                  :ARG3 (e / electricity)\n                  :ARG1-of (h3 / have-degree-91\n                        :ARG2 (h4 / high-02\n                              :ARG1 b)\n                        :ARG3 (m / more)))))"], "tree": ["(s / stay-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Matt\")))", "(s / stay-01\n   :duration (t / temporal-quantity\n                :quant 1\n                :unit (m / month)\n                :mod (m2 / more)))", "(s / stay-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Matt\"))\n   :duration (t / temporal-quantity\n                :quant 1\n                :unit (m / month)\n                :mod (m2 / more)))", "(s / stay-01\n   :accompanier (p2 / person\n                    :mod s\n                    :location (h2 / home))\n   :duration (t / temporal-quantity\n                :quant 1\n                :unit (m / month)\n                :mod (m2 / more)))", "(s / stay-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Matt\"))\n   :accompanier (p2 / person\n                    :ARG0 (h / have-rel-role-91\n                             :ARG2 (p3 / parent))\n                    :mod s\n                    :location (h2 / home))\n   :duration (t / temporal-quantity\n                :quant 1\n                :unit (m / month)\n                :mod (m2 / more)))", "(t / talk-01\n   :ARG0 (t2 / they)\n   :ARG2 (p / person\n            :name (n / name\n                     :op1 \"Carlos\")))", "(t / talk-01\n   :ARG0 (t2 / they)\n   :ARG2 (p / person\n            :name (n / name\n                     :op1 \"Carlos\"))\n   :mod (m / more))", "(s / seem-01\n   :ARG1 (t / talk-01\n            :ARG0 (t2 / they)\n            :ARG2 (p / person\n                     :name (n / name\n                              :op1 \"Carlos\"))\n            :mod (m / more)))", "(s / seem-01\n   :ARG1 (t / talk-01\n            :ARG0 (t2 / they)\n            :ARG2 (p / person\n                     :name (n / name\n                              :op1 \"Carlos\"))\n            :mod (m / more)))", "(h3 / have-degree-91\n    :ARG2 (h4 / high-02\n              :ARG1 (b / bill-01))\n    :ARG3 (m / more))", "(b / bill-01\n   :ARG3 (e / electricity)\n   :ARG1 (h3 / have-degree-91\n             :ARG2 (h4 / high-02\n                       :ARG1 b)\n             :ARG3 (m / more)))", "(s / spend-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Matt\"))\n   :ARG1 (t / time\n            :quant (l / lot))\n   :location (h / home))", "(s / spend-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Matt\"))\n   :ARG1 (t / time\n            :quant (l / lot))\n   :location (h / home))", "(h2 / have-03\n    :ARG0 (t2 / they)\n    :ARG1 (b / bill-01\n             :ARG3 (e / electricity)\n             :ARG1 (h3 / have-degree-91\n                       :ARG2 (h4 / high-02\n                                 :ARG1 b)\n                       :ARG3 (m / more))))", "(h2 / have-03\n    :ARG0 (t2 / they)\n    :ARG1 (b / bill-01\n             :ARG3 (e / electricity)\n             :ARG1 (h3 / have-degree-91\n                       :ARG2 (h4 / high-02\n                                 :ARG1 b)\n                       :ARG3 (m / more))))", "(c / cause-01\n   :ARG0 (s / spend-02\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Matt\"))\n            :ARG1 (t / time\n                     :quant (l / lot))\n            :location (h / home))\n   :ARG1 (h2 / have-03\n             :ARG0 (t2 / they)\n             :ARG1 (b / bill-01\n                      :ARG3 (e / electricity)\n                      :ARG1 (h3 / have-degree-91\n                                :ARG2 (h4 / high-02\n                                          :ARG1 b)\n                                :ARG3 (m / more)))))"], "smus": ["Matt is staying.", "Staying for one more month.", "Matt will be staying one more month.", "Staying with their home for one more month.", "Matt has been staying with his parents at home for one more month.", "They'll talk to Carlos.", "They'll talk more about Carlos.", "They seem to talk more about Carlos.", "They seem to talk more about Carlos.", "Higher bills.", "Higher electricity bills.", "Matt spends a lot of time at home.", "Matt spends a lot of time at home.", "They have higher electricity bills.", "They have higher electricity bills.", "They have higher electricity bills because Matt spends a lot of time at home."]}, {"instance_id": "samsum-268", "summary": "Before Christmas, Ella's mom won a hundred thousand in a lottery. Both Ella and Noah are excited.", "summary_trees": ["# ::snt Before Christmas, Ella's mom won a hundred thousand in a lottery.\n(w / win-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (p2 / person\n                        :name (n / name\n                              :op1 \"Ella\"))\n                  :ARG2 (m / mom)))\n      :ARG1 (m2 / monetary-quantity\n            :quant 100000\n            :unit (d / dollar))\n      :ARG2 (l / lottery)\n      :time (b / before\n            :op1 (f / festival\n                  :name (n2 / name\n                        :op1 \"Christmas\"))))", "# ::snt Both Ella and Noah are excited.\n(e / excite-01\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Ella\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Noah\"))\n            :mod (b / both)))"], "tree": ["(w / win-01\n   :time (b / before\n            :op1 (f / festival\n                    :name (n2 / name\n                              :op1 \"Christmas\"))))", "(w / win-01\n   :time (b / before\n            :op1 (f / festival\n                    :name (n2 / name\n                              :op1 \"Christmas\"))))", "(w / win-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :name (n / name\n                                        :op1 \"Ella\"))\n                     :ARG2 (m / mom))))", "(w / win-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :name (n / name\n                                        :op1 \"Ella\"))\n                     :ARG2 (m / mom)))\n   :ARG2 (l / lottery))", "(w / win-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :name (n / name\n                                        :op1 \"Ella\"))\n                     :ARG2 (m / mom)))\n   :ARG1 (m2 / monetary-quantity\n             :quant 100000\n             :unit (d / dollar)))", "(w / win-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :name (n / name\n                                        :op1 \"Ella\"))\n                     :ARG2 (m / mom)))\n   :ARG1 (m2 / monetary-quantity\n             :quant 100000\n             :unit (d / dollar))\n   :ARG2 (l / lottery))", "(w / win-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :name (n / name\n                                        :op1 \"Ella\"))\n                     :ARG2 (m / mom)))\n   :ARG1 (m2 / monetary-quantity\n             :quant 100000\n             :unit (d / dollar))\n   :time (b / before\n            :op1 (f / festival\n                    :name (n2 / name\n                              :op1 \"Christmas\"))))", "(w / win-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :name (n / name\n                                        :op1 \"Ella\"))\n                     :ARG2 (m / mom)))\n   :ARG1 (m2 / monetary-quantity\n             :quant 100000\n             :unit (d / dollar))\n   :ARG2 (l / lottery)\n   :time (b / before\n            :op1 (f / festival\n                    :name (n2 / name\n                              :op1 \"Christmas\"))))", "(e / excite-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Ella\")))", "(e / excite-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Noah\")\n             :mod (b / both)))", "(e / excite-01\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Ella\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Noah\"))\n            :mod (b / both)))"], "smus": ["Won before Christmas.", "Won before Christmas.", "Ella's mom won.", "Ella's mom won the lottery.", "Ella's mom won $100,000.", "Ella's mom won a $100,000 lottery.", "Ella's mom won $100k before Christmas.", "Ella's mom won a $100,000 lottery before Christmas.", "Ella was excited.", "Noah was both excited.", "Ella and Noah were both excited."]}, {"instance_id": "samsum-269", "summary": "Isabella is grateful to Betty for sharing the information about her work yesterday. Isabella offers Betty her company, should Betty want to do something together.", "summary_trees": ["# ::snt Isabella is grateful to Betty for sharing the information about her work yesterday.\n(a / appreciate-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Isabella\"))\n      :ARG1 (s / share-01\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Betty\"))\n            :ARG1 (ii / information\n                  :topic (w / work-01\n                        :ARG0 p))\n            :ARG2 p\n            :time (y / yesterday))\n      :ARG2 p2)", "# ::snt Isabella offers Betty her company, should Betty want to do something together.\n(h / have-condition-91\n      :ARG1 (o / offer-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Isabella\"))\n            :ARG1 (c / company\n                  :poss p)\n            :ARG3 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Betty\")))\n      :ARG2 (w / want-01\n            :ARG0 p2\n            :ARG1 (d / do-02\n                  :ARG0 p2\n                  :ARG1 (s / something)\n                  :manner (t / together))))"], "tree": ["(s / share-01\n   :ARG1 (ii / information\n             :topic (w / work-01\n                       :ARG0 (p / person :name (n / name :op1 \"Isabella\")))))", "(s / share-01\n   :ARG1 (ii / information\n             :topic (w / work-01\n                       :ARG0 (p / person :name (n / name :op1 \"Isabella\"))))\n   :ARG2 p)", "(s / share-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Betty\"))\n   :ARG1 (ii / information\n             :topic (w / work-01\n                       :ARG0 (p / person :name (n / name :op1 \"Isabella\")))))", "(s / share-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Betty\"))\n   :ARG1 (ii / information\n             :topic (w / work-01\n                       :ARG0 (p / person :name (n / name :op1 \"Isabella\"))))\n   :ARG2 p)", "(s / share-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Betty\"))\n   :ARG1 (ii / information\n             :topic (w / work-01\n                       :ARG0 p))\n   :ARG2 (p / person :name (n / name :op1 \"Isabella\"))\n   :time (y / yesterday))", "(a / appreciate-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Isabella\"))\n   :ARG1 (s / share-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Betty\"))\n            :ARG1 (ii / information\n                      :topic (w / work-01\n                                :ARG0 p))\n            :ARG2 p\n            :time (y / yesterday)))", "(a / appreciate-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Isabella\"))\n   :ARG1 (s / share-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Betty\"))\n            :ARG1 (ii / information\n                      :topic (w / work-01\n                                :ARG0 p))\n            :ARG2 p\n            :time (y / yesterday))\n   :ARG2 p2)", "(o / offer-01\n   :ARG1 (c / company\n            :poss (p / person :name (n / name :op1 \"Isabella\"))))", "(o / offer-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Isabella\"))\n   :ARG1 (c / company\n            :poss p))", "(h / have-condition-91\n   :ARG2 (w / want-01\n            :ARG0 (p2 / person :name (n2 / name :op1 \"Betty\"))\n            :ARG1 (d / do-02\n                     :ARG0 p2\n                     :ARG1 (s / something)\n                     :manner (t / together))))", "(o / offer-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Isabella\"))\n   :ARG1 (c / company\n            :poss p)\n   :ARG3 (p2 / person\n             :name (n2 / name\n                       :op1 \"Betty\")))", "(h / have-condition-91\n   :ARG1 (o / offer-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Isabella\"))\n            :ARG1 (c / company\n                     :poss p)\n            :ARG3 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Betty\")))\n   :ARG2 (w / want-01\n            :ARG0 p2\n            :ARG1 (d / do-02\n                     :ARG0 p2\n                     :ARG1 (s / something)\n                     :manner (t / together))))", "(h / have-condition-91\n   :ARG1 (o / offer-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Isabella\"))\n            :ARG1 (c / company\n                     :poss p)\n            :ARG3 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Betty\")))\n   :ARG2 (w / want-01\n            :ARG0 p2\n            :ARG1 (d / do-02\n                     :ARG0 p2\n                     :ARG1 (s / something)\n                     :manner (t / together))))"], "smus": ["Sharing information about Isabella's work.", "Sharing information about Isabella's work with her.", "Betty is sharing information about Isabella's work.", "Betty is sharing information about Isabella's work with her.", "Betty was sharing work information with Isabella yesterday.", "Isabella, Isabella, appreciates Betty sharing her work information with you yesterday.", "Isabella, Isabella, I'm grateful that Betty was sharing work information with me yesterday.", "offers Isabella's company.", "Isabella offers her company.", "If Betty did want to do something together.", "Isabella offers her company to Betty.", "If Isabella wants to do something together, she offers her company to Betty.", "If Isabella wants to do something together, she offers her company to Betty."]}, {"instance_id": "samsum-270", "summary": "Emma is about to take a nap in the back of the bus to New York. Ben and Emma will be there around 4.30 pm. Ben will wake Emma up 15 minutes prior to their arrival.", "summary_trees": ["# ::snt Emma is about to take a nap in the back of the bus to New York.\n(n / nap-01\n      :ARG0 (p / person\n            :name (n2 / name\n                  :op1 \"Emma\"))\n      :location (b / back\n            :part-of (b2 / bus\n                  :destination (c / city\n                        :name (n3 / name\n                              :op1 \"New\"\n                              :op2 \"York\"))))\n      :time (a / about-to))", "# ::snt Ben and Emma will be there around 4.30 pm.\n(b / be-located-at-91\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Ben\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Emma\")))\n      :ARG2 (t / there)\n      :time (a2 / around\n            :op1 (d / date-entity\n                  :time \"14:30\")))", "# ::snt Ben will wake Emma up 15 minutes prior to their arrival.\n(w / wake-up-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Ben\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Emma\"))\n      :time (p3 / prior\n            :op1 (a / arrive-01\n                  :ARG1 (t / they))\n            :quant (t2 / temporal-quantity\n                  :quant 15\n                  :unit (m / minute))))"], "tree": ["(n / nap-01\n   :location (b / back\n                :part (b2 / bus\n                          :destination (c / city\n                                          :name (n3 / name\n                                                    :op1 \"New\"\n                                                    :op2 \"York\"))))\n   :time (a / about-to))", "(n / nap-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Emma\"))\n   :location (b / back\n                :part (b2 / bus\n                          :destination (c / city\n                                          :name (n3 / name\n                                                    :op1 \"New\"\n                                                    :op2 \"York\"))))\n   :time (a / about-to))", "(w / wake-up-02\n   :time (p3 / prior\n             :op1 (a / arrive-01)\n             :quant (t2 / temporal-quantity\n                        :quant 15\n                        :unit (m / minute))))", "(w / wake-up-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ben\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Emma\")))", "(w / wake-up-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ben\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Emma\"))\n   :time (p3 / prior\n             :op1 (a / arrive-01\n                     :ARG1 (t / they))\n             :quant (t2 / temporal-quantity\n                        :quant 15\n                        :unit (m / minute))))"], "smus": ["About to take a nap on the back of the bus to New York.", "Emma was about to take a nap at the back of the bus to New York.", "Wake up 15 minutes prior to arrival.", "Ben will wake up to Emma.", "Ben would wake Emma up 15 minutes prior to their arrival."]}, {"instance_id": "samsum-271", "summary": "Randal is buying nail polish for Sidney in the store, and she's explaining to him which pink she wants. ", "summary_trees": ["# ::snt Randal is buying nail polish for Sidney in the store, and she's explaining to him which pink she wants.\n(a / and\n      :op1 (b / buy-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Randal\"))\n            :ARG1 (p2 / polish\n                  :mod (n2 / nail))\n            :ARG4 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Sidney\"))\n            :location (s / store))\n      :op2 (e / explain-01\n            :ARG0 p3\n            :ARG1 (p4 / pink\n                  :ARG1-of (w / want-01\n                        :ARG0 p3))\n            :ARG2 p))"], "tree": ["(b / buy-01\n   :ARG1 (p2 / polish\n             :mod (n2 / nail)))", "(e / explain-01\n   :ARG1 (p4 / pink\n             :ARG1 (w / want-01\n                      :ARG0 (p3 / person :name (n3 / name :op1 \"Sidney\")))))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Randal\")))", "(e / explain-01\n   :ARG0 (p3 / person :name (n3 / name :op1 \"Sidney\"))\n   :ARG1 (p4 / pink\n             :ARG1 (w / want-01\n                      :ARG0 p3)))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Randal\"))\n   :ARG1 (p2 / polish\n             :mod (n2 / nail)))"], "smus": ["buying nail polish.", "Explaining that Sydney wants pink.", "Rand was buying.", "Sydney is explaining why she wants to be pink.", "Randal was buying nail polish."]}, {"instance_id": "samsum-272", "summary": "Chandler asks Phoebe to open the door and pay the delivery guy standing outside his door.", "summary_trees": ["# ::snt Chandler asks Phoebe to open the door and pay the delivery guy standing outside his door.\n(a / ask-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Chandler\"))\n      :ARG1 (a2 / and\n            :op1 (o / open-01\n                  :ARG0 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Phoebe\"))\n                  :ARG1 (d / door))\n            :op2 (p3 / pay-01\n                  :ARG0 p2\n                  :ARG2 (g / guy\n                        :ARG0-of (d2 / deliver-01)\n                        :ARG1-of (s / stand-01\n                              :ARG2 (o2 / outside\n                                    :op1 (d3 / door\n                                          :poss p))))))\n      :ARG2 p2)"], "tree": ["(s / stand-01\n   :ARG2 (o2 / outside\n             :op1 (d3 / door\n                      :poss (p / person :name (n / name :op1 \"Chandler\")))))", "(a / ask-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Chandler\"))\n   :ARG1 (o / open-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Phoebe\"))\n            :ARG1 (d / door)))", "(a / ask-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Chandler\"))\n   :ARG1 (o / open-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Phoebe\"))\n            :ARG1 (d / door)))", "(a / ask-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Chandler\"))\n   :ARG1 (o / open-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Phoebe\"))\n            :ARG1 (d / door)))", "(a / ask-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Chandler\"))\n   :ARG1 (p3 / pay-01\n             :ARG0 (p2 / person :name (n2 / name :op1 \"Phoebe\"))\n             :ARG2 (g / guy\n                      :ARG0 (d2 / deliver-01)\n                      :ARG1 (s / stand-01\n                               :ARG2 (o2 / outside\n                                         :op1 (d3 / door\n                                                  :poss p))))))", "(a / ask-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Chandler\"))\n   :ARG1 (p3 / pay-01\n             :ARG0 (p2 / person :name (n2 / name :op1 \"Phoebe\"))\n             :ARG2 (g / guy\n                      :ARG0 (d2 / deliver-01)\n                      :ARG1 (s / stand-01\n                               :ARG2 (o2 / outside\n                                         :op1 (d3 / door\n                                                  :poss p)))))\n   :ARG2 p2)", "(a / ask-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Chandler\"))\n   :ARG1 (p3 / pay-01\n             :ARG0 (p2 / person :name (n2 / name :op1 \"Phoebe\"))\n             :ARG2 (g / guy\n                      :ARG0 (d2 / deliver-01)\n                      :ARG1 (s / stand-01\n                               :ARG2 (o2 / outside\n                                         :op1 (d3 / door\n                                                  :poss p)))))\n   :ARG2 p2)"], "smus": ["Standing outside Handler's door.", "Handler asks Phoebe to open the door.", "Handler asks Phoebe to open the door.", "Handler asks Phoebe to open the door.", "Handler asks Phoebe to pay delivery guy to stand outside his door.", "Handler asks Phoebe to pay delivery guy to stand outside his door.", "Handler asks Phoebe to pay delivery guy to stand outside his door."]}, {"instance_id": "samsum-273", "summary": "Julia will be waiting for Bert with the dinner. Bert is coming home around 8.", "summary_trees": ["# ::snt Julia will be waiting for Bert with the dinner.\n(w / wait-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Julia\"))\n      :ARG2 (a / accompany-01\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Bert\"))\n            :ARG1 (d / dinner)))", "# ::snt Bert is coming home around 8.\n(c / come-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Bert\"))\n      :ARG4 (h / home)\n      :time (a / around\n            :op1 (d / date-entity\n                  :time \"8:00\")))"], "tree": ["(a / accompany-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Bert\")))", "(a / accompany-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Bert\"))\n   :ARG1 (d / dinner))", "(a / accompany-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Bert\"))\n   :ARG1 (d / dinner))", "(w / wait-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Julia\"))\n   :ARG2 (a / accompany-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Bert\"))\n            :ARG1 (d / dinner)))", "(w / wait-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Julia\"))\n   :ARG2 (a / accompany-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Bert\"))\n            :ARG1 (d / dinner)))", "(a / accompany-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Bert\")))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Bert\")))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Bert\"))\n   :ARG4 (h / home))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Bert\"))\n   :ARG4 (h / home)\n   :time (a / around\n            :op1 (d / date-entity\n                    :time \"8:00\")))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Bert\"))\n   :ARG4 (h / home)\n   :time (a / around\n            :op1 (d / date-entity\n                    :time \"8:00\")))"], "smus": ["With Bert.", "Bert was with the dinner.", "Bert was with the dinner.", "Julia was waiting with Bert for dinner.", "Julia was waiting with Bert for dinner.", "With Bert.", "Coming Bert.", "Bert is coming home.", "Bert was coming home around 8 o'clock.", "Bert was coming home around 8 o'clock."]}, {"instance_id": "samsum-274", "summary": "Rob is disappointed with memes he watches. Tom suggests he should get a girlfriend instead of complaining about the memes.", "summary_trees": ["# ::snt Rob is disappointed with memes he watches.\n(d / disappoint-01\n      :ARG0 (m / meme\n            :ARG1-of (w / watch-01\n                  :ARG0 (p / person\n                        :name (n / name\n                              :op1 \"Rob\"))))\n      :ARG1 p)", "# ::snt Tom suggests he should get a girlfriend instead of complaining about the memes.\n(s / suggest-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Tom\"))\n      :ARG1 (r / recommend-01\n            :ARG1 (g / get-01\n                  :ARG0 (h / he)\n                  :ARG1 (p2 / person\n                        :ARG0-of (h2 / have-rel-role-91\n                              :ARG1 h\n                              :ARG2 (g2 / girlfriend)))\n                  :ARG1-of (ii / instead-of-91\n                        :ARG2 (c / complain-01\n                              :ARG0 h\n                              :ARG1 (m / meme)))))\n      :ARG2 h)"], "tree": ["(w / watch-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rob\")))", "(w / watch-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rob\")))", "(c / complain-01\n   :ARG0 (h / he)\n   :ARG1 (m / meme))", "(c / complain-01\n   :ARG0 (h / he)\n   :ARG1 (m / meme))", "(ii / instead-of-91\n    :ARG2 (c / complain-01\n             :ARG0 (h / he)\n             :ARG1 (m / meme)))", "(r / recommend-01\n   :ARG1 (g / get-01\n            :ARG0 (h / he)\n            :ARG1 (p2 / person\n                      :ARG0 (h2 / have-rel-role-91\n                                :ARG1 h\n                                :ARG2 (g2 / girlfriend)))\n            :ARG1 (ii / instead-of-91\n                      :ARG2 (c / complain-01\n                               :ARG0 h\n                               :ARG1 (m / meme)))))", "(r / recommend-01\n   :ARG1 (g / get-01\n            :ARG0 (h / he)\n            :ARG1 (p2 / person\n                      :ARG0 (h2 / have-rel-role-91\n                                :ARG1 h\n                                :ARG2 (g2 / girlfriend)))\n            :ARG1 (ii / instead-of-91\n                      :ARG2 (c / complain-01\n                               :ARG0 h\n                               :ARG1 (m / meme)))))", "(s / suggest-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tom\"))\n   :ARG1 (r / recommend-01\n            :ARG1 (g / get-01\n                     :ARG0 (h / he)\n                     :ARG1 (p2 / person\n                               :ARG0 (h2 / have-rel-role-91\n                                         :ARG1 h\n                                         :ARG2 (g2 / girlfriend)))\n                     :ARG1 (ii / instead-of-91\n                               :ARG2 (c / complain-01\n                                        :ARG0 h\n                                        :ARG1 (m / meme))))))", "(s / suggest-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tom\"))\n   :ARG1 (r / recommend-01\n            :ARG1 (g / get-01\n                     :ARG0 (h / he)\n                     :ARG1 (p2 / person\n                               :ARG0 (h2 / have-rel-role-91\n                                         :ARG1 h\n                                         :ARG2 (g2 / girlfriend)))\n                     :ARG1 (ii / instead-of-91\n                               :ARG2 (c / complain-01\n                                        :ARG0 h\n                                        :ARG1 (m / meme)))))\n   :ARG2 h)"], "smus": ["Rob watches.", "Rob watches.", "He's complaining about memes.", "He's complaining about memes.", "Instead of complaining about memes, he was complaining about memes.", "He should get his girlfriend instead of complaining about memes.", "He should get his girlfriend instead of complaining about memes.", "Tom suggests he should get his girlfriend instead of complaining about memes.", "Tom suggests he should get his girlfriend instead of complaining about memes."]}, {"instance_id": "samsum-275", "summary": "Ost bought a garage place for a good price. He intends to rent it out. He thinks it will be a better deal than keeping savings in the bank. The prices of garage place in Belgrade will grow as there are more and more vehicles. ", "summary_trees": ["# ::snt Ost bought a garage place for a good price.\n(b / buy-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Ost\"))\n      :ARG1 (p2 / place\n            :mod (g / garage))\n      :ARG3 (p3 / price\n            :ARG1-of (g2 / good-02)))", "# ::snt He intends to rent it out.\n(ii / intend-01\n      :ARG0 (h / he)\n      :ARG1 (r / rent-out-04\n            :ARG0 h\n            :ARG1 (ii2 / it)))", "# ::snt He thinks it will be a better deal than keeping savings in the bank.\n(t / think-01\n      :ARG0 (h / he)\n      :ARG1 (d / deal\n            :domain (ii / it)\n            :ARG1-of (h2 / have-degree-91\n                  :ARG2 (g / good-02\n                        :ARG1 d)\n                  :ARG3 (m / more)\n                  :ARG4 (k / keep-01\n                        :ARG1 (t2 / thing\n                              :ARG1-of (s / save-01))\n                        :location (b / bank)))))", "# ::snt The prices of garage place in Belgrade will grow as there are more and more vehicles.\n(g / grow-01\n      :ARG1 (t / thing\n            :ARG2-of (p / price-01\n                  :ARG1 (p2 / place\n                        :mod (g2 / garage)\n                        :location (c / city\n                              :name (n / name\n                                    :op1 \"Belgrade\")))))\n      :ARG1-of (c2 / cause-01\n            :ARG0 (v / vehicle\n                  :quant (n2 / number\n                        :ARG1-of (ii / increase-01)))))"], "tree": ["(b / buy-01\n   :ARG1 (p2 / place\n             :mod (g / garage)))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ost\")))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ost\"))\n   :ARG1 (p2 / place\n             :mod (g / garage)))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ost\"))\n   :ARG1 (p2 / place\n             :mod (g / garage))\n   :ARG3 (p3 / price\n             :ARG1 (g2 / good-02)))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ost\"))\n   :ARG1 (p2 / place\n             :mod (g / garage))\n   :ARG3 (p3 / price\n             :ARG1 (g2 / good-02)))", "(r / rent-out-04\n   :ARG0 (h / he)\n   :ARG1 (ii2 / it))", "(ii / intend-01\n    :ARG0 (h / he)\n    :ARG1 (r / rent-out-04\n             :ARG0 h\n             :ARG1 (ii2 / it)))", "(k / keep-01\n   :ARG1 (t2 / thing\n             :ARG1 (s / save-01))\n   :location (b / bank))", "(h2 / have-degree-91\n    :ARG2 (g / good-02\n             :ARG1 (d / deal))\n    :ARG3 (m / more)\n    :ARG4 (k / keep-01\n             :ARG1 (t2 / thing\n                       :ARG1 (s / save-01))\n             :location (b / bank)))", "(t / think-01\n   :ARG0 (h / he)\n   :ARG1 (d / deal\n            :domain (ii / it)\n            :ARG1 (h2 / have-degree-91\n                      :ARG2 (g / good-02\n                               :ARG1 d)\n                      :ARG3 (m / more)\n                      :ARG4 (k / keep-01\n                               :ARG1 (t2 / thing\n                                         :ARG1 (s / save-01))\n                               :location (b / bank)))))", "(t / think-01\n   :ARG0 (h / he)\n   :ARG1 (d / deal\n            :domain (ii / it)\n            :ARG1 (h2 / have-degree-91\n                      :ARG2 (g / good-02\n                               :ARG1 d)\n                      :ARG3 (m / more)\n                      :ARG4 (k / keep-01\n                               :ARG1 (t2 / thing\n                                         :ARG1 (s / save-01))\n                               :location (b / bank)))))", "(c2 / cause-01\n    :ARG0 (v / vehicle\n             :quant (n2 / number\n                        :ARG1 (ii / increase-01))))", "(p / price-01\n   :ARG1 (p2 / place\n             :mod (g2 / garage)\n             :location (c / city\n                          :name (n / name\n                                   :op1 \"Belgrade\"))))", "(p / price-01\n   :ARG1 (p2 / place\n             :mod (g2 / garage)\n             :location (c / city\n                          :name (n / name\n                                   :op1 \"Belgrade\"))))", "(g / grow-01\n   :ARG1 (t / thing\n            :ARG2 (p / price-01\n                     :ARG1 (p2 / place\n                               :mod (g2 / garage)\n                               :location (c / city\n                                            :name (n / name\n                                                     :op1 \"Belgrade\"))))))", "(g / grow-01\n   :ARG1 (t / thing\n            :ARG2 (p / price-01\n                     :ARG1 (p2 / place\n                               :mod (g2 / garage)\n                               :location (c / city\n                                            :name (n / name\n                                                     :op1 \"Belgrade\")))))\n   :ARG1 (c2 / cause-01\n             :ARG0 (v / vehicle\n                      :quant (n2 / number\n                                 :ARG1 (ii / increase-01)))))"], "smus": ["bought a garage place.", "Ost bought.", "Ost bought a garage place.", "Ost bought the garage place for a good price.", "Ost bought the garage place for a good price.", "He would rent it out.", "He intends to rent it out.", "Keeping savings in the bank.", "A better deal than keeping savings in the bank.", "He thinks it's a better deal than keeping savings in the bank.", "He thinks it's a better deal than keeping savings in the bank.", "Because of the increased number of vehicles.", "prices for a garage place in Belgrade", "prices for a garage place in Belgrade", "Prices of garage place in Belgrade will grow.", "Prices of garage places in Belgrade will grow with more and more vehicles."]}, {"instance_id": "samsum-276", "summary": "David lands at 17:30 at Sevilla airport and Victor will pick him up.", "summary_trees": ["# ::snt David lands at 17:30 at Sevilla airport and Victor will pick him up.\n(a / and\n      :op1 (l / land-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"David\"))\n            :location (a2 / airport\n                  :location (c / city\n                        :name (n2 / name\n                              :op1 \"Sevilla\")))\n            :time (d / date-entity\n                  :time \"17:30\"))\n      :op2 (p2 / pick-up-04\n            :ARG0 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Victor\"))\n            :ARG1 p))"], "tree": ["(l / land-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"David\")))", "(p2 / pick-up-04\n    :ARG0 (p3 / person\n              :name (n3 / name\n                        :op1 \"Victor\"))\n    :ARG1 (p / person :name (n / name :op1 \"David\")))", "(p2 / pick-up-04\n    :ARG0 (p3 / person\n              :name (n3 / name\n                        :op1 \"Victor\"))\n    :ARG1 (p / person :name (n / name :op1 \"David\")))", "(l / land-01\n   :location (a2 / airport\n                 :location (c / city\n                              :name (n2 / name\n                                        :op1 \"Sevilla\"))))", "(l / land-01\n   :location (a2 / airport\n                 :location (c / city\n                              :name (n2 / name\n                                        :op1 \"Sevilla\"))))"], "smus": ["David Lands", "Victor will pick up David.", "Victor will pick up David.", "Landing at the Sevilla airport.", "Landing at the Sevilla airport."]}, {"instance_id": "samsum-277", "summary": "Linda got a new job and is moving to Ohio for 6 months. Her brother will stay at her current apartment. Daisy will come by Linda's place to meet her and help her pack as she is too busy to go out.", "summary_trees": ["# ::snt Linda got a new job and is moving to Ohio for 6 months.\n(a / and\n      :op1 (g / get-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Linda\"))\n            :ARG1 (j / job\n                  :ARG1-of (n2 / new-01)))\n      :op2 (m / move-01\n            :ARG0 p\n            :ARG2 (s / state\n                  :name (n3 / name\n                        :op1 \"Ohio\"))\n            :duration (t / temporal-quantity\n                  :quant 6\n                  :unit (m2 / month))))", "# ::snt Her brother will stay at her current apartment.\n(s / stay-01\n      :ARG1 (p / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (s2 / she)\n                  :ARG2 (b / brother)))\n      :location (a / apartment\n            :time (c / current)\n            :poss s2))", "# ::snt Daisy will come by Linda's place to meet her and help her pack as she is too busy to go out.\n(c / come-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Daisy\"))\n      :ARG4 (p2 / place\n            :poss (p3 / person\n                  :name (n2 / name\n                        :op1 \"Linda\")))\n      :purpose (a / and\n            :op1 (m / meet-03\n                  :ARG0 p\n                  :ARG1 p3)\n            :op2 (h / help-01\n                  :ARG0 p\n                  :ARG1 (p4 / pack-01\n                        :ARG0 p3)\n                  :ARG2 p3))\n      :ARG1-of (c2 / cause-01\n            :ARG0 (b / busy-01\n                  :ARG1 p3\n                  :ARG2-of (h2 / have-degree-91\n                        :ARG1 p3\n                        :ARG3 (t / too)\n                        :ARG6 (g / go-out-17\n                              :polarity -\n                              :ARG0 p3)))))"], "tree": ["(m / move-01\n   :duration (t / temporal-quantity\n                :quant 6\n                :unit (m2 / month)))", "(m / move-01\n   :ARG0 (p / person :name (n / name :op1 \"Linda\"))\n   :ARG2 (s / state\n            :name (n3 / name\n                      :op1 \"Ohio\")))", "(g / get-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Linda\"))\n   :ARG1 (j / job\n            :ARG1 (n2 / new-01)))", "(g / get-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Linda\"))\n   :ARG1 (j / job\n            :ARG1 (n2 / new-01)))", "(m / move-01\n   :ARG0 (p / person :name (n / name :op1 \"Linda\"))\n   :ARG2 (s / state\n            :name (n3 / name\n                      :op1 \"Ohio\"))\n   :duration (t / temporal-quantity\n                :quant 6\n                :unit (m2 / month)))", "(s / stay-01\n   :location (a / apartment\n                :time (c / current)))", "(s / stay-01\n   :location (a / apartment\n                :time (c / current)))", "(s / stay-01\n   :ARG1 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (s2 / she)\n                     :ARG2 (b / brother))))", "(s / stay-01\n   :ARG1 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (s2 / she)\n                     :ARG2 (b / brother)))\n   :location (a / apartment\n                :time (c / current)\n                :poss s2))", "(s / stay-01\n   :ARG1 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (s2 / she)\n                     :ARG2 (b / brother)))\n   :location (a / apartment\n                :time (c / current)\n                :poss s2))", "(h2 / have-degree-91\n    :ARG6 (g / go-out-17\n             :polarity -))", "(h / help-01\n   :ARG0 (p / person :name (n / name :op1 \"Daisy\"))\n   :ARG1 (p4 / pack-01\n             :ARG0 (p3 / person :name (n2 / name :op1 \"Linda\"))))", "(h / help-01\n   :ARG0 (p / person :name (n / name :op1 \"Daisy\"))\n   :ARG1 (p4 / pack-01\n             :ARG0 (p3 / person :name (n2 / name :op1 \"Linda\")))\n   :ARG2 p3)", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Daisy\")))", "(c / come-01\n   :purpose (a / and\n               :op1 (m / meet-03)\n               :op2 (h / help-01)))", "(b / busy-01\n   :ARG1 (p3 / person :name (n2 / name :op1 \"Linda\"))\n   :ARG2 (h2 / have-degree-91\n             :ARG1 p3\n             :ARG3 (t / too)\n             :ARG6 (g / go-out-17\n                      :polarity -\n                      :ARG0 p3)))", "(c2 / cause-01\n    :ARG0 (b / busy-01\n             :ARG1 (p3 / person :name (n2 / name :op1 \"Linda\"))\n             :ARG2 (h2 / have-degree-91\n                       :ARG1 p3\n                       :ARG3 (t / too)\n                       :ARG6 (g / go-out-17\n                                :polarity -\n                                :ARG0 p3))))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Daisy\"))\n   :ARG4 (p2 / place\n             :poss (p3 / person\n                       :name (n2 / name\n                                 :op1 \"Linda\"))))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Daisy\"))\n   :ARG4 (p2 / place\n             :poss (p3 / person\n                       :name (n2 / name\n                                 :op1 \"Linda\")))\n   :purpose (m / meet-03\n               :ARG0 p\n               :ARG1 p3)\n   :ARG1 (c2 / cause-01\n             :ARG0 (b / busy-01\n                      :ARG1 p3\n                      :ARG2 (h2 / have-degree-91\n                                :ARG1 p3\n                                :ARG3 (t / too)\n                                :ARG6 (g / go-out-17\n                                         :polarity -\n                                         :ARG0 p3)))))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Daisy\"))\n   :ARG4 (p2 / place\n             :poss (p3 / person\n                       :name (n2 / name\n                                 :op1 \"Linda\")))\n   :purpose (h / help-01\n               :ARG0 p\n               :ARG1 (p4 / pack-01\n                         :ARG0 p3)\n               :ARG2 p3)\n   :ARG1 (c2 / cause-01\n             :ARG0 (b / busy-01\n                      :ARG1 p3\n                      :ARG2 (h2 / have-degree-91\n                                :ARG1 p3\n                                :ARG3 (t / too)\n                                :ARG6 (g / go-out-17\n                                         :polarity -\n                                         :ARG0 p3))))\n   :ARG1 c2)", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Daisy\"))\n   :ARG4 (p2 / place\n             :poss (p3 / person\n                       :name (n2 / name\n                                 :op1 \"Linda\")))\n   :purpose (a / and\n               :op1 (m / meet-03\n                       :ARG0 p\n                       :ARG1 p3)\n               :op2 (h / help-01\n                       :ARG0 p\n                       :ARG1 (p4 / pack-01\n                                 :ARG0 p3)\n                       :ARG2 p3))\n   :ARG1 (c2 / cause-01\n             :ARG0 (b / busy-01\n                      :ARG1 p3\n                      :ARG2 (h2 / have-degree-91\n                                :ARG1 p3\n                                :ARG3 (t / too)\n                                :ARG6 (g / go-out-17\n                                         :polarity -\n                                         :ARG0 p3)))))"], "smus": ["Moving for 6 months.", "Linda is moving to Ohio.", "Linda got a new job.", "Linda got a new job.", "Linda has been moving to Ohio for six months.", "Stay in current apartment.", "Stay in current apartment.", "Her brother would stay.", "Her brother will stay in her current apartment.", "Her brother will stay in her current apartment.", "No going out.", "Daisy will help with Linda's packing.", "Daisy helped Linda pack.", "Come Daisy.", "Come to meet and help.", "Linda is too busy to go out.", "Because Linda is too busy to go out.", "Daisy will come to Linda's place.", "Daisy will come to Linda's place to meet her because she's too busy to go out.", "Daisy would come to Linda's place to help with her packing because she was too busy to go out.", "Daisy would come to Linda's place to meet up and help with her packing because she was too busy to go out."]}, {"instance_id": "samsum-278", "summary": "Joan and John are going to watch \"A Star is Born\" on Thursday around 8 p.m.", "summary_trees": ["# ::snt Joan and John are going to watch \"A Star is Born\" on Thursday around 8 p.m.\n(w / watch-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Joan\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"John\")))\n      :ARG1 (w2 / work-of-art\n            :name (n3 / name\n                  :op1 \"A\"\n                  :op2 \"Star\"\n                  :op3 \"Is\"\n                  :op4 \"Born\"))\n      :time (a2 / around\n            :op1 (d / date-entity\n                  :time \"22:00\"\n                  :weekday (t / thursday))))"], "tree": ["(w / watch-01\n   :ARG1 (w2 / work-of-art\n             :name (n3 / name\n                       :op1 \"A\"\n                       :op2 \"Star\"\n                       :op3 \"Is\"\n                       :op4 \"Born\")))", "(w / watch-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Joan\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"John\"))))", "(w / watch-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Joan\"))\n   :ARG1 (w2 / work-of-art\n             :name (n3 / name\n                       :op1 \"A\"\n                       :op2 \"Star\"\n                       :op3 \"Is\"\n                       :op4 \"Born\")))", "(w / watch-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"John\"))\n   :ARG1 (w2 / work-of-art\n             :name (n3 / name\n                       :op1 \"A\"\n                       :op2 \"Star\"\n                       :op3 \"Is\"\n                       :op4 \"Born\"))\n   :ARG1 w2)", "(w / watch-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Joan\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"John\")))\n   :ARG1 (w2 / work-of-art\n             :name (n3 / name\n                       :op1 \"A\"\n                       :op2 \"Star\"\n                       :op3 \"Is\"\n                       :op4 \"Born\")))"], "smus": ["Watch A Star Is Born.", "Watch Joan and John.", "Joan will watch \"A Star Is Born\".", "John will watch \"A Star Is Born\".", "Joan and John will watch \"A Star Is Born\"."]}, {"instance_id": "samsum-279", "summary": "Frank tries to encourage Andy to learn for the tomorrow's quiz.", "summary_trees": ["# ::snt Frank tries to encourage Andy to learn for the tomorrow's quiz.\n(t / try-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Frank\"))\n      :ARG1 (e / encourage-01\n            :ARG0 p\n            :ARG1 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Andy\"))\n            :ARG2 (l / learn-01\n                  :ARG0 p2\n                  :purpose (q / quiz-01\n                        :time (t2 / tomorrow)))))"], "tree": ["(l / learn-01\n   :purpose (q / quiz-01\n               :time (t2 / tomorrow)))", "(e / encourage-01\n   :ARG0 (p / person :name (n / name :op1 \"Frank\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Andy\"))\n   :ARG2 (l / learn-01\n            :ARG0 p2\n            :purpose (q / quiz-01\n                        :time (t2 / tomorrow))))", "(t / try-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Frank\"))\n   :ARG1 (e / encourage-01\n            :ARG0 p\n            :ARG1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Andy\"))\n            :ARG2 (l / learn-01\n                     :ARG0 p2\n                     :purpose (q / quiz-01\n                                 :time (t2 / tomorrow)))))"], "smus": ["Learn for tomorrow's quiz.", "Frank will encourage Andy to learn for tomorrow's quiz.", "Frank tries to encourage Andy to learn for tomorrow's quiz."]}, {"instance_id": "samsum-280", "summary": "Jack has not received yet the package Gene had sent him on Friday. She sent him the tracking number, so he could check the status of the shipment. ", "summary_trees": ["# ::snt Jack has not received yet the package Gene had sent him on Friday.\n(r / receive-01\n      :polarity -\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jack\"))\n      :ARG1 (p2 / package\n            :ARG1-of (s / send-01\n                  :ARG0 (p3 / person\n                        :name (n2 / name\n                              :op1 \"Gene\"))\n                  :ARG2 p\n                  :time (d / date-entity\n                        :weekday (f / friday))))\n      :time (y / yet))", "# ::snt She sent him the tracking number, so he could check the status of the shipment.\n(s / send-01\n      :ARG0 (s2 / she)\n      :ARG1 (n / number\n            :instrument-of (t / track-01))\n      :ARG2 (h / he)\n      :purpose (p / possible-01\n            :ARG1 (c / check-01\n                  :ARG0 h\n                  :ARG1 (s3 / status\n                        :poss (t2 / thing\n                              :ARG1-of (s4 / ship-01))))))"], "tree": ["(r / receive-01\n   :polarity -\n   :time (y / yet))", "(s / send-01\n   :time (d / date-entity\n            :weekday (f / friday)))", "(s / send-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"Gene\"))\n   :ARG2 (p / person :name (n / name :op1 \"Jack\"))\n   :time (d / date-entity\n            :weekday (f / friday)))", "(r / receive-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jack\"))\n   :ARG1 (p2 / package\n             :ARG1 (s / send-01\n                      :ARG0 (p3 / person\n                                :name (n2 / name\n                                          :op1 \"Gene\"))\n                      :ARG2 p\n                      :time (d / date-entity\n                               :weekday (f / friday))))\n   :time (y / yet))", "(r / receive-01\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jack\"))\n   :ARG1 (p2 / package\n             :ARG1 (s / send-01\n                      :ARG0 (p3 / person\n                                :name (n2 / name\n                                          :op1 \"Gene\"))\n                      :ARG2 p\n                      :time (d / date-entity\n                               :weekday (f / friday))))\n   :time (y / yet))", "(s / send-01\n   :ARG1 (n / number\n            :instrument (t / track-01))\n   :ARG2 (h / he))", "(s / send-01\n   :ARG0 (s2 / she)\n   :ARG1 (n / number\n            :instrument (t / track-01)))", "(s / send-01\n   :ARG0 (s2 / she)\n   :ARG1 (n / number\n            :instrument (t / track-01))\n   :ARG2 (h / he))", "(p / possible-01\n   :ARG1 (c / check-01\n            :ARG0 (h / he)\n            :ARG1 (s3 / status\n                      :poss (t2 / thing\n                                :ARG1 (s4 / ship-01)))))", "(p / possible-01\n   :ARG1 (c / check-01\n            :ARG0 (h / he)\n            :ARG1 (s3 / status\n                      :poss (t2 / thing\n                                :ARG1 (s4 / ship-01)))))", "(s / send-01\n   :ARG0 (s2 / she)\n   :ARG1 (n / number\n            :instrument (t / track-01))\n   :purpose (p / possible-01\n               :ARG1 (c / check-01\n                        :ARG0 (h / he)\n                        :ARG1 (s3 / status\n                                  :poss (t2 / thing\n                                            :ARG1 (s4 / ship-01))))))", "(s / send-01\n   :ARG0 (s2 / she)\n   :ARG1 (n / number\n            :instrument (t / track-01))\n   :ARG2 (h / he)\n   :purpose (p / possible-01\n               :ARG1 (c / check-01\n                        :ARG0 h\n                        :ARG1 (s3 / status\n                                  :poss (t2 / thing\n                                            :ARG1 (s4 / ship-01))))))", "(s / send-01\n   :ARG0 (s2 / she)\n   :ARG1 (n / number\n            :instrument (t / track-01))\n   :ARG2 (h / he)\n   :purpose (p / possible-01\n               :ARG1 (c / check-01\n                        :ARG0 h\n                        :ARG1 (s3 / status\n                                  :poss (t2 / thing\n                                            :ARG1 (s4 / ship-01))))))"], "smus": ["Not yet received.", "Sended Friday.", "Gene sent Jack on Friday.", "Jack has yet to receive a package Gene sent him on Friday.", "Jack has not yet received a package Gene sent him on Friday.", "He was sent a tracking number.", "She sent a tracking number.", "She sent him a tracking number.", "He can chek on the status of the shipment.", "He can chek on the status of the shipment.", "She sent a tracking number so he could chek the status of the shipment.", "She sent him a tracking number so he could chek the status of the shipment.", "She sent him a tracking number so he could chek the status of the shipment."]}, {"instance_id": "samsum-281", "summary": "Payton provides Max with websites selling clothes. Payton likes browsing and trying on the clothes but not necessarily buying them. Payton usually buys clothes and books as he loves reading.", "summary_trees": ["# ::snt Payton provides Max with websites selling clothes.\n(p / provide-01\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Payton\"))\n      :ARG1 (w / website\n            :ARG0-of (s / sell-01\n                  :ARG1 (c / clothes)))\n      :ARG2 (p3 / person\n            :name (n2 / name\n                  :op1 \"Max\")))", "# ::snt Payton likes browsing and trying on the clothes but not necessarily buying them.\n(c / contrast-01\n      :ARG1 (l / like-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Payton\"))\n            :ARG1 (a / and\n                  :op1 (b / browse-01\n                        :ARG0 p\n                        :ARG1 (c2 / clothes))\n                  :op2 (t / try-04\n                        :ARG0 p\n                        :ARG1 c2)))\n      :ARG2 (n2 / need-01\n            :polarity -\n            :ARG1 (b2 / buy-01\n                  :ARG0 p\n                  :ARG1 c2)))", "# ::snt Payton usually buys clothes and books as he loves reading.\n(b / buy-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Payton\"))\n      :ARG1 (a / and\n            :op1 (c / clothes)\n            :op2 (b2 / book))\n      :ARG1-of (c2 / cause-01\n            :ARG0 (l / love-01\n                  :ARG0 p\n                  :ARG1 (r / read-01\n                        :ARG0 p)))\n      :frequency (u / usual))"], "tree": ["(p / provide-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Payton\"))\n   :ARG1 (w / website\n            :ARG0 (s / sell-01\n                     :ARG1 (c / clothes))))", "(p / provide-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Payton\"))\n   :ARG1 (w / website\n            :ARG0 (s / sell-01\n                     :ARG1 (c / clothes)))\n   :ARG2 (p3 / person\n             :name (n2 / name\n                       :op1 \"Max\")))", "(p / provide-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Payton\"))\n   :ARG1 (w / website\n            :ARG0 (s / sell-01\n                     :ARG1 (c / clothes)))\n   :ARG2 (p3 / person\n             :name (n2 / name\n                       :op1 \"Max\")))", "(b / browse-01\n   :ARG0 (p / person :name (n / name :op1 \"Payton\"))\n   :ARG1 (c2 / clothes))", "(l / like-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Payton\"))\n   :ARG1 (t / try-04\n            :ARG0 p\n            :ARG1 (c2 / clothes)))", "(l / like-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Payton\"))\n   :ARG1 (b / browse-01\n            :ARG0 p\n            :ARG1 (c2 / clothes)))", "(c / contrast-01\n   :ARG1 (l / like-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Payton\"))\n            :ARG1 (b / browse-01\n                     :ARG0 p\n                     :ARG1 (c2 / clothes))))", "(l / like-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Payton\"))\n   :ARG1 (a / and\n            :op1 (b / browse-01\n                    :ARG0 p\n                    :ARG1 (c2 / clothes))\n            :op2 (t / try-04\n                    :ARG0 p\n                    :ARG1 c2)))", "(c / contrast-01\n   :ARG1 (l / like-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Payton\"))\n            :ARG1 (t / try-04\n                     :ARG0 p\n                     :ARG1 (c2 / clothes)))\n   :ARG2 (n2 / need-01\n             :polarity -\n             :ARG1 (b2 / buy-01\n                       :ARG0 p\n                       :ARG1 c2)))", "(c / contrast-01\n   :ARG1 (l / like-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Payton\"))\n            :ARG1 (a / and\n                     :op1 (b / browse-01\n                             :ARG0 p\n                             :ARG1 (c2 / clothes))\n                     :op2 (t / try-04\n                             :ARG0 p\n                             :ARG1 c2)))\n   :ARG2 (n2 / need-01\n             :polarity -\n             :ARG1 (b2 / buy-01\n                       :ARG0 p\n                       :ARG1 c2)))", "(l / love-01\n   :ARG1 (r / read-01\n            :ARG0 (p / person :name (n / name :op1 \"Payton\"))))", "(l / love-01\n   :ARG0 (p / person :name (n / name :op1 \"Payton\"))\n   :ARG1 (r / read-01\n            :ARG0 p))", "(l / love-01\n   :ARG0 (p / person :name (n / name :op1 \"Payton\"))\n   :ARG1 (r / read-01\n            :ARG0 p))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Payton\")))", "(c2 / cause-01\n    :ARG0 (l / love-01\n             :ARG0 (p / person :name (n / name :op1 \"Payton\"))\n             :ARG1 (r / read-01\n                      :ARG0 p)))", "(b / buy-01\n   :ARG1 (a / and\n            :op1 (c / clothes)\n            :op2 (b2 / book)))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Payton\"))\n   :ARG1 (c / clothes))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Payton\"))\n   :ARG1 (b2 / book))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Payton\"))\n   :ARG1 (a / and\n            :op1 (c / clothes)\n            :op2 (b2 / book)))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Payton\"))\n   :ARG1 (c / clothes)\n   :ARG1 (c2 / cause-01\n             :ARG0 (l / love-01\n                      :ARG0 p\n                      :ARG1 (r / read-01\n                               :ARG0 p)))\n   :frequency (u / usual))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Payton\"))\n   :ARG1 (b2 / book)\n   :ARG1 (c2 / cause-01\n             :ARG0 (l / love-01\n                      :ARG0 p\n                      :ARG1 (r / read-01\n                               :ARG0 p)))\n   :ARG1 c2\n   :frequency (u / usual))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Payton\"))\n   :ARG1 (a / and\n            :op1 (c / clothes)\n            :op2 (b2 / book))\n   :ARG1 (c2 / cause-01\n             :ARG0 (l / love-01\n                      :ARG0 p\n                      :ARG1 (r / read-01\n                               :ARG0 p)))\n   :frequency (u / usual))"], "smus": ["Payton provides websites for selling clothes.", "Payton provides Max with clothing selling websites.", "Payton provides Max with clothing selling websites.", "Payton was browsing for clothes.", "Payton likes trying on clothes.", "Payton likes browsing for clothes.", "Payton likes browsing for clothes, but", "Payton likes browsing and trying clothes.", "Payton likes trying on clothes but does not need to buy them.", "Payton likes browsing and trying clothes, but does not need to buy them.", "Loves reading Payton.", "Payton loves reading.", "Payton loves reading.", "Payton buys.", "Because Payton loves reading.", "buys clothes and books.", "Payton buys clothes.", "Payton buys the books.", "Payton buys clothes and books.", "Payton usually buys clothes because he loves reading.", "Payton usually buys books because he loves reading.", "Payton usually buys clothes and books because he loves reading."]}, {"instance_id": "samsum-282", "summary": "Liam and Nate will meet spontaneously in 15 minutes.", "summary_trees": ["# ::snt Liam and Nate will meet spontaneously in 15 minutes.\n(m / meet-03\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Liam\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Nate\")))\n      :manner (s / spontaneous)\n      :time (a2 / after\n            :op1 (n3 / now)\n            :quant (t / temporal-quantity\n                  :quant 15\n                  :unit (m2 / minute))))"], "tree": ["(m / meet-03\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Nate\")))", "(m / meet-03\n   :time (a2 / after\n             :op1 (n3 / now)\n             :quant (t / temporal-quantity\n                       :quant 15\n                       :unit (m2 / minute))))", "(m / meet-03\n   :time (a2 / after\n             :op1 (n3 / now)\n             :quant (t / temporal-quantity\n                       :quant 15\n                       :unit (m2 / minute))))", "(m / meet-03\n   :time (a2 / after\n             :op1 (n3 / now)\n             :quant (t / temporal-quantity\n                       :quant 15\n                       :unit (m2 / minute))))", "(m / meet-03\n   :manner (s / spontaneous)\n   :time (a2 / after\n             :op1 (n3 / now)\n             :quant (t / temporal-quantity\n                       :quant 15\n                       :unit (m2 / minute))))", "(m / meet-03\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Liam\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Nate\"))))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Liam\"))\n   :time (a2 / after\n             :op1 (n3 / now)\n             :quant (t / temporal-quantity\n                       :quant 15\n                       :unit (m2 / minute))))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Liam\"))\n   :manner (s / spontaneous)\n   :time (a2 / after\n             :op1 (n3 / now)\n             :quant (t / temporal-quantity\n                       :quant 15\n                       :unit (m2 / minute))))", "(m / meet-03\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Nate\"))\n   :manner (s / spontaneous)\n   :manner s\n   :time (a2 / after\n             :op1 (n3 / now)\n             :quant (t / temporal-quantity\n                       :quant 15\n                       :unit (m2 / minute))))", "(m / meet-03\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Liam\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Nate\")))\n   :time (a2 / after\n             :op1 (n3 / now)\n             :quant (t / temporal-quantity\n                       :quant 15\n                       :unit (m2 / minute))))", "(m / meet-03\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Liam\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Nate\")))\n   :manner (s / spontaneous)\n   :time (a2 / after\n             :op1 (n3 / now)\n             :quant (t / temporal-quantity\n                       :quant 15\n                       :unit (m2 / minute))))"], "smus": ["Nate will meet.", "The meeting will take 15 minutes.", "The meeting will take 15 minutes.", "The meeting will take 15 minutes.", "15 minutes from now, the meeting will happen spontaneously.", "Liam and Nate will meet.", "Liam will meet in 15 minutes.", "Liam will meet spontaneously in 15 minutes.", "In 15 minutes Nate will meet spontaneously.", "Liam and Nate will meet in 15 minutes.", "In 15 minutes, Liam and Nate will meet spontaneously."]}, {"instance_id": "samsum-283", "summary": "Dad of Aubrianna's friend died of malaria in Kongo.", "summary_trees": ["# ::snt Dad of Aubrianna's friend died of malaria in Kongo.\n(d / die-01\n      :ARG1 (p / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (p2 / person\n                        :ARG0-of (h2 / have-rel-role-91\n                              :ARG1 (p3 / person\n                                    :name (n / name\n                                          :op1 \"Aubrianna\"))\n                              :ARG2 (f / friend)))\n                  :ARG2 (d2 / dad)))\n      :ARG1-of (c / cause-01\n            :ARG0 (m / malaria))\n      :location (c2 / city\n            :name (n2 / name\n                  :op1 \"Kongo\")))"], "tree": ["(d / die-01\n   :location (c2 / city\n                 :name (n2 / name\n                           :op1 \"Kongo\")))", "(d / die-01\n   :ARG1 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :ARG0 (h2 / have-rel-role-91\n                                         :ARG1 (p3 / person\n                                                   :name (n / name\n                                                            :op1 \"Aubrianna\"))\n                                         :ARG2 (f / friend)))\n                     :ARG2 (d2 / dad))))"], "smus": ["Died in Kongo.", "Aubrianna's friend's dad died."]}, {"instance_id": "samsum-284", "summary": "Liam will pick up Kane at 8. ", "summary_trees": ["# ::snt Liam will pick up Kane at 8.\n(p / pick-up-04\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Liam\"))\n      :ARG1 (p3 / person\n            :name (n2 / name\n                  :op1 \"Kane\"))\n      :time (d / date-entity\n            :time \"8:00\"))"], "tree": [], "smus": []}, {"instance_id": "samsum-285", "summary": "Simon will talk to Adrian in 5 minutes.", "summary_trees": ["# ::snt Simon will talk to Adrian in 5 minutes.\n(t / talk-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Simon\"))\n      :ARG2 (p2 / person\n            :name (n2 / name\n                  :op1 \"Adrian\"))\n      :time (a / after\n            :op1 (n3 / now)\n            :quant (t2 / temporal-quantity\n                  :quant 5\n                  :unit (m / minute))))"], "tree": ["(t / talk-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Simon\")))", "(t / talk-01\n   :time (a / after\n            :op1 (n3 / now)\n            :quant (t2 / temporal-quantity\n                       :quant 5\n                       :unit (m / minute))))", "(t / talk-01\n   :time (a / after\n            :op1 (n3 / now)\n            :quant (t2 / temporal-quantity\n                       :quant 5\n                       :unit (m / minute))))", "(t / talk-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Simon\"))\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Adrian\")))", "(t / talk-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Simon\"))\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Adrian\"))\n   :time (a / after\n            :op1 (n3 / now)\n            :quant (t2 / temporal-quantity\n                       :quant 5\n                       :unit (m / minute))))", "(t / talk-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Simon\"))\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Adrian\"))\n   :time (a / after\n            :op1 (n3 / now)\n            :quant (t2 / temporal-quantity\n                       :quant 5\n                       :unit (m / minute))))"], "smus": ["Simon will talk.", "Talk 5 minutes in.", "Talk 5 minutes in.", "Simon will talk to Adrian.", "Simon will talk to Adrian in 5 minutes.", "Simon will talk to Adrian in 5 minutes."]}, {"instance_id": "samsum-286", "summary": "Eric doesn't know if his parents let him go to Ivan's brother's wedding. Ivan will talk to them.", "summary_trees": ["# ::snt Eric doesn't know if his parents let him go to Ivan's brother's wedding.\n(k / know-01\n      :polarity -\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Eric\"))\n      :ARG1 (t / truth-value\n            :polarity-of (l / let-01\n                  :ARG0 (p2 / person\n                        :ARG0-of (h / have-rel-role-91\n                              :ARG1 p\n                              :ARG2 (p3 / parent)))\n                  :ARG1 (g / go-02\n                        :ARG0 p\n                        :ARG4 (w / wed-01\n                              :ARG1 (p4 / person\n                                    :ARG0-of (h2 / have-rel-role-91\n                                          :ARG1 (p5 / person\n                                                :name (n2 / name\n                                                      :op1 \"Ivan\"))\n                                          :ARG2 (b / brother))))))))", "# ::snt Ivan will talk to them.\n(t / talk-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Ivan\"))\n      :ARG2 (t2 / they))"], "tree": ["(h / have-rel-role-91\n   :ARG1 (p / person :name (n / name :op1 \"Eric\"))\n   :ARG2 (p3 / parent))", "(h2 / have-rel-role-91\n    :ARG1 (p5 / person\n              :name (n2 / name\n                        :op1 \"Ivan\"))\n    :ARG2 (b / brother))", "(w / wed-01\n   :ARG1 (p4 / person\n             :ARG0 (h2 / have-rel-role-91\n                       :ARG1 (p5 / person\n                                 :name (n2 / name\n                                           :op1 \"Ivan\"))\n                       :ARG2 (b / brother))))", "(w / wed-01\n   :ARG1 (p4 / person\n             :ARG0 (h2 / have-rel-role-91\n                       :ARG1 (p5 / person\n                                 :name (n2 / name\n                                           :op1 \"Ivan\"))\n                       :ARG2 (b / brother))))", "(k / know-01\n   :ARG1 (t / truth-value\n            :polarity (l / let-01\n                         :ARG0 (p2 / person\n                                   :ARG0 (h / have-rel-role-91\n                                            :ARG1 (p / person :name (n / name :op1 \"Eric\"))\n                                            :ARG2 (p3 / parent)))\n                         :ARG1 (g / go-02\n                                  :ARG0 p\n                                  :ARG4 (w / wed-01\n                                           :ARG1 (p4 / person\n                                                     :ARG0 (h2 / have-rel-role-91\n                                                               :ARG1 (p5 / person\n                                                                         :name (n2 / name\n                                                                                   :op1 \"Ivan\"))\n                                                               :ARG2 (b / brother))))))))", "(k / know-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Eric\"))\n   :ARG1 (t / truth-value\n            :polarity (l / let-01\n                         :ARG0 (p2 / person\n                                   :ARG0 (h / have-rel-role-91\n                                            :ARG1 p\n                                            :ARG2 (p3 / parent)))\n                         :ARG1 (g / go-02\n                                  :ARG0 p\n                                  :ARG4 (w / wed-01\n                                           :ARG1 (p4 / person\n                                                     :ARG0 (h2 / have-rel-role-91\n                                                               :ARG1 (p5 / person\n                                                                         :name (n2 / name\n                                                                                   :op1 \"Ivan\"))\n                                                               :ARG2 (b / brother))))))))", "(k / know-01\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Eric\"))\n   :ARG1 (t / truth-value\n            :polarity (l / let-01\n                         :ARG0 (p2 / person\n                                   :ARG0 (h / have-rel-role-91\n                                            :ARG1 p\n                                            :ARG2 (p3 / parent)))\n                         :ARG1 (g / go-02\n                                  :ARG0 p\n                                  :ARG4 (w / wed-01\n                                           :ARG1 (p4 / person\n                                                     :ARG0 (h2 / have-rel-role-91\n                                                               :ARG1 (p5 / person\n                                                                         :name (n2 / name\n                                                                                   :op1 \"Ivan\"))\n                                                               :ARG2 (b / brother))))))))", "(k / know-01\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Eric\"))\n   :ARG1 (t / truth-value\n            :polarity (l / let-01\n                         :ARG0 (p2 / person\n                                   :ARG0 (h / have-rel-role-91\n                                            :ARG1 p\n                                            :ARG2 (p3 / parent)))\n                         :ARG1 (g / go-02\n                                  :ARG0 p\n                                  :ARG4 (w / wed-01\n                                           :ARG1 (p4 / person\n                                                     :ARG0 (h2 / have-rel-role-91\n                                                               :ARG1 (p5 / person\n                                                                         :name (n2 / name\n                                                                                   :op1 \"Ivan\"))\n                                                               :ARG2 (b / brother))))))))", "(t / talk-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ivan\")))", "(t / talk-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ivan\"))\n   :ARG2 (t2 / they))", "(t / talk-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ivan\"))\n   :ARG2 (t2 / they))"], "smus": ["Eric's parents.", "Ivan's brother", "Ivan's brother got married.", "Ivan's brother got married.", "Don't know if Eric's parents let him go to Ivan's brother's wedding.", "Eric did not know if his parents let him go to Ivan's brother's wedding.", "Eric didn't know if his parents let him go to Ivan's brother's wedding.", "Eric didn't know if his parents let him go to Ivan's brother's wedding.", "Ivan will talk.", "Ivan will talk to them.", "Ivan will talk to them."]}, {"instance_id": "samsum-287", "summary": "Serena's skin condition is fine now and she doesn't have to take medication. Tina has a similar condition but takes medication on a daily basis. Tina can call Serena if she has questions. ", "summary_trees": ["# ::snt Serena's skin condition is fine now and she doesn't have to take medication.\n(a / and\n      :op1 (f / fine-04\n            :ARG1 (c / condition\n                  :mod (s / skin)\n                  :poss (p / person\n                        :name (n / name\n                              :op1 \"Serena\")))\n            :time (n2 / now))\n      :op2 (o / obligate-01\n            :polarity -\n            :ARG1 p\n            :ARG2 (t / take-01\n                  :ARG0 p\n                  :ARG1 (m / medication))))", "# ::snt Tina has a similar condition but takes medication on a daily basis.\n(h / have-concession-91\n      :ARG1 (t / take-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Tina\"))\n            :ARG1 (m / medication)\n            :frequency (r / rate-entity-91\n                  :ARG3 (t2 / temporal-quantity\n                        :quant 1\n                        :unit (d / day))))\n      :ARG2 (h2 / have-03\n            :ARG0 p\n            :ARG1 (c / condition\n                  :ARG1-of (r2 / resemble-01))))", "# ::snt Tina can call Serena if she has questions.\n(p / possible-01\n      :ARG1 (c / call-02\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Tina\"))\n            :ARG1 (p3 / person\n                  :name (n2 / name\n                        :op1 \"Serena\"))\n            :condition (q / question-01\n                  :ARG0 p2)))"], "tree": ["(o / obligate-01\n   :polarity -\n   :ARG1 (p / person :name (n / name :op1 \"Serena\"))\n   :ARG2 (t / take-01\n            :ARG0 p\n            :ARG1 (m / medication)))", "(f / fine-04\n   :ARG1 (c / condition\n            :mod (s / skin)\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Serena\"))))", "(f / fine-04\n   :ARG1 (c / condition\n            :mod (s / skin)\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Serena\")))\n   :time (n2 / now))", "(h2 / have-03\n    :ARG0 (p / person :name (n / name :op1 \"Tina\"))\n    :ARG1 (c / condition\n             :ARG1 (r2 / resemble-01)))", "(r / rate-entity-91\n   :ARG3 (t2 / temporal-quantity\n             :quant 1\n             :unit (d / day)))", "(h2 / have-03\n    :ARG0 (p / person :name (n / name :op1 \"Tina\"))\n    :ARG1 (c / condition\n             :ARG1 (r2 / resemble-01)))", "(r / rate-entity-91\n   :ARG3 (t2 / temporal-quantity\n             :quant 1\n             :unit (d / day)))", "(t / take-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tina\"))\n   :ARG1 (m / medication))", "(t / take-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tina\"))\n   :ARG1 (m / medication)\n   :frequency (r / rate-entity-91\n                 :ARG3 (t2 / temporal-quantity\n                           :quant 1\n                           :unit (d / day))))", "(h / have-concession-91\n   :ARG1 (t / take-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Tina\"))\n            :ARG1 (m / medication)\n            :frequency (r / rate-entity-91\n                          :ARG3 (t2 / temporal-quantity\n                                    :quant 1\n                                    :unit (d / day)))))", "(h / have-concession-91\n   :ARG1 (t / take-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Tina\"))\n            :ARG1 (m / medication)\n            :frequency (r / rate-entity-91\n                          :ARG3 (t2 / temporal-quantity\n                                    :quant 1\n                                    :unit (d / day))))\n   :ARG2 (h2 / have-03\n             :ARG0 p\n             :ARG1 (c / condition\n                      :ARG1 (r2 / resemble-01))))", "(h / have-concession-91\n   :ARG1 (t / take-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Tina\"))\n            :ARG1 (m / medication)\n            :frequency (r / rate-entity-91\n                          :ARG3 (t2 / temporal-quantity\n                                    :quant 1\n                                    :unit (d / day))))\n   :ARG2 (h2 / have-03\n             :ARG0 p\n             :ARG1 (c / condition\n                      :ARG1 (r2 / resemble-01))))", "(c / call-02\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Tina\")))", "(c / call-02\n   :ARG1 (p3 / person\n             :name (n2 / name\n                       :op1 \"Serena\")))", "(c / call-02\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Tina\"))\n   :ARG1 (p3 / person\n             :name (n2 / name\n                       :op1 \"Serena\")))", "(c / call-02\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Tina\"))\n   :ARG1 (p3 / person\n             :name (n2 / name\n                       :op1 \"Serena\"))\n   :condition (q / question-01\n                 :ARG0 p2))", "(p / possible-01\n   :ARG1 (c / call-02\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Tina\"))\n            :ARG1 (p3 / person\n                      :name (n2 / name\n                                :op1 \"Serena\"))\n            :condition (q / question-01\n                          :ARG0 p2)))", "(p / possible-01\n   :ARG1 (c / call-02\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Tina\"))\n            :ARG1 (p3 / person\n                      :name (n2 / name\n                                :op1 \"Serena\"))\n            :condition (q / question-01\n                          :ARG0 p2)))"], "smus": ["Serena didn't have to take the medication.", "Serena's skin condition is fine.", "Serena's skin condition is now fine.", "Tina has a similar condition.", "Every day.", "Tina has a similar condition.", "Every day.", "Tina takes the medication.", "Tina takes the medication daily.", "Tina takes the medication daily though.", "Tina has a similar condition but takes the medication daily.", "Tina has a similar condition but takes the medication daily.", "Tina, call.", "Call Serena.", "Tina would call Serena.", "Tina would call Serena if she had questions.", "Tina can call Serena if she has questions.", "Tina can call Serena if she has questions."]}, {"instance_id": "samsum-288", "summary": "Ali left his wallet at Mohammad's place. Mohammad'll bring it to uni tomorrow.", "summary_trees": ["# ::snt Ali left his wallet at Mohammad's place.\n(l / leave-15\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Ali\"))\n      :ARG1 (w / wallet\n            :poss p)\n      :ARG2 (p2 / place\n            :poss (p3 / person\n                  :name (n2 / name\n                        :op1 \"Mohammad\"))))", "# ::snt Mohammad'll bring it to uni tomorrow.\n(b / bring-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Mohammad\"))\n      :ARG1 (ii / it)\n      :ARG2 (u / university)\n      :time (t / tomorrow))"], "tree": ["(l / leave-15\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ali\"))\n   :ARG1 (w / wallet\n            :poss p))", "(l / leave-15\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ali\"))\n   :ARG1 (w / wallet\n            :poss p)\n   :ARG2 (p2 / place\n             :poss (p3 / person\n                       :name (n2 / name\n                                 :op1 \"Mohammad\"))))", "(l / leave-15\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ali\"))\n   :ARG1 (w / wallet\n            :poss p)\n   :ARG2 (p2 / place\n             :poss (p3 / person\n                       :name (n2 / name\n                                 :op1 \"Mohammad\"))))", "(b / bring-01\n   :ARG1 (ii / it)\n   :ARG2 (u / university))", "(b / bring-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mohammad\"))\n   :ARG1 (ii / it))", "(b / bring-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mohammad\"))\n   :ARG1 (ii / it)\n   :ARG2 (u / university))", "(b / bring-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mohammad\"))\n   :ARG1 (ii / it)\n   :ARG2 (u / university)\n   :time (t / tomorrow))", "(b / bring-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mohammad\"))\n   :ARG1 (ii / it)\n   :ARG2 (u / university)\n   :time (t / tomorrow))"], "smus": ["Ali left his wallet.", "Ali left his wallet in Mohammad's place.", "Ali left his wallet in Mohammad's place.", "Bring it to universite.", "Mohammad will bring it.", "Mohammad would bring it to the universit.", "Mohammad will bring it to the universit tomorrow.", "Mohammad will bring it to the universit tomorrow."]}, {"instance_id": "samsum-289", "summary": "Cindy is sad, but doesn't want to talk about the reason. Ellie hasn't seen the funny video that went viral. ", "summary_trees": ["# ::snt Cindy is sad, but doesn't want to talk about the reason.\n(h / have-concession-91\n      :ARG1 (w / want-01\n            :polarity -\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Cindy\"))\n            :ARG1 (t / talk-01\n                  :ARG0 p\n                  :ARG1 (r / reason\n                        :ARG0-of (c / cause-01\n                              :ARG1 (s / sad-02\n                                    :ARG1 p\n                                    :ARG2-of h))))))", "# ::snt Ellie hasn't seen the funny video that went viral.\n(s / see-01\n      :polarity -\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Ellie\"))\n      :ARG1 (v / video\n            :ARG1-of (f / funny-02)\n            :ARG1-of (g / go-08\n                  :ARG2 (v2 / viral))))"], "tree": ["(c / cause-01\n   :ARG1 (s / sad-02\n            :ARG1 (p / person :name (n / name :op1 \"Cindy\"))))", "(w / want-01\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Cindy\"))\n   :ARG1 (t / talk-01\n            :ARG0 p\n            :ARG1 (r / reason\n                     :ARG0 (c / cause-01\n                              :ARG1 (s / sad-02\n                                       :ARG1 p)))))", "(h / have-concession-91\n   :ARG1 (w / want-01\n            :polarity -\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Cindy\"))\n            :ARG1 (t / talk-01\n                     :ARG0 p\n                     :ARG1 (r / reason\n                              :ARG0 (c / cause-01\n                                       :ARG1 (s / sad-02\n                                                :ARG1 p))))))", "(h / have-concession-91\n   :ARG1 (w / want-01\n            :polarity -\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Cindy\"))\n            :ARG1 (t / talk-01\n                     :ARG0 p\n                     :ARG1 (r / reason\n                              :ARG0 (c / cause-01\n                                       :ARG1 (s / sad-02\n                                                :ARG1 p\n                                                :ARG2-of h))))))", "(h / have-concession-91\n   :ARG1 (w / want-01\n            :polarity -\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Cindy\"))\n            :ARG1 (t / talk-01\n                     :ARG0 p\n                     :ARG1 (r / reason\n                              :ARG0 (c / cause-01\n                                       :ARG1 (s / sad-02\n                                                :ARG1 p\n                                                :ARG2-of h))))))", "(s / see-01\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ellie\"))\n   :ARG1 (v / video\n            :ARG1 (f / funny-02)\n            :ARG1 (g / go-08\n                     :ARG2 (v2 / viral))))"], "smus": ["So, Cindy is sad.", "Cindy doesn't want to talk about the reason she's sad.", "Cindy doesn't want to talk about the reason she's sad though.", "Cindy doesn't want to talk about the reason she's so sad though.", "Cindy doesn't want to talk about the reason she's so sad though.", "Ellie hasn't seen a funny video that went viral."]}, {"instance_id": "samsum-290", "summary": "Jack needs Kev's help as he cannot get the application running. ", "summary_trees": ["# ::snt Jack needs Kev's help as he cannot get the application running.\n(n / need-01\n      :ARG0 (p / person\n            :name (n2 / name\n                  :op1 \"Jack\"))\n      :ARG1 (h / help-01\n            :ARG0 (p2 / person\n                  :name (n3 / name\n                        :op1 \"Kev\"))\n            :ARG1 p)\n      :ARG1-of (c / cause-01\n            :ARG0 (p3 / possible-01\n                  :polarity -\n                  :ARG1 (g / get-04\n                        :ARG0 p\n                        :ARG1 (r / run-01\n                              :ARG0 p\n                              :ARG1 (a / application))))))"], "tree": ["(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Jack\")))", "(p3 / possible-01\n    :polarity -\n    :ARG1 (g / get-04\n             :ARG0 (p / person :name (n2 / name :op1 \"Jack\"))\n             :ARG1 (r / run-01\n                      :ARG0 p\n                      :ARG1 (a / application))))", "(c / cause-01\n   :ARG0 (p3 / possible-01\n             :polarity -\n             :ARG1 (g / get-04\n                      :ARG0 (p / person :name (n2 / name :op1 \"Jack\"))\n                      :ARG1 (r / run-01\n                               :ARG0 p\n                               :ARG1 (a / application)))))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Jack\"))\n   :ARG1 (h / help-01\n            :ARG0 (p2 / person\n                      :name (n3 / name\n                                :op1 \"Kev\"))\n            :ARG1 p))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Jack\"))\n   :ARG1 (h / help-01\n            :ARG0 (p2 / person\n                      :name (n3 / name\n                                :op1 \"Kev\"))\n            :ARG1 p)\n   :ARG1 (c / cause-01\n            :ARG0 (p3 / possible-01\n                      :polarity -\n                      :ARG1 (g / get-04\n                               :ARG0 p\n                               :ARG1 (r / run-01\n                                        :ARG0 p\n                                        :ARG1 (a / application))))))"], "smus": ["Jack needs.", "Jack can not get the application run.", "Because Jack cannot get the application run.", "Jack needs the help of Kev.", "Jack needs the help of Kev because he can't get the application run."]}, {"instance_id": "samsum-291", "summary": "Riley and James watch Chloe on tv undergoing a metamorphosis.", "summary_trees": ["# ::snt Riley and James watch Chloe on tv undergoing a metamorphosis.\n(w / watch-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Riley\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"James\")))\n      :ARG1 (p3 / person\n            :name (n3 / name\n                  :op1 \"Chloe\")\n            :ARG1-of (u / undergo-28\n                  :ARG2 (m / metamorphose-01\n                        :ARG1 p3)))\n      :medium (t / television))"], "tree": [], "smus": []}, {"instance_id": "samsum-292", "summary": "Imagine Dragons have a concert at ABC Theatre on 12 July. Sally wants to go with Tim. She bought tickets, they cost 70.", "summary_trees": ["# ::snt Imagine Dragons have a concert at ABC Theatre on 12 July.\n(h / have-06\n      :ARG0 (o / organization\n            :name (n / name\n                  :op1 \"Imagine\"\n                  :op2 \"Dragons\"))\n      :ARG1 (c / concert\n            :location (f / facility\n                  :name (n2 / name\n                        :op1 \"ABC\"\n                        :op2 \"Theatre\")))\n      :time (d / date-entity\n            :month 7\n            :day 12))", "# ::snt Sally wants to go with Tim.\n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Sally\"))\n      :ARG1 (g / go-21\n            :ARG1 p\n            :ARG2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Tim\"))))", "# ::snt She bought tickets, they cost 70.\n(b / buy-01\n      :ARG0 (s / she)\n      :ARG1 (t / ticket\n            :ARG1-of (c / cost-01\n                  :ARG2 (m / monetary-quantity\n                        :quant 70\n                        :unit (d / dollar)))))"], "tree": ["(h / have-06\n   :ARG0 (o / organization\n            :name (n / name\n                     :op1 \"Imagine\"\n                     :op2 \"Dragons\"))\n   :ARG1 (c / concert\n            :location (f / facility\n                         :name (n2 / name\n                                   :op1 \"ABC\"\n                                   :op2 \"Theatre\")))\n   :time (d / date-entity\n            :month 7\n            :day 12))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sally\"))\n   :ARG1 (g / go-21\n            :ARG1 p\n            :ARG2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Tim\"))))", "(c / cost-01\n   :ARG2 (m / monetary-quantity\n            :quant 70\n            :unit (d / dollar)))", "(b / buy-01\n   :ARG1 (t / ticket\n            :ARG1 (c / cost-01\n                     :ARG2 (m / monetary-quantity\n                              :quant 70\n                              :unit (d / dollar)))))"], "smus": ["The Imagine Dragons have a concert at the ABC Theatre on July 12.", "Sally wants to go with Tim.", "It cost 70 bucks.", "bought tickets that cost 70 bucks."]}, {"instance_id": "samsum-293", "summary": "Jane thinks Den's mum needs to get out more, so Den suggests to invite her for tea, fish and chips on Friday after work.", "summary_trees": ["# ::snt Jane thinks Den's mum needs to get out more, so Den suggests to invite her for tea, fish and chips on Friday after work.\n(t / think-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jane\"))\n      :ARG1 (n2 / need-01\n            :ARG0 (p2 / person\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 (p3 / person\n                              :name (n3 / name\n                                    :op1 \"Den\"))\n                        :ARG2 (m / mum)))\n            :ARG1 (g / get-05\n                  :ARG1 p2\n                  :ARG2 (o / out)\n                  :quant (m2 / more)))\n      :ARG0-of (c / cause-01\n            :ARG1 (s / suggest-01\n                  :ARG0 p3\n                  :ARG1 (ii / invite-01\n                        :ARG0 p3\n                        :ARG1 p2\n                        :ARG2 (a / and\n                              :op1 (t2 / tea)\n                              :op2 (f / fish)\n                              :op3 (c2 / chip))\n                        :time (d / date-entity\n                              :weekday (f2 / friday))\n                        :time (a2 / after\n                              :op1 (w / work-01\n                                    :ARG0 p3))))))"], "tree": ["(g / get-05\n   :ARG1 (p2 / person)\n   :ARG2 (o / out))", "(ii / invite-01\n    :ARG1 (p2 / person)\n    :ARG2 (t2 / tea))", "(ii / invite-01\n    :ARG1 (p2 / person)\n    :ARG2 (f / fish))", "(ii / invite-01\n    :ARG1 (p2 / person)\n    :ARG2 (c2 / chip))", "(ii / invite-01\n    :time (d / date-entity\n             :weekday (f2 / friday)))", "(ii / invite-01\n    :ARG0 (p3 / person :name (n3 / name :op1 \"Den\"))\n    :ARG1 (p2 / person)\n    :ARG2 (t2 / tea))", "(ii / invite-01\n    :ARG0 (p3 / person :name (n3 / name :op1 \"Den\"))\n    :ARG1 (p2 / person)\n    :ARG2 (f / fish))", "(ii / invite-01\n    :ARG0 (p3 / person :name (n3 / name :op1 \"Den\"))\n    :ARG1 (p2 / person)\n    :ARG2 (c2 / chip))", "(g / get-05\n   :ARG1 (p2 / person)\n   :ARG2 (o / out)\n   :quant (m2 / more))", "(h / have-rel-role-91\n   :ARG1 (p3 / person\n             :name (n3 / name\n                       :op1 \"Den\"))\n   :ARG2 (m / mum))", "(n2 / need-01\n    :ARG1 (g / get-05\n             :ARG1 (p2 / person)\n             :ARG2 (o / out)\n             :quant (m2 / more)))", "(ii / invite-01\n    :time (d / date-entity\n             :weekday (f2 / friday))\n    :time (a2 / after\n              :op1 (w / work-01)))", "(ii / invite-01\n    :ARG0 (p3 / person :name (n3 / name :op1 \"Den\"))\n    :ARG1 (p2 / person)\n    :ARG2 (t2 / tea)\n    :time (d / date-entity\n             :weekday (f2 / friday)))", "(ii / invite-01\n    :ARG0 (p3 / person :name (n3 / name :op1 \"Den\"))\n    :ARG1 (p2 / person)\n    :ARG2 (f / fish)\n    :time (d / date-entity\n             :weekday (f2 / friday)))", "(ii / invite-01\n    :ARG1 (p2 / person)\n    :ARG2 (a / and\n             :op1 (t2 / tea)\n             :op2 (f / fish)\n             :op3 (c2 / chip)))", "(ii / invite-01\n    :ARG0 (p3 / person :name (n3 / name :op1 \"Den\"))\n    :ARG1 (p2 / person)\n    :ARG2 (c2 / chip)\n    :time (d / date-entity\n             :weekday (f2 / friday))\n    :time d)", "(ii / invite-01\n    :ARG0 (p3 / person :name (n3 / name :op1 \"Den\"))\n    :ARG1 (p2 / person)\n    :ARG2 (a / and\n             :op1 (t2 / tea)\n             :op2 (f / fish)\n             :op3 (c2 / chip)))", "(ii / invite-01\n    :ARG0 (p3 / person :name (n3 / name :op1 \"Den\"))\n    :ARG1 (p2 / person)\n    :ARG2 (t2 / tea)\n    :time (d / date-entity\n             :weekday (f2 / friday))\n    :time (a2 / after\n              :op1 (w / work-01\n                      :ARG0 p3)))", "(ii / invite-01\n    :ARG0 (p3 / person :name (n3 / name :op1 \"Den\"))\n    :ARG1 (p2 / person)\n    :ARG2 (f / fish)\n    :time (d / date-entity\n             :weekday (f2 / friday))\n    :time (a2 / after\n              :op1 (w / work-01\n                      :ARG0 p3)))", "(ii / invite-01\n    :ARG0 (p3 / person :name (n3 / name :op1 \"Den\"))\n    :ARG1 (p2 / person)\n    :ARG2 (a / and\n             :op1 (t2 / tea)\n             :op2 (f / fish)\n             :op3 (c2 / chip))\n    :time (d / date-entity\n             :weekday (f2 / friday)))", "(ii / invite-01\n    :ARG0 (p3 / person :name (n3 / name :op1 \"Den\"))\n    :ARG1 (p2 / person)\n    :ARG2 (c2 / chip)\n    :time (d / date-entity\n             :weekday (f2 / friday))\n    :time d\n    :time (a2 / after\n              :op1 (w / work-01\n                      :ARG0 p3)))", "(s / suggest-01\n   :ARG0 (p3 / person :name (n3 / name :op1 \"Den\"))\n   :ARG1 (ii / invite-01\n             :ARG0 p3\n             :ARG1 (p2 / person)\n             :ARG2 (t2 / tea)\n             :time (d / date-entity\n                      :weekday (f2 / friday))\n             :time (a2 / after\n                       :op1 (w / work-01\n                               :ARG0 p3))))", "(s / suggest-01\n   :ARG0 (p3 / person :name (n3 / name :op1 \"Den\"))\n   :ARG1 (ii / invite-01\n             :ARG0 p3\n             :ARG1 (p2 / person)\n             :ARG2 (f / fish)\n             :time (d / date-entity\n                      :weekday (f2 / friday))\n             :time (a2 / after\n                       :op1 (w / work-01\n                               :ARG0 p3))))", "(s / suggest-01\n   :ARG0 (p3 / person :name (n3 / name :op1 \"Den\"))\n   :ARG1 (ii / invite-01\n             :ARG0 p3\n             :ARG1 (p2 / person)\n             :ARG2 (t2 / tea)\n             :time (d / date-entity\n                      :weekday (f2 / friday))\n             :time (a2 / after\n                       :op1 (w / work-01\n                               :ARG0 p3))))", "(s / suggest-01\n   :ARG0 (p3 / person :name (n3 / name :op1 \"Den\"))\n   :ARG1 (ii / invite-01\n             :ARG0 p3\n             :ARG1 (p2 / person)\n             :ARG2 (f / fish)\n             :time (d / date-entity\n                      :weekday (f2 / friday))\n             :time (a2 / after\n                       :op1 (w / work-01\n                               :ARG0 p3))))", "(s / suggest-01\n   :ARG0 (p3 / person :name (n3 / name :op1 \"Den\"))\n   :ARG1 (ii / invite-01\n             :ARG0 p3\n             :ARG1 (p2 / person)\n             :ARG2 (c2 / chip)\n             :time (d / date-entity\n                      :weekday (f2 / friday))\n             :time d\n             :time (a2 / after\n                       :op1 (w / work-01\n                               :ARG0 p3))))", "(s / suggest-01\n   :ARG0 (p3 / person :name (n3 / name :op1 \"Den\"))\n   :ARG1 (ii / invite-01\n             :ARG0 p3\n             :ARG1 (p2 / person)\n             :ARG2 (c2 / chip)\n             :time (d / date-entity\n                      :weekday (f2 / friday))\n             :time d\n             :time (a2 / after\n                       :op1 (w / work-01\n                               :ARG0 p3))))", "(n2 / need-01\n    :ARG0 (p2 / person\n              :ARG0 (h / have-rel-role-91\n                       :ARG1 (p3 / person\n                                 :name (n3 / name\n                                           :op1 \"Den\"))\n                       :ARG2 (m / mum)))\n    :ARG1 (g / get-05\n             :ARG1 p2\n             :ARG2 (o / out)\n             :quant (m2 / more)))", "(n2 / need-01\n    :ARG0 (p2 / person\n              :ARG0 (h / have-rel-role-91\n                       :ARG1 (p3 / person\n                                 :name (n3 / name\n                                           :op1 \"Den\"))\n                       :ARG2 (m / mum)))\n    :ARG1 (g / get-05\n             :ARG1 p2\n             :ARG2 (o / out)\n             :quant (m2 / more)))", "(c / cause-01\n   :ARG1 (s / suggest-01\n            :ARG0 (p3 / person :name (n3 / name :op1 \"Den\"))\n            :ARG1 (ii / invite-01\n                      :ARG0 p3\n                      :ARG1 (p2 / person)\n                      :ARG2 (t2 / tea)\n                      :time (d / date-entity\n                               :weekday (f2 / friday))\n                      :time (a2 / after\n                                :op1 (w / work-01\n                                        :ARG0 p3)))))", "(c / cause-01\n   :ARG1 (s / suggest-01\n            :ARG0 (p3 / person :name (n3 / name :op1 \"Den\"))\n            :ARG1 (ii / invite-01\n                      :ARG0 p3\n                      :ARG1 (p2 / person)\n                      :ARG2 (f / fish)\n                      :time (d / date-entity\n                               :weekday (f2 / friday))\n                      :time (a2 / after\n                                :op1 (w / work-01\n                                        :ARG0 p3)))))", "(ii / invite-01\n    :ARG0 (p3 / person :name (n3 / name :op1 \"Den\"))\n    :ARG1 (p2 / person)\n    :ARG2 (a / and\n             :op1 (t2 / tea)\n             :op2 (f / fish)\n             :op3 (c2 / chip))\n    :time (d / date-entity\n             :weekday (f2 / friday))\n    :time (a2 / after\n              :op1 (w / work-01\n                      :ARG0 p3)))", "(c / cause-01\n   :ARG1 (s / suggest-01\n            :ARG0 (p3 / person :name (n3 / name :op1 \"Den\"))\n            :ARG1 (ii / invite-01\n                      :ARG0 p3\n                      :ARG1 (p2 / person)\n                      :ARG2 (c2 / chip)\n                      :time (d / date-entity\n                               :weekday (f2 / friday))\n                      :time d\n                      :time (a2 / after\n                                :op1 (w / work-01\n                                        :ARG0 p3)))))", "(s / suggest-01\n   :ARG0 (p3 / person :name (n3 / name :op1 \"Den\"))\n   :ARG1 (ii / invite-01\n             :ARG0 p3\n             :ARG1 (p2 / person)\n             :ARG2 (a / and\n                      :op1 (t2 / tea)\n                      :op2 (f / fish)\n                      :op3 (c2 / chip))\n             :time (d / date-entity\n                      :weekday (f2 / friday))\n             :time (a2 / after\n                       :op1 (w / work-01\n                               :ARG0 p3))))", "(s / suggest-01\n   :ARG0 (p3 / person :name (n3 / name :op1 \"Den\"))\n   :ARG1 (ii / invite-01\n             :ARG0 p3\n             :ARG1 (p2 / person)\n             :ARG2 (a / and\n                      :op1 (t2 / tea)\n                      :op2 (f / fish)\n                      :op3 (c2 / chip))\n             :time (d / date-entity\n                      :weekday (f2 / friday))\n             :time (a2 / after\n                       :op1 (w / work-01\n                               :ARG0 p3))))", "(c / cause-01\n   :ARG1 (s / suggest-01\n            :ARG0 (p3 / person :name (n3 / name :op1 \"Den\"))\n            :ARG1 (ii / invite-01\n                      :ARG0 p3\n                      :ARG1 (p2 / person)\n                      :ARG2 (a / and\n                               :op1 (t2 / tea)\n                               :op2 (f / fish)\n                               :op3 (c2 / chip))\n                      :time (d / date-entity\n                               :weekday (f2 / friday))\n                      :time (a2 / after\n                                :op1 (w / work-01\n                                        :ARG0 p3)))))", "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jane\"))\n   :ARG1 (n2 / need-01\n             :ARG0 (p2 / person\n                       :ARG0 (h / have-rel-role-91\n                                :ARG1 (p3 / person\n                                          :name (n3 / name\n                                                    :op1 \"Den\"))\n                                :ARG2 (m / mum)))\n             :ARG1 (g / get-05\n                      :ARG1 p2\n                      :ARG2 (o / out)\n                      :quant (m2 / more))))"], "smus": ["Get people out.", "invite people for tea.", "invite people to fish.", "invite people for chips.", "Invite on Friday.", "Den will invite people for tea.", "Den will invite people to a fish.", "Den will invite people to chips.", "Get people out more.", "Den's mum.", "Needs to get people out more.", "Invite on Friday after work.", "Den will invite people to a tea on Friday.", "Den will invite people to fish on Friday.", "invite people for tea, fish and chips.", "Den will invite people to chips on Friday.", "Den will invite people for tea, fish and chips.", "Den will invite people for tea on Friday after work.", "Den will invite people to fish on Friday after work.", "Den will invite people to tea, fish and chips on Friday.", "Den will invite people to chips on Friday after work.", "Den suggests inviting people for a tea on Friday after work.", "Den suggests inviting people to fish on Friday after work.", "Den suggests inviting people for a tea on Friday after work.", "Den suggests inviting people to fish on Friday after work.", "Den suggests inviting people over for chips on Friday after work.", "Den suggests inviting people over for chips on Friday after work.", "Den's mum needs to get out more.", "Den's mum needs to get out more.", "So Den suggests that after work on Friday he invite people for tea.", "So Den suggests that after work on Friday, he invite people to a fish.", "Den will invite people to tea, fish and chips on Friday after work.", "So Den suggests that after work on Friday, he invite people to chips.", "Den suggests inviting people for tea, fish and chips on Friday after work.", "Den suggests inviting people for tea, fish and chips on Friday after work.", "So Den suggests that after work on Friday he invite people to tea, fish and chips.", "Jane thinks Den's mum needs to get out more."]}, {"instance_id": "samsum-294", "summary": "Emily's a guest at Linda's house. She broke one of Linda's green tea cups when she was cleaning the cupboards. Linda doesn't like them and she offers Emily the whole set.", "summary_trees": ["# ::snt Emily's a guest at Linda's house.\n(g / guest\n      :domain (p / person\n            :name (n / name\n                  :op1 \"Emily\"))\n      :location (h / house\n            :poss (p2 / person\n                  :name (n2 / name\n                        :op1 \"Linda\"))))", "# ::snt She broke one of Linda's green tea cups when she was cleaning the cupboards.\n(b / break-01\n      :ARG0 (s / she)\n      :ARG1 (c / cup\n            :quant 1\n            :ARG1-of (g / green-02)\n            :ARG1-of (ii / include-91\n                  :ARG2 (c2 / cup\n                        :mod (t / tea)\n                        :poss (p / person\n                              :name (n / name\n                                    :op1 \"Linda\")))))\n      :time (c3 / clean-01\n            :ARG0 s\n            :ARG1 (c4 / cupboard)))", "# ::snt Linda doesn't like them and she offers Emily the whole set.\n(a / and\n      :op1 (d / dislike-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Linda\"))\n            :ARG1 (t / they))\n      :op2 (o / offer-01\n            :ARG0 p\n            :ARG1 (s / set\n                  :mod (w / whole))\n            :ARG3 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Emily\"))))"], "tree": ["(g / guest\n   :domain (p / person\n              :name (n / name\n                       :op1 \"Emily\"))\n   :location (h / house\n                :poss (p2 / person\n                          :name (n2 / name\n                                    :op1 \"Linda\"))))", "(c3 / clean-01\n    :ARG0 (s / she)\n    :ARG1 (c4 / cupboard))", "(c3 / clean-01\n    :ARG0 (s / she)\n    :ARG1 (c4 / cupboard))", "(ii / include-91\n    :ARG2 (c2 / cup\n              :mod (t / tea)\n              :poss (p / person\n                       :name (n / name\n                                :op1 \"Linda\"))))", "(b / break-01\n   :ARG0 (s / she)\n   :ARG1 (c / cup\n            :quant 1\n            :ARG1 (g / green-02)\n            :ARG1 (ii / include-91\n                      :ARG2 (c2 / cup\n                                :mod (t / tea)\n                                :poss (p / person\n                                         :name (n / name\n                                                  :op1 \"Linda\"))))))", "(b / break-01\n   :ARG0 (s / she)\n   :ARG1 (c / cup\n            :quant 1\n            :ARG1 (g / green-02)\n            :ARG1 (ii / include-91\n                      :ARG2 (c2 / cup\n                                :mod (t / tea)\n                                :poss (p / person\n                                         :name (n / name\n                                                  :op1 \"Linda\")))))\n   :time (c3 / clean-01\n             :ARG0 s\n             :ARG1 (c4 / cupboard)))", "(b / break-01\n   :ARG0 (s / she)\n   :ARG1 (c / cup\n            :quant 1\n            :ARG1 (g / green-02)\n            :ARG1 (ii / include-91\n                      :ARG2 (c2 / cup\n                                :mod (t / tea)\n                                :poss (p / person\n                                         :name (n / name\n                                                  :op1 \"Linda\")))))\n   :time (c3 / clean-01\n             :ARG0 s\n             :ARG1 (c4 / cupboard)))", "(o / offer-01\n   :ARG1 (s / set\n            :mod (w / whole)))", "(o / offer-01\n   :ARG0 (p / person :name (n / name :op1 \"Linda\"))\n   :ARG1 (s / set\n            :mod (w / whole)))", "(d / dislike-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Linda\"))\n   :ARG1 (t / they))", "(d / dislike-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Linda\"))\n   :ARG1 (t / they))", "(o / offer-01\n   :ARG0 (p / person :name (n / name :op1 \"Linda\"))\n   :ARG1 (s / set\n            :mod (w / whole))\n   :ARG3 (p2 / person\n             :name (n2 / name\n                       :op1 \"Emily\")))"], "smus": ["Emily was a guest at Linda's house.", "She was cleaning the cupsboard.", "She was cleaning the cupsboard.", "Linda's tea cups are one of them.", "She broke into one of Linda's tea cups, one of green.", "While cleaning the cupsboard, she broke one of Linda's tea cups, one of green.", "While cleaning the cupsboard, she broke one of Linda's tea cups, one of green.", "Offers a whole set.", "Linda offers a whole set.", "Linda doesn't like them.", "Linda doesn't like them.", "Linda offers Emily a whole set."]}, {"instance_id": "samsum-295", "summary": "Michelle is still researching and Harvey cannot wait all day for the update. Michelle can't see most of the things as it's black hat and it installs bugs on her computer.", "summary_trees": ["# ::snt Michelle is still researching and Harvey cannot wait all day for the update.\n(a / and\n      :op1 (r / research-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Michelle\"))\n            :mod (s / still))\n      :op2 (p2 / possible-01\n            :polarity -\n            :ARG1 (w / wait-01\n                  :ARG1 (p3 / person\n                        :name (n2 / name\n                              :op1 \"Harvey\"))\n                  :ARG2 (u / update-02)\n                  :duration (d / day\n                        :mod (a2 / all)))))", "# ::snt Michelle can't see most of the things as it's black hat and it installs bugs on her computer.\n(c / cause-01\n      :ARG0 (a / and\n            :op1 (h / hat\n                  :ARG1-of (b / black-04)\n                  :domain (t / thing))\n            :op2 (ii / install-01\n                  :ARG0 t\n                  :ARG1 (b2 / bug)\n                  :ARG2 (c2 / computer\n                        :poss (p / person\n                              :name (n / name\n                                    :op1 \"Michelle\")))))\n      :ARG1 (p2 / possible-01\n            :polarity -\n            :ARG1 (s / see-01\n                  :ARG0 p\n                  :ARG1 (t2 / thing\n                        :quant (m / most)\n                        :ARG1-of (ii2 / include-91\n                              :ARG2 t)))))"], "tree": ["(w / wait-01\n   :duration (d / day\n                :mod (a2 / all)))", "(w / wait-01\n   :duration (d / day\n                :mod (a2 / all)))", "(w / wait-01\n   :ARG1 (p3 / person\n             :name (n2 / name\n                       :op1 \"Harvey\")))", "(r / research-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Michelle\")))", "(r / research-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Michelle\"))\n   :mod (s / still))", "(p2 / possible-01\n    :polarity -\n    :ARG1 (w / wait-01\n             :ARG1 (p3 / person\n                       :name (n2 / name\n                                 :op1 \"Harvey\"))\n             :ARG2 (u / update-02)\n             :duration (d / day\n                          :mod (a2 / all))))", "(ii / install-01\n    :ARG0 (t / thing)\n    :ARG1 (b2 / bug))", "(ii / install-01\n    :ARG0 (t / thing)\n    :ARG1 (b2 / bug)\n    :ARG2 (c2 / computer\n              :poss (p / person\n                       :name (n / name\n                                :op1 \"Michelle\"))))", "(ii / install-01\n    :ARG0 (t / thing)\n    :ARG1 (b2 / bug)\n    :ARG2 (c2 / computer\n              :poss (p / person\n                       :name (n / name\n                                :op1 \"Michelle\"))))", "(p2 / possible-01\n    :polarity -\n    :ARG1 (s / see-01\n             :ARG0 (p / person :name (n / name :op1 \"Michelle\"))\n             :ARG1 (t2 / thing\n                       :quant (m / most)\n                       :ARG1 (ii2 / include-91\n                                  :ARG2 (t / thing)))))", "(c / cause-01\n   :ARG0 (h / hat\n            :ARG1 (b / black-04)\n            :domain (t / thing))\n   :ARG1 (p2 / possible-01\n             :polarity -\n             :ARG1 (s / see-01\n                      :ARG0 (p / person :name (n / name :op1 \"Michelle\"))\n                      :ARG1 (t2 / thing\n                                :quant (m / most)\n                                :ARG1 (ii2 / include-91\n                                           :ARG2 t)))))", "(c / cause-01\n   :ARG0 (ii / install-01\n             :ARG0 (t / thing)\n             :ARG1 (b2 / bug)\n             :ARG2 (c2 / computer\n                       :poss (p / person\n                                :name (n / name\n                                         :op1 \"Michelle\"))))\n   :ARG1 (p2 / possible-01\n             :polarity -\n             :ARG1 (s / see-01\n                      :ARG0 p\n                      :ARG1 (t2 / thing\n                                :quant (m / most)\n                                :ARG1 (ii2 / include-91\n                                           :ARG2 t))))\n   :ARG1 p2)", "(c / cause-01\n   :ARG0 (a / and\n            :op1 (h / hat\n                    :ARG1 (b / black-04)\n                    :domain (t / thing))\n            :op2 (ii / install-01\n                     :ARG0 t\n                     :ARG1 (b2 / bug)\n                     :ARG2 (c2 / computer\n                               :poss (p / person\n                                        :name (n / name\n                                                 :op1 \"Michelle\")))))\n   :ARG1 (p2 / possible-01\n             :polarity -\n             :ARG1 (s / see-01\n                      :ARG0 p\n                      :ARG1 (t2 / thing\n                                :quant (m / most)\n                                :ARG1 (ii2 / include-91\n                                           :ARG2 t)))))"], "smus": ["All day waiting.", "All day waiting.", "Waiting for Harvey.", "Michelle is researching.", "Michelle is still researching.", "Harvey could not wait all day for an update.", "Things install bugs.", "Things install bugs on Michelle's computer.", "Things install bugs on Michelle's computer.", "Michelle can't see most of them.", "Some things are black hats so Michelle can't see most of them.", "Michelle can't see most of them because things install bugs on her computer.", "Some of them are black hats and install bugs on Michelle's computer so she can't see most of them."]}, {"instance_id": "samsum-296", "summary": "Adele got a new biscuit Labrador Chewy that is 4 months. Her cats keep their distance, and Poppy and Lulu seem to mother Chewy and Speedy wants to play.", "summary_trees": ["# ::snt Adele got a new biscuit Labrador Chewy that is 4 months.\n(g / get-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Adele\"))\n      :ARG1 (b / biscuit\n            :name (n2 / name\n                  :op1 \"Labrador\"\n                  :op2 \"Chewy\")\n            :ARG1-of (n3 / new-01)\n            :duration (t / temporal-quantity\n                  :quant 4\n                  :unit (m / month))))", "# ::snt Her cats keep their distance, and Poppy and Lulu seem to mother Chewy and Speedy wants to play.\n(a / and\n      :op1 (k / keep-02\n            :ARG0 (c / cat\n                  :poss (s / she))\n            :ARG1 (d / distance-01\n                  :ARG1 c\n                  :ARG2 s))\n      :op2 (s2 / seem-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Chewy\")\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 (a2 / and\n                              :op1 (p2 / person\n                                    :name (n2 / name\n                                          :op1 \"Poppy\"))\n                              :op2 (p3 / person\n                                    :name (n3 / name\n                                          :op1 \"Lulu\")))\n                        :ARG2 (m / mother)))\n            :ARG2 a2)\n      :op3 (w / want-01\n            :ARG0 (p4 / person\n                  :name (n4 / name\n                        :op1 \"Speedy\"))\n            :ARG1 (p5 / play-01\n                  :ARG0 p4)))"], "tree": ["(g / get-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Adele\"))\n   :ARG1 (b / biscuit\n            :name (n2 / name\n                      :op1 \"Labrador\"\n                      :op2 \"Chewy\")\n            :ARG1 (n3 / new-01)\n            :duration (t / temporal-quantity\n                         :quant 4\n                         :unit (m / month))))", "(g / get-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Adele\"))\n   :ARG1 (b / biscuit\n            :name (n2 / name\n                      :op1 \"Labrador\"\n                      :op2 \"Chewy\")\n            :ARG1 (n3 / new-01)\n            :duration (t / temporal-quantity\n                         :quant 4\n                         :unit (m / month))))", "(w / want-01\n   :ARG0 (p4 / person\n             :name (n4 / name\n                       :op1 \"Speedy\"))\n   :ARG1 (p5 / play-01\n             :ARG0 p4))", "(k / keep-02\n   :ARG0 (c / cat\n            :poss (s / she))\n   :ARG1 (d / distance-01\n            :ARG1 c\n            :ARG2 s))", "(w / want-01\n   :ARG0 (p4 / person\n             :name (n4 / name\n                       :op1 \"Speedy\"))\n   :ARG1 (p5 / play-01\n             :ARG0 p4))", "(k / keep-02\n   :ARG0 (c / cat\n            :poss (s / she))\n   :ARG1 (d / distance-01\n            :ARG1 c\n            :ARG2 s))", "(s2 / seem-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Chewy\")\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 (p2 / person\n                                :name (n2 / name\n                                          :op1 \"Poppy\"))\n                      :ARG2 (m / mother))))", "(s2 / seem-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Chewy\")\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 (a2 / and\n                                :op1 (p2 / person\n                                         :name (n2 / name\n                                                   :op1 \"Poppy\"))\n                                :op2 (p3 / person\n                                         :name (n3 / name\n                                                   :op1 \"Lulu\")))\n                      :ARG2 (m / mother))))", "(s2 / seem-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Chewy\")\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 (a2 / and\n                                :op1 (p2 / person\n                                         :name (n2 / name\n                                                   :op1 \"Poppy\"))\n                                :op2 (p3 / person\n                                         :name (n3 / name\n                                                   :op1 \"Lulu\")))\n                      :ARG2 (m / mother)))\n    :ARG2 a2)"], "smus": ["Adele got a new Labrador Chewy biscuit for four months.", "Adele got a new Labrador Chewy biscuit for four months.", "Speedy wants to play.", "Her cats keep a distance from her.", "Speedy wants to play.", "Her cats keep a distance from her.", "Chewy seems to be Poppy's mother.", "Chewy seems to be the mother of Poppy and Lula.", "Chewy seems to be Poppy and Lula's mother."]}, {"instance_id": "samsum-297", "summary": "Erin has just baked something that Zachary finds delicious. Zachary wants her to bring him a piece of it as now he's busy cleaning. ", "summary_trees": ["# ::snt Erin has just baked something that Zachary finds delicious.\n(b / bake-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Erin\"))\n      :ARG1 (s / something\n            :mod (d / delicious\n                  :ARG1-of (f / find-02\n                        :ARG0 (p2 / person\n                              :name (n2 / name\n                                    :op1 \"Zachary\")))))\n      :time (j / just))", "# ::snt Zachary wants her to bring him a piece of it as now he's busy cleaning.\n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Zachary\"))\n      :ARG1 (b / bring-01\n            :ARG0 (s / she)\n            :ARG1 (p2 / piece\n                  :part-of (ii / it))\n            :ARG2 p)\n      :ARG1-of (c / cause-01\n            :ARG0 (b2 / busy-01\n                  :ARG1 p\n                  :ARG2 (c2 / clean-01\n                        :ARG0 p)\n                  :time (n2 / now))))"], "tree": ["(b / bake-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Erin\")))", "(b / bake-01\n   :ARG1 (s / something\n            :mod (d / delicious\n                    :ARG1 (f / find-02\n                             :ARG0 (p2 / person\n                                       :name (n2 / name\n                                                 :op1 \"Zachary\"))))))", "(b / bring-01\n   :ARG1 (p2 / piece\n             :part (ii / it))\n   :ARG2 (p / person :name (n / name :op1 \"Zachary\")))", "(b2 / busy-01\n    :ARG1 (p / person :name (n / name :op1 \"Zachary\"))\n    :ARG2 (c2 / clean-01\n              :ARG0 p)\n    :time (n2 / now))", "(c / cause-01\n   :ARG0 (b2 / busy-01\n             :ARG1 (p / person :name (n / name :op1 \"Zachary\"))\n             :ARG2 (c2 / clean-01\n                       :ARG0 p)\n             :time (n2 / now)))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Zachary\"))\n   :ARG1 (b / bring-01\n            :ARG0 (s / she)\n            :ARG1 (p2 / piece\n                      :part (ii / it))\n            :ARG2 p))"], "smus": ["Erin baked.", "Something delicious has been baked from what Zachary finds.", "Bring a piece of it to Zachary.", "Zachary is busy cleaning now.", "Because Zachary is busy cleaning now.", "Zachary wants to bring her piece of it to him."]}, {"instance_id": "samsum-298", "summary": "Josh wants to buy a tablet and doesn't know which brand he should choose. According to Brian, other brands are better than Apple and he can get a Samsung tablet cheaper. Josh will call Brian after work to talk about it.", "summary_trees": ["# ::snt Josh wants to buy a tablet and doesn't know which brand he should choose.\n(a / and\n      :op1 (w / want-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Josh\"))\n            :ARG1 (b / buy-01\n                  :ARG0 p\n                  :ARG1 (t / tablet)))\n      :op2 (k / know-01\n            :polarity -\n            :ARG0 p\n            :ARG1 (b2 / brand\n                  :ARG1-of (c / choose-01\n                        :ARG0 p\n                        :ARG1-of (r / recommend-01)))))", "# ::snt According to Brian, other brands are better than Apple and he can get a Samsung tablet cheaper.\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Brian\"))\n      :ARG1 (a / and\n            :op1 (b / brand\n                  :mod (o / other)\n                  :ARG1-of (h / have-degree-91\n                        :ARG2 (g / good-02\n                              :ARG1 b)\n                        :ARG3 (m / more)\n                        :ARG4 (c / company\n                              :name (n2 / name\n                                    :op1 \"Apple\"))))\n            :op2 (p2 / possible-01\n                  :ARG1 (g2 / get-01\n                        :ARG0 p\n                        :ARG1 (t / tablet\n                              :mod (c2 / company\n                                    :name (n3 / name\n                                          :op1 \"Samsung\"))\n                              :ARG1-of (h2 / have-degree-91\n                                    :ARG2 (c3 / cheap-02\n                                          :ARG1 t)\n                                    :ARG3 (m2 / more)))))))", "# ::snt Josh will call Brian after work to talk about it.\n(c / call-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Josh\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Brian\"))\n      :time (a / after\n            :op1 (w / work-01\n                  :ARG0 p))\n      :purpose (t / talk-01\n            :ARG0 p\n            :ARG1 (ii / it)))"], "tree": ["(k / know-01\n   :polarity -\n   :ARG0 (p / person :name (n / name :op1 \"Josh\"))\n   :ARG1 (b2 / brand))", "(k / know-01\n   :polarity -\n   :ARG0 (p / person :name (n / name :op1 \"Josh\"))\n   :ARG1 (b2 / brand))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Josh\"))\n   :ARG1 (b / buy-01\n            :ARG0 p\n            :ARG1 (t / tablet)))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Josh\"))\n   :ARG1 (b / buy-01\n            :ARG0 p\n            :ARG1 (t / tablet)))", "(h2 / have-degree-91\n    :ARG2 (c3 / cheap-02\n              :ARG1 (t / tablet))\n    :ARG3 (m2 / more))", "(h / have-degree-91\n   :ARG2 (g / good-02\n            :ARG1 (b / brand))\n   :ARG3 (m / more)\n   :ARG4 (c / company\n            :name (n2 / name\n                      :op1 \"Apple\")))", "(p2 / possible-01\n    :ARG1 (g2 / get-01\n              :ARG0 (p / person :name (n / name :op1 \"Brian\"))\n              :ARG1 (t / tablet\n                       :mod (c2 / company\n                                :name (n3 / name\n                                          :op1 \"Samsung\"))\n                       :ARG1 (h2 / have-degree-91\n                                 :ARG2 (c3 / cheap-02\n                                           :ARG1 t)\n                                 :ARG3 (m2 / more)))))", "(p2 / possible-01\n    :ARG1 (g2 / get-01\n              :ARG0 (p / person :name (n / name :op1 \"Brian\"))\n              :ARG1 (t / tablet\n                       :mod (c2 / company\n                                :name (n3 / name\n                                          :op1 \"Samsung\"))\n                       :ARG1 (h2 / have-degree-91\n                                 :ARG2 (c3 / cheap-02\n                                           :ARG1 t)\n                                 :ARG3 (m2 / more)))))", "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Brian\"))\n   :ARG1 (b / brand\n            :mod (o / other)\n            :ARG1 (h / have-degree-91\n                     :ARG2 (g / good-02\n                              :ARG1 b)\n                     :ARG3 (m / more)\n                     :ARG4 (c / company\n                              :name (n2 / name\n                                        :op1 \"Apple\")))))", "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Brian\"))\n   :ARG1 (b / brand\n            :mod (o / other)\n            :ARG1 (h / have-degree-91\n                     :ARG2 (g / good-02\n                              :ARG1 b)\n                     :ARG3 (m / more)\n                     :ARG4 (c / company\n                              :name (n2 / name\n                                        :op1 \"Apple\")))))", "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Brian\"))\n   :ARG1 (p2 / possible-01\n             :ARG1 (g2 / get-01\n                       :ARG0 p\n                       :ARG1 (t / tablet\n                                :mod (c2 / company\n                                         :name (n3 / name\n                                                   :op1 \"Samsung\"))\n                                :ARG1 (h2 / have-degree-91\n                                          :ARG2 (c3 / cheap-02\n                                                    :ARG1 t)\n                                          :ARG3 (m2 / more))))))", "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Brian\"))\n   :ARG1 (p2 / possible-01\n             :ARG1 (g2 / get-01\n                       :ARG0 p\n                       :ARG1 (t / tablet\n                                :mod (c2 / company\n                                         :name (n3 / name\n                                                   :op1 \"Samsung\"))\n                                :ARG1 (h2 / have-degree-91\n                                          :ARG2 (c3 / cheap-02\n                                                    :ARG1 t)\n                                          :ARG3 (m2 / more))))))", "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Brian\"))\n   :ARG1 (a / and\n            :op1 (b / brand\n                    :mod (o / other)\n                    :ARG1 (h / have-degree-91\n                             :ARG2 (g / good-02\n                                      :ARG1 b)\n                             :ARG3 (m / more)\n                             :ARG4 (c / company\n                                      :name (n2 / name\n                                                :op1 \"Apple\"))))\n            :op2 (p2 / possible-01\n                     :ARG1 (g2 / get-01\n                               :ARG0 p\n                               :ARG1 (t / tablet\n                                        :mod (c2 / company\n                                                 :name (n3 / name\n                                                           :op1 \"Samsung\"))\n                                        :ARG1 (h2 / have-degree-91\n                                                  :ARG2 (c3 / cheap-02\n                                                            :ARG1 t)\n                                                  :ARG3 (m2 / more)))))))", "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Brian\"))\n   :ARG1 (a / and\n            :op1 (b / brand\n                    :mod (o / other)\n                    :ARG1 (h / have-degree-91\n                             :ARG2 (g / good-02\n                                      :ARG1 b)\n                             :ARG3 (m / more)\n                             :ARG4 (c / company\n                                      :name (n2 / name\n                                                :op1 \"Apple\"))))\n            :op2 (p2 / possible-01\n                     :ARG1 (g2 / get-01\n                               :ARG0 p\n                               :ARG1 (t / tablet\n                                        :mod (c2 / company\n                                                 :name (n3 / name\n                                                           :op1 \"Samsung\"))\n                                        :ARG1 (h2 / have-degree-91\n                                                  :ARG2 (c3 / cheap-02\n                                                            :ARG1 t)\n                                                  :ARG3 (m2 / more)))))))", "(t / talk-01\n   :ARG0 (p / person :name (n / name :op1 \"Josh\"))\n   :ARG1 (ii / it))", "(t / talk-01\n   :ARG0 (p / person :name (n / name :op1 \"Josh\"))\n   :ARG1 (ii / it))", "(c / call-02\n   :time (a / after\n            :op1 (w / work-01)))", "(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Josh\")))", "(c / call-02\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Brian\")))", "(c / call-02\n   :time (a / after\n            :op1 (w / work-01))\n   :purpose (t / talk-01))", "(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Josh\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Brian\")))", "(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Josh\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Brian\"))\n   :time (a / after\n            :op1 (w / work-01\n                    :ARG0 p)))", "(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Josh\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Brian\"))\n   :purpose (t / talk-01\n               :ARG0 p\n               :ARG1 (ii / it)))", "(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Josh\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Brian\"))\n   :time (a / after\n            :op1 (w / work-01\n                    :ARG0 p))\n   :purpose (t / talk-01\n               :ARG0 p\n               :ARG1 (ii / it)))"], "smus": ["Josh doesn't know the brand.", "Josh doesn't know the brand.", "Josh wants to buy a tablet.", "Josh wants to buy a tablet.", "The tablet is cheaper.", "Better brands than Apple.", "Brian can get a Samsung tablet for less.", "Brian can get a Samsung tablet for less.", "Brian: Other brands are better than Apple.", "Brian: Other brands are better than Apple.", "Brian: I can get a Samsung tablet cheaper.", "Brian: I can get a Samsung tablet cheaper.", "Brian: Other brands are better than apple and I can get a Samsung tablet cheaper.", "Brian: Other brands are better than apple and I can get a Samsung tablet cheaper.", "Josh will talk about it.", "Josh will talk about it.", "Call after work.", "Josh, call.", "Call Brian.", "Call after work to talk.", "Josh will call Brian.", "After work, Josh would call Brian.", "Josh will call Brian to talk about it.", "After work, Josh will call Brian to talk about it."]}, {"instance_id": "samsum-299", "summary": "Josh should check the email from Ron. ", "summary_trees": ["# ::snt Josh should check the email from Ron.\n(r / recommend-01\n      :ARG1 (c / check-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Josh\"))\n            :ARG1 (e / email-01\n                  :ARG0 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Ron\"))\n                  :ARG2 p)))"], "tree": ["(e / email-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Ron\"))\n   :ARG2 (p / person :name (n / name :op1 \"Josh\")))", "(c / check-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Josh\"))\n   :ARG1 (e / email-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Ron\"))\n            :ARG2 p))", "(r / recommend-01\n   :ARG1 (c / check-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Josh\"))\n            :ARG1 (e / email-01\n                     :ARG0 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Ron\"))\n                     :ARG2 p)))"], "smus": ["Ron sent Josh an email.", "Josh, check Ron's email.", "Josh should check Ron's email."]}, {"instance_id": "samsum-300", "summary": "Holly is not feeling very well, so she's not coming to Jake's tonight. ", "summary_trees": ["# ::snt Holly is not feeling very well, so she's not coming to Jake's tonight.\n(c / cause-01\n      :ARG0 (f / feel-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Holly\"))\n            :ARG1 (w / well-09\n                  :polarity -\n                  :degree (v / very)))\n      :ARG1 (c2 / come-01\n            :polarity -\n            :ARG1 p\n            :ARG4 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Jake\"))\n            :time (d / date-entity\n                  :dayperiod (n3 / night)\n                  :mod (t / today))))"], "tree": ["(w / well-09\n   :polarity -\n   :degree (v / very))", "(w / well-09\n   :polarity -\n   :degree (v / very))", "(c2 / come-01\n    :polarity -\n    :time (d / date-entity\n             :dayperiod (n3 / night)\n             :mod (t / today)))", "(f / feel-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Holly\"))\n   :ARG1 (w / well-09\n            :polarity -\n            :degree (v / very)))", "(f / feel-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Holly\"))\n   :ARG1 (w / well-09\n            :polarity -\n            :degree (v / very)))", "(c2 / come-01\n    :polarity -\n    :ARG1 (p / person :name (n / name :op1 \"Holly\"))\n    :ARG4 (p2 / person\n              :name (n2 / name\n                        :op1 \"Jake\"))\n    :time (d / date-entity\n             :dayperiod (n3 / night)\n             :mod (t / today)))", "(c / cause-01\n   :ARG0 (f / feel-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Holly\"))\n            :ARG1 (w / well-09\n                     :polarity -\n                     :degree (v / very)))\n   :ARG1 (c2 / come-01\n             :polarity -\n             :ARG1 p\n             :ARG4 (p2 / person\n                       :name (n2 / name\n                                 :op1 \"Jake\"))\n             :time (d / date-entity\n                      :dayperiod (n3 / night)\n                      :mod (t / today))))"], "smus": ["Not very well.", "Not very well.", "It's not coming tonight.", "Holly is feeling not very well.", "Holly is feeling not very well.", "Holly will not come to Jake tonight.", "Holly is feeling not very well, so she will not come to Jake tonight."]}, {"instance_id": "samsum-301", "summary": "Harry goes to Ikea. He will buy some furniture, frozen cake and a bag of meatballs for Sarah. Harry will use Sarah\u2019s Ikea Family card.", "summary_trees": ["# ::snt Harry goes to Ikea.\n(g / go-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Harry\"))\n      :ARG4 (c / company\n            :name (n2 / name\n                  :op1 \"Ikea\")))", "# ::snt He will buy some furniture, frozen cake and a bag of meatballs for Sarah.\n(b / buy-01\n      :ARG0 (h / he)\n      :ARG1 (a / and\n            :op1 (f / furniture\n                  :quant (s / some))\n            :op2 (c / cake\n                  :ARG1-of (f2 / freeze-01))\n            :op3 (b2 / bag\n                  :ARG0-of (c2 / contain-01\n                        :ARG1 (m / meatball))))\n      :ARG4 (p / person\n            :name (n / name\n                  :op1 \"Sarah\")))", "# ::snt Harry will use Sarah\u2019s Ikea Family card.\n(u / use-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Harry\"))\n      :ARG1 (c / card\n            :mod (f / family)\n            :poss (p2 / person\n                  :name (n2 / name\n                        :op1 \"Sarah\"))\n            :mod (c2 / company\n                  :name (n3 / name\n                        :op1 \"Ikea\"))))"], "tree": ["(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Harry\")))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Harry\"))\n   :ARG4 (c / company\n            :name (n2 / name\n                      :op1 \"Ikea\")))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Harry\"))\n   :ARG4 (c / company\n            :name (n2 / name\n                      :op1 \"Ikea\")))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Harry\")))", "(b / buy-01\n   :ARG1 (f / furniture\n            :quant (s / some)))", "(b / buy-01\n   :ARG1 (c / cake\n            :ARG1 (f2 / freeze-01)))", "(b / buy-01\n   :ARG0 (h / he)\n   :ARG1 (c / cake\n            :ARG1 (f2 / freeze-01)))", "(b / buy-01\n   :ARG1 (b2 / bag\n             :ARG0 (c2 / contain-01\n                       :ARG1 (m / meatball))))", "(b / buy-01\n   :ARG0 (h / he)\n   :ARG1 (b2 / bag\n             :ARG0 (c2 / contain-01\n                       :ARG1 (m / meatball))))", "(b / buy-01\n   :ARG0 (h / he)\n   :ARG1 (b2 / bag\n             :ARG0 (c2 / contain-01\n                       :ARG1 (m / meatball)))\n   :ARG4 (p / person\n            :name (n / name\n                     :op1 \"Sarah\"))\n   :ARG4 p)", "(b / buy-01\n   :ARG1 (a / and\n            :op1 (f / furniture\n                    :quant (s / some))\n            :op2 (c / cake\n                    :ARG1 (f2 / freeze-01))\n            :op3 (b2 / bag\n                     :ARG0 (c2 / contain-01\n                               :ARG1 (m / meatball)))))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Harry\")))", "(u / use-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Harry\")))", "(u / use-01\n   :ARG1 (c / card\n            :mod (f / family)\n            :poss (p2 / person\n                      :name (n2 / name\n                                :op1 \"Sarah\"))\n            :mod (c2 / company\n                     :name (n3 / name\n                               :op1 \"Ikea\"))))", "(u / use-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Harry\"))\n   :ARG1 (c / card\n            :mod (f / family)\n            :poss (p2 / person\n                      :name (n2 / name\n                                :op1 \"Sarah\"))\n            :mod (c2 / company\n                     :name (n3 / name\n                               :op1 \"Ikea\"))))", "(u / use-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Harry\"))\n   :ARG1 (c / card\n            :mod (f / family)\n            :poss (p2 / person\n                      :name (n2 / name\n                                :op1 \"Sarah\"))\n            :mod (c2 / company\n                     :name (n3 / name\n                               :op1 \"Ikea\"))))"], "smus": ["Harry goes.", "Harry goes to Ikea.", "Harry goes to Ikea.", "Harry goes.", "buy some furniture.", "Buy a frozen cake.", "He did buy a frozen cake.", "Buy a bag of meatballs.", "He did buy a bag of meatballs.", "He did buy Sarah a bag of meatballs.", "Buy some furniture, freeze-dried cake and a bag of meatballs.", "Harry goes.", "Harry would use.", "Sarah's Ikea Family Card is to use.", "Harry used Sarah's Ikea Family Card.", "Harry used Sarah's Ikea Family Card."]}, {"instance_id": "samsum-302", "summary": "Kaylee is blocking Gavin and Gavin doesn't care as he finds Kaylee too much irritating.", "summary_trees": ["# ::snt Kaylee is blocking Gavin and Gavin doesn't care as he finds Kaylee too much irritating.\n(a / and\n      :op1 (b / block-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Kaylee\"))\n            :ARG1 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Gavin\")))\n      :op2 (c / care-01\n            :polarity -\n            :ARG0 p2\n            :ARG1-of (c2 / cause-01\n                  :ARG0 (f / find-02\n                        :ARG0 p2\n                        :ARG1 (ii / irritate-01\n                              :ARG0 p\n                              :ARG1-of (h / have-quant-91\n                                    :ARG2 (m / much)\n                                    :ARG3 (t / too)))))))"], "tree": ["(h / have-quant-91\n   :ARG2 (m / much)\n   :ARG3 (t / too))", "(ii / irritate-01\n    :ARG0 (p / person :name (n / name :op1 \"Kaylee\"))\n    :ARG1 (h / have-quant-91\n             :ARG2 (m / much)\n             :ARG3 (t / too)))", "(f / find-02\n   :ARG0 (p2 / person :name (n2 / name :op1 \"Gavin\"))\n   :ARG1 (ii / irritate-01\n             :ARG0 (p / person :name (n / name :op1 \"Kaylee\"))\n             :ARG1 (h / have-quant-91\n                      :ARG2 (m / much)\n                      :ARG3 (t / too))))", "(b / block-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kaylee\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Gavin\")))", "(c2 / cause-01\n    :ARG0 (f / find-02\n             :ARG0 (p2 / person :name (n2 / name :op1 \"Gavin\"))\n             :ARG1 (ii / irritate-01\n                       :ARG0 (p / person :name (n / name :op1 \"Kaylee\"))\n                       :ARG1 (h / have-quant-91\n                                :ARG2 (m / much)\n                                :ARG3 (t / too)))))", "(c / care-01\n   :polarity -\n   :ARG0 (p2 / person :name (n2 / name :op1 \"Gavin\"))\n   :ARG1 (c2 / cause-01\n             :ARG0 (f / find-02\n                      :ARG0 p2\n                      :ARG1 (ii / irritate-01\n                                :ARG0 (p / person :name (n / name :op1 \"Kaylee\"))\n                                :ARG1 (h / have-quant-91\n                                         :ARG2 (m / much)\n                                         :ARG3 (t / too))))))"], "smus": ["Too much.", "Kaylee was irritating too much.", "Gavin finds Kaylee irritating too much.", "Kaylee is blocking Gavin.", "Because Gavin finds Kaylee irritating too much.", "Gavin doesn't care because he finds Kaylee irritating too much."]}, {"instance_id": "samsum-303", "summary": "Emily and Julie wish Merry Christmas to each other.", "summary_trees": ["# ::snt Emily and Julie wish Merry Christmas to each other.\n(w / wish-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Emily\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Julie\")))\n      :ARG1 (f / festival\n            :name (n3 / name\n                  :op1 \"Christmas\")\n            :mod (m / merry))\n      :ARG2 (o / other\n            :mod (e / each)))"], "tree": ["(w / wish-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Emily\"))\n   :ARG1 (f / festival\n            :name (n3 / name\n                      :op1 \"Christmas\")\n            :mod (m / merry)))", "(w / wish-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Julie\"))\n   :ARG1 (f / festival\n            :name (n3 / name\n                      :op1 \"Christmas\")\n            :mod (m / merry))\n   :ARG1 f)", "(w / wish-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Emily\"))\n   :ARG1 (f / festival\n            :name (n3 / name\n                      :op1 \"Christmas\")\n            :mod (m / merry))\n   :ARG2 (o / other\n            :mod (e / each)))", "(w / wish-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Emily\"))\n   :ARG1 (f / festival\n            :name (n3 / name\n                      :op1 \"Christmas\")\n            :mod (m / merry))\n   :ARG2 (o / other\n            :mod (e / each)))", "(w / wish-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Julie\"))\n   :ARG1 (f / festival\n            :name (n3 / name\n                      :op1 \"Christmas\")\n            :mod (m / merry))\n   :ARG1 f\n   :ARG2 (o / other\n            :mod (e / each)))", "(w / wish-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Julie\"))\n   :ARG1 (f / festival\n            :name (n3 / name\n                      :op1 \"Christmas\")\n            :mod (m / merry))\n   :ARG1 f\n   :ARG2 (o / other\n            :mod (e / each)))", "(w / wish-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Emily\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Julie\")))\n   :ARG1 (f / festival\n            :name (n3 / name\n                      :op1 \"Christmas\")\n            :mod (m / merry)))", "(w / wish-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Emily\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Julie\")))\n   :ARG1 (f / festival\n            :name (n3 / name\n                      :op1 \"Christmas\")\n            :mod (m / merry))\n   :ARG2 (o / other\n            :mod (e / each)))", "(w / wish-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Emily\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Julie\")))\n   :ARG1 (f / festival\n            :name (n3 / name\n                      :op1 \"Christmas\")\n            :mod (m / merry))\n   :ARG2 (o / other\n            :mod (e / each)))"], "smus": ["Emily wish you a Merry Christmas.", "Julie wish you a Merry Christmas.", "Emily wishes each other a Merry Christmas.", "Emily wishes each other a Merry Christmas.", "Julie wish each other a Merry Christmas.", "Julie wish each other a Merry Christmas.", "Emily and Julia wish Merry Christmas.", "Emily and Julia wish each other a Merry Christmas.", "Emily and Julia wish each other a Merry Christmas."]}, {"instance_id": "samsum-304", "summary": "William is coming back in 5 minutes as he had to queue for 20 minutes.", "summary_trees": ["# ::snt William is coming back in 5 minutes as he had to queue for 20 minutes.\n(c / come-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"William\"))\n      :direction (b / back)\n      :time (a / after\n            :op1 (n2 / now)\n            :quant (t / temporal-quantity\n                  :quant 5\n                  :unit (m / minute)))\n      :ARG1-of (c2 / cause-01\n            :ARG0 (o / obligate-01\n                  :ARG1 p\n                  :ARG2 (q / queue-01\n                        :ARG1 p\n                        :duration (t2 / temporal-quantity\n                              :quant 20\n                              :unit (m2 / minute))))))"], "tree": ["(q / queue-01\n   :duration (t2 / temporal-quantity\n                 :quant 20\n                 :unit (m2 / minute)))", "(q / queue-01\n   :ARG1 (p / person :name (n / name :op1 \"William\"))\n   :duration (t2 / temporal-quantity\n                 :quant 20\n                 :unit (m2 / minute)))", "(o / obligate-01\n   :ARG1 (p / person :name (n / name :op1 \"William\"))\n   :ARG2 (q / queue-01\n            :ARG1 p\n            :duration (t2 / temporal-quantity\n                          :quant 20\n                          :unit (m2 / minute))))", "(c2 / cause-01\n    :ARG0 (o / obligate-01\n             :ARG1 (p / person :name (n / name :op1 \"William\"))\n             :ARG2 (q / queue-01\n                      :ARG1 p\n                      :duration (t2 / temporal-quantity\n                                    :quant 20\n                                    :unit (m2 / minute)))))", "(c / come-01\n   :direction (b / back)\n   :time (a / after\n            :op1 (n2 / now)\n            :quant (t / temporal-quantity\n                      :quant 5\n                      :unit (m / minute))))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"William\"))\n   :direction (b / back)\n   :time (a / after\n            :op1 (n2 / now)\n            :quant (t / temporal-quantity\n                      :quant 5\n                      :unit (m / minute)))\n   :ARG1 (c2 / cause-01\n             :ARG0 (o / obligate-01\n                      :ARG1 p\n                      :ARG2 (q / queue-01\n                               :ARG1 p\n                               :duration (t2 / temporal-quantity\n                                             :quant 20\n                                             :unit (m2 / minute))))))"], "smus": ["Queue for 20 minutes.", "William will queue for 20 minutes.", "William had to queue for 20 minutes.", "Because William had to queue for 20 minutes.", "Coming back in 5 minutes.", "William will be coming back in 5 minutes as he will have to queue for 20 minutes."]}, {"instance_id": "samsum-305", "summary": "Pat will arrive at around 9 pm. Bart will open the door and work in the morning from home. ", "summary_trees": ["# ::snt Pat will arrive at around 9 pm.\n(a / arrive-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Pat\"))\n      :time (a2 / around\n            :op1 (d / date-entity\n                  :time \"19:00\")))", "# ::snt Bart will open the door and work in the morning from home.\n(a / and\n      :op1 (o / open-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Bart\"))\n            :ARG1 (d / door))\n      :op2 (w / work-01\n            :ARG0 p\n            :time (d2 / date-entity\n                  :dayperiod (m / morning))\n            :source (h / home)))"], "tree": ["(a / arrive-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Pat\")))", "(o / open-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Bart\")))", "(w / work-01\n   :time (d2 / date-entity\n             :dayperiod (m / morning))\n   :source (h / home))", "(w / work-01\n   :ARG0 (p / person :name (n / name :op1 \"Bart\"))\n   :time (d2 / date-entity\n             :dayperiod (m / morning))\n   :source (h / home))", "(o / open-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Bart\"))\n   :ARG1 (d / door))", "(o / open-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Bart\"))\n   :ARG1 (d / door))"], "smus": ["Pat will arrive.", "Bart will open.", "Work from home in the morning.", "Bart will work from home in the morning.", "Bart did open the door.", "Bart did open the door."]}, {"instance_id": "samsum-306", "summary": "Pegah is in class till 15:00. She will work from 17:00 till around 21:30. She will be back at 22:00. Miriam invited people over and wants Pegah to come. Pegah will have a cup of tea with her when she gets back. Miriam will save Pegah some wine.", "summary_trees": ["# ::snt Pegah is in class till 15:00.\n(b / be-located-at-91\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Pegah\"))\n      :ARG2 (c / class)\n      :time (t / till\n            :op1 (d / date-entity\n                  :time \"15:00\")))", "# ::snt She will work from 17:00 till around 21:30.\n(w / work-01\n      :ARG0 (s / she)\n      :time (d / date-interval\n            :op1 (d2 / date-entity\n                  :time \"17:00\")\n            :op2 (a / around\n                  :op1 (d3 / date-entity\n                        :time \"21:30\"))))", "# ::snt She will be back at 22:00.\n(r / return-01\n      :ARG1 (s / she)\n      :time (d / date-entity\n            :time \"22:00\"))", "# ::snt Miriam invited people over and wants Pegah to come.\n(a / and\n      :op1 (ii / invite-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Miriam\"))\n            :ARG1 (p2 / person)\n            :ARG2 (o / over))\n      :op2 (w / want-01\n            :ARG0 p\n            :ARG1 (c / come-01\n                  :ARG1 (p3 / person\n                        :name (n2 / name\n                              :op1 \"Pegah\")))))", "# ::snt Pegah will have a cup of tea with her when she gets back.\n(h / have-06\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Pegah\"))\n      :ARG1 (t / tea\n            :quant (v / volume-quantity\n                  :quant 1\n                  :unit (c / cup)))\n      :accompanier (s / she)\n      :time (g / get-back-10\n            :ARG1 s))", "# ::snt Miriam will save Pegah some wine.\n(s / save-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Miriam\"))\n      :ARG1 (w / wine\n            :quant (s2 / some))\n      :ARG2 (p2 / person\n            :name (n2 / name\n                  :op1 \"Pegah\")))"], "tree": ["(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Pegah\"))\n   :ARG2 (c / class))", "(ii / invite-01\n    :ARG1 (p2 / person)\n    :ARG2 (o / over))", "(c / come-01\n   :ARG1 (p3 / person\n             :name (n2 / name\n                       :op1 \"Pegah\")))", "(c / come-01\n   :ARG1 (p3 / person\n             :name (n2 / name\n                       :op1 \"Pegah\")))", "(ii / invite-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Miriam\"))\n    :ARG1 (p2 / person))", "(w / want-01\n   :ARG0 (p / person :name (n / name :op1 \"Miriam\"))\n   :ARG1 (c / come-01\n            :ARG1 (p3 / person\n                      :name (n2 / name\n                                :op1 \"Pegah\"))))", "(w / want-01\n   :ARG0 (p / person :name (n / name :op1 \"Miriam\"))\n   :ARG1 (c / come-01\n            :ARG1 (p3 / person\n                      :name (n2 / name\n                                :op1 \"Pegah\"))))", "(ii / invite-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Miriam\"))\n    :ARG1 (p2 / person)\n    :ARG2 (o / over))", "(ii / invite-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Miriam\"))\n    :ARG1 (p2 / person)\n    :ARG2 (o / over))", "(h / have-06\n   :accompanier (s / she)\n   :time (g / get-back-10))", "(h / have-06\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Pegah\"))\n   :ARG1 (t / tea\n            :quant (v / volume-quantity\n                      :quant 1\n                      :unit (c / cup)))\n   :accompanier (s / she)\n   :time (g / get-back-10\n            :ARG1 s))", "(s / save-01\n   :ARG1 (w / wine\n            :quant (s2 / some)))", "(s / save-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Miriam\"))\n   :ARG1 (w / wine\n            :quant (s2 / some)))", "(s / save-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Miriam\"))\n   :ARG1 (w / wine\n            :quant (s2 / some))\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Pegah\")))"], "smus": ["Pegash is in the class.", "invited people over.", "Come Pegash.", "Come Pegash.", "Miriam invited people.", "Miriam wants Pegash to come.", "Miriam wants Pegash to come.", "Miriam invited people over.", "Miriam invited people over.", "She'll have her when she gets back.", "When she got back, Pegash would have a cup of tea with her.", "Save some wine.", "Siriam, save some wine.", "Miriam would save some wine for Pegah."]}, {"instance_id": "samsum-307", "summary": "Mike's had an accident on his motorcycle and he's broken his leg.", "summary_trees": ["# ::snt Mike's had an accident on his motorcycle and he's broken his leg.\n(a / and\n      :op1 (h / have-06\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Mike\")\n                  :part (l / leg))\n            :ARG1 (a2 / accident\n                  :mod (m / motorcycle\n                        :poss p)))\n      :op2 (b / break-01\n            :ARG0 p\n            :ARG1 l))"], "tree": ["(h / have-06\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mike\")\n            :part (l / leg))\n   :ARG1 (a2 / accident\n             :mod (m / motorcycle\n                     :poss p)))"], "smus": ["Mike had a leg in his motorcycle accident."]}, {"instance_id": "samsum-308", "summary": "People are photoshopping Timoth\u00e9e Chalamet into artworks. Dominic and Nova agree that he looks like a 19th century man.", "summary_trees": ["# ::snt People are photoshopping Timoth\u00e9e Chalamet into artworks.\n(p / photoshoshop-00\n      :ARG0 (p2 / person)\n      :ARG1 (p3 / person\n            :name (n / name\n                  :op1 \"Timoth\u00e9e\"\n                  :op2 \"Chalamet\"))\n      :ARG2 (t / thing\n            :ARG1-of (w / work-of-art)))", "# ::snt Dominic and Nova agree that he looks like a 19th century man.\n(a / agree-01\n      :ARG0 (a2 / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Dominic\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Nova\")))\n      :ARG1 (l / look-02\n            :ARG0 (h / he)\n            :ARG1 (m / man\n                  :mod (d / date-entity\n                        :century 19))))"], "tree": ["(p / photoshoshop-00\n   :ARG0 (p2 / person)\n   :ARG1 (p3 / person\n             :name (n / name\n                      :op1 \"Timoth\u00e9e\"\n                      :op2 \"Chalamet\"))\n   :ARG2 (t / thing\n            :ARG1 (w / work-of-art)))", "(a / agree-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Nova\")))", "(l / look-02\n   :ARG0 (h / he)\n   :ARG1 (m / man\n            :mod (d / date-entity\n                    :century 19)))", "(l / look-02\n   :ARG0 (h / he)\n   :ARG1 (m / man\n            :mod (d / date-entity\n                    :century 19)))", "(a / agree-01\n   :ARG1 (l / look-02\n            :ARG0 (h / he)\n            :ARG1 (m / man\n                     :mod (d / date-entity\n                             :century 19))))", "(a / agree-01\n   :ARG0 (a2 / and\n             :op1 (p / person\n                     :name (n / name\n                              :op1 \"Dominic\"))\n             :op2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Nova\"))))", "(a / agree-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dominic\"))\n   :ARG1 (l / look-02\n            :ARG0 (h / he)\n            :ARG1 (m / man\n                     :mod (d / date-entity\n                             :century 19))))", "(a / agree-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dominic\"))\n   :ARG1 (l / look-02\n            :ARG0 (h / he)\n            :ARG1 (m / man\n                     :mod (d / date-entity\n                             :century 19))))", "(a / agree-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Nova\"))\n   :ARG1 (l / look-02\n            :ARG0 (h / he)\n            :ARG1 (m / man\n                     :mod (d / date-entity\n                             :century 19)))\n   :ARG1 l)", "(a / agree-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Nova\"))\n   :ARG1 (l / look-02\n            :ARG0 (h / he)\n            :ARG1 (m / man\n                     :mod (d / date-entity\n                             :century 19)))\n   :ARG1 l)", "(a / agree-01\n   :ARG0 (a2 / and\n             :op1 (p / person\n                     :name (n / name\n                              :op1 \"Dominic\"))\n             :op2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Nova\")))\n   :ARG1 (l / look-02\n            :ARG0 (h / he)\n            :ARG1 (m / man\n                     :mod (d / date-entity\n                             :century 19))))", "(a / agree-01\n   :ARG0 (a2 / and\n             :op1 (p / person\n                     :name (n / name\n                              :op1 \"Dominic\"))\n             :op2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Nova\")))\n   :ARG1 (l / look-02\n            :ARG0 (h / he)\n            :ARG1 (m / man\n                     :mod (d / date-entity\n                             :century 19))))"], "smus": ["People are photoshooting Timothy Chalamet for a work of art.", "Nova agrees.", "He looks like a 19th century man.", "He looks like a 19th century man.", "Agree, he looks like a 19th century man.", "The dominics and Nova agree.", "The dominics agree that he looks like a 19th century man.", "The dominics agree that he looks like a 19th century man.", "Nova and he agree he looks like a 19th century man.", "Nova and he agree he looks like a 19th century man.", "The dominics and Nova agree he looks like a 19th century man.", "The dominics and Nova agree he looks like a 19th century man."]}, {"instance_id": "samsum-309", "summary": "Peyton is expecting Cameron to bring the video game. Cameron will probably be out for another week.", "summary_trees": ["# ::snt Peyton is expecting Cameron to bring the video game.\n(e / expect-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Peyton\"))\n      :ARG1 (b / bring-01\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Cameron\"))\n            :ARG1 (g / game\n                  :mod (v / video))))", "# ::snt Cameron will probably be out for another week.\n(p / probable\n      :domain (o / out-05\n            :ARG1 (p2 / person\n                  :name (n / name\n                        :op1 \"Cameron\"))\n            :duration (t / temporal-quantity\n                  :quant 1\n                  :unit (w / week)\n                  :mod (a / another))))"], "tree": ["(e / expect-01\n   :ARG1 (b / bring-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Cameron\"))\n            :ARG1 (g / game\n                     :mod (v / video))))", "(e / expect-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Peyton\"))\n   :ARG1 (b / bring-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Cameron\"))\n            :ARG1 (g / game\n                     :mod (v / video))))", "(e / expect-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Peyton\"))\n   :ARG1 (b / bring-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Cameron\"))\n            :ARG1 (g / game\n                     :mod (v / video))))", "(o / out-05\n   :duration (t / temporal-quantity\n                :quant 1\n                :unit (w / week)\n                :mod (a / another)))", "(o / out-05\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Cameron\"))\n   :duration (t / temporal-quantity\n                :quant 1\n                :unit (w / week)\n                :mod (a / another)))"], "smus": ["Cameron is expected to bring a video game.", "Peyton is expecting Cameron to bring a video game.", "Peyton is expecting Cameron to bring a video game.", "Out another week.", "Cameron will be out for another week."]}, {"instance_id": "samsum-310", "summary": "Fiona wants to prepare dinner for Chris. She is thinking of Tina's tart. She will help her make it.", "summary_trees": ["# ::snt Fiona wants to prepare dinner for Chris.\n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Fiona\"))\n      :ARG1 (p2 / prepare-01\n            :ARG0 p\n            :ARG1 (d / dinner)\n            :ARG3 (p3 / person\n                  :name (n2 / name\n                        :op1 \"Chris\"))))", "# ::snt She is thinking of Tina's tart.\n(t / think-01\n      :ARG0 (s / she)\n      :ARG1 (t2 / tart\n            :poss (p / person\n                  :name (n / name\n                        :op1 \"Tina\"))))", "# ::snt She will help her make it.\n(h / help-01\n      :ARG0 (s / she)\n      :ARG1 (m / make-01\n            :ARG0 (s2 / she)\n            :ARG1 (ii / it))\n      :ARG2 s2)"], "tree": ["(p2 / prepare-01\n    :ARG0 (p / person :name (n / name :op1 \"Fiona\"))\n    :ARG1 (d / dinner))", "(p2 / prepare-01\n    :ARG0 (p / person :name (n / name :op1 \"Fiona\"))\n    :ARG1 (d / dinner)\n    :ARG3 (p3 / person\n              :name (n2 / name\n                        :op1 \"Chris\")))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Fiona\"))\n   :ARG1 (p2 / prepare-01\n             :ARG0 p\n             :ARG1 (d / dinner)\n             :ARG3 (p3 / person\n                       :name (n2 / name\n                                 :op1 \"Chris\"))))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Fiona\"))\n   :ARG1 (p2 / prepare-01\n             :ARG0 p\n             :ARG1 (d / dinner)\n             :ARG3 (p3 / person\n                       :name (n2 / name\n                                 :op1 \"Chris\"))))", "(t / think-01\n   :ARG0 (s / she)\n   :ARG1 (t2 / tart\n             :poss (p / person\n                      :name (n / name\n                               :op1 \"Tina\"))))", "(t / think-01\n   :ARG0 (s / she)\n   :ARG1 (t2 / tart\n             :poss (p / person\n                      :name (n / name\n                               :op1 \"Tina\"))))", "(m / make-01\n   :ARG0 (s2 / she)\n   :ARG1 (ii / it))", "(m / make-01\n   :ARG0 (s2 / she)\n   :ARG1 (ii / it))", "(h / help-01\n   :ARG0 (s / she)\n   :ARG1 (m / make-01\n            :ARG0 (s2 / she)\n            :ARG1 (ii / it)))", "(h / help-01\n   :ARG0 (s / she)\n   :ARG1 (m / make-01\n            :ARG0 (s2 / she)\n            :ARG1 (ii / it))\n   :ARG2 s2)"], "smus": ["Fiona will prepare dinner.", "Fiona will prepare dinner for Chris.", "Fiona wants to prepare dinner for Chris.", "Fiona wants to prepare dinner for Chris.", "She was thinking of Tina's tart.", "She was thinking of Tina's tart.", "She'll make it happen.", "She'll make it happen.", "She'll help make it happen.", "She'll help her make it happen."]}, {"instance_id": "samsum-311", "summary": "Diana and Fran are going to a hip-hop workshop in a week.", "summary_trees": ["# ::snt Diana and Fran are going to a hip-hop workshop in a week.\n(g / go-02\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Diana\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Fran\")))\n      :ARG4 (w / workshop\n            :mod (h / hip-hop))\n      :time (a2 / after\n            :op1 (n3 / now)\n            :quant (t / temporal-quantity\n                  :quant 1\n                  :unit (w2 / week))))"], "tree": ["(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Diana\")))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Fran\")))", "(g / go-02\n   :time (a2 / after\n             :op1 (n3 / now)\n             :quant (t / temporal-quantity\n                       :quant 1\n                       :unit (w2 / week))))", "(g / go-02\n   :time (a2 / after\n             :op1 (n3 / now)\n             :quant (t / temporal-quantity\n                       :quant 1\n                       :unit (w2 / week))))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Diana\"))\n   :ARG4 (w / workshop\n            :mod (h / hip-hop)))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Fran\"))\n   :ARG4 (w / workshop\n            :mod (h / hip-hop))\n   :ARG4 w)", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Diana\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Fran\"))))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Diana\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Fran\")))\n   :ARG4 (w / workshop\n            :mod (h / hip-hop)))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Diana\"))\n   :ARG4 (w / workshop\n            :mod (h / hip-hop))\n   :time (a2 / after\n             :op1 (n3 / now)\n             :quant (t / temporal-quantity\n                       :quant 1\n                       :unit (w2 / week))))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Diana\"))\n   :ARG4 (w / workshop\n            :mod (h / hip-hop))\n   :time (a2 / after\n             :op1 (n3 / now)\n             :quant (t / temporal-quantity\n                       :quant 1\n                       :unit (w2 / week))))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Fran\"))\n   :ARG4 (w / workshop\n            :mod (h / hip-hop))\n   :ARG4 w\n   :time (a2 / after\n             :op1 (n3 / now)\n             :quant (t / temporal-quantity\n                       :quant 1\n                       :unit (w2 / week))))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Fran\"))\n   :ARG4 (w / workshop\n            :mod (h / hip-hop))\n   :ARG4 w\n   :time (a2 / after\n             :op1 (n3 / now)\n             :quant (t / temporal-quantity\n                       :quant 1\n                       :unit (w2 / week))))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Diana\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Fran\")))\n   :ARG4 (w / workshop\n            :mod (h / hip-hop))\n   :time (a2 / after\n             :op1 (n3 / now)\n             :quant (t / temporal-quantity\n                       :quant 1\n                       :unit (w2 / week))))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Diana\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Fran\")))\n   :ARG4 (w / workshop\n            :mod (h / hip-hop))\n   :time (a2 / after\n             :op1 (n3 / now)\n             :quant (t / temporal-quantity\n                       :quant 1\n                       :unit (w2 / week))))"], "smus": ["Diana is going.", "Fran is going.", "Going in a week.", "Going in a week.", "Diana is going to a hip hop workshop.", "Fran is going to a hip hop workshop there.", "Diana and Fran are going.", "Diana and Fran are going to a hip hop workshop.", "Diana will be going to a hip hop workshop in a week.", "Diana will be going to a hip hop workshop in a week.", "Fran will be going to a hip hop workshop in a week.", "Fran will be going to a hip hop workshop in a week.", "Diana and Fran will be going to a hip hop workshop in a week.", "Diana and Fran will be going to a hip hop workshop in a week."]}, {"instance_id": "samsum-312", "summary": "Hannah's New Year's resolutions are: work out, cook for herself, start dating. Brooklyn didn't make any. In the past she had, but she never fulfilled them. ", "summary_trees": ["# ::snt Hannah's New Year's resolutions are: work out, cook for herself, start dating.\n(r / recommend-01\n      :ARG1 (a / and\n            :op1 (w / work-out-02\n                  :ARG0 (p / person\n                        :name (n / name\n                              :op1 \"Hannah\")))\n            :op2 (c / cook-01\n                  :ARG0 p\n                  :beneficiary p)\n            :op3 (s / start-01\n                  :ARG0 p\n                  :ARG1 (d / date-02\n                        :ARG0 p)))\n      :ARG2 p\n      :time (f / festival\n            :name (n2 / name\n                  :op1 \"New\"\n                  :op2 \"Year\")))", "# ::snt Brooklyn didn't make any.\n(m / make-01\n      :polarity -\n      :ARG0 (c / city\n            :name (n / name\n                  :op1 \"Brooklyn\"))\n      :ARG1 (a / any))", "# ::snt In the past she had, but she never fulfilled them.\n(h / have-concession-91\n      :ARG1 (f / fulfill-01\n            :polarity -\n            :ARG0 (s / she)\n            :ARG1 (t / they)\n            :time (e / ever))\n      :ARG2 (e2 / event\n            :mod s\n            :time (p / past)))"], "tree": ["(s / start-01\n   :ARG0 (p / person :name (n / name :op1 \"Hannah\"))\n   :ARG1 (d / date-02\n            :ARG0 p))", "(s / start-01\n   :ARG0 (p / person :name (n / name :op1 \"Hannah\"))\n   :ARG1 (d / date-02\n            :ARG0 p))", "(r / recommend-01\n   :ARG1 (c / cook-01\n            :ARG0 (p / person :name (n / name :op1 \"Hannah\"))\n            :beneficiary p))", "(r / recommend-01\n   :ARG1 (w / work-out-02\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Hannah\"))))", "(r / recommend-01\n   :ARG1 (c / cook-01\n            :ARG0 (p / person :name (n / name :op1 \"Hannah\"))\n            :beneficiary p)\n   :ARG2 p\n   :time (f / festival\n            :name (n2 / name\n                      :op1 \"New\"\n                      :op2 \"Year\")))", "(r / recommend-01\n   :ARG1 (w / work-out-02\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Hannah\")))\n   :ARG2 p\n   :time (f / festival\n            :name (n2 / name\n                      :op1 \"New\"\n                      :op2 \"Year\")))", "(r / recommend-01\n   :ARG1 (s / start-01\n            :ARG0 (p / person :name (n / name :op1 \"Hannah\"))\n            :ARG1 (d / date-02\n                     :ARG0 p))\n   :ARG2 p\n   :ARG2 p\n   :time (f / festival\n            :name (n2 / name\n                      :op1 \"New\"\n                      :op2 \"Year\")))", "(r / recommend-01\n   :ARG1 (a / and\n            :op1 (w / work-out-02\n                    :ARG0 (p / person\n                             :name (n / name\n                                      :op1 \"Hannah\")))\n            :op2 (c / cook-01\n                    :ARG0 p\n                    :beneficiary p)\n            :op3 (s / start-01\n                    :ARG0 p\n                    :ARG1 (d / date-02\n                             :ARG0 p))))", "(r / recommend-01\n   :ARG1 (a / and\n            :op1 (w / work-out-02\n                    :ARG0 (p / person\n                             :name (n / name\n                                      :op1 \"Hannah\")))\n            :op2 (c / cook-01\n                    :ARG0 p\n                    :beneficiary p)\n            :op3 (s / start-01\n                    :ARG0 p\n                    :ARG1 (d / date-02\n                             :ARG0 p)))\n   :ARG2 p\n   :time (f / festival\n            :name (n2 / name\n                      :op1 \"New\"\n                      :op2 \"Year\")))", "(m / make-01\n   :polarity -\n   :ARG0 (c / city\n            :name (n / name\n                     :op1 \"Brooklyn\"))\n   :ARG1 (a / any))", "(f / fulfill-01\n   :polarity -\n   :time (e / ever))", "(f / fulfill-01\n   :polarity -\n   :ARG0 (s / she)\n   :ARG1 (t / they)\n   :time (e / ever))", "(h / have-concession-91\n   :ARG1 (f / fulfill-01\n            :polarity -\n            :ARG0 (s / she)\n            :ARG1 (t / they)\n            :time (e / ever)))"], "smus": ["Hannah start dating.", "Hannah start dating.", "Hannah should cook for herself.", "Hannah should work out.", "Hannah should cook for herself during the New Year.", "Hannah should work out for the New Year.", "Hannah should start dating in the New Year.", "Hannah should work out, cook for herself, and start dating.", "In the New Year, Hannah should work out, cook for herself, and start dating.", "Brooklyn doesn't make any.", "Never fulfilled.", "She never fulfilled them.", "But she never fulfilled them."]}, {"instance_id": "samsum-313", "summary": "Ethan didn't come to the party last night because he is in Los Angeles. Abigail didn't know about it. Ethan will be back in a couple of days, the he will reach out to Abigail.", "summary_trees": ["# ::snt Ethan didn't come to the party last night because he is in Los Angeles.\n(c / come-01\n      :polarity -\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Ethan\"))\n      :ARG4 (p2 / party)\n      :time (d / date-entity\n            :dayperiod (n2 / night)\n            :mod (y / yesterday))\n      :ARG1-of (c2 / cause-01\n            :ARG0 (b / be-located-at-91\n                  :ARG1 p\n                  :ARG2 (c3 / city\n                        :name (n3 / name\n                              :op1 \"Los\"\n                              :op2 \"Angeles\")))))", "# ::snt Abigail didn't know about it.\n(k / know-01\n      :polarity -\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Abigail\"))\n      :ARG1 (ii / it))", "# ::snt Ethan will be back in a couple of days, the he will reach out to Abigail.\n(a / and\n      :op1 (r / return-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Ethan\"))\n            :time (a2 / after\n                  :op1 (n2 / now)\n                  :quant (c / couple\n                        :op1 (t / temporal-quantity\n                              :quant 1\n                              :unit (d / day)))))\n      :op2 (r2 / reach-03\n            :ARG0 p\n            :ARG2 (p2 / person\n                  :name (n3 / name\n                        :op1 \"Abigail\"))))"], "tree": ["(b / be-located-at-91\n   :ARG1 (p / person :name (n / name :op1 \"Ethan\"))\n   :ARG2 (c3 / city\n             :name (n3 / name\n                       :op1 \"Los\"\n                       :op2 \"Angeles\")))", "(b / be-located-at-91\n   :ARG1 (p / person :name (n / name :op1 \"Ethan\"))\n   :ARG2 (c3 / city\n             :name (n3 / name\n                       :op1 \"Los\"\n                       :op2 \"Angeles\")))", "(c / come-01\n   :polarity -\n   :time (d / date-entity\n            :dayperiod (n2 / night)\n            :mod (y / yesterday)))", "(c2 / cause-01\n    :ARG0 (b / be-located-at-91\n             :ARG1 (p / person :name (n / name :op1 \"Ethan\"))\n             :ARG2 (c3 / city\n                       :name (n3 / name\n                                 :op1 \"Los\"\n                                 :op2 \"Angeles\"))))", "(c / come-01\n   :polarity -\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Ethan\"))\n   :ARG4 (p2 / party)\n   :time (d / date-entity\n            :dayperiod (n2 / night)\n            :mod (y / yesterday))\n   :ARG1 (c2 / cause-01\n             :ARG0 (b / be-located-at-91\n                      :ARG1 p\n                      :ARG2 (c3 / city\n                                :name (n3 / name\n                                          :op1 \"Los\"\n                                          :op2 \"Angeles\")))))", "(k / know-01\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Abigail\"))\n   :ARG1 (ii / it))", "(k / know-01\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Abigail\"))\n   :ARG1 (ii / it))", "(r / return-01\n   :time (a2 / after\n             :op1 (n2 / now)\n             :quant (c / couple\n                       :op1 (t / temporal-quantity\n                               :quant 1\n                               :unit (d / day)))))", "(r / return-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Ethan\"))\n   :time (a2 / after\n             :op1 (n2 / now)\n             :quant (c / couple\n                       :op1 (t / temporal-quantity\n                               :quant 1\n                               :unit (d / day)))))"], "smus": ["-Ethan in Los Angeles", "-Ethan in Los Angeles", "It wasn't coming last night.", "Because Ethan is in LA.", "Ethan hasn't come to the party last night because he's in LA.", "Abigail doesn't know it.", "Abigail doesn't know it.", "Then in a couple of days it will be back.", "Ethan will be back in a couple of days."]}, {"instance_id": "samsum-314", "summary": "Alice and Sean will wash the car on their way tomorrow.", "summary_trees": ["# ::snt Alice and Sean will wash the car on their way tomorrow.\n(w / wash-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Alice\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Sean\")))\n      :ARG1 (c / car)\n      :subevent-of (w2 / way\n            :poss a\n            :time (t / tomorrow)))"], "tree": ["(w / wash-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Alice\")))", "(w / wash-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Sean\")))", "(w / wash-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Alice\"))\n   :ARG1 (c / car))", "(w / wash-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Sean\"))\n   :ARG1 (c / car)\n   :ARG1 c)", "(w / wash-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Alice\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Sean\"))))", "(w / wash-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Alice\"))\n   :ARG1 (c / car)\n   :subevent (w2 / way\n                 :poss p\n                 :time (t / tomorrow)))", "(w / wash-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Alice\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Sean\")))\n   :ARG1 (c / car))", "(w / wash-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Alice\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Sean\")))\n   :ARG1 (c / car)\n   :subevent (w2 / way\n                 :poss a\n                 :time (t / tomorrow)))"], "smus": ["Alice, wash.", "Sean, wash.", "Alice was going to wash the car.", "Sean will wash the car.", "Alice and Sean will wash.", "Alice will wash the car on her way tomorrow.", "Alice and Sean were to wash the car.", "Alice and Sean will wash the car on their way tomorrow."]}, {"instance_id": "samsum-315", "summary": "Frank will join Avril at the races at the weekend.", "summary_trees": ["# ::snt Frank will join Avril at the races at the weekend.\n(j / join-04\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Frank\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Avril\"))\n      :ARG4 (r / race-02\n            :time (w / weekend)))"], "tree": ["(j / join-04\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Frank\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Avril\")))", "(j / join-04\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Frank\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Avril\"))\n   :ARG4 (r / race-02\n            :time (w / weekend)))"], "smus": ["Frank will join Avril.", "Frank will join Avril in the weekend races."]}, {"instance_id": "samsum-316", "summary": "Alivia has been taciturn lately. She was trying to write her thesis. She can't focus on writing. She'll try to follow Antonio's advice to start writing without overthinking.", "summary_trees": ["# ::snt Alivia has been taciturn lately.\n(t / taciturn\n      :domain (p / person\n            :name (n / name\n                  :op1 \"Alivia\"))\n      :time (l / lately))", "# ::snt She was trying to write her thesis.\n(t / try-01\n      :ARG0 (s / she)\n      :ARG1 (w / write-01\n            :ARG0 s\n            :ARG1 (t2 / thesis\n                  :poss s)))", "# ::snt She can't focus on writing.\n(p / possible-01\n      :polarity -\n      :ARG1 (f / focus-01\n            :ARG0 (s / she)\n            :ARG2 (w / write-01\n                  :ARG0 s)))", "# ::snt She'll try to follow Antonio's advice to start writing without overthinking.\n(t / try-01\n      :ARG0 (s / she)\n      :ARG1 (f / follow-02\n            :ARG0 s\n            :ARG1 (a / advise-01\n                  :ARG0 (p / person\n                        :name (n / name\n                              :op1 \"Antonio\"))\n                  :ARG1 s\n                  :ARG2 (s2 / start-01\n                        :ARG0 s\n                        :ARG1 (w / write-01\n                              :ARG0 s\n                              :manner (o / overthink-01\n                                    :polarity -\n                                    :ARG0 s))))))"], "tree": ["(t / try-01\n   :ARG0 (s / she)\n   :ARG1 (w / write-01\n            :ARG0 s\n            :ARG1 (t2 / thesis\n                      :poss s)))", "(t / try-01\n   :ARG0 (s / she)\n   :ARG1 (w / write-01\n            :ARG0 s\n            :ARG1 (t2 / thesis\n                      :poss s)))", "(p / possible-01\n   :polarity -\n   :ARG1 (f / focus-01\n            :ARG0 (s / she)\n            :ARG2 (w / write-01\n                     :ARG0 s)))", "(w / write-01\n   :manner (o / overthink-01\n              :polarity -))", "(s2 / start-01\n    :ARG0 (s / she)\n    :ARG1 (w / write-01\n             :ARG0 s\n             :manner (o / overthink-01\n                        :polarity -\n                        :ARG0 s)))", "(a / advise-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Antonio\"))\n   :ARG1 (s / she)\n   :ARG2 (s2 / start-01\n             :ARG0 s\n             :ARG1 (w / write-01\n                      :ARG0 s\n                      :manner (o / overthink-01\n                                 :polarity -\n                                 :ARG0 s))))", "(f / follow-02\n   :ARG0 (s / she)\n   :ARG1 (a / advise-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Antonio\"))\n            :ARG1 s\n            :ARG2 (s2 / start-01\n                      :ARG0 s\n                      :ARG1 (w / write-01\n                               :ARG0 s\n                               :manner (o / overthink-01\n                                          :polarity -\n                                          :ARG0 s)))))"], "smus": ["She was trying to write her thesis.", "She was trying to write her thesis.", "She can't focus on writing.", "Writing without overthinking.", "She's starting to write without overthinking.", "Antonio's advice to her is to start writing without overthinking.", "She will follow Antonio's advice to start writing without overthinking."]}, {"instance_id": "samsum-317", "summary": "Anastasia sent her new school photos to Darrell.", "summary_trees": ["# ::snt Anastasia sent her new school photos to Darrell.\n(s / send-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Anastasia\"))\n      :ARG1 (p2 / photograph-01\n            :ARG1 (s2 / school\n                  :poss p)\n            :ARG1-of (n2 / new-01))\n      :ARG2 (p3 / person\n            :name (n3 / name\n                  :op1 \"Darrell\")))"], "tree": ["(p2 / photograph-01\n    :ARG1 (s2 / school\n              :poss (p / person :name (n / name :op1 \"Anastasia\")))\n    :ARG1 (n2 / new-01))", "(s / send-01\n   :ARG1 (p2 / photograph-01\n             :ARG1 (s2 / school\n                       :poss (p / person :name (n / name :op1 \"Anastasia\")))\n             :ARG1 (n2 / new-01))\n   :ARG2 (p3 / person\n             :name (n3 / name\n                       :op1 \"Darrell\")))", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Anastasia\"))\n   :ARG1 (p2 / photograph-01\n             :ARG1 (s2 / school\n                       :poss p)\n             :ARG1 (n2 / new-01)))", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Anastasia\"))\n   :ARG1 (p2 / photograph-01\n             :ARG1 (s2 / school\n                       :poss p)\n             :ARG1 (n2 / new-01))\n   :ARG2 (p3 / person\n             :name (n3 / name\n                       :op1 \"Darrell\")))", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Anastasia\"))\n   :ARG1 (p2 / photograph-01\n             :ARG1 (s2 / school\n                       :poss p)\n             :ARG1 (n2 / new-01))\n   :ARG2 (p3 / person\n             :name (n3 / name\n                       :op1 \"Darrell\")))"], "smus": ["New photos of Anastasia's school", "Anastasia's school was sent new photos to Darrell.", "Anastasia sent her school new photos.", "Anastasia sent Darrell new photos of her school.", "Anastasia sent Darrell new photos of her school."]}, {"instance_id": "samsum-318", "summary": "Rita and Tina are bored at work and have still 4 hours left.", "summary_trees": ["# ::snt Rita and Tina are bored at work and have still 4 hours left.\n(a / and\n      :op1 (b / bore-02\n            :ARG0 (w / work-01\n                  :ARG0 (a2 / and\n                        :op1 (p / person\n                              :name (n / name\n                                    :op1 \"Rita\"))\n                        :op2 (p2 / person\n                              :name (n2 / name\n                                    :op1 \"Tina\"))))\n            :ARG1 a2)\n      :op2 (l / leave-17\n            :ARG0 a2\n            :ARG1 (t / temporal-quantity\n                  :quant 4\n                  :unit (h / hour))\n            :mod (s / still)))"], "tree": ["(l / leave-17\n   :ARG1 (t / temporal-quantity\n            :quant 4\n            :unit (h / hour)))", "(w / work-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rita\")))", "(w / work-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Tina\")))", "(w / work-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rita\")))", "(w / work-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Tina\")))", "(b / bore-02\n   :ARG0 (w / work-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Rita\"))))", "(b / bore-02\n   :ARG0 (w / work-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Rita\"))))", "(b / bore-02\n   :ARG0 (w / work-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Tina\"))))", "(b / bore-02\n   :ARG0 (w / work-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Rita\"))))", "(l / leave-17\n   :ARG0 (a2 / and)\n   :ARG1 (t / temporal-quantity\n            :quant 4\n            :unit (h / hour))\n   :mod (s / still))", "(b / bore-02\n   :ARG0 (w / work-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Tina\")))\n   :ARG1 p2)", "(b / bore-02\n   :ARG0 (w / work-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Tina\")))\n   :ARG1 p2)", "(w / work-01\n   :ARG0 (a2 / and\n             :op1 (p / person\n                     :name (n / name\n                              :op1 \"Rita\"))\n             :op2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Tina\"))))", "(w / work-01\n   :ARG0 (a2 / and\n             :op1 (p / person\n                     :name (n / name\n                              :op1 \"Rita\"))\n             :op2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Tina\"))))", "(b / bore-02\n   :ARG0 (w / work-01\n            :ARG0 (a2 / and\n                      :op1 (p / person\n                              :name (n / name\n                                       :op1 \"Rita\"))\n                      :op2 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Tina\")))))", "(b / bore-02\n   :ARG0 (w / work-01\n            :ARG0 (a2 / and\n                      :op1 (p / person\n                              :name (n / name\n                                       :op1 \"Rita\"))\n                      :op2 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Tina\"))))\n   :ARG1 a2)", "(b / bore-02\n   :ARG0 (w / work-01\n            :ARG0 (a2 / and\n                      :op1 (p / person\n                              :name (n / name\n                                       :op1 \"Rita\"))\n                      :op2 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Tina\"))))\n   :ARG1 a2)"], "smus": ["4 hours left.", "Rita did work.", "Tina did work.", "Rita did work.", "Tina did work.", "Rita's work is boring.", "Rita's work is boring.", "Tina's work is boring.", "Rita's work is boring.", "The four hours have still left.", "Tina was bored with her work.", "Tina was bored with her work.", "Rita and Tina are at work.", "Rita and Tina are at work.", "Rita and Tina were bored at work.", "Rita and Tina are bored at work.", "Rita and Tina are bored at work."]}, {"instance_id": "samsum-319", "summary": "Adam called Tina. She is at work. Her cell's battery's low. She will cal Adam later in the evening or tomorrow after 9 am.", "summary_trees": ["# ::snt Adam called Tina.\n(c / call-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Adam\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Tina\")))", "# ::snt She is at work.\n(w / work-01\n      :ARG0 (s / she))", "# ::snt Her cell's battery's low.\n(l / low-04\n      :ARG1 (b / battery\n            :part-of (c / cell\n                  :poss (s / she))))", "# ::snt She will cal Adam later in the evening or tomorrow after 9 am.\n(c / call-02\n      :ARG0 (s / she)\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Adam\"))\n      :time (o / or\n            :op1 (a / after\n                  :op1 (d / date-entity\n                        :dayperiod (e / evening))\n                  :quant (s2 / somewhat))\n            :op2 (a2 / after\n                  :op1 (d2 / date-entity\n                        :time \"9:00\")\n                  :mod (t / tomorrow))))"], "tree": ["(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Adam\")))", "(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Adam\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Tina\")))", "(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Adam\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Tina\")))", "(w / work-01\n   :ARG0 (s / she))", "(l / low-04\n   :ARG1 (b / battery\n            :part (c / cell\n                     :poss (s / she))))", "(l / low-04\n   :ARG1 (b / battery\n            :part (c / cell\n                     :poss (s / she))))"], "smus": ["Adam called.", "Adam called Tina.", "Adam called Tina.", "She did work.", "Her cell battery was low.", "Her cell battery was low."]}, {"instance_id": "samsum-320", "summary": "Jessica's plant is withering. She doesn't know what plant it is. Boston found it out using Google Images.", "summary_trees": ["# ::snt Jessica's plant is withering.\n(w / wither-01\n      :ARG1 (p / plant\n            :poss (p2 / person\n                  :name (n / name\n                        :op1 \"Jessica\"))))", "# ::snt She doesn't know what plant it is.\n(k / know-01\n      :polarity -\n      :ARG0 (s / she)\n      :ARG1 (p / plant\n            :domain (ii / it)))", "# ::snt Boston found it out using Google Images.\n(f / find-out-03\n      :ARG0 (c / city\n            :name (n / name\n                  :op1 \"Boston\"))\n      :ARG1 (ii / it)\n      :instrument (ii2 / image\n            :mod (c2 / company\n                  :name (n2 / name\n                        :op1 \"Google\"))))"], "tree": ["(w / wither-01\n   :ARG1 (p / plant\n            :poss (p2 / person\n                      :name (n / name\n                               :op1 \"Jessica\"))))", "(k / know-01\n   :polarity -\n   :ARG0 (s / she)\n   :ARG1 (p / plant\n            :domain (ii / it)))", "(k / know-01\n   :polarity -\n   :ARG0 (s / she)\n   :ARG1 (p / plant\n            :domain (ii / it)))", "(f / find-out-03\n   :ARG0 (c / city\n            :name (n / name\n                     :op1 \"Boston\"))\n   :ARG1 (ii / it))", "(f / find-out-03\n   :ARG0 (c / city\n            :name (n / name\n                     :op1 \"Boston\"))\n   :ARG1 (ii / it)\n   :instrument (ii2 / image\n                    :mod (c2 / company\n                             :name (n2 / name\n                                       :op1 \"Google\"))))"], "smus": ["Jessica's plant is withering.", "She doesn't know if it was a plant.", "She doesn't know if it was a plant.", "Boston found out about it.", "Boston found it with Google Image."]}, {"instance_id": "samsum-321", "summary": "Kate believes her boyfriend's mother dislikes her. He is a nerd who lives and has always lived with his mother and grandmother.", "summary_trees": ["# ::snt Kate believes her boyfriend's mother dislikes her.\n(b / believe-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Kate\"))\n      :ARG1 (d / dislike-01\n            :ARG0 (p2 / person\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 (p3 / person\n                              :ARG0-of (h2 / have-rel-role-91\n                                    :ARG1 p\n                                    :ARG2 (b2 / boyfriend)))\n                        :ARG2 (m / mother)))\n            :ARG1 p))", "# ::snt He is a nerd who lives and has always lived with his mother and grandmother.\n(n / nerd\n      :domain (h / he\n            :ARG0-of (l / live-01\n                  :accompanier (a / and\n                        :op1 (p / person\n                              :ARG0-of (h2 / have-rel-role-91\n                                    :ARG1 h\n                                    :ARG2 (m / mother)))\n                        :op2 (p2 / person\n                              :ARG0-of (h3 / have-rel-role-91\n                                    :ARG1 h\n                                    :ARG2 (g / grandmother))))\n                  :time (a2 / always))))"], "tree": ["(h2 / have-rel-role-91\n    :ARG1 (p / person :name (n / name :op1 \"Kate\"))\n    :ARG2 (b2 / boyfriend))", "(d / dislike-01\n   :ARG0 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 (p3 / person\n                                :ARG0 (h2 / have-rel-role-91\n                                          :ARG1 (p / person :name (n / name :op1 \"Kate\"))\n                                          :ARG2 (b2 / boyfriend)))\n                      :ARG2 (m / mother)))\n   :ARG1 p)", "(d / dislike-01\n   :ARG0 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 (p3 / person\n                                :ARG0 (h2 / have-rel-role-91\n                                          :ARG1 (p / person :name (n / name :op1 \"Kate\"))\n                                          :ARG2 (b2 / boyfriend)))\n                      :ARG2 (m / mother)))\n   :ARG1 p)", "(b / believe-01\n   :ARG1 (d / dislike-01\n            :ARG0 (p2 / person\n                      :ARG0 (h / have-rel-role-91\n                               :ARG1 (p3 / person\n                                         :ARG0 (h2 / have-rel-role-91\n                                                   :ARG1 (p / person :name (n / name :op1 \"Kate\"))\n                                                   :ARG2 (b2 / boyfriend)))\n                               :ARG2 (m / mother)))\n            :ARG1 p))", "(b / believe-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kate\"))\n   :ARG1 (d / dislike-01\n            :ARG0 (p2 / person\n                      :ARG0 (h / have-rel-role-91\n                               :ARG1 (p3 / person\n                                         :ARG0 (h2 / have-rel-role-91\n                                                   :ARG1 p\n                                                   :ARG2 (b2 / boyfriend)))\n                               :ARG2 (m / mother)))\n            :ARG1 p))", "(b / believe-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kate\"))\n   :ARG1 (d / dislike-01\n            :ARG0 (p2 / person\n                      :ARG0 (h / have-rel-role-91\n                               :ARG1 (p3 / person\n                                         :ARG0 (h2 / have-rel-role-91\n                                                   :ARG1 p\n                                                   :ARG2 (b2 / boyfriend)))\n                               :ARG2 (m / mother)))\n            :ARG1 p))", "(h2 / have-rel-role-91\n    :ARG1 (h / he)\n    :ARG2 (m / mother))", "(l / live-01\n   :accompanier (p / person)\n   :time (a2 / always))", "(l / live-01\n   :accompanier (p2 / person)\n   :time (a2 / always)\n   :time a2)", "(l / live-01\n   :accompanier (a / and\n                   :op1 (p / person)\n                   :op2 (p2 / person))\n   :time (a2 / always))", "(l / live-01\n   :accompanier (p / person\n                   :ARG0 (h2 / have-rel-role-91\n                             :ARG1 (h / he)\n                             :ARG2 (m / mother)))\n   :time (a2 / always))", "(l / live-01\n   :accompanier (p2 / person\n                    :ARG0 (h3 / have-rel-role-91\n                              :ARG1 (h / he)\n                              :ARG2 (g / grandmother)))\n   :time (a2 / always)\n   :time a2)", "(l / live-01\n   :accompanier (a / and\n                   :op1 (p / person\n                           :ARG0 (h2 / have-rel-role-91\n                                     :ARG1 (h / he)\n                                     :ARG2 (m / mother)))\n                   :op2 (p2 / person\n                            :ARG0 (h3 / have-rel-role-91\n                                      :ARG1 h\n                                      :ARG2 (g / grandmother))))\n   :time (a2 / always))"], "smus": ["Kate's boyfriend", "Kate's mother doesn't like her.", "Kate's mother doesn't like her.", "Kate believes her mother doesn't like her.", "Kate believes her boyfriend's mother doesn't like her.", "Kate believes her boyfriend's mother doesn't like her.", "He is a mothe.", "Always lives with people.", "Always lives with people, always.", "Always lives with people and people.", "He always lives with the mothe.", "Always lives with his grandmothe.", "He always lives with his mothe and grandmothe."]}, {"instance_id": "samsum-322", "summary": "David was looking after Ethan's sister. Ethan is grateful. David won't do it again. ", "summary_trees": ["# ::snt David was looking after Ethan's sister.\n(l / look-after-07\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"David\"))\n      :ARG1 (p2 / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (p3 / person\n                        :name (n2 / name\n                              :op1 \"Ethan\"))\n                  :ARG2 (s / sister))))", "# ::snt Ethan is grateful.\n(a / appreciate-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Ethan\")))", "# ::snt David won't do it again.\n(d / do-02\n      :polarity -\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"David\"))\n      :ARG1 (ii / it)\n      :mod (a / again))"], "tree": ["(h / have-rel-role-91\n   :ARG1 (p3 / person\n             :name (n2 / name\n                       :op1 \"Ethan\"))\n   :ARG2 (s / sister))", "(a / appreciate-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ethan\")))", "(d / do-02\n   :polarity -\n   :mod (a / again))", "(d / do-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"David\")))", "(d / do-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"David\"))\n   :ARG1 (ii / it))", "(d / do-02\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"David\"))\n   :ARG1 (ii / it)\n   :mod (a / again))"], "smus": ["Ethan's sister", "Thanks, Ethan.", "Don't do again.", "David did.", "David did it.", "David didn't do it again."]}, {"instance_id": "samsum-323", "summary": "Aimee is looking for Maryam.", "summary_trees": ["# ::snt Aimee is looking for Maryam.\n(l / look-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Aimee\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Maryam\")))"], "tree": ["(l / look-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Maryam\")))", "(l / look-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Aimee\")))", "(l / look-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Aimee\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Maryam\")))", "(l / look-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Aimee\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Maryam\")))"], "smus": ["Looking for Maryam.", "Aimee was looking.", "Aimee is looking at Maryam.", "Aimee is looking at Maryam."]}, {"instance_id": "samsum-324", "summary": "Jamie has never gone ghost hunting but Harriette did with her friends once in high school. They did not see any ghosts and she only got frightened by a cat's miaowing.", "summary_trees": ["# ::snt Jamie has never gone ghost hunting but Harriette did with her friends once in high school.\n(c / contrast-01\n      :ARG1 (g / go-02\n            :polarity -\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Jamie\"))\n            :ARG1 (h / hunt-01\n                  :ARG1 (g2 / ghost))\n            :time (e / ever))\n      :ARG2 (g3 / go-02\n            :frequency 1\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Harriette\"))\n            :ARG1 h\n            :accompanier (p3 / person\n                  :ARG0-of (h2 / have-rel-role-91\n                        :ARG1 p2\n                        :ARG2 (f / friend)))\n            :time (h3 / high-school)))", "# ::snt They did not see any ghosts and she only got frightened by a cat's miaowing.\n(a / and\n      :op1 (s / see-01\n            :polarity -\n            :ARG0 (t / they)\n            :ARG1 (g / ghost\n                  :quant (a2 / any)))\n      :op2 (f / frighten-01\n            :ARG0 (m / miaow-01\n                  :ARG0 (c / cat))\n            :ARG1 (s2 / she)\n            :mod (o / only)))"], "tree": ["(h2 / have-rel-role-91\n    :ARG1 (p2 / person :name (n2 / name :op1 \"Harriette\"))\n    :ARG2 (f / friend))", "(g / go-02\n   :polarity -\n   :time (e / ever))", "(g3 / go-02\n    :ARG0 (p2 / person\n              :name (n2 / name\n                        :op1 \"Harriette\")))", "(g3 / go-02\n    :frequency 1\n    :accompanier (p3 / person)\n    :time (h3 / high-school))", "(g3 / go-02\n    :ARG0 (p2 / person\n              :name (n2 / name\n                        :op1 \"Harriette\"))\n    :ARG1 (h / hunt-01))", "(g / go-02\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jamie\"))\n   :ARG1 (h / hunt-01\n            :ARG1 (g2 / ghost))\n   :time (e / ever))", "(g3 / go-02\n    :frequency 1\n    :ARG0 (p2 / person\n              :name (n2 / name\n                        :op1 \"Harriette\"))\n    :ARG1 (h / hunt-01)\n    :accompanier (p3 / person\n                     :ARG0 (h2 / have-rel-role-91\n                               :ARG1 p2\n                               :ARG2 (f / friend)))\n    :time (h3 / high-school))", "(s / see-01\n   :polarity -\n   :ARG0 (t / they)\n   :ARG1 (g / ghost\n            :quant (a2 / any)))", "(f / frighten-01\n   :ARG0 (m / miaow-01\n            :ARG0 (c / cat))\n   :ARG1 (s2 / she)\n   :mod (o / only))"], "smus": ["Harrisette has friends.", "Never gone.", "Harrisette has gone.", "One time in high school, people went together.", "Harrisette has gone on the hunt.", "Jamie has never gone on a ghost hunt.", "Harriette has gone on the hunt once with her friends in high school.", "They did not see any ghosts.", "She was only scared of the cat miaow."]}, {"instance_id": "samsum-325", "summary": "Kaya is looking for Clay, who is in the classroom.", "summary_trees": ["# ::snt Kaya is looking for Clay, who is in the classroom.\n(l / look-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Kaya\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Clay\")\n            :location (c / classroom)))"], "tree": ["(l / look-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kaya\")))", "(l / look-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Clay\")\n             :location (c / classroom)))", "(l / look-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kaya\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Clay\")\n             :location (c / classroom)))", "(l / look-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kaya\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Clay\")\n             :location (c / classroom)))"], "smus": ["Kaya was looking.", "Looking at Clay in the classroom.", "Kaya was looking at Clay in the classroom.", "Kaya was looking at Clay in the classroom."]}, {"instance_id": "samsum-326", "summary": "Ethan will soon send Jason's phone number to Dixie.", "summary_trees": ["# ::snt Ethan will soon send Jason's phone number to Dixie.\n(s / send-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Ethan\"))\n      :ARG1 (n2 / number\n            :mod (p2 / phone)\n            :poss (p3 / person\n                  :name (n3 / name\n                        :op1 \"Jason\")))\n      :ARG2 (p4 / person\n            :name (n4 / name\n                  :op1 \"Dixie\"))\n      :time (s2 / soon))"], "tree": ["(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ethan\"))\n   :ARG1 (n2 / number\n             :mod (p2 / phone)\n             :poss (p3 / person\n                       :name (n3 / name\n                                 :op1 \"Jason\"))))", "(s / send-01\n   :ARG1 (n2 / number\n             :mod (p2 / phone)\n             :poss (p3 / person\n                       :name (n3 / name\n                                 :op1 \"Jason\")))\n   :ARG2 (p4 / person\n             :name (n4 / name\n                       :op1 \"Dixie\"))\n   :time (s2 / soon))", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ethan\"))\n   :ARG1 (n2 / number\n             :mod (p2 / phone)\n             :poss (p3 / person\n                       :name (n3 / name\n                                 :op1 \"Jason\")))\n   :ARG2 (p4 / person\n             :name (n4 / name\n                       :op1 \"Dixie\")))", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ethan\"))\n   :ARG1 (n2 / number\n             :mod (p2 / phone)\n             :poss (p3 / person\n                       :name (n3 / name\n                                 :op1 \"Jason\")))\n   :ARG2 (p4 / person\n             :name (n4 / name\n                       :op1 \"Dixie\"))\n   :time (s2 / soon))", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ethan\"))\n   :ARG1 (n2 / number\n             :mod (p2 / phone)\n             :poss (p3 / person\n                       :name (n3 / name\n                                 :op1 \"Jason\")))\n   :ARG2 (p4 / person\n             :name (n4 / name\n                       :op1 \"Dixie\"))\n   :time (s2 / soon))"], "smus": ["Ethan will send Jason's phone number.", "Soon, Jason's phone number will be sent to Dixie.", "Ethan will send Jason's phone number to Dixie.", "Soon, Ethan will send Jason's phone number to Dixie.", "Soon, Ethan will send Jason's phone number to Dixie."]}, {"instance_id": "samsum-327", "summary": "Lilly will be late. Gabriel will order pasta with salmon and basil for her.", "summary_trees": ["# ::snt Lilly will be late.\n(l / late-02\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Lilly\")))", "# ::snt Gabriel will order pasta with salmon and basil for her.\n(o / order-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Gabriel\"))\n      :ARG1 (p2 / pasta\n            :accompanier (a / and\n                  :op1 (s / salmon)\n                  :op2 (b / basil)))\n      :beneficiary (s2 / she))"], "tree": ["(o / order-02\n   :ARG1 (p2 / pasta\n             :accompanier (s / salmon)))", "(o / order-02\n   :ARG1 (p2 / pasta\n             :accompanier (b / basil)))", "(o / order-02\n   :ARG1 (p2 / pasta\n             :accompanier (a / and\n                             :op1 (s / salmon)\n                             :op2 (b / basil))))", "(o / order-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Gabriel\"))\n   :ARG1 (p2 / pasta\n             :accompanier (s / salmon)))", "(o / order-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Gabriel\"))\n   :ARG1 (p2 / pasta\n             :accompanier (s / salmon)))", "(o / order-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Gabriel\"))\n   :ARG1 (p2 / pasta\n             :accompanier (b / basil)))", "(o / order-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Gabriel\"))\n   :ARG1 (p2 / pasta\n             :accompanier (b / basil))\n   :beneficiary (s2 / she))", "(o / order-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Gabriel\"))\n   :ARG1 (p2 / pasta\n             :accompanier (a / and\n                             :op1 (s / salmon)\n                             :op2 (b / basil))))", "(o / order-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Gabriel\"))\n   :ARG1 (p2 / pasta\n             :accompanier (a / and\n                             :op1 (s / salmon)\n                             :op2 (b / basil)))\n   :beneficiary (s2 / she))"], "smus": ["Order pasta with salmon.", "Order pasta with basil.", "Order pasta with salmon and basil.", "Gabriel would order pasta with salmon.", "Gabriel would order pasta with salmon.", "Gabriel would order pasta with basil.", "Gabriel would order pasta with basil for her.", "Gabriel would order pasta with salmon and basil.", "Gabriel would order her pasta with salmon and basil."]}, {"instance_id": "samsum-328", "summary": "Levy hasn't taken the trash out because parents didn't ask him. Lucy will do it.", "summary_trees": ["# ::snt Levy hasn't taken the trash out because parents didn't ask him.\n(c / cause-01\n      :ARG0 (a / ask-02\n            :polarity -\n            :ARG0 (p / person\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 (p2 / person\n                              :name (n / name\n                                    :op1 \"Levy\"))\n                        :ARG2 (p3 / parent)))\n            :ARG2 p2)\n      :ARG1 (t / take-out-11\n            :polarity -\n            :ARG0 p2\n            :ARG1 (t2 / trash)))", "# ::snt Lucy will do it.\n(d / do-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Lucy\"))\n      :ARG1 (ii / it))"], "tree": ["(t / take-out-11\n   :polarity -\n   :ARG0 (p2 / person :name (n / name :op1 \"Levy\"))\n   :ARG1 (t2 / trash))", "(h / have-rel-role-91\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Levy\"))\n   :ARG2 (p3 / parent))", "(a / ask-02\n   :polarity -\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :name (n / name\n                                        :op1 \"Levy\"))\n                     :ARG2 (p3 / parent)))\n   :ARG2 p2)", "(c / cause-01\n   :ARG0 (a / ask-02\n            :polarity -\n            :ARG0 (p / person\n                     :ARG0 (h / have-rel-role-91\n                              :ARG1 (p2 / person\n                                        :name (n / name\n                                                 :op1 \"Levy\"))\n                              :ARG2 (p3 / parent)))\n            :ARG2 p2)\n   :ARG1 (t / take-out-11\n            :polarity -\n            :ARG0 p2\n            :ARG1 (t2 / trash)))", "(d / do-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lucy\"))\n   :ARG1 (ii / it))", "(d / do-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lucy\"))\n   :ARG1 (ii / it))"], "smus": ["Levin hasn't taken the trash out.", "Levies has parents.", "Levi's parents don't ask him.", "Because Levi's parents don't ask him to take out the trash.", "Lucy will do it.", "Lucy will do it."]}, {"instance_id": "samsum-329", "summary": "Jane wants to leave at 4.30 instead of 5 because Google Maps suggests the 300 km drive should take them at least 3 hours and she doesn't want to be late. She will wait for Steven at the main entrance.", "summary_trees": ["# ::snt Jane wants to leave at 4.30 instead of 5 because Google Maps suggests the 300 km drive should take them at least 3 hours\n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jane\"))\n      :ARG1 (l / leave-11\n            :ARG0 p\n            :time (d / date-entity\n                  :time \"4:30\"\n                  :ARG1-of (ii / instead-of-91\n                        :ARG2 (l2 / leave-11\n                              :ARG0 p\n                              :time (d2 / date-entity\n                                    :time \"5:00\")))))\n      :ARG1-of (c / cause-01\n            :ARG0 (s / suggest-01\n                  :ARG0 (c2 / company\n                        :name (n2 / name\n                              :op1 \"Google\"\n                              :op2 \"Maps\"))\n                  :ARG1 (r / recommend-01\n                        :ARG1 (t / take-10\n                              :ARG0 (d3 / drive-01\n                                    :ARG0 p\n                                    :extent (d4 / distance-quantity\n                                          :quant 300\n                                          :unit (k / kilometer)))\n                              :ARG1 (a / at-least\n                                    :op1 (t2 / temporal-quantity\n                                          :quant 3\n                                          :unit (h / hour)))\n                              :ARG2 p)))))", "# ::snt and she doesn't want to be late.\n(a / and\n      :op2 (w / want-01\n            :ARG0 (s / she)\n            :ARG1 (l / late-02\n                  :polarity -\n                  :ARG1 s)))", "# ::snt She will wait for Steven at the main entrance.\n(w / wait-01\n      :ARG1 (s / she)\n      :ARG2 (p / person\n            :name (n / name\n                  :op1 \"Steven\"))\n      :location (e / entrance\n            :mod (m / main)))"], "tree": ["(d3 / drive-01\n    :extent (d4 / distance-quantity\n                :quant 300\n                :unit (k / kilometer)))", "(w / want-01\n   :ARG0 (s / she)\n   :ARG1 (l / late-02\n            :polarity -\n            :ARG1 s))", "(w / want-01\n   :ARG0 (s / she)\n   :ARG1 (l / late-02\n            :polarity -\n            :ARG1 s))", "(w / wait-01\n   :location (e / entrance\n                :mod (m / main)))", "(w / wait-01\n   :ARG1 (s / she)\n   :ARG2 (p / person\n            :name (n / name\n                     :op1 \"Steven\")))", "(w / wait-01\n   :ARG1 (s / she)\n   :ARG2 (p / person\n            :name (n / name\n                     :op1 \"Steven\"))\n   :location (e / entrance\n                :mod (m / main)))"], "smus": ["3 hours drive", "She didn't want to be late.", "She didn't want to be late.", "Wait at the main entrance.", "She'll wait for Steve.", "She'll wait for Steven at the main entrance."]}, {"instance_id": "samsum-330", "summary": "Salma and Hugh like cat memes.", "summary_trees": ["# ::snt Salma and Hugh like cat memes.\n(l / like-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Salma\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Hugh\")))\n      :ARG1 (m / meme\n            :mod (c / cat)))"], "tree": ["(l / like-01\n   :ARG1 (m / meme\n            :mod (c / cat)))", "(l / like-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Salma\"))\n   :ARG1 (m / meme\n            :mod (c / cat)))", "(l / like-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Salma\"))\n   :ARG1 (m / meme\n            :mod (c / cat)))", "(l / like-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Hugh\"))\n   :ARG1 (m / meme\n            :mod (c / cat))\n   :ARG1 m)", "(l / like-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Hugh\"))\n   :ARG1 (m / meme\n            :mod (c / cat))\n   :ARG1 m)"], "smus": ["Like cat memes.", "Salama likes cat memes.", "Salama likes cat memes.", "Hugh likes cat memes.", "Hugh likes cat memes."]}, {"instance_id": "samsum-331", "summary": "Someone left a phone at Liam's place, but it wasn't Indiana.", "summary_trees": ["# ::snt Someone left a phone at Liam's place, but it wasn't Indiana.\n(l / leave-15\n      :ARG0 (s / someone)\n      :ARG1 (p / phone)\n      :ARG2 (p2 / place\n            :poss (p3 / person\n                  :name (n / name\n                        :op1 \"Liam\")))\n      :concession (s2 / state\n            :polarity -\n            :name (n2 / name\n                  :op1 \"Indiana\")))"], "tree": ["(l / leave-15\n   :ARG0 (s / someone)\n   :ARG1 (p / phone))", "(l / leave-15\n   :ARG0 (s / someone)\n   :ARG1 (p / phone)\n   :ARG2 (p2 / place\n             :poss (p3 / person\n                       :name (n / name\n                                :op1 \"Liam\"))))", "(l / leave-15\n   :ARG0 (s / someone)\n   :ARG1 (p / phone)\n   :ARG2 (p2 / place\n             :poss (p3 / person\n                       :name (n / name\n                                :op1 \"Liam\")))\n   :concession (s2 / state\n                   :polarity -\n                   :name (n2 / name\n                             :op1 \"Indiana\")))"], "smus": ["Someone left the phone.", "Someone left the phone at Liam's place.", "Despite being non-Indiana, someone left the phone at Liam's place."]}, {"instance_id": "samsum-332", "summary": "Tessa doesn't like Chloe texting her boyfriend, Jim Andrews. Jim is Chloe's co-worker so Chloe needs to communicate with him.", "summary_trees": ["# ::snt Tessa doesn't like Chloe texting her boyfriend, Jim Andrews.\n(d / dislike-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Tessa\"))\n      :ARG1 (t / text-01\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Chloe\"))\n            :ARG2 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Jim\"\n                        :op2 \"Andrews\")\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 p\n                        :ARG2 (b / boyfriend)))))", "# ::snt Jim is Chloe's co-worker so Chloe needs to communicate with him.\n(c / cause-01\n      :ARG0 (w / work-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Jim\"))\n            :ARG2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Chloe\")))\n      :ARG1 (n3 / need-01\n            :ARG0 p2\n            :ARG1 (c2 / communicate-01\n                  :ARG0 p2\n                  :ARG2 p)))"], "tree": ["(n3 / need-01\n    :ARG0 (p2 / person :name (n2 / name :op1 \"Chloe\"))\n    :ARG1 (c2 / communicate-01\n              :ARG0 p2\n              :ARG2 (p / person :name (n / name :op1 \"Jim\"))))", "(n3 / need-01\n    :ARG0 (p2 / person :name (n2 / name :op1 \"Chloe\"))\n    :ARG1 (c2 / communicate-01\n              :ARG0 p2\n              :ARG2 (p / person :name (n / name :op1 \"Jim\"))))", "(w / work-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jim\")))"], "smus": ["Chloe needs to communicate with Jim.", "Chloe needs to communicate with Jim.", "Jim works."]}, {"instance_id": "samsum-333", "summary": "Joanne is going to go back home to France for the holidays. She's going to cheer her mum up because her parents separated a few months ago. Evelyn offers Joanne to spend Christmas together if she brings her mum over here. ", "summary_trees": ["# ::snt Joanne is going to go back home to France for the holidays.\n(g / go-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Joanne\"))\n      :ARG4 (h / home\n            :location (c / country\n                  :name (n2 / name\n                        :op1 \"France\")))\n      :direction (b / back)\n      :purpose (h2 / holiday))", "# ::snt She's going to cheer her mum up because her parents separated a few months ago.\n(c / cause-01\n      :ARG0 (s / separate-01\n            :ARG1 (p / parent\n                  :poss (s2 / she))\n            :time (b / before\n                  :op1 (n / now)\n                  :quant (f / few\n                        :op1 (t / temporal-quantity\n                              :quant 1\n                              :unit (m / month)))))\n      :ARG1 (c2 / cheer-up-02\n            :ARG0 s2\n            :ARG1 (p2 / person\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 s2\n                        :ARG2 (m2 / mum)))))", "# ::snt Evelyn offers Joanne to spend Christmas together if she brings her mum over here.\n(o / offer-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Evelyn\"))\n      :ARG1 (s / spend-02\n            :ARG0 (a / and\n                  :op1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Joanne\"))\n                  :op2 p)\n            :ARG1 (f / festival\n                  :name (n3 / name\n                        :op1 \"Christmas\"))\n            :manner (t / together))\n      :ARG3 p2\n      :condition (b / bring-01\n            :ARG0 p2\n            :ARG1 (p3 / person\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 p2\n                        :ARG2 (m / mum)))\n            :ARG2 (h2 / here)))"], "tree": ["(g / go-02\n   :direction (b / back)\n   :purpose (h2 / holiday))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Joanne\")))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Joanne\"))\n   :ARG4 (h / home\n            :location (c / country\n                         :name (n2 / name\n                                   :op1 \"France\"))))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Joanne\"))\n   :ARG4 (h / home\n            :location (c / country\n                         :name (n2 / name\n                                   :op1 \"France\")))\n   :purpose (h2 / holiday))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Joanne\"))\n   :ARG4 (h / home\n            :location (c / country\n                         :name (n2 / name\n                                   :op1 \"France\")))\n   :direction (b / back)\n   :purpose (h2 / holiday))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Joanne\")))", "(c2 / cheer-up-02\n    :ARG0 (s2 / she)\n    :ARG1 (p2 / person\n              :ARG0 (h / have-rel-role-91\n                       :ARG1 s2\n                       :ARG2 (m2 / mum))))", "(s / separate-01\n   :time (b / before\n            :op1 (n / now)\n            :quant (f / few\n                      :op1 (t / temporal-quantity\n                              :quant 1\n                              :unit (m / month)))))", "(s / separate-01\n   :ARG1 (p / parent\n            :poss (s2 / she))\n   :time (b / before\n            :op1 (n / now)\n            :quant (f / few\n                      :op1 (t / temporal-quantity\n                              :quant 1\n                              :unit (m / month)))))", "(c / cause-01\n   :ARG0 (s / separate-01\n            :ARG1 (p / parent\n                     :poss (s2 / she))\n            :time (b / before\n                     :op1 (n / now)\n                     :quant (f / few\n                               :op1 (t / temporal-quantity\n                                       :quant 1\n                                       :unit (m / month)))))\n   :ARG1 (c2 / cheer-up-02\n             :ARG0 s2\n             :ARG1 (p2 / person\n                       :ARG0 (h / have-rel-role-91\n                                :ARG1 s2\n                                :ARG2 (m2 / mum)))))", "(o / offer-01\n   :ARG1 (s / spend-02\n            :ARG0 (p / person :name (n / name :op1 \"Evelyn\"))\n            :ARG1 (f / festival\n                     :name (n3 / name\n                               :op1 \"Christmas\"))\n            :ARG1 f\n            :manner (t / together)))", "(o / offer-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Evelyn\"))\n   :ARG1 (s / spend-02\n            :ARG0 p\n            :ARG1 (f / festival\n                     :name (n3 / name\n                               :op1 \"Christmas\"))\n            :ARG1 f\n            :manner (t / together)))", "(o / offer-01\n   :ARG1 (s / spend-02\n            :ARG0 (a / and\n                     :op1 (p2 / person\n                              :name (n2 / name\n                                        :op1 \"Joanne\"))\n                     :op2 (p / person :name (n / name :op1 \"Evelyn\")))\n            :ARG1 (f / festival\n                     :name (n3 / name\n                               :op1 \"Christmas\"))\n            :manner (t / together)))", "(o / offer-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Evelyn\"))\n   :ARG1 (s / spend-02\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Joanne\"))\n            :ARG1 (f / festival\n                     :name (n3 / name\n                               :op1 \"Christmas\"))\n            :manner (t / together)))", "(o / offer-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Evelyn\"))\n   :ARG1 (s / spend-02\n            :ARG0 (a / and\n                     :op1 (p2 / person\n                              :name (n2 / name\n                                        :op1 \"Joanne\"))\n                     :op2 p)\n            :ARG1 (f / festival\n                     :name (n3 / name\n                               :op1 \"Christmas\"))\n            :manner (t / together)))", "(o / offer-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Evelyn\"))\n   :ARG1 (s / spend-02\n            :ARG0 p\n            :ARG1 (f / festival\n                     :name (n3 / name\n                               :op1 \"Christmas\"))\n            :ARG1 f\n            :manner (t / together))\n   :ARG3 (p2 / person :name (n2 / name :op1 \"Joanne\"))\n   :condition (b / bring-01\n                 :ARG0 p2\n                 :ARG1 (p3 / person\n                           :ARG0 (h / have-rel-role-91\n                                    :ARG1 p2\n                                    :ARG2 (m / mum)))\n                 :ARG2 (h2 / here)))", "(o / offer-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Evelyn\"))\n   :ARG1 (s / spend-02\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Joanne\"))\n            :ARG1 (f / festival\n                     :name (n3 / name\n                               :op1 \"Christmas\"))\n            :manner (t / together))\n   :ARG3 p2\n   :condition (b / bring-01\n                 :ARG0 p2\n                 :ARG1 (p3 / person\n                           :ARG0 (h / have-rel-role-91\n                                    :ARG1 p2\n                                    :ARG2 (m / mum)))\n                 :ARG2 (h2 / here)))", "(o / offer-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Evelyn\"))\n   :ARG1 (s / spend-02\n            :ARG0 (a / and\n                     :op1 (p2 / person\n                              :name (n2 / name\n                                        :op1 \"Joanne\"))\n                     :op2 p)\n            :ARG1 (f / festival\n                     :name (n3 / name\n                               :op1 \"Christmas\"))\n            :manner (t / together))\n   :ARG3 p2\n   :condition (b / bring-01\n                 :ARG0 p2\n                 :ARG1 (p3 / person\n                           :ARG0 (h / have-rel-role-91\n                                    :ARG1 p2\n                                    :ARG2 (m / mum)))\n                 :ARG2 (h2 / here)))"], "smus": ["Going back for the holidays.", "Joanne is going.", "Joanne is going home to France.", "Joanne is going home for the holidays in France.", "Joanne is going back home to France for the holidays.", "Joanne is going.", "She'll cheer her mum up.", "Separated a few months ago.", "Her parents separated a few months ago.", "She was to cheer up her mum because her parents separated a few months ago.", "Evelyn offers to spend Christmas together.", "Evelyn offers to spend Christmas together.", "Joanne and Evelyn offers to spend Christmas together.", "Evelyn offers to spend Christmas together with Joanne.", "Evelyn offers to spend Christmas together with Joanne.", "Evelyn offers Joanne to spend Christmas together if she brings her mum here.", "Evelyn offers to spend Christmas together with Joanne if she brings her mum here.", "Evelyn offers to spend Christmas together with Joanne if she brings her mum here."]}, {"instance_id": "samsum-334", "summary": "Judy thinks she's always attracted to bad guys.", "summary_trees": ["# ::snt Judy thinks she's always attracted to bad guys.\n(t / think-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Judy\"))\n      :ARG1 (a / attract-01\n            :ARG0 (g / guy\n                  :ARG1-of (b / bad-07))\n            :ARG1 p\n            :time (a2 / always)))"], "tree": [], "smus": []}, {"instance_id": "samsum-335", "summary": "The last one Julia read was Die again from 2014. There's going to be a meeting with Tess organized by the city library. ", "summary_trees": ["# ::snt The last one Julia read was Die again from 2014.\n(r / read-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Julia\"))\n      :ARG1 (b / book\n            :name (n2 / name\n                  :op1 \"Die\"\n                  :op2 \"Again\")\n            :time (d / date-entity\n                  :year 2014)\n            :mod (l / last)))", "# ::snt There's going to be a meeting with Tess organized by the city library.\n(m / meet-03\n      :ARG0 (l / library\n            :mod (c / city))\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Tess\"))\n      :ARG1-of (o / organize-01\n            :ARG0 l))"], "tree": ["(r / read-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Julia\")))", "(r / read-01\n   :ARG1 (b / book\n            :name (n2 / name\n                      :op1 \"Die\"\n                      :op2 \"Again\")\n            :time (d / date-entity\n                     :year 2014)\n            :mod (l / last)))", "(r / read-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Julia\"))\n   :ARG1 (b / book\n            :name (n2 / name\n                      :op1 \"Die\"\n                      :op2 \"Again\")\n            :time (d / date-entity\n                     :year 2014)\n            :mod (l / last)))", "(r / read-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Julia\"))\n   :ARG1 (b / book\n            :name (n2 / name\n                      :op1 \"Die\"\n                      :op2 \"Again\")\n            :time (d / date-entity\n                     :year 2014)\n            :mod (l / last)))", "(m / meet-03\n   :ARG0 (l / library\n            :mod (c / city)))", "(m / meet-03\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Tess\")))", "(m / meet-03\n   :ARG0 (l / library\n            :mod (c / city))\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Tess\")))", "(m / meet-03\n   :ARG0 (l / library\n            :mod (c / city))\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Tess\"))\n   :ARG1 (o / organize-01\n            :ARG0 l))"], "smus": ["Julia read.", "Read last year's Die Again.", "Julia read the last book \"Die Again\" in 2014.", "Julia read the last book \"Die Again\" in 2014.", "The city library will meet.", "-Tess's meeting", "The city library met with Tess.", "The city library met with Tess to be organized."]}, {"instance_id": "samsum-336", "summary": "Jake reserved 3 tickets for tomorrow 7 pm. He got 30% discount.", "summary_trees": ["# ::snt Jake reserved 3 tickets for tomorrow 7 pm.\n(r / reserve-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jake\"))\n      :ARG1 (t / ticket\n            :quant 3)\n      :ARG2 (d / date-entity\n            :time \"19:00\"\n            :dayperiod (n2 / night)\n            :mod (t2 / tomorrow)))", "# ::snt He got 30% discount.\n(g / get-01\n      :ARG0 (h / he)\n      :ARG1 (d / discount-01\n            :ARG2 (p / percentage-entity\n                  :value 30)\n            :ARG3 h))"], "tree": ["(r / reserve-01\n   :ARG1 (t / ticket\n            :quant 3))", "(d / discount-01\n   :ARG2 (p / percentage-entity\n            :value 30)\n   :ARG3 (h / he))", "(g / get-01\n   :ARG0 (h / he)\n   :ARG1 (d / discount-01\n            :ARG2 (p / percentage-entity\n                     :value 30)\n            :ARG3 h))", "(g / get-01\n   :ARG0 (h / he)\n   :ARG1 (d / discount-01\n            :ARG2 (p / percentage-entity\n                     :value 30)\n            :ARG3 h))"], "smus": ["Three tickets were reserved.", "He got a 30% discount.", "He got a 30% discount.", "He got a 30% discount."]}, {"instance_id": "samsum-337", "summary": "Molly and Margaret are going to Sweden in January. Kai and Peter advise them to stay in Stockholm and visit Vasa Museum.", "summary_trees": ["# ::snt Molly and Margaret are going to Sweden in January.\n(g / go-02\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Molly\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Margaret\")))\n      :ARG4 (c / country\n            :name (n3 / name\n                  :op1 \"Sweden\"))\n      :time (d / date-entity\n            :month 1))", "# ::snt Kai and Peter advise them to stay in Stockholm and visit Vasa Museum.\n(a / advise-01\n      :ARG0 (a2 / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Kai\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Peter\")))\n      :ARG1 (t / they)\n      :ARG2 (a3 / and\n            :op1 (s / stay-01\n                  :ARG1 t\n                  :location (c / city\n                        :name (n3 / name\n                              :op1 \"Stockholm\")))\n            :op2 (v / visit-01\n                  :ARG0 t\n                  :ARG1 (m / museum\n                        :name (n4 / name\n                              :op1 \"Vasa\"\n                              :op2 \"Museum\")))))"], "tree": ["(g / go-02\n   :time (d / date-entity\n            :month 1))", "(g / go-02\n   :time (d / date-entity\n            :month 1))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Molly\")))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Margaret\")))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Margaret\"))\n   :ARG4 (c / country\n            :name (n3 / name\n                      :op1 \"Sweden\"))\n   :ARG4 c)", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Molly\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Margaret\"))))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Margaret\"))\n   :ARG4 (c / country\n            :name (n3 / name\n                      :op1 \"Sweden\"))\n   :ARG4 c\n   :time (d / date-entity\n            :month 1))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Margaret\"))\n   :ARG4 (c / country\n            :name (n3 / name\n                      :op1 \"Sweden\"))\n   :ARG4 c\n   :time (d / date-entity\n            :month 1))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Molly\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Margaret\")))\n   :ARG4 (c / country\n            :name (n3 / name\n                      :op1 \"Sweden\")))", "(s / stay-01\n   :location (c / city\n                :name (n3 / name\n                          :op1 \"Stockholm\")))", "(s / stay-01\n   :location (c / city\n                :name (n3 / name\n                          :op1 \"Stockholm\")))", "(a / advise-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kai\")))", "(a / advise-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Peter\")))", "(a / advise-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kai\"))\n   :ARG1 (t / they))", "(a / advise-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Peter\"))\n   :ARG1 (t / they)\n   :ARG1 t)", "(a / advise-01\n   :ARG1 (t / they)\n   :ARG2 (s / stay-01\n            :ARG1 t\n            :location (c / city\n                         :name (n3 / name\n                                   :op1 \"Stockholm\"))))", "(a / advise-01\n   :ARG1 (t / they)\n   :ARG2 (v / visit-01\n            :ARG0 t\n            :ARG1 (m / museum\n                     :name (n4 / name\n                               :op1 \"Vasa\"\n                               :op2 \"Museum\"))))", "(a / advise-01\n   :ARG0 (a2 / and\n             :op1 (p / person\n                     :name (n / name\n                              :op1 \"Kai\"))\n             :op2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Peter\"))))", "(a / advise-01\n   :ARG0 (a2 / and\n             :op1 (p / person\n                     :name (n / name\n                              :op1 \"Kai\"))\n             :op2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Peter\")))\n   :ARG1 (t / they))", "(a / advise-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kai\"))\n   :ARG1 (t / they)\n   :ARG2 (s / stay-01\n            :ARG1 t\n            :location (c / city\n                         :name (n3 / name\n                                   :op1 \"Stockholm\"))))", "(a / advise-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kai\"))\n   :ARG1 (t / they)\n   :ARG2 (s / stay-01\n            :ARG1 t\n            :location (c / city\n                         :name (n3 / name\n                                   :op1 \"Stockholm\"))))", "(a / advise-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Peter\"))\n   :ARG1 (t / they)\n   :ARG1 t\n   :ARG2 (s / stay-01\n            :ARG1 t\n            :location (c / city\n                         :name (n3 / name\n                                   :op1 \"Stockholm\"))))", "(a / advise-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kai\"))\n   :ARG1 (t / they)\n   :ARG2 (v / visit-01\n            :ARG0 t\n            :ARG1 (m / museum\n                     :name (n4 / name\n                               :op1 \"Vasa\"\n                               :op2 \"Museum\"))))", "(a / advise-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Peter\"))\n   :ARG1 (t / they)\n   :ARG1 t\n   :ARG2 (s / stay-01\n            :ARG1 t\n            :location (c / city\n                         :name (n3 / name\n                                   :op1 \"Stockholm\"))))", "(a / advise-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kai\"))\n   :ARG1 (t / they)\n   :ARG2 (v / visit-01\n            :ARG0 t\n            :ARG1 (m / museum\n                     :name (n4 / name\n                               :op1 \"Vasa\"\n                               :op2 \"Museum\"))))", "(a / advise-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Peter\"))\n   :ARG1 (t / they)\n   :ARG1 t\n   :ARG2 (v / visit-01\n            :ARG0 t\n            :ARG1 (m / museum\n                     :name (n4 / name\n                               :op1 \"Vasa\"\n                               :op2 \"Museum\"))))", "(a / advise-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Peter\"))\n   :ARG1 (t / they)\n   :ARG1 t\n   :ARG2 (v / visit-01\n            :ARG0 t\n            :ARG1 (m / museum\n                     :name (n4 / name\n                               :op1 \"Vasa\"\n                               :op2 \"Museum\"))))", "(a / advise-01\n   :ARG1 (t / they)\n   :ARG2 (a3 / and\n             :op1 (s / stay-01\n                     :ARG1 t\n                     :location (c / city\n                                  :name (n3 / name\n                                            :op1 \"Stockholm\")))\n             :op2 (v / visit-01\n                     :ARG0 t\n                     :ARG1 (m / museum\n                              :name (n4 / name\n                                        :op1 \"Vasa\"\n                                        :op2 \"Museum\")))))", "(a / advise-01\n   :ARG0 (a2 / and\n             :op1 (p / person\n                     :name (n / name\n                              :op1 \"Kai\"))\n             :op2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Peter\")))\n   :ARG1 (t / they)\n   :ARG2 (a3 / and\n             :op1 (s / stay-01\n                     :ARG1 t\n                     :location (c / city\n                                  :name (n3 / name\n                                            :op1 \"Stockholm\")))\n             :op2 (v / visit-01\n                     :ARG0 t\n                     :ARG1 (m / museum\n                              :name (n4 / name\n                                        :op1 \"Vasa\"\n                                        :op2 \"Museum\")))))", "(a / advise-01\n   :ARG0 (a2 / and\n             :op1 (p / person\n                     :name (n / name\n                              :op1 \"Kai\"))\n             :op2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Peter\")))\n   :ARG1 (t / they)\n   :ARG2 (a3 / and\n             :op1 (s / stay-01\n                     :ARG1 t\n                     :location (c / city\n                                  :name (n3 / name\n                                            :op1 \"Stockholm\")))\n             :op2 (v / visit-01\n                     :ARG0 t\n                     :ARG1 (m / museum\n                              :name (n4 / name\n                                        :op1 \"Vasa\"\n                                        :op2 \"Museum\")))))"], "smus": ["Going into January.", "Going into January.", "Molly is going.", "Margaret is going.", "Margaret is going to Sweden.", "Molly and Margaret are going.", "Margaret is going to Sweden in January.", "Margaret is going to Sweden in January.", "Molly and Margaret are going to Sweden.", "Stay in Stockholm.", "Stay in Stockholm.", "Kai would advise:", "Peter would advise.", "Kai would advise them.", "Peter would advise them.", "They would be advised to stay in Stockholm.", "They would be advised to visit the Vasa Museum.", "Kai and Peter would advise.", "Kai and Peter will advise them.", "Kai would advise them to stay in Stockholm.", "Kai would advise them to stay in Stockholm.", "Peter would advise them to stay in Stockholm.", "Kai would advise them to visit the Vasa Museum.", "Peter would advise them to stay in Stockholm.", "Kai would advise them to visit the Vasa Museum.", "Peter would advise them to visit the Vasa Museum.", "Peter would advise them to visit the Vasa Museum.", "They would advise to stay in Stockholm and visit the Vasa Museum.", "Kai and Peter would advise them to stay in Stockholm and visit the Vasa Museum.", "Kai and Peter would advise them to stay in Stockholm and visit the Vasa Museum."]}, {"instance_id": "samsum-338", "summary": "Blake will be waiting for Clara and Jenny on the platform a fabro-ficule.", "summary_trees": ["# ::snt Blake will be waiting for Clara and Jenny on the platform a fabro-ficule.\n(w / wait-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Blake\")\n            :mod (f / fantasy))\n      :ARG2 (a / and\n            :op1 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Clara\"))\n            :op2 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Jenny\")))\n      :location (p4 / platform))"], "tree": ["(w / wait-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Blake\")\n            :mod (f / fantasy))\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Clara\"))\n   :location (p4 / platform))", "(w / wait-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Blake\")\n            :mod (f / fantasy))\n   :ARG2 (a / and\n            :op1 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Clara\"))\n            :op2 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Jenny\"))))"], "smus": ["Fantasy Blake is waiting for Clara on the platform.", "The fantasy Blake is waiting for Clara and Jenny."]}, {"instance_id": "samsum-339", "summary": "Tom will help Mia buy a flight ticket as she doesn't have a credit card and doesn\u2019t want to use Peter's now. Tom needs the flight, company and your personal data.", "summary_trees": ["# ::snt Tom will help Mia buy a flight ticket as she doesn't have a credit card and doesn\u2019t want to use Peter's now.\n(h / help-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Tom\"))\n      :ARG1 (b / buy-01\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Mia\"))\n            :ARG1 (t / ticket\n                  :mod (f / fly-01)))\n      :ARG2 p2\n      :ARG1-of (c / cause-01\n            :ARG0 (a / and\n                  :op1 (h2 / have-03\n                        :polarity -\n                        :ARG0 p2\n                        :ARG1 (c2 / card\n                              :mod (c3 / credit-02)))\n                  :op2 (w / want-01\n                        :polarity -\n                        :ARG0 p2\n                        :ARG1 (u / use-01\n                              :ARG0 p2\n                              :ARG1 (c4 / card\n                                    :poss (p3 / person\n                                          :name (n3 / name\n                                                :op1 \"Peter\")))\n                              :time (n4 / now))))))", "# ::snt Tom needs the flight, company and your personal data.\n(n / need-01\n      :ARG0 (p / person\n            :name (n2 / name\n                  :op1 \"Tom\"))\n      :ARG1 (a / and\n            :op1 (f / fly-01)\n            :op2 (c / company)\n            :op3 (d / data\n                  :ARG1-of (p2 / personal-02\n                        :ARG2 (y / you)))))"], "tree": ["(h2 / have-03\n    :polarity -\n    :ARG0 (p2 / person :name (n2 / name :op1 \"Mia\"))\n    :ARG1 (c2 / card\n              :mod (c3 / credit-02)))", "(c / cause-01\n   :ARG0 (h2 / have-03\n             :polarity -\n             :ARG0 (p2 / person :name (n2 / name :op1 \"Mia\"))\n             :ARG1 (c2 / card\n                       :mod (c3 / credit-02))))", "(w / want-01\n   :polarity -\n   :ARG0 (p2 / person :name (n2 / name :op1 \"Mia\"))\n   :ARG1 (u / use-01\n            :ARG0 p2\n            :ARG1 (c4 / card\n                      :poss (p3 / person\n                                :name (n3 / name\n                                          :op1 \"Peter\")))\n            :time (n4 / now)))", "(c / cause-01\n   :ARG0 (w / want-01\n            :polarity -\n            :ARG0 (p2 / person :name (n2 / name :op1 \"Mia\"))\n            :ARG1 (u / use-01\n                     :ARG0 p2\n                     :ARG1 (c4 / card\n                               :poss (p3 / person\n                                         :name (n3 / name\n                                                   :op1 \"Peter\")))\n                     :time (n4 / now))))", "(c / cause-01\n   :ARG0 (a / and\n            :op1 (h2 / have-03\n                     :polarity -\n                     :ARG0 (p2 / person :name (n2 / name :op1 \"Mia\"))\n                     :ARG1 (c2 / card\n                               :mod (c3 / credit-02)))\n            :op2 (w / want-01\n                    :polarity -\n                    :ARG0 p2\n                    :ARG1 (u / use-01\n                             :ARG0 p2\n                             :ARG1 (c4 / card\n                                       :poss (p3 / person\n                                                 :name (n3 / name\n                                                           :op1 \"Peter\")))\n                             :time (n4 / now)))))", "(h / help-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tom\"))\n   :ARG1 (b / buy-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Mia\"))\n            :ARG1 (t / ticket\n                     :mod (f / fly-01)))\n   :ARG2 p2\n   :ARG1 (c / cause-01\n            :ARG0 (h2 / have-03\n                      :polarity -\n                      :ARG0 p2\n                      :ARG1 (c2 / card\n                                :mod (c3 / credit-02)))))", "(h / help-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tom\"))\n   :ARG1 (b / buy-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Mia\"))\n            :ARG1 (t / ticket\n                     :mod (f / fly-01)))\n   :ARG2 p2\n   :ARG1 (c / cause-01\n            :ARG0 (w / want-01\n                     :polarity -\n                     :ARG0 p2\n                     :ARG1 (u / use-01\n                              :ARG0 p2\n                              :ARG1 (c4 / card\n                                        :poss (p3 / person\n                                                  :name (n3 / name\n                                                            :op1 \"Peter\")))\n                              :time (n4 / now)))))", "(h / help-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tom\"))\n   :ARG1 (b / buy-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Mia\"))\n            :ARG1 (t / ticket\n                     :mod (f / fly-01)))\n   :ARG2 p2\n   :ARG1 (c / cause-01\n            :ARG0 (a / and\n                     :op1 (h2 / have-03\n                              :polarity -\n                              :ARG0 p2\n                              :ARG1 (c2 / card\n                                        :mod (c3 / credit-02)))\n                     :op2 (w / want-01\n                             :polarity -\n                             :ARG0 p2\n                             :ARG1 (u / use-01\n                                      :ARG0 p2\n                                      :ARG1 (c4 / card\n                                                :poss (p3 / person\n                                                          :name (n3 / name\n                                                                    :op1 \"Peter\")))\n                                      :time (n4 / now))))))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Tom\")))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Tom\"))\n   :ARG1 (f / fly-01))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Tom\"))\n   :ARG1 (c / company))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Tom\"))\n   :ARG1 (f / fly-01))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Tom\"))\n   :ARG1 (c / company))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Tom\"))\n   :ARG1 (d / data\n            :ARG1 (p2 / personal-02\n                      :ARG2 (y / you))))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Tom\"))\n   :ARG1 (d / data\n            :ARG1 (p2 / personal-02\n                      :ARG2 (y / you))))", "(n / need-01\n   :ARG1 (a / and\n            :op1 (f / fly-01)\n            :op2 (c / company)\n            :op3 (d / data\n                    :ARG1 (p2 / personal-02\n                              :ARG2 (y / you)))))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Tom\"))\n   :ARG1 (a / and\n            :op1 (f / fly-01)\n            :op2 (c / company)\n            :op3 (d / data\n                    :ARG1 (p2 / personal-02\n                              :ARG2 (y / you)))))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Tom\"))\n   :ARG1 (a / and\n            :op1 (f / fly-01)\n            :op2 (c / company)\n            :op3 (d / data\n                    :ARG1 (p2 / personal-02\n                              :ARG2 (y / you)))))"], "smus": ["Mia doesn't have a credit card.", "Cause Mia doesn't have a credit card.", "Mia doesn't want to use Peter's card now.", "Because Mia doesn't want to use Peter's card now.", "Cause Mia doesn't have a credit card and doesn't want to use Peter's card now.", "Tom will help Mia buy a flight ticket because she doesn't have a credit card.", "Tom will help Mia buy a flight ticket because she doesn't want to use Peter's card now.", "Tom will help Mia buy a flight ticket because she doesn't have a credit card and doesn't want to use Peter's card now.", "Tom needs.", "Tom needs a flight.", "Tom needs a company.", "Tom needs a flight.", "Tom needs a company.", "Tom needs your personal data.", "Tom needs your personal data.", "It needs to be a flight, a company and your personae.", "Tom needs the flight, company and data on you as a person.", "Tom needs the flight, company and data on you as a person."]}, {"instance_id": "samsum-340", "summary": "Janet, Nicole, Alison, Arlene, Leslie, Ros, Eric and Sue are all complaining about Donald Trump and his absence at the ceremony. ", "summary_trees": ["# ::snt Janet, Nicole, Alison, Arlene, Leslie, Ros, Eric and Sue are all complaining about Donald Trump and his absence at the ceremony.\n(c / complain-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Janet\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Nicole\"))\n            :op3 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Alison\"))\n            :op4 (p4 / person\n                  :name (n4 / name\n                        :op1 \"Arlene\"))\n            :op5 (p5 / person\n                  :name (n5 / name\n                        :op1 \"Leslie\"))\n            :op6 (p6 / person\n                  :name (n6 / name\n                        :op1 \"Ros\"))\n            :op7 (p7 / person\n                  :name (n7 / name\n                        :op1 \"Eric\"))\n            :op8 (p8 / person\n                  :name (n8 / name\n                        :op1 \"Sue\"))\n            :mod (a2 / all))\n      :ARG1 (a3 / and\n            :op1 (p9 / person\n                  :name (n9 / name\n                        :op1 \"Donald\"\n                        :op2 \"Trump\"))\n            :op2 (a4 / absent-01\n                  :ARG1 p9\n                  :ARG2 (c2 / ceremony))))"], "tree": ["(a4 / absent-01\n    :ARG1 (p9 / person :name (n9 / name :op1 \"Donald\" :op2 \"Trump\"))\n    :ARG2 (c2 / ceremony))", "(a4 / absent-01\n    :ARG1 (p9 / person :name (n9 / name :op1 \"Donald\" :op2 \"Trump\"))\n    :ARG2 (c2 / ceremony))", "(c / complain-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Janet\")))", "(c / complain-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Nicole\")))", "(c / complain-01\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Alison\")))", "(c / complain-01\n   :ARG0 (p4 / person\n             :name (n4 / name\n                       :op1 \"Arlene\")))", "(c / complain-01\n   :ARG0 (p5 / person\n             :name (n5 / name\n                       :op1 \"Leslie\")))", "(c / complain-01\n   :ARG0 (p6 / person\n             :name (n6 / name\n                       :op1 \"Ros\")))", "(c / complain-01\n   :ARG0 (p7 / person\n             :name (n7 / name\n                       :op1 \"Eric\")))", "(c / complain-01\n   :ARG0 (p8 / person\n             :name (n8 / name\n                       :op1 \"Sue\")\n             :mod (a2 / all)))", "(c / complain-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Janet\"))\n   :ARG1 (a4 / absent-01\n             :ARG1 (p9 / person :name (n9 / name :op1 \"Donald\" :op2 \"Trump\"))\n             :ARG2 (c2 / ceremony)))", "(c / complain-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Nicole\"))\n   :ARG1 (a4 / absent-01\n             :ARG1 (p9 / person :name (n9 / name :op1 \"Donald\" :op2 \"Trump\"))\n             :ARG2 (c2 / ceremony)))", "(c / complain-01\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Alison\"))\n   :ARG1 (a4 / absent-01\n             :ARG1 (p9 / person :name (n9 / name :op1 \"Donald\" :op2 \"Trump\"))\n             :ARG2 (c2 / ceremony)))", "(c / complain-01\n   :ARG0 (p4 / person\n             :name (n4 / name\n                       :op1 \"Arlene\"))\n   :ARG1 (a4 / absent-01\n             :ARG1 (p9 / person :name (n9 / name :op1 \"Donald\" :op2 \"Trump\"))\n             :ARG2 (c2 / ceremony)))", "(c / complain-01\n   :ARG0 (p5 / person\n             :name (n5 / name\n                       :op1 \"Leslie\"))\n   :ARG1 (a4 / absent-01\n             :ARG1 (p9 / person :name (n9 / name :op1 \"Donald\" :op2 \"Trump\"))\n             :ARG2 (c2 / ceremony)))", "(c / complain-01\n   :ARG0 (p6 / person\n             :name (n6 / name\n                       :op1 \"Ros\"))\n   :ARG1 (a4 / absent-01\n             :ARG1 (p9 / person :name (n9 / name :op1 \"Donald\" :op2 \"Trump\"))\n             :ARG2 (c2 / ceremony)))", "(c / complain-01\n   :ARG0 (p7 / person\n             :name (n7 / name\n                       :op1 \"Eric\"))\n   :ARG1 (a4 / absent-01\n             :ARG1 (p9 / person :name (n9 / name :op1 \"Donald\" :op2 \"Trump\"))\n             :ARG2 (c2 / ceremony)))", "(c / complain-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Janet\"))\n   :ARG1 (a4 / absent-01\n             :ARG1 (p9 / person :name (n9 / name :op1 \"Donald\" :op2 \"Trump\"))\n             :ARG2 (c2 / ceremony)))", "(c / complain-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Nicole\"))\n   :ARG1 (a4 / absent-01\n             :ARG1 (p9 / person :name (n9 / name :op1 \"Donald\" :op2 \"Trump\"))\n             :ARG2 (c2 / ceremony)))", "(c / complain-01\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Alison\"))\n   :ARG1 (a4 / absent-01\n             :ARG1 (p9 / person :name (n9 / name :op1 \"Donald\" :op2 \"Trump\"))\n             :ARG2 (c2 / ceremony)))", "(c / complain-01\n   :ARG0 (p4 / person\n             :name (n4 / name\n                       :op1 \"Arlene\"))\n   :ARG1 (a4 / absent-01\n             :ARG1 (p9 / person :name (n9 / name :op1 \"Donald\" :op2 \"Trump\"))\n             :ARG2 (c2 / ceremony)))", "(c / complain-01\n   :ARG0 (p5 / person\n             :name (n5 / name\n                       :op1 \"Leslie\"))\n   :ARG1 (a4 / absent-01\n             :ARG1 (p9 / person :name (n9 / name :op1 \"Donald\" :op2 \"Trump\"))\n             :ARG2 (c2 / ceremony)))", "(c / complain-01\n   :ARG0 (p6 / person\n             :name (n6 / name\n                       :op1 \"Ros\"))\n   :ARG1 (a4 / absent-01\n             :ARG1 (p9 / person :name (n9 / name :op1 \"Donald\" :op2 \"Trump\"))\n             :ARG2 (c2 / ceremony)))", "(c / complain-01\n   :ARG0 (p7 / person\n             :name (n7 / name\n                       :op1 \"Eric\"))\n   :ARG1 (a4 / absent-01\n             :ARG1 (p9 / person :name (n9 / name :op1 \"Donald\" :op2 \"Trump\"))\n             :ARG2 (c2 / ceremony)))", "(c / complain-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Janet\"))\n   :ARG1 (p9 / person\n             :name (n9 / name\n                       :op1 \"Donald\"\n                       :op2 \"Trump\")))", "(c / complain-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Nicole\"))\n   :ARG1 (p9 / person\n             :name (n9 / name\n                       :op1 \"Donald\"\n                       :op2 \"Trump\")))", "(c / complain-01\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Alison\"))\n   :ARG1 (p9 / person\n             :name (n9 / name\n                       :op1 \"Donald\"\n                       :op2 \"Trump\")))", "(c / complain-01\n   :ARG0 (p4 / person\n             :name (n4 / name\n                       :op1 \"Arlene\"))\n   :ARG1 (p9 / person\n             :name (n9 / name\n                       :op1 \"Donald\"\n                       :op2 \"Trump\")))", "(c / complain-01\n   :ARG0 (p5 / person\n             :name (n5 / name\n                       :op1 \"Leslie\"))\n   :ARG1 (p9 / person\n             :name (n9 / name\n                       :op1 \"Donald\"\n                       :op2 \"Trump\")))", "(c / complain-01\n   :ARG0 (p6 / person\n             :name (n6 / name\n                       :op1 \"Ros\"))\n   :ARG1 (p9 / person\n             :name (n9 / name\n                       :op1 \"Donald\"\n                       :op2 \"Trump\")))", "(c / complain-01\n   :ARG0 (p7 / person\n             :name (n7 / name\n                       :op1 \"Eric\"))\n   :ARG1 (p9 / person\n             :name (n9 / name\n                       :op1 \"Donald\"\n                       :op2 \"Trump\")))", "(c / complain-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Janet\"))\n   :ARG1 (p9 / person\n             :name (n9 / name\n                       :op1 \"Donald\"\n                       :op2 \"Trump\")))", "(c / complain-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Nicole\"))\n   :ARG1 (p9 / person\n             :name (n9 / name\n                       :op1 \"Donald\"\n                       :op2 \"Trump\")))", "(c / complain-01\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Alison\"))\n   :ARG1 (p9 / person\n             :name (n9 / name\n                       :op1 \"Donald\"\n                       :op2 \"Trump\")))", "(c / complain-01\n   :ARG0 (p4 / person\n             :name (n4 / name\n                       :op1 \"Arlene\"))\n   :ARG1 (p9 / person\n             :name (n9 / name\n                       :op1 \"Donald\"\n                       :op2 \"Trump\")))", "(c / complain-01\n   :ARG0 (p5 / person\n             :name (n5 / name\n                       :op1 \"Leslie\"))\n   :ARG1 (p9 / person\n             :name (n9 / name\n                       :op1 \"Donald\"\n                       :op2 \"Trump\")))", "(c / complain-01\n   :ARG0 (p6 / person\n             :name (n6 / name\n                       :op1 \"Ros\"))\n   :ARG1 (p9 / person\n             :name (n9 / name\n                       :op1 \"Donald\"\n                       :op2 \"Trump\")))", "(c / complain-01\n   :ARG0 (p7 / person\n             :name (n7 / name\n                       :op1 \"Eric\"))\n   :ARG1 (p9 / person\n             :name (n9 / name\n                       :op1 \"Donald\"\n                       :op2 \"Trump\")))", "(c / complain-01\n   :ARG0 (p8 / person\n             :name (n8 / name\n                       :op1 \"Sue\")\n             :mod (a2 / all))\n   :ARG1 (a3 / and)\n   :ARG1 (a4 / absent-01\n             :ARG1 (p9 / person :name (n9 / name :op1 \"Donald\" :op2 \"Trump\"))\n             :ARG2 (c2 / ceremony)))", "(c / complain-01\n   :ARG0 (p8 / person\n             :name (n8 / name\n                       :op1 \"Sue\")\n             :mod (a2 / all))\n   :ARG1 (a3 / and)\n   :ARG1 (a4 / absent-01\n             :ARG1 (p9 / person :name (n9 / name :op1 \"Donald\" :op2 \"Trump\"))\n             :ARG2 (c2 / ceremony)))", "(c / complain-01\n   :ARG0 (p8 / person\n             :name (n8 / name\n                       :op1 \"Sue\")\n             :mod (a2 / all))\n   :ARG1 (a3 / and)\n   :ARG1 (p9 / person\n             :name (n9 / name\n                       :op1 \"Donald\"\n                       :op2 \"Trump\")))", "(c / complain-01\n   :ARG0 (p8 / person\n             :name (n8 / name\n                       :op1 \"Sue\")\n             :mod (a2 / all))\n   :ARG1 (a3 / and)\n   :ARG1 (p9 / person\n             :name (n9 / name\n                       :op1 \"Donald\"\n                       :op2 \"Trump\")))", "(c / complain-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Janet\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Nicole\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Alison\"))\n            :op4 (p4 / person\n                     :name (n4 / name\n                               :op1 \"Arlene\"))\n            :op5 (p5 / person\n                     :name (n5 / name\n                               :op1 \"Leslie\"))\n            :op6 (p6 / person\n                     :name (n6 / name\n                               :op1 \"Ros\"))\n            :op7 (p7 / person\n                     :name (n7 / name\n                               :op1 \"Eric\"))\n            :op8 (p8 / person\n                     :name (n8 / name\n                               :op1 \"Sue\"))\n            :mod (a2 / all))\n   :ARG1 (a3 / and\n             :op1 (p9 / person\n                      :name (n9 / name\n                                :op1 \"Donald\"\n                                :op2 \"Trump\"))\n             :op2 (a4 / absent-01\n                      :ARG1 p9\n                      :ARG2 (c2 / ceremony))))", "(c / complain-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Janet\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Nicole\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Alison\"))\n            :op4 (p4 / person\n                     :name (n4 / name\n                               :op1 \"Arlene\"))\n            :op5 (p5 / person\n                     :name (n5 / name\n                               :op1 \"Leslie\"))\n            :op6 (p6 / person\n                     :name (n6 / name\n                               :op1 \"Ros\"))\n            :op7 (p7 / person\n                     :name (n7 / name\n                               :op1 \"Eric\"))\n            :op8 (p8 / person\n                     :name (n8 / name\n                               :op1 \"Sue\"))\n            :mod (a2 / all))\n   :ARG1 (a3 / and\n             :op1 (p9 / person\n                      :name (n9 / name\n                                :op1 \"Donald\"\n                                :op2 \"Trump\"))\n             :op2 (a4 / absent-01\n                      :ARG1 p9\n                      :ARG2 (c2 / ceremony))))"], "smus": ["Donald Trump was in absentia from the ceremony.", "Donald Trump was in absentia from the ceremony.", "Janet was complaining.", "Nicole is complaining.", "Allison was complaining.", "Arlene was complaining.", "Leslie was complaining.", "Ros was complaining.", "Eric was complaining.", "All of Sue's complaining.", "Janet was complaining about Donald Trump's absence from the ceremony.", "Nicole was complaining about Donald Trump's absence from the ceremony.", "Allison was complaining about Donald Trump's absence from the ceremony.", "Arlene was complaining about Donald Trump's absence from the ceremony.", "Leslie was complaining about Donald Trump's absence from the ceremony.", "Ross was complaining about Donald Trump's absence from the ceremony.", "Eric is complaining about Donald Trump's absence from the ceremony.", "Janet was complaining about Donald Trump's absence from the ceremony.", "Nicole was complaining about Donald Trump's absence from the ceremony.", "Allison was complaining about Donald Trump's absence from the ceremony.", "Arlene was complaining about Donald Trump's absence from the ceremony.", "Leslie was complaining about Donald Trump's absence from the ceremony.", "Ross was complaining about Donald Trump's absence from the ceremony.", "Eric is complaining about Donald Trump's absence from the ceremony.", "Janet complaining about Donald Trump.", "Nicole is complaining about Donald Trump.", "Allison is complaining about Donald Trump.", "Arlene is complaining about Donald Trump.", "Leslie is complaining about Donald Trump.", "Ross is complaining about Donald Trump.", "Eric is complaining about Donald Trump.", "Janet complaining about Donald Trump.", "Nicole is complaining about Donald Trump.", "Allison is complaining about Donald Trump.", "Arlene is complaining about Donald Trump.", "Leslie is complaining about Donald Trump.", "Ross is complaining about Donald Trump.", "Eric is complaining about Donald Trump.", "Sue all complaining about Donald Trump's absence from the ceremony.", "Sue all complaining about Donald Trump's absence from the ceremony.", "All Sue is complaining about Donald Trump.", "All Sue is complaining about Donald Trump.", "All of the people complaining about Donald Trump and his absence from the ceremony were Jane, Nicole, Alison, Arlene, Leslie, Ros, Eric and Sue.", "All of the people complaining about Donald Trump and his absence from the ceremony were Jane, Nicole, Alison, Arlene, Leslie, Ros, Eric and Sue."]}, {"instance_id": "samsum-341", "summary": "Petra is very sleepy at work today, Andy finds the day boring, and Ezgi is working. ", "summary_trees": ["# ::snt Petra is very sleepy at work today, Andy finds the day boring, and Ezgi is working.\n(a / and\n      :op1 (s / sleepy-05\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Petra\"))\n            :degree (v / very)\n            :location (w / work-01\n                  :ARG0 p)\n            :time (t / today))\n      :op2 (f / find-02\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Andy\"))\n            :ARG1 (b / bore-02\n                  :ARG0 (d / day)\n                  :ARG1 p2))\n      :op3 (w2 / work-01\n            :ARG0 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Ezgi\"))))"], "tree": ["(b / bore-02\n   :ARG0 (d / day)\n   :ARG1 (p2 / person :name (n2 / name :op1 \"Andy\")))", "(b / bore-02\n   :ARG0 (d / day)\n   :ARG1 (p2 / person :name (n2 / name :op1 \"Andy\")))", "(w2 / work-01\n    :ARG0 (p3 / person\n              :name (n3 / name\n                        :op1 \"Ezgi\")))", "(w2 / work-01\n    :ARG0 (p3 / person\n              :name (n3 / name\n                        :op1 \"Ezgi\")))", "(f / find-02\n   :ARG1 (b / bore-02\n            :ARG0 (d / day)\n            :ARG1 (p2 / person :name (n2 / name :op1 \"Andy\"))))", "(s / sleepy-05\n   :degree (v / very)\n   :location (w / work-01)\n   :time (t / today))", "(f / find-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Andy\"))\n   :ARG1 (b / bore-02\n            :ARG0 (d / day)\n            :ARG1 p2))", "(f / find-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Andy\"))\n   :ARG1 (b / bore-02\n            :ARG0 (d / day)\n            :ARG1 p2))", "(s / sleepy-05\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Petra\"))\n   :degree (v / very)\n   :location (w / work-01\n                :ARG0 p)\n   :time (t / today))"], "smus": ["Andy is bored of the day.", "Andy is bored of the day.", "ezgi is working.", "ezgi is working.", "Andy finds the day boring.", "Very sleepy at work today.", "Andy finds himself bored of the day.", "Andy finds himself bored of the day.", "Petra is very sleepy at work today."]}, {"instance_id": "samsum-342", "summary": "Trinny, Susannah and Linda will meet at 6 at the main entrance.", "summary_trees": ["# ::snt Trinny, Susannah and Linda will meet at 6 at the main entrance.\n(m / meet-03\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Trinny\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Susannah\"))\n            :op3 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Linda\")))\n      :time (d / date-entity\n            :time \"18:00\")\n      :location (e / entrance\n            :mod (m2 / main)))"], "tree": ["(m / meet-03\n   :location (e / entrance\n                :mod (m2 / main)))", "(m / meet-03\n   :location (e / entrance\n                :mod (m2 / main)))", "(m / meet-03\n   :location (e / entrance\n                :mod (m2 / main)))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Trinny\")))", "(m / meet-03\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Susannah\")))", "(m / meet-03\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Linda\")))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Trinny\"))\n   :location (e / entrance\n                :mod (m2 / main)))", "(m / meet-03\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Susannah\"))\n   :location (e / entrance\n                :mod (m2 / main)))", "(m / meet-03\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Linda\"))\n   :location (e / entrance\n                :mod (m2 / main))\n   :location e)", "(m / meet-03\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Trinny\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Susannah\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Linda\"))))", "(m / meet-03\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Trinny\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Susannah\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Linda\")))\n   :location (e / entrance\n                :mod (m2 / main)))"], "smus": ["Meet at main entrance.", "Meet at main entrance.", "Meet at main entrance.", "Trinny will meet.", "Susannah will meet.", "Linda will meet.", "Trinny will meet at the main entrance.", "Susannah will meet at the main entrance.", "Linda will meet at the main entrance there.", "Trinny, Susannah and Linda will meet.", "Trinny, Susannah and Linda will meet at the main entrance."]}, {"instance_id": "samsum-343", "summary": "Claire is ordering her wedding dress, adviced by Maria and Nicole.", "summary_trees": ["# ::snt Claire is ordering her wedding dress, adviced by Maria and Nicole.\n(o / order-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Claire\"))\n      :ARG1 (d / dress\n            :mod (w / wed-01\n                  :ARG1 p))\n      :ARG2-of (a / advise-01\n            :ARG0 (a2 / and\n                  :op1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Maria\"))\n                  :op2 (p3 / person\n                        :name (n3 / name\n                              :op1 \"Nicole\")))\n            :ARG1 p))"], "tree": ["(o / order-02\n   :ARG1 (d / dress\n            :mod (w / wed-01\n                    :ARG1 (p / person :name (n / name :op1 \"Claire\")))))", "(a / advise-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Maria\")))", "(a / advise-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Maria\")))", "(a / advise-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Maria\")))", "(a / advise-01\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Nicole\")))", "(a / advise-01\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Nicole\"))\n   :ARG1 (p / person :name (n / name :op1 \"Claire\")))", "(a / advise-01\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Nicole\"))\n   :ARG1 (p / person :name (n / name :op1 \"Claire\")))", "(o / order-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Claire\"))\n   :ARG1 (d / dress\n            :mod (w / wed-01\n                    :ARG1 p)))", "(a / advise-01\n   :ARG0 (a2 / and\n             :op1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Maria\"))\n             :op2 (p3 / person\n                      :name (n3 / name\n                                :op1 \"Nicole\"))))", "(a / advise-01\n   :ARG0 (a2 / and\n             :op1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Maria\"))\n             :op2 (p3 / person\n                      :name (n3 / name\n                                :op1 \"Nicole\")))\n   :ARG1 (p / person :name (n / name :op1 \"Claire\")))", "(a / advise-01\n   :ARG0 (a2 / and\n             :op1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Maria\"))\n             :op2 (p3 / person\n                      :name (n3 / name\n                                :op1 \"Nicole\")))\n   :ARG1 (p / person :name (n / name :op1 \"Claire\")))", "(o / order-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Claire\"))\n   :ARG1 (d / dress\n            :mod (w / wed-01\n                    :ARG1 p))\n   :ARG2 (a / advise-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Maria\"))))", "(o / order-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Claire\"))\n   :ARG1 (d / dress\n            :mod (w / wed-01\n                    :ARG1 p))\n   :ARG2 (a / advise-01\n            :ARG0 (p3 / person\n                      :name (n3 / name\n                                :op1 \"Nicole\"))\n            :ARG1 p))", "(o / order-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Claire\"))\n   :ARG1 (d / dress\n            :mod (w / wed-01\n                    :ARG1 p))\n   :ARG2 (a / advise-01\n            :ARG0 (a2 / and\n                      :op1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Maria\"))\n                      :op2 (p3 / person\n                               :name (n3 / name\n                                         :op1 \"Nicole\")))\n            :ARG1 p))"], "smus": ["Ordering Claire's wedding dress.", "Maria advised --", "Maria advised --", "Maria advised --", "Nicole advised --", "Claire was advised by Nicole.", "Claire was advised by Nicole.", "Claire was ordering her wedding dress.", "Maria and Nicole were advised.", "Maria and Nicole have advised Claire.", "Maria and Nicole have advised Claire.", "Claire had ordered her wedding dress as Maria had advised.", "Claire had ordered her wedding dress from Nicole, who had advised her.", "Claire had ordered her wedding dress from Maria and Nicole, who had advised her."]}, {"instance_id": "samsum-344", "summary": "Jose Ricky and Amanda are very enthusiastic about the new year as they will travel a lot during the summer of 2019.", "summary_trees": ["# ::snt Jose Ricky and Amanda are very enthusiastic about the new year as they will travel a lot during the summer of 2019.\n(e / enthusiastic-03\n      :ARG0 (y / year\n            :ARG1-of (n / new-01))\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n2 / name\n                        :op1 \"Jose\"\n                        :op2 \"Ricky\"))\n            :op2 (p2 / person\n                  :name (n3 / name\n                        :op1 \"Amanda\")))\n      :degree (v / very)\n      :ARG1-of (c / cause-01\n            :ARG0 (t / travel-01\n                  :ARG0 a\n                  :quant (l / lot)\n                  :time (d / date-entity\n                        :year 2019\n                        :season (s / summer)))))"], "tree": ["(t / travel-01\n   :quant (l / lot)\n   :time (d / date-entity\n            :year 2019\n            :season (s / summer)))", "(c / cause-01\n   :ARG0 (t / travel-01\n            :ARG0 (a / and)\n            :quant (l / lot)\n            :time (d / date-entity\n                     :year 2019\n                     :season (s / summer))))", "(e / enthusiastic-03\n   :ARG0 (y / year\n            :ARG1 (n / new-01))\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Jose\"\n                      :op2 \"Ricky\"))\n   :degree (v / very)\n   :ARG1 (c / cause-01\n            :ARG0 (t / travel-01\n                     :ARG0 p\n                     :quant (l / lot)\n                     :time (d / date-entity\n                              :year 2019\n                              :season (s / summer)))))", "(e / enthusiastic-03\n   :ARG0 (y / year\n            :ARG1 (n / new-01))\n   :ARG1 (p2 / person\n             :name (n3 / name\n                       :op1 \"Amanda\"))\n   :degree (v / very)\n   :degree v\n   :ARG1 (c / cause-01\n            :ARG0 (t / travel-01\n                     :ARG0 p2\n                     :quant (l / lot)\n                     :time (d / date-entity\n                              :year 2019\n                              :season (s / summer)))))", "(e / enthusiastic-03\n   :ARG0 (y / year\n            :ARG1 (n / new-01))\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n2 / name\n                              :op1 \"Jose\"\n                              :op2 \"Ricky\"))\n            :op2 (p2 / person\n                     :name (n3 / name\n                               :op1 \"Amanda\")))\n   :degree (v / very)\n   :ARG1 (c / cause-01\n            :ARG0 (t / travel-01\n                     :ARG0 a\n                     :quant (l / lot)\n                     :time (d / date-entity\n                              :year 2019\n                              :season (s / summer)))))"], "smus": ["A lot of travel in summer 2019.", "Because in summer 2019 there will be a lot of travel.", "Joe Ricky is very excited about the new year because he will travel a lot in the summer of 2019.", "Amanda is very very enthusiastic about the new year because she will travel a lot in the summer of 2019.", "Joe Ricky and Amanda are very enthusiastic about the new year because they will travel a lot in the summer of 2019."]}, {"instance_id": "samsum-345", "summary": "Katy and Ana invite Carlton to join them for a movie by Lola Arias on the making of the play he had seen. He will come to their place earlier on Saturday.", "summary_trees": ["# ::snt Katy and Ana invite Carlton to join them for a movie by Lola Arias on the making of the play he had seen.\n(ii / invite-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Katy\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Ana\")))\n      :ARG1 (p3 / person\n            :name (n3 / name\n                  :op1 \"Carlton\"))\n      :ARG2 (j / join-04\n            :ARG0 p3\n            :ARG1 a\n            :ARG2 (m / movie\n                  :ARG1-of (m2 / make-01\n                        :topic (p4 / play-11\n                              :ARG1-of (s / see-01\n                                    :ARG0 p3)))\n                  :source (p5 / person\n                        :name (n4 / name\n                              :op1 \"Lola\"\n                              :op2 \"Arias\")))))", "# ::snt He will come to their place earlier on Saturday.\n(c / come-01\n      :ARG1 (h / he)\n      :ARG4 (p / place\n            :poss (t / they))\n      :time (b / before)\n      :time (d / date-entity\n            :weekday (s / saturday)))"], "tree": ["(m2 / make-01\n    :topic (p4 / play-11\n               :ARG1 (s / see-01\n                        :ARG0 (p3 / person :name (n3 / name :op1 \"Carlton\")))))", "(ii / invite-01\n    :ARG0 (p2 / person\n              :name (n2 / name\n                        :op1 \"Ana\"))\n    :ARG1 (p3 / person\n              :name (n3 / name\n                        :op1 \"Carlton\"))\n    :ARG1 p3)", "(ii / invite-01\n    :ARG0 (a / and\n             :op1 (p / person\n                     :name (n / name\n                              :op1 \"Katy\"))\n             :op2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Ana\")))\n    :ARG1 (p3 / person\n              :name (n3 / name\n                        :op1 \"Carlton\")))", "(c / come-01\n   :time (b / before)\n   :time (d / date-entity\n            :weekday (s / saturday)))", "(c / come-01\n   :ARG1 (h / he)\n   :ARG4 (p / place\n            :poss (t / they))\n   :time (b / before)\n   :time (d / date-entity\n            :weekday (s / saturday)))"], "smus": ["Making play of Carlton being seen.", "Ana invites Carlton.", "Katy and Ana invite Carlton.", "Come earlier Saturday.", "He did come into the place of the y earlier Saturday."]}, {"instance_id": "samsum-346", "summary": "Daniel is going to Bologna today. He has to transfer there for a further flight. He will stay at the airport for two hours. Simone will visit Marco in December.", "summary_trees": ["# ::snt Daniel is going to Bologna today.\n(g / go-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Daniel\"))\n      :ARG4 (c / city\n            :name (n2 / name\n                  :op1 \"Bologna\"))\n      :time (t / today))", "# ::snt He has to transfer there for a further flight.\n(o / obligate-01\n      :ARG2 (t / transfer-01\n            :ARG1 (h / he)\n            :ARG2 (t2 / there)\n            :purpose (f / fly-01\n                  :ARG1 h\n                  :degree (f2 / further))))", "# ::snt He will stay at the airport for two hours.\n(s / stay-01\n      :ARG1 (h / he)\n      :location (a / airport)\n      :duration (t / temporal-quantity\n            :quant 2\n            :unit (h2 / hour)))", "# ::snt Simone will visit Marco in December.\n(v / visit-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Simone\"))\n      :ARG1 (c / country\n            :name (n2 / name\n                  :op1 \"Marco\"))\n      :time (d / date-entity\n            :month 12))"], "tree": ["(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Daniel\")))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Daniel\"))\n   :ARG4 (c / city\n            :name (n2 / name\n                      :op1 \"Bologna\")))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Daniel\"))\n   :ARG4 (c / city\n            :name (n2 / name\n                      :op1 \"Bologna\"))\n   :time (t / today))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Daniel\"))\n   :ARG4 (c / city\n            :name (n2 / name\n                      :op1 \"Bologna\"))\n   :time (t / today))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Daniel\")))", "(t / transfer-01\n   :ARG1 (h / he)\n   :ARG2 (t2 / there))", "(o / obligate-01\n   :ARG2 (t / transfer-01\n            :ARG1 (h / he)\n            :ARG2 (t2 / there)\n            :purpose (f / fly-01\n                        :ARG1 h\n                        :degree (f2 / further))))", "(o / obligate-01\n   :ARG2 (t / transfer-01\n            :ARG1 (h / he)\n            :ARG2 (t2 / there)\n            :purpose (f / fly-01\n                        :ARG1 h\n                        :degree (f2 / further))))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Daniel\")))", "(s / stay-01\n   :ARG1 (h / he)\n   :location (a / airport))", "(s / stay-01\n   :duration (t / temporal-quantity\n                :quant 2\n                :unit (h2 / hour)))", "(s / stay-01\n   :ARG1 (h / he)\n   :duration (t / temporal-quantity\n                :quant 2\n                :unit (h2 / hour)))", "(s / stay-01\n   :location (a / airport)\n   :duration (t / temporal-quantity\n                :quant 2\n                :unit (h2 / hour)))", "(s / stay-01\n   :location (a / airport)\n   :duration (t / temporal-quantity\n                :quant 2\n                :unit (h2 / hour)))", "(s / stay-01\n   :ARG1 (h / he)\n   :location (a / airport)\n   :duration (t / temporal-quantity\n                :quant 2\n                :unit (h2 / hour)))", "(s / stay-01\n   :ARG1 (h / he)\n   :location (a / airport)\n   :duration (t / temporal-quantity\n                :quant 2\n                :unit (h2 / hour)))", "(v / visit-01\n   :time (d / date-entity\n            :month 12))", "(v / visit-01\n   :time (d / date-entity\n            :month 12))", "(v / visit-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Simone\")))", "(v / visit-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Simone\"))\n   :ARG1 (c / country\n            :name (n2 / name\n                      :op1 \"Marco\")))", "(v / visit-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Simone\"))\n   :ARG1 (c / country\n            :name (n2 / name\n                      :op1 \"Marco\"))\n   :time (d / date-entity\n            :month 12))", "(v / visit-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Simone\"))\n   :ARG1 (c / country\n            :name (n2 / name\n                      :op1 \"Marco\"))\n   :time (d / date-entity\n            :month 12))"], "smus": ["Daniel is going.", "Daniel is going to Bologna.", "Daniel is going to Bologna today.", "Daniel is going to Bologna today.", "Daniel is going.", "Transfer him to the.", "He had to transfer to the flier to be furthed.", "He had to transfer to the flier to be furthed.", "Daniel is going.", "He will stay at the airport.", "Stay for two hours.", "He'll stay for two hours.", "Stay at the airport for 2 hours.", "Stay at the airport for 2 hours.", "He will stay at the airport for two hours.", "He will stay at the airport for two hours.", "Visit in December.", "Visit in December.", "Simone will visit.", "Simone will visit Marco.", "Simone will visit Marco in December.", "Simone will visit Marco in December."]}, {"instance_id": "samsum-347", "summary": "Chae-yeong and Arthur inform Mariana that the readings for the next session of Stephen's seminar weren't available in the print shop on Monday. Rita decides to go and chcek if the situation's changed tomorrow and she'll let everyone know.", "summary_trees": ["# ::snt Chae-yeong and Arthur inform Mariana that the readings for the next session of Stephen's seminar weren't available in the print shop on Monday.\n(ii / inform-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Chae-yeong\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Arthur\")))\n      :ARG1 (p3 / person\n            :name (n3 / name\n                  :op1 \"Mariana\"))\n      :ARG2 (a2 / available-02\n            :polarity -\n            :ARG2 (t / thing\n                  :ARG1-of (r / read-01\n                        :subevent-of (s / session\n                              :mod (n4 / next)\n                              :subevent-of (s2 / seminar\n                                    :poss (p4 / person\n                                          :name (n5 / name\n                                                :op1 \"Stephen\"))))))\n            :location (s3 / shop\n                  :mod (p5 / print-01))\n            :time (d / date-entity\n                  :weekday (m / monday))))", "# ::snt Rita decides to go and chcek if the situation's changed tomorrow and she'll let everyone know.\n(a / and\n      :op1 (d / decide-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Rita\"))\n            :ARG1 (a2 / and\n                  :op1 (g / go-02\n                        :ARG0 p)\n                  :op2 (c / come-01\n                        :ARG1 p)\n                  :condition (c2 / change-01\n                        :ARG1 (s / situation)\n                        :time (t / tomorrow))))\n      :op2 (l / let-know-07\n            :ARG0 p\n            :ARG1 (e / everyone)))"], "tree": ["(ii / inform-01\n    :ARG0 (p2 / person\n              :name (n2 / name\n                        :op1 \"Arthur\"))\n    :ARG1 (p3 / person\n              :name (n3 / name\n                        :op1 \"Mariana\"))\n    :ARG1 p3)", "(ii / inform-01\n    :ARG0 (a / and\n             :op1 (p / person\n                     :name (n / name\n                              :op1 \"Chae-yeong\"))\n             :op2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Arthur\"))))", "(ii / inform-01\n    :ARG0 (p2 / person\n              :name (n2 / name\n                        :op1 \"Arthur\"))\n    :ARG1 (p3 / person\n              :name (n3 / name\n                        :op1 \"Mariana\"))\n    :ARG1 p3\n    :ARG2 (a2 / available-02\n              :polarity -\n              :ARG2 (t / thing)))", "(ii / inform-01\n    :ARG0 (p2 / person\n              :name (n2 / name\n                        :op1 \"Arthur\"))\n    :ARG1 (p3 / person\n              :name (n3 / name\n                        :op1 \"Mariana\"))\n    :ARG1 p3\n    :ARG2 (a2 / available-02\n              :polarity -\n              :ARG2 (t / thing)))", "(l / let-know-07\n   :ARG0 (p / person :name (n / name :op1 \"Rita\"))\n   :ARG1 (e / everyone))", "(d / decide-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rita\"))\n   :ARG1 (g / go-02\n            :ARG0 p))", "(d / decide-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rita\"))\n   :ARG1 (c / come-01\n            :ARG1 p\n            :condition (c2 / change-01\n                           :ARG1 (s / situation)\n                           :time (t / tomorrow))))", "(d / decide-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rita\"))\n   :ARG1 (a2 / and\n             :op1 (g / go-02\n                     :ARG0 p)\n             :op2 (c / come-01\n                     :ARG1 p)\n             :condition (c2 / change-01\n                            :ARG1 (s / situation)\n                            :time (t / tomorrow))))"], "smus": ["Arthur informs Marianne:", "Chae- and Arthur inform.", "Arthur informs Marianne that there is no available.", "Arthur informs Marianne that there is no available.", "Rita let everyone know.", "Rita decides to go.", "Rita decides she will come if the situation changes tomorrow.", "Rita decides to go and come if the situation changes tomorrow."]}, {"instance_id": "samsum-348", "summary": "There has been an accident on Circle Drive, neat Circle Mall. There are no fatalities.", "summary_trees": ["# ::snt There has been an accident on Circle Drive, neat Circle Mall.\n(a / accident\n      :location (r / road\n            :name (n / name\n                  :op1 \"Circle\"\n                  :op2 \"Drive\")\n            :mod (n2 / neat\n                  :op1 (f / facility\n                        :name (n3 / name\n                              :op1 \"Circle\"\n                              :op2 \"Mall\")))))", "# ::snt There are no fatalities.\n(f / fatality\n      :polarity -)"], "tree": ["(a / accident\n   :location (r / road\n                :name (n / name\n                         :op1 \"Circle\"\n                         :op2 \"Drive\")\n                :mod (n2 / neat\n                         :op1 (f / facility\n                                 :name (n3 / name\n                                           :op1 \"Circle\"\n                                           :op2 \"Mall\")))))", "(f / fatality\n   :polarity -)"], "smus": ["The accident occurred on Circle Drive neatly at the Circle Mall.", "No fatalities."]}, {"instance_id": "samsum-349", "summary": "Ania, Kasia, Zuzia and Jan want to go to the church tomorrow. Ania and Zuzia do not find it appropriate to go to the church with a boy.", "summary_trees": ["# ::snt Ania, Kasia, Zuzia and Jan want to go to the church tomorrow.\n(w / want-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Ania\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Kasia\"))\n            :op3 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Zuzia\"))\n            :op4 (p4 / person\n                  :name (n4 / name\n                        :op1 \"Jan\")))\n      :ARG1 (g / go-02\n            :ARG0 a\n            :ARG4 (c / church)\n            :time (t / tomorrow)))", "# ::snt Ania and Zuzia do not find it appropriate to go to the church with a boy.\n(f / find-02\n      :polarity -\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Ania\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Zuzia\")))\n      :ARG1 (a2 / appropriate-02\n            :ARG1 (g / go-02\n                  :ARG0 a\n                  :ARG4 (c / church)\n                  :accompanier (b / boy))))"], "tree": ["(g / go-02\n   :ARG0 (a / and)\n   :ARG4 (c / church))", "(g / go-02\n   :ARG0 (a / and)\n   :ARG4 (c / church)\n   :time (t / tomorrow))", "(g / go-02\n   :ARG0 (a / and)\n   :ARG4 (c / church)\n   :time (t / tomorrow))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ania\"))\n   :ARG1 (g / go-02\n            :ARG0 p\n            :ARG4 (c / church)\n            :time (t / tomorrow)))", "(w / want-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Kasia\"))\n   :ARG1 (g / go-02\n            :ARG0 p2\n            :ARG4 (c / church)\n            :time (t / tomorrow)))", "(w / want-01\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Zuzia\"))\n   :ARG1 (g / go-02\n            :ARG0 p3\n            :ARG4 (c / church)\n            :time (t / tomorrow)))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ania\"))\n   :ARG1 (g / go-02\n            :ARG0 p\n            :ARG4 (c / church)\n            :time (t / tomorrow)))", "(w / want-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Kasia\"))\n   :ARG1 (g / go-02\n            :ARG0 p2\n            :ARG4 (c / church)\n            :time (t / tomorrow)))", "(w / want-01\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Zuzia\"))\n   :ARG1 (g / go-02\n            :ARG0 p3\n            :ARG4 (c / church)\n            :time (t / tomorrow)))", "(w / want-01\n   :ARG0 (p4 / person\n             :name (n4 / name\n                       :op1 \"Jan\"))\n   :ARG1 (g / go-02\n            :ARG0 p4\n            :ARG4 (c / church)\n            :time (t / tomorrow))\n   :ARG1 g)", "(w / want-01\n   :ARG0 (p4 / person\n             :name (n4 / name\n                       :op1 \"Jan\"))\n   :ARG1 (g / go-02\n            :ARG0 p4\n            :ARG4 (c / church)\n            :time (t / tomorrow))\n   :ARG1 g)", "(w / want-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Ania\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Kasia\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Zuzia\"))\n            :op4 (p4 / person\n                     :name (n4 / name\n                               :op1 \"Jan\")))\n   :ARG1 (g / go-02\n            :ARG0 a\n            :ARG4 (c / church)\n            :time (t / tomorrow)))", "(w / want-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Ania\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Kasia\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Zuzia\"))\n            :op4 (p4 / person\n                     :name (n4 / name\n                               :op1 \"Jan\")))\n   :ARG1 (g / go-02\n            :ARG0 a\n            :ARG4 (c / church)\n            :time (t / tomorrow)))", "(f / find-02\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ania\"))\n   :ARG1 (a2 / appropriate-02\n             :ARG1 (g / go-02\n                      :ARG0 p\n                      :ARG4 (c / church)\n                      :accompanier (b / boy))))", "(f / find-02\n   :polarity -\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Zuzia\"))\n   :ARG1 (a2 / appropriate-02\n             :ARG1 (g / go-02\n                      :ARG0 p2\n                      :ARG4 (c / church)\n                      :accompanier (b / boy)))\n   :ARG1 a2)", "(f / find-02\n   :polarity -\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Ania\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Zuzia\")))\n   :ARG1 (a2 / appropriate-02\n             :ARG1 (g / go-02\n                      :ARG0 a\n                      :ARG4 (c / church)\n                      :accompanier (b / boy))))"], "smus": ["and go to church.", "and go to church tomorrow.", "and go to church tomorrow.", "Ana wants to go to church tomorrow.", "Kasai wants to go to church tomorrow.", "Zuzia want's to go to church tomorrow.", "Ana wants to go to church tomorrow.", "Kasai wants to go to church tomorrow.", "Zuzia want's to go to church tomorrow.", "Jan wants to go to church tomorrow.", "Jan wants to go to church tomorrow.", "Ana, Kasa, Zuzia and Jan want to go to church tomorrow.", "Ana, Kasa, Zuzia and Jan want to go to church tomorrow.", "Aria did not find it appropriate to go to church with the boy.", "Zuzia did not find it appropriate to go to church with the boy.", "Ana and Zuzia did not find it appropriate to go to church with the boy."]}, {"instance_id": "samsum-350", "summary": "Hugh has a toothache and needs to go to the dentist. Andy and Wade recommend him dentists at ProDent. Hugh will call ProDent today.", "summary_trees": ["# ::snt Hugh has a toothache and needs to go to the dentist.\n(a / and\n      :op1 (a2 / ache-01\n            :ARG0 (t / tooth)\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Hugh\")))\n      :op2 (n2 / need-01\n            :ARG0 p\n            :ARG1 (g / go-02\n                  :ARG0 p\n                  :ARG4 (d / dentist))))", "# ::snt Andy and Wade recommend him dentists at ProDent.\n(r / recommend-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Andy\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Wade\")))\n      :ARG1 (p3 / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (d / dentist))\n            :location (c / company\n                  :name (n3 / name\n                        :op1 \"ProDent\")))\n      :ARG2 (h2 / he))", "# ::snt Hugh will call ProDent today.\n(c / call-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Hugh\"))\n      :ARG1 (c2 / company\n            :name (n2 / name\n                  :op1 \"ProDent\"))\n      :time (t / today))"], "tree": ["(n2 / need-01\n    :ARG1 (g / go-02\n             :ARG0 (p / person :name (n / name :op1 \"Hugh\"))\n             :ARG4 (d / dentist)))", "(n2 / need-01\n    :ARG0 (p / person :name (n / name :op1 \"Hugh\"))\n    :ARG1 (g / go-02\n             :ARG0 p\n             :ARG4 (d / dentist)))", "(n2 / need-01\n    :ARG0 (p / person :name (n / name :op1 \"Hugh\"))\n    :ARG1 (g / go-02\n             :ARG0 p\n             :ARG4 (d / dentist)))", "(r / recommend-01\n   :ARG1 (p3 / person\n             :ARG0 (h / have-org-role-91\n                      :ARG2 (d / dentist))\n             :location (c / company\n                          :name (n3 / name\n                                    :op1 \"ProDent\"))))", "(r / recommend-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Andy\"))\n   :ARG1 (p3 / person\n             :ARG0 (h / have-org-role-91\n                      :ARG2 (d / dentist))\n             :location (c / company\n                          :name (n3 / name\n                                    :op1 \"ProDent\")))\n   :ARG2 (h2 / he))", "(r / recommend-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Wade\"))\n   :ARG1 (p3 / person\n             :ARG0 (h / have-org-role-91\n                      :ARG2 (d / dentist))\n             :location (c / company\n                          :name (n3 / name\n                                    :op1 \"ProDent\")))\n   :ARG1 p3\n   :ARG2 (h2 / he))", "(r / recommend-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Andy\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Wade\")))\n   :ARG1 (p3 / person\n             :ARG0 (h / have-org-role-91\n                      :ARG2 (d / dentist))\n             :location (c / company\n                          :name (n3 / name\n                                    :op1 \"ProDent\")))\n   :ARG2 (h2 / he))", "(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hugh\")))", "(c / call-02\n   :ARG1 (c2 / company\n             :name (n2 / name\n                       :op1 \"ProDent\")))", "(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hugh\"))\n   :ARG1 (c2 / company\n             :name (n2 / name\n                       :op1 \"ProDent\")))", "(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hugh\"))\n   :ARG1 (c2 / company\n             :name (n2 / name\n                       :op1 \"ProDent\"))\n   :time (t / today))", "(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hugh\"))\n   :ARG1 (c2 / company\n             :name (n2 / name\n                       :op1 \"ProDent\"))\n   :time (t / today))"], "smus": ["Hugh needs to go to the dentist.", "Hugh needs to go to the dentist.", "Hugh needs to go to the dentist.", "dentists should be at ProDent.", "Andy recommends he have a dentist at ProDent.", "Wade recommends that he have dentists at ProDent.", "Andy and Wade recommend him to the dentists at ProDent.", "Hugh would call.", "Call ProDent.", "Hugh would call ProDent.", "Today, Hugh will call ProDent.", "Today, Hugh will call ProDent."]}, {"instance_id": "samsum-351", "summary": "Connor bought his halloween costumes at Value Village where Jane plans to get her and her sister's costume.", "summary_trees": ["# ::snt Connor bought his halloween costumes at Value Village where Jane plans to get her and her sister's costume.\n(b / buy-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Connor\"))\n      :ARG1 (c / costume\n            :poss p\n            :mod (f / festival\n                  :name (n2 / name\n                        :op1 \"Halloween\")))\n      :ARG4 (c2 / company\n            :name (n3 / name\n                  :op1 \"Value\"\n                  :op2 \"Village\")\n            :location-of (p2 / plan-01\n                  :ARG0 (p3 / person\n                        :name (n4 / name\n                              :op1 \"Jane\"))\n                  :ARG1 (g / get-01\n                        :ARG0 p3\n                        :ARG1 (c3 / costume\n                              :poss (a / and\n                                    :op1 p\n                                    :op2 (p4 / person\n                                          :ARG0-of (h / have-rel-role-91\n                                                :ARG1 p3\n                                                :ARG2 (s / sister)))))))))"], "tree": ["(h / have-rel-role-91\n   :ARG1 (p3 / person :name (n4 / name :op1 \"Jane\"))\n   :ARG2 (s / sister))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Connor\")))", "(p2 / plan-01\n    :ARG1 (g / get-01\n             :ARG0 (p3 / person :name (n4 / name :op1 \"Jane\"))\n             :ARG1 (c3 / costume\n                       :poss (p / person :name (n / name :op1 \"Connor\")))))", "(b / buy-01\n   :ARG1 (c / costume\n            :poss (p / person :name (n / name :op1 \"Connor\"))\n            :mod (f / festival\n                    :name (n2 / name\n                              :op1 \"Halloween\"))))", "(p2 / plan-01\n    :ARG0 (p3 / person\n              :name (n4 / name\n                        :op1 \"Jane\"))\n    :ARG1 (g / get-01\n             :ARG0 p3\n             :ARG1 (c3 / costume\n                       :poss (p / person :name (n / name :op1 \"Connor\")))))", "(p2 / plan-01\n    :ARG0 (p3 / person\n              :name (n4 / name\n                        :op1 \"Jane\"))\n    :ARG1 (g / get-01\n             :ARG0 p3\n             :ARG1 (c3 / costume\n                       :poss (p / person :name (n / name :op1 \"Connor\")))))", "(p2 / plan-01\n    :ARG1 (g / get-01\n             :ARG0 (p3 / person :name (n4 / name :op1 \"Jane\"))\n             :ARG1 (c3 / costume\n                       :poss (p4 / person\n                                 :ARG0 (h / have-rel-role-91\n                                          :ARG1 p3\n                                          :ARG2 (s / sister))))))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Connor\"))\n   :ARG1 (c / costume\n            :poss p\n            :mod (f / festival\n                    :name (n2 / name\n                              :op1 \"Halloween\"))))", "(p2 / plan-01\n    :ARG0 (p3 / person\n              :name (n4 / name\n                        :op1 \"Jane\"))\n    :ARG1 (g / get-01\n             :ARG0 p3\n             :ARG1 (c3 / costume\n                       :poss (p4 / person\n                                 :ARG0 (h / have-rel-role-91\n                                          :ARG1 p3\n                                          :ARG2 (s / sister))))))", "(p2 / plan-01\n    :ARG0 (p3 / person\n              :name (n4 / name\n                        :op1 \"Jane\"))\n    :ARG1 (g / get-01\n             :ARG0 p3\n             :ARG1 (c3 / costume\n                       :poss (p4 / person\n                                 :ARG0 (h / have-rel-role-91\n                                          :ARG1 p3\n                                          :ARG2 (s / sister))))))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Connor\"))\n   :ARG1 (c / costume\n            :poss p\n            :mod (f / festival\n                    :name (n2 / name\n                              :op1 \"Halloween\")))\n   :ARG4 (c2 / company\n             :name (n3 / name\n                       :op1 \"Value\"\n                       :op2 \"Village\")\n             :location (p2 / plan-01\n                           :ARG0 (p3 / person\n                                     :name (n4 / name\n                                               :op1 \"Jane\"))\n                           :ARG1 (g / get-01\n                                    :ARG0 p3\n                                    :ARG1 (c3 / costume\n                                              :poss p)))))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Connor\"))\n   :ARG1 (c / costume\n            :poss p\n            :mod (f / festival\n                    :name (n2 / name\n                              :op1 \"Halloween\")))\n   :ARG4 (c2 / company\n             :name (n3 / name\n                       :op1 \"Value\"\n                       :op2 \"Village\")\n             :location (p2 / plan-01\n                           :ARG0 (p3 / person\n                                     :name (n4 / name\n                                               :op1 \"Jane\"))\n                           :ARG1 (g / get-01\n                                    :ARG0 p3\n                                    :ARG1 (c3 / costume\n                                              :poss (p4 / person\n                                                        :ARG0 (h / have-rel-role-91\n                                                                 :ARG1 p3\n                                                                 :ARG2 (s / sister))))))))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Connor\"))\n   :ARG1 (c / costume\n            :poss p\n            :mod (f / festival\n                    :name (n2 / name\n                              :op1 \"Halloween\")))\n   :ARG4 (c2 / company\n             :name (n3 / name\n                       :op1 \"Value\"\n                       :op2 \"Village\")\n             :location (p2 / plan-01\n                           :ARG0 (p3 / person\n                                     :name (n4 / name\n                                               :op1 \"Jane\"))\n                           :ARG1 (g / get-01\n                                    :ARG0 p3\n                                    :ARG1 (c3 / costume\n                                              :poss (a / and\n                                                       :op1 p\n                                                       :op2 (p4 / person\n                                                                :ARG0 (h / have-rel-role-91\n                                                                         :ARG1 p3\n                                                                         :ARG2 (s / sister)))))))))"], "smus": ["Jane's sister", "Connor bought.", "Jane plans to get Connor's costume.", "Connor bought a halloween costume.", "Jane plans to get Connor's costume.", "Jane plans to get Connor's costume.", "Jane plans to get her sister's costume.", "Connor bought his halloween costume.", "Jane plans to get her sister's costume.", "Jane plans to get her sister's costume.", "Connor bought his halloween costume from Value Village, where Jane plans to get her costume.", "Connor bought his halloween costume from Value Village, where Jane plans to get his sister's costume.", "Connor bought his halloween costume from Value Village, where Jane plans to get his sister's costume."]}, {"instance_id": "samsum-352", "summary": "Elena is wearing the red jacket and Jeffrey can't see her nor Tom.", "summary_trees": ["# ::snt Elena is wearing the red jacket and Jeffrey can't see her nor Tom.\n(a / and\n      :op1 (w / wear-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Elena\"))\n            :ARG1 (j / jacket\n                  :ARG1-of (r / red-02)))\n      :op2 (p2 / possible-01\n            :polarity -\n            :ARG1 (s / see-01\n                  :ARG0 (p3 / person\n                        :name (n2 / name\n                              :op1 \"Jeffrey\"))\n                  :ARG1 (a2 / and\n                        :op1 p\n                        :op2 (p4 / person\n                              :name (n3 / name\n                                    :op1 \"Tom\"))))))"], "tree": ["(w / wear-01\n   :ARG1 (j / jacket\n            :ARG1 (r / red-02)))", "(w / wear-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Elena\"))\n   :ARG1 (j / jacket\n            :ARG1 (r / red-02)))", "(w / wear-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Elena\"))\n   :ARG1 (j / jacket\n            :ARG1 (r / red-02)))", "(p2 / possible-01\n    :polarity -\n    :ARG1 (s / see-01\n             :ARG0 (p3 / person\n                       :name (n2 / name\n                                 :op1 \"Jeffrey\"))\n             :ARG1 (p / person :name (n / name :op1 \"Elena\"))))", "(p2 / possible-01\n    :polarity -\n    :ARG1 (s / see-01\n             :ARG0 (p3 / person\n                       :name (n2 / name\n                                 :op1 \"Jeffrey\"))\n             :ARG1 (p4 / person\n                       :name (n3 / name\n                                 :op1 \"Tom\"))))", "(p2 / possible-01\n    :polarity -\n    :ARG1 (s / see-01\n             :ARG0 (p3 / person\n                       :name (n2 / name\n                                 :op1 \"Jeffrey\"))\n             :ARG1 (a2 / and\n                       :op1 (p / person :name (n / name :op1 \"Elena\"))\n                       :op2 (p4 / person\n                                :name (n3 / name\n                                          :op1 \"Tom\")))))"], "smus": ["wearing a red jacket", "Elena was wearing a red jacket.", "Elena was wearing a red jacket.", "Jeffrey can't see Elena.", "Jeffrey can't see Tom.", "Jeffrey couldn't see Elena and Tom."]}, {"instance_id": "samsum-353", "summary": "Todays results show that Matt and Oliver got into Stanford University, Peter did not. ", "summary_trees": ["# ::snt Todays results show that Matt and Oliver got into Stanford University, Peter did not.\n(s / show-01\n      :ARG0 (t / thing\n            :ARG2-of (r / result-01)\n            :time (t2 / today))\n      :ARG1 (c / contrast-01\n            :ARG1 (g / get-05\n                  :ARG1 (a / and\n                        :op1 (p / person\n                              :name (n / name\n                                    :op1 \"Matt\"))\n                        :op2 (p2 / person\n                              :name (n2 / name\n                                    :op1 \"Oliver\")))\n                  :ARG2 (u / university\n                        :name (n3 / name\n                              :op1 \"Stanford\"\n                              :op2 \"University\")))\n            :ARG2 (g2 / get-05\n                  :polarity -\n                  :ARG1 (p3 / person\n                        :name (n4 / name\n                              :op1 \"Peter\"))\n                  :ARG2 u)))"], "tree": ["(g2 / get-05\n    :polarity -\n    :ARG1 (p3 / person\n              :name (n4 / name\n                        :op1 \"Peter\"))\n    :ARG2 (u / university :name (n3 / name :op1 \"Stanford\" :op2 \"University\")))", "(g / get-05\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Matt\"))\n   :ARG2 (u / university\n            :name (n3 / name\n                      :op1 \"Stanford\"\n                      :op2 \"University\")))", "(g / get-05\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Matt\"))\n   :ARG2 (u / university\n            :name (n3 / name\n                      :op1 \"Stanford\"\n                      :op2 \"University\")))", "(g / get-05\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Oliver\"))\n   :ARG2 (u / university\n            :name (n3 / name\n                      :op1 \"Stanford\"\n                      :op2 \"University\"))\n   :ARG2 u)", "(g / get-05\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Oliver\"))\n   :ARG2 (u / university\n            :name (n3 / name\n                      :op1 \"Stanford\"\n                      :op2 \"University\"))\n   :ARG2 u)", "(g / get-05\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Matt\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Oliver\")))\n   :ARG2 (u / university\n            :name (n3 / name\n                      :op1 \"Stanford\"\n                      :op2 \"University\")))", "(g / get-05\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Matt\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Oliver\")))\n   :ARG2 (u / university\n            :name (n3 / name\n                      :op1 \"Stanford\"\n                      :op2 \"University\")))", "(c / contrast-01\n   :ARG1 (g / get-05\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Matt\"))\n            :ARG2 (u / university\n                     :name (n3 / name\n                               :op1 \"Stanford\"\n                               :op2 \"University\")))\n   :ARG2 (g2 / get-05\n             :polarity -\n             :ARG1 (p3 / person\n                       :name (n4 / name\n                                 :op1 \"Peter\"))\n             :ARG2 u))", "(c / contrast-01\n   :ARG1 (g / get-05\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Matt\"))\n            :ARG2 (u / university\n                     :name (n3 / name\n                               :op1 \"Stanford\"\n                               :op2 \"University\")))\n   :ARG2 (g2 / get-05\n             :polarity -\n             :ARG1 (p3 / person\n                       :name (n4 / name\n                                 :op1 \"Peter\"))\n             :ARG2 u))", "(c / contrast-01\n   :ARG1 (g / get-05\n            :ARG1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Oliver\"))\n            :ARG2 (u / university\n                     :name (n3 / name\n                               :op1 \"Stanford\"\n                               :op2 \"University\"))\n            :ARG2 u)\n   :ARG2 (g2 / get-05\n             :polarity -\n             :ARG1 (p3 / person\n                       :name (n4 / name\n                                 :op1 \"Peter\"))\n             :ARG2 u))", "(c / contrast-01\n   :ARG1 (g / get-05\n            :ARG1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Oliver\"))\n            :ARG2 (u / university\n                     :name (n3 / name\n                               :op1 \"Stanford\"\n                               :op2 \"University\"))\n            :ARG2 u)\n   :ARG2 (g2 / get-05\n             :polarity -\n             :ARG1 (p3 / person\n                       :name (n4 / name\n                                 :op1 \"Peter\"))\n             :ARG2 u))", "(c / contrast-01\n   :ARG1 (g / get-05\n            :ARG1 (a / and\n                     :op1 (p / person\n                             :name (n / name\n                                      :op1 \"Matt\"))\n                     :op2 (p2 / person\n                              :name (n2 / name\n                                        :op1 \"Oliver\")))\n            :ARG2 (u / university\n                     :name (n3 / name\n                               :op1 \"Stanford\"\n                               :op2 \"University\")))\n   :ARG2 (g2 / get-05\n             :polarity -\n             :ARG1 (p3 / person\n                       :name (n4 / name\n                                 :op1 \"Peter\"))\n             :ARG2 u))", "(c / contrast-01\n   :ARG1 (g / get-05\n            :ARG1 (a / and\n                     :op1 (p / person\n                             :name (n / name\n                                      :op1 \"Matt\"))\n                     :op2 (p2 / person\n                              :name (n2 / name\n                                        :op1 \"Oliver\")))\n            :ARG2 (u / university\n                     :name (n3 / name\n                               :op1 \"Stanford\"\n                               :op2 \"University\")))\n   :ARG2 (g2 / get-05\n             :polarity -\n             :ARG1 (p3 / person\n                       :name (n4 / name\n                                 :op1 \"Peter\"))\n             :ARG2 u))", "(s / show-01\n   :ARG0 (t / thing\n            :ARG2 (r / result-01)\n            :time (t2 / today))\n   :ARG1 (c / contrast-01\n            :ARG1 (g / get-05\n                     :ARG1 (p / person\n                              :name (n / name\n                                       :op1 \"Matt\"))\n                     :ARG2 (u / university\n                              :name (n3 / name\n                                        :op1 \"Stanford\"\n                                        :op2 \"University\")))\n            :ARG2 (g2 / get-05\n                      :polarity -\n                      :ARG1 (p3 / person\n                                :name (n4 / name\n                                          :op1 \"Peter\"))\n                      :ARG2 u)))", "(s / show-01\n   :ARG0 (t / thing\n            :ARG2 (r / result-01)\n            :time (t2 / today))\n   :ARG1 (c / contrast-01\n            :ARG1 (g / get-05\n                     :ARG1 (p / person\n                              :name (n / name\n                                       :op1 \"Matt\"))\n                     :ARG2 (u / university\n                              :name (n3 / name\n                                        :op1 \"Stanford\"\n                                        :op2 \"University\")))\n            :ARG2 (g2 / get-05\n                      :polarity -\n                      :ARG1 (p3 / person\n                                :name (n4 / name\n                                          :op1 \"Peter\"))\n                      :ARG2 u)))", "(s / show-01\n   :ARG0 (t / thing\n            :ARG2 (r / result-01)\n            :time (t2 / today))\n   :ARG1 (c / contrast-01\n            :ARG1 (g / get-05\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Oliver\"))\n                     :ARG2 (u / university\n                              :name (n3 / name\n                                        :op1 \"Stanford\"\n                                        :op2 \"University\"))\n                     :ARG2 u)\n            :ARG2 (g2 / get-05\n                      :polarity -\n                      :ARG1 (p3 / person\n                                :name (n4 / name\n                                          :op1 \"Peter\"))\n                      :ARG2 u)))", "(s / show-01\n   :ARG0 (t / thing\n            :ARG2 (r / result-01)\n            :time (t2 / today))\n   :ARG1 (c / contrast-01\n            :ARG1 (g / get-05\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Oliver\"))\n                     :ARG2 (u / university\n                              :name (n3 / name\n                                        :op1 \"Stanford\"\n                                        :op2 \"University\"))\n                     :ARG2 u)\n            :ARG2 (g2 / get-05\n                      :polarity -\n                      :ARG1 (p3 / person\n                                :name (n4 / name\n                                          :op1 \"Peter\"))\n                      :ARG2 u)))", "(s / show-01\n   :ARG0 (t / thing\n            :ARG2 (r / result-01)\n            :time (t2 / today))\n   :ARG1 (c / contrast-01\n            :ARG1 (g / get-05\n                     :ARG1 (a / and\n                              :op1 (p / person\n                                      :name (n / name\n                                               :op1 \"Matt\"))\n                              :op2 (p2 / person\n                                       :name (n2 / name\n                                                 :op1 \"Oliver\")))\n                     :ARG2 (u / university\n                              :name (n3 / name\n                                        :op1 \"Stanford\"\n                                        :op2 \"University\")))\n            :ARG2 (g2 / get-05\n                      :polarity -\n                      :ARG1 (p3 / person\n                                :name (n4 / name\n                                          :op1 \"Peter\"))\n                      :ARG2 u)))", "(s / show-01\n   :ARG0 (t / thing\n            :ARG2 (r / result-01)\n            :time (t2 / today))\n   :ARG1 (c / contrast-01\n            :ARG1 (g / get-05\n                     :ARG1 (a / and\n                              :op1 (p / person\n                                      :name (n / name\n                                               :op1 \"Matt\"))\n                              :op2 (p2 / person\n                                       :name (n2 / name\n                                                 :op1 \"Oliver\")))\n                     :ARG2 (u / university\n                              :name (n3 / name\n                                        :op1 \"Stanford\"\n                                        :op2 \"University\")))\n            :ARG2 (g2 / get-05\n                      :polarity -\n                      :ARG1 (p3 / person\n                                :name (n4 / name\n                                          :op1 \"Peter\"))\n                      :ARG2 u)))"], "smus": ["Peter did not get to Stanford University.", "Matt got to Stanford University.", "Matt got to Stanford University.", "Oliver got to Stanford University.", "Oliver got to Stanford University.", "Matt and Oliver got to Stanford University.", "Matt and Oliver got to Stanford University.", "Matt got to Stanford University, Peter not.", "Matt got to Stanford University, Peter not.", "Oliver got to Stanford University, Peter not.", "Oliver got to Stanford University, Peter not.", "Matt and Oliver got to Stanford University, but Peter not.", "Matt and Oliver got to Stanford University, but Peter not.", "Todays results show that Matt got to Stanford University, not Peter.", "Todays results show that Matt got to Stanford University, not Peter.", "Todays results show that Oliver got to Stanford University, not Peter.", "Todays results show that Oliver got to Stanford University, not Peter.", "Todays results show that Matt and Oliver got to Stanford University, not Peter.", "Todays results show that Matt and Oliver got to Stanford University, not Peter."]}, {"instance_id": "samsum-354", "summary": "Laura, Kelsey, Oona and Sid are going to see \"Aquaman\" on Thursday at 8:10 pm. Oona will get the tickets.", "summary_trees": ["# ::snt Laura, Kelsey, Oona and Sid are going to see \"Aquaman\" on Thursday at 8:10 pm.\n(s / see-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Laura\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Kelsey\"))\n            :op3 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Oona\"))\n            :op4 (p4 / person\n                  :name (n4 / name\n                        :op1 \"Sid\")))\n      :ARG1 (w / work-of-art\n            :name (n5 / name\n                  :op1 \"Aquaman\"))\n      :time (d / date-entity\n            :time \"20:10\"\n            :weekday (t / thursday)))", "# ::snt Oona will get the tickets.\n(g / get-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Oona\"))\n      :ARG1 (t / ticket))"], "tree": ["(s / see-01\n   :ARG1 (w / work-of-art\n            :name (n5 / name\n                      :op1 \"Aquaman\")))", "(s / see-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Laura\"))\n   :ARG1 (w / work-of-art\n            :name (n5 / name\n                      :op1 \"Aquaman\")))", "(s / see-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Kelsey\"))\n   :ARG1 (w / work-of-art\n            :name (n5 / name\n                      :op1 \"Aquaman\")))", "(s / see-01\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Oona\"))\n   :ARG1 (w / work-of-art\n            :name (n5 / name\n                      :op1 \"Aquaman\")))", "(s / see-01\n   :ARG0 (p4 / person\n             :name (n4 / name\n                       :op1 \"Sid\"))\n   :ARG1 (w / work-of-art\n            :name (n5 / name\n                      :op1 \"Aquaman\"))\n   :ARG1 w)", "(s / see-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Laura\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Kelsey\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Oona\"))\n            :op4 (p4 / person\n                     :name (n4 / name\n                               :op1 \"Sid\")))\n   :ARG1 (w / work-of-art\n            :name (n5 / name\n                      :op1 \"Aquaman\")))", "(g / get-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Oona\"))\n   :ARG1 (t / ticket))", "(g / get-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Oona\"))\n   :ARG1 (t / ticket))"], "smus": ["See Aquaman.", "Laura, see Aquaman.", "Kelly will see Aquaman.", "Oona will see Aquaman.", "Sid will see Aquaman.", "Laura, Kelly, Oona and Sid will see Aquaman.", "Oona will get tickets.", "Oona will get tickets."]}, {"instance_id": "samsum-355", "summary": "A person was beaten and mugged on campus and had to be hospitalised. The attacker wore a mask. An official statement will be released, along with a newspaper article. Truman and Rodney think the campus security is subpar, even though there are cameras around.", "summary_trees": ["# ::snt A person was beaten and mugged on campus and had to be hospitalised.\n(a / and\n      :op1 (b / beat-01\n            :ARG1 (p / person))\n      :op2 (m / mug-01\n            :ARG1 p)\n      :location (c / campus)\n      :ARG0-of (c2 / cause-01\n            :ARG1 (o / obligate-01\n                  :ARG1 p\n                  :ARG2 (h / hospitalize-01\n                        :ARG1 p))))", "# ::snt The attacker wore a mask.\n(w / wear-01\n      :ARG0 (p / person\n            :ARG0-of (a / attack-01))\n      :ARG1 (m / mask))", "# ::snt An official statement will be released, along with a newspaper article.\n(r / release-01\n      :ARG1 (a / and\n            :op1 (t / thing\n                  :ARG1-of (s / state-01)\n                  :mod (o / official))\n            :op2 (a2 / article\n                  :mod (n / newspaper))))", "# ::snt Truman and Rodney think the campus security is subpar, even though there are cameras around.\n(t / think-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Truman\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Rodney\")))\n      :ARG1 (s / subpar\n            :domain (s2 / security\n                  :location (c / campus)))\n      :concession (c2 / camera\n            :location (a2 / around)))"], "tree": ["(o / obligate-01\n   :ARG2 (h / hospitalize-01\n            :ARG1 (p / person)))", "(o / obligate-01\n   :ARG1 (p / person)\n   :ARG2 (h / hospitalize-01\n            :ARG1 p))", "(o / obligate-01\n   :ARG1 (p / person)\n   :ARG2 (h / hospitalize-01\n            :ARG1 p))", "(c2 / cause-01\n    :ARG1 (o / obligate-01\n             :ARG1 (p / person)\n             :ARG2 (h / hospitalize-01\n                      :ARG1 p)))", "(w / wear-01\n   :ARG0 (p / person\n            :ARG0 (a / attack-01))\n   :ARG1 (m / mask))", "(w / wear-01\n   :ARG0 (p / person\n            :ARG0 (a / attack-01))\n   :ARG1 (m / mask))", "(t / think-01\n   :concession (c2 / camera\n                   :location (a2 / around)))", "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Truman\"))\n   :ARG1 (s / subpar\n            :domain (s2 / security\n                        :location (c / campus))))", "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Truman\"))\n   :ARG1 (s / subpar\n            :domain (s2 / security\n                        :location (c / campus)))\n   :concession (c2 / camera\n                   :location (a2 / around)))"], "smus": ["The person had to be hospitalized.", "The person had to be hospitalized.", "The person had to be hospitalized.", "So the person had to be hospitalized.", "The attackers wore masks.", "The attackers wore masks.", "Though cameras are around, think.", "Truman thinks campus security is subpar.", "Truman thinks campus security is subpar despite the cameras around."]}, {"instance_id": "samsum-356", "summary": "Josh, Sean and Logan are going to the pub tonight to pick up some girls. Logan doesn't want Sean to scare the girls away with his inappropriate comments.", "summary_trees": ["# ::snt Josh, Sean and Logan are going to the pub tonight to pick up some girls.\n(g / go-02\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Josh\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Sean\"))\n            :op3 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Logan\")))\n      :ARG4 (p4 / pub)\n      :time (d / date-entity\n            :dayperiod (n4 / night)\n            :mod (t / today))\n      :purpose (p5 / pick-up-04\n            :ARG0 a\n            :ARG1 (g2 / girl\n                  :quant (s / some))))", "# ::snt Logan doesn't want Sean to scare the girls away with his inappropriate comments.\n(w / want-01\n      :polarity -\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Logan\"))\n      :ARG1 (s / scare-01\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Sean\"))\n            :ARG1 (g / girl)\n            :ARG2 (c / comment-01\n                  :ARG0 p2\n                  :ARG1-of (a / appropriate-02\n                        :polarity -))\n            :direction (a2 / away)))"], "tree": ["(p5 / pick-up-04\n    :ARG0 (a / and)\n    :ARG1 (g2 / girl\n              :quant (s / some)))", "(p5 / pick-up-04\n    :ARG0 (a / and)\n    :ARG1 (g2 / girl\n              :quant (s / some)))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Josh\")))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Sean\")))", "(g / go-02\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Logan\")))", "(g / go-02\n   :time (d / date-entity\n            :dayperiod (n4 / night)\n            :mod (t / today)))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Josh\"))\n   :ARG4 (p4 / pub))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Sean\"))\n   :ARG4 (p4 / pub))", "(g / go-02\n   :time (d / date-entity\n            :dayperiod (n4 / night)\n            :mod (t / today))\n   :purpose (p5 / pick-up-04))", "(g / go-02\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Logan\"))\n   :ARG4 (p4 / pub)\n   :ARG4 p4)", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Josh\"))\n   :ARG4 (p4 / pub)\n   :time (d / date-entity\n            :dayperiod (n4 / night)\n            :mod (t / today)))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Sean\"))\n   :ARG4 (p4 / pub)\n   :time (d / date-entity\n            :dayperiod (n4 / night)\n            :mod (t / today)))", "(g / go-02\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Logan\"))\n   :ARG4 (p4 / pub)\n   :ARG4 p4\n   :time (d / date-entity\n            :dayperiod (n4 / night)\n            :mod (t / today)))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Josh\"))\n   :ARG4 (p4 / pub)\n   :purpose (p5 / pick-up-04\n                :ARG0 p\n                :ARG1 (g2 / girl\n                          :quant (s / some))))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Sean\"))\n   :ARG4 (p4 / pub)\n   :purpose (p5 / pick-up-04\n                :ARG0 p2\n                :ARG1 (g2 / girl\n                          :quant (s / some))))", "(g / go-02\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Logan\"))\n   :ARG4 (p4 / pub)\n   :ARG4 p4\n   :purpose (p5 / pick-up-04\n                :ARG0 p3\n                :ARG1 (g2 / girl\n                          :quant (s / some))))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Josh\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Sean\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Logan\"))))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Josh\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Sean\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Logan\")))\n   :ARG4 (p4 / pub))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Josh\"))\n   :ARG4 (p4 / pub)\n   :time (d / date-entity\n            :dayperiod (n4 / night)\n            :mod (t / today))\n   :purpose (p5 / pick-up-04\n                :ARG0 p\n                :ARG1 (g2 / girl\n                          :quant (s / some))))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Sean\"))\n   :ARG4 (p4 / pub)\n   :time (d / date-entity\n            :dayperiod (n4 / night)\n            :mod (t / today))\n   :purpose (p5 / pick-up-04\n                :ARG0 p2\n                :ARG1 (g2 / girl\n                          :quant (s / some))))", "(g / go-02\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Logan\"))\n   :ARG4 (p4 / pub)\n   :ARG4 p4\n   :time (d / date-entity\n            :dayperiod (n4 / night)\n            :mod (t / today))\n   :purpose (p5 / pick-up-04\n                :ARG0 p3\n                :ARG1 (g2 / girl\n                          :quant (s / some))))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Josh\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Sean\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Logan\")))\n   :ARG4 (p4 / pub)\n   :time (d / date-entity\n            :dayperiod (n4 / night)\n            :mod (t / today)))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Josh\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Sean\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Logan\")))\n   :ARG4 (p4 / pub)\n   :purpose (p5 / pick-up-04\n                :ARG0 a\n                :ARG1 (g2 / girl\n                          :quant (s / some))))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Josh\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Sean\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Logan\")))\n   :ARG4 (p4 / pub)\n   :time (d / date-entity\n            :dayperiod (n4 / night)\n            :mod (t / today))\n   :purpose (p5 / pick-up-04\n                :ARG0 a\n                :ARG1 (g2 / girl\n                          :quant (s / some))))", "(c / comment-01\n   :ARG0 (p2 / person :name (n2 / name :op1 \"Sean\"))\n   :ARG1 (a / appropriate-02\n            :polarity -))", "(w / want-01\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Logan\"))\n   :ARG1 (s / scare-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Sean\"))\n            :ARG1 (g / girl)\n            :ARG2 (c / comment-01\n                     :ARG0 p2\n                     :ARG1 (a / appropriate-02\n                              :polarity -))\n            :direction (a2 / away)))"], "smus": ["and pick up some girls.", "and pick up some girls.", "Josh is going.", "Sean is going.", "Logan is going.", "Going tonight.", "Josh was going to the pub.", "Sean was going to the pub.", "Going to pick up tonight.", "Logan was going to the pub with him.", "Josh is going to the pub tonight.", "Sean is going to the pub tonight.", "Logan was going to the pub tonight.", "Josh was going to the pub to pick up some girls.", "Sean was going to the pub to pick up some girls.", "Logan was going to the pub to pick up some girls.", "Josh, Sean and Logan are going.", "Josh, Sean and Logan are going to the pub.", "Josh is going to the pub tonight to pick up some girls.", "Sean is going to the pub tonight to pick up some girls.", "Logan is going to the pub tonight to pick up some girls.", "Josh, Sean and Logan are going to the pub tonight.", "Josh, Sean and Logan are going to the pub to pick up some girls.", "Josh, Sean and Logan are going to the pub tonight to pick up some girls.", "Sean's comments were inappropriate.", "Logan doesn't want Sean to scare away girls with his inappropriate comments."]}, {"instance_id": "samsum-357", "summary": "Nathalie, Olafur and Zoe are planning the New Year's Eve. Nathalie wants something classy. Olafur doesn't like opera. They want to go to the Breakfast at Tiffany's party in Soho.", "summary_trees": ["# ::snt Nathalie, Olafur and Zoe are planning the New Year's Eve.\n(p / plan-01\n      :ARG0 (a / and\n            :op1 (p2 / person\n                  :name (n / name\n                        :op1 \"Nathalie\"))\n            :op2 (p3 / person\n                  :name (n2 / name\n                        :op1 \"Olafur\"))\n            :op3 (p4 / person\n                  :name (n3 / name\n                        :op1 \"Zoe\")))\n      :ARG1 (f / festival\n            :name (n4 / name\n                  :op1 \"New\"\n                  :op2 \"Year's\"\n                  :op3 \"Eve\")))", "# ::snt Nathalie wants something classy.\n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Nathalie\"))\n      :ARG1 (s / something\n            :mod (c / classy)))", "# ::snt Olafur doesn't like opera.\n(d / dislike-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Olafur\"))\n      :ARG1 (o / opera))", "# ::snt They want to go to the Breakfast at Tiffany's party in Soho.\n(w / want-01\n      :ARG0 (t / they)\n      :ARG1 (g / go-02\n            :ARG0 t\n            :ARG4 (b / breakfast-01\n                  :location (p / party\n                        :mod (c / company\n                              :name (n / name\n                                    :op1 \"Tiffany's\"))\n                        :location (c2 / city-district\n                              :name (n2 / name\n                                    :op1 \"Soho\"))))))"], "tree": ["(p / plan-01\n   :ARG1 (f / festival\n            :name (n4 / name\n                      :op1 \"New\"\n                      :op2 \"Year's\"\n                      :op3 \"Eve\")))", "(p / plan-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Nathalie\"))\n   :ARG1 (f / festival\n            :name (n4 / name\n                      :op1 \"New\"\n                      :op2 \"Year's\"\n                      :op3 \"Eve\")))", "(p / plan-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"Olafur\"))\n   :ARG1 (f / festival\n            :name (n4 / name\n                      :op1 \"New\"\n                      :op2 \"Year's\"\n                      :op3 \"Eve\")))", "(p / plan-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Nathalie\"))\n   :ARG1 (f / festival\n            :name (n4 / name\n                      :op1 \"New\"\n                      :op2 \"Year's\"\n                      :op3 \"Eve\")))", "(p / plan-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"Olafur\"))\n   :ARG1 (f / festival\n            :name (n4 / name\n                      :op1 \"New\"\n                      :op2 \"Year's\"\n                      :op3 \"Eve\")))", "(p / plan-01\n   :ARG0 (p4 / person\n             :name (n3 / name\n                       :op1 \"Zoe\"))\n   :ARG1 (f / festival\n            :name (n4 / name\n                      :op1 \"New\"\n                      :op2 \"Year's\"\n                      :op3 \"Eve\"))\n   :ARG1 f)", "(p / plan-01\n   :ARG0 (p4 / person\n             :name (n3 / name\n                       :op1 \"Zoe\"))\n   :ARG1 (f / festival\n            :name (n4 / name\n                      :op1 \"New\"\n                      :op2 \"Year's\"\n                      :op3 \"Eve\"))\n   :ARG1 f)", "(p / plan-01\n   :ARG0 (a / and\n            :op1 (p2 / person\n                     :name (n / name\n                              :op1 \"Nathalie\"))\n            :op2 (p3 / person\n                     :name (n2 / name\n                               :op1 \"Olafur\"))\n            :op3 (p4 / person\n                     :name (n3 / name\n                               :op1 \"Zoe\")))\n   :ARG1 (f / festival\n            :name (n4 / name\n                      :op1 \"New\"\n                      :op2 \"Year's\"\n                      :op3 \"Eve\")))", "(p / plan-01\n   :ARG0 (a / and\n            :op1 (p2 / person\n                     :name (n / name\n                              :op1 \"Nathalie\"))\n            :op2 (p3 / person\n                     :name (n2 / name\n                               :op1 \"Olafur\"))\n            :op3 (p4 / person\n                     :name (n3 / name\n                               :op1 \"Zoe\")))\n   :ARG1 (f / festival\n            :name (n4 / name\n                      :op1 \"New\"\n                      :op2 \"Year's\"\n                      :op3 \"Eve\")))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nathalie\"))\n   :ARG1 (s / something\n            :mod (c / classy)))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nathalie\"))\n   :ARG1 (s / something\n            :mod (c / classy)))", "(d / dislike-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Olafur\"))\n   :ARG1 (o / opera))", "(d / dislike-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Olafur\"))\n   :ARG1 (o / opera))", "(b / breakfast-01\n   :location (p / party\n                :mod (c / company\n                        :name (n / name\n                                 :op1 \"Tiffany's\"))\n                :location (c2 / city-district\n                              :name (n2 / name\n                                        :op1 \"Soho\"))))", "(b / breakfast-01\n   :location (p / party\n                :mod (c / company\n                        :name (n / name\n                                 :op1 \"Tiffany's\"))\n                :location (c2 / city-district\n                              :name (n2 / name\n                                        :op1 \"Soho\"))))", "(g / go-02\n   :ARG0 (t / they)\n   :ARG4 (b / breakfast-01\n            :location (p / party\n                         :mod (c / company\n                                 :name (n / name\n                                          :op1 \"Tiffany's\"))\n                         :location (c2 / city-district\n                                       :name (n2 / name\n                                                 :op1 \"Soho\")))))", "(w / want-01\n   :ARG0 (t / they)\n   :ARG1 (g / go-02\n            :ARG0 t\n            :ARG4 (b / breakfast-01\n                     :location (p / party\n                                  :mod (c / company\n                                          :name (n / name\n                                                   :op1 \"Tiffany's\"))\n                                  :location (c2 / city-district\n                                                :name (n2 / name\n                                                          :op1 \"Soho\"))))))"], "smus": ["New Year's Eve is planning.", "Nathanalie is planning New Year's Eve.", "Olafur is planning New Year's Eve.", "Nathanalie is planning New Year's Eve.", "Olafur is planning New Year's Eve.", "Zoe is planning New Year's Eve.", "Zoe is planning New Year's Eve.", "Nathanalie, Olafur and Zoe are planning New Year's Eve.", "Nathanalie, Olafur and Zoe are planning New Year's Eve.", "Nathalie wants something classy.", "Nathalie wants something classy.", "Olafur doesn't like opera.", "Olafur doesn't like opera.", "Breakfast at Tiffany's party in Soho.", "Breakfast at Tiffany's party in Soho.", "They'll go to breakfast at Tiffany's in Soho.", "They want to go to breakfast at Tiffany's in Soho."]}, {"instance_id": "samsum-358", "summary": "Natalie is checking if it's worth going to the new club at Regents Street. Denise thinks the club is great. Judy's friends also recommend the place, so Judy is going there this weekend. Natalie will go to the club with Judy, Miranda and Helen on Saturday.", "summary_trees": ["# ::snt Natalie is checking if it's worth going to the new club at Regents Street.\n(c / check-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Natalie\"))\n      :ARG1 (t / truth-value\n            :polarity-of (w / worth-02\n                  :ARG2 (g / go-02\n                        :ARG0 p\n                        :ARG4 (c2 / club\n                              :ARG1-of (n2 / new-01)\n                              :location (r / road\n                                    :name (n3 / name\n                                          :op1 \"Regents\"\n                                          :op2 \"Street\")))))))", "# ::snt Denise thinks the club is great.\n(t / think-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Denise\"))\n      :ARG1 (g / great\n            :domain (c / club)))", "# ::snt Judy's friends also recommend the place, so Judy is going there this weekend.\n(r / recommend-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (p2 / person\n                        :name (n / name\n                              :op1 \"Judy\"))\n                  :ARG2 (f / friend)))\n      :ARG1 (p3 / place)\n      :ARG2 p2\n      :mod (a / also)\n      :ARG0-of (c / cause-01\n            :ARG1 (g / go-02\n                  :ARG0 p2\n                  :ARG4 p3\n                  :time (w / weekend\n                        :mod (t / this)))))", "# ::snt Natalie will go to the club with Judy, Miranda and Helen on Saturday.\n(g / go-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Natalie\"))\n      :ARG4 (c / club)\n      :accompanier (a / and\n            :op1 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Judy\"))\n            :op2 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Miranda\"))\n            :op3 (p4 / person\n                  :name (n4 / name\n                        :op1 \"Helen\")))\n      :time (d / date-entity\n            :weekday (s / saturday)))"], "tree": ["(g / go-02\n   :ARG0 (p / person :name (n / name :op1 \"Natalie\"))\n   :ARG4 (c2 / club\n             :ARG1 (n2 / new-01)\n             :location (r / road\n                          :name (n3 / name\n                                    :op1 \"Regents\"\n                                    :op2 \"Street\"))))", "(g / go-02\n   :ARG0 (p / person :name (n / name :op1 \"Natalie\"))\n   :ARG4 (c2 / club\n             :ARG1 (n2 / new-01)\n             :location (r / road\n                          :name (n3 / name\n                                    :op1 \"Regents\"\n                                    :op2 \"Street\"))))", "(c / check-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Natalie\"))\n   :ARG1 (t / truth-value\n            :polarity (w / worth-02\n                         :ARG2 (g / go-02\n                                  :ARG0 p\n                                  :ARG4 (c2 / club\n                                            :ARG1 (n2 / new-01)\n                                            :location (r / road\n                                                         :name (n3 / name\n                                                                   :op1 \"Regents\"\n                                                                   :op2 \"Street\")))))))", "(c / check-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Natalie\"))\n   :ARG1 (t / truth-value\n            :polarity (w / worth-02\n                         :ARG2 (g / go-02\n                                  :ARG0 p\n                                  :ARG4 (c2 / club\n                                            :ARG1 (n2 / new-01)\n                                            :location (r / road\n                                                         :name (n3 / name\n                                                                   :op1 \"Regents\"\n                                                                   :op2 \"Street\")))))))", "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Denise\"))\n   :ARG1 (g / great\n            :domain (c / club)))", "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Denise\"))\n   :ARG1 (g / great\n            :domain (c / club)))", "(g / go-02\n   :time (w / weekend\n            :mod (t / this)))", "(g / go-02\n   :time (w / weekend\n            :mod (t / this)))", "(g / go-02\n   :ARG0 (p2 / person :name (n / name :op1 \"Judy\"))\n   :ARG4 (p3 / place)\n   :time (w / weekend\n            :mod (t / this)))", "(g / go-02\n   :ARG0 (p2 / person :name (n / name :op1 \"Judy\"))\n   :ARG4 (p3 / place)\n   :time (w / weekend\n            :mod (t / this)))", "(c / cause-01\n   :ARG1 (g / go-02\n            :ARG0 (p2 / person :name (n / name :op1 \"Judy\"))\n            :ARG4 (p3 / place)\n            :time (w / weekend\n                     :mod (t / this))))", "(r / recommend-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :name (n / name\n                                        :op1 \"Judy\"))\n                     :ARG2 (f / friend)))\n   :ARG1 (p3 / place)\n   :ARG2 p2\n   :mod (a / also)\n   :ARG0 (c / cause-01\n            :ARG1 (g / go-02\n                     :ARG0 p2\n                     :ARG4 p3\n                     :time (w / weekend\n                              :mod (t / this)))))", "(g / go-02\n   :time (w / weekend\n            :mod (t / this)))", "(g / go-02\n   :time (w / weekend\n            :mod (t / this)))", "(g / go-02\n   :ARG0 (p2 / person :name (n / name :op1 \"Judy\"))\n   :ARG4 (p3 / place)\n   :time (w / weekend\n            :mod (t / this)))", "(g / go-02\n   :ARG0 (p2 / person :name (n / name :op1 \"Judy\"))\n   :ARG4 (p3 / place)\n   :time (w / weekend\n            :mod (t / this)))", "(c / cause-01\n   :ARG1 (g / go-02\n            :ARG0 (p2 / person :name (n / name :op1 \"Judy\"))\n            :ARG4 (p3 / place)\n            :time (w / weekend\n                     :mod (t / this))))", "(g / go-02\n   :time (d / date-entity\n            :weekday (s / saturday)))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Natalie\")))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Natalie\"))\n   :ARG4 (c / club))", "(g / go-02\n   :accompanier (p2 / person\n                    :name (n2 / name\n                              :op1 \"Judy\"))\n   :time (d / date-entity\n            :weekday (s / saturday)))", "(g / go-02\n   :accompanier (p3 / person\n                    :name (n3 / name\n                              :op1 \"Miranda\"))\n   :time (d / date-entity\n            :weekday (s / saturday)))", "(g / go-02\n   :accompanier (p4 / person\n                    :name (n4 / name\n                              :op1 \"Helen\"))\n   :time (d / date-entity\n            :weekday (s / saturday))\n   :time d)", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Natalie\"))\n   :ARG4 (c / club)\n   :time (d / date-entity\n            :weekday (s / saturday)))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Natalie\"))\n   :ARG4 (c / club)\n   :accompanier (p3 / person\n                    :name (n3 / name\n                              :op1 \"Miranda\"))\n   :time (d / date-entity\n            :weekday (s / saturday)))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Natalie\"))\n   :ARG4 (c / club)\n   :accompanier (p4 / person\n                    :name (n4 / name\n                              :op1 \"Helen\"))\n   :time (d / date-entity\n            :weekday (s / saturday))\n   :time d)", "(g / go-02\n   :accompanier (a / and\n                   :op1 (p2 / person\n                            :name (n2 / name\n                                      :op1 \"Judy\"))\n                   :op2 (p3 / person\n                            :name (n3 / name\n                                      :op1 \"Miranda\"))\n                   :op3 (p4 / person\n                            :name (n4 / name\n                                      :op1 \"Helen\")))\n   :time (d / date-entity\n            :weekday (s / saturday)))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Natalie\"))\n   :ARG4 (c / club)\n   :accompanier (a / and\n                   :op1 (p2 / person\n                            :name (n2 / name\n                                      :op1 \"Judy\"))\n                   :op2 (p3 / person\n                            :name (n3 / name\n                                      :op1 \"Miranda\"))\n                   :op3 (p4 / person\n                            :name (n4 / name\n                                      :op1 \"Helen\")))\n   :time (d / date-entity\n            :weekday (s / saturday)))"], "smus": ["Natalie is going to a new club on Regents Street.", "Natalie is going to a new club on Regents Street.", "Natalie was checking if it was worth going to the new club on Regents Street.", "Natalie was checking if it was worth going to the new club on Regents Street.", "Denise thinks the club is great.", "Denise thinks the club is great.", "Going this weekend.", "Going this weekend.", "This weekend, Judy will be going to the place.", "This weekend, Judy will be going to the place.", "So this weekend, Judy is going to the place.", "Judy's friends also recommend the place for him because he's going there this weekend.", "Going this weekend.", "Going this weekend.", "This weekend, Judy will be going to the place.", "This weekend, Judy will be going to the place.", "So this weekend, Judy is going to the place.", "Go Saturday.", "Natalie, go.", "Natalie will go to the club.", "Go with Judy Saturday.", "Go with Miranda Saturday.", "Saturday, go with Helen.", "Natalie will go to the club on Saturday.", "Natalie will go to the club with Mirand on Saturday.", "Natalie will go to the club with Helen on Saturday.", "Saturday, go with Judy, Miranda and Helen.", "Natalie will go to the club with Judy, Mirand and Helen on Saturday."]}, {"instance_id": "samsum-359", "summary": "Leticia lost her wallet with cards and documents and needs to borrow 10 dollars. Miranda and Lora offer help. The girls hope somebody will find the wallet and give it back.", "summary_trees": ["# ::snt Leticia lost her wallet with cards and documents and needs to borrow 10 dollars.\n(a / and\n      :op1 (l / lose-02\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Leticia\"))\n            :ARG1 (a2 / and\n                  :op1 (w / wallet\n                        :poss p)\n                  :op2 (c / card)\n                  :op3 (d / document)))\n      :op2 (n2 / need-01\n            :ARG0 p\n            :ARG1 (b / borrow-01\n                  :ARG0 p\n                  :ARG1 (m / monetary-quantity\n                        :quant 10\n                        :unit (d2 / dollar)))))", "# ::snt Miranda and Lora offer help.\n(o / offer-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Miranda\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Lora\")))\n      :ARG1 (h / help-01\n            :ARG0 a))", "# ::snt The girls hope somebody will find the wallet and give it back.\n(h / hope-01\n      :ARG0 (g / girl)\n      :ARG1 (a / and\n            :op1 (f / find-01\n                  :ARG0 (s / somebody)\n                  :ARG1 (w / wallet))\n            :op2 (g2 / give-back-03\n                  :ARG0 s\n                  :ARG1 w)))"], "tree": ["(l / lose-02\n   :ARG1 (w / wallet\n            :poss (p / person :name (n / name :op1 \"Leticia\"))))", "(b / borrow-01\n   :ARG0 (p / person :name (n / name :op1 \"Leticia\"))\n   :ARG1 (m / monetary-quantity\n            :quant 10\n            :unit (d2 / dollar)))", "(l / lose-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Leticia\"))\n   :ARG1 (c / card))", "(l / lose-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Leticia\"))\n   :ARG1 (d / document))", "(l / lose-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Leticia\"))\n   :ARG1 (c / card))", "(l / lose-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Leticia\"))\n   :ARG1 (d / document))", "(n2 / need-01\n    :ARG1 (b / borrow-01\n             :ARG0 (p / person :name (n / name :op1 \"Leticia\"))\n             :ARG1 (m / monetary-quantity\n                      :quant 10\n                      :unit (d2 / dollar))))", "(l / lose-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Leticia\"))\n   :ARG1 (w / wallet\n            :poss p))", "(l / lose-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Leticia\"))\n   :ARG1 (w / wallet\n            :poss p))", "(n2 / need-01\n    :ARG0 (p / person :name (n / name :op1 \"Leticia\"))\n    :ARG1 (b / borrow-01\n             :ARG0 p\n             :ARG1 (m / monetary-quantity\n                      :quant 10\n                      :unit (d2 / dollar))))", "(n2 / need-01\n    :ARG0 (p / person :name (n / name :op1 \"Leticia\"))\n    :ARG1 (b / borrow-01\n             :ARG0 p\n             :ARG1 (m / monetary-quantity\n                      :quant 10\n                      :unit (d2 / dollar))))", "(l / lose-02\n   :ARG1 (a2 / and\n             :op1 (w / wallet\n                     :poss (p / person :name (n / name :op1 \"Leticia\")))\n             :op2 (c / card)\n             :op3 (d / document)))", "(l / lose-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Leticia\"))\n   :ARG1 (a2 / and\n             :op1 (w / wallet\n                     :poss p)\n             :op2 (c / card)\n             :op3 (d / document)))", "(l / lose-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Leticia\"))\n   :ARG1 (a2 / and\n             :op1 (w / wallet\n                     :poss p)\n             :op2 (c / card)\n             :op3 (d / document)))", "(o / offer-01\n   :ARG1 (h / help-01\n            :ARG0 (a / and)))", "(o / offer-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Miranda\"))\n   :ARG1 (h / help-01\n            :ARG0 p))", "(o / offer-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Miranda\"))\n   :ARG1 (h / help-01\n            :ARG0 p))", "(o / offer-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Miranda\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Lora\")))\n   :ARG1 (h / help-01\n            :ARG0 a))", "(o / offer-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Miranda\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Lora\")))\n   :ARG1 (h / help-01\n            :ARG0 a))", "(h / hope-01\n   :ARG0 (g / girl)\n   :ARG1 (g2 / give-back-03\n             :ARG0 (s / somebody)\n             :ARG1 (w / wallet)))", "(h / hope-01\n   :ARG0 (g / girl)\n   :ARG1 (f / find-01\n            :ARG0 (s / somebody)\n            :ARG1 (w / wallet)))", "(h / hope-01\n   :ARG0 (g / girl)\n   :ARG1 (a / and\n            :op1 (f / find-01\n                    :ARG0 (s / somebody)\n                    :ARG1 (w / wallet))\n            :op2 (g2 / give-back-03\n                     :ARG0 s\n                     :ARG1 w)))"], "smus": ["Leticia's wallet was lost.", "Leticia would borrow 10 dollars.", "Leticia lost the cards.", "Leticia lost the documents.", "Leticia lost the cards.", "Leticia lost the documents.", "Leticia needs to borrow 10 dollars.", "Leticia lost her wallet.", "Leticia lost her wallet.", "Leticia needs to borrow 10 dollars.", "Leticia needs to borrow 10 dollars.", "Leticia's wallet, cards and documents were lost.", "Leticia lost her wallet, cards and documents.", "Leticia lost her wallet, cards and documents.", "Offer help and assistance.", "Miranda offer help.", "Miranda offer help.", "Miranda and Lora offer help.", "Miranda and Lora offer help.", "Girls hope somebody will give back a wallet.", "The girls hope somebody will find a wallet.", "Girls hope somebody will find a wallet and give it back."]}, {"instance_id": "samsum-360", "summary": "Maria suggests to meet after the IMF lecture to discuss the presentation which is due on Monday. Maria, Alexander, Martha and Sarah will meet tomorrow at 17:15. Lawrence will be late.", "summary_trees": ["# ::snt Maria suggests to meet after the IMF lecture to discuss the presentation which is due on Monday.\n(s / suggest-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Maria\"))\n      :ARG1 (m / meet-03\n            :ARG0 (w / we)\n            :time (a / after\n                  :op1 (l / lecture-01\n                        :ARG0 (o / organization\n                              :name (n2 / name\n                                    :op1 \"IMF\"))))\n            :purpose (d / discuss-01\n                  :ARG0 w\n                  :ARG1 (p2 / presentation\n                        :ARG1-of (d2 / due-03\n                              :time (d3 / date-entity\n                                    :weekday (m2 / monday)))))))", "# ::snt Maria, Alexander, Martha and Sarah will meet tomorrow at 17:15.\n(m / meet-03\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Maria\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Alexander\"))\n            :op3 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Martha\"))\n            :op4 (p4 / person\n                  :name (n4 / name\n                        :op1 \"Sarah\")))\n      :time (t / tomorrow)\n      :time (d / date-entity\n            :time \"17:15\"))", "# ::snt Lawrence will be late.\n(l / late-02\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Lawrence\")))"], "tree": ["(d2 / due-03\n    :time (d3 / date-entity\n              :weekday (m2 / monday)))", "(d2 / due-03\n    :time (d3 / date-entity\n              :weekday (m2 / monday)))", "(m / meet-03\n   :time (a / after\n            :op1 (l / lecture-01)))", "(m / meet-03\n   :time (a / after\n            :op1 (l / lecture-01)))", "(m / meet-03\n   :time (a / after\n            :op1 (l / lecture-01))\n   :purpose (d / discuss-01))", "(d / discuss-01\n   :ARG1 (p2 / presentation\n             :ARG1 (d2 / due-03\n                       :time (d3 / date-entity\n                                 :weekday (m2 / monday)))))", "(m / meet-03\n   :time (a / after\n            :op1 (l / lecture-01\n                    :ARG0 (o / organization\n                             :name (n2 / name\n                                       :op1 \"IMF\")))))", "(s / suggest-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Maria\"))\n   :ARG1 (m / meet-03\n            :ARG0 (w / we)\n            :time (a / after\n                     :op1 (l / lecture-01\n                             :ARG0 (o / organization\n                                      :name (n2 / name\n                                                :op1 \"IMF\"))))\n            :purpose (d / discuss-01\n                        :ARG0 w\n                        :ARG1 (p2 / presentation\n                                  :ARG1 (d2 / due-03\n                                            :time (d3 / date-entity\n                                                      :weekday (m2 / monday)))))))", "(s / suggest-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Maria\"))\n   :ARG1 (m / meet-03\n            :ARG0 (w / we)\n            :time (a / after\n                     :op1 (l / lecture-01\n                             :ARG0 (o / organization\n                                      :name (n2 / name\n                                                :op1 \"IMF\"))))\n            :purpose (d / discuss-01\n                        :ARG0 w\n                        :ARG1 (p2 / presentation\n                                  :ARG1 (d2 / due-03\n                                            :time (d3 / date-entity\n                                                      :weekday (m2 / monday)))))))", "(m / meet-03\n   :time (t / tomorrow)\n   :time (d / date-entity\n            :time \"17:15\"))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Maria\")))", "(m / meet-03\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Alexander\")))", "(m / meet-03\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Martha\")))", "(m / meet-03\n   :ARG0 (p4 / person\n             :name (n4 / name\n                       :op1 \"Sarah\")))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Maria\"))\n   :time (t / tomorrow))", "(m / meet-03\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Alexander\"))\n   :time (t / tomorrow))", "(m / meet-03\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Martha\"))\n   :time (t / tomorrow))", "(m / meet-03\n   :ARG0 (p4 / person\n             :name (n4 / name\n                       :op1 \"Sarah\"))\n   :time (t / tomorrow)\n   :time t)", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Maria\"))\n   :time (t / tomorrow)\n   :time (d / date-entity\n            :time \"17:15\"))", "(m / meet-03\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Alexander\"))\n   :time (t / tomorrow)\n   :time (d / date-entity\n            :time \"17:15\"))", "(m / meet-03\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Martha\"))\n   :time (t / tomorrow)\n   :time (d / date-entity\n            :time \"17:15\"))", "(m / meet-03\n   :ARG0 (p4 / person\n             :name (n4 / name\n                       :op1 \"Sarah\"))\n   :time (t / tomorrow)\n   :time t\n   :time (d / date-entity\n            :time \"17:15\"))", "(m / meet-03\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Maria\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Alexander\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Martha\"))\n            :op4 (p4 / person\n                     :name (n4 / name\n                               :op1 \"Sarah\"))))", "(m / meet-03\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Maria\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Alexander\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Martha\"))\n            :op4 (p4 / person\n                     :name (n4 / name\n                               :op1 \"Sarah\")))\n   :time (t / tomorrow))", "(m / meet-03\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Maria\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Alexander\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Martha\"))\n            :op4 (p4 / person\n                     :name (n4 / name\n                               :op1 \"Sarah\")))\n   :time (t / tomorrow)\n   :time (d / date-entity\n            :time \"17:15\"))"], "smus": ["Due Monday.", "Due Monday.", "After the lecture, meet.", "After the lecture, meet.", "After the lecture, meet to discuss.", "Discuss presentation due Monday.", "The meeting will take place after the IMF lecture.", "Maria suggests we meet after the IMF lecture to discuss the presentation due Monday.", "Maria suggests we meet after the IMF lecture to discuss the presentation due Monday.", "Meeting will take place at 17:15 p.m. tomorrow.", "Maria will meet.", "Alexander will meet.", "Martha will meet.", "Sarah will meet.", "Maria will meet tomorrow.", "Alexander will meet tomorrow.", "Martha will meet tomorrow.", "Sarah will meet tomorrow.", "Maria will meet tomorrow at 17:15.", "Alexand will meet tomorrow at 17:15.", "Martha will meet tomorrow at 17:15.", "Sarah will meet tomorrow at 17:15.", "Maria, Alexand, Martha and Sarah will meet.", "Maria, Alexand, Martha and Sarah will meet tomorrow.", "Maria, Alexand, Martha and Sarah will meet tomorrow at 17:15."]}, {"instance_id": "samsum-361", "summary": "Viola is having her wedding soon and still has some things to organize. Carmen comes on Friday and is willing to help Viola.", "summary_trees": ["# ::snt Viola is having her wedding soon and still has some things to organize.\n(a / and\n      :op1 (w / wed-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Viola\"))\n            :time (s / soon))\n      :op2 (h / have-03\n            :ARG0 p\n            :ARG1 (t / thing\n                  :quant (s2 / some)\n                  :ARG1-of (o / organize-01\n                        :ARG0 p))\n            :mod (s3 / still)))", "# ::snt Carmen comes on Friday and is willing to help Viola.\n(a / and\n      :op1 (c / come-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Carmen\"))\n            :time (d / date-entity\n                  :weekday (f / friday)))\n      :op2 (w / will-02\n            :ARG0 p\n            :ARG1 (h / help-01\n                  :ARG0 p\n                  :ARG2 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Viola\")))))"], "tree": ["(w / wed-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Viola\"))\n   :time (s / soon))", "(h / have-03\n   :ARG0 (p / person :name (n / name :op1 \"Viola\"))\n   :ARG1 (t / thing\n            :quant (s2 / some)\n            :ARG1 (o / organize-01\n                     :ARG0 p)))", "(h / have-03\n   :ARG0 (p / person :name (n / name :op1 \"Viola\"))\n   :ARG1 (t / thing\n            :quant (s2 / some)\n            :ARG1 (o / organize-01\n                     :ARG0 p))\n   :mod (s3 / still))", "(c / come-01\n   :time (d / date-entity\n            :weekday (f / friday)))", "(c / come-01\n   :time (d / date-entity\n            :weekday (f / friday)))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Carmen\")))", "(h / help-01\n   :ARG0 (p / person :name (n / name :op1 \"Carmen\"))\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Viola\")))", "(w / will-02\n   :ARG0 (p / person :name (n / name :op1 \"Carmen\"))\n   :ARG1 (h / help-01\n            :ARG0 p\n            :ARG2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Viola\"))))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Carmen\"))\n   :time (d / date-entity\n            :weekday (f / friday)))", "(w / will-02\n   :ARG0 (p / person :name (n / name :op1 \"Carmen\"))\n   :ARG1 (h / help-01\n            :ARG0 p\n            :ARG2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Viola\"))))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Carmen\"))\n   :time (d / date-entity\n            :weekday (f / friday)))"], "smus": ["Viola will soon get married.", "Viola is having some things to organize.", "Viola is still having some things to organize.", "It comes on Friday.", "It comes on Friday.", "Comes Carmen.", "Carmen will help Viola.", "Carmen is willing to help Viola.", "Comes Friday.", "Carmen is willing to help Viola.", "Comes Friday."]}, {"instance_id": "samsum-362", "summary": "Steffen twisted his ankle yesterday and needs a lift to the infinity pool. Irene's car probably won't make it up the hill, so they'd have to park at the bottom and hike up. Mr.Budd should make it up the hill since it's a 4-wheel drive.", "summary_trees": ["# ::snt Steffen twisted his ankle yesterday and needs a lift to the infinity pool.\n(a / and\n      :op1 (t / twist-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Steffen\")\n                  :part (a2 / ankle))\n            :ARG1 a2\n            :time (y / yesterday))\n      :op2 (n2 / need-01\n            :ARG0 p\n            :ARG1 (l / lift-01\n                  :destination (p2 / pool\n                        :mod infinity))))", "# ::snt Irene's car probably won't make it up the hill, so they'd have to park at the bottom and hike up.\n(p / probable\n      :domain (m / make-it-14\n            :polarity -\n            :ARG0 (c / car\n                  :poss (p2 / person\n                        :name (n / name\n                              :op1 \"Irene\")))\n            :ARG1 (u / up-03\n                  :ARG1 c\n                  :ARG2 (h / hill)))\n      :ARG0-of (c2 / cause-01\n            :ARG1 (o / obligate-01\n                  :ARG1 (a / and\n                        :op1 (p3 / park-01\n                              :ARG0 (t / they)\n                              :ARG1 c\n                              :location (b / bottom))\n                        :op2 (h2 / hike-01\n                              :ARG0 t\n                              :ARG2 (u2 / up-03))))))", "# ::snt Mr.Budd should make it up the hill since it's a 4-wheel drive.\n(r / recommend-01\n      :ARG1 (m / make-it-14\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Mr.\"\n                        :op2 \"Budd\"))\n            :ARG1 (u / up-03\n                  :ARG1 p\n                  :ARG2 (h / hill)))\n      :ARG1-of (c / cause-01\n            :ARG0 (d / drive-01\n                  :ARG1 (ii / it)\n                  :mod (w / wheel\n                        :quant 4))))"], "tree": ["(l / lift-01\n   :destination (p2 / pool\n                    :mod infinity))", "(l / lift-01\n   :destination (p2 / pool\n                    :mod infinity))", "(n2 / need-01\n    :ARG1 (l / lift-01\n             :destination (p2 / pool\n                              :mod infinity)))", "(n2 / need-01\n    :ARG0 (p / person :name (n / name :op1 \"Steffen\")))\n    :ARG1 (l / lift-01\n             :destination (p2 / pool\n                              :mod infinity)))", "(n2 / need-01\n    :ARG0 (p / person :name (n / name :op1 \"Steffen\")))\n    :ARG1 (l / lift-01\n             :destination (p2 / pool\n                              :mod infinity)))", "(h2 / hike-01\n    :ARG0 (t / they)\n    :ARG2 (u2 / up-03))", "(p3 / park-01\n    :ARG0 (t / they)\n    :ARG1 (c / car)\n    :location (b / bottom))", "(o / obligate-01\n   :ARG1 (h2 / hike-01\n             :ARG0 (t / they)\n             :ARG2 (u2 / up-03)))", "(o / obligate-01\n   :ARG1 (p3 / park-01\n             :ARG0 (t / they)\n             :ARG1 (c / car)\n             :location (b / bottom)))", "(c2 / cause-01\n    :ARG1 (o / obligate-01\n             :ARG1 (h2 / hike-01\n                       :ARG0 (t / they)\n                       :ARG2 (u2 / up-03))))", "(c2 / cause-01\n    :ARG1 (o / obligate-01\n             :ARG1 (p3 / park-01\n                       :ARG0 (t / they)\n                       :ARG1 (c / car)\n                       :location (b / bottom))))", "(o / obligate-01\n   :ARG1 (a / and\n            :op1 (p3 / park-01\n                     :ARG0 (t / they)\n                     :ARG1 (c / car)\n                     :location (b / bottom))\n            :op2 (h2 / hike-01\n                     :ARG0 t\n                     :ARG2 (u2 / up-03))))", "(c2 / cause-01\n    :ARG1 (o / obligate-01\n             :ARG1 (a / and\n                      :op1 (p3 / park-01\n                               :ARG0 (t / they)\n                               :ARG1 (c / car)\n                               :location (b / bottom))\n                      :op2 (h2 / hike-01\n                               :ARG0 t\n                               :ARG2 (u2 / up-03)))))", "(d / drive-01\n   :mod (w / wheel\n           :quant 4))", "(d / drive-01\n   :ARG1 (ii / it)\n   :mod (w / wheel\n           :quant 4))", "(c / cause-01\n   :ARG0 (d / drive-01\n            :ARG1 (ii / it)\n            :mod (w / wheel\n                    :quant 4)))", "(r / recommend-01\n   :ARG1 (m / make-it-14\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Mr.\"\n                              :op2 \"Budd\"))\n            :ARG1 (u / up-03\n                     :ARG1 p\n                     :ARG2 (h / hill))))", "(r / recommend-01\n   :ARG1 (m / make-it-14\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Mr.\"\n                              :op2 \"Budd\"))\n            :ARG1 (u / up-03\n                     :ARG1 p\n                     :ARG2 (h / hill)))\n   :ARG1 (c / cause-01\n            :ARG0 (d / drive-01\n                     :ARG1 (ii / it)\n                     :mod (w / wheel\n                             :quant 4))))"], "smus": ["Lift to infinity pool", "Lift to infinity pool", "Needs a lift to the infinity pool.", "steffen needs a lift to the infinity pool.", "steffen needs a lift to the infinity pool.", "They hiked up.", "They'll park the car at the bottom.", "They have to hike up.", "They have to park the car at the bottom.", "So they had to hike up.", "So they have to park the car at the bottom.", "They had to park their car at the bottom and hike up.", "So they had to park the car at the bottom and hike up.", "4 wheel drive.", "It's four wheel drive.", "Because it's 4 wheel drive.", "Mr. Budd should make it up the hill.", "With it being 4 wheel drive, Mr. Budd should have made it up the hill."]}, {"instance_id": "samsum-363", "summary": "Julie has just watched a Japanese horror. She's alone at home and really scared. Paula and Rose are going to come to her place for a spontaneous sleepover. They'll drink cocoa and watch \"When Harry met Sally.\" Rose will bring cookies.", "summary_trees": ["# ::snt Julie has just watched a Japanese horror.\n(w / watch-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Julie\"))\n      :ARG1 (h / horror\n            :mod (c / country\n                  :name (n2 / name\n                        :op1 \"Japan\")))\n      :time (j / just))", "# ::snt She's alone at home and really scared.\n(a / and\n      :op1 (a2 / alone\n            :domain (s / she)\n            :location (h / home))\n      :op2 (s2 / scare-01\n            :ARG1 s\n            :degree (r / really)))", "# ::snt Paula and Rose are going to come to her place for a spontaneous sleepover.\n(c / come-01\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Paula\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Rose\")))\n      :ARG4 (p3 / place\n            :poss p)\n      :purpose (s / sleepover-05\n            :ARG0 a\n            :mod (s2 / spontaneous)))", "# ::snt They'll drink cocoa and watch \"When Harry met Sally.\"\n(a / and\n      :op1 (d / drink-01\n            :ARG0 (t / they)\n            :ARG1 (c / cocoa))\n      :op2 (w / watch-01\n            :ARG0 t\n            :ARG1 (b / book\n                  :name (n / name\n                        :op1 \"When\"\n                        :op2 \"Harry\"\n                        :op3 \"Means\"\n                        :op4 \"Sally\"))))", "# ::snt Rose will bring cookies.\n(b / bring-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Rose\"))\n      :ARG1 (c / cookie))"], "tree": ["(w / watch-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Julie\")))", "(w / watch-01\n   :ARG1 (h / horror\n            :mod (c / country\n                    :name (n2 / name\n                              :op1 \"Japan\"))))", "(w / watch-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Julie\"))\n   :ARG1 (h / horror\n            :mod (c / country\n                    :name (n2 / name\n                              :op1 \"Japan\"))))", "(w / watch-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Julie\"))\n   :ARG1 (h / horror\n            :mod (c / country\n                    :name (n2 / name\n                              :op1 \"Japan\")))\n   :time (j / just))", "(s2 / scare-01\n    :ARG1 (s / she)\n    :degree (r / really))", "(s / sleepover-05\n   :ARG0 (a / and)\n   :mod (s2 / spontaneous))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Paula\"))\n   :ARG4 (p3 / place\n             :poss p)\n   :purpose (s / sleepover-05\n               :ARG0 p\n               :mod (s2 / spontaneous)))", "(c / come-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Rose\"))\n   :ARG4 (p3 / place\n             :poss (p / person :name (n / name :op1 \"Paula\")))\n   :ARG4 p3\n   :purpose (s / sleepover-05\n               :ARG0 p2\n               :mod (s2 / spontaneous)))", "(c / come-01\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Paula\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Rose\")))\n   :ARG4 (p3 / place\n             :poss p)\n   :purpose (s / sleepover-05\n               :ARG0 a\n               :mod (s2 / spontaneous)))", "(d / drink-01\n   :ARG0 (t / they)\n   :ARG1 (c / cocoa))", "(d / drink-01\n   :ARG0 (t / they)\n   :ARG1 (c / cocoa))", "(b / bring-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rose\"))\n   :ARG1 (c / cookie))", "(b / bring-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rose\"))\n   :ARG1 (c / cookie))"], "smus": ["Julia watched.", "Watched the Japanese horror.", "Julia has watched the Japanese horror.", "Julie just watched the Japanese horror.", "She was really scared.", "spontaneous sleepovers between the two.", "Paula would come to her place for a spontaneous sleepover.", "Rose will come to Paula's place for a spontaneous sleepover.", "Paula and Rose will come to her place for a spontaneous sleepover.", "They would drink cocoa.", "They would drink cocoa.", "Rose will bring the cookies.", "Rose will bring the cookies."]}, {"instance_id": "samsum-364", "summary": "Jason had a dental appointment today and that's why he was absent.", "summary_trees": ["# ::snt Jason had a dental appointment today and that's why he was absent.\n(a / and\n      :op1 (h / have-06\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Jason\"))\n            :ARG1 (a2 / appointment-02\n                  :ARG0 p\n                  :ARG1 (t / tooth))\n            :time (t2 / today))\n      :op2 (c / cause-01\n            :ARG0 a2\n            :ARG1 (a3 / absent-01\n                  :ARG1 p)))"], "tree": ["(a2 / appointment-02\n    :ARG0 (p / person :name (n / name :op1 \"Jason\"))\n    :ARG1 (t / tooth))", "(c / cause-01\n   :ARG0 (a2 / appointment-02)\n   :ARG1 (a3 / absent-01\n             :ARG1 (p / person :name (n / name :op1 \"Jason\"))))", "(h / have-06\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jason\"))\n   :ARG1 (a2 / appointment-02\n             :ARG0 p\n             :ARG1 (t / tooth))\n   :time (t2 / today))"], "smus": ["Jason had a tooth appointment.", "Jason was absent due to the appointment.", "Jason had a tooth appointment today."]}, {"instance_id": "samsum-365", "summary": "Anna organises a birthday's party on the 6th of November at 19:30.", "summary_trees": ["# ::snt Anna organises a birthday's party on the 6th of November at 19:30.\n(o / organize-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Anna\"))\n      :ARG1 (p2 / party-01\n            :mod (b / birthday)\n            :time (d / date-entity\n                  :month 11\n                  :day 6\n                  :time \"19:30\")))"], "tree": ["(o / organize-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Anna\")))", "(p2 / party-01\n    :mod (b / birthday)\n    :time (d / date-entity\n             :month 11\n             :day 6\n             :time \"19:30\"))", "(p2 / party-01\n    :mod (b / birthday)\n    :time (d / date-entity\n             :month 11\n             :day 6\n             :time \"19:30\"))", "(o / organize-01\n   :ARG1 (p2 / party-01\n             :mod (b / birthday)\n             :time (d / date-entity\n                      :month 11\n                      :day 6\n                      :time \"19:30\")))", "(o / organize-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Anna\"))\n   :ARG1 (p2 / party-01\n             :mod (b / birthday)\n             :time (d / date-entity\n                      :month 11\n                      :day 6\n                      :time \"19:30\")))", "(o / organize-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Anna\"))\n   :ARG1 (p2 / party-01\n             :mod (b / birthday)\n             :time (d / date-entity\n                      :month 11\n                      :day 6\n                      :time \"19:30\")))"], "smus": ["Anna organizes.", "Birthday party at 19:30", "Birthday party at 19:30", "The birthday party is organized for November 6 at 19:30.", "Anna organizes a birthday party on November 6 at 19:30.", "Anna organizes a birthday party on November 6 at 19:30."]}, {"instance_id": "samsum-366", "summary": "Natalie is pregnant with Dave. Jane didn't think Sally should share it with others as Natalie told them that in confidence. Henriette and Greg are surprised that the father is Dave not Mike.", "summary_trees": ["# ::snt Natalie is pregnant with Dave.\n(ii / impregnate-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Natalie\"))\n      :ARG2 (p2 / person\n            :name (n2 / name\n                  :op1 \"Dave\")))", "# ::snt Jane didn't think Sally should share it with others as Natalie told them that in confidence.\n(t / think-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jane\"))\n      :ARG1 (r / recommend-01\n            :polarity -\n            :ARG1 (s / share-01\n                  :ARG0 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Sally\"))\n                  :ARG1 (ii / it)\n                  :ARG2 (o / other)))\n      :ARG1-of (c / cause-01\n            :ARG0 (t2 / tell-01\n                  :ARG0 (p3 / person\n                        :name (n3 / name\n                              :op1 \"Natalie\"))\n                  :ARG1 (t3 / that)\n                  :ARG2 (t4 / they)\n                  :manner (c2 / confidence))))", "# ::snt Henriette and Greg are surprised that the father is Dave not Mike.\n(s / surprise-01\n      :ARG0 (c / contrast-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Dave\")\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG2 (f / father)))\n            :ARG2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Mike\")\n                  :ARG0-of (h2 / have-rel-role-91\n                        :ARG2 f)))\n      :ARG1 (a / and\n            :op1 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Henriette\"))\n            :op2 (p4 / person\n                  :name (n4 / name\n                        :op1 \"Greg\"))))"], "tree": ["(ii / impregnate-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Natalie\")))", "(ii / impregnate-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Natalie\"))\n    :ARG2 (p2 / person\n              :name (n2 / name\n                        :op1 \"Dave\")))", "(t2 / tell-01\n    :ARG0 (p3 / person\n              :name (n3 / name\n                        :op1 \"Natalie\"))\n    :ARG1 (t3 / that))", "(t2 / tell-01\n    :ARG0 (p3 / person\n              :name (n3 / name\n                        :op1 \"Natalie\"))\n    :ARG1 (t3 / that)\n    :ARG2 (t4 / they))", "(t2 / tell-01\n    :ARG0 (p3 / person\n              :name (n3 / name\n                        :op1 \"Natalie\"))\n    :ARG1 (t3 / that)\n    :ARG2 (t4 / they)\n    :manner (c2 / confidence))", "(r / recommend-01\n   :polarity -\n   :ARG1 (s / share-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Sally\"))\n            :ARG1 (ii / it)\n            :ARG2 (o / other)))", "(c / cause-01\n   :ARG0 (t2 / tell-01\n             :ARG0 (p3 / person\n                       :name (n3 / name\n                                 :op1 \"Natalie\"))\n             :ARG1 (t3 / that)\n             :ARG2 (t4 / they)\n             :manner (c2 / confidence)))", "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jane\"))\n   :ARG1 (r / recommend-01\n            :polarity -\n            :ARG1 (s / share-01\n                     :ARG0 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Sally\"))\n                     :ARG1 (ii / it)\n                     :ARG2 (o / other))))", "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jane\"))\n   :ARG1 (r / recommend-01\n            :polarity -\n            :ARG1 (s / share-01\n                     :ARG0 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Sally\"))\n                     :ARG1 (ii / it)\n                     :ARG2 (o / other)))\n   :ARG1 (c / cause-01\n            :ARG0 (t2 / tell-01\n                      :ARG0 (p3 / person\n                                :name (n3 / name\n                                          :op1 \"Natalie\"))\n                      :ARG1 (t3 / that)\n                      :ARG2 (t4 / they)\n                      :manner (c2 / confidence))))"], "smus": ["Natalie is pregnant.", "Natalie is pregnant with Dave.", "Natalie told that.", "Natalie told them that.", "Natalie told them that with confidence.", "Sally shouldn't share it with others.", "Because Natalie told them that with confidence.", "Jane doesn't think Sally should share it with others.", "Jane doesn't think Sally should share it with others, because Natalie told them that with confidence."]}, {"instance_id": "samsum-367", "summary": "Allison has got a scholarship.", "summary_trees": ["# ::snt Allison has got a scholarship.\n(g / get-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Allison\"))\n      :ARG1 (s / scholarship))"], "tree": ["(g / get-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Allison\"))\n   :ARG1 (s / scholarship))"], "smus": ["Allison has got a scholarship."]}, {"instance_id": "samsum-368", "summary": "Miro speaks Albanian with his parents. His family left Albania illegally in 1990s.", "summary_trees": ["# ::snt Miro speaks Albanian with his parents.\n(s / speak-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Miro\"))\n      :ARG3 (l / language\n            :name (n2 / name\n                  :op1 \"Albanian\"))\n      :accompanier (p2 / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 p\n                  :ARG2 (p3 / parent))))", "# ::snt His family left Albania illegally in 1990s.\n(l / leave-11\n      :ARG0 (f / family\n            :ARG1-of (h / have-org-role-91\n                  :ARG0 (h2 / he)\n                  :ARG2 (m / member)))\n      :ARG1 (c / country\n            :name (n / name\n                  :op1 \"Albania\"))\n      :manner (l2 / legal-02\n            :polarity -)\n      :time (d / date-entity\n            :decade 1990))"], "tree": ["(h / have-rel-role-91\n   :ARG1 (p / person :name (n / name :op1 \"Miro\"))\n   :ARG2 (p3 / parent))", "(s / speak-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Miro\")))", "(s / speak-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Miro\"))\n   :ARG3 (l / language\n            :name (n2 / name\n                      :op1 \"Albanian\"))\n   :accompanier (p2 / person\n                    :ARG0 (h / have-rel-role-91\n                             :ARG1 p\n                             :ARG2 (p3 / parent))))", "(l / leave-11\n   :time (d / date-entity\n            :decade 1990))", "(l / leave-11\n   :manner (l2 / legal-02\n               :polarity -)\n   :time (d / date-entity\n            :decade 1990))", "(l / leave-11\n   :ARG0 (f / family\n            :ARG1 (h / have-org-role-91\n                     :ARG0 (h2 / he)\n                     :ARG2 (m / member))))", "(l / leave-11\n   :ARG0 (f / family\n            :ARG1 (h / have-org-role-91\n                     :ARG0 (h2 / he)\n                     :ARG2 (m / member)))\n   :ARG1 (c / country\n            :name (n / name\n                     :op1 \"Albania\")))", "(l / leave-11\n   :ARG0 (f / family\n            :ARG1 (h / have-org-role-91\n                     :ARG0 (h2 / he)\n                     :ARG2 (m / member)))\n   :ARG1 (c / country\n            :name (n / name\n                     :op1 \"Albania\"))\n   :time (d / date-entity\n            :decade 1990))", "(l / leave-11\n   :ARG0 (f / family\n            :ARG1 (h / have-org-role-91\n                     :ARG0 (h2 / he)\n                     :ARG2 (m / member)))\n   :ARG1 (c / country\n            :name (n / name\n                     :op1 \"Albania\"))\n   :manner (l2 / legal-02\n               :polarity -)\n   :time (d / date-entity\n            :decade 1990))"], "smus": ["Miro's parents.", "Miro speaks.", "Miro speaks Albanian with his parents.", "Leaved in the 1990s.", "In the 1990s illegally left.", "His family left.", "His family left Albania.", "In the 1990s his family left Albania.", "In the 1990s his family illegally left Albania."]}, {"instance_id": "samsum-369", "summary": "Barbara and Eva described their dietary requirements in the website given by Ella.", "summary_trees": ["# ::snt Barbara and Eva described their dietary requirements in the website given by Ella.\n(d / describe-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Barbara\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Eva\")))\n      :ARG1 (r / require-01\n            :ARG0 a\n            :ARG1 (d2 / diet))\n      :medium (w / website\n            :ARG1-of (g / give-01\n                  :ARG0 (p3 / person\n                        :name (n3 / name\n                              :op1 \"Ella\")))))"], "tree": ["(r / require-01\n   :ARG0 (a / and)\n   :ARG1 (d2 / diet))", "(r / require-01\n   :ARG0 (a / and)\n   :ARG1 (d2 / diet))", "(g / give-01\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Ella\")))", "(d / describe-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Barbara\"))\n   :ARG1 (r / require-01\n            :ARG0 p\n            :ARG1 (d2 / diet)))", "(d / describe-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Eva\"))\n   :ARG1 (r / require-01\n            :ARG0 p2\n            :ARG1 (d2 / diet))\n   :ARG1 r)", "(d / describe-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Barbara\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Eva\")))\n   :ARG1 (r / require-01\n            :ARG0 a\n            :ARG1 (d2 / diet)))", "(d / describe-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Barbara\"))\n   :ARG1 (r / require-01\n            :ARG0 p\n            :ARG1 (d2 / diet))\n   :medium (w / website\n              :ARG1 (g / give-01\n                       :ARG0 (p3 / person\n                                 :name (n3 / name\n                                           :op1 \"Ella\")))))", "(d / describe-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Eva\"))\n   :ARG1 (r / require-01\n            :ARG0 p2\n            :ARG1 (d2 / diet))\n   :ARG1 r\n   :medium (w / website\n              :ARG1 (g / give-01\n                       :ARG0 (p3 / person\n                                 :name (n3 / name\n                                           :op1 \"Ella\")))))", "(d / describe-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Barbara\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Eva\")))\n   :ARG1 (r / require-01\n            :ARG0 a\n            :ARG1 (d2 / diet))\n   :medium (w / website\n              :ARG1 (g / give-01\n                       :ARG0 (p3 / person\n                                 :name (n3 / name\n                                           :op1 \"Ella\")))))"], "smus": ["Dietary requirements are there.", "Dietary requirements are there.", "Ella has given.", "Barbara described her diet requirements.", "Eva described her diet requirements.", "Barbara and Eva described their diet requirements.", "Barbara described her diet requirements on the website Ella has given.", "Eva described her diet requirements on the website Ella has given.", "Barbara and Eva described their diet requirements on the website Ella has given."]}, {"instance_id": "samsum-370", "summary": "Telly, Chuck and Ally talk about a New Year's party they will attend.", "summary_trees": ["# ::snt Telly, Chuck and Ally talk about a New Year's party they will attend.\n(t / talk-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Telly\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Chuck\"))\n            :op3 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Ally\")))\n      :ARG1 (p4 / party-01\n            :ARG1-of (a2 / attend-01\n                  :ARG0 a)\n            :time (f / festival\n                  :name (n4 / name\n                        :op1 \"New\"\n                        :op2 \"Year\"))))"], "tree": ["(t / talk-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Chuck\")))", "(t / talk-01\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Ally\")))", "(p4 / party-01\n    :time (f / festival\n             :name (n4 / name\n                       :op1 \"New\"\n                       :op2 \"Year\")))", "(p4 / party-01\n    :ARG1 (a2 / attend-01\n              :ARG0 (a / and))\n    :time (f / festival\n             :name (n4 / name\n                       :op1 \"New\"\n                       :op2 \"Year\")))", "(t / talk-01\n   :ARG1 (p4 / party-01\n             :ARG1 (a2 / attend-01\n                       :ARG0 (a / and))\n             :time (f / festival\n                      :name (n4 / name\n                                :op1 \"New\"\n                                :op2 \"Year\"))))", "(t / talk-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Chuck\"))\n   :ARG1 (p4 / party-01\n             :ARG1 (a2 / attend-01\n                       :ARG0 p2)\n             :time (f / festival\n                      :name (n4 / name\n                                :op1 \"New\"\n                                :op2 \"Year\"))))", "(t / talk-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Chuck\"))\n   :ARG1 (p4 / party-01\n             :ARG1 (a2 / attend-01\n                       :ARG0 p2)\n             :time (f / festival\n                      :name (n4 / name\n                                :op1 \"New\"\n                                :op2 \"Year\"))))", "(t / talk-01\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Ally\"))\n   :ARG1 (p4 / party-01\n             :ARG1 (a2 / attend-01\n                       :ARG0 p3)\n             :time (f / festival\n                      :name (n4 / name\n                                :op1 \"New\"\n                                :op2 \"Year\")))\n   :ARG1 p4)", "(t / talk-01\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Ally\"))\n   :ARG1 (p4 / party-01\n             :ARG1 (a2 / attend-01\n                       :ARG0 p3)\n             :time (f / festival\n                      :name (n4 / name\n                                :op1 \"New\"\n                                :op2 \"Year\")))\n   :ARG1 p4)", "(t / talk-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Telly\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Chuck\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Ally\")))\n   :ARG1 (p4 / party-01\n             :ARG1 (a2 / attend-01\n                       :ARG0 a)\n             :time (f / festival\n                      :name (n4 / name\n                                :op1 \"New\"\n                                :op2 \"Year\"))))", "(t / talk-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Telly\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Chuck\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Ally\")))\n   :ARG1 (p4 / party-01\n             :ARG1 (a2 / attend-01\n                       :ARG0 a)\n             :time (f / festival\n                      :name (n4 / name\n                                :op1 \"New\"\n                                :op2 \"Year\"))))"], "smus": ["Chuck talk.", "Ally talk.", "New Year party.", "New Year is a party to attend.", "Talk about a party for the New Year to attend.", "Chuck talk about the party he will attend in the New Year.", "Chuck talk about the party he will attend in the New Year.", "Ally talk about the party she will attend in the New Year.", "Ally talk about the party she will attend in the New Year.", "Teddy, Chuck and Ally talk about the New Year party they will attend.", "Teddy, Chuck and Ally talk about the New Year party they will attend."]}, {"instance_id": "samsum-371", "summary": "Samuel ordered a smoke.", "summary_trees": ["# ::snt Samuel ordered a smoke.\n(o / order-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Samuel\"))\n      :ARG2 (s / smoke-02\n            :ARG0 p))"], "tree": ["(o / order-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Samuel\")))", "(o / order-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Samuel\"))\n   :ARG2 (s / smoke-02\n            :ARG0 p))"], "smus": ["Samuel ordered.", "Samuel ordered to smoke."]}, {"instance_id": "samsum-372", "summary": "A lot of sick people go to Nadine's clinic because of the cold weather.", "summary_trees": ["# ::snt A lot of sick people go to Nadine's clinic because of the cold weather.\n(g / go-01\n      :ARG1 (p / person\n            :ARG1-of (s / sick-05)\n            :quant (l / lot))\n      :ARG4 (c / clinic\n            :poss (p2 / person\n                  :name (n / name\n                        :op1 \"Nadia\")))\n      :ARG1-of (c2 / cause-01\n            :ARG0 (w / weather\n                  :ARG1-of (c3 / cold-01))))"], "tree": ["(c2 / cause-01\n    :ARG0 (w / weather\n             :ARG1 (c3 / cold-01)))", "(g / go-01\n   :ARG1 (p / person\n            :ARG1 (s / sick-05)\n            :quant (l / lot)))", "(g / go-01\n   :ARG1 (p / person\n            :ARG1 (s / sick-05)\n            :quant (l / lot))\n   :ARG4 (c / clinic\n            :poss (p2 / person\n                      :name (n / name\n                               :op1 \"Nadia\"))))", "(g / go-01\n   :ARG1 (p / person\n            :ARG1 (s / sick-05)\n            :quant (l / lot))\n   :ARG4 (c / clinic\n            :poss (p2 / person\n                      :name (n / name\n                               :op1 \"Nadia\")))\n   :ARG1 (c2 / cause-01\n             :ARG0 (w / weather\n                      :ARG1 (c3 / cold-01))))"], "smus": ["Because of cold weather.", "A lot of sick people go.", "A lot of sick people go to Nadia's clinic.", "A lot of sick people go to Nadia's clinic because of the cold weather."]}, {"instance_id": "samsum-373", "summary": "James informs that the next ASEEES conference will be held in San Francisco. Chloe was hoping for Hawaii. James doesn't think there will be a conference in Hawaii soon due to the high cost of travel.", "summary_trees": ["# ::snt James informs that the next ASEEES conference will be held in San Francisco.\n(ii / inform-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"James\"))\n      :ARG1 (h / hold-04\n            :ARG1 (c / conference\n                  :mod (n2 / next)\n                  :mod (o / organization\n                        :name (n3 / name\n                              :op1 \"SEEES\")))\n            :location (c2 / city\n                  :name (n4 / name\n                        :op1 \"San\"\n                        :op2 \"Francisco\"))))", "# ::snt Chloe was hoping for Hawaii.\n(h / hope-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Chloe\"))\n      :ARG1 (s / state\n            :name (n2 / name\n                  :op1 \"Hawaii\")))", "# ::snt James doesn't think there will be a conference in Hawaii soon due to the high cost of travel.\n(t / think-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"James\"))\n      :ARG1 (c / conference\n            :polarity -\n            :location (s / state\n                  :name (n2 / name\n                        :op1 \"Hawaii\"))\n            :time (s2 / soon)\n            :ARG1-of (c2 / cause-01\n                  :ARG0 (c3 / cost-01\n                        :ARG1 (t2 / travel-01)\n                        :ARG1-of (h / high-02)))))"], "tree": ["(h / hold-04\n   :location (c2 / city\n                 :name (n4 / name\n                           :op1 \"San\"\n                           :op2 \"Francisco\")))", "(h / hold-04\n   :location (c2 / city\n                 :name (n4 / name\n                           :op1 \"San\"\n                           :op2 \"Francisco\")))", "(h / hold-04\n   :ARG1 (c / conference\n            :mod (n2 / next)\n            :mod (o / organization\n                    :name (n3 / name\n                              :op1 \"SEEES\")))\n   :location (c2 / city\n                 :name (n4 / name\n                           :op1 \"San\"\n                           :op2 \"Francisco\")))", "(h / hold-04\n   :ARG1 (c / conference\n            :mod (n2 / next)\n            :mod (o / organization\n                    :name (n3 / name\n                              :op1 \"SEEES\")))\n   :location (c2 / city\n                 :name (n4 / name\n                           :op1 \"San\"\n                           :op2 \"Francisco\")))", "(ii / inform-01\n    :ARG1 (h / hold-04\n             :ARG1 (c / conference\n                      :mod (n2 / next)\n                      :mod (o / organization\n                              :name (n3 / name\n                                        :op1 \"SEEES\")))\n             :location (c2 / city\n                           :name (n4 / name\n                                     :op1 \"San\"\n                                     :op2 \"Francisco\"))))", "(c3 / cost-01\n    :ARG1 (t2 / travel-01)\n    :ARG1 (h / high-02))", "(c2 / cause-01\n    :ARG0 (c3 / cost-01\n              :ARG1 (t2 / travel-01)\n              :ARG1 (h / high-02)))", "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"James\"))\n   :ARG1 (c / conference\n            :polarity -\n            :location (s / state\n                         :name (n2 / name\n                                   :op1 \"Hawaii\"))\n            :time (s2 / soon)\n            :ARG1 (c2 / cause-01\n                      :ARG0 (c3 / cost-01\n                                :ARG1 (t2 / travel-01)\n                                :ARG1 (h / high-02)))))", "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"James\"))\n   :ARG1 (c / conference\n            :polarity -\n            :location (s / state\n                         :name (n2 / name\n                                   :op1 \"Hawaii\"))\n            :time (s2 / soon)\n            :ARG1 (c2 / cause-01\n                      :ARG0 (c3 / cost-01\n                                :ARG1 (t2 / travel-01)\n                                :ARG1 (h / high-02)))))"], "smus": ["Held in San Francisco.", "Held in San Francisco.", "The next SEEE conference will be held in San Francisco.", "The next SEEE conference will be held in San Francisco.", "The next SEEE conference will be held in San Francisco, informs.", "The cost of travel is high.", "Because of the high cost of travel.", "James doesn't think there will be a conference in Hawaii soon because of the high cost of travel.", "James doesn't think there will be a conference in Hawaii soon because of the high cost of travel."]}, {"instance_id": "samsum-374", "summary": "Lorenzo took keys from airbnb and went to the room. He's waiting for Will and Amanda.", "summary_trees": ["# ::snt Lorenzo took keys from airbnb and went to the room.\n(a / and\n      :op1 (t / take-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Lorenzo\"))\n            :ARG1 (k / key)\n            :ARG2 (c / company\n                  :name (n2 / name\n                        :op1 \"Airbnb\")))\n      :op2 (g / go-02\n            :ARG0 p\n            :ARG4 (r / room)))", "# ::snt He's waiting for Will and Amanda.\n(w / wait-01\n      :ARG1 (h / he)\n      :ARG2 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Will\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Amanda\"))))"], "tree": ["(g / go-02\n   :ARG0 (p / person :name (n / name :op1 \"Lorenzo\"))\n   :ARG4 (r / room))", "(g / go-02\n   :ARG0 (p / person :name (n / name :op1 \"Lorenzo\"))\n   :ARG4 (r / room))", "(t / take-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lorenzo\"))\n   :ARG1 (k / key))", "(t / take-01\n   :ARG1 (k / key)\n   :ARG2 (c / company\n            :name (n2 / name\n                      :op1 \"Airbnb\")))", "(t / take-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lorenzo\"))\n   :ARG1 (k / key)\n   :ARG2 (c / company\n            :name (n2 / name\n                      :op1 \"Airbnb\")))", "(t / take-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lorenzo\"))\n   :ARG1 (k / key)\n   :ARG2 (c / company\n            :name (n2 / name\n                      :op1 \"Airbnb\")))", "(w / wait-01\n   :ARG1 (h / he)\n   :ARG2 (p / person\n            :name (n / name\n                     :op1 \"Will\")))", "(w / wait-01\n   :ARG1 (h / he)\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Amanda\")))", "(w / wait-01\n   :ARG1 (h / he)\n   :ARG2 (p / person\n            :name (n / name\n                     :op1 \"Will\")))", "(w / wait-01\n   :ARG1 (h / he)\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Amanda\")))", "(w / wait-01\n   :ARG1 (h / he)\n   :ARG2 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Will\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Amanda\"))))", "(w / wait-01\n   :ARG1 (h / he)\n   :ARG2 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Will\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Amanda\"))))"], "smus": ["Lorenzo went into the room.", "Lorenzo went into the room.", "Lorenzo took the keys.", "Keys were taken from Airbnb.", "Lorenzo took the keys to Airbnb.", "Lorenzo took the keys to Airbnb.", "He's waiting for Will.", "He's waiting for Amanda.", "He's waiting for Will.", "He's waiting for Amanda.", "He's waiting for Will and Amanda.", "He's waiting for Will and Amanda."]}, {"instance_id": "samsum-375", "summary": "Sam appreciates the hotel owned by Jessica and Michael. Sam is going there on the 15th August at around 2pm.", "summary_trees": ["# ::snt Sam appreciates the hotel owned by Jessica and Michael.\n(a / appreciate-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Sam\"))\n      :ARG1 (h / hotel\n            :ARG1-of (o / own-01\n                  :ARG0 (a2 / and\n                        :op1 (p2 / person\n                              :name (n2 / name\n                                    :op1 \"Jessica\"))\n                        :op2 (p3 / person\n                              :name (n3 / name\n                                    :op1 \"Michael\"))))))", "# ::snt Sam is going there on the 15th August at around 2pm.\n(g / go-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Sam\"))\n      :ARG4 (t / there)\n      :time (d / date-entity\n            :month 8\n            :day 15\n            :time \"14:00\"))"], "tree": ["(o / own-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Jessica\")))", "(o / own-01\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Michael\")))", "(o / own-01\n   :ARG0 (a2 / and\n             :op1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Jessica\"))\n             :op2 (p3 / person\n                      :name (n3 / name\n                                :op1 \"Michael\"))))", "(a / appreciate-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sam\"))\n   :ARG1 (h / hotel\n            :ARG1 (o / own-01\n                     :ARG0 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Jessica\")))))", "(a / appreciate-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sam\"))\n   :ARG1 (h / hotel\n            :ARG1 (o / own-01\n                     :ARG0 (p3 / person\n                               :name (n3 / name\n                                         :op1 \"Michael\")))))", "(a / appreciate-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sam\"))\n   :ARG1 (h / hotel\n            :ARG1 (o / own-01\n                     :ARG0 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Jessica\")))))", "(a / appreciate-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sam\"))\n   :ARG1 (h / hotel\n            :ARG1 (o / own-01\n                     :ARG0 (p3 / person\n                               :name (n3 / name\n                                         :op1 \"Michael\")))))", "(a / appreciate-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sam\"))\n   :ARG1 (h / hotel\n            :ARG1 (o / own-01\n                     :ARG0 (a2 / and\n                               :op1 (p2 / person\n                                        :name (n2 / name\n                                                  :op1 \"Jessica\"))\n                               :op2 (p3 / person\n                                        :name (n3 / name\n                                                  :op1 \"Michael\"))))))", "(a / appreciate-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sam\"))\n   :ARG1 (h / hotel\n            :ARG1 (o / own-01\n                     :ARG0 (a2 / and\n                               :op1 (p2 / person\n                                        :name (n2 / name\n                                                  :op1 \"Jessica\"))\n                               :op2 (p3 / person\n                                        :name (n3 / name\n                                                  :op1 \"Michael\"))))))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sam\")))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sam\"))\n   :ARG4 (t / there))"], "smus": ["Jessica owns.", "Michael owns.", "Jessica and Michael are the owners.", "Sam appreciates the hotel that Jessica has owned.", "Sam appreciates the hotel Michael has owned.", "Sam appreciates the hotel that Jessica has owned.", "Sam appreciates the hotel Michael has owned.", "Sam appreciates the hotel owned by Jessica and Michael.", "Sam appreciates the hotel owned by Jessica and Michael.", "Sam is going.", "Sam was going there."]}, {"instance_id": "samsum-376", "summary": "Laura's mom passed away this morning. Anne and Kristian are showing their support to Laura.", "summary_trees": ["# ::snt Laura's mom passed away this morning.\n(p / pass-away-16\n      :ARG1 (p2 / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (p3 / person\n                        :name (n / name\n                              :op1 \"Laura\"))\n                  :ARG2 (m / mom)))\n      :time (d / date-entity\n            :dayperiod (m2 / morning)\n            :mod (t / today)))", "# ::snt Anne and Kristian are showing their support to Laura.\n(s / show-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Anne\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Kristian\")))\n      :ARG1 (s2 / support-01\n            :ARG0 a\n            :ARG1 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Laura\"))))"], "tree": ["(p / pass-away-16\n   :time (d / date-entity\n            :dayperiod (m2 / morning)\n            :mod (t / today)))", "(p / pass-away-16\n   :time (d / date-entity\n            :dayperiod (m2 / morning)\n            :mod (t / today)))", "(p / pass-away-16\n   :ARG1 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 (p3 / person\n                                :name (n / name\n                                         :op1 \"Laura\"))\n                      :ARG2 (m / mom)))\n   :time (d / date-entity\n            :dayperiod (m2 / morning)\n            :mod (t / today)))", "(p / pass-away-16\n   :ARG1 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 (p3 / person\n                                :name (n / name\n                                         :op1 \"Laura\"))\n                      :ARG2 (m / mom)))\n   :time (d / date-entity\n            :dayperiod (m2 / morning)\n            :mod (t / today)))", "(s / show-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Anne\"))\n   :ARG1 (s2 / support-01\n             :ARG0 p\n             :ARG1 (p3 / person\n                       :name (n3 / name\n                                 :op1 \"Laura\"))))", "(s / show-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Anne\"))\n   :ARG1 (s2 / support-01\n             :ARG0 p\n             :ARG1 (p3 / person\n                       :name (n3 / name\n                                 :op1 \"Laura\"))))", "(s / show-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Kristian\"))\n   :ARG1 (s2 / support-01\n             :ARG0 p2\n             :ARG1 (p3 / person\n                       :name (n3 / name\n                                 :op1 \"Laura\")))\n   :ARG1 s2)", "(s / show-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Kristian\"))\n   :ARG1 (s2 / support-01\n             :ARG0 p2\n             :ARG1 (p3 / person\n                       :name (n3 / name\n                                 :op1 \"Laura\")))\n   :ARG1 s2)", "(s / show-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Anne\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Kristian\")))\n   :ARG1 (s2 / support-01\n             :ARG0 a\n             :ARG1 (p3 / person\n                       :name (n3 / name\n                                 :op1 \"Laura\"))))", "(s / show-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Anne\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Kristian\")))\n   :ARG1 (s2 / support-01\n             :ARG0 a\n             :ARG1 (p3 / person\n                       :name (n3 / name\n                                 :op1 \"Laura\"))))"], "smus": ["passed away this morning.", "passed away this morning.", "Laura's mom passed away this morning.", "Laura's mom passed away this morning.", "Anne is showing support for Laura.", "Anne is showing support for Laura.", "Kristian is showing her support for Laura.", "Kristian is showing her support for Laura.", "Anne and Kristian are showing support for Laura.", "Anne and Kristian are showing support for Laura."]}, {"instance_id": "samsum-377", "summary": "Reeve has no plans for the winter break. Booker is going to ski in Italy. Dodson and Trish are thinking of going to the seaside somewhere near for 3/4 nights.", "summary_trees": ["# ::snt Reeve has no plans for the winter break.\n(p / plan-01\n      :polarity -\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Reeve\"))\n      :ARG1 (b / break-19\n            :time (d / date-entity\n                  :season (w / winter))))", "# ::snt Booker is going to ski in Italy.\n(s / ski-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Booker\"))\n      :ARG1 (c / country\n            :name (n2 / name\n                  :op1 \"Italy\")))", "# ::snt Dodson and Trish are thinking of going to the seaside somewhere near for 3/4 nights.\n(t / think-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Dodson\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Trish\")))\n      :ARG1 (g / go-02\n            :ARG0 a\n            :ARG4 (s / seaside\n                  :location (s2 / somewhere\n                        :ARG1-of (n3 / near-02)))\n            :duration (n4 / night\n                  :quant 3)))"], "tree": ["(b / break-19\n   :time (d / date-entity\n            :season (w / winter)))", "(b / break-19\n   :time (d / date-entity\n            :season (w / winter)))", "(p / plan-01\n   :polarity -\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Reeve\"))\n   :ARG1 (b / break-19\n            :time (d / date-entity\n                     :season (w / winter))))", "(s / ski-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Booker\")))", "(s / ski-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Booker\"))\n   :ARG1 (c / country\n            :name (n2 / name\n                      :op1 \"Italy\")))", "(g / go-02\n   :ARG0 (a / and)\n   :ARG4 (s / seaside\n            :location (s2 / somewhere\n                          :ARG1 (n3 / near-02))))", "(g / go-02\n   :ARG0 (a / and)\n   :ARG4 (s / seaside\n            :location (s2 / somewhere\n                          :ARG1 (n3 / near-02)))\n   :duration (n4 / night\n                 :quant 3))", "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dodson\"))\n   :ARG1 (g / go-02\n            :ARG0 p\n            :ARG4 (s / seaside\n                     :location (s2 / somewhere\n                                   :ARG1 (n3 / near-02)))\n            :duration (n4 / night\n                          :quant 3)))", "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dodson\"))\n   :ARG1 (g / go-02\n            :ARG0 p\n            :ARG4 (s / seaside\n                     :location (s2 / somewhere\n                                   :ARG1 (n3 / near-02)))\n            :duration (n4 / night\n                          :quant 3)))", "(t / think-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Trish\"))\n   :ARG1 (g / go-02\n            :ARG0 p2\n            :ARG4 (s / seaside\n                     :location (s2 / somewhere\n                                   :ARG1 (n3 / near-02)))\n            :duration (n4 / night\n                          :quant 3))\n   :ARG1 g)", "(t / think-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Trish\"))\n   :ARG1 (g / go-02\n            :ARG0 p2\n            :ARG4 (s / seaside\n                     :location (s2 / somewhere\n                                   :ARG1 (n3 / near-02)))\n            :duration (n4 / night\n                          :quant 3))\n   :ARG1 g)", "(t / think-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Dodson\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Trish\")))\n   :ARG1 (g / go-02\n            :ARG0 a\n            :ARG4 (s / seaside\n                     :location (s2 / somewhere\n                                   :ARG1 (n3 / near-02)))\n            :duration (n4 / night\n                          :quant 3)))", "(t / think-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Dodson\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Trish\")))\n   :ARG1 (g / go-02\n            :ARG0 a\n            :ARG4 (s / seaside\n                     :location (s2 / somewhere\n                                   :ARG1 (n3 / near-02)))\n            :duration (n4 / night\n                          :quant 3)))"], "smus": ["Winter break", "Winter break", "Reid has no plans for a winter break.", "Booker, ski.", "Booker will ski Italy.", "And the people are going to the seaside somewhere near.", "For three nights, the people were going to the seaside somewhere near.", "Dodson was thinking of going to the seaside for three nights somewhere near.", "Dodson was thinking of going to the seaside for three nights somewhere near.", "Trish is thinking of going to the seaside for three nights somewhere near.", "Trish is thinking of going to the seaside for three nights somewhere near.", "Dodson and Trish are thinking of going to the seaside for three nights somewhere near.", "Dodson and Trish are thinking of going to the seaside for three nights somewhere near."]}, {"instance_id": "samsum-378", "summary": "Sosie will be at Kyra's flat in 5 minutes. The flat number is 187.", "summary_trees": ["# ::snt Sosie will be at Kyra's flat in 5 minutes.\n(b / be-located-at-91\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Sosie\"))\n      :ARG2 (f / flat\n            :poss (p2 / person\n                  :name (n2 / name\n                        :op1 \"Kyra\")))\n      :time (a / after\n            :op1 (n3 / now)\n            :quant (t / temporal-quantity\n                  :quant 5\n                  :unit (m / minute))))", "# ::snt The flat number is 187.\n(n / number\n      :mod 187\n      :ARG1-of (f / flat-06))"], "tree": ["(b / be-located-at-91\n   :time (a / after\n            :op1 (n3 / now)\n            :quant (t / temporal-quantity\n                      :quant 5\n                      :unit (m / minute))))", "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Sosie\"))\n   :ARG2 (f / flat\n            :poss (p2 / person\n                      :name (n2 / name\n                                :op1 \"Kyra\")))\n   :time (a / after\n            :op1 (n3 / now)\n            :quant (t / temporal-quantity\n                      :quant 5\n                      :unit (m / minute))))", "(n / number\n   :mod 187\n   :ARG1-of (f / flat-06))"], "smus": ["5 minutes away.", "Sosie will be in Kyra's flat in 5 minutes.", "Flat number 187"]}, {"instance_id": "samsum-379", "summary": "Ryan is visiting family in Manchester for Christmas. Chris stayed home with Ann.", "summary_trees": ["# ::snt Ryan is visiting family in Manchester for Christmas.\n(v / visit-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Ryan\"))\n      :ARG1 (f / family\n            :location (c / city\n                  :name (n2 / name\n                        :op1 \"Manchester\")))\n      :purpose (f2 / festival\n            :name (n3 / name\n                  :op1 \"Christmas\")))", "# ::snt Chris stayed home with Ann.\n(s / stay-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Chris\"))\n      :location (h / home)\n      :accompanier (p2 / person\n            :name (n2 / name\n                  :op1 \"Ann\")))"], "tree": ["(v / visit-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ryan\")))", "(v / visit-01\n   :purpose (f2 / festival\n                :name (n3 / name\n                          :op1 \"Christmas\")))", "(v / visit-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ryan\"))\n   :ARG1 (f / family\n            :location (c / city\n                         :name (n2 / name\n                                   :op1 \"Manchester\"))))", "(v / visit-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ryan\"))\n   :ARG1 (f / family\n            :location (c / city\n                         :name (n2 / name\n                                   :op1 \"Manchester\")))\n   :purpose (f2 / festival\n                :name (n3 / name\n                          :op1 \"Christmas\")))", "(s / stay-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Chris\")))", "(s / stay-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Chris\"))\n   :location (h / home))", "(s / stay-01\n   :location (h / home)\n   :accompanier (p2 / person\n                    :name (n2 / name\n                              :op1 \"Ann\")))", "(s / stay-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Chris\"))\n   :location (h / home)\n   :accompanier (p2 / person\n                    :name (n2 / name\n                              :op1 \"Ann\")))"], "smus": ["Ryan is visiting.", "Visiting for Christmas.", "Ryan is visiting the family in Manchester.", "Ryan is visiting a family in Manchester for Christmas.", "Chris stayed.", "Chris stayed at home.", "Stayed home with Ann.", "Chris stayed home with Ann."]}, {"instance_id": "samsum-380", "summary": "Edson is booking his ticket now.", "summary_trees": ["# ::snt Edson is booking his ticket now.\n(b / book-03\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Edson\"))\n      :ARG1 (t / ticket\n            :poss p)\n      :time (n2 / now))"], "tree": ["(b / book-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Edson\"))\n   :ARG1 (t / ticket\n            :poss p)\n   :time (n2 / now))"], "smus": ["Edson is now booking his own ticket."]}, {"instance_id": "samsum-381", "summary": "Emily, Kate and Marta are going to the Pub X at the central station today for a drink.", "summary_trees": ["# ::snt Emily, Kate and Marta are going to the Pub X at the central station today for a drink.\n(g / go-02\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Emily\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Kate\"))\n            :op3 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Marta\")))\n      :ARG4 (p4 / pub\n            :name (n4 / name\n                  :op1 \"Pub\"\n                  :op2 \"X\")\n            :location (s / station\n                  :mod (c / central)))\n      :purpose (d / drink)\n      :time (t / today))"], "tree": ["(g / go-02\n   :purpose (d / drink)\n   :time (t / today))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Emily\")))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Kate\")))", "(g / go-02\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Marta\")))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Emily\"))\n   :ARG4 (p4 / pub\n             :name (n4 / name\n                       :op1 \"Pub\"\n                       :op2 \"X\")\n             :location (s / station\n                          :mod (c / central))))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Kate\"))\n   :ARG4 (p4 / pub\n             :name (n4 / name\n                       :op1 \"Pub\"\n                       :op2 \"X\")\n             :location (s / station\n                          :mod (c / central))))", "(g / go-02\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Marta\"))\n   :ARG4 (p4 / pub\n             :name (n4 / name\n                       :op1 \"Pub\"\n                       :op2 \"X\")\n             :location (s / station\n                          :mod (c / central)))\n   :ARG4 p4)", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Emily\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Kate\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Marta\"))))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Emily\"))\n   :ARG4 (p4 / pub\n             :name (n4 / name\n                       :op1 \"Pub\"\n                       :op2 \"X\")\n             :location (s / station\n                          :mod (c / central)))\n   :time (t / today))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Kate\"))\n   :ARG4 (p4 / pub\n             :name (n4 / name\n                       :op1 \"Pub\"\n                       :op2 \"X\")\n             :location (s / station\n                          :mod (c / central)))\n   :time (t / today))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Emily\"))\n   :ARG4 (p4 / pub\n             :name (n4 / name\n                       :op1 \"Pub\"\n                       :op2 \"X\")\n             :location (s / station\n                          :mod (c / central)))\n   :purpose (d / drink))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Kate\"))\n   :ARG4 (p4 / pub\n             :name (n4 / name\n                       :op1 \"Pub\"\n                       :op2 \"X\")\n             :location (s / station\n                          :mod (c / central)))\n   :purpose (d / drink))", "(g / go-02\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Marta\"))\n   :ARG4 (p4 / pub\n             :name (n4 / name\n                       :op1 \"Pub\"\n                       :op2 \"X\")\n             :location (s / station\n                          :mod (c / central)))\n   :ARG4 p4\n   :time (t / today))", "(g / go-02\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Marta\"))\n   :ARG4 (p4 / pub\n             :name (n4 / name\n                       :op1 \"Pub\"\n                       :op2 \"X\")\n             :location (s / station\n                          :mod (c / central)))\n   :ARG4 p4\n   :purpose (d / drink))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Emily\"))\n   :ARG4 (p4 / pub\n             :name (n4 / name\n                       :op1 \"Pub\"\n                       :op2 \"X\")\n             :location (s / station\n                          :mod (c / central)))\n   :purpose (d / drink)\n   :time (t / today))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Kate\"))\n   :ARG4 (p4 / pub\n             :name (n4 / name\n                       :op1 \"Pub\"\n                       :op2 \"X\")\n             :location (s / station\n                          :mod (c / central)))\n   :purpose (d / drink)\n   :time (t / today))", "(g / go-02\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Marta\"))\n   :ARG4 (p4 / pub\n             :name (n4 / name\n                       :op1 \"Pub\"\n                       :op2 \"X\")\n             :location (s / station\n                          :mod (c / central)))\n   :ARG4 p4\n   :purpose (d / drink)\n   :time (t / today))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Emily\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Kate\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Marta\")))\n   :ARG4 (p4 / pub\n             :name (n4 / name\n                       :op1 \"Pub\"\n                       :op2 \"X\")\n             :location (s / station\n                          :mod (c / central))))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Emily\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Kate\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Marta\")))\n   :ARG4 (p4 / pub\n             :name (n4 / name\n                       :op1 \"Pub\"\n                       :op2 \"X\")\n             :location (s / station\n                          :mod (c / central)))\n   :time (t / today))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Emily\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Kate\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Marta\")))\n   :ARG4 (p4 / pub\n             :name (n4 / name\n                       :op1 \"Pub\"\n                       :op2 \"X\")\n             :location (s / station\n                          :mod (c / central)))\n   :purpose (d / drink))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Emily\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Kate\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Marta\")))\n   :ARG4 (p4 / pub\n             :name (n4 / name\n                       :op1 \"Pub\"\n                       :op2 \"X\")\n             :location (s / station\n                          :mod (c / central)))\n   :purpose (d / drink)\n   :time (t / today))"], "smus": ["Going for a drink today.", "Emily is going.", "Kate is going.", "Marta is going.", "Emily was going to Pub X at central station.", "Kate was going to Pub X at central station.", "Marta was going to Pub X at central station.", "Emily, Kate and Marta are going.", "Emily was going to Pub X at central station today.", "Kate is going to Pub X at central station today.", "Emily was going to Pub X at central station for a drink.", "Kate was going to Pub X at central station for a drink.", "Marta is going to Pub X at central station today.", "Marta was going to Pub X at central station for a drink.", "Emily was going to the Pub X at central station for a drink today.", "Kate is going to the Pub X at central station for a drink today.", "Marta is going to Pub X at central station for a drink today.", "Emily, Kate and Marta are going to Pub X at central station.", "Emily, Kate and Marta are going to Pub X at central station today.", "Emily, Kate and Marta were going to Pub X at central station for a drink.", "Emily, Kate and Marta are going to Pub X at central station for a drink today."]}, {"instance_id": "samsum-382", "summary": "Kristina, Estefania and Jannette are watching America's Top Model.", "summary_trees": ["# ::snt Kristina, Estefania and Jannette are watching America's Top Model.\n(w / watch-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Kristina\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Estefania\"))\n            :op3 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Jannette\")))\n      :ARG1 (b / broadcast-program\n            :name (n4 / name\n                  :op1 \"America's\"\n                  :op2 \"Top\"\n                  :op3 \"Model\")))"], "tree": ["(w / watch-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kristina\")))", "(w / watch-01\n   :ARG1 (b / broadcast-program\n            :name (n4 / name\n                      :op1 \"America's\"\n                      :op2 \"Top\"\n                      :op3 \"Model\")))", "(w / watch-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kristina\"))\n   :ARG1 (b / broadcast-program\n            :name (n4 / name\n                      :op1 \"America's\"\n                      :op2 \"Top\"\n                      :op3 \"Model\")))", "(w / watch-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Estefania\"))\n   :ARG1 (b / broadcast-program\n            :name (n4 / name\n                      :op1 \"America's\"\n                      :op2 \"Top\"\n                      :op3 \"Model\")))", "(w / watch-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kristina\"))\n   :ARG1 (b / broadcast-program\n            :name (n4 / name\n                      :op1 \"America's\"\n                      :op2 \"Top\"\n                      :op3 \"Model\")))", "(w / watch-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Estefania\"))\n   :ARG1 (b / broadcast-program\n            :name (n4 / name\n                      :op1 \"America's\"\n                      :op2 \"Top\"\n                      :op3 \"Model\")))", "(w / watch-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Kristina\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Estefania\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Jannette\"))))"], "smus": ["Kristine is watching.", "Watching America's Top Model.", "Kristine is watching America's Top Model.", "Stefania was watching America's Top Model.", "Kristine is watching America's Top Model.", "Stefania was watching America's Top Model.", "Kristine, Stefania and Jane are watching."]}, {"instance_id": "samsum-383", "summary": "Rick and Helen are in Cancun. They're flying to Havana in two days. Chris and Rick will talk on Skype at 3 PM in Mexico.", "summary_trees": ["# ::snt Rick and Helen are in Cancun.\n(b / be-located-at-91\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Rick\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Helen\")))\n      :ARG2 (c / city\n            :name (n3 / name\n                  :op1 \"Cancun\")))", "# ::snt They're flying to Havana in two days.\n(f / fly-01\n      :ARG1 (t / they)\n      :destination (c / city\n            :name (n / name\n                  :op1 \"Havana\"))\n      :time (a / after\n            :op1 (n2 / now)\n            :quant (t2 / temporal-quantity\n                  :quant 2\n                  :unit (d / day))))", "# ::snt Chris and Rick will talk on Skype at 3 PM in Mexico.\n(t / talk-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Chris\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Rick\")))\n      :medium (p3 / product\n            :name (n3 / name\n                  :op1 \"Skype\"))\n      :time (d / date-entity\n            :time \"15:00\")\n      :location (c / country\n            :name (n4 / name\n                  :op1 \"Mexico\")))"], "tree": ["(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Rick\"))\n   :ARG2 (c / city\n            :name (n3 / name\n                      :op1 \"Cancun\")))", "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Rick\"))\n   :ARG2 (c / city\n            :name (n3 / name\n                      :op1 \"Cancun\")))", "(b / be-located-at-91\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Helen\"))\n   :ARG2 (c / city\n            :name (n3 / name\n                      :op1 \"Cancun\"))\n   :ARG2 c)", "(b / be-located-at-91\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Helen\"))\n   :ARG2 (c / city\n            :name (n3 / name\n                      :op1 \"Cancun\"))\n   :ARG2 c)", "(b / be-located-at-91\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Rick\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Helen\")))\n   :ARG2 (c / city\n            :name (n3 / name\n                      :op1 \"Cancun\")))", "(b / be-located-at-91\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Rick\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Helen\")))\n   :ARG2 (c / city\n            :name (n3 / name\n                      :op1 \"Cancun\")))", "(f / fly-01\n   :destination (c / city\n                   :name (n / name\n                            :op1 \"Havana\")))", "(f / fly-01\n   :destination (c / city\n                   :name (n / name\n                            :op1 \"Havana\")))", "(f / fly-01\n   :destination (c / city\n                   :name (n / name\n                            :op1 \"Havana\")))", "(f / fly-01\n   :ARG1 (t / they)\n   :destination (c / city\n                   :name (n / name\n                            :op1 \"Havana\")))", "(f / fly-01\n   :time (a / after\n            :op1 (n2 / now)\n            :quant (t2 / temporal-quantity\n                       :quant 2\n                       :unit (d / day))))", "(f / fly-01\n   :ARG1 (t / they)\n   :time (a / after\n            :op1 (n2 / now)\n            :quant (t2 / temporal-quantity\n                       :quant 2\n                       :unit (d / day))))", "(f / fly-01\n   :destination (c / city\n                   :name (n / name\n                            :op1 \"Havana\"))\n   :time (a / after\n            :op1 (n2 / now)\n            :quant (t2 / temporal-quantity\n                       :quant 2\n                       :unit (d / day))))", "(f / fly-01\n   :destination (c / city\n                   :name (n / name\n                            :op1 \"Havana\"))\n   :time (a / after\n            :op1 (n2 / now)\n            :quant (t2 / temporal-quantity\n                       :quant 2\n                       :unit (d / day))))", "(f / fly-01\n   :ARG1 (t / they)\n   :destination (c / city\n                   :name (n / name\n                            :op1 \"Havana\"))\n   :time (a / after\n            :op1 (n2 / now)\n            :quant (t2 / temporal-quantity\n                       :quant 2\n                       :unit (d / day))))", "(f / fly-01\n   :ARG1 (t / they)\n   :destination (c / city\n                   :name (n / name\n                            :op1 \"Havana\"))\n   :time (a / after\n            :op1 (n2 / now)\n            :quant (t2 / temporal-quantity\n                       :quant 2\n                       :unit (d / day))))", "(t / talk-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Chris\")))", "(t / talk-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Rick\")))", "(t / talk-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Chris\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Rick\"))))"], "smus": ["Rick is in Cancun.", "Rick is in Cancun.", "Helen is in Cancun.", "Helen is in Cancun.", "Rick and Helen are in Cancun.", "Rick and Helen are in Cancun.", "Flying to Havana.", "Flying to Havana.", "Flying to Havana.", "They are flying to Havana.", "Flying in 2 days.", "They will be flying in 2 days.", "Flight to Havana will be in 2 days.", "Flight to Havana will be in 2 days.", "They will be flying to Havana in 2 days.", "They will be flying to Havana in 2 days.", "Chris will talk.", "Rick is going to talk.", "Chris and Rick will talk."]}, {"instance_id": "samsum-384", "summary": "While redesigning the interior, Steph looks for copper-coloured hangers.", "summary_trees": ["# ::snt While redesigning the interior, Steph looks for copper-coloured hangers.\n(l / look-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Steph\"))\n      :ARG1 (h / hanger\n            :ARG1-of (c / color-01\n                  :ARG2 (c2 / copper)))\n      :time (r / redesign-01\n            :ARG0 p\n            :ARG1 (ii / interior)))"], "tree": ["(r / redesign-01\n   :ARG0 (p / person :name (n / name :op1 \"Steph\"))\n   :ARG1 (ii / interior))"], "smus": ["Stephanie is redesigning the interior."]}, {"instance_id": "samsum-385", "summary": "Fatima is worried about Jenson and Alene. Alene has issues. Lincoln doesn't want Fatima to worry about others too much.", "summary_trees": ["# ::snt Fatima is worried about Jenson and Alene.\n(w / worry-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Fatima\"))\n      :ARG1 (a / and\n            :op1 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Jenson\"))\n            :op2 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Alene\"))))", "# ::snt Alene has issues.\n(ii / issue-02\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Alene\")))", "# ::snt Lincoln doesn't want Fatima to worry about others too much.\n(w / want-01\n      :polarity -\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Lincoln\"))\n      :ARG1 (w2 / worry-02\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Fatima\"))\n            :ARG1 (o / other)\n            :ARG1-of (h / have-quant-91\n                  :ARG2 (m / much)\n                  :ARG3 (t / too))))"], "tree": ["(w / worry-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Fatima\")))", "(w / worry-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Fatima\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Jenson\")))", "(w / worry-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Fatima\"))\n   :ARG1 (p3 / person\n             :name (n3 / name\n                       :op1 \"Alene\")))", "(w / worry-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Fatima\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Jenson\")))", "(w / worry-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Fatima\"))\n   :ARG1 (p3 / person\n             :name (n3 / name\n                       :op1 \"Alene\")))", "(w / worry-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Fatima\"))\n   :ARG1 (a / and\n            :op1 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Jenson\"))\n            :op2 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Alene\"))))", "(w / worry-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Fatima\"))\n   :ARG1 (a / and\n            :op1 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Jenson\"))\n            :op2 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Alene\"))))", "(ii / issue-02\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Alene\")))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lincoln\"))\n   :ARG1 (w2 / worry-02\n             :ARG0 (p2 / person\n                       :name (n2 / name\n                                 :op1 \"Fatima\"))\n             :ARG1 (o / other)\n             :ARG1 (h / have-quant-91\n                      :ARG2 (m / much)\n                      :ARG3 (t / too))))", "(w / want-01\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lincoln\"))\n   :ARG1 (w2 / worry-02\n             :ARG0 (p2 / person\n                       :name (n2 / name\n                                 :op1 \"Fatima\"))\n             :ARG1 (o / other)\n             :ARG1 (h / have-quant-91\n                      :ARG2 (m / much)\n                      :ARG3 (t / too))))"], "smus": ["Fatima is worried.", "Fatima worried about Jenson.", "Fatima worried about Alena.", "Fatima worried about Jenson.", "Fatima worried about Alena.", "Fatima is worried about Jenson and Alene.", "Fatima is worried about Jenson and Alene.", "issues with Alene.", "Lincoln doesn't want Fatima to worry about others too much.", "Lincoln doesn't want Fatima to worry about others too much."]}, {"instance_id": "samsum-386", "summary": "Today Mary didn't go to school, she stayed at home.", "summary_trees": ["# ::snt Today Mary didn't go to school, she stayed at home.\n(a / and\n      :op1 (g / go-02\n            :polarity -\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Mary\"))\n            :ARG4 (s / school))\n      :op2 (s2 / stay-01\n            :ARG1 p\n            :location (h / home))\n      :time (t / today))"], "tree": ["(s2 / stay-01\n    :ARG1 (p / person :name (n / name :op1 \"Mary\"))\n    :location (h / home))", "(s2 / stay-01\n    :ARG1 (p / person :name (n / name :op1 \"Mary\"))\n    :location (h / home))", "(g / go-02\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mary\"))\n   :ARG4 (s / school))"], "smus": ["Mary stayed at home.", "Mary stayed at home.", "Mary didn't go to school."]}, {"instance_id": "samsum-387", "summary": "Gary is a driver for Uber and he really enjoys it.", "summary_trees": ["# ::snt Gary is a driver for Uber and he really enjoys it.\n(a / and\n      :op1 (d / drive-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Gary\"))\n            :ARG1 (c / company\n                  :name (n2 / name\n                        :op1 \"Uber\")))\n      :op2 (e / enjoy-01\n            :ARG0 p\n            :ARG1 d\n            :degree (r / really)))"], "tree": ["(e / enjoy-01\n   :ARG0 (p / person :name (n / name :op1 \"Gary\"))\n   :ARG1 (d / drive-01)\n   :degree (r / really))", "(d / drive-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Gary\")))", "(d / drive-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Gary\"))\n   :ARG1 (c / company\n            :name (n2 / name\n                      :op1 \"Uber\")))", "(d / drive-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Gary\"))\n   :ARG1 (c / company\n            :name (n2 / name\n                      :op1 \"Uber\")))"], "smus": ["Gary really enjoys driving.", "Gary is the driver.", "Gary is the Uber driver.", "Gary is the Uber driver."]}, {"instance_id": "samsum-388", "summary": "When Wanda and Hugh arrive, they will quickly make the pizza and get started. They need to make the base and prepare everything earlier. ", "summary_trees": ["# ::snt When Wanda and Hugh arrive, they will quickly make the pizza and get started.\n(a / and\n      :op1 (m / make-01\n            :ARG0 (a2 / and\n                  :op1 (p / person\n                        :name (n / name\n                              :op1 \"Wanda\"))\n                  :op2 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Hugh\")))\n            :ARG1 (p3 / pizza)\n            :ARG1-of (q / quick-02))\n      :op2 (s / start-01\n            :ARG0 a2)\n      :time (a3 / arrive-01\n            :ARG1 a2))", "# ::snt They need to make the base and prepare everything earlier.\n(n / need-01\n      :ARG0 (t / they)\n      :ARG1 (a / and\n            :op1 (m / make-01\n                  :ARG0 t\n                  :ARG1 (b / base))\n            :op2 (p / prepare-01\n                  :ARG0 t\n                  :ARG1 (e / everything)\n                  :time (b2 / before\n                        :op1 (n2 / now)))))"], "tree": ["(m / make-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Wanda\"))\n   :ARG1 (p3 / pizza))", "(m / make-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Wanda\"))\n   :ARG1 (p3 / pizza)\n   :ARG1 (q / quick-02))", "(m / make-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Hugh\"))\n   :ARG1 (p3 / pizza)\n   :ARG1 p3\n   :ARG1 (q / quick-02))", "(m / make-01\n   :ARG0 (a2 / and\n             :op1 (p / person\n                     :name (n / name\n                              :op1 \"Wanda\"))\n             :op2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Hugh\")))\n   :ARG1 (p3 / pizza)\n   :ARG1 (q / quick-02))", "(p / prepare-01\n   :time (b2 / before\n             :op1 (n2 / now)))", "(n / need-01\n   :ARG1 (m / make-01\n            :ARG0 (t / they)\n            :ARG1 (b / base)))", "(n / need-01\n   :ARG0 (t / they)\n   :ARG1 (m / make-01\n            :ARG0 t\n            :ARG1 (b / base)))", "(n / need-01\n   :ARG0 (t / they)\n   :ARG1 (m / make-01\n            :ARG0 t\n            :ARG1 (b / base)))", "(n / need-01\n   :ARG1 (p / prepare-01\n            :ARG0 (t / they)\n            :ARG1 (e / everything)\n            :time (b2 / before\n                      :op1 (n2 / now))))", "(n / need-01\n   :ARG0 (t / they)\n   :ARG1 (p / prepare-01\n            :ARG0 t\n            :ARG1 (e / everything)\n            :time (b2 / before\n                      :op1 (n2 / now))))", "(n / need-01\n   :ARG0 (t / they)\n   :ARG1 (p / prepare-01\n            :ARG0 t\n            :ARG1 (e / everything)\n            :time (b2 / before\n                      :op1 (n2 / now))))", "(n / need-01\n   :ARG1 (a / and\n            :op1 (m / make-01\n                    :ARG0 (t / they)\n                    :ARG1 (b / base))\n            :op2 (p / prepare-01\n                    :ARG0 t\n                    :ARG1 (e / everything)\n                    :time (b2 / before\n                              :op1 (n2 / now)))))", "(n / need-01\n   :ARG0 (t / they)\n   :ARG1 (a / and\n            :op1 (m / make-01\n                    :ARG0 t\n                    :ARG1 (b / base))\n            :op2 (p / prepare-01\n                    :ARG0 t\n                    :ARG1 (e / everything)\n                    :time (b2 / before\n                              :op1 (n2 / now)))))", "(n / need-01\n   :ARG0 (t / they)\n   :ARG1 (a / and\n            :op1 (m / make-01\n                    :ARG0 t\n                    :ARG1 (b / base))\n            :op2 (p / prepare-01\n                    :ARG0 t\n                    :ARG1 (e / everything)\n                    :time (b2 / before\n                              :op1 (n2 / now)))))"], "smus": ["Wand would make pizza.", "Wand would make a pizza quick.", "Hughes would make a pizza out of it quickly.", "Wanda and Hughes will make pizza quick.", "Prepare earlier.", "They need to make a base.", "They need to make a base.", "They need to make a base.", "They need to prepare everything from before now.", "They need to prepare everything from before now.", "They need to prepare everything from before now.", "They need to make a base and prepare everything from before now.", "They need to make a base and prepare everything from before now.", "They need to make a base and prepare everything from before now."]}, {"instance_id": "samsum-389", "summary": "Andre is shocked after reading the news about a bear attack at the zoo. Megan is not surprised that an animal kept in a cage reacted that way.", "summary_trees": ["# ::snt Andre is shocked after reading the news about a bear attack at the zoo.\n(s / shock-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Andre\"))\n      :time (a / after\n            :op1 (r / read-01\n                  :ARG0 p\n                  :ARG1 (n2 / news\n                        :topic (a2 / attack-01\n                              :ARG1 (b / bear)\n                              :location (z / zoo))))))", "# ::snt Megan is not surprised that an animal kept in a cage reacted that way.\n(s / surprise-01\n      :polarity -\n      :ARG0 (r / react-01\n            :ARG0 (a / animal\n                  :ARG1-of (k / keep-01\n                        :location (c / cage)))\n            :ARG1 (w / way\n                  :mod (t / that)))\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Megan\")))"], "tree": ["(a2 / attack-01\n    :ARG1 (b / bear)\n    :location (z / zoo))", "(s / shock-01\n   :time (a / after\n            :op1 (r / read-01)))", "(s / shock-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Andre\")))", "(r / read-01\n   :ARG1 (n2 / news\n             :topic (a2 / attack-01\n                        :ARG1 (b / bear)\n                        :location (z / zoo))))", "(r / read-01\n   :ARG0 (p / person :name (n / name :op1 \"Andre\"))\n   :ARG1 (n2 / news\n             :topic (a2 / attack-01\n                        :ARG1 (b / bear)\n                        :location (z / zoo))))", "(r / read-01\n   :ARG0 (p / person :name (n / name :op1 \"Andre\"))\n   :ARG1 (n2 / news\n             :topic (a2 / attack-01\n                        :ARG1 (b / bear)\n                        :location (z / zoo))))", "(s / shock-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Andre\"))\n   :time (a / after\n            :op1 (r / read-01\n                    :ARG0 p\n                    :ARG1 (n2 / news\n                              :topic (a2 / attack-01\n                                         :ARG1 (b / bear)\n                                         :location (z / zoo))))))", "(r / react-01\n   :ARG1 (w / way\n            :mod (t / that)))", "(r / react-01\n   :ARG0 (a / animal\n            :ARG1 (k / keep-01\n                     :location (c / cage)))\n   :ARG1 (w / way\n            :mod (t / that)))", "(r / react-01\n   :ARG0 (a / animal\n            :ARG1 (k / keep-01\n                     :location (c / cage)))\n   :ARG1 (w / way\n            :mod (t / that)))", "(s / surprise-01\n   :polarity -\n   :ARG0 (r / react-01\n            :ARG0 (a / animal\n                     :ARG1 (k / keep-01\n                              :location (c / cage)))\n            :ARG1 (w / way\n                     :mod (t / that))))", "(s / surprise-01\n   :polarity -\n   :ARG0 (r / react-01\n            :ARG0 (a / animal\n                     :ARG1 (k / keep-01\n                              :location (c / cage)))\n            :ARG1 (w / way\n                     :mod (t / that)))\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Megan\")))"], "smus": ["A bear attack at a zoo.", "After reading, shocked.", "Andre was shocked.", "Reading the news about the bear attack at the zoo.", "Andr\u00e9 was reading news of the bear attack at the zoo.", "Andr\u00e9 was reading news of the bear attack at the zoo.", "Andr\u00e9 was shocked after reading the news of the bear attack at the zoo.", "Reacted that way.", "The animal kept in a cage reacted that way.", "The animal kept in a cage reacted that way.", "Not surprised that the animal kept in a cage is reacting that way.", "Megan was not surprised that the animal kept in a cage was reacting that way."]}, {"instance_id": "samsum-390", "summary": "Alan has found some cinnamon whiskey and sends Robert photos of it. ", "summary_trees": ["# ::snt Alan has found some cinnamon whiskey and sends Robert photos of it.\n(a / and\n      :op1 (f / find-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Alan\"))\n            :ARG1 (w / whiskey\n                  :mod (c / cinnamon)\n                  :mod (s / some)))\n      :op2 (s2 / send-01\n            :ARG0 p\n            :ARG1 (p2 / photograph-01\n                  :ARG1 w)\n            :ARG2 (p3 / person\n                  :name (n2 / name\n                        :op1 \"Robert\"))))"], "tree": ["(s2 / send-01\n    :ARG0 (p / person :name (n / name :op1 \"Alan\"))\n    :ARG1 (p2 / photograph-01\n              :ARG1 (w / whiskey)))", "(f / find-01\n   :ARG1 (w / whiskey\n            :mod (c / cinnamon)\n            :mod (s / some)))", "(s2 / send-01\n    :ARG0 (p / person :name (n / name :op1 \"Alan\"))\n    :ARG1 (p2 / photograph-01\n              :ARG1 (w / whiskey))\n    :ARG2 (p3 / person\n              :name (n2 / name\n                        :op1 \"Robert\")))", "(s2 / send-01\n    :ARG0 (p / person :name (n / name :op1 \"Alan\"))\n    :ARG1 (p2 / photograph-01\n              :ARG1 (w / whiskey))\n    :ARG2 (p3 / person\n              :name (n2 / name\n                        :op1 \"Robert\")))", "(f / find-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Alan\"))\n   :ARG1 (w / whiskey\n            :mod (c / cinnamon)\n            :mod (s / some)))", "(f / find-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Alan\"))\n   :ARG1 (w / whiskey\n            :mod (c / cinnamon)\n            :mod (s / some)))"], "smus": ["Alan sends photos of whiskey.", "Some cinnamon whiskey was found.", "Alan sends Robert photos of whiskey.", "Alan sends Robert photos of whiskey.", "Alan has found some cinnamon whiskey.", "Alan has found some cinnamon whiskey."]}, {"instance_id": "samsum-391", "summary": "Tabby has 2 exams next week. Laura passed all her exams but one. Tabby may come to Daisy's party on Saturday, depending on her studying progress. ", "summary_trees": ["# ::snt Tabby has 2 exams next week.\n(h / have-06\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Tabby\"))\n      :ARG1 (e / exam\n            :quant 2)\n      :time (w / week\n            :mod (n2 / next)))", "# ::snt Laura passed all her exams but one.\n(p / pass-07\n      :ARG1 (p2 / person\n            :name (n / name\n                  :op1 \"Laura\"))\n      :ARG2 (e / exam\n            :mod (a / all)\n            :poss p2\n            :ARG2-of (e2 / except-01\n                  :ARG1 (e3 / exam\n                        :quant 1))))", "# ::snt Tabby may come to Daisy's party on Saturday, depending on her studying progress.\n(p / possible-01\n      :ARG1 (c / come-01\n            :ARG1 (p2 / person\n                  :name (n / name\n                        :op1 \"Tabby\"))\n            :ARG4 (p3 / party-01\n                  :ARG0 (p4 / person\n                        :name (n2 / name\n                              :op1 \"Daisy\")))\n            :time (d / date-entity\n                  :weekday (s / saturday)))\n      :ARG0-of (d2 / depend-01\n            :ARG1 (p5 / progress-01\n                  :ARG1 (s2 / study-01\n                        :ARG0 p2))))"], "tree": ["(h / have-06\n   :time (w / week\n            :mod (n2 / next)))", "(h / have-06\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tabby\"))\n   :ARG1 (e / exam\n            :quant 2)\n   :time (w / week\n            :mod (n2 / next)))", "(e2 / except-01\n    :ARG1 (e3 / exam\n              :quant 1))", "(p / pass-07\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Laura\"))\n   :ARG2 (e / exam\n            :mod (a / all)\n            :poss p2\n            :ARG2 (e2 / except-01\n                      :ARG1 (e3 / exam\n                                :quant 1))))", "(p5 / progress-01\n    :ARG1 (s2 / study-01\n              :ARG0 (p2 / person :name (n / name :op1 \"Tabby\"))))", "(p5 / progress-01\n    :ARG1 (s2 / study-01\n              :ARG0 (p2 / person :name (n / name :op1 \"Tabby\"))))", "(c / come-01\n   :time (d / date-entity\n            :weekday (s / saturday)))", "(c / come-01\n   :time (d / date-entity\n            :weekday (s / saturday)))", "(c / come-01\n   :time (d / date-entity\n            :weekday (s / saturday)))", "(d2 / depend-01\n    :ARG1 (p5 / progress-01\n              :ARG1 (s2 / study-01\n                        :ARG0 (p2 / person :name (n / name :op1 \"Tabby\")))))", "(p3 / party-01\n    :ARG0 (p4 / person\n              :name (n2 / name\n                        :op1 \"Daisy\")))", "(p3 / party-01\n    :ARG0 (p4 / person\n              :name (n2 / name\n                        :op1 \"Daisy\")))", "(c / come-01\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Tabby\"))\n   :time (d / date-entity\n            :weekday (s / saturday)))"], "smus": ["Has next week.", "Next week, Tabby has two exams.", "Except for one exam.", "Laura passed all her exams except one.", "Progress in Tabby's studies.", "Progress in Tabby's studies.", "Come Saturday.", "Come Saturday.", "Come Saturday.", "Depending on the progress of Tabby's studies.", "Daisy is in the party.", "Daisy is in the party.", "Come on Saturday."]}, {"instance_id": "samsum-392", "summary": "Julia was at cafe Kohaku near Covent Garden last week, but it's closed down now to her and Henry's surprise. She contacted the owners, but they haven't replied yet. Henry and his cousin went to the Lily's in the end, but it had a different vibe.", "summary_trees": ["# ::snt Julia was at cafe Kohaku near Covent Garden last week, but it's closed down now to her and Henry's surprise.\n(c / contrast-01\n      :ARG1 (b / be-located-at-91\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Julia\"))\n            :ARG2 (c2 / cafe\n                  :name (n2 / name\n                        :op1 \"Kohaku\")\n                  :ARG1-of (n3 / near-02\n                        :ARG2 (c3 / city-district\n                              :name (n4 / name\n                                    :op1 \"Covent\"\n                                    :op2 \"Garden\"))))\n            :time (w / week\n                  :mod (l / last)))\n      :ARG2 (c4 / close-down-04\n            :ARG1 c2\n            :time (n5 / now)\n            :ARG0-of (s / surprise-01\n                  :ARG1 (a / and\n                        :op1 p\n                        :op2 (p2 / person\n                              :name (n6 / name\n                                    :op1 \"Henry\"))))))", "# ::snt She contacted the owners, but they haven't replied yet.\n(c / contrast-01\n      :ARG1 (c2 / contact-01\n            :ARG0 (s / she)\n            :ARG1 (p / person\n                  :ARG0-of (o / own-01)))\n      :ARG2 (r / reply-01\n            :polarity -\n            :ARG0 p\n            :time (y / yet)))", "# ::snt Henry and his cousin went to the Lily's in the end, but it had a different vibe.\n(g / go-02\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Henry\"))\n            :op2 (p2 / person\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 p\n                        :ARG2 (c / cousin))))\n      :ARG4 (f / family\n            :name (n2 / name\n                  :op1 \"Lily's\"))\n      :time (e / end-01)\n      :concession (v / vibe\n            :ARG1-of (d / differ-02)\n            :poss (ii / it)))"], "tree": ["(b / be-located-at-91\n   :time (w / week\n            :mod (l / last)))", "(s / surprise-01\n   :ARG1 (p2 / person\n             :name (n6 / name\n                       :op1 \"Henry\")))", "(n3 / near-02\n    :ARG2 (c3 / city-district\n              :name (n4 / name\n                        :op1 \"Covent\"\n                        :op2 \"Garden\")))", "(c4 / close-down-04\n    :ARG1 (c2 / cafe :name (n2 / name :op1 \"Kohaku\")))\n    :time (n5 / now)\n    :ARG0 (s / surprise-01\n             :ARG1 (p / person :name (n / name :op1 \"Julia\"))))", "(s / surprise-01\n   :ARG1 (a / and\n            :op1 (p / person :name (n / name :op1 \"Julia\"))\n            :op2 (p2 / person\n                     :name (n6 / name\n                               :op1 \"Henry\"))))", "(c4 / close-down-04\n    :ARG1 (c2 / cafe :name (n2 / name :op1 \"Kohaku\")))\n    :time (n5 / now)\n    :ARG0 (s / surprise-01\n             :ARG1 (p2 / person\n                       :name (n6 / name\n                                 :op1 \"Henry\"))))", "(c4 / close-down-04\n    :ARG1 (c2 / cafe :name (n2 / name :op1 \"Kohaku\")))\n    :time (n5 / now)\n    :ARG0 (s / surprise-01\n             :ARG1 (a / and\n                      :op1 (p / person :name (n / name :op1 \"Julia\"))\n                      :op2 (p2 / person\n                               :name (n6 / name\n                                         :op1 \"Henry\")))))", "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Julia\"))\n   :ARG2 (c2 / cafe\n             :name (n2 / name\n                       :op1 \"Kohaku\")\n             :ARG1 (n3 / near-02\n                       :ARG2 (c3 / city-district\n                                 :name (n4 / name\n                                           :op1 \"Covent\"\n                                           :op2 \"Garden\"))))\n   :time (w / week\n            :mod (l / last)))", "(c / contrast-01\n   :ARG1 (b / be-located-at-91\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Julia\"))\n            :ARG2 (c2 / cafe\n                      :name (n2 / name\n                                :op1 \"Kohaku\")\n                      :ARG1 (n3 / near-02\n                                :ARG2 (c3 / city-district\n                                          :name (n4 / name\n                                                    :op1 \"Covent\"\n                                                    :op2 \"Garden\"))))\n            :time (w / week\n                     :mod (l / last)))\n   :ARG2 (c4 / close-down-04\n             :ARG1 c2\n             :time (n5 / now)\n             :ARG0 (s / surprise-01\n                      :ARG1 p)))", "(c / contrast-01\n   :ARG1 (b / be-located-at-91\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Julia\"))\n            :ARG2 (c2 / cafe\n                      :name (n2 / name\n                                :op1 \"Kohaku\")\n                      :ARG1 (n3 / near-02\n                                :ARG2 (c3 / city-district\n                                          :name (n4 / name\n                                                    :op1 \"Covent\"\n                                                    :op2 \"Garden\"))))\n            :time (w / week\n                     :mod (l / last)))\n   :ARG2 (c4 / close-down-04\n             :ARG1 c2\n             :time (n5 / now)\n             :ARG0 (s / surprise-01\n                      :ARG1 (p2 / person\n                                :name (n6 / name\n                                          :op1 \"Henry\")))))", "(c / contrast-01\n   :ARG1 (b / be-located-at-91\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Julia\"))\n            :ARG2 (c2 / cafe\n                      :name (n2 / name\n                                :op1 \"Kohaku\")\n                      :ARG1 (n3 / near-02\n                                :ARG2 (c3 / city-district\n                                          :name (n4 / name\n                                                    :op1 \"Covent\"\n                                                    :op2 \"Garden\"))))\n            :time (w / week\n                     :mod (l / last)))\n   :ARG2 (c4 / close-down-04\n             :ARG1 c2\n             :time (n5 / now)\n             :ARG0 (s / surprise-01\n                      :ARG1 (a / and\n                               :op1 p\n                               :op2 (p2 / person\n                                        :name (n6 / name\n                                                  :op1 \"Henry\"))))))", "(r / reply-01\n   :polarity -\n   :time (y / yet))", "(r / reply-01\n   :polarity -\n   :ARG0 (p / person)\n   :time (y / yet))", "(c2 / contact-01\n    :ARG0 (s / she)\n    :ARG1 (p / person\n             :ARG0 (o / own-01)))", "(c2 / contact-01\n    :ARG0 (s / she)\n    :ARG1 (p / person\n             :ARG0 (o / own-01)))", "(c / contrast-01\n   :ARG1 (c2 / contact-01\n             :ARG0 (s / she)\n             :ARG1 (p / person\n                      :ARG0 (o / own-01)))\n   :ARG2 (r / reply-01\n            :polarity -\n            :ARG0 p\n            :time (y / yet)))", "(c / contrast-01\n   :ARG1 (c2 / contact-01\n             :ARG0 (s / she)\n             :ARG1 (p / person\n                      :ARG0 (o / own-01)))\n   :ARG2 (r / reply-01\n            :polarity -\n            :ARG0 p\n            :time (y / yet)))", "(h / have-rel-role-91\n   :ARG1 (p / person :name (n / name :op1 \"Henry\"))\n   :ARG2 (c / cousin))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Henry\")))", "(g / go-02\n   :time (e / end-01)\n   :concession (v / vibe\n                  :poss (ii / it)))", "(g / go-02\n   :ARG0 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 (p / person :name (n / name :op1 \"Henry\"))\n                      :ARG2 (c / cousin))))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Henry\"))\n   :ARG4 (f / family\n            :name (n2 / name\n                      :op1 \"Lily's\")))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Henry\"))\n   :ARG4 (f / family\n            :name (n2 / name\n                      :op1 \"Lily's\"))\n   :time (e / end-01))", "(g / go-02\n   :ARG0 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 (p / person :name (n / name :op1 \"Henry\"))\n                      :ARG2 (c / cousin)))\n   :ARG4 (f / family\n            :name (n2 / name\n                      :op1 \"Lily's\"))\n   :ARG4 f)", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Henry\"))\n            :op2 (p2 / person\n                     :ARG0 (h / have-rel-role-91\n                              :ARG1 p\n                              :ARG2 (c / cousin)))))", "(g / go-02\n   :ARG0 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 (p / person :name (n / name :op1 \"Henry\"))\n                      :ARG2 (c / cousin)))\n   :ARG4 (f / family\n            :name (n2 / name\n                      :op1 \"Lily's\"))\n   :ARG4 f\n   :time (e / end-01))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Henry\"))\n   :ARG4 (f / family\n            :name (n2 / name\n                      :op1 \"Lily's\"))\n   :time (e / end-01)\n   :concession (v / vibe\n                  :ARG1 (d / differ-02)\n                  :poss (ii / it)))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Henry\"))\n            :op2 (p2 / person\n                     :ARG0 (h / have-rel-role-91\n                              :ARG1 p\n                              :ARG2 (c / cousin))))\n   :ARG4 (f / family\n            :name (n2 / name\n                      :op1 \"Lily's\")))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Henry\"))\n            :op2 (p2 / person\n                     :ARG0 (h / have-rel-role-91\n                              :ARG1 p\n                              :ARG2 (c / cousin))))\n   :ARG4 (f / family\n            :name (n2 / name\n                      :op1 \"Lily's\"))\n   :time (e / end-01))", "(g / go-02\n   :ARG0 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 (p / person :name (n / name :op1 \"Henry\"))\n                      :ARG2 (c / cousin)))\n   :ARG4 (f / family\n            :name (n2 / name\n                      :op1 \"Lily's\"))\n   :ARG4 f\n   :time (e / end-01)\n   :concession (v / vibe\n                  :ARG1 (d / differ-02)\n                  :poss (ii / it)))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Henry\"))\n            :op2 (p2 / person\n                     :ARG0 (h / have-rel-role-91\n                              :ARG1 p\n                              :ARG2 (c / cousin))))\n   :ARG4 (f / family\n            :name (n2 / name\n                      :op1 \"Lily's\"))\n   :time (e / end-01)\n   :concession (v / vibe\n                  :ARG1 (d / differ-02)\n                  :poss (ii / it)))"], "smus": ["Last week.", "Henry was a surprise.", "Near Covent Garden.", "The Kohaku cafe has now closed down due to Julia's surprise.", "Julia and Henry are a surprise.", "Now the Kohaku cafe is closed down due to Henry's surprise.", "The Kohaku cafe has now closed down due to the surprise of Julia and Henry.", "Julia was at the Kohaku cafe near Covent Garden last week.", "Julia was at the Kohaku cafe near Covent Garden last week but it has now closed down due to surprise.", "Julia was at the Kohaku cafe near Covent Garden last week but it has now closed down due to Henry's surprise.", "Julia was at the Kohaku cafe near Covent Garden last week but it has now closed down due to surprise from both Julia and Henry.", "Not yet replied.", "People haven't replied yet.", "She contacted the owner.", "She contacted the owner.", "She contacted the owner but he hasn't replied yet.", "She contacted the owner but he hasn't replied yet.", "Henry was a cousin.", "Henry went.", "Despite its vibe, it went to the end.", "Henry's cousin went.", "Henry went to Lily's.", "In the end, Henry went to Lily's.", "Henry's cousin went to Lily's.", "Henry and his cousin went.", "Henry's cousin went to Lily's in the end.", "In the end, Henry went to Lily's, despite its different vibe.", "Henry and his cousin went to Lily's.", "In the end Henry and his cousin went to Lily's.", "In the end, despite the different vibe of it, Henry's cousin went to Lily's.", "In the end, Henry and his cousin went to Lily's, despite its different vibe."]}, {"instance_id": "samsum-393", "summary": "Kimberly might have left her umbrella she got from her mother at the cafe yesterday. Laura gives her the cafe's phone number to check with the staff.", "summary_trees": ["# ::snt Kimberly might have left her umbrella she got from her mother at the cafe yesterday.\n(p / possible-01\n      :ARG1 (l / leave-15\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Kimberly\"))\n            :ARG1 (u / umbrella\n                  :ARG1-of (g / get-01\n                        :ARG0 p2\n                        :ARG2 (p3 / person\n                              :ARG0-of (h / have-rel-role-91\n                                    :ARG1 p2\n                                    :ARG2 (m / mother)))\n                        :location (c / cafe)\n                        :time (y / yesterday))\n                  :poss p2)))", "# ::snt Laura gives her the cafe's phone number to check with the staff.\n(g / give-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Laura\"))\n      :ARG1 (n2 / number\n            :mod (p2 / phone)\n            :poss (c / cafe))\n      :ARG2 (s / she)\n      :purpose (c2 / check-01\n            :ARG0 s\n            :ARG1 (p3 / person\n                  :ARG2-of (s2 / staff-01\n                        :ARG1 c))))"], "tree": ["(h / have-rel-role-91\n   :ARG1 (p2 / person :name (n / name :op1 \"Kimberly\"))\n   :ARG2 (m / mother))", "(g / get-01\n   :location (c / cafe)\n   :time (y / yesterday))", "(l / leave-15\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Kimberly\"))\n   :ARG1 (u / umbrella\n            :ARG1 (g / get-01\n                     :ARG0 p2\n                     :ARG2 (p3 / person\n                               :ARG0 (h / have-rel-role-91\n                                        :ARG1 p2\n                                        :ARG2 (m / mother)))\n                     :location (c / cafe)\n                     :time (y / yesterday))\n            :poss p2))", "(l / leave-15\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Kimberly\"))\n   :ARG1 (u / umbrella\n            :ARG1 (g / get-01\n                     :ARG0 p2\n                     :ARG2 (p3 / person\n                               :ARG0 (h / have-rel-role-91\n                                        :ARG1 p2\n                                        :ARG2 (m / mother)))\n                     :location (c / cafe)\n                     :time (y / yesterday))\n            :poss p2))", "(p / possible-01\n   :ARG1 (l / leave-15\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Kimberly\"))\n            :ARG1 (u / umbrella\n                     :ARG1 (g / get-01\n                              :ARG0 p2\n                              :ARG2 (p3 / person\n                                        :ARG0 (h / have-rel-role-91\n                                                 :ARG1 p2\n                                                 :ARG2 (m / mother)))\n                              :location (c / cafe)\n                              :time (y / yesterday))\n                     :poss p2)))", "(p / possible-01\n   :ARG1 (l / leave-15\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Kimberly\"))\n            :ARG1 (u / umbrella\n                     :ARG1 (g / get-01\n                              :ARG0 p2\n                              :ARG2 (p3 / person\n                                        :ARG0 (h / have-rel-role-91\n                                                 :ARG1 p2\n                                                 :ARG2 (m / mother)))\n                              :location (c / cafe)\n                              :time (y / yesterday))\n                     :poss p2)))", "(c2 / check-01\n    :ARG1 (p3 / person\n              :ARG2 (s2 / staff-01\n                        :ARG1 (c / cafe))))", "(g / give-01\n   :ARG1 (n2 / number\n             :mod (p2 / phone)\n             :poss (c / cafe)))", "(g / give-01\n   :ARG1 (n2 / number\n             :mod (p2 / phone)\n             :poss (c / cafe))\n   :ARG2 (s / she))", "(g / give-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Laura\"))\n   :ARG1 (n2 / number\n             :mod (p2 / phone)\n             :poss (c / cafe)))", "(g / give-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Laura\"))\n   :ARG1 (n2 / number\n             :mod (p2 / phone)\n             :poss (c / cafe))\n   :ARG2 (s / she))", "(g / give-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Laura\"))\n   :ARG1 (n2 / number\n             :mod (p2 / phone)\n             :poss (c / cafe))\n   :ARG2 (s / she)\n   :purpose (c2 / check-01\n                :ARG0 s\n                :ARG1 (p3 / person\n                          :ARG2 (s2 / staff-01\n                                    :ARG1 c))))"], "smus": ["Kimberly's mother.", "Got in the cafe yesterday.", "Kimberly had left her umbrella, which she got from her mother in the cafe yesterday.", "Kimberly had left her umbrella, which she got from her mother in the cafe yesterday.", "Kimberly may have left her umbrella, which she got from her mother in the cafe yesterday.", "Kimberly may have left her umbrella, which she got from her mother in the cafe yesterday.", "Check with the cafe staff.", "Gives the cafe's phone number.", "She gives the cafe's phone number.", "Laura gives the cafe's phone number.", "Laura gives her the phone number of the cafe.", "Laura gives her the phone number of the cafe to check with the cafe staff."]}, {"instance_id": "samsum-394", "summary": "Grace and Audrey didn't manage to talk at yesterday's party. Grace is about to graduate. She doesn't know if she will apply for a grad school or take a gap year.", "summary_trees": ["# ::snt Grace and Audrey didn't manage to talk at yesterday's party.\n(m / manage-02\n      :polarity -\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Grace\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Audrey\")))\n      :ARG1 (t / talk-01\n            :ARG0 a\n            :location (p3 / party\n                  :time (y / yesterday))))", "# ::snt Grace is about to graduate.\n(g / graduate-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Grace\"))\n      :time (a / about-to))", "# ::snt She doesn't know if she will apply for a grad school or take a gap year.\n(k / know-01\n      :polarity -\n      :ARG0 (s / she)\n      :ARG1 (a / amr-choice\n            :op1 (a2 / apply-01\n                  :ARG0 s\n                  :ARG1 (s2 / school\n                        :mod (g / graduate)))\n            :op2 (t / take-01\n                  :ARG0 s\n                  :ARG1 (y / year\n                        :mod (g2 / gap)))))"], "tree": ["(m / manage-02\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Grace\"))\n   :ARG1 (t / talk-01\n            :ARG0 p\n            :location (p3 / party\n                          :time (y / yesterday))))", "(m / manage-02\n   :polarity -\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Audrey\"))\n   :ARG1 (t / talk-01\n            :ARG0 p2\n            :location (p3 / party\n                          :time (y / yesterday)))\n   :ARG1 t)", "(m / manage-02\n   :polarity -\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Grace\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Audrey\")))\n   :ARG1 (t / talk-01\n            :ARG0 a\n            :location (p3 / party\n                          :time (y / yesterday))))", "(g / graduate-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Grace\"))\n   :time (a / about-to))", "(t / take-01\n   :ARG1 (y / year\n            :mod (g2 / gap)))", "(k / know-01\n   :ARG1 (a / amr-choice\n            :op1 (a2 / apply-01\n                     :ARG0 (s / she)\n                     :ARG1 (s2 / school\n                               :mod (g / graduate)))\n            :op2 (t / take-01\n                    :ARG0 s\n                    :ARG1 (y / year\n                             :mod (g2 / gap)))))", "(k / know-01\n   :ARG0 (s / she)\n   :ARG1 (a / amr-choice\n            :op1 (a2 / apply-01\n                     :ARG0 s\n                     :ARG1 (s2 / school\n                               :mod (g / graduate)))\n            :op2 (t / take-01\n                    :ARG0 s\n                    :ARG1 (y / year\n                             :mod (g2 / gap)))))", "(k / know-01\n   :polarity -\n   :ARG0 (s / she)\n   :ARG1 (a / amr-choice\n            :op1 (a2 / apply-01\n                     :ARG0 s\n                     :ARG1 (s2 / school\n                               :mod (g / graduate)))\n            :op2 (t / take-01\n                    :ARG0 s\n                    :ARG1 (y / year\n                             :mod (g2 / gap)))))", "(k / know-01\n   :polarity -\n   :ARG0 (s / she)\n   :ARG1 (a / amr-choice\n            :op1 (a2 / apply-01\n                     :ARG0 s\n                     :ARG1 (s2 / school\n                               :mod (g / graduate)))\n            :op2 (t / take-01\n                    :ARG0 s\n                    :ARG1 (y / year\n                             :mod (g2 / gap)))))"], "smus": ["Grace didn't manage to talk at the party yesterday.", "Audrey didn't manage to talk at the party yesterday.", "Grace and Audrey didn't manage to talk at the party yesterday.", "Grace is about to graduate.", "Take a year gap.", "Does she know if she will apply to graduate school or take a gap year?", "Does she know if she will apply to graduate school or take a gap year?", "She doesn't know if she will apply to graduate school or take a gap year.", "She doesn't know if she will apply to graduate school or take a gap year."]}, {"instance_id": "samsum-395", "summary": "John and Annie are moving to London because he lost his job in Germany and found a better offer working in IT here. Annie isn't happy with the move. Amber, who was supposed to stay in their London flat for 5 years, has to move. Erin offers her place but Amber plans on staying with John and Annie.", "summary_trees": ["# ::snt John and Annie are moving to London because he lost his job in Germany and found a better offer working in IT here.\n(m / move-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"John\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Annie\")))\n      :ARG2 (c / city\n            :name (n3 / name\n                  :op1 \"London\"))\n      :ARG1-of (c2 / cause-01\n            :ARG0 (a2 / and\n                  :op1 (l / lose-02\n                        :ARG0 p\n                        :ARG1 (j / job\n                              :location (c3 / country\n                                    :name (n4 / name\n                                          :op1 \"Germany\"))\n                              :poss p))\n                  :op2 (f / find-01\n                        :ARG0 p\n                        :ARG1 (o / offer-01\n                              :ARG1 (w / work-01\n                                    :ARG0 p\n                                    :ARG1 (t / technology\n                                          :mod (ii / information))\n                                    :location c)\n                              :ARG1-of (h / have-degree-91\n                                    :ARG2 (g / good-02\n                                          :ARG1 o)\n                                    :ARG3 (m2 / more)))))))", "# ::snt Annie isn't happy with the move.\n(c / content-01\n      :polarity -\n      :ARG0 (m / move-01)\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Annie\")))", "# ::snt Amber, who was supposed to stay in their London flat for 5 years, has to move.\n(o / obligate-01\n      :ARG2 (m / move-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Amber\")\n                  :ARG1-of (s / suppose-02\n                        :ARG2 (s2 / stay-01\n                              :ARG1 p\n                              :ARG3 (f / flat\n                                    :location (c / city\n                                          :name (n2 / name\n                                                :op1 \"London\"))\n                                    :poss (t / they))\n                              :duration (t2 / temporal-quantity\n                                    :quant 5\n                                    :unit (y / year)))))))", "# ::snt Erin offers her place but Amber plans on staying with John and Annie.\n(c / contrast-01\n      :ARG1 (o / offer-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Erin\"))\n            :ARG1 (p2 / place\n                  :poss p))\n      :ARG2 (p3 / plan-01\n            :ARG0 (p4 / person\n                  :name (n2 / name\n                        :op1 \"Amber\"))\n            :ARG1 (s / stay-01\n                  :ARG1 p4\n                  :accompanier (a / and\n                        :op1 (p5 / person\n                              :name (n3 / name\n                                    :op1 \"John\"))\n                        :op2 (p6 / person\n                              :name (n4 / name\n                                    :op1 \"Annie\"))))))"], "tree": ["(w / work-01\n   :ARG1 (t / technology\n            :mod (ii / information)))", "(h / have-degree-91\n   :ARG2 (g / good-02\n            :ARG1 (o / offer-01))\n   :ARG3 (m2 / more))", "(w / work-01\n   :ARG0 (p / person :name (n / name :op1 \"John\"))\n   :ARG1 (t / technology\n            :mod (ii / information)))", "(m / move-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\")))", "(m / move-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Annie\")))", "(w / work-01\n   :ARG0 (p / person :name (n / name :op1 \"John\"))\n   :ARG1 (t / technology\n            :mod (ii / information))\n   :location (c / city :name (n3 / name :op1 \"London\")))", "(o / offer-01\n   :ARG1 (w / work-01\n            :ARG0 (p / person :name (n / name :op1 \"John\"))\n            :ARG1 (t / technology\n                     :mod (ii / information))\n            :location (c / city :name (n3 / name :op1 \"London\"))))", "(l / lose-02\n   :ARG1 (j / job\n            :location (c3 / country\n                          :name (n4 / name\n                                    :op1 \"Germany\"))\n            :poss (p / person :name (n / name :op1 \"John\"))))", "(l / lose-02\n   :ARG0 (p / person :name (n / name :op1 \"John\"))\n   :ARG1 (j / job\n            :location (c3 / country\n                          :name (n4 / name\n                                    :op1 \"Germany\"))\n            :poss p))", "(l / lose-02\n   :ARG0 (p / person :name (n / name :op1 \"John\"))\n   :ARG1 (j / job\n            :location (c3 / country\n                          :name (n4 / name\n                                    :op1 \"Germany\"))\n            :poss p))", "(m / move-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\"))\n   :ARG2 (c / city\n            :name (n3 / name\n                      :op1 \"London\")))", "(c2 / cause-01\n    :ARG0 (l / lose-02\n             :ARG0 (p / person :name (n / name :op1 \"John\"))\n             :ARG1 (j / job\n                      :location (c3 / country\n                                    :name (n4 / name\n                                              :op1 \"Germany\"))\n                      :poss p)))", "(m / move-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Annie\"))\n   :ARG2 (c / city\n            :name (n3 / name\n                      :op1 \"London\"))\n   :ARG2 c)", "(m / move-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"John\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Annie\"))))", "(o / offer-01\n   :ARG1 (w / work-01\n            :ARG0 (p / person :name (n / name :op1 \"John\"))\n            :ARG1 (t / technology\n                     :mod (ii / information))\n            :location (c / city :name (n3 / name :op1 \"London\")))\n   :ARG1 (h / have-degree-91\n            :ARG2 (g / good-02\n                     :ARG1 o)\n            :ARG3 (m2 / more)))", "(f / find-01\n   :ARG1 (o / offer-01\n            :ARG1 (w / work-01\n                     :ARG0 (p / person :name (n / name :op1 \"John\"))\n                     :ARG1 (t / technology\n                              :mod (ii / information))\n                     :location (c / city :name (n3 / name :op1 \"London\")))\n            :ARG1 (h / have-degree-91\n                     :ARG2 (g / good-02\n                              :ARG1 o)\n                     :ARG3 (m2 / more))))", "(m / move-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"John\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Annie\")))\n   :ARG2 (c / city\n            :name (n3 / name\n                      :op1 \"London\")))", "(f / find-01\n   :ARG0 (p / person :name (n / name :op1 \"John\"))\n   :ARG1 (o / offer-01\n            :ARG1 (w / work-01\n                     :ARG0 p\n                     :ARG1 (t / technology\n                              :mod (ii / information))\n                     :location (c / city :name (n3 / name :op1 \"London\")))\n            :ARG1 (h / have-degree-91\n                     :ARG2 (g / good-02\n                              :ARG1 o)\n                     :ARG3 (m2 / more))))", "(f / find-01\n   :ARG0 (p / person :name (n / name :op1 \"John\"))\n   :ARG1 (o / offer-01\n            :ARG1 (w / work-01\n                     :ARG0 p\n                     :ARG1 (t / technology\n                              :mod (ii / information))\n                     :location (c / city :name (n3 / name :op1 \"London\")))\n            :ARG1 (h / have-degree-91\n                     :ARG2 (g / good-02\n                              :ARG1 o)\n                     :ARG3 (m2 / more))))", "(c2 / cause-01\n    :ARG0 (f / find-01\n             :ARG0 (p / person :name (n / name :op1 \"John\"))\n             :ARG1 (o / offer-01\n                      :ARG1 (w / work-01\n                               :ARG0 p\n                               :ARG1 (t / technology\n                                        :mod (ii / information))\n                               :location (c / city :name (n3 / name :op1 \"London\")))\n                      :ARG1 (h / have-degree-91\n                               :ARG2 (g / good-02\n                                        :ARG1 o)\n                               :ARG3 (m2 / more)))))", "(m / move-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\"))\n   :ARG2 (c / city\n            :name (n3 / name\n                      :op1 \"London\"))\n   :ARG1 (c2 / cause-01\n             :ARG0 (l / lose-02\n                      :ARG0 p\n                      :ARG1 (j / job\n                               :location (c3 / country\n                                             :name (n4 / name\n                                                       :op1 \"Germany\"))\n                               :poss p))))", "(m / move-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Annie\"))\n   :ARG2 (c / city\n            :name (n3 / name\n                      :op1 \"London\"))\n   :ARG2 c\n   :ARG1 (c2 / cause-01\n             :ARG0 (l / lose-02\n                      :ARG0 (p / person :name (n / name :op1 \"John\"))\n                      :ARG1 (j / job\n                               :location (c3 / country\n                                             :name (n4 / name\n                                                       :op1 \"Germany\"))\n                               :poss p))))", "(m / move-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\"))\n   :ARG2 (c / city\n            :name (n3 / name\n                      :op1 \"London\"))\n   :ARG1 (c2 / cause-01\n             :ARG0 (f / find-01\n                      :ARG0 p\n                      :ARG1 (o / offer-01\n                               :ARG1 (w / work-01\n                                        :ARG0 p\n                                        :ARG1 (t / technology\n                                                 :mod (ii / information))\n                                        :location c)\n                               :ARG1 (h / have-degree-91\n                                        :ARG2 (g / good-02\n                                                 :ARG1 o)\n                                        :ARG3 (m2 / more))))))", "(c2 / cause-01\n    :ARG0 (a2 / and\n              :op1 (l / lose-02\n                      :ARG0 (p / person :name (n / name :op1 \"John\"))\n                      :ARG1 (j / job\n                               :location (c3 / country\n                                             :name (n4 / name\n                                                       :op1 \"Germany\"))\n                               :poss p))\n              :op2 (f / find-01\n                      :ARG0 p\n                      :ARG1 (o / offer-01\n                               :ARG1 (w / work-01\n                                        :ARG0 p\n                                        :ARG1 (t / technology\n                                                 :mod (ii / information))\n                                        :location (c / city :name (n3 / name :op1 \"London\")))\n                               :ARG1 (h / have-degree-91\n                                        :ARG2 (g / good-02\n                                                 :ARG1 o)\n                                        :ARG3 (m2 / more))))))", "(m / move-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Annie\"))\n   :ARG2 (c / city\n            :name (n3 / name\n                      :op1 \"London\"))\n   :ARG2 c\n   :ARG1 (c2 / cause-01\n             :ARG0 (f / find-01\n                      :ARG0 (p / person :name (n / name :op1 \"John\"))\n                      :ARG1 (o / offer-01\n                               :ARG1 (w / work-01\n                                        :ARG0 p\n                                        :ARG1 (t / technology\n                                                 :mod (ii / information))\n                                        :location c)\n                               :ARG1 (h / have-degree-91\n                                        :ARG2 (g / good-02\n                                                 :ARG1 o)\n                                        :ARG3 (m2 / more))))))", "(m / move-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Annie\")))", "(c / content-01\n   :polarity -\n   :ARG0 (m / move-01)\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Annie\")))", "(s / suppose-02\n   :ARG2 (s2 / stay-01\n             :ARG1 (p / person :name (n / name :op1 \"Amber\")))\n             :ARG3 (f / flat\n                      :location (c / city\n                                   :name (n2 / name\n                                             :op1 \"London\"))\n                      :poss (t / they))\n             :duration (t2 / temporal-quantity\n                           :quant 5\n                           :unit (y / year))))", "(o / obligate-01\n   :ARG2 (m / move-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Amber\")\n                     :ARG1 (s / suppose-02\n                              :ARG2 (s2 / stay-01\n                                        :ARG1 p\n                                        :ARG3 (f / flat\n                                                 :location (c / city\n                                                              :name (n2 / name\n                                                                        :op1 \"London\"))\n                                                 :poss (t / they))\n                                        :duration (t2 / temporal-quantity\n                                                      :quant 5\n                                                      :unit (y / year)))))))", "(o / obligate-01\n   :ARG2 (m / move-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Amber\")\n                     :ARG1 (s / suppose-02\n                              :ARG2 (s2 / stay-01\n                                        :ARG1 p\n                                        :ARG3 (f / flat\n                                                 :location (c / city\n                                                              :name (n2 / name\n                                                                        :op1 \"London\"))\n                                                 :poss (t / they))\n                                        :duration (t2 / temporal-quantity\n                                                      :quant 5\n                                                      :unit (y / year)))))))", "(o / offer-01\n   :ARG1 (p2 / place\n             :poss (p / person :name (n / name :op1 \"Erin\"))))", "(s / stay-01\n   :accompanier (p5 / person\n                    :name (n3 / name\n                              :op1 \"John\")))", "(s / stay-01\n   :accompanier (p6 / person\n                    :name (n4 / name\n                              :op1 \"Annie\")))", "(s / stay-01\n   :ARG1 (p4 / person :name (n2 / name :op1 \"Amber\"))\n   :accompanier (p5 / person\n                    :name (n3 / name\n                              :op1 \"John\")))", "(s / stay-01\n   :ARG1 (p4 / person :name (n2 / name :op1 \"Amber\"))\n   :accompanier (p6 / person\n                    :name (n4 / name\n                              :op1 \"Annie\")))", "(o / offer-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Erin\"))\n   :ARG1 (p2 / place\n             :poss p))", "(o / offer-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Erin\"))\n   :ARG1 (p2 / place\n             :poss p))", "(p3 / plan-01\n    :ARG1 (s / stay-01\n             :ARG1 (p4 / person :name (n2 / name :op1 \"Amber\"))\n             :accompanier (p5 / person\n                              :name (n3 / name\n                                        :op1 \"John\"))))", "(p3 / plan-01\n    :ARG1 (s / stay-01\n             :ARG1 (p4 / person :name (n2 / name :op1 \"Amber\"))\n             :accompanier (p6 / person\n                              :name (n4 / name\n                                        :op1 \"Annie\"))))", "(s / stay-01\n   :accompanier (a / and\n                   :op1 (p5 / person\n                            :name (n3 / name\n                                      :op1 \"John\"))\n                   :op2 (p6 / person\n                            :name (n4 / name\n                                      :op1 \"Annie\"))))", "(s / stay-01\n   :ARG1 (p4 / person :name (n2 / name :op1 \"Amber\"))\n   :accompanier (a / and\n                   :op1 (p5 / person\n                            :name (n3 / name\n                                      :op1 \"John\"))\n                   :op2 (p6 / person\n                            :name (n4 / name\n                                      :op1 \"Annie\"))))", "(p3 / plan-01\n    :ARG0 (p4 / person\n              :name (n2 / name\n                        :op1 \"Amber\"))\n    :ARG1 (s / stay-01\n             :ARG1 p4\n             :accompanier (p5 / person\n                              :name (n3 / name\n                                        :op1 \"John\"))))", "(p3 / plan-01\n    :ARG0 (p4 / person\n              :name (n2 / name\n                        :op1 \"Amber\"))\n    :ARG1 (s / stay-01\n             :ARG1 p4\n             :accompanier (p6 / person\n                              :name (n4 / name\n                                        :op1 \"Annie\"))))", "(p3 / plan-01\n    :ARG0 (p4 / person\n              :name (n2 / name\n                        :op1 \"Amber\"))\n    :ARG1 (s / stay-01\n             :ARG1 p4\n             :accompanier (p5 / person\n                              :name (n3 / name\n                                        :op1 \"John\"))))", "(p3 / plan-01\n    :ARG0 (p4 / person\n              :name (n2 / name\n                        :op1 \"Amber\"))\n    :ARG1 (s / stay-01\n             :ARG1 p4\n             :accompanier (p6 / person\n                              :name (n4 / name\n                                        :op1 \"Annie\"))))", "(p3 / plan-01\n    :ARG1 (s / stay-01\n             :ARG1 (p4 / person :name (n2 / name :op1 \"Amber\"))\n             :accompanier (a / and\n                             :op1 (p5 / person\n                                      :name (n3 / name\n                                                :op1 \"John\"))\n                             :op2 (p6 / person\n                                      :name (n4 / name\n                                                :op1 \"Annie\")))))", "(p3 / plan-01\n    :ARG0 (p4 / person\n              :name (n2 / name\n                        :op1 \"Amber\"))\n    :ARG1 (s / stay-01\n             :ARG1 p4\n             :accompanier (a / and\n                             :op1 (p5 / person\n                                      :name (n3 / name\n                                                :op1 \"John\"))\n                             :op2 (p6 / person\n                                      :name (n4 / name\n                                                :op1 \"Annie\")))))", "(p3 / plan-01\n    :ARG0 (p4 / person\n              :name (n2 / name\n                        :op1 \"Amber\"))\n    :ARG1 (s / stay-01\n             :ARG1 p4\n             :accompanier (a / and\n                             :op1 (p5 / person\n                                      :name (n3 / name\n                                                :op1 \"John\"))\n                             :op2 (p6 / person\n                                      :name (n4 / name\n                                                :op1 \"Annie\")))))", "(c / contrast-01\n   :ARG1 (o / offer-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Erin\"))\n            :ARG1 (p2 / place\n                      :poss p))\n   :ARG2 (p3 / plan-01\n             :ARG0 (p4 / person\n                       :name (n2 / name\n                                 :op1 \"Amber\"))\n             :ARG1 (s / stay-01\n                      :ARG1 p4\n                      :accompanier (a / and\n                                      :op1 (p5 / person\n                                               :name (n3 / name\n                                                         :op1 \"John\"))\n                                      :op2 (p6 / person\n                                               :name (n4 / name\n                                                         :op1 \"Annie\"))))))", "(c / contrast-01\n   :ARG1 (o / offer-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Erin\"))\n            :ARG1 (p2 / place\n                      :poss p))\n   :ARG2 (p3 / plan-01\n             :ARG0 (p4 / person\n                       :name (n2 / name\n                                 :op1 \"Amber\"))\n             :ARG1 (s / stay-01\n                      :ARG1 p4\n                      :accompanier (a / and\n                                      :op1 (p5 / person\n                                               :name (n3 / name\n                                                         :op1 \"John\"))\n                                      :op2 (p6 / person\n                                               :name (n4 / name\n                                                         :op1 \"Annie\"))))))"], "smus": ["working with information technology", "Better offer.", "John is working in information technology.", "John is moving.", "Annie is moving.", "John is working in information technology in London.", "John is offering to work in information technology in London.", "John's job in Germany was lost.", "John lost his job in Germany.", "John lost his job in Germany.", "John is moving to London.", "Because John lost his job in Germany.", "Annie is moving to London.", "John and Annie are moving.", "John working in information technology in London was offered a better deal.", "John's work in information technology in London found an offer better.", "John and Annie are moving to London.", "John found a better offer to work in information technology in London.", "John found a better offer to work in information technology in London.", "Because John found a better offer of working in information technology in London.", "John was moving to London because he lost his job in Germany.", "Annie was moving to London because John lost his job in Germany.", "John was moving to London because he found a better offer for working in IT there.", "Because John lost his job in Germany and found a better offer to work in information technology in London.", "Annie was moving to London because John found a better offer to work in IT there.", "Annie is moving.", "Annie was not content with the move.", "Amber was supposed to stay in their London flat for 5 years.", "Amber had to move on from being supposed to stay in their London flat for 5 years.", "Amber had to move on from being supposed to stay in their London flat for 5 years.", "offers Erin's place.", "Staying with John.", "Staying with Annie.", "Amber is staying with John.", "Amber is staying with Annie.", "Erin offers her place.", "Erin offers her place.", "Amber is in plans of staying with John.", "Amber is in plans of staying with Annie.", "Staying with John and Annie.", "Amber is staying with John and Annie.", "Amber plans on staying with John.", "Amber plans on staying with Annie.", "Amber plans on staying with John.", "Amber plans on staying with Annie.", "Amber is planning on staying with John and Annie.", "Amber plans on staying with John and Annie.", "Amber plans on staying with John and Annie.", "Erin offers her place, but Amber plans on staying with John and Annie.", "Erin offers her place, but Amber plans on staying with John and Annie."]}, {"instance_id": "samsum-396", "summary": "Alicja's job interview is tomorrow. She will inform Willyx how it goes.", "summary_trees": ["# ::snt Alicja's job interview is tomorrow.\n(ii / interview-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Alicja\"))\n      :ARG2 (j / job)\n      :time (t / tomorrow))", "# ::snt She will inform Willyx how it goes.\n(ii / inform-01\n      :ARG0 (s / she)\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Willyx\"))\n      :ARG2 (t / thing\n            :manner-of (g / go-06\n                  :ARG0 (ii2 / it))))"], "tree": ["(ii / interview-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Alicja\"))\n    :ARG2 (j / job)\n    :time (t / tomorrow))", "(ii / inform-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Willyx\")))", "(ii / inform-01\n    :ARG0 (s / she)\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Willyx\"))\n    :ARG2 (t / thing\n             :manner (g / go-06\n                        :ARG0 (ii2 / it))))", "(ii / inform-01\n    :ARG0 (s / she)\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Willyx\"))\n    :ARG2 (t / thing\n             :manner (g / go-06\n                        :ARG0 (ii2 / it))))"], "smus": ["Alicja will have a job interview tomorrow.", "Inform Willowx.", "She will inform Willowx how it goes.", "She will inform Willowx how it goes."]}, {"instance_id": "samsum-397", "summary": "The temperatures where Thomas stays are -3 at night. There is frost in the morning. Zoey is in the tropics. Thomas had a walk around Belchen's summit on Sunday.", "summary_trees": ["# ::snt The temperatures where Thomas stays are -3 at night.\n(t / temperature\n      :location-of (s / stay-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Thomas\")))\n      :domain (t2 / temperature-quantity\n            :quant -3\n            :time (d / date-entity\n                  :dayperiod (n2 / night))))", "# ::snt There is frost in the morning.\n(f / frost\n      :time (d / date-entity\n            :dayperiod (m / morning)))", "# ::snt Zoey is in the tropics.\n(b / be-located-at-91\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Zoey\"))\n      :ARG2 (w / world-region\n            :name (n2 / name\n                  :op1 \"Tropics\")))", "# ::snt Thomas had a walk around Belchen's summit on Sunday.\n(w / walk-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Thomas\"))\n      :ARG2 (a / around\n            :op1 (s / summit\n                  :location (l / location\n                        :name (n2 / name\n                              :op1 \"Belchen\"))))\n      :time (d / date-entity\n            :weekday (s2 / sunday)))"], "tree": ["(s / stay-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Thomas\")))", "(s / stay-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Thomas\")))", "(f / frost\n   :time (d / date-entity\n            :dayperiod (m / morning)))", "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Zoey\"))\n   :ARG2 (w / world-region\n            :name (n2 / name\n                      :op1 \"Tropics\")))", "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Zoey\"))\n   :ARG2 (w / world-region\n            :name (n2 / name\n                      :op1 \"Tropics\")))", "(w / walk-01\n   :time (d / date-entity\n            :weekday (s2 / sunday)))", "(w / walk-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Thomas\")))", "(w / walk-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Thomas\"))\n   :ARG2 (a / around\n            :op1 (s / summit\n                    :location (l / location\n                                 :name (n2 / name\n                                           :op1 \"Belchen\")))))", "(w / walk-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Thomas\"))\n   :ARG2 (a / around\n            :op1 (s / summit\n                    :location (l / location\n                                 :name (n2 / name\n                                           :op1 \"Belchen\"))))\n   :time (d / date-entity\n            :weekday (s2 / sunday)))"], "smus": ["Thomas stays.", "Thomas stays.", "It's a morning frost.", "Zoey is in the Tropics.", "Zoey is in the Tropics.", "Walk Sunday", "Thomas walks.", "Thomas walks around the summit of Belchen.", "Thomas took a walk around the summit of Belchen on Sunday."]}, {"instance_id": "samsum-398", "summary": "Denise and Dominique has a test tomorrow on units 2 and 3.", "summary_trees": ["# ::snt Denise and Dominique has a test tomorrow on units 2 and 3.\n(t / test-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Denise\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Dominique\")))\n      :ARG1 (a2 / and\n            :op1 (u / unit\n                  :mod 2)\n            :op2 (u2 / unit\n                  :mod 3))\n      :time (t2 / tomorrow))"], "tree": ["(t / test-01\n   :ARG1 (u / unit\n            :mod 2))", "(t / test-01\n   :ARG1 (u2 / unit\n             :mod 3))", "(t / test-01\n   :ARG1 (a2 / and\n             :op1 (u / unit\n                     :mod 2)\n             :op2 (u2 / unit\n                      :mod 3)))", "(t / test-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Denise\"))\n   :ARG1 (u / unit\n            :mod 2))", "(t / test-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Denise\"))\n   :ARG1 (u2 / unit\n             :mod 3))", "(t / test-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Denise\"))\n   :ARG1 (u / unit\n            :mod 2)\n   :time (t2 / tomorrow))", "(t / test-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Denise\"))\n   :ARG1 (u / unit\n            :mod 2)\n   :time (t2 / tomorrow))", "(t / test-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Dominique\"))\n   :ARG1 (a2 / and)\n   :ARG1 (u / unit\n            :mod 2)\n   :time (t2 / tomorrow))", "(t / test-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Denise\"))\n   :ARG1 (u2 / unit\n             :mod 3)\n   :time (t2 / tomorrow)\n   :time t2)", "(t / test-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Dominique\"))\n   :ARG1 (a2 / and)\n   :ARG1 (u / unit\n            :mod 2)\n   :time (t2 / tomorrow))", "(t / test-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Denise\"))\n   :ARG1 (u2 / unit\n             :mod 3)\n   :time (t2 / tomorrow)\n   :time t2)", "(t / test-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Denise\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Dominique\")))\n   :ARG1 (a2 / and\n             :op1 (u / unit\n                     :mod 2)\n             :op2 (u2 / unit\n                      :mod 3)))", "(t / test-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Denise\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Dominique\")))\n   :ARG1 (a2 / and\n             :op1 (u / unit\n                     :mod 2)\n             :op2 (u2 / unit\n                      :mod 3))\n   :time (t2 / tomorrow))", "(t / test-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Denise\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Dominique\")))\n   :ARG1 (a2 / and\n             :op1 (u / unit\n                     :mod 2)\n             :op2 (u2 / unit\n                      :mod 3))\n   :time (t2 / tomorrow))"], "smus": ["The second unit is under test.", "The test was for units 3.", "The test was for units 2 and 3.", "Denise did a test of units 2.", "Denise did a test of units three.", "Denise will do a unit 2 test tomorrow.", "Denise will do a unit 2 test tomorrow.", "Dominique will do a 2 unit test tomorrow.", "Denise will do a 3 unit test tomorrow.", "Dominique will do a 2 unit test tomorrow.", "Denise will do a 3 unit test tomorrow.", "Denise and Dominique have tested units 2 and 3.", "Denise and Dominique will take the units 2 and 3 test tomorrow.", "Denise and Dominique will take the units 2 and 3 test tomorrow."]}, {"instance_id": "samsum-399", "summary": "Jane is in Warsaw. Ollie and Jane has a party. Jane lost her calendar. They will get a lunch this week on Friday. Ollie accidentally called Jane and talked about whisky. Jane cancels lunch. They'll meet for a tea at 6 pm.", "summary_trees": ["# ::snt Jane is in Warsaw.\n(b / be-located-at-91\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Jane\"))\n      :ARG2 (c / city\n            :name (n2 / name\n                  :op1 \"Warsaw\")))", "# ::snt Ollie and Jane has a party.\n(p / party-01\n      :ARG0 (a / and\n            :op1 (p2 / person\n                  :name (n / name\n                        :op1 \"Ollie\"))\n            :op2 (p3 / person\n                  :name (n2 / name\n                        :op1 \"Jane\"))))", "# ::snt Jane lost her calendar.\n(l / lose-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jane\"))\n      :ARG1 (c / calendar\n            :poss p))", "# ::snt They will get a lunch this week on Friday.\n(g / get-01\n      :ARG0 (t / they)\n      :ARG1 (l / lunch)\n      :time (w / week\n            :mod (t2 / this))\n      :time (d / date-entity\n            :weekday (f / friday)))", "# ::snt Ollie accidentally called Jane and talked about whisky.\n(a / and\n      :op1 (c / call-02\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Ollie\"))\n            :ARG1 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Jane\"))\n            :manner (a2 / accidental))\n      :op2 (t / talk-01\n            :ARG0 p\n            :ARG1 (w / whisky)))", "# ::snt Jane cancels lunch.\n(c / cancel-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jane\"))\n      :ARG1 (l / lunch))", "# ::snt They'll meet for a tea at 6 pm.\n(m / meet-03\n      :ARG0 (t / they)\n      :ARG1 (t2 / tea)\n      :time (d / date-entity\n            :time \"16:00\"))"], "tree": ["(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Jane\"))\n   :ARG2 (c / city\n            :name (n2 / name\n                      :op1 \"Warsaw\")))", "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Jane\"))\n   :ARG2 (c / city\n            :name (n2 / name\n                      :op1 \"Warsaw\")))", "(p / party-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Ollie\")))", "(p / party-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"Jane\")))", "(p / party-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Ollie\")))", "(p / party-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"Jane\")))", "(p / party-01\n   :ARG0 (a / and\n            :op1 (p2 / person\n                     :name (n / name\n                              :op1 \"Ollie\"))\n            :op2 (p3 / person\n                     :name (n2 / name\n                               :op1 \"Jane\"))))", "(p / party-01\n   :ARG0 (a / and\n            :op1 (p2 / person\n                     :name (n / name\n                              :op1 \"Ollie\"))\n            :op2 (p3 / person\n                     :name (n2 / name\n                               :op1 \"Jane\"))))", "(l / lose-02\n   :ARG1 (c / calendar\n            :poss (p / person :name (n / name :op1 \"Jane\"))))", "(l / lose-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jane\"))\n   :ARG1 (c / calendar\n            :poss p))", "(l / lose-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jane\"))\n   :ARG1 (c / calendar\n            :poss p))", "(g / get-01\n   :time (w / week\n            :mod (t2 / this)))", "(g / get-01\n   :ARG0 (t / they)\n   :ARG1 (l / lunch)\n   :time (w / week\n            :mod (t2 / this)))", "(g / get-01\n   :time (w / week\n            :mod (t2 / this))\n   :time (d / date-entity\n            :weekday (f / friday)))", "(g / get-01\n   :ARG0 (t / they)\n   :ARG1 (l / lunch)\n   :time (w / week\n            :mod (t2 / this))\n   :time (d / date-entity\n            :weekday (f / friday)))", "(t / talk-01\n   :ARG0 (p / person :name (n / name :op1 \"Ollie\"))\n   :ARG1 (w / whisky))", "(t / talk-01\n   :ARG0 (p / person :name (n / name :op1 \"Ollie\"))\n   :ARG1 (w / whisky))", "(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ollie\")))", "(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ollie\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Jane\")))", "(c / cancel-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jane\"))\n   :ARG1 (l / lunch))", "(c / cancel-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jane\"))\n   :ARG1 (l / lunch))", "(m / meet-03\n   :time (d / date-entity\n            :time \"16:00\"))", "(m / meet-03\n   :time (d / date-entity\n            :time \"16:00\"))", "(m / meet-03\n   :time (d / date-entity\n            :time \"16:00\"))", "(m / meet-03\n   :time (d / date-entity\n            :time \"16:00\"))", "(m / meet-03\n   :time (d / date-entity\n            :time \"16:00\"))", "(m / meet-03\n   :ARG0 (t / they)\n   :ARG1 (t2 / tea))", "(m / meet-03\n   :ARG0 (t / they)\n   :time (d / date-entity\n            :time \"16:00\"))", "(m / meet-03\n   :ARG0 (t / they)\n   :ARG1 (t2 / tea)\n   :time (d / date-entity\n            :time \"16:00\"))", "(m / meet-03\n   :ARG0 (t / they)\n   :ARG1 (t2 / tea)\n   :time (d / date-entity\n            :time \"16:00\"))"], "smus": ["Jane in Warsaw.", "Jane in Warsaw.", "Ollie was at the party.", "Jane's party.", "Ollie was at the party.", "Jane's party.", "Ollie and Jane are at the party.", "Ollie and Jane are at the party.", "Jane's calendar lost.", "Jane lost her calendar.", "Jane lost her calendar.", "Get this week.", "They did get lunch this week.", "Get this week on Friday.", "They'll get lunch this week on Friday.", "Ollie talked about whisky.", "Ollie talked about whisky.", "Ollie called.", "Ollie called Jane.", "Jane cancels lunch", "Jane cancels lunch", "Meet at 6pm.", "Meet at 6pm.", "Meet at 6pm.", "Meet at 6pm.", "Meet at 6pm.", "They will meet for tea.", "They will meet at 6pm.", "They will meet for tea at 6pm.", "They will meet for tea at 6pm."]}, {"instance_id": "samsum-400", "summary": "Ricky's new neighbours are nice but loud. They own a parakeet that makes a lot of noise throughout the night.", "summary_trees": ["# ::snt Ricky's new neighbours are nice but loud.\n(c / contrast-01\n      :ARG1 (n / nice-01\n            :ARG1 (n2 / neighbor\n                  :ARG1-of (n3 / new-01)\n                  :poss (p / person\n                        :name (n4 / name\n                              :op1 \"Ricky\"))))\n      :ARG2 (l / loud\n            :domain n2))", "# ::snt They own a parakeet that makes a lot of noise throughout the night.\n(o / own-01\n      :ARG0 (t / they)\n      :ARG1 (p / parakeet\n            :ARG0-of (m / make-01\n                  :ARG1 (n / noise\n                        :quant (l / lot))\n                  :time (t2 / throughout\n                        :op1 (n2 / night)))))"], "tree": ["(n / nice-01\n   :ARG1 (n2 / neighbor\n             :ARG1 (n3 / new-01)\n             :poss (p / person\n                      :name (n4 / name\n                                :op1 \"Ricky\"))))", "(n / nice-01\n   :ARG1 (n2 / neighbor\n             :ARG1 (n3 / new-01)\n             :poss (p / person\n                      :name (n4 / name\n                                :op1 \"Ricky\"))))", "(c / contrast-01\n   :ARG1 (n / nice-01\n            :ARG1 (n2 / neighbor\n                      :ARG1 (n3 / new-01)\n                      :poss (p / person\n                               :name (n4 / name\n                                         :op1 \"Ricky\"))))\n   :ARG2 (l / loud\n            :domain n2))", "(c / contrast-01\n   :ARG1 (n / nice-01\n            :ARG1 (n2 / neighbor\n                      :ARG1 (n3 / new-01)\n                      :poss (p / person\n                               :name (n4 / name\n                                         :op1 \"Ricky\"))))\n   :ARG2 (l / loud\n            :domain n2))", "(m / make-01\n   :ARG1 (n / noise\n            :quant (l / lot)))", "(m / make-01\n   :time (t2 / throughout\n             :op1 (n2 / night)))", "(m / make-01\n   :time (t2 / throughout\n             :op1 (n2 / night)))", "(m / make-01\n   :ARG1 (n / noise\n            :quant (l / lot))\n   :time (t2 / throughout\n             :op1 (n2 / night)))", "(m / make-01\n   :ARG1 (n / noise\n            :quant (l / lot))\n   :time (t2 / throughout\n             :op1 (n2 / night)))", "(o / own-01\n   :ARG0 (t / they)\n   :ARG1 (p / parakeet\n            :ARG0 (m / make-01\n                     :ARG1 (n / noise\n                              :quant (l / lot))\n                     :time (t2 / throughout\n                               :op1 (n2 / night)))))", "(o / own-01\n   :ARG0 (t / they)\n   :ARG1 (p / parakeet\n            :ARG0 (m / make-01\n                     :ARG1 (n / noise\n                              :quant (l / lot))\n                     :time (t2 / throughout\n                               :op1 (n2 / night)))))"], "smus": ["Ricky's new neighbors were nice.", "Ricky's new neighbors were nice.", "Ricky's new neighbors were nice, but loud.", "Ricky's new neighbors were nice, but loud.", "Makes a lot of noise.", "Makes throughout the night.", "Makes throughout the night.", "Makes a lot of noise throughout the night.", "Makes a lot of noise throughout the night.", "They own a parakeet that makes a lot of noise throughout the night.", "They own a parakeet that makes a lot of noise throughout the night."]}, {"instance_id": "samsum-401", "summary": "Margaret is suffering from a terrible headache and wants Jack to buy her some painkillers. ", "summary_trees": ["# ::snt Margaret is suffering from a terrible headache and wants Jack to buy her some painkillers.\n(a / and\n      :op1 (s / suffer-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Margaret\"))\n            :ARG1 (h / headache\n                  :ARG1-of (t / terrible-01)))\n      :op2 (w / want-01\n            :ARG0 p\n            :ARG1 (b / buy-01\n                  :ARG0 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Jack\"))\n                  :ARG1 (p3 / painkiller\n                        :quant (s2 / some))\n                  :ARG4 p)))"], "tree": ["(b / buy-01\n   :ARG1 (p3 / painkiller\n             :quant (s2 / some)))", "(s / suffer-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Margaret\"))\n   :ARG1 (h / headache\n            :ARG1 (t / terrible-01)))", "(s / suffer-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Margaret\"))\n   :ARG1 (h / headache\n            :ARG1 (t / terrible-01)))", "(w / want-01\n   :ARG0 (p / person :name (n / name :op1 \"Margaret\"))\n   :ARG1 (b / buy-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Jack\"))\n            :ARG1 (p3 / painkiller\n                      :quant (s2 / some))\n            :ARG4 p))", "(w / want-01\n   :ARG0 (p / person :name (n / name :op1 \"Margaret\"))\n   :ARG1 (b / buy-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Jack\"))\n            :ARG1 (p3 / painkiller\n                      :quant (s2 / some))\n            :ARG4 p))"], "smus": ["buy some painkillers.", "Margaret is suffering from a terrible headache.", "Margaret is suffering from a terrible headache.", "Margaret wants Jack to buy her some painkillers.", "Margaret wants Jack to buy her some painkillers."]}, {"instance_id": "samsum-402", "summary": "Maxwell pays Jeanice for 8 hours of babysitting and is grateful he found her. His son argued with a friend at school, and got agressive when the teacher reacted. Jeanice hasn't noticed if he has acted strangely recently. Maxwell and Jeanice can grab a coffe some time to discuss all the issues. ", "summary_trees": ["# ::snt Maxwell pays Jeanice for 8 hours of babysitting and is grateful he found her.\n(a / and\n      :op1 (p / pay-01\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Maxwell\"))\n            :ARG2 (p3 / person\n                  :name (n2 / name\n                        :op1 \"Jeanice\"))\n            :ARG3 (b / babysit-01\n                  :ARG0 p2\n                  :duration (t / temporal-quantity\n                        :quant 8\n                        :unit (h / hour))))\n      :op2 (a2 / appreciate-02\n            :ARG0 p2\n            :ARG1 (f / find-01\n                  :ARG0 p2\n                  :ARG1 p3)))", "# ::snt His son argued with a friend at school, and got agressive when the teacher reacted.\n(a / and\n      :op1 (a2 / argue-02\n            :ARG0 (p / person\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 (h2 / he)\n                        :ARG2 (s / son)))\n            :ARG1 (p2 / person\n                  :ARG0-of (h3 / have-rel-role-91\n                        :ARG1 p\n                        :ARG2 (f / friend)))\n            :location (s2 / school))\n      :op2 (g / get-03\n            :ARG1 p\n            :ARG2 (a3 / aggressive)\n            :time (r / react-01\n                  :ARG0 (p3 / person\n                        :ARG0-of (t / teach-01)))))", "# ::snt Jeanice hasn't noticed if he has acted strangely recently.\n(n / notice-01\n      :polarity -\n      :ARG0 (p / person\n            :name (n2 / name\n                  :op1 \"Jeanice\"))\n      :ARG1 (h / have-condition-91\n            :ARG2 (a / act-01\n                  :ARG0 (h2 / he)\n                  :ARG1 (s / strange)\n                  :time (r / recent))))", "# ::snt Maxwell and Jeanice can grab a coffe some time to discuss all the issues.\n(p / possible-01\n      :ARG1 (g / grab-01\n            :ARG0 (a / and\n                  :op1 (p2 / person\n                        :name (n / name\n                              :op1 \"Maxwell\"))\n                  :op2 (p3 / person\n                        :name (n2 / name\n                              :op1 \"Jeanice\")))\n            :ARG1 (c / coffee)\n            :purpose (d / discuss-01\n                  :ARG0 a\n                  :ARG1 (ii / issue\n                        :mod (a2 / all)))\n            :time (t / time\n                  :mod (s / some))))"], "tree": ["(a2 / appreciate-02\n    :ARG0 (p2 / person :name (n / name :op1 \"Maxwell\"))\n    :ARG1 (f / find-01\n             :ARG0 p2\n             :ARG1 (p3 / person :name (n2 / name :op1 \"Jeanice\"))))", "(a2 / appreciate-02\n    :ARG0 (p2 / person :name (n / name :op1 \"Maxwell\"))\n    :ARG1 (f / find-01\n             :ARG0 p2\n             :ARG1 (p3 / person :name (n2 / name :op1 \"Jeanice\"))))", "(b / babysit-01\n   :duration (t / temporal-quantity\n                :quant 8\n                :unit (h / hour)))", "(p / pay-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Maxwell\"))\n   :ARG2 (p3 / person\n             :name (n2 / name\n                       :op1 \"Jeanice\"))\n   :ARG3 (b / babysit-01\n            :ARG0 p2\n            :duration (t / temporal-quantity\n                         :quant 8\n                         :unit (h / hour))))", "(h3 / have-rel-role-91\n    :ARG1 (p / person)\n    :ARG2 (f / friend))", "(g / get-03\n   :ARG1 (p / person)\n   :ARG2 (a3 / aggressive))", "(r / react-01\n   :ARG0 (p3 / person\n             :ARG0 (t / teach-01)))", "(h / have-rel-role-91\n   :ARG1 (h2 / he)\n   :ARG2 (s / son))", "(r / react-01\n   :ARG0 (p3 / person\n             :ARG0 (t / teach-01)))", "(g / get-03\n   :ARG1 (p / person)\n   :ARG2 (a3 / aggressive)\n   :time (r / react-01\n            :ARG0 (p3 / person\n                      :ARG0 (t / teach-01))))", "(g / get-03\n   :ARG1 (p / person)\n   :ARG2 (a3 / aggressive)\n   :time (r / react-01\n            :ARG0 (p3 / person\n                      :ARG0 (t / teach-01))))", "(a2 / argue-02\n    :ARG0 (p / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 (h2 / he)\n                      :ARG2 (s / son)))\n    :ARG1 (p2 / person\n              :ARG0 (h3 / have-rel-role-91\n                        :ARG1 p\n                        :ARG2 (f / friend))))", "(a2 / argue-02\n    :ARG0 (p / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 (h2 / he)\n                      :ARG2 (s / son)))\n    :ARG1 (p2 / person\n              :ARG0 (h3 / have-rel-role-91\n                        :ARG1 p\n                        :ARG2 (f / friend)))\n    :location (s2 / school))", "(n / notice-01\n   :polarity -\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Jeanice\"))\n   :ARG1 (h / have-condition-91\n            :ARG2 (a / act-01\n                     :ARG0 (h2 / he)\n                     :ARG1 (s / strange)\n                     :time (r / recent))))", "(d / discuss-01\n   :ARG1 (ii / issue\n             :mod (a2 / all)))", "(g / grab-01\n   :time (t / time\n            :mod (s / some)))", "(d / discuss-01\n   :ARG0 (a / and)\n   :ARG1 (ii / issue\n             :mod (a2 / all)))", "(d / discuss-01\n   :ARG0 (a / and)\n   :ARG1 (ii / issue\n             :mod (a2 / all)))", "(g / grab-01\n   :purpose (d / discuss-01)\n   :time (t / time\n            :mod (s / some)))", "(g / grab-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"Jeanice\"))\n   :ARG1 (c / coffee)\n   :ARG1 c)", "(g / grab-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Maxwell\"))\n   :ARG1 (c / coffee)\n   :time (t / time\n            :mod (s / some)))", "(g / grab-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"Jeanice\"))\n   :ARG1 (c / coffee)\n   :ARG1 c\n   :time (t / time\n            :mod (s / some)))", "(g / grab-01\n   :ARG0 (a / and\n            :op1 (p2 / person\n                     :name (n / name\n                              :op1 \"Maxwell\"))\n            :op2 (p3 / person\n                     :name (n2 / name\n                               :op1 \"Jeanice\")))\n   :ARG1 (c / coffee)\n   :time (t / time\n            :mod (s / some)))", "(g / grab-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Maxwell\"))\n   :ARG1 (c / coffee)\n   :purpose (d / discuss-01\n               :ARG0 p2\n               :ARG1 (ii / issue\n                         :mod (a2 / all)))\n   :time (t / time\n            :mod (s / some)))", "(g / grab-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"Jeanice\"))\n   :ARG1 (c / coffee)\n   :ARG1 c\n   :purpose (d / discuss-01\n               :ARG0 p3\n               :ARG1 (ii / issue\n                         :mod (a2 / all)))\n   :time (t / time\n            :mod (s / some)))", "(p / possible-01\n   :ARG1 (g / grab-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Maxwell\"))\n            :ARG1 (c / coffee)\n            :purpose (d / discuss-01\n                        :ARG0 p2\n                        :ARG1 (ii / issue\n                                  :mod (a2 / all)))\n            :time (t / time\n                     :mod (s / some))))", "(p / possible-01\n   :ARG1 (g / grab-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Maxwell\"))\n            :ARG1 (c / coffee)\n            :purpose (d / discuss-01\n                        :ARG0 p2\n                        :ARG1 (ii / issue\n                                  :mod (a2 / all)))\n            :time (t / time\n                     :mod (s / some))))", "(p / possible-01\n   :ARG1 (g / grab-01\n            :ARG0 (p3 / person\n                      :name (n2 / name\n                                :op1 \"Jeanice\"))\n            :ARG1 (c / coffee)\n            :ARG1 c\n            :purpose (d / discuss-01\n                        :ARG0 p3\n                        :ARG1 (ii / issue\n                                  :mod (a2 / all)))\n            :time (t / time\n                     :mod (s / some))))", "(p / possible-01\n   :ARG1 (g / grab-01\n            :ARG0 (p3 / person\n                      :name (n2 / name\n                                :op1 \"Jeanice\"))\n            :ARG1 (c / coffee)\n            :ARG1 c\n            :purpose (d / discuss-01\n                        :ARG0 p3\n                        :ARG1 (ii / issue\n                                  :mod (a2 / all)))\n            :time (t / time\n                     :mod (s / some))))", "(g / grab-01\n   :ARG0 (a / and\n            :op1 (p2 / person\n                     :name (n / name\n                              :op1 \"Maxwell\"))\n            :op2 (p3 / person\n                     :name (n2 / name\n                               :op1 \"Jeanice\")))\n   :ARG1 (c / coffee)\n   :purpose (d / discuss-01\n               :ARG0 a\n               :ARG1 (ii / issue\n                         :mod (a2 / all)))\n   :time (t / time\n            :mod (s / some)))", "(p / possible-01\n   :ARG1 (g / grab-01\n            :ARG0 (a / and\n                     :op1 (p2 / person\n                              :name (n / name\n                                       :op1 \"Maxwell\"))\n                     :op2 (p3 / person\n                              :name (n2 / name\n                                        :op1 \"Jeanice\")))\n            :ARG1 (c / coffee)\n            :purpose (d / discuss-01\n                        :ARG0 a\n                        :ARG1 (ii / issue\n                                  :mod (a2 / all)))\n            :time (t / time\n                     :mod (s / some))))", "(p / possible-01\n   :ARG1 (g / grab-01\n            :ARG0 (a / and\n                     :op1 (p2 / person\n                              :name (n / name\n                                       :op1 \"Maxwell\"))\n                     :op2 (p3 / person\n                              :name (n2 / name\n                                        :op1 \"Jeanice\")))\n            :ARG1 (c / coffee)\n            :purpose (d / discuss-01\n                        :ARG0 a\n                        :ARG1 (ii / issue\n                                  :mod (a2 / all)))\n            :time (t / time\n                     :mod (s / some))))"], "smus": ["Maxwell was grateful he found Jeanice.", "Maxwell was grateful he found Jeanice.", "8 hours of babysitting", "Maxwell pays Jeanice for 8 hours of babysitting.", "The person is a friend.", "The person got aggressive.", "The teacher reacted.", "He is the son.", "The teacher reacted.", "When the teacher reacted, the person got aggressive.", "When the teacher reacted, the person got aggressive.", "His son argued with his friend.", "His son argued with his friend at school.", "Jeanice hasn't noticed if he has acted strange recently.", "Discuss all issues.", "Grab some time.", "and discuss all issues.", "and discuss all issues.", "Grab for discussion some time.", "Jeanice would grab a coffee.", "Maxwell will grab a coffee at some time.", "Jeanice will grab a coffee at some time.", "Maxwell and Jeanice will grab a coffee some time.", "At some time, Maxwell will grab a coffee to discuss all the issues.", "Jeanice will grab a coffee to discuss all the issues some time.", "Maxwell might grab a coffee to discuss all the issues some time.", "Maxwell might grab a coffee to discuss all the issues some time.", "Jeanice can grab a coffee to discuss all the issues at some time.", "Jeanice can grab a coffee to discuss all the issues at some time.", "Maxwell and Jeanice will grab a coffee to discuss all the issues some time.", "Maxwell and Jeanice could grab a coffee to discuss all the issues at some time.", "Maxwell and Jeanice could grab a coffee to discuss all the issues at some time."]}, {"instance_id": "samsum-403", "summary": "Kane recommends the new 30 Seconds to Mars album to Shannon.", "summary_trees": ["# ::snt Kane recommends the new 30 Seconds to Mars album to Shannon.\n(r / recommend-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Kane\"))\n      :ARG1 (a / album\n            :name (n2 / name\n                  :op1 \"30\"\n                  :op2 \"Seconds\"\n                  :op3 \"to\"\n                  :op4 \"Mars\")\n            :ARG1-of (n3 / new-01))\n      :ARG2 (p2 / person\n            :name (n4 / name\n                  :op1 \"Shannon\")))"], "tree": ["(r / recommend-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kane\"))\n   :ARG1 (a / album\n            :name (n2 / name\n                      :op1 \"30\"\n                      :op2 \"Seconds\"\n                      :op3 \"to\"\n                      :op4 \"Mars\")\n            :ARG1 (n3 / new-01))\n   :ARG2 (p2 / person\n             :name (n4 / name\n                       :op1 \"Shannon\")))"], "smus": ["Kane recommends a new album to Shannon called 30 Seconds to Mars."]}, {"instance_id": "samsum-404", "summary": "Paula helped Charlotte with correct pronunciation of \"Natal lily\".", "summary_trees": ["# ::snt Paula helped Charlotte with correct pronunciation of \"Natal lily\".\n(h / help-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Paula\"))\n      :ARG1 (p2 / pronounce-01\n            :ARG1 (n2 / name\n                  :op1 \"Natal\"\n                  :op2 \"Lily\")\n            :ARG1-of (c / correct-02))\n      :ARG2 (p3 / person\n            :name (n3 / name\n                  :op1 \"Charlotte\")))"], "tree": ["(h / help-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Paula\"))\n   :ARG1 (p2 / pronounce-01\n             :ARG1 (n2 / name\n                       :op1 \"Natal\"\n                       :op2 \"Lily\")\n             :ARG1 (c / correct-02)))", "(h / help-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Paula\"))\n   :ARG1 (p2 / pronounce-01\n             :ARG1 (n2 / name\n                       :op1 \"Natal\"\n                       :op2 \"Lily\")\n             :ARG1 (c / correct-02))\n   :ARG2 (p3 / person\n             :name (n3 / name\n                       :op1 \"Charlotte\")))"], "smus": ["Paula helped make the correct pronouncement of Natal Lily.", "Paula helped Charlotte make the correct pronunciation of Natal Lily."]}, {"instance_id": "samsum-405", "summary": "Natalie wants Monica's cheesecake recipe.", "summary_trees": ["# ::snt Natalie wants Monica's cheesecake recipe.\n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Natalie\"))\n      :ARG1 (r / recipe\n            :mod (c / cheesecake)\n            :poss (p2 / person\n                  :name (n2 / name\n                        :op1 \"Monica\"))))"], "tree": ["(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Natalie\"))\n   :ARG1 (r / recipe\n            :mod (c / cheesecake)\n            :poss (p2 / person\n                      :name (n2 / name\n                                :op1 \"Monica\"))))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Natalie\"))\n   :ARG1 (r / recipe\n            :mod (c / cheesecake)\n            :poss (p2 / person\n                      :name (n2 / name\n                                :op1 \"Monica\"))))"], "smus": ["Natalie wants Monica's cheesecake recipe.", "Natalie wants Monica's cheesecake recipe."]}, {"instance_id": "samsum-406", "summary": "Jack had to miss school because he is sick. Jamie was sick a lot last year but he got better thanks to doctor Tornez at City Medical Centre, next to the mall. Linda learns the school trip has been cancelled as many students are sick.", "summary_trees": ["# ::snt Jack had to miss school because he is sick.\n(o / obligate-01\n      :ARG1 (m / miss-02\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Jack\"))\n            :ARG1 (s / school))\n      :ARG1-of (c / cause-01\n            :ARG0 (s2 / sick-05\n                  :ARG1 p)))", "# ::snt Jamie was sick a lot last year but he got better thanks to doctor Tornez at City Medical Centre, next to the mall.\n(s / sick-05\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Jamie\"))\n      :time (y / year\n            :mod (l / last))\n      :quant (l2 / lot)\n      :concession-of (g / get-03\n            :ARG1 p\n            :ARG2 (w / well-05\n                  :ARG1 p\n                  :ARG2-of (h / have-degree-91\n                        :ARG1 p\n                        :ARG3 (m / more)))\n            :ARG2-of (t / thank-01\n                  :ARG1 (d / doctor\n                        :name (n2 / name\n                              :op1 \"Tornez\")\n                        :location (f / facility\n                              :name (n3 / name\n                                    :op1 \"City\"\n                                    :op2 \"Medical\"\n                                    :op3 \"Centre\")\n                              :location (n4 / next-to\n                                    :op1 (m2 / mall)))))))", "# ::snt Linda learns the school trip has been cancelled as many students are sick.\n(l / learn-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Linda\"))\n      :ARG1 (c / cancel-01\n            :ARG1 (t / trip-03\n                  :ARG0 (s / school))\n            :ARG1-of (c2 / cause-01\n                  :ARG0 (s2 / sick-05\n                        :ARG1 (p2 / person\n                              :ARG0-of (s3 / study-01)\n                              :quant (m / many))))))"], "tree": ["(c / cause-01\n   :ARG0 (s2 / sick-05\n             :ARG1 (p / person :name (n / name :op1 \"Jack\"))))", "(m / miss-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jack\"))\n   :ARG1 (s / school))", "(m / miss-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jack\"))\n   :ARG1 (s / school))", "(o / obligate-01\n   :ARG1 (m / miss-02\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Jack\"))\n            :ARG1 (s / school))\n   :ARG1 (c / cause-01\n            :ARG0 (s2 / sick-05\n                      :ARG1 p)))", "(h / have-degree-91\n   :ARG1 (p / person :name (n / name :op1 \"Jamie\"))\n   :ARG3 (m / more))", "(w / well-05\n   :ARG1 (p / person :name (n / name :op1 \"Jamie\"))\n   :ARG2 (h / have-degree-91\n            :ARG1 p\n            :ARG3 (m / more)))", "(s / sick-05\n   :time (y / year\n            :mod (l / last))\n   :quant (l2 / lot))", "(s / sick-05\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Jamie\"))\n   :time (y / year\n            :mod (l / last))\n   :quant (l2 / lot))", "(t / thank-01\n   :ARG1 (d / doctor\n            :name (n2 / name\n                      :op1 \"Tornez\")\n            :location (f / facility\n                         :name (n3 / name\n                                   :op1 \"City\"\n                                   :op2 \"Medical\"\n                                   :op3 \"Centre\")\n                         :location (n4 / next-to\n                                       :op1 (m2 / mall)))))", "(g / get-03\n   :ARG1 (p / person :name (n / name :op1 \"Jamie\"))\n   :ARG2 (w / well-05\n            :ARG1 p\n            :ARG2 (h / have-degree-91\n                     :ARG1 p\n                     :ARG3 (m / more)))\n   :ARG2 (t / thank-01\n            :ARG1 (d / doctor\n                     :name (n2 / name\n                               :op1 \"Tornez\")\n                     :location (f / facility\n                                  :name (n3 / name\n                                            :op1 \"City\"\n                                            :op2 \"Medical\"\n                                            :op3 \"Centre\")\n                                  :location (n4 / next-to\n                                                :op1 (m2 / mall))))))", "(c / cancel-01\n   :ARG1 (t / trip-03\n            :ARG0 (s / school)))", "(l / learn-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Linda\")))", "(s2 / sick-05\n    :ARG1 (p2 / person\n              :ARG0 (s3 / study-01)\n              :quant (m / many)))", "(s2 / sick-05\n    :ARG1 (p2 / person\n              :ARG0 (s3 / study-01)\n              :quant (m / many)))", "(c2 / cause-01\n    :ARG0 (s2 / sick-05\n              :ARG1 (p2 / person\n                        :ARG0 (s3 / study-01)\n                        :quant (m / many))))", "(c / cancel-01\n   :ARG1 (t / trip-03\n            :ARG0 (s / school))\n   :ARG1 (c2 / cause-01\n             :ARG0 (s2 / sick-05\n                       :ARG1 (p2 / person\n                                 :ARG0 (s3 / study-01)\n                                 :quant (m / many)))))", "(l / learn-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Linda\"))\n   :ARG1 (c / cancel-01\n            :ARG1 (t / trip-03\n                     :ARG0 (s / school))\n            :ARG1 (c2 / cause-01\n                      :ARG0 (s2 / sick-05\n                                :ARG1 (p2 / person\n                                          :ARG0 (s3 / study-01)\n                                          :quant (m / many))))))", "(l / learn-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Linda\"))\n   :ARG1 (c / cancel-01\n            :ARG1 (t / trip-03\n                     :ARG0 (s / school))\n            :ARG1 (c2 / cause-01\n                      :ARG0 (s2 / sick-05\n                                :ARG1 (p2 / person\n                                          :ARG0 (s3 / study-01)\n                                          :quant (m / many))))))"], "smus": ["Because Jack is sick.", "Jack did miss school.", "Jack did miss school.", "Jack had to miss school because he was sick.", "Jamie is more...", "Jamie is doing better.", "A lot of sick last year.", "Jamie was a lot sick last year.", "Thanks to Tornez, who is in the City Medical Centre next to the mall.", "Thanks to Tornez, who is in the City Medical Centre next to the mall, Jamie got better.", "School trip canceled.", "Linda learns.", "Many students are sick.", "Many students are sick.", "Because many students are sick.", "School trips were canceled because many students were sick.", "Linda learns that school trips have been canceled because many students are sick.", "Linda learns that school trips have been canceled because many students are sick."]}, {"instance_id": "samsum-407", "summary": "Poppy is not going to be home tonight but she won't reveal the reason to Dean. She won't be making dinner so Dean has to get something on his way home.", "summary_trees": ["# ::snt Poppy is not going to be home tonight but she won't reveal the reason to Dean.\n(c / contrast-01\n      :ARG1 (b / be-located-at-91\n            :polarity -\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Poppy\"))\n            :ARG2 (h / home)\n            :time (d / date-entity\n                  :dayperiod (n2 / night)\n                  :mod (t / today)))\n      :ARG2 (r / reveal-01\n            :polarity -\n            :ARG0 p\n            :ARG1 (r2 / reason\n                  :ARG0-of (c2 / cause-01\n                        :ARG1 b))\n            :ARG2 (p2 / person\n                  :name (n3 / name\n                        :op1 \"Dean\"))))", "# ::snt She won't be making dinner so Dean has to get something on his way home.\n(c / cause-01\n      :ARG0 (m / make-18\n            :polarity -\n            :ARG0 (s / she)\n            :ARG1 (d / dinner))\n      :ARG1 (o / obligate-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Dean\"))\n            :ARG2 (g / get-01\n                  :ARG0 p\n                  :ARG1 (s2 / something)\n                  :time (g2 / go-02\n                        :ARG0 p\n                        :ARG4 (h / home)))))"], "tree": ["(b / be-located-at-91\n   :polarity -\n   :time (d / date-entity\n            :dayperiod (n2 / night)\n            :mod (t / today)))", "(r / reveal-01\n   :polarity -\n   :ARG0 (p / person :name (n / name :op1 \"Poppy\"))\n   :ARG1 (r2 / reason\n             :ARG0 (c2 / cause-01\n                       :ARG1 (b / be-located-at-91)))\n   :ARG2 (p2 / person\n             :name (n3 / name\n                       :op1 \"Dean\")))", "(b / be-located-at-91\n   :polarity -\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Poppy\"))\n   :ARG2 (h / home)\n   :time (d / date-entity\n            :dayperiod (n2 / night)\n            :mod (t / today)))", "(c / contrast-01\n   :ARG1 (b / be-located-at-91\n            :polarity -\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Poppy\"))\n            :ARG2 (h / home)\n            :time (d / date-entity\n                     :dayperiod (n2 / night)\n                     :mod (t / today)))\n   :ARG2 (r / reveal-01\n            :polarity -\n            :ARG0 p\n            :ARG1 (r2 / reason\n                      :ARG0 (c2 / cause-01\n                                :ARG1 b))\n            :ARG2 (p2 / person\n                      :name (n3 / name\n                                :op1 \"Dean\"))))", "(c / contrast-01\n   :ARG1 (b / be-located-at-91\n            :polarity -\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Poppy\"))\n            :ARG2 (h / home)\n            :time (d / date-entity\n                     :dayperiod (n2 / night)\n                     :mod (t / today)))\n   :ARG2 (r / reveal-01\n            :polarity -\n            :ARG0 p\n            :ARG1 (r2 / reason\n                      :ARG0 (c2 / cause-01\n                                :ARG1 b))\n            :ARG2 (p2 / person\n                      :name (n3 / name\n                                :op1 \"Dean\"))))", "(g2 / go-02\n    :ARG0 (p / person :name (n / name :op1 \"Dean\"))\n    :ARG4 (h / home))", "(g2 / go-02\n    :ARG0 (p / person :name (n / name :op1 \"Dean\"))\n    :ARG4 (h / home))", "(m / make-18\n   :polarity -\n   :ARG0 (s / she)\n   :ARG1 (d / dinner))", "(g / get-01\n   :ARG0 (p / person :name (n / name :op1 \"Dean\"))\n   :ARG1 (s2 / something)\n   :time (g2 / go-02\n             :ARG0 p\n             :ARG4 (h / home)))", "(g / get-01\n   :ARG0 (p / person :name (n / name :op1 \"Dean\"))\n   :ARG1 (s2 / something)\n   :time (g2 / go-02\n             :ARG0 p\n             :ARG4 (h / home)))", "(o / obligate-01\n   :ARG2 (g / get-01\n            :ARG0 (p / person :name (n / name :op1 \"Dean\"))\n            :ARG1 (s2 / something)\n            :time (g2 / go-02\n                      :ARG0 p\n                      :ARG4 (h / home))))", "(o / obligate-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Dean\"))\n   :ARG2 (g / get-01\n            :ARG0 p\n            :ARG1 (s2 / something)\n            :time (g2 / go-02\n                      :ARG0 p\n                      :ARG4 (h / home))))", "(o / obligate-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Dean\"))\n   :ARG2 (g / get-01\n            :ARG0 p\n            :ARG1 (s2 / something)\n            :time (g2 / go-02\n                      :ARG0 p\n                      :ARG4 (h / home))))", "(c / cause-01\n   :ARG0 (m / make-18\n            :polarity -\n            :ARG0 (s / she)\n            :ARG1 (d / dinner))\n   :ARG1 (o / obligate-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Dean\"))\n            :ARG2 (g / get-01\n                     :ARG0 p\n                     :ARG1 (s2 / something)\n                     :time (g2 / go-02\n                               :ARG0 p\n                               :ARG4 (h / home)))))"], "smus": ["Not tonight.", "Poppy did not reveal to Dean the reason for being where she is.", "Poppy will not be home tonight.", "Poppy will not be home tonight, but will not reveal to Dean the reason.", "Poppy will not be home tonight, but will not reveal to Dean the reason.", "Dean went home.", "Dean went home.", "She wasn't making dinner.", "Dean will get something when he goes home.", "Dean will get something when he goes home.", "Dean has to get something when he goes home.", "Dean has to get something when he goes home.", "Dean has to get something when he goes home.", "Dean had to get something when he went home because she wasn't making dinner."]}, {"instance_id": "samsum-408", "summary": "Paul can couch the game on Saturday as Matthew hasn't found anyone to do that yet. ", "summary_trees": ["# ::snt Paul can couch the game on Saturday as Matthew hasn't found anyone to do that yet.\n(c / cause-01\n      :ARG0 (f / find-01\n            :polarity -\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Matthew\"))\n            :ARG1 (a / anyone\n                  :ARG0-of (c2 / couch-01\n                        :ARG1 (g / game)\n                        :time (y / yet))))\n      :ARG1 (p2 / possible-01\n            :ARG1 (c3 / couch-01\n                  :ARG0 (p3 / person\n                        :name (n2 / name\n                              :op1 \"Paul\"))\n                  :ARG1 g\n                  :time (d / date-entity\n                        :weekday (s / saturday)))))"], "tree": ["(c3 / couch-01\n    :time (d / date-entity\n             :weekday (s / saturday)))", "(c3 / couch-01\n    :ARG0 (p3 / person\n              :name (n2 / name\n                        :op1 \"Paul\"))\n    :ARG1 (g / game)\n    :time (d / date-entity\n             :weekday (s / saturday)))", "(p2 / possible-01\n    :ARG1 (c3 / couch-01\n              :ARG0 (p3 / person\n                        :name (n2 / name\n                                  :op1 \"Paul\"))\n              :ARG1 (g / game)\n              :time (d / date-entity\n                       :weekday (s / saturday))))", "(f / find-01\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Matthew\"))\n   :ARG1 (a / anyone\n            :ARG0 (c2 / couch-01\n                      :ARG1 (g / game)\n                      :time (y / yet))))", "(c / cause-01\n   :ARG0 (f / find-01\n            :polarity -\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Matthew\"))\n            :ARG1 (a / anyone\n                     :ARG0 (c2 / couch-01\n                               :ARG1 (g / game)\n                               :time (y / yet))))\n   :ARG1 (p2 / possible-01\n             :ARG1 (c3 / couch-01\n                       :ARG0 (p3 / person\n                                 :name (n2 / name\n                                           :op1 \"Paul\"))\n                       :ARG1 g\n                       :time (d / date-entity\n                                :weekday (s / saturday)))))"], "smus": ["Couch on Saturday.", "Paul will couch the game on Saturday.", "Paul could couch the game on Saturday.", "Matthew hasn't found anyone to couch the game yet.", "Matthew hasn't found anyone to couch the game yet, so Paul might couch it on Saturday."]}, {"instance_id": "samsum-409", "summary": "Igor has a lot of work on his notice period and he feels demotivated. John thinks he should do what he has to do nevertheless. ", "summary_trees": ["# ::snt Igor has a lot of work on his notice period and he feels demotivated.\n(a / and\n      :op1 (w / work-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Igor\"))\n            :ARG1 (p2 / period\n                  :time-of (n2 / notice-03\n                        :ARG0 p))\n            :quant (l / lot))\n      :op2 (f / feel-01\n            :ARG0 p\n            :ARG1 (m / motivate-01\n                  :polarity -\n                  :ARG1 p)))", "# ::snt John thinks he should do what he has to do nevertheless.\n(t / think-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"John\"))\n      :ARG1 (r / recommend-01\n            :ARG1 (d / do-02\n                  :ARG0 p\n                  :ARG1 (t2 / thing\n                        :ARG1-of (d2 / do-02\n                              :ARG0 p\n                              :ARG2-of (o / obligate-01\n                                    :ARG1 p)))))\n      :ARG1-of (h / have-concession-91))"], "tree": ["(f / feel-01\n   :ARG0 (p / person :name (n / name :op1 \"Igor\"))\n   :ARG1 (m / motivate-01\n            :polarity -\n            :ARG1 p))", "(f / feel-01\n   :ARG0 (p / person :name (n / name :op1 \"Igor\"))\n   :ARG1 (m / motivate-01\n            :polarity -\n            :ARG1 p))", "(w / work-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Igor\")))", "(w / work-01\n   :ARG1 (p2 / period\n             :time (n2 / notice-03\n                       :ARG0 (p / person :name (n / name :op1 \"Igor\")))))", "(w / work-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Igor\"))\n   :ARG1 (p2 / period\n             :time (n2 / notice-03\n                       :ARG0 p)))", "(w / work-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Igor\"))\n   :ARG1 (p2 / period\n             :time (n2 / notice-03\n                       :ARG0 p))\n   :quant (l / lot))", "(r / recommend-01\n   :ARG1 (d / do-02\n            :ARG0 (p / person :name (n / name :op1 \"John\"))\n            :ARG1 (t2 / thing)))", "(r / recommend-01\n   :ARG1 (d / do-02\n            :ARG0 (p / person :name (n / name :op1 \"John\"))\n            :ARG1 (t2 / thing)))", "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\"))\n   :ARG1 (r / recommend-01\n            :ARG1 (d / do-02\n                     :ARG0 p\n                     :ARG1 (t2 / thing))))", "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\"))\n   :ARG1 (r / recommend-01\n            :ARG1 (d / do-02\n                     :ARG0 p\n                     :ARG1 (t2 / thing))))"], "smus": ["Igor feels unmotivated.", "Igor feels unmotivated.", "Igor did work.", "The work was done during the period of Igor's notice.", "Igor worked a notice period.", "Igor did a lot of work in his notice period.", "John should do that.", "John should do that.", "John thinks he should do the same.", "John thinks he should do the same."]}, {"instance_id": "samsum-410", "summary": "Jerry will be home in 40 minutes. ", "summary_trees": ["# ::snt Jerry will be home in 40 minutes.\n(b / be-located-at-91\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Jerry\"))\n      :ARG2 (h / home)\n      :time (a / after\n            :op1 (n2 / now)\n            :quant (t / temporal-quantity\n                  :quant 40\n                  :unit (m / minute))))"], "tree": ["(b / be-located-at-91\n   :time (a / after\n            :op1 (n2 / now)\n            :quant (t / temporal-quantity\n                      :quant 40\n                      :unit (m / minute))))", "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Jerry\"))\n   :ARG2 (h / home)\n   :time (a / after\n            :op1 (n2 / now)\n            :quant (t / temporal-quantity\n                      :quant 40\n                      :unit (m / minute))))"], "smus": ["40 minutes away.", "Jerry will be home in 40 minutes."]}, {"instance_id": "samsum-411", "summary": "Catherine applied for an accounting position at Pandora. Jake has been working there for 5 years. This job offers a clear career path and benefits. Jake got promoted twice with salary increase. Catherine will have an interview on Monday.", "summary_trees": ["# ::snt Catherine applied for an accounting position at Pandora.\n(a / apply-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Catherine\"))\n      :ARG1 (p2 / position\n            :topic (a2 / account-01)\n            :location (c / company\n                  :name (n2 / name\n                        :op1 \"Pandora\"))))", "# ::snt Jake has been working there for 5 years.\n(w / work-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jake\"))\n      :ARG2 (t / there)\n      :duration (t2 / temporal-quantity\n            :quant 5\n            :unit (y / year)))", "# ::snt This job offers a clear career path and benefits.\n(o / offer-01\n      :ARG0 (j / job\n            :mod (t / this))\n      :ARG1 (a / and\n            :op1 (p / path\n                  :mod (c / career)\n                  :ARG1-of (c2 / clear-06))\n            :op2 (b / benefit-01)))", "# ::snt Jake got promoted twice with salary increase.\n(p / promote-01\n      :frequency 2\n      :ARG1 (p2 / person\n            :name (n / name\n                  :op1 \"Jake\"))\n      :manner (ii / increase-01\n            :ARG1 (s / salary)))", "# ::snt Catherine will have an interview on Monday.\n(ii / interview-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Catherine\"))\n      :time (d / date-entity\n            :weekday (m / monday)))"], "tree": ["(a / apply-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Catherine\")))", "(a / apply-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Catherine\"))\n   :ARG1 (p2 / position\n             :topic (a2 / account-01)\n             :location (c / company\n                          :name (n2 / name\n                                    :op1 \"Pandora\"))))", "(a / apply-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Catherine\"))\n   :ARG1 (p2 / position\n             :topic (a2 / account-01)\n             :location (c / company\n                          :name (n2 / name\n                                    :op1 \"Pandora\"))))", "(w / work-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jake\")))", "(w / work-01\n   :duration (t2 / temporal-quantity\n                 :quant 5\n                 :unit (y / year)))", "(w / work-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jake\"))\n   :ARG2 (t / there))", "(w / work-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jake\"))\n   :ARG2 (t / there)\n   :duration (t2 / temporal-quantity\n                 :quant 5\n                 :unit (y / year)))", "(o / offer-01\n   :ARG0 (j / job\n            :mod (t / this))\n   :ARG1 (b / benefit-01))", "(o / offer-01\n   :ARG0 (j / job\n            :mod (t / this))\n   :ARG1 (b / benefit-01))", "(o / offer-01\n   :ARG1 (p / path\n            :mod (c / career)\n            :ARG1 (c2 / clear-06)))", "(o / offer-01\n   :ARG1 (a / and\n            :op1 (p / path\n                    :mod (c / career)\n                    :ARG1 (c2 / clear-06))\n            :op2 (b / benefit-01)))", "(o / offer-01\n   :ARG0 (j / job\n            :mod (t / this))\n   :ARG1 (p / path\n            :mod (c / career)\n            :ARG1 (c2 / clear-06)))", "(o / offer-01\n   :ARG0 (j / job\n            :mod (t / this))\n   :ARG1 (p / path\n            :mod (c / career)\n            :ARG1 (c2 / clear-06)))", "(o / offer-01\n   :ARG0 (j / job\n            :mod (t / this))\n   :ARG1 (a / and\n            :op1 (p / path\n                    :mod (c / career)\n                    :ARG1 (c2 / clear-06))\n            :op2 (b / benefit-01)))", "(o / offer-01\n   :ARG0 (j / job\n            :mod (t / this))\n   :ARG1 (a / and\n            :op1 (p / path\n                    :mod (c / career)\n                    :ARG1 (c2 / clear-06))\n            :op2 (b / benefit-01)))", "(p / promote-01\n   :frequency 2\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Jake\"))\n   :manner (ii / increase-01\n               :ARG1 (s / salary)))", "(ii / interview-01\n    :time (d / date-entity\n             :weekday (m / monday)))"], "smus": ["Catherine applied.", "Catherine applied for an account position at pandora.", "Catherine applied for an account position at pandora.", "Jake is working.", "Working for 5 years.", "Jake was working there.", "Jake has been working there for 5 years.", "This job offers benefits.", "This job offers benefits.", "offers a clear career path.", "offers a clear career path and benefits.", "This job offers a clear career path.", "This job offers a clear career path.", "This job offers a clear career path and benefits.", "This job offers a clear career path and benefits.", "Jake was promoted twice with an increase in salary.", "The interview will take place Monday."]}, {"instance_id": "samsum-412", "summary": "Leah met a creepy guy last night at a poetry reading. He knew she speaks German and named all the friends who went to a past event with her. She didn't tell him any of this. He googled her before. Leah had liked a post mentioning him 2 weeks earlier. ", "summary_trees": ["# ::snt Leah met a creepy guy last night at a poetry reading.\n(m / meet-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Leah\"))\n      :ARG1 (g / guy\n            :ARG0-of (c / creepy-04))\n      :time (d / date-entity\n            :dayperiod (n2 / night)\n            :mod (y / yesterday))\n      :location (r / read-01\n            :ARG1 (p2 / poetry)))", "# ::snt He knew she speaks German and named all the friends who went to a past event with her.\n(a / and\n      :op1 (k / know-01\n            :ARG0 (h / he)\n            :ARG1 (s / speak-01\n                  :ARG0 (s2 / she)\n                  :ARG3 (l / language\n                        :name (n / name\n                              :op1 \"German\"))))\n      :op2 (n2 / name-01\n            :ARG0 h\n            :ARG1 (p / person\n                  :ARG0-of (h2 / have-rel-role-91\n                        :ARG1 h\n                        :ARG2 (f / friend))\n                  :ARG0-of (g / go-02\n                        :ARG4 (e / event\n                              :time (p2 / past))\n                        :accompanier s2)\n                  :mod (a2 / all))))", "# ::snt She didn't tell him any of this.\n(t / tell-01\n      :polarity -\n      :ARG0 (s / she)\n      :ARG1 (t2 / this\n            :mod (a / any))\n      :ARG2 (h / he))", "# ::snt He googled her before.\n(g / google-01\n      :ARG0 (h / he)\n      :ARG1 (s / she)\n      :time (b / before))", "# ::snt Leah had liked a post mentioning him 2 weeks earlier.\n(l / like-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Leah\"))\n      :ARG1 (p2 / post-01\n            :ARG0-of (m / mention-01\n                  :ARG1 (h / he)))\n      :time (b / before\n            :op1 (n2 / now)\n            :quant (t / temporal-quantity\n                  :quant 2\n                  :unit (w / week))))"], "tree": ["(m / meet-02\n   :time (d / date-entity\n            :dayperiod (n2 / night)\n            :mod (y / yesterday))\n   :location (r / read-01))", "(m / meet-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Leah\"))\n   :ARG1 (g / guy\n            :ARG0 (c / creepy-04))\n   :time (d / date-entity\n            :dayperiod (n2 / night)\n            :mod (y / yesterday))\n   :location (r / read-01\n                :ARG1 (p2 / poetry)))", "(s / speak-01\n   :ARG0 (s2 / she)\n   :ARG3 (l / language\n            :name (n / name\n                     :op1 \"German\")))", "(k / know-01\n   :ARG0 (h / he)\n   :ARG1 (s / speak-01\n            :ARG0 (s2 / she)\n            :ARG3 (l / language\n                     :name (n / name\n                              :op1 \"German\"))))", "(k / know-01\n   :ARG0 (h / he)\n   :ARG1 (s / speak-01\n            :ARG0 (s2 / she)\n            :ARG3 (l / language\n                     :name (n / name\n                              :op1 \"German\"))))", "(n2 / name-01\n    :ARG1 (p / person\n             :ARG0 (h2 / have-rel-role-91\n                       :ARG1 (h / he)\n                       :ARG2 (f / friend))\n             :ARG0 (g / go-02\n                      :ARG4 (e / event\n                               :time (p2 / past))\n                      :accompanier (s2 / she))\n             :mod (a2 / all)))", "(n2 / name-01\n    :ARG0 (h / he)\n    :ARG1 (p / person\n             :ARG0 (h2 / have-rel-role-91\n                       :ARG1 h\n                       :ARG2 (f / friend))\n             :ARG0 (g / go-02\n                      :ARG4 (e / event\n                               :time (p2 / past))\n                      :accompanier (s2 / she))\n             :mod (a2 / all)))", "(t / tell-01\n   :polarity -\n   :ARG0 (s / she)\n   :ARG1 (t2 / this\n             :mod (a / any))\n   :ARG2 (h / he))", "(g / google-01\n   :ARG0 (h / he)\n   :ARG1 (s / she)\n   :time (b / before))", "(p2 / post-01\n    :ARG0 (m / mention-01\n             :ARG1 (h / he)))", "(l / like-01\n   :ARG1 (p2 / post-01\n             :ARG0 (m / mention-01\n                      :ARG1 (h / he))))", "(l / like-01\n   :time (b / before\n            :op1 (n2 / now)\n            :quant (t / temporal-quantity\n                      :quant 2\n                      :unit (w / week))))", "(l / like-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Leah\"))\n   :ARG1 (p2 / post-01\n             :ARG0 (m / mention-01\n                      :ARG1 (h / he))))", "(l / like-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Leah\"))\n   :ARG1 (p2 / post-01\n             :ARG0 (m / mention-01\n                      :ARG1 (h / he)))\n   :time (b / before\n            :op1 (n2 / now)\n            :quant (t / temporal-quantity\n                      :quant 2\n                      :unit (w / week))))"], "smus": ["met at the read last night.", "Last night, Leah met a creepy guy at a poetry reading.", "She speaks German.", "He knew she speaks German.", "He knew she speaks German.", "All his friends who went to the past with her were named.", "He named all his friends who went to an event in the past with her.", "She didn't tell him any of this.", "He googled her before.", "Post mentioning him.", "liked the post mentioning him.", "Liked two weeks ago.", "Leah liked the post mentioning him.", "Leah has liked the post two weeks ago mentioning him."]}, {"instance_id": "samsum-413", "summary": "Randy has been lying about being rich and travelling around the world, as he lives in a studio apartment in the suburbs.", "summary_trees": ["# ::snt Randy has been lying about being rich and travelling around the world, as he lives in a studio apartment in the suburbs.\n(l / lie-08\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Randy\"))\n      :ARG3 (a / and\n            :op1 (r / rich\n                  :domain p)\n            :op2 (t / travel-01\n                  :ARG0 p\n                  :ARG2 (a2 / around\n                        :op1 (w / world))))\n      :time (l2 / live-01\n            :ARG0 p\n            :location (a3 / apartment\n                  :mod (s / studio)\n                  :location (s2 / suburb))))"], "tree": ["(l / lie-08\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Randy\")))", "(l2 / live-01\n    :location (a3 / apartment\n                  :mod (s / studio)\n                  :location (s2 / suburb)))", "(l2 / live-01\n    :location (a3 / apartment\n                  :mod (s / studio)\n                  :location (s2 / suburb)))", "(l2 / live-01\n    :ARG0 (p / person :name (n / name :op1 \"Randy\"))\n    :location (a3 / apartment\n                  :mod (s / studio)\n                  :location (s2 / suburb)))", "(l2 / live-01\n    :ARG0 (p / person :name (n / name :op1 \"Randy\"))\n    :location (a3 / apartment\n                  :mod (s / studio)\n                  :location (s2 / suburb)))", "(l / lie-08\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Randy\"))\n   :ARG3 (r / rich\n            :domain p)\n   :time (l2 / live-01\n             :ARG0 p\n             :location (a3 / apartment\n                           :mod (s / studio)\n                           :location (s2 / suburb))))", "(l / lie-08\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Randy\"))\n   :ARG3 (t / travel-01\n            :ARG0 p\n            :ARG2 (a2 / around\n                      :op1 (w / world)))\n   :time (l2 / live-01\n             :ARG0 p\n             :location (a3 / apartment\n                           :mod (s / studio)\n                           :location (s2 / suburb)))\n   :time l2)", "(l / lie-08\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Randy\"))\n   :ARG3 (a / and\n            :op1 (r / rich\n                    :domain p)\n            :op2 (t / travel-01\n                    :ARG0 p\n                    :ARG2 (a2 / around\n                              :op1 (w / world))))\n   :time (l2 / live-01\n             :ARG0 p\n             :location (a3 / apartment\n                           :mod (s / studio)\n                           :location (s2 / suburb))))"], "smus": ["Rand was lying.", "Lives in a studio apartment in the suburbs.", "Lives in a studio apartment in the suburbs.", "Rand lives in a studio apartment in the suburbs.", "Rand lives in a studio apartment in the suburbs.", "Rand is lying about being rich when he lives in a studio apartment in the suburbs.", "When Randy lives in a studio apartment in the suburbs, he is lying about traveling around the world.", "When Randy lives in a studio apartment in the suburbs, he is lying about being rich and traveling around the world."]}, {"instance_id": "samsum-414", "summary": "Kate had a fight with Chris about refugees. He thinks the U.S. should not accept them. Kate and Mary do not share this opinion. They are having second thoughts about their friendship.", "summary_trees": ["# ::snt Kate had a fight with Chris about refugees.\n(f / fight-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Kate\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Chris\"))\n      :ARG2 (r / refugee))", "# ::snt He thinks the U.S. should not accept them.\n(t / think-01\n      :ARG0 (h / he)\n      :ARG1 (r / recommend-01\n            :ARG1 (a / accept-01\n                  :polarity -\n                  :ARG0 (c / country\n                        :name (n / name\n                              :op1 \"U.S.\"))\n                  :ARG1 (t2 / they))))", "# ::snt Kate and Mary do not share this opinion.\n(s / share-01\n      :polarity -\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Kate\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Mary\")))\n      :ARG1 (t / thing\n            :ARG1-of (o / opine-01)\n            :mod (t2 / this)))", "# ::snt They are having second thoughts about their friendship.\n(t / think-01\n      :ARG0 (t2 / they)\n      :ARG1 (f / friendship\n            :poss t2)\n      :ord (o / ordinal-entity\n            :value 2))"], "tree": ["(f / fight-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kate\")))", "(f / fight-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Chris\")))", "(f / fight-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kate\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Chris\")))", "(f / fight-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kate\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Chris\"))\n   :ARG2 (r / refugee))", "(s / share-01\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kate\"))\n   :ARG1 (t / thing\n            :ARG1 (o / opine-01)\n            :mod (t2 / this)))", "(s / share-01\n   :polarity -\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Mary\"))\n   :ARG1 (t / thing\n            :ARG1 (o / opine-01)\n            :mod (t2 / this))\n   :ARG1 t)", "(s / share-01\n   :polarity -\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Kate\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Mary\")))\n   :ARG1 (t / thing\n            :ARG1 (o / opine-01)\n            :mod (t2 / this)))", "(t / think-01\n   :ord (o / ordinal-entity\n           :value 2))", "(t / think-01\n   :ARG0 (t2 / they)\n   :ARG1 (f / friendship\n            :poss t2))", "(t / think-01\n   :ARG0 (t2 / they)\n   :ARG1 (f / friendship\n            :poss t2)\n   :ord (o / ordinal-entity\n           :value 2))"], "smus": ["Kate and the fight.", "Chris is in a fight.", "Kate and Chris are in a fight.", "Kate and Chris are fighting for refugees.", "Kate does not share this opinion.", "Mary does not share this opinion.", "Kate and Mary do not share this opinion.", "Second thought.", "They think of their friendship.", "Their second thought was their friendship."]}, {"instance_id": "samsum-415", "summary": "Elliot can't talk to Jordan now, he's busy. He'll call him back at 8 pm. Jordan is going to Brad's funeral. He had liver cancer.", "summary_trees": ["# ::snt Elliot can't talk to Jordan now, he's busy.\n(p / possible-01\n      :polarity -\n      :ARG1 (t / talk-01\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Elliot\"))\n            :ARG2 (c / country\n                  :name (n2 / name\n                        :op1 \"Jordan\"))\n            :time (n3 / now))\n      :ARG1-of (c2 / cause-01\n            :ARG0 (b / busy-01\n                  :ARG1 p2)))", "# ::snt He'll call him back at 8 pm.\n(c / call-02\n      :ARG0 (h / he)\n      :ARG1 (h2 / he)\n      :mod (b / back)\n      :time (d / date-entity\n            :time \"18:00\"))", "# ::snt Jordan is going to Brad's funeral.\n(g / go-02\n      :ARG0 (c / country\n            :name (n / name\n                  :op1 \"Jordan\"))\n      :ARG4 (f / funeral\n            :poss (p / person\n                  :name (n2 / name\n                        :op1 \"Brad\"))))", "# ::snt He had liver cancer.\n(h / have-03\n      :ARG0 (h2 / he)\n      :ARG1 (d / disease\n            :name (n / name\n                  :op1 \"liver\"\n                  :op2 \"cancer\")))"], "tree": ["(p / possible-01\n   :polarity -\n   :ARG1 (t / talk-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Elliot\"))\n            :ARG2 (c / country\n                     :name (n2 / name\n                               :op1 \"Jordan\"))\n            :time (n3 / now))\n   :ARG1 (c2 / cause-01\n             :ARG0 (b / busy-01\n                      :ARG1 p2)))", "(g / go-02\n   :ARG0 (c / country\n            :name (n / name\n                     :op1 \"Jordan\")))", "(g / go-02\n   :ARG0 (c / country\n            :name (n / name\n                     :op1 \"Jordan\"))\n   :ARG4 (f / funeral\n            :poss (p / person\n                     :name (n2 / name\n                               :op1 \"Brad\"))))", "(g / go-02\n   :ARG0 (c / country\n            :name (n / name\n                     :op1 \"Jordan\"))\n   :ARG4 (f / funeral\n            :poss (p / person\n                     :name (n2 / name\n                               :op1 \"Brad\"))))", "(h / have-03\n   :ARG0 (h2 / he)\n   :ARG1 (d / disease\n            :name (n / name\n                     :op1 \"liver\"\n                     :op2 \"cancer\")))", "(h / have-03\n   :ARG0 (h2 / he)\n   :ARG1 (d / disease\n            :name (n / name\n                     :op1 \"liver\"\n                     :op2 \"cancer\")))"], "smus": ["Elliott can't talk about Jordan now because he's busy.", "Jordan is going.", "Jordan is going to Brad's funeral.", "Jordan is going to Brad's funeral.", "He had liver cancer.", "He had liver cancer."]}, {"instance_id": "samsum-416", "summary": "Del accused Stanley of having an affair, because he couldn't go with her this weekend due to his work. They've only been together for 4 months, so it's not a good sign. Now Bill and Stanley need to take care of the Lidem project. Division of tasks is on Stanley, because Alison is unreachable.", "summary_trees": ["# ::snt Del accused Stanley of having an affair, because he couldn't go with her this weekend due to his work.\n(a / accuse-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Del\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Stanley\"))\n      :ARG2 (a2 / affair-01\n            :ARG0 p2)\n      :ARG1-of (c / cause-01\n            :ARG0 (p3 / possible-01\n                  :polarity -\n                  :ARG1 (g / go-02\n                        :ARG0 p2\n                        :ARG4 (s / she)\n                        :time (w / weekend\n                              :mod (t / this)))\n                  :ARG1-of (c2 / cause-01\n                        :ARG0 (w2 / work-01\n                              :ARG0 p2)))))", "# ::snt They've only been together for 4 months, so it's not a good sign.\n(c / cause-01\n      :ARG0 (t / together\n            :domain (t2 / they)\n            :duration (t3 / temporal-quantity\n                  :quant 4\n                  :unit (m / month)\n                  :mod (o / only)))\n      :ARG1 (s / signal-07\n            :ARG1-of (g / good-02\n                  :polarity -)))", "# ::snt Now Bill and Stanley need to take care of the Lidem project.\n(o / obligate-01\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Bill\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Stanley\")))\n      :ARG2 (c / care-03\n            :ARG0 a\n            :ARG1 (p3 / project\n                  :name (n3 / name\n                        :op1 \"Lidem\")))\n      :time (n4 / now))", "# ::snt Division of tasks is on Stanley, because Alison is unreachable.\n(c / cause-01\n      :ARG0 (p / possible-01\n            :polarity -\n            :ARG1 (r / reach-01\n                  :ARG1 (p2 / person\n                        :name (n / name\n                              :op1 \"Alison\"))))\n      :ARG1 (d / divide-02\n            :ARG1 (t / task)\n            :ARG2 (p3 / person\n                  :name (n2 / name\n                        :op1 \"Stanley\"))))"], "tree": ["(c2 / cause-01\n    :ARG0 (w2 / work-01\n              :ARG0 (p2 / person :name (n2 / name :op1 \"Stanley\"))))", "(a / accuse-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Stanley\"))\n   :ARG2 (a2 / affair-01\n             :ARG0 p2))", "(a / accuse-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Del\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Stanley\"))\n   :ARG2 (a2 / affair-01\n             :ARG0 p2))", "(p3 / possible-01\n    :polarity -\n    :ARG1 (g / go-02\n             :ARG0 (p2 / person :name (n2 / name :op1 \"Stanley\"))\n             :ARG4 (s / she)\n             :time (w / weekend\n                      :mod (t / this)))\n    :ARG1 (c2 / cause-01\n              :ARG0 (w2 / work-01\n                        :ARG0 p2)))", "(c / cause-01\n   :ARG0 (p3 / possible-01\n             :polarity -\n             :ARG1 (g / go-02\n                      :ARG0 (p2 / person :name (n2 / name :op1 \"Stanley\"))\n                      :ARG4 (s / she)\n                      :time (w / weekend\n                               :mod (t / this)))\n             :ARG1 (c2 / cause-01\n                       :ARG0 (w2 / work-01\n                                 :ARG0 p2))))", "(s / signal-07\n   :ARG1 (g / good-02\n            :polarity -))", "(c / care-03\n   :ARG0 (a / and)\n   :ARG1 (p3 / project\n             :name (n3 / name\n                       :op1 \"Lidem\")))", "(c / care-03\n   :ARG0 (a / and)\n   :ARG1 (p3 / project\n             :name (n3 / name\n                       :op1 \"Lidem\")))", "(o / obligate-01\n   :ARG2 (c / care-03\n            :ARG0 (a / and)\n            :ARG1 (p3 / project\n                      :name (n3 / name\n                                :op1 \"Lidem\"))))", "(o / obligate-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Bill\"))\n   :ARG2 (c / care-03\n            :ARG0 p\n            :ARG1 (p3 / project\n                      :name (n3 / name\n                                :op1 \"Lidem\"))))", "(o / obligate-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Stanley\"))\n   :ARG2 (c / care-03\n            :ARG0 p2\n            :ARG1 (p3 / project\n                      :name (n3 / name\n                                :op1 \"Lidem\")))\n   :ARG2 c)", "(o / obligate-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Bill\"))\n   :ARG2 (c / care-03\n            :ARG0 p\n            :ARG1 (p3 / project\n                      :name (n3 / name\n                                :op1 \"Lidem\")))\n   :time (n4 / now))", "(o / obligate-01\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Bill\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Stanley\")))\n   :ARG2 (c / care-03\n            :ARG0 a\n            :ARG1 (p3 / project\n                      :name (n3 / name\n                                :op1 \"Lidem\"))))", "(o / obligate-01\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Bill\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Stanley\")))\n   :ARG2 (c / care-03\n            :ARG0 a\n            :ARG1 (p3 / project\n                      :name (n3 / name\n                                :op1 \"Lidem\")))\n   :time (n4 / now))", "(d / divide-02\n   :ARG1 (t / task)\n   :ARG2 (p3 / person\n             :name (n2 / name\n                       :op1 \"Stanley\")))", "(d / divide-02\n   :ARG1 (t / task)\n   :ARG2 (p3 / person\n             :name (n2 / name\n                       :op1 \"Stanley\")))", "(p / possible-01\n   :polarity -\n   :ARG1 (r / reach-01\n            :ARG1 (p2 / person\n                      :name (n / name\n                               :op1 \"Alison\"))))", "(c / cause-01\n   :ARG0 (p / possible-01\n            :polarity -\n            :ARG1 (r / reach-01\n                     :ARG1 (p2 / person\n                               :name (n / name\n                                        :op1 \"Alison\"))))\n   :ARG1 (d / divide-02\n            :ARG1 (t / task)\n            :ARG2 (p3 / person\n                      :name (n2 / name\n                                :op1 \"Stanley\"))))"], "smus": ["Because Stanley works.", "Stanley was accused of having an affair.", "Del accused Stanley of having an affair.", "Stanley couldn't go to her this weekend because of work.", "Because Stanley can't go to her this weekend because of work.", "Not a good sign.", "Lidem is a project that needs care and attention.", "Lidem is a project that needs care and attention.", "Lidem must be taken care of.", "Bill had to take care of the Lidem project.", "Stanley had to take care of the Lidem project.", "Bill now has to take care of the Lidem project.", "Bill and Stanley had to take care of the Lidem project.", "Now Bill and Stanley have to take care of the Lidem project.", "There is a division in tasks between Stanley and the.", "There is a division in tasks between Stanley and the.", "Allison was unreachable.", "The division of tasks between Stanley and Alison is because she can't be reached."]}, {"instance_id": "samsum-417", "summary": "Mike didn't have time to take the dog for a walk, so Adam will take it with him.", "summary_trees": ["# ::snt Mike didn't have time to take the dog for a walk, so Adam will take it with him.\n(c / cause-01\n      :ARG0 (h / have-03\n            :polarity -\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Mike\"))\n            :ARG1 (t / time\n                  :purpose (w / walk-01\n                        :ARG0 p\n                        :ARG2 (d / dog))))\n      :ARG1 (t2 / take-01\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Adam\"))\n            :ARG1 d\n            :ARG3 p))"], "tree": ["(t2 / take-01\n    :ARG0 (p2 / person\n              :name (n2 / name\n                        :op1 \"Adam\"))\n    :ARG1 (d / dog))", "(t2 / take-01\n    :ARG0 (p2 / person\n              :name (n2 / name\n                        :op1 \"Adam\"))\n    :ARG1 (d / dog)\n    :ARG3 (p / person :name (n / name :op1 \"Mike\")))", "(h / have-03\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mike\"))\n   :ARG1 (t / time\n            :purpose (w / walk-01\n                        :ARG0 p\n                        :ARG2 (d / dog))))", "(c / cause-01\n   :ARG0 (h / have-03\n            :polarity -\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Mike\"))\n            :ARG1 (t / time\n                     :purpose (w / walk-01\n                                 :ARG0 p\n                                 :ARG2 (d / dog))))\n   :ARG1 (t2 / take-01\n             :ARG0 (p2 / person\n                       :name (n2 / name\n                                 :op1 \"Adam\"))\n             :ARG1 d\n             :ARG3 p))"], "smus": ["Adam will take the dog.", "Adam took the dog from Mike.", "Mike didn't have time to walk the dog.", "Mike didn't have time to take a dog walk, so Adam would take one with him."]}, {"instance_id": "samsum-418", "summary": "Charles has just landed and he will be at RER about 5.30 PM. Natacha will pick him up from there.", "summary_trees": ["# ::snt Charles has just landed and he will be at RER about 5.30 PM.\n(a / and\n      :op1 (l / land-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Charles\"))\n            :time (j / just))\n      :op2 (b / be-located-at-91\n            :ARG1 p\n            :ARG2 (r / railway-line\n                  :name (n2 / name\n                        :op1 \"ER\"))\n            :time (a2 / about\n                  :op1 (d / date-entity\n                        :time \"17:30\"))))", "# ::snt Natacha will pick him up from there.\n(p / pick-up-04\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Natacha\"))\n      :ARG1 (h / he)\n      :ARG2 (t / there))"], "tree": ["(l / land-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Charles\")))", "(l / land-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Charles\"))\n   :time (j / just))", "(p / pick-up-04\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Natacha\"))\n   :ARG1 (h / he))", "(p / pick-up-04\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Natacha\"))\n   :ARG1 (h / he)\n   :ARG2 (t / there))"], "smus": ["Charles Lands", "Charles just landed.", "Natacha will pick him up.", "Natacha will pick him up from the."]}, {"instance_id": "samsum-419", "summary": "Jenny has left her credit car at the Mary's shop.", "summary_trees": ["# ::snt Jenny has left her credit car at the Mary's shop.\n(l / leave-15\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jenny\"))\n      :ARG1 (c / car\n            :mod (c2 / credit)\n            :poss p)\n      :ARG2 (s / shop\n            :poss (p2 / person\n                  :name (n2 / name\n                        :op1 \"Mary\"))))"], "tree": ["(l / leave-15\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jenny\"))\n   :ARG1 (c / car\n            :mod (c2 / credit)\n            :poss p)\n   :ARG2 (s / shop\n            :poss (p2 / person\n                      :name (n2 / name\n                                :op1 \"Mary\"))))", "(l / leave-15\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jenny\"))\n   :ARG1 (c / car\n            :mod (c2 / credit)\n            :poss p)\n   :ARG2 (s / shop\n            :poss (p2 / person\n                      :name (n2 / name\n                                :op1 \"Mary\"))))"], "smus": ["Jenny has left his credit car at Mary's shop.", "Jenny has left his credit car at Mary's shop."]}, {"instance_id": "samsum-420", "summary": "Mike will ask Mary for John's new number.", "summary_trees": ["# ::snt Mike will ask Mary for John's new number.\n(a / ask-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Mike\"))\n      :ARG1 (n2 / number\n            :ARG1-of (n3 / new-01)\n            :poss (p2 / person\n                  :name (n4 / name\n                        :op1 \"John\")))\n      :ARG2 (p3 / person\n            :name (n5 / name\n                  :op1 \"Mary\")))"], "tree": ["(a / ask-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mike\"))\n   :ARG1 (n2 / number\n             :ARG1 (n3 / new-01)\n             :poss (p2 / person\n                       :name (n4 / name\n                                 :op1 \"John\"))))", "(a / ask-02\n   :ARG1 (n2 / number\n             :ARG1 (n3 / new-01)\n             :poss (p2 / person\n                       :name (n4 / name\n                                 :op1 \"John\")))\n   :ARG2 (p3 / person\n             :name (n5 / name\n                       :op1 \"Mary\")))", "(a / ask-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mike\"))\n   :ARG1 (n2 / number\n             :ARG1 (n3 / new-01)\n             :poss (p2 / person\n                       :name (n4 / name\n                                 :op1 \"John\")))\n   :ARG2 (p3 / person\n             :name (n5 / name\n                       :op1 \"Mary\")))", "(a / ask-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mike\"))\n   :ARG1 (n2 / number\n             :ARG1 (n3 / new-01)\n             :poss (p2 / person\n                       :name (n4 / name\n                                 :op1 \"John\")))\n   :ARG2 (p3 / person\n             :name (n5 / name\n                       :op1 \"Mary\")))"], "smus": ["Mike, ask John's new number.", "Ask Mary for John's new number.", "Mike ask Mary for John's new number.", "Mike ask Mary for John's new number."]}, {"instance_id": "samsum-421", "summary": "Mike will call Dale back in 2 hours.", "summary_trees": ["# ::snt Mike will call Dale back in 2 hours.\n(c / call-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Mike\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Dale\"))\n      :mod (b / back)\n      :time (a / after\n            :op1 (n3 / now)\n            :quant (t / temporal-quantity\n                  :quant 2\n                  :unit (h / hour))))"], "tree": ["(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mike\")))", "(c / call-02\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Dale\")))", "(c / call-02\n   :time (a / after\n            :op1 (n3 / now)\n            :quant (t / temporal-quantity\n                      :quant 2\n                      :unit (h / hour))))", "(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mike\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Dale\")))", "(c / call-02\n   :mod (b / back)\n   :time (a / after\n            :op1 (n3 / now)\n            :quant (t / temporal-quantity\n                      :quant 2\n                      :unit (h / hour))))", "(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mike\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Dale\"))\n   :time (a / after\n            :op1 (n3 / now)\n            :quant (t / temporal-quantity\n                      :quant 2\n                      :unit (h / hour))))", "(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mike\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Dale\"))\n   :mod (b / back)\n   :time (a / after\n            :op1 (n3 / now)\n            :quant (t / temporal-quantity\n                      :quant 2\n                      :unit (h / hour))))"], "smus": ["Mike, call.", "Call Dale.", "Call in 2 hours.", "Mike would call Dale.", "Call back in 2 hours.", "Mike will call Dale in 2 hours.", "Mike will call Dale back in 2 hours."]}, {"instance_id": "samsum-422", "summary": "Mom wants Betty to call the grandfather from time to time.", "summary_trees": ["# ::snt Mom wants Betty to call the grandfather from time to time.\n(w / want-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (p2 / person\n                        :name (n / name\n                              :op1 \"Betty\"))\n                  :ARG2 (m / mom)))\n      :ARG1 (c / call-02\n            :ARG0 p2\n            :ARG1 (p3 / person\n                  :ARG0-of (h2 / have-rel-role-91\n                        :ARG2 (g / grandfather)))\n            :frequency (t / time-to-time)))"], "tree": ["(c / call-02\n   :ARG1 (p3 / person\n             :ARG0 (h2 / have-rel-role-91\n                       :ARG2 (g / grandfather))))", "(h / have-rel-role-91\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Betty\"))\n   :ARG2 (m / mom))", "(c / call-02\n   :ARG0 (p2 / person :name (n / name :op1 \"Betty\"))\n   :ARG1 (p3 / person\n             :ARG0 (h2 / have-rel-role-91\n                       :ARG2 (g / grandfather))))", "(c / call-02\n   :ARG0 (p2 / person :name (n / name :op1 \"Betty\"))\n   :ARG1 (p3 / person\n             :ARG0 (h2 / have-rel-role-91\n                       :ARG2 (g / grandfather)))\n   :frequency (t / time-to-time))", "(w / want-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :name (n / name\n                                        :op1 \"Betty\"))\n                     :ARG2 (m / mom)))\n   :ARG1 (c / call-02\n            :ARG0 p2\n            :ARG1 (p3 / person\n                      :ARG0 (h2 / have-rel-role-91\n                                :ARG2 (g / grandfather)))\n            :frequency (t / time-to-time)))", "(w / want-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :name (n / name\n                                        :op1 \"Betty\"))\n                     :ARG2 (m / mom)))\n   :ARG1 (c / call-02\n            :ARG0 p2\n            :ARG1 (p3 / person\n                      :ARG0 (h2 / have-rel-role-91\n                                :ARG2 (g / grandfather)))\n            :frequency (t / time-to-time)))"], "smus": ["Call the grandfather.", "Betty's mom", "Betty would call her grandfather.", "Betty would call her grandfather from time to time.", "Betty's mom wants to call her grandfather from time to time.", "Betty's mom wants to call her grandfather from time to time."]}, {"instance_id": "samsum-423", "summary": "Cathy will pick up her glasses tonight at 10.", "summary_trees": ["# ::snt Cathy will pick up her glasses tonight at 10.\n(p / pick-up-04\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Cathy\"))\n      :ARG1 (g / glasses\n            :poss p2)\n      :time (d / date-entity\n            :dayperiod (n2 / night)\n            :mod (t / today)\n            :time \"10:00\"))"], "tree": ["(p / pick-up-04\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Cathy\"))\n   :ARG1 (g / glasses\n            :poss p2))"], "smus": ["Cathy, pick up your glasses."]}, {"instance_id": "samsum-424", "summary": "Rob and Bob are watching the game. Bob will run some errands on the weekend. Jim's birthday is next Wednesday. He might organize a meetup this weekend. Bob will see Rob on the weekend.", "summary_trees": ["# ::snt Rob and Bob are watching the game.\n(w / watch-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Rob\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Bob\")))\n      :ARG1 (g / game))", "# ::snt Bob will run some errands on the weekend.\n(r / run-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Bob\"))\n      :ARG1 (e / errand\n            :quant (s / some))\n      :time (w / weekend))", "# ::snt Jim's birthday is next Wednesday.\n(b / birthday\n      :poss (p / person\n            :name (n / name\n                  :op1 \"Jim\"))\n      :time (d / date-entity\n            :weekday (w / wednesday)\n            :mod (n2 / next)))", "# ::snt He might organize a meetup this weekend.\n(p / possible-01\n      :ARG1 (o / organize-01\n            :ARG0 (h / he)\n            :ARG1 (m / meet-up-04)\n            :time (w / weekend\n                  :mod (t / this))))", "# ::snt Bob will see Rob on the weekend.\n(s / see-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Bob\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Rob\"))\n      :time (w / weekend))"], "tree": ["(w / watch-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rob\")))", "(w / watch-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Bob\")))", "(w / watch-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rob\"))\n   :ARG1 (g / game))", "(w / watch-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rob\"))\n   :ARG1 (g / game))", "(w / watch-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Bob\"))\n   :ARG1 (g / game)\n   :ARG1 g)", "(w / watch-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Bob\"))\n   :ARG1 (g / game)\n   :ARG1 g)", "(w / watch-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Rob\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Bob\"))))", "(w / watch-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Rob\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Bob\")))\n   :ARG1 (g / game))", "(w / watch-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Rob\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Bob\")))\n   :ARG1 (g / game))", "(r / run-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Bob\")))", "(r / run-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Bob\"))\n   :time (w / weekend))", "(r / run-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Bob\"))\n   :ARG1 (e / errand\n            :quant (s / some)))", "(r / run-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Bob\"))\n   :ARG1 (e / errand\n            :quant (s / some))\n   :time (w / weekend))", "(r / run-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Bob\"))\n   :ARG1 (e / errand\n            :quant (s / some))\n   :time (w / weekend))", "(b / birthday\n   :poss (p / person\n            :name (n / name\n                     :op1 \"Jim\"))\n   :time (d / date-entity\n            :weekday (w / wednesday)\n            :mod (n2 / next)))", "(o / organize-01\n   :time (w / weekend\n            :mod (t / this)))", "(p / possible-01\n   :ARG1 (o / organize-01\n            :ARG0 (h / he)\n            :ARG1 (m / meet-up-04)\n            :time (w / weekend\n                     :mod (t / this))))", "(s / see-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Rob\")))", "(s / see-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Bob\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Rob\")))", "(s / see-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Bob\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Rob\"))\n   :time (w / weekend))", "(s / see-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Bob\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Rob\"))\n   :time (w / weekend))"], "smus": ["Rob is watching.", "Bob was watching.", "Rob was watching the game.", "Rob was watching the game.", "Bob was watching the game.", "Bob was watching the game.", "Rob and Bob were watching.", "Rob and Bob were watching the game.", "Rob and Bob were watching the game.", "Bob will run.", "Bob will run over the weekend.", "Bob will run some errands.", "Bob will run some errands over the weekend.", "Bob will run some errands over the weekend.", "Jim's birthday is next Wednesday.", "Organize this weekend.", "He might organize a meet up this weekend.", "See Rob.", "Bob will see Rob.", "Bob will see Rob over the weekend.", "Bob will see Rob over the weekend."]}, {"instance_id": "samsum-425", "summary": "Kaylin has set her alarm for tomorrow.", "summary_trees": ["# ::snt Kaylin has set her alarm for tomorrow.\n(s / set-off-05\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Kaylin\"))\n      :ARG1 (a / alarm-01\n            :ARG1 p\n            :time (t / tomorrow)))"], "tree": ["(a / alarm-01\n   :ARG1 (p / person :name (n / name :op1 \"Kaylin\"))\n   :time (t / tomorrow))", "(s / set-off-05\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kaylin\"))\n   :ARG1 (a / alarm-01\n            :ARG1 p\n            :time (t / tomorrow)))"], "smus": ["Kaylin is under alarm tomorrow.", "Kaylin set the alarm for tomorrow."]}, {"instance_id": "samsum-426", "summary": "Steve is calling Sue at her request.", "summary_trees": ["# ::snt Steve is calling Sue at her request.\n(c / call-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Steve\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Sue\"))\n      :ARG1-of (r / request-01\n            :ARG0 p2))"], "tree": ["(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Steve\")))", "(c / call-02\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Sue\")))", "(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Steve\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Sue\")))", "(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Steve\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Sue\"))\n   :ARG1 (r / request-01\n            :ARG0 p2))"], "smus": ["Steve is calling.", "Calling Sue.", "Steve is calling Sue.", "Steve is calling Sue for a request."]}, {"instance_id": "samsum-427", "summary": "Andrew has discovered an issue with Bez's car in her absence but it seems to be ok. He will also take care of her plants until she is back on the 21st. ", "summary_trees": ["# ::snt Andrew has discovered an issue with Bez's car in her absence but it seems to be ok.\n(d / discover-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Andrew\"))\n      :ARG1 (ii / issue-02\n            :ARG0 (c / car\n                  :poss (p2 / person\n                        :name (n2 / name\n                              :op1 \"Bez\"))))\n      :time (a / absent-01\n            :ARG1 p2)\n      :concession-of (s / seem-01\n            :ARG1 (o / okay-04\n                  :ARG1 ii)))", "# ::snt He will also take care of her plants until she is back on the 21st.\n(c / care-03\n      :ARG0 (h / he)\n      :ARG1 (p / plant\n            :poss (s / she))\n      :mod (a / also)\n      :time (u / until\n            :op1 (r / return-01\n                  :ARG1 s\n                  :time (d / date-entity\n                        :day 21))))"], "tree": ["(s / seem-01\n   :ARG1 (o / okay-04\n            :ARG1 (ii / issue-02)))", "(s / seem-01\n   :ARG1 (o / okay-04\n            :ARG1 (ii / issue-02)))", "(d / discover-01\n   :time (a / absent-01)\n   :concession (s / seem-01))", "(ii / issue-02\n    :ARG0 (c / car\n             :poss (p2 / person\n                       :name (n2 / name\n                                 :op1 \"Bez\"))))", "(ii / issue-02\n    :ARG0 (c / car\n             :poss (p2 / person\n                       :name (n2 / name\n                                 :op1 \"Bez\"))))", "(d / discover-01\n   :ARG1 (ii / issue-02\n             :ARG0 (c / car\n                      :poss (p2 / person\n                                :name (n2 / name\n                                          :op1 \"Bez\")))))", "(d / discover-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Andrew\"))\n   :ARG1 (ii / issue-02\n             :ARG0 (c / car\n                      :poss (p2 / person\n                                :name (n2 / name\n                                          :op1 \"Bez\")))))", "(r / return-01\n   :time (d / date-entity\n            :day 21))", "(r / return-01\n   :time (d / date-entity\n            :day 21))", "(r / return-01\n   :ARG1 (s / she)\n   :time (d / date-entity\n            :day 21))", "(r / return-01\n   :ARG1 (s / she)\n   :time (d / date-entity\n            :day 21))", "(c / care-03\n   :ARG1 (p / plant\n            :poss (s / she)))", "(c / care-03\n   :ARG0 (h / he)\n   :ARG1 (p / plant\n            :poss (s / she)))", "(c / care-03\n   :mod (a / also)\n   :time (u / until\n            :op1 (r / return-01)))", "(c / care-03\n   :ARG0 (h / he)\n   :ARG1 (p / plant\n            :poss (s / she))\n   :mod (a / also)\n   :time (u / until\n            :op1 (r / return-01\n                    :ARG1 s\n                    :time (d / date-entity\n                             :day 21))))"], "smus": ["The issue seems OK.", "The issue seems OK.", "It seems to be discovered in absence.", "Bez's car was an issue.", "Bez's car was an issue.", "The issue with Bez's car was discovered.", "Andrew had discovered that Bez's car had an issue.", "Returns on 21st.", "Returns on 21st.", "She returned on the 21st.", "She returned on the 21st.", "Care of her plants.", "He takes care of her plants.", "Also take care until the return.", "He will also take care of her plants until she returns on the 21st."]}, {"instance_id": "samsum-428", "summary": "Cindy has made arrangements for today's meeting at 2 pm in the conference room. She also organised flights and hotel for next week's trip. Don is appreciative. ", "summary_trees": ["# ::snt Cindy has made arrangements for today's meeting at 2 pm in the conference room.\n(a / arrange-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Cindy\"))\n      :ARG1 (m / meet-03\n            :time (t / today)\n            :location (r / room\n                  :mod (c / conference))\n            :time (d / date-entity\n                  :time \"14:00\")))", "# ::snt She also organised flights and hotel for next week's trip.\n(o / organize-01\n      :ARG0 (s / she)\n      :ARG1 (a / and\n            :op1 (f / fly-01)\n            :op2 (h / hotel)\n            :purpose (t / trip-03\n                  :time (w / week\n                        :mod (n / next))))\n      :mod (a2 / also))", "# ::snt Don is appreciative.\n(a / appreciate-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Don\")))"], "tree": ["(m / meet-03\n   :location (r / room\n                :mod (c / conference)))", "(m / meet-03\n   :location (r / room\n                :mod (c / conference)))", "(a / arrange-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Cindy\")))", "(m / meet-03\n   :time (t / today)\n   :location (r / room\n                :mod (c / conference))\n   :time (d / date-entity\n            :time \"14:00\"))", "(m / meet-03\n   :time (t / today)\n   :location (r / room\n                :mod (c / conference))\n   :time (d / date-entity\n            :time \"14:00\"))", "(a / arrange-01\n   :ARG1 (m / meet-03\n            :time (t / today)\n            :location (r / room\n                         :mod (c / conference))\n            :time (d / date-entity\n                     :time \"14:00\")))", "(a / arrange-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Cindy\"))\n   :ARG1 (m / meet-03\n            :time (t / today)\n            :location (r / room\n                         :mod (c / conference))\n            :time (d / date-entity\n                     :time \"14:00\")))", "(a / arrange-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Cindy\"))\n   :ARG1 (m / meet-03\n            :time (t / today)\n            :location (r / room\n                         :mod (c / conference))\n            :time (d / date-entity\n                     :time \"14:00\")))", "(a / arrange-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Cindy\")))", "(t / trip-03\n   :time (w / week\n            :mod (n / next)))", "(t / trip-03\n   :time (w / week\n            :mod (n / next)))", "(o / organize-01\n   :ARG0 (s / she)\n   :ARG1 (f / fly-01))", "(o / organize-01\n   :ARG0 (s / she)\n   :ARG1 (f / fly-01)\n   :mod (a2 / also))", "(o / organize-01\n   :ARG1 (h / hotel\n            :purpose (t / trip-03\n                        :time (w / week\n                                 :mod (n / next)))))", "(o / organize-01\n   :ARG0 (s / she)\n   :ARG1 (h / hotel\n            :purpose (t / trip-03\n                        :time (w / week\n                                 :mod (n / next)))))", "(o / organize-01\n   :ARG1 (a / and\n            :op1 (f / fly-01)\n            :op2 (h / hotel)\n            :purpose (t / trip-03\n                        :time (w / week\n                                 :mod (n / next)))))", "(o / organize-01\n   :ARG0 (s / she)\n   :ARG1 (h / hotel\n            :purpose (t / trip-03\n                        :time (w / week\n                                 :mod (n / next))))\n   :mod (a2 / also)\n   :mod a2)", "(o / organize-01\n   :ARG0 (s / she)\n   :ARG1 (a / and\n            :op1 (f / fly-01)\n            :op2 (h / hotel)\n            :purpose (t / trip-03\n                        :time (w / week\n                                 :mod (n / next)))))", "(o / organize-01\n   :ARG0 (s / she)\n   :ARG1 (a / and\n            :op1 (f / fly-01)\n            :op2 (h / hotel)\n            :purpose (t / trip-03\n                        :time (w / week\n                                 :mod (n / next))))\n   :mod (a2 / also))", "(a / appreciate-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Don\")))"], "smus": ["The meeting will take place in a conference room.", "The meeting will take place in a conference room.", "Cindy made arrangements.", "The meeting will take place in the conference room at 2:00 pm today.", "The meeting will take place in the conference room at 2:00 pm today.", "arrangements for today's meeting in conference room at 2:00 pm", "Cindy arranges for a meeting today at the conference room at 2:00 p.m.", "Cindy arranges for a meeting today at the conference room at 2:00 p.m.", "Cindy made arrangements.", "trip next week", "trip next week", "She organized the flight.", "She also organized the flight.", "The hotel was organized for the trip next week.", "She organized a hotel for the trip next week.", "Flight and hotel were organized for the trip next week.", "She also organized a hotel for the next week's trip.", "She organized the flight and hotel for the trip next week.", "She also organized flights and hotels for the trip next week.", "Don is appreciated."]}, {"instance_id": "samsum-429", "summary": "Martina advises against getting a hamster. ", "summary_trees": ["# ::snt Martina advises against getting a hamster.\n(a / advise-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Martina\"))\n      :ARG2 (g / get-01\n            :polarity -\n            :ARG1 (h / hamster)))"], "tree": ["(g / get-01\n   :polarity -\n   :ARG1 (h / hamster))", "(a / advise-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Martina\"))\n   :ARG2 (g / get-01\n            :polarity -\n            :ARG1 (h / hamster)))"], "smus": ["not getting a hamster.", "Martina advises against getting a hamster."]}, {"instance_id": "samsum-430", "summary": "Miranda can't make her meeting with Stephanie as she has to work. ", "summary_trees": ["# ::snt Miranda can't make her meeting with Stephanie as she has to work.\n(p / possible-01\n      :polarity -\n      :ARG1 (m / meet-03\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Miranda\"))\n            :ARG1 (p3 / person\n                  :name (n2 / name\n                        :op1 \"Stephanie\")))\n      :ARG1-of (c / cause-01\n            :ARG0 (o / obligate-01\n                  :ARG1 p2\n                  :ARG2 (w / work-01\n                        :ARG0 p2))))"], "tree": ["(o / obligate-01\n   :ARG2 (w / work-01\n            :ARG0 (p2 / person :name (n / name :op1 \"Miranda\"))))", "(o / obligate-01\n   :ARG1 (p2 / person :name (n / name :op1 \"Miranda\"))\n   :ARG2 (w / work-01\n            :ARG0 p2))", "(o / obligate-01\n   :ARG1 (p2 / person :name (n / name :op1 \"Miranda\"))\n   :ARG2 (w / work-01\n            :ARG0 p2))", "(c / cause-01\n   :ARG0 (o / obligate-01\n            :ARG1 (p2 / person :name (n / name :op1 \"Miranda\"))\n            :ARG2 (w / work-01\n                     :ARG0 p2)))", "(p / possible-01\n   :polarity -\n   :ARG1 (m / meet-03\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Miranda\"))\n            :ARG1 (p3 / person\n                      :name (n2 / name\n                                :op1 \"Stephanie\")))\n   :ARG1 (c / cause-01\n            :ARG0 (o / obligate-01\n                     :ARG1 p2\n                     :ARG2 (w / work-01\n                              :ARG0 p2))))"], "smus": ["Miranda has to work.", "Miranda had to work.", "Miranda had to work.", "Because Miranda had to work.", "Miranda and Stephanie could not meet because she had to work."]}, {"instance_id": "samsum-431", "summary": "Bob is going to help Lisa clean the house, he will clean the bathroom. ", "summary_trees": ["# ::snt Bob is going to help Lisa clean the house, he will clean the bathroom.\n(a / and\n      :op1 (h / help-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Bob\"))\n            :ARG1 (c / clean-01\n                  :ARG0 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Lisa\"))\n                  :ARG1 (h2 / house))\n            :ARG2 p2)\n      :op2 (c2 / clean-01\n            :ARG0 p\n            :ARG1 (b / bathroom)))"], "tree": ["(c2 / clean-01\n    :ARG0 (p / person :name (n / name :op1 \"Bob\"))\n    :ARG1 (b / bathroom))", "(c2 / clean-01\n    :ARG0 (p / person :name (n / name :op1 \"Bob\"))\n    :ARG1 (b / bathroom))", "(c / clean-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Lisa\"))\n   :ARG1 (h2 / house))", "(c / clean-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Lisa\"))\n   :ARG1 (h2 / house))", "(h / help-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Bob\"))\n   :ARG1 (c / clean-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Lisa\"))\n            :ARG1 (h2 / house)))", "(h / help-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Bob\"))\n   :ARG1 (c / clean-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Lisa\"))\n            :ARG1 (h2 / house))\n   :ARG2 p2)"], "smus": ["Bob to clean the bathroom.", "Bob to clean the bathroom.", "Lisa, clean the house.", "Lisa, clean the house.", "Bob will help Lisa clean the house.", "Bob will help Lisa clean the house."]}, {"instance_id": "samsum-432", "summary": "Ola is in Cuba and is enjoying her trip. She has problems with connectivity there. Momo has recovered from her injury. Ola doesn't like the clothes in Cuba. Ola will try to find a blouse for mum in Cuba, as Kate suggested.", "summary_trees": ["# ::snt Ola is in Cuba and is enjoying her trip.\n(a / and\n      :op1 (b / be-located-at-91\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Ola\"))\n            :ARG2 (c / country\n                  :name (n2 / name\n                        :op1 \"Cuba\")))\n      :op2 (e / enjoy-01\n            :ARG0 p\n            :ARG1 (t / trip-03\n                  :ARG0 p)))", "# ::snt She has problems with connectivity there.\n(h / have-03\n      :ARG0 (s / she)\n      :ARG1 (p / problem\n            :topic (c / connect-01))\n      :location (t / there))", "# ::snt Momo has recovered from her injury.\n(r / recover-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Momo\"))\n      :ARG2 (ii / injure-01\n            :ARG1 p))", "# ::snt Ola doesn't like the clothes in Cuba.\n(d / dislike-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Ola\"))\n      :ARG1 (c / clothes\n            :location (c2 / country\n                  :name (n2 / name\n                        :op1 \"Cuba\"))))", "# ::snt Ola will try to find a blouse for mum in Cuba, as Kate suggested.\n(t / try-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Ola\"))\n      :ARG1 (f / find-01\n            :ARG0 p\n            :ARG1 (b / blouse)\n            :ARG4 (p2 / person\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 p\n                        :ARG2 (m / mum)))\n            :location (c / country\n                  :name (n2 / name\n                        :op1 \"Cuba\")))\n      :ARG1-of (s / suggest-01\n            :ARG0 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Kate\"))))"], "tree": ["(e / enjoy-01\n   :ARG0 (p / person :name (n / name :op1 \"Ola\"))\n   :ARG1 (t / trip-03\n            :ARG0 p))", "(e / enjoy-01\n   :ARG0 (p / person :name (n / name :op1 \"Ola\"))\n   :ARG1 (t / trip-03\n            :ARG0 p))", "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Ola\"))\n   :ARG2 (c / country\n            :name (n2 / name\n                      :op1 \"Cuba\")))", "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Ola\"))\n   :ARG2 (c / country\n            :name (n2 / name\n                      :op1 \"Cuba\")))", "(h / have-03\n   :ARG0 (s / she)\n   :ARG1 (p / problem\n            :topic (c / connect-01)))", "(h / have-03\n   :ARG0 (s / she)\n   :ARG1 (p / problem\n            :topic (c / connect-01))\n   :location (t / there))", "(r / recover-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Momo\")))", "(r / recover-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Momo\"))\n   :ARG2 (ii / injure-01\n             :ARG1 p))", "(d / dislike-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ola\"))\n   :ARG1 (c / clothes\n            :location (c2 / country\n                          :name (n2 / name\n                                    :op1 \"Cuba\"))))", "(d / dislike-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ola\"))\n   :ARG1 (c / clothes\n            :location (c2 / country\n                          :name (n2 / name\n                                    :op1 \"Cuba\"))))", "(s / suggest-01\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Kate\")))", "(f / find-01\n   :location (c / country\n                :name (n2 / name\n                          :op1 \"Cuba\")))", "(f / find-01\n   :location (c / country\n                :name (n2 / name\n                          :op1 \"Cuba\")))", "(f / find-01\n   :ARG1 (b / blouse)\n   :location (c / country\n                :name (n2 / name\n                          :op1 \"Cuba\")))", "(t / try-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ola\"))\n   :ARG1 (f / find-01\n            :ARG0 p\n            :ARG1 (b / blouse)\n            :ARG4 (p2 / person\n                      :ARG0 (h / have-rel-role-91\n                               :ARG1 p\n                               :ARG2 (m / mum)))\n            :location (c / country\n                         :name (n2 / name\n                                   :op1 \"Cuba\"))))", "(t / try-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ola\"))\n   :ARG1 (f / find-01\n            :ARG0 p\n            :ARG1 (b / blouse)\n            :ARG4 (p2 / person\n                      :ARG0 (h / have-rel-role-91\n                               :ARG1 p\n                               :ARG2 (m / mum)))\n            :location (c / country\n                         :name (n2 / name\n                                   :op1 \"Cuba\")))\n   :ARG1 (s / suggest-01\n            :ARG0 (p3 / person\n                      :name (n3 / name\n                                :op1 \"Kate\"))))"], "smus": ["Ola was enjoying the trip.", "Ola was enjoying the trip.", "Ola is in Cuba.", "Ola is in Cuba.", "She has connections problems.", "She has connections problems there.", "Momo was recovered.", "Momo was recovered from the injury.", "Ola doesn't like Cuban clothes.", "Ola doesn't like Cuban clothes.", "Kate suggested --", "Find in Cuba.", "Find in Cuba.", "Find a blouse in Cuba.", "Ola will try to find her mum a blouse in Cuba.", "Kate suggested that ola would try to find her mum a blouse in Cuba."]}, {"instance_id": "samsum-433", "summary": "Marta needs help with the PC. On Joel's advice, she will contact Cynthia or Elena as they might know someone. ", "summary_trees": ["# ::snt Marta needs help with the PC.\n(n / need-01\n      :ARG0 (p / person\n            :name (n2 / name\n                  :op1 \"Marta\"))\n      :ARG1 (h / help-01\n            :ARG1 (c / correct-02\n                  :mod (p2 / politics))\n            :ARG2 p))", "# ::snt On Joel's advice, she will contact Cynthia or Elena as they might know someone.\n(c / contact-01\n      :ARG0 (s / she)\n      :ARG1 (o / or\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Cynthia\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Elena\")))\n      :ARG1-of (c2 / cause-01\n            :ARG0 (p3 / possible-01\n                  :ARG1 (k / know-02\n                        :ARG0 o\n                        :ARG1 (s2 / someone))))\n      :ARG1-of (a / advise-01\n            :ARG0 (p4 / person\n                  :name (n3 / name\n                        :op1 \"Joel\"))))"], "tree": ["(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Marta\")))", "(n / need-01\n   :ARG1 (h / help-01\n            :ARG1 (c / correct-02\n                     :mod (p2 / politics))\n            :ARG2 (p / person :name (n2 / name :op1 \"Marta\"))))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Marta\"))\n   :ARG1 (h / help-01\n            :ARG1 (c / correct-02\n                     :mod (p2 / politics))\n            :ARG2 p))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Marta\"))\n   :ARG1 (h / help-01\n            :ARG1 (c / correct-02\n                     :mod (p2 / politics))\n            :ARG2 p))", "(a / advise-01\n   :ARG0 (p4 / person\n             :name (n3 / name\n                       :op1 \"Joel\")))", "(p3 / possible-01\n    :ARG1 (k / know-02\n             :ARG0 (o / or)\n             :ARG1 (s2 / someone)))", "(a / advise-01\n   :ARG0 (p4 / person\n             :name (n3 / name\n                       :op1 \"Joel\")))", "(p3 / possible-01\n    :ARG1 (k / know-02\n             :ARG0 (o / or)\n             :ARG1 (s2 / someone)))", "(c2 / cause-01\n    :ARG0 (p3 / possible-01\n              :ARG1 (k / know-02\n                       :ARG0 (o / or)\n                       :ARG1 (s2 / someone))))", "(c / contact-01\n   :ARG1 (o / or\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Cynthia\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Elena\"))))", "(c / contact-01\n   :ARG0 (s / she)\n   :ARG1 (o / or\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Cynthia\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Elena\"))))", "(c / contact-01\n   :ARG0 (s / she)\n   :ARG1 (o / or\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Cynthia\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Elena\")))\n   :ARG1 (c2 / cause-01\n             :ARG0 (p3 / possible-01\n                       :ARG1 (k / know-02\n                                :ARG0 o\n                                :ARG1 (s2 / someone))))\n   :ARG1 (a / advise-01\n            :ARG0 (p4 / person\n                      :name (n3 / name\n                                :op1 \"Joel\"))))"], "smus": ["Marta needs.", "Marta needs help with the political correctness.", "Marta needs help with the political correctness.", "Marta needs help with the political correctness.", "Joel's advice:", "Someone may know.", "Joel's advice:", "Someone may know.", "Because someone can know.", "Contact Cynthia or Elena.", "She would contact Cynthia or Elena.", "She would contact Cynthia or Elena if Joel had any advice as they might know someone."]}, {"instance_id": "samsum-434", "summary": "Ben won't go with Catherine to visit uncle Steve. He will visit her and the boys. ", "summary_trees": ["# ::snt Ben won't go with Catherine to visit uncle Steve.\n(g / go-02\n      :polarity -\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Ben\"))\n      :ARG4 (v / visit-01\n            :ARG0 p\n            :ARG1 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Steve\")\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 p\n                        :ARG2 (u / uncle))))\n      :accompanier (p3 / person\n            :name (n3 / name\n                  :op1 \"Catherine\")))", "# ::snt He will visit her and the boys.\n(v / visit-01\n      :ARG0 (h / he)\n      :ARG1 (a / and\n            :op1 (s / she)\n            :op2 (b / boy)))"], "tree": ["(h / have-rel-role-91\n   :ARG1 (p / person :name (n / name :op1 \"Ben\"))\n   :ARG2 (u / uncle))", "(g / go-02\n   :polarity -\n   :accompanier (p3 / person\n                    :name (n3 / name\n                              :op1 \"Catherine\")))", "(g / go-02\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ben\"))\n   :ARG4 (v / visit-01\n            :ARG0 p\n            :ARG1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Steve\")\n                      :ARG0 (h / have-rel-role-91\n                               :ARG1 p\n                               :ARG2 (u / uncle))))\n   :accompanier (p3 / person\n                    :name (n3 / name\n                              :op1 \"Catherine\")))", "(v / visit-01\n   :ARG0 (h / he)\n   :ARG1 (a / and\n            :op1 (s / she)\n            :op2 (b / boy)))", "(v / visit-01\n   :ARG0 (h / he)\n   :ARG1 (a / and\n            :op1 (s / she)\n            :op2 (b / boy)))"], "smus": ["Ben's uncle.", "Don't go with Catherine.", "Ben didn't go with Catherine to visit his uncle Steve.", "He would visit her and the boys.", "He would visit her and the boys."]}, {"instance_id": "samsum-435", "summary": "Cynthia and Bennett will go to a new bistro she discovered. ", "summary_trees": ["# ::snt Cynthia and Bennett will go to a new bistro she discovered.\n(g / go-02\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Cynthia\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Bennett\")))\n      :ARG4 (b / bistro\n            :ARG1-of (n3 / new-01)\n            :ARG1-of (d / discover-01\n                  :ARG0 p)))"], "tree": ["(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Cynthia\")))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Bennett\")))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Cynthia\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Bennett\"))))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Cynthia\"))\n   :ARG4 (b / bistro\n            :ARG1 (n3 / new-01)\n            :ARG1 (d / discover-01\n                     :ARG0 p)))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Cynthia\"))\n   :ARG4 (b / bistro\n            :ARG1 (n3 / new-01)\n            :ARG1 (d / discover-01\n                     :ARG0 p)))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Bennett\"))\n   :ARG4 (b / bistro\n            :ARG1 (n3 / new-01)\n            :ARG1 (d / discover-01\n                     :ARG0 (p / person :name (n / name :op1 \"Cynthia\"))))\n   :ARG4 b)", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Bennett\"))\n   :ARG4 (b / bistro\n            :ARG1 (n3 / new-01)\n            :ARG1 (d / discover-01\n                     :ARG0 (p / person :name (n / name :op1 \"Cynthia\"))))\n   :ARG4 b)", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Cynthia\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Bennett\")))\n   :ARG4 (b / bistro\n            :ARG1 (n3 / new-01)\n            :ARG1 (d / discover-01\n                     :ARG0 p)))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Cynthia\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Bennett\")))\n   :ARG4 (b / bistro\n            :ARG1 (n3 / new-01)\n            :ARG1 (d / discover-01\n                     :ARG0 p)))"], "smus": ["Cynthia, go.", "Bennett will go.", "Cynthia and Bennett will go.", "Cynthia will go to the new bistro she discovered.", "Cynthia will go to the new bistro she discovered.", "Bennett will go to the new bistro that Cynthia discovered.", "Bennett will go to the new bistro that Cynthia discovered.", "Cynthia and Bennett will go to the new bistro they discovered.", "Cynthia and Bennett will go to the new bistro they discovered."]}, {"instance_id": "samsum-436", "summary": "Abigail is not going to take a stroll with the little ones. Her smog alert app is showing that the norms have been exceeded by 30% today.", "summary_trees": ["# ::snt Abigail is not going to take a stroll with the little ones.\n(s / stroll-01\n      :polarity -\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Abigail\"))\n            :op2 (o / one\n                  :mod (l / little))))", "# ::snt Her smog alert app is showing that the norms have been exceeded by 30% today.\n(s / show-01\n      :ARG0 (a / app\n            :ARG0-of (a2 / alert-01\n                  :ARG2 (s2 / smog))\n            :poss (s3 / she))\n      :ARG1 (e / exceed-01\n            :ARG1 (n / norm)\n            :ARG2 (p / percentage-entity\n                  :value 30)\n            :time (t / today)))"], "tree": ["(s / stroll-01\n   :polarity -\n   :ARG0 (o / one\n            :mod (l / little)))", "(s / stroll-01\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Abigail\")))", "(s / stroll-01\n   :polarity -\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Abigail\"))\n            :op2 (o / one\n                    :mod (l / little))))", "(e / exceed-01\n   :ARG1 (n / norm)\n   :ARG2 (p / percentage-entity\n            :value 30)\n   :time (t / today))", "(s / show-01\n   :ARG0 (a / app\n            :ARG0 (a2 / alert-01\n                      :ARG2 (s2 / smog))\n            :poss (s3 / she))\n   :ARG1 (e / exceed-01\n            :ARG1 (n / norm)\n            :ARG2 (p / percentage-entity\n                     :value 30)\n            :time (t / today)))", "(s / show-01\n   :ARG0 (a / app\n            :ARG0 (a2 / alert-01\n                      :ARG2 (s2 / smog))\n            :poss (s3 / she))\n   :ARG1 (e / exceed-01\n            :ARG1 (n / norm)\n            :ARG2 (p / percentage-entity\n                     :value 30)\n            :time (t / today)))"], "smus": ["The little ones are not strolling.", "Abigail was not strolling.", "Abigail and the little ones are not strolling.", "Today the norms have exceeded 30%.", "Her smog alert app is showing that the norms today have exceeded 30%.", "Her smog alert app is showing that the norms today have exceeded 30%."]}, {"instance_id": "samsum-437", "summary": "Nathan and Aaron are discussing a video which Nathan sent. ", "summary_trees": ["# ::snt Nathan and Aaron are discussing a video which Nathan sent.\n(d / discuss-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Nathan\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Aaron\")))\n      :ARG1 (v / video\n            :ARG1-of (s / send-01\n                  :ARG0 p)))"], "tree": ["(d / discuss-01\n   :ARG1 (v / video\n            :ARG1 (s / send-01\n                     :ARG0 (p / person :name (n / name :op1 \"Nathan\")))))", "(d / discuss-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nathan\"))\n   :ARG1 (v / video\n            :ARG1 (s / send-01\n                     :ARG0 p)))", "(d / discuss-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nathan\"))\n   :ARG1 (v / video\n            :ARG1 (s / send-01\n                     :ARG0 p)))", "(d / discuss-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Aaron\"))\n   :ARG1 (v / video\n            :ARG1 (s / send-01\n                     :ARG0 (p / person :name (n / name :op1 \"Nathan\"))))\n   :ARG1 v)", "(d / discuss-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Aaron\"))\n   :ARG1 (v / video\n            :ARG1 (s / send-01\n                     :ARG0 (p / person :name (n / name :op1 \"Nathan\"))))\n   :ARG1 v)", "(d / discuss-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Nathan\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Aaron\")))\n   :ARG1 (v / video\n            :ARG1 (s / send-01\n                     :ARG0 p)))", "(d / discuss-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Nathan\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Aaron\")))\n   :ARG1 (v / video\n            :ARG1 (s / send-01\n                     :ARG0 p)))"], "smus": ["Discussing the video Nathan sent.", "Nathan is discussing the video he sent.", "Nathan is discussing the video he sent.", "Aaron was discussing a video that Nathan sent.", "Aaron was discussing a video that Nathan sent.", "Nathan and Aaron are discussing the video they sent.", "Nathan and Aaron are discussing the video they sent."]}, {"instance_id": "samsum-438", "summary": "Afterwards, Kelly wandered around and met some people from school. She also met him. They almost didn't talk and he was with someone. ", "summary_trees": ["# ::snt Afterwards, Kelly wandered around and met some people from school.\n(a / and\n      :op1 (w / wander-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Kelly\"))\n            :ARG1 (a2 / around))\n      :op2 (m / meet-02\n            :ARG0 p\n            :ARG1 (p2 / person\n                  :quant (s / some)\n                  :ARG0-of (h / have-org-role-91\n                        :ARG1 (s2 / school))))\n      :time (a3 / after\n            :op1 (e / event)))", "# ::snt She also met him.\n(m / meet-02\n      :ARG0 (s / she)\n      :ARG1 (h / he)\n      :mod (a / also))", "# ::snt They almost didn't talk and he was with someone.\n(a / and\n      :op1 (t / talk-01\n            :polarity -\n            :ARG0 (t2 / they)\n            :mod (a2 / almost))\n      :op2 (a3 / accompany-01\n            :ARG0 (h / he)\n            :ARG1 (s / someone)))"], "tree": ["(w / wander-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kelly\"))\n   :ARG1 (a2 / around))", "(m / meet-02\n   :ARG0 (p / person :name (n / name :op1 \"Kelly\"))\n   :ARG1 (p2 / person\n             :quant (s / some)\n             :ARG0 (h / have-org-role-91\n                      :ARG1 (s2 / school))))", "(m / meet-02\n   :ARG0 (p / person :name (n / name :op1 \"Kelly\"))\n   :ARG1 (p2 / person\n             :quant (s / some)\n             :ARG0 (h / have-org-role-91\n                      :ARG1 (s2 / school))))", "(m / meet-02\n   :ARG0 (s / she)\n   :ARG1 (h / he))", "(m / meet-02\n   :ARG0 (s / she)\n   :ARG1 (h / he)\n   :mod (a / also))", "(m / meet-02\n   :ARG0 (s / she)\n   :ARG1 (h / he)\n   :mod (a / also))", "(m / meet-02\n   :ARG0 (s / she)\n   :ARG1 (h / he))", "(t / talk-01\n   :polarity -\n   :mod (a2 / almost))", "(a3 / accompany-01\n    :ARG0 (h / he)\n    :ARG1 (s / someone))", "(a3 / accompany-01\n    :ARG0 (h / he)\n    :ARG1 (s / someone))"], "smus": ["Kelly wanded around", "Kelly met some school people.", "Kelly met some school people.", "She met him.", "She also met him.", "She also met him.", "She met him.", "almost not to talk.", "He was with someone.", "He was with someone."]}, {"instance_id": "samsum-439", "summary": "Adam and Karen are worried that May suffers from depression. Karen will call her friend who is a psychologist and ask for advice. ", "summary_trees": ["# ::snt Adam and Karen are worried that May suffers from depression.\n(w / worry-02\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Adam\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Karen\")))\n      :ARG1 (s / suffer-01\n            :ARG0 (p3 / person\n                  :name (n3 / name\n                        :op1 \"May\"))\n            :ARG1 (d / depress-01\n                  :ARG1 p3)))", "# ::snt Karen will call her friend who is a psychologist and ask for advice.\n(a / and\n      :op1 (c / call-02\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Karen\"))\n            :ARG1 (p2 / person\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 p\n                        :ARG2 (f / friend))\n                  :mod (p3 / psychologist)))\n      :op2 (a2 / ask-02\n            :ARG0 p\n            :ARG1 (a3 / advise-01\n                  :ARG0 p2\n                  :ARG1 p)\n            :ARG2 p2))"], "tree": ["(w / worry-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Adam\")))", "(w / worry-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Karen\")))", "(w / worry-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Adam\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Karen\"))))", "(w / worry-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Adam\"))\n   :ARG1 (s / suffer-01\n            :ARG0 (p3 / person\n                      :name (n3 / name\n                                :op1 \"May\"))\n            :ARG1 (d / depress-01\n                     :ARG1 p3)))", "(w / worry-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Adam\"))\n   :ARG1 (s / suffer-01\n            :ARG0 (p3 / person\n                      :name (n3 / name\n                                :op1 \"May\"))\n            :ARG1 (d / depress-01\n                     :ARG1 p3)))", "(w / worry-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Karen\"))\n   :ARG1 (s / suffer-01\n            :ARG0 (p3 / person\n                      :name (n3 / name\n                                :op1 \"May\"))\n            :ARG1 (d / depress-01\n                     :ARG1 p3))\n   :ARG1 s)", "(w / worry-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Karen\"))\n   :ARG1 (s / suffer-01\n            :ARG0 (p3 / person\n                      :name (n3 / name\n                                :op1 \"May\"))\n            :ARG1 (d / depress-01\n                     :ARG1 p3))\n   :ARG1 s)", "(w / worry-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Adam\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Karen\")))\n   :ARG1 (s / suffer-01\n            :ARG0 (p3 / person\n                      :name (n3 / name\n                                :op1 \"May\"))\n            :ARG1 (d / depress-01\n                     :ARG1 p3)))", "(w / worry-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Adam\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Karen\")))\n   :ARG1 (s / suffer-01\n            :ARG0 (p3 / person\n                      :name (n3 / name\n                                :op1 \"May\"))\n            :ARG1 (d / depress-01\n                     :ARG1 p3)))", "(h / have-rel-role-91\n   :ARG1 (p / person :name (n / name :op1 \"Karen\"))\n   :ARG2 (f / friend))", "(a2 / ask-02\n    :ARG0 (p / person :name (n / name :op1 \"Karen\"))\n    :ARG1 (a3 / advise-01\n              :ARG0 (p2 / person)\n              :ARG1 p))", "(a2 / ask-02\n    :ARG0 (p / person :name (n / name :op1 \"Karen\"))\n    :ARG1 (a3 / advise-01\n              :ARG0 (p2 / person)\n              :ARG1 p)\n    :ARG2 p2)", "(a2 / ask-02\n    :ARG0 (p / person :name (n / name :op1 \"Karen\"))\n    :ARG1 (a3 / advise-01\n              :ARG0 (p2 / person)\n              :ARG1 p)\n    :ARG2 p2)", "(c / call-02\n   :ARG1 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 (p / person :name (n / name :op1 \"Karen\"))\n                      :ARG2 (f / friend))\n             :mod (p3 / psychologist)))", "(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Karen\"))\n   :ARG1 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 p\n                      :ARG2 (f / friend))\n             :mod (p3 / psychologist)))", "(c / call-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Karen\"))\n   :ARG1 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 p\n                      :ARG2 (f / friend))\n             :mod (p3 / psychologist)))"], "smus": ["Adam is worried.", "Karen is worried.", "Adam and Karen are worried.", "Adam is worried that May suffers depression.", "Adam is worried that May suffers depression.", "Karen worries May suffers depression.", "Karen worries May suffers depression.", "Adam and Karen are worried that May suffers depression.", "Adam and Karen are worried that May suffers depression.", "Karen is a friend.", "Karen, ask for advice from people.", "Karen, ask for advice from people.", "Karen, ask for advice from people.", "Call Karen's friend a psychologist.", "Karen would call her friend a psychologist.", "Karen would call her friend a psychologist."]}, {"instance_id": "samsum-440", "summary": "Raul's had a bad night and day. ", "summary_trees": ["# ::snt Raul's had a bad night and day.\n(b / bad-04\n      :ARG1 (a / and\n            :op1 (n / night)\n            :op2 (d / day))\n      :ARG2 (p / person\n            :name (n2 / name\n                  :op1 \"Raul\")))"], "tree": ["(b / bad-04\n   :ARG1 (n / night)\n   :ARG2 (p / person\n            :name (n2 / name\n                      :op1 \"Raul\")))", "(b / bad-04\n   :ARG1 (n / night)\n   :ARG2 (p / person\n            :name (n2 / name\n                      :op1 \"Raul\")))", "(b / bad-04\n   :ARG1 (d / day)\n   :ARG2 (p / person\n            :name (n2 / name\n                      :op1 \"Raul\"))\n   :ARG2 p)", "(b / bad-04\n   :ARG1 (d / day)\n   :ARG2 (p / person\n            :name (n2 / name\n                      :op1 \"Raul\"))\n   :ARG2 p)", "(b / bad-04\n   :ARG1 (a / and\n            :op1 (n / night)\n            :op2 (d / day))\n   :ARG2 (p / person\n            :name (n2 / name\n                      :op1 \"Raul\")))", "(b / bad-04\n   :ARG1 (a / and\n            :op1 (n / night)\n            :op2 (d / day))\n   :ARG2 (p / person\n            :name (n2 / name\n                      :op1 \"Raul\")))"], "smus": ["Bad night Raul.", "Bad night Raul.", "Raul's day is bad for him.", "Raul's day is bad for him.", "Raul, bad night and day.", "Raul, bad night and day."]}, {"instance_id": "samsum-441", "summary": "The university is throwing a carnival party for kids.", "summary_trees": ["# ::snt The university is throwing a carnival party for kids.\n(t / throw-01\n      :ARG0 (u / university)\n      :ARG1 (p / party-01\n            :mod (c / carnival)\n            :beneficiary (k / kid)))"], "tree": ["(p / party-01\n   :mod (c / carnival)\n   :beneficiary (k / kid))", "(p / party-01\n   :mod (c / carnival)\n   :beneficiary (k / kid))", "(t / throw-01\n   :ARG1 (p / party-01\n            :mod (c / carnival)\n            :beneficiary (k / kid)))", "(t / throw-01\n   :ARG0 (u / university)\n   :ARG1 (p / party-01\n            :mod (c / carnival)\n            :beneficiary (k / kid)))", "(t / throw-01\n   :ARG0 (u / university)\n   :ARG1 (p / party-01\n            :mod (c / carnival)\n            :beneficiary (k / kid)))"], "smus": ["A carnival party for kids.", "A carnival party for kids.", "Throwing a carnival party for kids.", "The university is throwing a carnival party for kids.", "The university is throwing a carnival party for kids."]}, {"instance_id": "samsum-442", "summary": "Ian is looking for his green folder. Sophie hasn't seen it but maybe Alex will know.", "summary_trees": ["# ::snt Ian is looking for his green folder.\n(l / look-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Ian\"))\n      :ARG1 (f / folder\n            :ARG1-of (g / green-02)\n            :poss p))", "# ::snt Sophie hasn't seen it but maybe Alex will know.\n(c / contrast-01\n      :ARG1 (s / see-01\n            :polarity -\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Sophie\"))\n            :ARG1 (ii / it))\n      :ARG2 (p2 / possible-01\n            :ARG1 (k / know-01\n                  :ARG0 (p3 / person\n                        :name (n2 / name\n                              :op1 \"Alex\")))))"], "tree": ["(l / look-01\n   :ARG1 (f / folder\n            :ARG1 (g / green-02)\n            :poss (p / person :name (n / name :op1 \"Ian\"))))", "(l / look-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ian\")))", "(l / look-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ian\"))\n   :ARG1 (f / folder\n            :ARG1 (g / green-02)\n            :poss p))", "(l / look-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ian\"))\n   :ARG1 (f / folder\n            :ARG1 (g / green-02)\n            :poss p))", "(p2 / possible-01\n    :ARG1 (k / know-01\n             :ARG0 (p3 / person\n                       :name (n2 / name\n                                 :op1 \"Alex\"))))", "(p2 / possible-01\n    :ARG1 (k / know-01\n             :ARG0 (p3 / person\n                       :name (n2 / name\n                                 :op1 \"Alex\"))))", "(s / see-01\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sophie\"))\n   :ARG1 (ii / it))", "(c / contrast-01\n   :ARG1 (s / see-01\n            :polarity -\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Sophie\"))\n            :ARG1 (ii / it))\n   :ARG2 (p2 / possible-01\n             :ARG1 (k / know-01\n                      :ARG0 (p3 / person\n                                :name (n2 / name\n                                          :op1 \"Alex\")))))", "(c / contrast-01\n   :ARG1 (s / see-01\n            :polarity -\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Sophie\"))\n            :ARG1 (ii / it))\n   :ARG2 (p2 / possible-01\n             :ARG1 (k / know-01\n                      :ARG0 (p3 / person\n                                :name (n2 / name\n                                          :op1 \"Alex\")))))"], "smus": ["Looking at Ians green folder.", "Ian is looking.", "Ian was looking through his green folder.", "Ian was looking through his green folder.", "Alex may know.", "Alex may know.", "Sophie hasn't seen it.", "Sophie hasn't seen it, but Alex may know.", "Sophie hasn't seen it, but Alex may know."]}, {"instance_id": "samsum-443", "summary": "Nick will got some lunch for Steve - it can be anything but chicken. ", "summary_trees": ["# ::snt Nick will got some lunch for Steve - it can be anything but chicken.\n(g / get-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Nick\"))\n      :ARG1 (l / lunch\n            :mod (s / some))\n      :ARG4 (p2 / person\n            :name (n2 / name\n                  :op1 \"Steve\"))\n      :ARG1-of (c / cause-01\n            :ARG0 (p3 / possible-01\n                  :ARG1 (a / anything\n                        :ARG1-of (e / except-01\n                              :ARG2 (c2 / chicken))\n                        :domain l))))"], "tree": ["(p3 / possible-01\n    :ARG1 (a / anything\n             :ARG1 (e / except-01\n                      :ARG2 (c2 / chicken))\n             :domain (l / lunch)))", "(p3 / possible-01\n    :ARG1 (a / anything\n             :ARG1 (e / except-01\n                      :ARG2 (c2 / chicken))\n             :domain (l / lunch)))", "(c / cause-01\n   :ARG0 (p3 / possible-01\n             :ARG1 (a / anything\n                      :ARG1 (e / except-01\n                               :ARG2 (c2 / chicken))\n                      :domain (l / lunch))))", "(g / get-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nick\"))\n   :ARG1 (l / lunch\n            :mod (s / some)))", "(g / get-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nick\"))\n   :ARG1 (l / lunch\n            :mod (s / some))\n   :ARG4 (p2 / person\n             :name (n2 / name\n                       :op1 \"Steve\"))\n   :ARG1 (c / cause-01\n            :ARG0 (p3 / possible-01\n                      :ARG1 (a / anything\n                               :ARG1 (e / except-01\n                                        :ARG2 (c2 / chicken))\n                               :domain l))))"], "smus": ["Lunch can be anything but chicken.", "Lunch can be anything but chicken.", "Because lunch can be anything but chicken.", "Nick got some lunch.", "Nick got Steve some lunch because it could be anything but chicken."]}, {"instance_id": "samsum-444", "summary": "It's Valentine's day. Bella plans to order some pizza home. Aria will come to Warsaw as soon as she quits. This year Bella will probably go to Korea to get regular checkup. ", "summary_trees": ["# ::snt It's Valentine's day.\n(f / festival\n      :name (n / name\n            :op1 \"Valentine's\"\n            :op2 \"Day\"))", "# ::snt Bella plans to order some pizza home.\n(p / plan-01\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Bella\"))\n      :ARG1 (o / order-02\n            :ARG0 p2\n            :ARG1 (p3 / pizza\n                  :quant (s / some))\n            :destination (h / home)))", "# ::snt Aria will come to Warsaw as soon as she quits.\n(c / come-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Aria\"))\n      :ARG4 (c2 / city\n            :name (n2 / name\n                  :op1 \"Warsaw\"))\n      :time (a / as-soon-as\n            :op1 (q / quit-01\n                  :ARG0 p)))", "# ::snt This year Bella will probably go to Korea to get regular checkup.\n(p / probable\n      :domain (g / go-01\n            :ARG1 (p2 / person\n                  :name (n / name\n                        :op1 \"Bella\"))\n            :ARG4 (c / country\n                  :name (n2 / name\n                        :op1 \"Korea\"))\n            :purpose (g2 / get-01\n                  :ARG0 p2\n                  :ARG1 (c2 / check-up-06\n                        :ARG1 p2\n                        :ARG1-of (r / regular-02)))\n            :time (y / year\n                  :mod (t / this))))"], "tree": ["(f / festival\n   :name (n / name\n            :op1 \"Valentine's\"\n            :op2 \"Day\"))", "(o / order-02\n   :ARG1 (p3 / pizza\n             :quant (s / some)))", "(o / order-02\n   :ARG0 (p2 / person :name (n / name :op1 \"Bella\"))\n   :ARG1 (p3 / pizza\n             :quant (s / some))\n   :destination (h / home))", "(p / plan-01\n   :ARG1 (o / order-02\n            :ARG0 (p2 / person :name (n / name :op1 \"Bella\"))\n            :ARG1 (p3 / pizza\n                      :quant (s / some))\n            :destination (h / home)))", "(p / plan-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Bella\"))\n   :ARG1 (o / order-02\n            :ARG0 p2\n            :ARG1 (p3 / pizza\n                      :quant (s / some))\n            :destination (h / home)))", "(p / plan-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Bella\"))\n   :ARG1 (o / order-02\n            :ARG0 p2\n            :ARG1 (p3 / pizza\n                      :quant (s / some))\n            :destination (h / home)))", "(c / come-01\n   :time (a / as-soon-as\n            :op1 (q / quit-01)))", "(c / come-01\n   :time (a / as-soon-as\n            :op1 (q / quit-01)))", "(c / come-01\n   :time (a / as-soon-as\n            :op1 (q / quit-01)))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Aria\")))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Aria\"))\n   :time (a / as-soon-as\n            :op1 (q / quit-01\n                    :ARG0 p)))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Aria\"))\n   :ARG4 (c2 / city\n             :name (n2 / name\n                       :op1 \"Warsaw\")))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Aria\"))\n   :ARG4 (c2 / city\n             :name (n2 / name\n                       :op1 \"Warsaw\"))\n   :time (a / as-soon-as\n            :op1 (q / quit-01\n                    :ARG0 p)))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Aria\"))\n   :ARG4 (c2 / city\n             :name (n2 / name\n                       :op1 \"Warsaw\"))\n   :time (a / as-soon-as\n            :op1 (q / quit-01\n                    :ARG0 p)))", "(c2 / check-up-06\n    :ARG1 (p2 / person :name (n / name :op1 \"Bella\"))\n    :ARG1 (r / regular-02))", "(g / go-01\n   :purpose (g2 / get-01)\n   :time (y / year\n            :mod (t / this)))", "(g / go-01\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Bella\"))\n   :ARG4 (c / country\n            :name (n2 / name\n                      :op1 \"Korea\"))\n   :purpose (g2 / get-01\n                :ARG0 p2\n                :ARG1 (c2 / check-up-06\n                          :ARG1 p2\n                          :ARG1 (r / regular-02)))\n   :time (y / year\n            :mod (t / this)))"], "smus": ["Valentine's Day.", "Order some pizza.", "Bella would order some pizza for home.", "Bella plans to order some pizza for home.", "Bella plans to order some pizza for home.", "Bella plans to order some pizza for home.", "As soon as quitting will come.", "As soon as quitting will come.", "As soon as quitting will come.", "Aria will come.", "Aria will come as soon as she quits.", "Aria will come to Warsaw.", "Aria will come to Warsaw as soon as she quits.", "Aria will come to Warsaw as soon as she quits.", "Bella does a regular check up.", "Go get it this year.", "This year, Bella will go to Korea to get a regular checkup."]}, {"instance_id": "samsum-445", "summary": "Celine and Mark went skating, it's the first time for Mark.", "summary_trees": ["# ::snt Celine and Mark went skating, it's the first time for Mark.\n(g / go-02\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Celine\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Mark\")))\n      :ARG1 (s / skate-01)\n      :ord (o / ordinal-entity\n            :value 1))"], "tree": ["(g / go-02\n   :ord (o / ordinal-entity\n           :value 1))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Celine\")))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Mark\")))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Celine\"))\n   :ARG1 (s / skate-01))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Mark\"))\n   :ARG1 (s / skate-01)\n   :ARG1 s)", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Mark\"))\n   :ARG1 (s / skate-01)\n   :ARG1 s\n   :ord (o / ordinal-entity\n           :value 1))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Celine\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Mark\"))))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Celine\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Mark\")))\n   :ARG1 (s / skate-01))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Celine\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Mark\")))\n   :ARG1 (s / skate-01)\n   :ord (o / ordinal-entity\n           :value 1))"], "smus": ["First went.", "Celine went.", "Mark went.", "Celine went skating.", "Mark went skating.", "Mark went skating for the first time.", "Celine and Mark went.", "Celine and Mark went skating.", "Celine and Mark went skating for the first time."]}, {"instance_id": "samsum-446", "summary": "Julie and Debra are discussing the event, there will be about 20 people, mostly girls from the village 40+.", "summary_trees": ["# ::snt Julie and Debra are discussing the event, there will be about 20 people, mostly girls from the village 40+.\n(a / and\n      :op1 (d / discuss-01\n            :ARG0 (a2 / and\n                  :op1 (p / person\n                        :name (n / name\n                              :op1 \"Julie\"))\n                  :op2 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Debra\")))\n            :ARG1 (e / event))\n      :op2 (p3 / person\n            :quant (a3 / about\n                  :op1 20)\n            :ARG2-of (ii / include-91\n                  :ARG1 (g / girl\n                        :quant 40\n                        :source (v / village)\n                        :mod (m / most)))))"], "tree": ["(ii / include-91\n    :ARG1 (g / girl\n             :quant 40\n             :source (v / village)\n             :mod (m / most)))", "(d / discuss-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Julie\"))\n   :ARG1 (e / event))", "(d / discuss-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Julie\"))\n   :ARG1 (e / event))", "(d / discuss-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Debra\"))\n   :ARG1 (e / event)\n   :ARG1 e)", "(d / discuss-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Debra\"))\n   :ARG1 (e / event)\n   :ARG1 e)", "(d / discuss-01\n   :ARG0 (a2 / and\n             :op1 (p / person\n                     :name (n / name\n                              :op1 \"Julie\"))\n             :op2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Debra\")))\n   :ARG1 (e / event))", "(d / discuss-01\n   :ARG0 (a2 / and\n             :op1 (p / person\n                     :name (n / name\n                              :op1 \"Julie\"))\n             :op2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Debra\")))\n   :ARG1 (e / event))"], "smus": ["Most of the 40 girls were from the village.", "Julia was discussing the event.", "Julia was discussing the event.", "Debra is discussing the event.", "Debra is discussing the event.", "Julie and Debra are discussing the event.", "Julie and Debra are discussing the event."]}, {"instance_id": "samsum-447", "summary": "Dima's laptop is broken, as her cat spilled coffee on the laptop. Dima is worried, because she has to deliver a translation for Trados tomorrow. Dima will come to Nada in an hour to borrow Nada's laptop. ", "summary_trees": ["# ::snt Dima's laptop is broken, as her cat spilled coffee on the laptop.\n(b / break-01\n      :ARG1 (l / laptop\n            :poss (p / person\n                  :name (n / name\n                        :op1 \"Dima\")))\n      :ARG1-of (c / cause-01\n            :ARG0 (s / spill-01\n                  :ARG0 (c2 / cat\n                        :poss p)\n                  :ARG1 (c3 / coffee)\n                  :ARG2 l)))", "# ::snt Dima is worried, because she has to deliver a translation for Trados tomorrow.\n(w / worry-02\n      :ARG0 (o / obligate-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Dima\"))\n            :ARG2 (d / deliver-01\n                  :ARG0 p\n                  :ARG1 (t / translate-01\n                        :ARG3 (c / company\n                              :name (n2 / name\n                                    :op1 \"Trades\")))\n                  :time (t2 / tomorrow)))\n      :ARG1 p)", "# ::snt Dima will come to Nada in an hour to borrow Nada's laptop.\n(c / come-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Dima\"))\n      :ARG4 (p2 / person\n            :name (n2 / name\n                  :op1 \"Nada\"))\n      :purpose (b / borrow-01\n            :ARG0 p\n            :ARG1 (l / laptop\n                  :poss p2))\n      :time (a / after\n            :op1 (n3 / now)\n            :quant (t / temporal-quantity\n                  :quant 1\n                  :unit (h / hour))))"], "tree": ["(s / spill-01\n   :ARG0 (c2 / cat\n             :poss (p / person :name (n / name :op1 \"Dima\")))\n   :ARG1 (c3 / coffee))", "(s / spill-01\n   :ARG0 (c2 / cat\n             :poss (p / person :name (n / name :op1 \"Dima\")))\n   :ARG1 (c3 / coffee)\n   :ARG2 (l / laptop))", "(b / break-01\n   :ARG1 (l / laptop\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Dima\"))))", "(c / cause-01\n   :ARG0 (s / spill-01\n            :ARG0 (c2 / cat\n                      :poss (p / person :name (n / name :op1 \"Dima\")))\n            :ARG1 (c3 / coffee)\n            :ARG2 (l / laptop)))", "(b / break-01\n   :ARG1 (l / laptop\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Dima\")))\n   :ARG1 (c / cause-01\n            :ARG0 (s / spill-01\n                     :ARG0 (c2 / cat\n                               :poss p)\n                     :ARG1 (c3 / coffee)\n                     :ARG2 l)))", "(t / translate-01\n   :ARG3 (c / company\n            :name (n2 / name\n                      :op1 \"Trades\")))", "(d / deliver-01\n   :ARG1 (t / translate-01\n            :ARG3 (c / company\n                     :name (n2 / name\n                               :op1 \"Trades\"))))", "(d / deliver-01\n   :ARG0 (p / person :name (n / name :op1 \"Dima\"))\n   :ARG1 (t / translate-01\n            :ARG3 (c / company\n                     :name (n2 / name\n                               :op1 \"Trades\"))))", "(d / deliver-01\n   :ARG0 (p / person :name (n / name :op1 \"Dima\"))\n   :ARG1 (t / translate-01\n            :ARG3 (c / company\n                     :name (n2 / name\n                               :op1 \"Trades\")))\n   :time (t2 / tomorrow))", "(o / obligate-01\n   :ARG2 (d / deliver-01\n            :ARG0 (p / person :name (n / name :op1 \"Dima\"))\n            :ARG1 (t / translate-01\n                     :ARG3 (c / company\n                              :name (n2 / name\n                                        :op1 \"Trades\")))\n            :time (t2 / tomorrow)))", "(o / obligate-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Dima\"))\n   :ARG2 (d / deliver-01\n            :ARG0 p\n            :ARG1 (t / translate-01\n                     :ARG3 (c / company\n                              :name (n2 / name\n                                        :op1 \"Trades\")))\n            :time (t2 / tomorrow)))", "(o / obligate-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Dima\"))\n   :ARG2 (d / deliver-01\n            :ARG0 p\n            :ARG1 (t / translate-01\n                     :ARG3 (c / company\n                              :name (n2 / name\n                                        :op1 \"Trades\")))\n            :time (t2 / tomorrow)))", "(w / worry-02\n   :ARG0 (o / obligate-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Dima\"))\n            :ARG2 (d / deliver-01\n                     :ARG0 p\n                     :ARG1 (t / translate-01\n                              :ARG3 (c / company\n                                       :name (n2 / name\n                                                 :op1 \"Trades\")))\n                     :time (t2 / tomorrow))))", "(b / borrow-01\n   :ARG0 (p / person :name (n / name :op1 \"Dima\"))\n   :ARG1 (l / laptop\n            :poss (p2 / person :name (n2 / name :op1 \"Nada\"))))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Dima\")))", "(c / come-01\n   :time (a / after\n            :op1 (n3 / now)\n            :quant (t / temporal-quantity\n                      :quant 1\n                      :unit (h / hour))))", "(c / come-01\n   :time (a / after\n            :op1 (n3 / now)\n            :quant (t / temporal-quantity\n                      :quant 1\n                      :unit (h / hour))))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Dima\"))\n   :ARG4 (p2 / person\n             :name (n2 / name\n                       :op1 \"Nada\")))", "(c / come-01\n   :purpose (b / borrow-01)\n   :time (a / after\n            :op1 (n3 / now)\n            :quant (t / temporal-quantity\n                      :quant 1\n                      :unit (h / hour))))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Dima\"))\n   :time (a / after\n            :op1 (n3 / now)\n            :quant (t / temporal-quantity\n                      :quant 1\n                      :unit (h / hour))))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Dima\"))\n   :ARG4 (p2 / person\n             :name (n2 / name\n                       :op1 \"Nada\"))\n   :time (a / after\n            :op1 (n3 / now)\n            :quant (t / temporal-quantity\n                      :quant 1\n                      :unit (h / hour))))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Dima\"))\n   :ARG4 (p2 / person\n             :name (n2 / name\n                       :op1 \"Nada\"))\n   :purpose (b / borrow-01\n               :ARG0 p\n               :ARG1 (l / laptop\n                        :poss p2))\n   :time (a / after\n            :op1 (n3 / now)\n            :quant (t / temporal-quantity\n                      :quant 1\n                      :unit (h / hour))))"], "smus": ["Dima's cat spilled coffee.", "Dima's cat spilled coffee on the laptop.", "Dima's laptop was broken.", "Because Dima's cat spilled coffee on the laptop.", "Dima's laptop was broken when her cat spilled coffee on it.", "Translation to Trades", "Deliver translation to Trades.", "Dima will deliver translation to Trades.", "Dima will deliver the translation to Trades tomorrow.", "Dima must deliver the translation to Trades tomorrow.", "Dima will have to deliver the translation to Trades tomorrow.", "Dima will have to deliver the translation to Trades tomorrow.", "Worrying that Dima will have to deliver translation to Trades tomorrow.", "Dima will borrow Nada's laptop.", "Come Dima.", "Come in an hour.", "Come in an hour.", "Dima will come after Nada.", "Come borrow in an hour.", "Dima will come in an hour.", "Dima will come to Nada in an hour.", "In an hour, Dima will come to Nada to borrow her laptop."]}, {"instance_id": "samsum-448", "summary": "Barbara got the confirmation email from AES. Mick did not get the email and will call them.", "summary_trees": ["# ::snt Barbara got the confirmation email from AES.\n(g / get-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Barbara\"))\n      :ARG1 (e / email-01\n            :ARG0 (c / company\n                  :name (n2 / name\n                        :op1 \"AES\"))\n            :ARG1 (c2 / confirm-01))\n      :ARG2 c)", "# ::snt Mick did not get the email and will call them.\n(a / and\n      :op1 (g / get-01\n            :polarity -\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Mick\"))\n            :ARG1 (e / email))\n      :op2 (c / call-02\n            :ARG0 p\n            :ARG1 (t / they)))"], "tree": ["(e / email-01\n   :ARG0 (c / company\n            :name (n2 / name\n                      :op1 \"AES\"))\n   :ARG1 (c2 / confirm-01))", "(g / get-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Barbara\"))\n   :ARG1 (e / email-01\n            :ARG0 (c / company\n                     :name (n2 / name\n                               :op1 \"AES\"))\n            :ARG1 (c2 / confirm-01))\n   :ARG2 c)", "(g / get-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mick\"))\n   :ARG1 (e / email))", "(g / get-01\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mick\"))\n   :ARG1 (e / email))"], "smus": ["AES sent an email with confirmation.", "Barbara got confirmation via email from AES.", "mick, get an e-mail.", "Mick did not get an email."]}, {"instance_id": "samsum-449", "summary": "Jill did 20 or 30 so far, 3-4 per day, 40 or 35 hours, so the same as Ally.", "summary_trees": ["# ::snt Jill did 20 or 30 so far, 3-4 per day, 40 or 35 hours, so the same as Ally.\n(d / do-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jill\"))\n      :ARG1 (o / or\n            :op1 (t / temporal-quantity\n                  :quant 20\n                  :unit (h / hour))\n            :op2 (t2 / temporal-quantity\n                  :quant 30\n                  :unit (h2 / hour))\n            :ARG1-of (s / same-01\n                  :ARG2 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Ally\"))))\n      :time (s2 / so-far)\n      :manner (r / rate-entity-91\n            :ARG1 (b / between\n                  :op1 3\n                  :op2 4)\n            :ARG2 (t3 / temporal-quantity\n                  :quant 1\n                  :unit (d2 / day))))"], "tree": ["(s / same-01\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Ally\")))", "(d / do-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jill\")))", "(r / rate-entity-91\n   :ARG1 (b / between\n            :op1 3\n            :op2 4)\n   :ARG2 (t3 / temporal-quantity\n             :quant 1\n             :unit (d2 / day)))", "(r / rate-entity-91\n   :ARG1 (b / between\n            :op1 3\n            :op2 4)\n   :ARG2 (t3 / temporal-quantity\n             :quant 1\n             :unit (d2 / day)))", "(d / do-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jill\"))\n   :ARG1 (o / or\n            :op1 (t / temporal-quantity\n                    :quant 20\n                    :unit (h / hour))\n            :op2 (t2 / temporal-quantity\n                     :quant 30\n                     :unit (h2 / hour))\n            :ARG1 (s / same-01\n                     :ARG2 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Ally\"))))\n   :manner (r / rate-entity-91\n              :ARG1 (b / between\n                       :op1 3\n                       :op2 4)\n              :ARG2 (t3 / temporal-quantity\n                        :quant 1\n                        :unit (d2 / day))))"], "smus": ["Same with Ally.", "Jill did.", "3-4 times a day", "3-4 times a day", "Jill did the same as Ally 20 or 3 hours a day, 3 to 4 times a day."]}, {"instance_id": "samsum-450", "summary": "Gloria has an exam soon. It lasts 4 hours. Emma sent her a link to a website with some texts from previous years so that she can prepare for the exam better.", "summary_trees": ["# ::snt Gloria has an exam soon.\n(h / have-06\n      :ARG0 (c / country\n            :name (n / name\n                  :op1 \"Gloria\"))\n      :ARG1 (e / exam)\n      :time (s / soon))", "# ::snt It lasts 4 hours.\n(l / last-01\n      :ARG1 (ii / it)\n      :ARG2 (t / temporal-quantity\n            :quant 4\n            :unit (h / hour)))", "# ::snt Emma sent her a link to a website with some texts from previous years so that she can prepare for the exam better.\n(s / send-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Emma\"))\n      :ARG1 (l / link-01\n            :ARG2 (w / website\n                  :ARG0-of (c / contain-01\n                        :ARG1 (t / text-01\n                              :quant (s2 / some)\n                              :time (y / year\n                                    :mod (p2 / previous))))))\n      :ARG2 (s3 / she)\n      :purpose (p3 / possible-01\n            :ARG1 (p4 / prepare-02\n                  :ARG0 s3\n                  :ARG1 s3\n                  :ARG2 (e / exam)\n                  :ARG1-of (h / have-degree-91\n                        :ARG2 (g / good-03\n                              :ARG1 p4)\n                        :ARG3 (m / more)))))"], "tree": ["(h / have-06\n   :ARG0 (c / country\n            :name (n / name\n                     :op1 \"Gloria\"))\n   :ARG1 (e / exam)\n   :time (s / soon))", "(l / last-01\n   :ARG1 (ii / it)\n   :ARG2 (t / temporal-quantity\n            :quant 4\n            :unit (h / hour)))", "(l / last-01\n   :ARG1 (ii / it)\n   :ARG2 (t / temporal-quantity\n            :quant 4\n            :unit (h / hour)))", "(h / have-degree-91\n   :ARG2 (g / good-03\n            :ARG1 (p4 / prepare-02))\n   :ARG3 (m / more))", "(t / text-01\n   :quant (s2 / some)\n   :time (y / year\n            :mod (p2 / previous)))", "(t / text-01\n   :quant (s2 / some)\n   :time (y / year\n            :mod (p2 / previous)))", "(c / contain-01\n   :ARG1 (t / text-01\n            :quant (s2 / some)\n            :time (y / year\n                     :mod (p2 / previous))))", "(l / link-01\n   :ARG2 (w / website\n            :ARG0 (c / contain-01\n                     :ARG1 (t / text-01\n                              :quant (s2 / some)\n                              :time (y / year\n                                       :mod (p2 / previous))))))", "(p3 / possible-01\n    :ARG1 (p4 / prepare-02\n              :ARG0 (s3 / she)\n              :ARG1 s3\n              :ARG2 (e / exam)\n              :ARG1 (h / have-degree-91\n                       :ARG2 (g / good-03\n                                :ARG1 p4)\n                       :ARG3 (m / more))))", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Emma\"))\n   :ARG1 (l / link-01\n            :ARG2 (w / website\n                     :ARG0 (c / contain-01\n                              :ARG1 (t / text-01\n                                       :quant (s2 / some)\n                                       :time (y / year\n                                                :mod (p2 / previous))))))\n   :ARG2 (s3 / she)\n   :purpose (p3 / possible-01\n                :ARG1 (p4 / prepare-02\n                          :ARG0 s3\n                          :ARG1 s3\n                          :ARG2 (e / exam)\n                          :ARG1 (h / have-degree-91\n                                   :ARG2 (g / good-03\n                                            :ARG1 p4)\n                                   :ARG3 (m / more)))))"], "smus": ["Gloria has an exam soon.", "It lasts 4 hours.", "It lasts 4 hours.", "Better to prepare.", "Some texts from previous years.", "Some texts from previous years.", "Some of the texts contain previous years.", "A link to a website containing some of the previous years texts.", "She could have prepared for the exam better.", "Emma sent her a link to a website that contained some previous years texts so she could better prepare for the exam."]}, {"instance_id": "samsum-451", "summary": "Anne is inviting Adele for Easter. Adele will bring some chocolate eggs.", "summary_trees": ["# ::snt Anne is inviting Adele for Easter.\n(ii / invite-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Anne\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Adele\"))\n      :ARG2 (f / festival\n            :name (n3 / name\n                  :op1 \"Easter\")))", "# ::snt Adele will bring some chocolate eggs.\n(b / bring-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Adele\"))\n      :ARG1 (e / egg\n            :mod (c / chocolate)\n            :quant (s / some)))"], "tree": ["(ii / invite-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Anne\"))\n    :ARG1 (p2 / person\n              :name (n2 / name\n                        :op1 \"Adele\")))", "(ii / invite-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Anne\"))\n    :ARG1 (p2 / person\n              :name (n2 / name\n                        :op1 \"Adele\"))\n    :ARG2 (f / festival\n             :name (n3 / name\n                       :op1 \"Easter\")))", "(ii / invite-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Anne\"))\n    :ARG1 (p2 / person\n              :name (n2 / name\n                        :op1 \"Adele\"))\n    :ARG2 (f / festival\n             :name (n3 / name\n                       :op1 \"Easter\")))", "(b / bring-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Adele\"))\n   :ARG1 (e / egg\n            :mod (c / chocolate)\n            :quant (s / some)))", "(b / bring-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Adele\"))\n   :ARG1 (e / egg\n            :mod (c / chocolate)\n            :quant (s / some)))"], "smus": ["Anne is inviting Adele.", "Anne is inviting Adele to Easter.", "Anne is inviting Adele to Easter.", "Adele will bring some chocolate eggs.", "Adele will bring some chocolate eggs."]}, {"instance_id": "samsum-452", "summary": "Joseph has sent Ella a photo of Wujek Janek's twin baby cows. Ella is delighted.", "summary_trees": ["# ::snt Joseph has sent Ella a photo of Wujek Janek's twin baby cows.\n(s / send-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Joseph\"))\n      :ARG1 (p2 / photo\n            :topic (c / cow\n                  :mod (b / baby)\n                  :mod (t / twin)\n                  :poss (p3 / person\n                        :name (n2 / name\n                              :op1 \"Wujek\"\n                              :op2 \"Janek\"))))\n      :ARG2 (p4 / person\n            :name (n3 / name\n                  :op1 \"Ella\")))", "# ::snt Ella is delighted.\n(d / delight-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Ella\")))"], "tree": ["(s / send-01\n   :ARG1 (p2 / photo\n             :topic (c / cow\n                       :mod (b / baby)\n                       :mod (t / twin)\n                       :poss (p3 / person\n                                 :name (n2 / name\n                                           :op1 \"Wujek\"\n                                           :op2 \"Janek\"))))\n   :ARG2 (p4 / person\n             :name (n3 / name\n                       :op1 \"Ella\")))", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Joseph\"))\n   :ARG1 (p2 / photo\n             :topic (c / cow\n                       :mod (b / baby)\n                       :mod (t / twin)\n                       :poss (p3 / person\n                                 :name (n2 / name\n                                           :op1 \"Wujek\"\n                                           :op2 \"Janek\")))))", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Joseph\"))\n   :ARG1 (p2 / photo\n             :topic (c / cow\n                       :mod (b / baby)\n                       :mod (t / twin)\n                       :poss (p3 / person\n                                 :name (n2 / name\n                                           :op1 \"Wujek\"\n                                           :op2 \"Janek\"))))\n   :ARG2 (p4 / person\n             :name (n3 / name\n                       :op1 \"Ella\")))", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Joseph\"))\n   :ARG1 (p2 / photo\n             :topic (c / cow\n                       :mod (b / baby)\n                       :mod (t / twin)\n                       :poss (p3 / person\n                                 :name (n2 / name\n                                           :op1 \"Wujek\"\n                                           :op2 \"Janek\"))))\n   :ARG2 (p4 / person\n             :name (n3 / name\n                       :op1 \"Ella\")))", "(d / delight-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Ella\")))"], "smus": ["A photo of Wejek Janek's twin baby cows was sent to Ella.", "Joseph has sent a photo of Wejek Janek's twin baby cows.", "Joseph has sent Ella a photo of Wejek Janek's twin baby cows.", "Joseph has sent Ella a photo of Wejek Janek's twin baby cows.", "Ella was delighted."]}, {"instance_id": "samsum-453", "summary": "Bruce informs Oliver that the campaign is more than successful. They have so far won about 200 backers and crowdfunded 6123 dollars.", "summary_trees": ["# ::snt Bruce informs Oliver that the campaign is more than successful.\n(ii / inform-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Bruce\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Oliver\"))\n      :ARG2 (s / succeed-01\n            :ARG1 (c / campaign-01)\n            :degree (m / more-than)))", "# ::snt They have so far won about 200 backers and crowdfunded 6123 dollars.\n(a / and\n      :op1 (w / win-01\n            :ARG0 (t / they)\n            :ARG1 (p / person\n                  :ARG0-of (b / back-01\n                        :ARG1 t)\n                  :quant (a2 / about\n                        :op1 200))\n            :time (s / so-far))\n      :op2 (c / crowdfund-01\n            :ARG0 t\n            :ARG1 (m / monetary-quantity\n                  :quant 6123\n                  :unit (d / dollar))))"], "tree": ["(s / succeed-01\n   :ARG1 (c / campaign-01)\n   :degree (m / more-than))", "(ii / inform-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Bruce\"))\n    :ARG1 (p2 / person\n              :name (n2 / name\n                        :op1 \"Oliver\")))", "(ii / inform-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Bruce\"))\n    :ARG1 (p2 / person\n              :name (n2 / name\n                        :op1 \"Oliver\"))\n    :ARG2 (s / succeed-01\n             :ARG1 (c / campaign-01)\n             :degree (m / more-than)))", "(ii / inform-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Bruce\"))\n    :ARG1 (p2 / person\n              :name (n2 / name\n                        :op1 \"Oliver\"))\n    :ARG2 (s / succeed-01\n             :ARG1 (c / campaign-01)\n             :degree (m / more-than)))", "(c / crowdfund-01\n   :ARG0 (t / they)\n   :ARG1 (m / monetary-quantity\n            :quant 6123\n            :unit (d / dollar)))", "(w / win-01\n   :ARG0 (t / they)\n   :ARG1 (p / person\n            :ARG0 (b / back-01\n                     :ARG1 t)\n            :quant (a2 / about\n                       :op1 200))\n   :time (s / so-far))"], "smus": ["The campaign has been more than successful.", "Bruce informs Oliver.", "Bruce informs Oliver that the campaign has been more than successful.", "Bruce informs Oliver that the campaign has been more than successful.", "They crowdfunded 6123 dollars.", "So far they have won about 200 backers."]}, {"instance_id": "samsum-454", "summary": "Euodia didn't know about TikTok application, so Domigo explained what it was.", "summary_trees": ["# ::snt Euodia didn't know about TikTok application, so Domigo explained what it was.\n(c / cause-01\n      :ARG0 (k / know-01\n            :polarity -\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Euodia\"))\n            :ARG1 (a / apply-02\n                  :ARG1 (p2 / product\n                        :name (n2 / name\n                              :op1 \"TikTok\"))))\n      :ARG1 (e / explain-01\n            :ARG0 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Domigo\"))\n            :ARG1 p2))"], "tree": ["(a / apply-02\n   :ARG1 (p2 / product\n             :name (n2 / name\n                       :op1 \"TikTok\")))", "(a / apply-02\n   :ARG1 (p2 / product\n             :name (n2 / name\n                       :op1 \"TikTok\")))", "(e / explain-01\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Domigo\"))\n   :ARG1 (p2 / product :name (n2 / name :op1 \"TikTok\")))", "(e / explain-01\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Domigo\"))\n   :ARG1 (p2 / product :name (n2 / name :op1 \"TikTok\")))", "(k / know-01\n   :ARG1 (a / apply-02\n            :ARG1 (p2 / product\n                      :name (n2 / name\n                                :op1 \"TikTok\"))))", "(k / know-01\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Euodia\"))\n   :ARG1 (a / apply-02\n            :ARG1 (p2 / product\n                      :name (n2 / name\n                                :op1 \"TikTok\"))))", "(k / know-01\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Euodia\"))\n   :ARG1 (a / apply-02\n            :ARG1 (p2 / product\n                      :name (n2 / name\n                                :op1 \"TikTok\"))))", "(c / cause-01\n   :ARG0 (k / know-01\n            :polarity -\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Euodia\"))\n            :ARG1 (a / apply-02\n                     :ARG1 (p2 / product\n                               :name (n2 / name\n                                         :op1 \"TikTok\"))))\n   :ARG1 (e / explain-01\n            :ARG0 (p3 / person\n                      :name (n3 / name\n                                :op1 \"Domigo\"))\n            :ARG1 p2))"], "smus": ["Application of TikTok", "Application of TikTok", "Domigo explained TikTok.", "Domigo explained TikTok.", "Know the application of TikTok.", "Euodia doesn't know about the application of TikTok.", "Euodia doesn't know about the application of TikTok.", "Domigo explained that Euodia didn't know about the application of TikTok."]}, {"instance_id": "samsum-455", "summary": "Shaldona sends mobile invitations to her wedding, as she has no time to give them in person.", "summary_trees": ["# ::snt Shaldona sends mobile invitations to her wedding, as she has no time to give them in person.\n(s / send-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Shaldona\"))\n      :ARG1 (ii / invite-01\n            :ARG2 (w / wed-01\n                  :ARG1 p)\n            :ARG1-of (m / mobile-02))\n      :ARG1-of (c / cause-01\n            :ARG0 (h / have-03\n                  :ARG0 p\n                  :ARG1 (t / time\n                        :polarity -\n                        :purpose (g / give-01\n                              :ARG0 p\n                              :ARG1 ii\n                              :manner (p2 / person))))))"], "tree": ["(h / have-03\n   :ARG0 (p / person :name (n / name :op1 \"Shaldona\"))\n   :ARG1 (t / time\n            :polarity -\n            :purpose (g / give-01\n                        :ARG0 p\n                        :ARG1 (ii / invite-01)\n                        :manner (p2 / person))))", "(h / have-03\n   :ARG0 (p / person :name (n / name :op1 \"Shaldona\"))\n   :ARG1 (t / time\n            :polarity -\n            :purpose (g / give-01\n                        :ARG0 p\n                        :ARG1 (ii / invite-01)\n                        :manner (p2 / person))))", "(c / cause-01\n   :ARG0 (h / have-03\n            :ARG0 (p / person :name (n / name :op1 \"Shaldona\"))\n            :ARG1 (t / time\n                     :polarity -\n                     :purpose (g / give-01\n                                 :ARG0 p\n                                 :ARG1 (ii / invite-01)\n                                 :manner (p2 / person)))))", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Shaldona\"))\n   :ARG1 (ii / invite-01\n             :ARG2 (w / wed-01\n                      :ARG1 p)\n             :ARG1 (m / mobile-02)))", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Shaldona\"))\n   :ARG1 (ii / invite-01\n             :ARG2 (w / wed-01\n                      :ARG1 p)\n             :ARG1 (m / mobile-02))\n   :ARG1 (c / cause-01\n            :ARG0 (h / have-03\n                     :ARG0 p\n                     :ARG1 (t / time\n                              :polarity -\n                              :purpose (g / give-01\n                                          :ARG0 p\n                                          :ARG1 ii\n                                          :manner (p2 / person))))))"], "smus": ["Shaldona has no time to give invites as a person.", "Shaldona has no time to give invites as a person.", "Because Shaldona has no time to give invitations as a person.", "Shaldona sends mobile invites for her wedding.", "Shaldona sends mobile wedding invites because she has no time to give them as a person."]}, {"instance_id": "samsum-456", "summary": "Drade told her brother in the group chatting room that what he had said was wrong. Marenda thinks that he got out of it because he became angry, as he is short-tempered. Drade refuses to apologise and invite him again, since she feels that she is not the one to be blamed but him.", "summary_trees": ["# ::snt Drade told her brother in the group chatting room that what he had said was wrong.\n(t / tell-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Drade\"))\n      :ARG1 (w / wrong-04\n            :ARG1 (t2 / thing\n                  :ARG1-of (s / say-01\n                        :ARG0 (p2 / person\n                              :ARG0-of (h / have-rel-role-91\n                                    :ARG1 p\n                                    :ARG2 (b / brother))))))\n      :ARG2 p2\n      :location (r / room\n            :location-of (c / chat-01\n                  :ARG0 (g / group))))", "# ::snt Marenda thinks that he got out of it because he became angry, as he is short-tempered.\n(t / think-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Marenda\"))\n      :ARG1 (c / cause-01\n            :ARG0 (b / become-01\n                  :ARG1 (h / he)\n                  :ARG2 (a / anger-01\n                        :ARG1 h))\n            :ARG1 (g / get-05\n                  :ARG1 h\n                  :ARG2 (o / out-06\n                        :ARG1 h\n                        :ARG2 (ii / it)))\n            :ARG1-of (c2 / cause-01\n                  :ARG0 (t2 / temper-01\n                        :ARG1 h\n                        :ARG1-of (s / short-07)))))", "# ::snt Drade refuses to apologise and invite him again, since she feels that she is not the one to be blamed but him.\n(r / refuse-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Drade\"))\n      :ARG1 (a / and\n            :op1 (a2 / apologize-01\n                  :ARG0 p\n                  :ARG2 (h / he))\n            :op2 (ii / invite-01\n                  :ARG0 p\n                  :ARG1 h\n                  :mod (a3 / again)))\n      :ARG1-of (c / cause-01\n            :ARG0 (f / feel-02\n                  :ARG0 p\n                  :ARG1 (b / blame-01\n                        :polarity -\n                        :ARG1 p\n                        :ARG2-of (e / except-01\n                              :ARG1 h)))))"], "tree": ["(w / wrong-04\n   :ARG1 (t2 / thing\n             :ARG1 (s / say-01\n                      :ARG0 (p2 / person\n                                :ARG0 (h / have-rel-role-91\n                                         :ARG1 (p / person :name (n / name :op1 \"Drade\"))\n                                         :ARG2 (b / brother))))))", "(w / wrong-04\n   :ARG1 (t2 / thing\n             :ARG1 (s / say-01\n                      :ARG0 (p2 / person\n                                :ARG0 (h / have-rel-role-91\n                                         :ARG1 (p / person :name (n / name :op1 \"Drade\"))\n                                         :ARG2 (b / brother))))))", "(t2 / temper-01\n    :ARG1 (h / he)\n    :ARG1 (s / short-07))", "(o / out-06\n   :ARG1 (h / he)\n   :ARG2 (ii / it))", "(c2 / cause-01\n    :ARG0 (t2 / temper-01\n              :ARG1 (h / he)\n              :ARG1 (s / short-07)))", "(b / become-01\n   :ARG1 (h / he)\n   :ARG2 (a / anger-01\n            :ARG1 h))", "(g / get-05\n   :ARG1 (h / he)\n   :ARG2 (o / out-06\n            :ARG1 h\n            :ARG2 (ii / it)))", "(c / cause-01\n   :ARG0 (b / become-01\n            :ARG1 (h / he)\n            :ARG2 (a / anger-01\n                     :ARG1 h))\n   :ARG1 (g / get-05\n            :ARG1 h\n            :ARG2 (o / out-06\n                     :ARG1 h\n                     :ARG2 (ii / it)))\n   :ARG1 (c2 / cause-01\n             :ARG0 (t2 / temper-01\n                       :ARG1 h\n                       :ARG1 (s / short-07))))", "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Marenda\"))\n   :ARG1 (c / cause-01\n            :ARG0 (b / become-01\n                     :ARG1 (h / he)\n                     :ARG2 (a / anger-01\n                              :ARG1 h))\n            :ARG1 (g / get-05\n                     :ARG1 h\n                     :ARG2 (o / out-06\n                              :ARG1 h\n                              :ARG2 (ii / it)))\n            :ARG1 (c2 / cause-01\n                      :ARG0 (t2 / temper-01\n                                :ARG1 h\n                                :ARG1 (s / short-07)))))", "(r / refuse-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Drade\"))\n   :ARG1 (a2 / apologize-01\n             :ARG0 p\n             :ARG2 (h / he)))", "(r / refuse-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Drade\"))\n   :ARG1 (ii / invite-01\n             :ARG0 p\n             :ARG1 (h / he)\n             :mod (a3 / again)))", "(r / refuse-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Drade\"))\n   :ARG1 (a / and\n            :op1 (a2 / apologize-01\n                     :ARG0 p\n                     :ARG2 (h / he))\n            :op2 (ii / invite-01\n                     :ARG0 p\n                     :ARG1 h\n                     :mod (a3 / again))))", "(r / refuse-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Drade\"))\n   :ARG1 (a2 / apologize-01\n             :ARG0 p\n             :ARG2 (h / he))\n   :ARG1 (c / cause-01\n            :ARG0 (f / feel-02\n                     :ARG0 p\n                     :ARG1 (b / blame-01\n                              :polarity -\n                              :ARG1 p\n                              :ARG2 (e / except-01\n                                       :ARG1 h)))))"], "smus": ["Drade's brother's words were wrong.", "Drade's brother's words were wrong.", "He was tempered short.", "He's out of it.", "Because he was short tempered.", "He became angry.", "He got out of it.", "He became angry and got out of it, because he was short tempered.", "Margenda thinks that because he became angry he got out of it because he was short tempered.", "Drade refuses to apologize to him.", "Drade refuses to invite him again.", "Drade refuses to apologize to him and invite him again.", "Drade refuses to apologize to him because he feels not blamed except for him."]}, {"instance_id": "samsum-457", "summary": "Several cafes were destroyed when the river flooded. The cost of repair is exorbitant.", "summary_trees": ["# ::snt Several cafes were destroyed when the river flooded.\n(d / destroy-01\n      :ARG1 (c / cafe\n            :quant (s / several))\n      :time (f / flood-01\n            :ARG1 (r / river)))", "# ::snt The cost of repair is exorbitant.\n(e / exorbitance\n      :domain (m / monetary-quantity\n            :ARG2-of (c / cost-01\n                  :ARG1 (r / repair-01))))"], "tree": ["(d / destroy-01\n   :ARG1 (c / cafe\n            :quant (s / several)))", "(d / destroy-01\n   :ARG1 (c / cafe\n            :quant (s / several))\n   :time (f / flood-01\n            :ARG1 (r / river)))", "(d / destroy-01\n   :ARG1 (c / cafe\n            :quant (s / several))\n   :time (f / flood-01\n            :ARG1 (r / river)))", "(e / exorbitance\n   :domain (m / monetary-quantity\n              :ARG2-of (c / cost-01\n                          :ARG1 (r / repair-01))))"], "smus": ["Several cafes were destroyed.", "Several cafes were destroyed when the river flooded.", "Several cafes were destroyed when the river flooded.", "The cost of repair is exorbitant."]}, {"instance_id": "samsum-458", "summary": "Maya will buy 5 packs of earplugs for Randolph at the pharmacy.", "summary_trees": ["# ::snt Maya will buy 5 packs of earplugs for Randolph at the pharmacy.\n(b / buy-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Maya\"))\n      :ARG1 (p2 / pack\n            :quant 5\n            :consist-of (e / earplug))\n      :ARG4 (p3 / person\n            :name (n2 / name\n                  :op1 \"Randolph\"))\n      :location (p4 / pharmacy))"], "tree": ["(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Maya\")))", "(b / buy-01\n   :ARG1 (p2 / pack\n             :quant 5\n             :consist-of (e / earplug)))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Maya\"))\n   :ARG1 (p2 / pack\n             :quant 5\n             :consist-of (e / earplug)))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Maya\"))\n   :ARG1 (p2 / pack\n             :quant 5\n             :consist-of (e / earplug))\n   :ARG4 (p3 / person\n             :name (n2 / name\n                       :op1 \"Randolph\"))\n   :location (p4 / pharmacy))"], "smus": ["Maya will buy.", "Buy 5 packs of earplugs.", "Maya will buy 5 packs of earplugs.", "Maya would buy Randolph 5 packs of earplugs at the pharmacy."]}, {"instance_id": "samsum-459", "summary": "Rob is doing shopping at the grocery store. Ann ordered him to buy a cucumber, some tomatoes, bananas and apples.", "summary_trees": ["# ::snt Rob is doing shopping at the grocery store.\n(s / shop-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Rob\"))\n      :ARG2 (s2 / store\n            :mod (g / grocery)))", "# ::snt Ann ordered him to buy a cucumber, some tomatoes, bananas and apples.\n(o / order-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Ann\"))\n      :ARG1 (h / he)\n      :ARG2 (b / buy-01\n            :ARG0 h\n            :ARG1 (a / and\n                  :op1 (c / cucumber)\n                  :op2 (t / tomato\n                        :quant (s / some))\n                  :op3 (b2 / banana)\n                  :op4 (a2 / apple))))"], "tree": ["(s / shop-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rob\")))", "(s / shop-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rob\"))\n   :ARG2 (s2 / store\n             :mod (g / grocery)))", "(b / buy-01\n   :ARG1 (t / tomato\n            :quant (s / some)))", "(o / order-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ann\")))", "(o / order-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ann\"))\n   :ARG1 (h / he))", "(o / order-01\n   :ARG1 (h / he)\n   :ARG2 (b / buy-01\n            :ARG0 h\n            :ARG1 (c / cucumber)))", "(o / order-01\n   :ARG1 (h / he)\n   :ARG2 (b / buy-01\n            :ARG0 h\n            :ARG1 (b2 / banana)))", "(o / order-01\n   :ARG1 (h / he)\n   :ARG2 (b / buy-01\n            :ARG0 h\n            :ARG1 (a2 / apple)))", "(o / order-01\n   :ARG1 (h / he)\n   :ARG2 (b / buy-01\n            :ARG0 h\n            :ARG1 (t / tomato\n                     :quant (s / some))))", "(b / buy-01\n   :ARG1 (a / and\n            :op1 (c / cucumber)\n            :op2 (t / tomato\n                    :quant (s / some))\n            :op3 (b2 / banana)\n            :op4 (a2 / apple)))", "(o / order-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ann\"))\n   :ARG1 (h / he)\n   :ARG2 (b / buy-01\n            :ARG0 h\n            :ARG1 (c / cucumber)))", "(o / order-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ann\"))\n   :ARG1 (h / he)\n   :ARG2 (b / buy-01\n            :ARG0 h\n            :ARG1 (b2 / banana)))", "(o / order-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ann\"))\n   :ARG1 (h / he)\n   :ARG2 (b / buy-01\n            :ARG0 h\n            :ARG1 (a2 / apple)))", "(o / order-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ann\"))\n   :ARG1 (h / he)\n   :ARG2 (b / buy-01\n            :ARG0 h\n            :ARG1 (t / tomato\n                     :quant (s / some))))", "(o / order-01\n   :ARG1 (h / he)\n   :ARG2 (b / buy-01\n            :ARG0 h\n            :ARG1 (a / and\n                     :op1 (c / cucumber)\n                     :op2 (t / tomato\n                             :quant (s / some))\n                     :op3 (b2 / banana)\n                     :op4 (a2 / apple))))", "(o / order-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ann\"))\n   :ARG1 (h / he)\n   :ARG2 (b / buy-01\n            :ARG0 h\n            :ARG1 (a / and\n                     :op1 (c / cucumber)\n                     :op2 (t / tomato\n                             :quant (s / some))\n                     :op3 (b2 / banana)\n                     :op4 (a2 / apple))))"], "smus": ["Rob is doing the shopping.", "Rob is shopping at a grocery store.", "buy some tomatoes.", "Ann ordered.", "Ann ordered him.", "He ordered to buy a cucumber.", "He ordered to buy bananas.", "He ordered to buy apples.", "He ordered to buy some tomatoes.", "Buy cucumber, some tomatoes, bananas and apples.", "Ann ordered him to buy a cucumber.", "Ann ordered him to buy bananas.", "Ann ordered him to buy apples.", "Ann ordered him to buy some tomatoes.", "He ordered to buy cucumbers, some tomatoes, bananas and apples.", "Ann ordered him to buy a cucumber, some tomatoes, bananas and apples."]}, {"instance_id": "samsum-460", "summary": "Corbin reported to the department in charge of school violence that his friend has been beaten.", "summary_trees": ["# ::snt Corbin reported to the department in charge of school violence that his friend has been beaten.\n(r / report-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Corbin\"))\n      :ARG1 (b / beat-01\n            :ARG1 (p2 / person\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 p\n                        :ARG2 (f / friend))))\n      :ARG2 (d / department\n            :ARG1-of (c / charge-05\n                  :ARG2 (v / violence\n                        :location (s / school)))))"], "tree": ["(c / charge-05\n   :ARG2 (v / violence\n            :location (s / school)))", "(b / beat-01\n   :ARG1 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 (p / person :name (n / name :op1 \"Corbin\"))\n                      :ARG2 (f / friend))))", "(b / beat-01\n   :ARG1 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 (p / person :name (n / name :op1 \"Corbin\"))\n                      :ARG2 (f / friend))))", "(r / report-01\n   :ARG1 (b / beat-01\n            :ARG1 (p2 / person\n                      :ARG0 (h / have-rel-role-91\n                               :ARG1 (p / person :name (n / name :op1 \"Corbin\"))\n                               :ARG2 (f / friend)))))", "(r / report-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Corbin\"))\n   :ARG1 (b / beat-01\n            :ARG1 (p2 / person\n                      :ARG0 (h / have-rel-role-91\n                               :ARG1 p\n                               :ARG2 (f / friend)))))", "(r / report-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Corbin\"))\n   :ARG1 (b / beat-01\n            :ARG1 (p2 / person\n                      :ARG0 (h / have-rel-role-91\n                               :ARG1 p\n                               :ARG2 (f / friend))))\n   :ARG2 (d / department\n            :ARG1 (c / charge-05\n                     :ARG2 (v / violence\n                              :location (s / school)))))"], "smus": ["The charge is for school violence.", "Corbin's friend gets beaten.", "Corbin's friend gets beaten.", "Corbin's friend is reported to have been beaten.", "Corbin reported that his friend was beaten.", "Corbin reported his friend was beaten to the school violence charge department."]}, {"instance_id": "samsum-461", "summary": "Hannah needs Betty's number but Amanda doesn't have it. She needs to contact Larry.", "summary_trees": ["# ::snt Hannah needs Betty's number but Amanda doesn't have it.\n(c / contrast-01\n      :ARG1 (n / need-01\n            :ARG0 (p / person\n                  :name (n2 / name\n                        :op1 \"Hannah\"))\n            :ARG1 (n3 / number\n                  :poss (p2 / person\n                        :name (n4 / name\n                              :op1 \"Betty\"))))\n      :ARG2 (h / have-03\n            :polarity -\n            :ARG0 (p3 / person\n                  :name (n5 / name\n                        :op1 \"Amanda\"))\n            :ARG1 n3))", "# ::snt She needs to contact Larry.\n(n / need-01\n      :ARG0 (s / she)\n      :ARG1 (c / contact-01\n            :ARG0 s\n            :ARG1 (p / person\n                  :name (n2 / name\n                        :op1 \"Larry\"))))"], "tree": ["(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Hannah\")))", "(h / have-03\n   :polarity -\n   :ARG0 (p3 / person\n             :name (n5 / name\n                       :op1 \"Amanda\"))\n   :ARG1 (n3 / number))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Hannah\"))\n   :ARG1 (n3 / number\n             :poss (p2 / person\n                       :name (n4 / name\n                                 :op1 \"Betty\"))))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Hannah\"))\n   :ARG1 (n3 / number\n             :poss (p2 / person\n                       :name (n4 / name\n                                 :op1 \"Betty\"))))", "(c / contrast-01\n   :ARG1 (n / need-01\n            :ARG0 (p / person\n                     :name (n2 / name\n                               :op1 \"Hannah\"))\n            :ARG1 (n3 / number\n                      :poss (p2 / person\n                                :name (n4 / name\n                                          :op1 \"Betty\"))))\n   :ARG2 (h / have-03\n            :polarity -\n            :ARG0 (p3 / person\n                      :name (n5 / name\n                                :op1 \"Amanda\"))\n            :ARG1 n3))", "(c / contrast-01\n   :ARG1 (n / need-01\n            :ARG0 (p / person\n                     :name (n2 / name\n                               :op1 \"Hannah\"))\n            :ARG1 (n3 / number\n                      :poss (p2 / person\n                                :name (n4 / name\n                                          :op1 \"Betty\"))))\n   :ARG2 (h / have-03\n            :polarity -\n            :ARG0 (p3 / person\n                      :name (n5 / name\n                                :op1 \"Amanda\"))\n            :ARG1 n3))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Hannah\")))", "(c / contact-01\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Larry\")))", "(n / need-01\n   :ARG1 (c / contact-01\n            :ARG0 (s / she)\n            :ARG1 (p / person\n                     :name (n2 / name\n                               :op1 \"Larry\"))))", "(n / need-01\n   :ARG0 (s / she)\n   :ARG1 (c / contact-01\n            :ARG0 s\n            :ARG1 (p / person\n                     :name (n2 / name\n                               :op1 \"Larry\"))))", "(n / need-01\n   :ARG0 (s / she)\n   :ARG1 (c / contact-01\n            :ARG0 s\n            :ARG1 (p / person\n                     :name (n2 / name\n                               :op1 \"Larry\"))))"], "smus": ["Hannah needs.", "Amanda doesn't have a number.", "Hannah needs Betty's number.", "Hannah needs Betty's number.", "Hannah needs Betty's number, Amanda doesn't.", "Hannah needs Betty's number, Amanda doesn't.", "Hannah needs.", "Contact Larry", "She needs to contact Larry.", "She needs to contact Larry.", "She needs to contact Larry."]}, {"instance_id": "samsum-462", "summary": "Ashleigh got the job.", "summary_trees": ["# ::snt Ashleigh got the job.\n(g / get-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Ashleigh\"))\n      :ARG1 (j / job))"], "tree": ["(g / get-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ashleigh\"))\n   :ARG1 (j / job))", "(g / get-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ashleigh\"))\n   :ARG1 (j / job))"], "smus": ["Ashleigh got a job.", "Ashleigh got a job."]}, {"instance_id": "samsum-463", "summary": "Louis finishes the conversation with Fabian because his mother is calling.", "summary_trees": ["# ::snt Louis finishes the conversation with Fabian because his mother is calling.\n(f / finish-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Louis\"))\n      :ARG1 (c / converse-01\n            :ARG0 p\n            :ARG2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Fabian\")))\n      :ARG1-of (c2 / cause-01\n            :ARG0 (c3 / call-02\n                  :ARG0 (p3 / person\n                        :ARG0-of (h / have-rel-role-91\n                              :ARG1 p\n                              :ARG2 (m / mother)))\n                  :ARG1 p)))"], "tree": ["(h / have-rel-role-91\n   :ARG1 (p / person :name (n / name :op1 \"Louis\"))\n   :ARG2 (m / mother))", "(f / finish-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Louis\")))", "(c / converse-01\n   :ARG0 (p / person :name (n / name :op1 \"Louis\"))\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Fabian\")))", "(c3 / call-02\n    :ARG0 (p3 / person\n              :ARG0 (h / have-rel-role-91\n                       :ARG1 (p / person :name (n / name :op1 \"Louis\"))\n                       :ARG2 (m / mother))))", "(c3 / call-02\n    :ARG0 (p3 / person\n              :ARG0 (h / have-rel-role-91\n                       :ARG1 (p / person :name (n / name :op1 \"Louis\"))\n                       :ARG2 (m / mother)))\n    :ARG1 p)", "(c3 / call-02\n    :ARG0 (p3 / person\n              :ARG0 (h / have-rel-role-91\n                       :ARG1 (p / person :name (n / name :op1 \"Louis\"))\n                       :ARG2 (m / mother)))\n    :ARG1 p)", "(f / finish-01\n   :ARG1 (c / converse-01\n            :ARG0 (p / person :name (n / name :op1 \"Louis\"))\n            :ARG2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Fabian\"))))", "(c2 / cause-01\n    :ARG0 (c3 / call-02\n              :ARG0 (p3 / person\n                        :ARG0 (h / have-rel-role-91\n                                 :ARG1 (p / person :name (n / name :op1 \"Louis\"))\n                                 :ARG2 (m / mother)))\n              :ARG1 p))", "(f / finish-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Louis\"))\n   :ARG1 (c / converse-01\n            :ARG0 p\n            :ARG2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Fabian\"))))", "(f / finish-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Louis\"))\n   :ARG1 (c / converse-01\n            :ARG0 p\n            :ARG2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Fabian\")))\n   :ARG1 (c2 / cause-01\n             :ARG0 (c3 / call-02\n                       :ARG0 (p3 / person\n                                 :ARG0 (h / have-rel-role-91\n                                          :ARG1 p\n                                          :ARG2 (m / mother)))\n                       :ARG1 p)))"], "smus": ["Louis' mother", "Louis finishes.", "Louis and Fabian had a conversation.", "Louis' mother was calling.", "Louis' mother was calling her.", "Louis' mother was calling her.", "The conversation between Louis and Fabian finishes.", "Because Louis' mother was calling her.", "Louis finishes the conversation with Fabian.", "Louis finishes the conversation with Fabian because his mother is calling him."]}, {"instance_id": "samsum-464", "summary": "Ken is trying to play a prank on Greg.", "summary_trees": ["# ::snt Ken is trying to play a prank on Greg.\n(t / try-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Ken\"))\n      :ARG1 (p2 / play-01\n            :ARG0 p\n            :ARG1 (p3 / prank-01\n                  :ARG0 p\n                  :ARG1 (p4 / person\n                        :name (n2 / name\n                              :op1 \"Greg\")))))"], "tree": ["(p3 / prank-01\n    :ARG0 (p / person :name (n / name :op1 \"Ken\"))\n    :ARG1 (p4 / person\n              :name (n2 / name\n                        :op1 \"Greg\")))", "(p2 / play-01\n    :ARG0 (p / person :name (n / name :op1 \"Ken\"))\n    :ARG1 (p3 / prank-01\n              :ARG0 p\n              :ARG1 (p4 / person\n                        :name (n2 / name\n                                  :op1 \"Greg\"))))", "(p2 / play-01\n    :ARG0 (p / person :name (n / name :op1 \"Ken\"))\n    :ARG1 (p3 / prank-01\n              :ARG0 p\n              :ARG1 (p4 / person\n                        :name (n2 / name\n                                  :op1 \"Greg\"))))", "(t / try-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ken\"))\n   :ARG1 (p2 / play-01\n             :ARG0 p\n             :ARG1 (p3 / prank-01\n                       :ARG0 p\n                       :ARG1 (p4 / person\n                                 :name (n2 / name\n                                           :op1 \"Greg\")))))", "(t / try-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ken\"))\n   :ARG1 (p2 / play-01\n             :ARG0 p\n             :ARG1 (p3 / prank-01\n                       :ARG0 p\n                       :ARG1 (p4 / person\n                                 :name (n2 / name\n                                           :op1 \"Greg\")))))"], "smus": ["Ken pranks Greg.", "Ken is going to play a prank on Greg.", "Ken is going to play a prank on Greg.", "Ken is trying to play a prank on Greg.", "Ken is trying to play a prank on Greg."]}, {"instance_id": "samsum-465", "summary": "Derek will be at Craig's in 20 minutes to help him with his malfunctioning computer.", "summary_trees": ["# ::snt Derek will be at Craig's in 20 minutes to help him with his malfunctioning computer.\n(b / be-located-at-91\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Derek\"))\n      :ARG2 (p2 / person\n            :name (n2 / name\n                  :op1 \"Craig\"))\n      :time (a / after\n            :op1 (n3 / now)\n            :quant (t / temporal-quantity\n                  :quant 20\n                  :unit (m / minute)))\n      :purpose (h / help-01\n            :ARG0 p\n            :ARG1 (c / computer\n                  :ARG1-of (m2 / malfunction-01)\n                  :poss p2)\n            :ARG2 p2))"], "tree": ["(h / help-01\n   :ARG0 (p / person :name (n / name :op1 \"Derek\"))\n   :ARG1 (c / computer\n            :ARG1 (m2 / malfunction-01)\n            :poss (p2 / person :name (n2 / name :op1 \"Craig\")))\n   :ARG2 p2)", "(b / be-located-at-91\n   :time (a / after\n            :op1 (n3 / now)\n            :quant (t / temporal-quantity\n                      :quant 20\n                      :unit (m / minute)))\n   :purpose (h / help-01))", "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Derek\"))\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Craig\"))\n   :time (a / after\n            :op1 (n3 / now)\n            :quant (t / temporal-quantity\n                      :quant 20\n                      :unit (m / minute)))\n   :purpose (h / help-01\n               :ARG0 p\n               :ARG1 (c / computer\n                        :ARG1 (m2 / malfunction-01)\n                        :poss p2)\n               :ARG2 p2))"], "smus": ["Derek will help Craig's malfunctioning computer.", "20 minutes to go to help.", "Derek will be with Craig in 20 minutes to help him with his malfunctioning computer."]}, {"instance_id": "samsum-466", "summary": "Lucy is panicking because her daughter is 15 now and she is not sure she is prepared as a mother.", "summary_trees": ["# ::snt Lucy is panicking because her daughter is 15 now and she is not sure she is prepared as a mother.\n(p / panic-01\n      :ARG1 (p2 / person\n            :name (n / name\n                  :op1 \"Lucy\"))\n      :ARG1-of (c / cause-01\n            :ARG0 (a / and\n                  :op1 (a2 / age-01\n                        :ARG1 (p3 / person\n                              :ARG0-of (h / have-rel-role-91\n                                    :ARG1 p2\n                                    :ARG2 (d / daughter)))\n                        :ARG2 (t / temporal-quantity\n                              :quant 15\n                              :unit (y / year))\n                        :time (n2 / now))\n                  :op2 (s / sure-02\n                        :polarity -\n                        :ARG0 p2\n                        :ARG1 (p4 / prepare-02\n                              :ARG1 p2\n                              :ARG2 (h2 / have-rel-role-91\n                                    :ARG0 p2\n                                    :ARG2 (m / mother)))))))"], "tree": ["(h2 / have-rel-role-91\n    :ARG0 (p2 / person :name (n / name :op1 \"Lucy\"))\n    :ARG2 (m / mother))", "(h / have-rel-role-91\n   :ARG1 (p2 / person :name (n / name :op1 \"Lucy\"))\n   :ARG2 (d / daughter))", "(s / sure-02\n   :polarity -\n   :ARG0 (p2 / person :name (n / name :op1 \"Lucy\"))\n   :ARG1 (p4 / prepare-02\n             :ARG1 p2\n             :ARG2 (h2 / have-rel-role-91\n                       :ARG0 p2\n                       :ARG2 (m / mother))))", "(s / sure-02\n   :polarity -\n   :ARG0 (p2 / person :name (n / name :op1 \"Lucy\"))\n   :ARG1 (p4 / prepare-02\n             :ARG1 p2\n             :ARG2 (h2 / have-rel-role-91\n                       :ARG0 p2\n                       :ARG2 (m / mother))))", "(a2 / age-01\n    :ARG1 (p3 / person\n              :ARG0 (h / have-rel-role-91\n                       :ARG1 (p2 / person :name (n / name :op1 \"Lucy\"))\n                       :ARG2 (d / daughter)))\n    :ARG2 (t / temporal-quantity\n             :quant 15\n             :unit (y / year)))", "(a2 / age-01\n    :ARG1 (p3 / person\n              :ARG0 (h / have-rel-role-91\n                       :ARG1 (p2 / person :name (n / name :op1 \"Lucy\"))\n                       :ARG2 (d / daughter)))\n    :ARG2 (t / temporal-quantity\n             :quant 15\n             :unit (y / year))\n    :time (n2 / now))", "(c / cause-01\n   :ARG0 (a2 / age-01\n             :ARG1 (p3 / person\n                       :ARG0 (h / have-rel-role-91\n                                :ARG1 (p2 / person :name (n / name :op1 \"Lucy\"))\n                                :ARG2 (d / daughter)))\n             :ARG2 (t / temporal-quantity\n                      :quant 15\n                      :unit (y / year))\n             :time (n2 / now)))", "(p / panic-01\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Lucy\"))\n   :ARG1 (c / cause-01\n            :ARG0 (s / sure-02\n                     :polarity -\n                     :ARG0 p2\n                     :ARG1 (p4 / prepare-02\n                               :ARG1 p2\n                               :ARG2 (h2 / have-rel-role-91\n                                         :ARG0 p2\n                                         :ARG2 (m / mother))))))", "(p / panic-01\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Lucy\"))\n   :ARG1 (c / cause-01\n            :ARG0 (a2 / age-01\n                      :ARG1 (p3 / person\n                                :ARG0 (h / have-rel-role-91\n                                         :ARG1 p2\n                                         :ARG2 (d / daughter)))\n                      :ARG2 (t / temporal-quantity\n                               :quant 15\n                               :unit (y / year))\n                      :time (n2 / now))))", "(c / cause-01\n   :ARG0 (a / and\n            :op1 (a2 / age-01\n                     :ARG1 (p3 / person\n                               :ARG0 (h / have-rel-role-91\n                                        :ARG1 (p2 / person :name (n / name :op1 \"Lucy\"))\n                                        :ARG2 (d / daughter)))\n                     :ARG2 (t / temporal-quantity\n                              :quant 15\n                              :unit (y / year))\n                     :time (n2 / now))\n            :op2 (s / sure-02\n                    :polarity -\n                    :ARG0 p2\n                    :ARG1 (p4 / prepare-02\n                              :ARG1 p2\n                              :ARG2 (h2 / have-rel-role-91\n                                        :ARG0 p2\n                                        :ARG2 (m / mother))))))", "(p / panic-01\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Lucy\"))\n   :ARG1 (c / cause-01\n            :ARG0 (a / and\n                     :op1 (a2 / age-01\n                              :ARG1 (p3 / person\n                                        :ARG0 (h / have-rel-role-91\n                                                 :ARG1 p2\n                                                 :ARG2 (d / daughter)))\n                              :ARG2 (t / temporal-quantity\n                                       :quant 15\n                                       :unit (y / year))\n                              :time (n2 / now))\n                     :op2 (s / sure-02\n                             :polarity -\n                             :ARG0 p2\n                             :ARG1 (p4 / prepare-02\n                                       :ARG1 p2\n                                       :ARG2 (h2 / have-rel-role-91\n                                                 :ARG0 p2\n                                                 :ARG2 (m / mother)))))))"], "smus": ["Lucy is the mother.", "Lucy has a daughter.", "Lucy is not sure if she is prepared to be a mother.", "Lucy is not sure if she is prepared to be a mother.", "Lucy's daughter is 15 years old.", "Lucy's daughter is now 15 years old.", "Because Lucy's daughter is now 15 years old.", "Lucy was panicking because she was not sure she was prepared for motherhood.", "Lucy was panicking because her daughter is now 15 years old.", "Because Lucy's daughter is now 15 and not sure she is prepared to be a mother.", "Lucy was panicking because her daughter is now 15 and not sure she is prepared to be a mother."]}, {"instance_id": "samsum-467", "summary": "Marco will read Aldo's 12 page article that he spent 2 weeks writing.", "summary_trees": ["# ::snt Marco will read Aldo's 12 page article that he spent 2 weeks writing.\n(r / read-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Marco\"))\n      :ARG1 (a / article\n            :poss (p2 / person\n                  :name (n2 / name\n                        :op1 \"Aldo\"))\n            :ARG1-of (w / write-01\n                  :ARG0 p2\n                  :ARG3-of (s / spend-02\n                        :ARG0 p2\n                        :ARG1 (t / temporal-quantity\n                              :quant 2\n                              :unit (w2 / week))))\n            :mod (p3 / page\n                  :quant 12)))"], "tree": ["(r / read-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Marco\")))", "(s / spend-02\n   :ARG0 (p2 / person :name (n2 / name :op1 \"Aldo\"))\n   :ARG1 (t / temporal-quantity\n            :quant 2\n            :unit (w2 / week)))", "(r / read-01\n   :ARG1 (a / article\n            :poss (p2 / person\n                      :name (n2 / name\n                                :op1 \"Aldo\"))))", "(w / write-01\n   :ARG0 (p2 / person :name (n2 / name :op1 \"Aldo\"))\n   :ARG3 (s / spend-02\n            :ARG0 p2\n            :ARG1 (t / temporal-quantity\n                     :quant 2\n                     :unit (w2 / week))))", "(r / read-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Marco\"))\n   :ARG1 (a / article\n            :poss (p2 / person\n                      :name (n2 / name\n                                :op1 \"Aldo\"))))", "(r / read-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Marco\"))\n   :ARG1 (a / article\n            :poss (p2 / person\n                      :name (n2 / name\n                                :op1 \"Aldo\"))))"], "smus": ["Marco, read.", "Aldo spent two weeks.", "Read Aldo's article:", "Aldo wrote in a write-up that he spent two weeks.", "Marco read Aldo's article.", "Marco read Aldo's article."]}, {"instance_id": "samsum-468", "summary": "Kristian and Tabora are playing a game about what they like best.", "summary_trees": ["# ::snt Kristian and Tabora are playing a game about what they like best.\n(p / play-01\n      :ARG0 (a / and\n            :op1 (p2 / person\n                  :name (n / name\n                        :op1 \"Kristian\"))\n            :op2 (p3 / person\n                  :name (n2 / name\n                        :op1 \"Tabora\")))\n      :ARG1 (g / game\n            :topic (t / thing\n                  :ARG1-of (l / like-01\n                        :ARG0 a\n                        :ARG2-of (h / have-degree-91\n                              :ARG1 t\n                              :ARG3 (m / most))))))"], "tree": ["(h / have-degree-91\n   :ARG1 (t / thing)\n   :ARG3 (m / most))", "(p / play-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Kristian\")))", "(p / play-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"Tabora\")))", "(l / like-01\n   :ARG0 (a / and)\n   :ARG2 (h / have-degree-91\n            :ARG1 (t / thing)\n            :ARG3 (m / most)))", "(p / play-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Kristian\"))\n   :ARG1 (g / game\n            :topic (t / thing)))", "(p / play-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Kristian\"))\n   :ARG1 (g / game\n            :topic (t / thing)))", "(p / play-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"Tabora\"))\n   :ARG1 (g / game\n            :topic (t / thing))\n   :ARG1 g)", "(p / play-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"Tabora\"))\n   :ARG1 (g / game\n            :topic (t / thing))\n   :ARG1 g)", "(p / play-01\n   :ARG0 (a / and\n            :op1 (p2 / person\n                     :name (n / name\n                              :op1 \"Kristian\"))\n            :op2 (p3 / person\n                     :name (n2 / name\n                               :op1 \"Tabora\"))))", "(p / play-01\n   :ARG0 (a / and\n            :op1 (p2 / person\n                     :name (n / name\n                              :op1 \"Kristian\"))\n            :op2 (p3 / person\n                     :name (n2 / name\n                               :op1 \"Tabora\")))\n   :ARG1 (g / game\n            :topic (t / thing)))", "(p / play-01\n   :ARG0 (a / and\n            :op1 (p2 / person\n                     :name (n / name\n                              :op1 \"Kristian\"))\n            :op2 (p3 / person\n                     :name (n2 / name\n                               :op1 \"Tabora\")))\n   :ARG1 (g / game\n            :topic (t / thing)))"], "smus": ["The most.", "Kristian is playing.", "Bora was playing.", "Which is what we like the most.", "Kristian is playing a game of things.", "Kristian is playing a game of things.", "Bora is playing a game of things.", "Bora is playing a game of things.", "Kristian and Talora are playing.", "Kristian and Talora are playing a game of things.", "Kristian and Talora are playing a game of things."]}, {"instance_id": "samsum-469", "summary": "Kristi needs new trainers. Leah has a link for a discount coupon at an online store.", "summary_trees": ["# ::snt Kristi needs new trainers.\n(n / need-01\n      :ARG0 (p / person\n            :name (n2 / name\n                  :op1 \"Kristi\"))\n      :ARG1 p\n      :ARG0-of (t / train-01)\n      :ARG1-of (n3 / new-01))", "# ::snt Leah has a link for a discount coupon at an online store.\n(h / have-03\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Leah\"))\n      :ARG1 (l / link\n            :purpose (c / coupon\n                  :mod (d / discount-01))\n            :location (s / store\n                  :mod (o / online))))"], "tree": ["(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Kristi\")))", "(n / need-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Kristi\"))\n   :ARG1 p\n   :ARG0 (t / train-01)\n   :ARG1 (n3 / new-01))", "(h / have-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Leah\"))\n   :ARG1 (l / link\n            :purpose (c / coupon\n                        :mod (d / discount-01))\n            :location (s / store\n                         :mod (o / online))))", "(h / have-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Leah\"))\n   :ARG1 (l / link\n            :purpose (c / coupon\n                        :mod (d / discount-01))\n            :location (s / store\n                         :mod (o / online))))"], "smus": ["Kristin needs.", "Kristin needs new trainings.", "Leah has a link to a discount coupon in an online store.", "Leah has a link to a discount coupon in an online store."]}, {"instance_id": "samsum-470", "summary": "Pete will be home for lunch in about 20 minutes.", "summary_trees": ["# ::snt Pete will be home for lunch in about 20 minutes.\n(b / be-located-at-91\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Pete\"))\n      :ARG2 (h / home)\n      :purpose (l / lunch)\n      :time (a / after\n            :op1 (n2 / now)\n            :quant (a2 / about\n                  :op1 (t / temporal-quantity\n                        :quant 20\n                        :unit (m / minute)))))"], "tree": ["(b / be-located-at-91\n   :purpose (l / lunch)\n   :time (a / after\n            :op1 (n2 / now)\n            :quant (a2 / about\n                       :op1 (t / temporal-quantity\n                               :quant 20\n                               :unit (m / minute)))))", "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Pete\"))\n   :ARG2 (h / home)\n   :purpose (l / lunch)\n   :time (a / after\n            :op1 (n2 / now)\n            :quant (a2 / about\n                       :op1 (t / temporal-quantity\n                               :quant 20\n                               :unit (m / minute)))))"], "smus": ["About 20 minutes away from lunch, there's a lunch.", "Pete will be home for lunch in about 20 minutes."]}, {"instance_id": "samsum-471", "summary": "Mark lied to Anne about his age. Mark is 40.", "summary_trees": ["# ::snt Mark lied to Anne about his age.\n(l / lie-08\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Mark\"))\n      :ARG1 (a / age-01\n            :ARG1 p)\n      :ARG2 (p2 / person\n            :name (n2 / name\n                  :op1 \"Anne\")))", "# ::snt Mark is 40.\n(a / age-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Mark\"))\n      :ARG2 (t / temporal-quantity\n            :quant 40\n            :unit (y / year)))"], "tree": ["(l / lie-08\n   :ARG1 (a / age-01\n            :ARG1 (p / person :name (n / name :op1 \"Mark\"))))", "(l / lie-08\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mark\")))", "(l / lie-08\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mark\"))\n   :ARG1 (a / age-01\n            :ARG1 p))", "(l / lie-08\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mark\"))\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Anne\")))", "(l / lie-08\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mark\"))\n   :ARG1 (a / age-01\n            :ARG1 p)\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Anne\")))", "(a / age-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Mark\"))\n   :ARG2 (t / temporal-quantity\n            :quant 40\n            :unit (y / year)))", "(a / age-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Mark\"))\n   :ARG2 (t / temporal-quantity\n            :quant 40\n            :unit (y / year)))"], "smus": ["Mark's age lied.", "Mark lied.", "Mark lied about his age.", "Mark lied to Anne.", "Mark lied about his age to Anne.", "Mark is 40.", "Mark is 40."]}, {"instance_id": "samsum-472", "summary": "Jessica bought a table, six chairs, a vase and a pile of clothes and the second hand shop downtown. She paid 70 euros for everything. ", "summary_trees": ["# ::snt Jessica bought a table, six chairs, a vase and a pile of clothes and the second hand shop downtown.\n(b / buy-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jessica\"))\n      :ARG1 (a / and\n            :op1 (t / table)\n            :op2 (c / chair\n                  :quant 6)\n            :op3 (v / vase)\n            :op4 (p2 / pile\n                  :consist-of (c2 / clothes)))\n      :ARG4 (s / shop\n            :mod (h / hand\n                  :ord (o / ordinal-entity\n                        :value 2))\n            :location (d / downtown)))", "# ::snt She paid 70 euros for everything.\n(p / pay-01\n      :ARG0 (s / she)\n      :ARG1 (m / monetary-quantity\n            :quant 70\n            :unit (e / euro))\n      :ARG3 (e2 / everything))"], "tree": ["(b / buy-01\n   :ARG1 (c / chair\n            :quant 6))", "(b / buy-01\n   :ARG1 (p2 / pile\n             :consist-of (c2 / clothes)))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jessica\")))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jessica\"))\n   :ARG1 (t / table))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jessica\"))\n   :ARG1 (v / vase))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jessica\"))\n   :ARG1 (c / chair\n            :quant 6))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jessica\"))\n   :ARG1 (p2 / pile\n             :consist-of (c2 / clothes)))", "(b / buy-01\n   :ARG1 (a / and\n            :op1 (t / table)\n            :op2 (c / chair\n                    :quant 6)\n            :op3 (v / vase)\n            :op4 (p2 / pile\n                     :consist-of (c2 / clothes))))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jessica\"))\n   :ARG1 (t / table)\n   :ARG4 (s / shop\n            :mod (h / hand\n                    :ord (o / ordinal-entity\n                            :value 2))\n            :location (d / downtown)))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jessica\"))\n   :ARG1 (v / vase)\n   :ARG4 (s / shop\n            :mod (h / hand\n                    :ord (o / ordinal-entity\n                            :value 2))\n            :location (d / downtown)))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jessica\"))\n   :ARG1 (c / chair\n            :quant 6)\n   :ARG4 (s / shop\n            :mod (h / hand\n                    :ord (o / ordinal-entity\n                            :value 2))\n            :location (d / downtown)))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jessica\"))\n   :ARG1 (a / and\n            :op1 (t / table)\n            :op2 (c / chair\n                    :quant 6)\n            :op3 (v / vase)\n            :op4 (p2 / pile\n                     :consist-of (c2 / clothes))))", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jessica\"))\n   :ARG1 (p2 / pile\n             :consist-of (c2 / clothes))\n   :ARG4 (s / shop\n            :mod (h / hand\n                    :ord (o / ordinal-entity\n                            :value 2))\n            :location (d / downtown))\n   :ARG4 s)", "(b / buy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jessica\"))\n   :ARG1 (a / and\n            :op1 (t / table)\n            :op2 (c / chair\n                    :quant 6)\n            :op3 (v / vase)\n            :op4 (p2 / pile\n                     :consist-of (c2 / clothes)))\n   :ARG4 (s / shop\n            :mod (h / hand\n                    :ord (o / ordinal-entity\n                            :value 2))\n            :location (d / downtown)))", "(p / pay-01\n   :ARG0 (s / she)\n   :ARG3 (e2 / everything))", "(p / pay-01\n   :ARG1 (m / monetary-quantity\n            :quant 70\n            :unit (e / euro)))", "(p / pay-01\n   :ARG0 (s / she)\n   :ARG1 (m / monetary-quantity\n            :quant 70\n            :unit (e / euro)))", "(p / pay-01\n   :ARG0 (s / she)\n   :ARG1 (m / monetary-quantity\n            :quant 70\n            :unit (e / euro))\n   :ARG3 (e2 / everything))", "(p / pay-01\n   :ARG0 (s / she)\n   :ARG1 (m / monetary-quantity\n            :quant 70\n            :unit (e / euro))\n   :ARG3 (e2 / everything))"], "smus": ["bought 6 chairs.", "bought a pile of clothes.", "Jessica bought.", "Jessica bought the table.", "Jessica bought the vase.", "Jessica bought six chairs.", "Jessica bought a pile of clothes.", "bought a table, 6 chairs, a vase and a pile of clothes.", "Jessica bought the table from a second hand shop in downtown.", "Jessica bought the vase from a second hand shop in downtown.", "Jessica bought six chairs from a second hand shop in downtown.", "Jessica bought a table, six chairs, a vase and a pile of clothes.", "Jessica bought a pile of clothes from a second hand shop in downtown.", "Jessica bought the table, six chairs, a vase and a pile of clothes from a second hand shop in downtown.", "She paid for everything.", "paid 70 euros.", "She paid 70 euros.", "She paid 70 euros for everything.", "She paid 70 euros for everything."]}, {"instance_id": "samsum-473", "summary": "Karen passed a driving exam.", "summary_trees": ["# ::snt Karen passed a driving exam.\n(p / pass-07\n      :ARG1 (p2 / person\n            :name (n / name\n                  :op1 \"Karen\"))\n      :ARG2 (e / exam\n            :topic (d / drive-01)))"], "tree": ["(p / pass-07\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Karen\"))\n   :ARG2 (e / exam\n            :topic (d / drive-01)))"], "smus": ["Karen passed the driving exam."]}, {"instance_id": "samsum-474", "summary": "Mike, Tom and Ben will go for a beer.", "summary_trees": ["# ::snt Mike, Tom and Ben will go for a beer.\n(g / go-02\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Mike\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Tom\"))\n            :op3 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Ben\")))\n      :ARG4 (b / beer))"], "tree": ["(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mike\")))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Tom\")))", "(g / go-02\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Ben\")))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mike\"))\n   :ARG4 (b / beer))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Tom\"))\n   :ARG4 (b / beer))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mike\"))\n   :ARG4 (b / beer))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Tom\"))\n   :ARG4 (b / beer))", "(g / go-02\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Ben\"))\n   :ARG4 (b / beer)\n   :ARG4 b)", "(g / go-02\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Ben\"))\n   :ARG4 (b / beer)\n   :ARG4 b)", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Mike\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Tom\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Ben\"))))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Mike\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Tom\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Ben\")))\n   :ARG4 (b / beer))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Mike\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Tom\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Ben\")))\n   :ARG4 (b / beer))"], "smus": ["Mike, go.", "Tom, go.", "Ben, go.", "Mike, go for a beer.", "Tom will go for a beer.", "Mike, go for a beer.", "Tom will go for a beer.", "Ben will go for a beer.", "Ben will go for a beer.", "Mike, Tom and Ben will go.", "Mike, Tom and Ben will go for a beer.", "Mike, Tom and Ben will go for a beer."]}, {"instance_id": "samsum-475", "summary": "Kate broke her arm and she's going to the hospital. She'd like to know whether her medical insurance covers hospital costs. Greg suggests her to call Linda or ask someone at the reception about it.", "summary_trees": ["# ::snt Kate broke her arm and she's going to the hospital.\n(a / and\n      :op1 (b / break-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Kate\")\n                  :part (a2 / arm))\n            :ARG1 a2)\n      :op2 (g / go-02\n            :ARG0 p\n            :ARG4 (h / hospital)))", "# ::snt She'd like to know whether her medical insurance covers hospital costs.\n(l / like-02\n      :ARG0 (s / she)\n      :ARG1 (k / know-01\n            :ARG0 s\n            :ARG1 (t / truth-value\n                  :polarity-of (c / cover-01\n                        :ARG0 (ii / insure-02\n                              :ARG1 (m / medicine)\n                              :ARG3 s)\n                        :ARG1 (c2 / cost-01\n                              :ARG1 (h / hospital))))))", "# ::snt Greg suggests her to call Linda or ask someone at the reception about it.\n(s / suggest-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Greg\"))\n      :ARG1 (o / or\n            :op1 (c / call-02\n                  :ARG0 (s2 / she)\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Linda\")))\n            :op2 (a / ask-01\n                  :ARG0 s2\n                  :ARG1 (ii / it)\n                  :ARG2 (s3 / someone\n                        :location (r / reception))))\n      :ARG2 s2)"], "tree": ["(g / go-02\n   :ARG0 (p / person :name (n / name :op1 \"Kate\")))\n   :ARG4 (h / hospital))", "(g / go-02\n   :ARG0 (p / person :name (n / name :op1 \"Kate\")))\n   :ARG4 (h / hospital))", "(b / break-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kate\")\n            :part (a2 / arm\n                      :ARG1-of b)))", "(b / break-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kate\")\n            :part (a2 / arm\n                      :ARG1-of b)))", "(ii / insure-02\n    :ARG1 (m / medicine)\n    :ARG3 (s / she))", "(k / know-01\n   :ARG1 (t / truth-value\n            :polarity (c / cover-01\n                         :ARG0 (ii / insure-02\n                                   :ARG1 (m / medicine)\n                                   :ARG3 (s / she))\n                         :ARG1 (c2 / cost-01\n                                   :ARG1 (h / hospital)))))", "(k / know-01\n   :ARG0 (s / she)\n   :ARG1 (t / truth-value\n            :polarity (c / cover-01\n                         :ARG0 (ii / insure-02\n                                   :ARG1 (m / medicine)\n                                   :ARG3 s)\n                         :ARG1 (c2 / cost-01\n                                   :ARG1 (h / hospital)))))", "(k / know-01\n   :ARG0 (s / she)\n   :ARG1 (t / truth-value\n            :polarity (c / cover-01\n                         :ARG0 (ii / insure-02\n                                   :ARG1 (m / medicine)\n                                   :ARG3 s)\n                         :ARG1 (c2 / cost-01\n                                   :ARG1 (h / hospital)))))", "(l / like-02\n   :ARG0 (s / she)\n   :ARG1 (k / know-01\n            :ARG0 s\n            :ARG1 (t / truth-value\n                     :polarity (c / cover-01\n                                  :ARG0 (ii / insure-02\n                                            :ARG1 (m / medicine)\n                                            :ARG3 s)\n                                  :ARG1 (c2 / cost-01\n                                            :ARG1 (h / hospital))))))", "(l / like-02\n   :ARG0 (s / she)\n   :ARG1 (k / know-01\n            :ARG0 s\n            :ARG1 (t / truth-value\n                     :polarity (c / cover-01\n                                  :ARG0 (ii / insure-02\n                                            :ARG1 (m / medicine)\n                                            :ARG3 s)\n                                  :ARG1 (c2 / cost-01\n                                            :ARG1 (h / hospital))))))", "(c / call-02\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Linda\")))", "(a / ask-01\n   :ARG1 (ii / it)\n   :ARG2 (s3 / someone\n             :location (r / reception)))", "(s / suggest-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Greg\"))\n   :ARG1 (o / or\n            :op1 (c / call-02\n                    :ARG0 (s2 / she)\n                    :ARG1 (p2 / person\n                              :name (n2 / name\n                                        :op1 \"Linda\")))\n            :op2 (a / ask-01\n                    :ARG0 s2\n                    :ARG1 (ii / it)\n                    :ARG2 (s3 / someone\n                              :location (r / reception)))))", "(s / suggest-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Greg\"))\n   :ARG1 (o / or\n            :op1 (c / call-02\n                    :ARG0 (s2 / she)\n                    :ARG1 (p2 / person\n                              :name (n2 / name\n                                        :op1 \"Linda\")))\n            :op2 (a / ask-01\n                    :ARG0 s2\n                    :ARG1 (ii / it)\n                    :ARG2 (s3 / someone\n                              :location (r / reception))))\n   :ARG2 s2)"], "smus": ["Kate is going to the hospital.", "Kate is going to the hospital.", "Kate broke her arm.", "Kate broke her arm.", "She had medical insurance.", "Do you know if her medical insurance covers the hospital costs?", "She doesn't know if her medical insurance covers the hospital costs.", "She doesn't know if her medical insurance covers the hospital costs.", "She would like to know if her medical insurance covers the hospital costs.", "She would like to know if her medical insurance covers the hospital costs.", "Call Linda.", "Ask someone at reception about it.", "Greg suggests she call Linda or ask someone at the reception about it.", "Greg suggests she call Linda or ask someone at the reception about it."]}, {"instance_id": "samsum-476", "summary": "Kim is going with Jane to Seoul in April. Jane will be their tour guide.", "summary_trees": ["# ::snt Kim is going with Jane to Seoul in April.\n(g / go-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Kim\"))\n      :ARG4 (c / city\n            :name (n2 / name\n                  :op1 \"Seoul\"))\n      :accompanier (p2 / person\n            :name (n3 / name\n                  :op1 \"Jane\"))\n      :time (d / date-entity\n            :month 4))", "# ::snt Jane will be their tour guide.\n(p / person\n      :name (n / name\n            :op1 \"Jane\")\n      :ARG0-of (g / guide-01\n            :ARG1 (t / they)\n            :ARG2 (t2 / tour-01)))"], "tree": ["(g / go-02\n   :time (d / date-entity\n            :month 4))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kim\")))", "(g / go-02\n   :accompanier (p2 / person\n                    :name (n3 / name\n                              :op1 \"Jane\"))\n   :time (d / date-entity\n            :month 4))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kim\"))\n   :ARG4 (c / city\n            :name (n2 / name\n                      :op1 \"Seoul\")))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kim\"))\n   :ARG4 (c / city\n            :name (n2 / name\n                      :op1 \"Seoul\"))\n   :time (d / date-entity\n            :month 4))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kim\"))\n   :ARG4 (c / city\n            :name (n2 / name\n                      :op1 \"Seoul\"))\n   :accompanier (p2 / person\n                    :name (n3 / name\n                              :op1 \"Jane\"))\n   :time (d / date-entity\n            :month 4))", "(g / guide-01\n   :ARG1 (t / they)\n   :ARG2 (t2 / tour-01))"], "smus": ["Going in April.", "Kim is going.", "Going with Jane in April.", "Kim is going to Seoul.", "Kim will be going to Seoul in April.", "Kim and Jane were going to Seoul in April.", "They have a tour guide."]}, {"instance_id": "samsum-477", "summary": "Mary has played DA Inquisition. Lucas has played DA II. Daniel started playing DA Inquisition.", "summary_trees": ["# ::snt Mary has played DA Inquisition.\n(p / play-02\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Mary\"))\n      :ARG1 (g / game\n            :name (n2 / name\n                  :op1 \"Investigation\")\n            :mod (d / district)))", "# ::snt Lucas has played DA II.\n(p / play-02\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Lucas\"))\n      :ARG1 p2\n      :name (n2 / name\n            :op1 \"DA\"\n            :op2 \"II\"))", "# ::snt Daniel started playing DA Inquisition.\n(s / start-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Daniel\"))\n      :ARG1 (p2 / play-01\n            :ARG0 p\n            :ARG1 (g / game\n                  :name (n2 / name\n                        :op1 \"Investigation\"\n                        :op2 \"da\"\n                        :op3 \"Cruz\"))))"], "tree": ["(p / play-02\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Mary\"))\n   :ARG1 (g / game\n            :name (n2 / name\n                      :op1 \"Investigation\")\n            :mod (d / district)))", "(p / play-02\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Mary\"))\n   :ARG1 (g / game\n            :name (n2 / name\n                      :op1 \"Investigation\")\n            :mod (d / district)))", "(p / play-02\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Lucas\"))\n   :ARG1 p2)", "(p / play-02\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Lucas\"))\n   :ARG1 p2\n   :name (n2 / name\n             :op1 \"DA\"\n             :op2 \"II\"))", "(s / start-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Daniel\")))"], "smus": ["Mary has played district investigation.", "Mary has played district investigation.", "Lucas has played him.", "DA II was played by Lucas.", "Daniel started."]}, {"instance_id": "samsum-478", "summary": "Tom wants to go to Robinson Crusoe's island.", "summary_trees": ["# ::snt Tom wants to go to Robinson Crusoe's island.\n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Tom\"))\n      :ARG1 (g / go-02\n            :ARG0 p\n            :ARG4 (ii / island\n                  :poss (p2 / person\n                        :name (n2 / name\n                              :op1 \"Robinson\"\n                              :op2 \"Crusoe\")))))"], "tree": ["(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tom\"))\n   :ARG1 (g / go-02\n            :ARG0 p\n            :ARG4 (ii / island\n                      :poss (p2 / person\n                                :name (n2 / name\n                                          :op1 \"Robinson\"\n                                          :op2 \"Crusoe\")))))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tom\"))\n   :ARG1 (g / go-02\n            :ARG0 p\n            :ARG4 (ii / island\n                      :poss (p2 / person\n                                :name (n2 / name\n                                          :op1 \"Robinson\"\n                                          :op2 \"Crusoe\")))))"], "smus": ["Tom wants to go to Robinson Crusoe's island.", "Tom wants to go to Robinson Crusoe's island."]}, {"instance_id": "samsum-479", "summary": "English classes were cancelled because Smith called in sick and replacement could not be found.", "summary_trees": ["# ::snt English classes were cancelled because Smith called in sick and replacement could not be found.\n(c / cancel-01\n      :ARG1 (c2 / class\n            :topic (l / language\n                  :name (n / name\n                        :op1 \"English\")))\n      :ARG1-of (c3 / cause-01\n            :ARG0 (a / and\n                  :op1 (c4 / call-in-04\n                        :ARG0 (p / person\n                              :name (n2 / name\n                                    :op1 \"Smith\"))\n                        :ARG1-of (s / sick-05))\n                  :op2 (p2 / possible-01\n                        :polarity -\n                        :ARG1 (f / find-01\n                              :ARG1 (p3 / person\n                                    :ARG2-of (r / replace-01\n                                          :ARG1 p)))))))"], "tree": ["(c4 / call-in-04\n    :ARG0 (p / person\n             :name (n2 / name\n                       :op1 \"Smith\"))\n    :ARG1 (s / sick-05))", "(p2 / possible-01\n    :polarity -\n    :ARG1 (f / find-01\n             :ARG1 (p3 / person\n                       :ARG2 (r / replace-01\n                                :ARG1 (p / person :name (n2 / name :op1 \"Smith\"))))))", "(c3 / cause-01\n    :ARG0 (c4 / call-in-04\n              :ARG0 (p / person\n                       :name (n2 / name\n                                 :op1 \"Smith\"))\n              :ARG1 (s / sick-05)))", "(c3 / cause-01\n    :ARG0 (p2 / possible-01\n              :polarity -\n              :ARG1 (f / find-01\n                       :ARG1 (p3 / person\n                                 :ARG2 (r / replace-01\n                                          :ARG1 (p / person :name (n2 / name :op1 \"Smith\")))))))", "(c / cancel-01\n   :ARG1 (c2 / class\n             :topic (l / language\n                       :name (n / name\n                                :op1 \"English\")))\n   :ARG1 (c3 / cause-01\n             :ARG0 (c4 / call-in-04\n                       :ARG0 (p / person\n                                :name (n2 / name\n                                          :op1 \"Smith\"))\n                       :ARG1 (s / sick-05))))", "(c / cancel-01\n   :ARG1 (c2 / class\n             :topic (l / language\n                       :name (n / name\n                                :op1 \"English\")))\n   :ARG1 (c3 / cause-01\n             :ARG0 (p2 / possible-01\n                       :polarity -\n                       :ARG1 (f / find-01\n                                :ARG1 (p3 / person\n                                          :ARG2 (r / replace-01\n                                                   :ARG1 (p / person :name (n2 / name :op1 \"Smith\"))))))))", "(c3 / cause-01\n    :ARG0 (a / and\n             :op1 (c4 / call-in-04\n                      :ARG0 (p / person\n                               :name (n2 / name\n                                         :op1 \"Smith\"))\n                      :ARG1 (s / sick-05))\n             :op2 (p2 / possible-01\n                      :polarity -\n                      :ARG1 (f / find-01\n                               :ARG1 (p3 / person\n                                         :ARG2 (r / replace-01\n                                                  :ARG1 p))))))", "(c / cancel-01\n   :ARG1 (c2 / class\n             :topic (l / language\n                       :name (n / name\n                                :op1 \"English\")))\n   :ARG1 (c3 / cause-01\n             :ARG0 (a / and\n                      :op1 (c4 / call-in-04\n                               :ARG0 (p / person\n                                        :name (n2 / name\n                                                  :op1 \"Smith\"))\n                               :ARG1 (s / sick-05))\n                      :op2 (p2 / possible-01\n                               :polarity -\n                               :ARG1 (f / find-01\n                                        :ARG1 (p3 / person\n                                                  :ARG2 (r / replace-01\n                                                           :ARG1 p)))))))"], "smus": ["Smith called sick.", "Smith could not be found to be replaced.", "Because Smith called sick.", "Because it is not possible to find a replacement for Smith.", "English classes were cancelled because Smith called sick.", "English classes have been cancelled because no replacement for Smith can be found.", "Because Smith called sick and he could not find a replacement.", "English classes were cancelled because Smith called sick and could not be found a replacement."]}, {"instance_id": "samsum-480", "summary": "Ella and Serena went to Cork club last weekend. The club was empty and they did not like it.", "summary_trees": ["# ::snt Ella and Serena went to Cork club last weekend.\n(g / go-02\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Ella\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Serena\")))\n      :ARG4 (c / club\n            :location (c2 / city\n                  :name (n3 / name\n                        :op1 \"Cork\")))\n      :time (w / weekend\n            :mod (l / last)))", "# ::snt The club was empty and they did not like it.\n(a / and\n      :op1 (e / empty-02\n            :ARG1 (c / club))\n      :op2 (d / dislike-01\n            :ARG0 (t / they)\n            :ARG1 e))"], "tree": ["(g / go-02\n   :time (w / weekend\n            :mod (l / last)))", "(g / go-02\n   :time (w / weekend\n            :mod (l / last)))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ella\")))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Serena\")))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Ella\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Serena\"))))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ella\"))\n   :ARG4 (c / club\n            :location (c2 / city\n                          :name (n3 / name\n                                    :op1 \"Cork\"))))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Serena\"))\n   :ARG4 (c / club\n            :location (c2 / city\n                          :name (n3 / name\n                                    :op1 \"Cork\")))\n   :ARG4 c)", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ella\"))\n   :ARG4 (c / club\n            :location (c2 / city\n                          :name (n3 / name\n                                    :op1 \"Cork\")))\n   :time (w / weekend\n            :mod (l / last)))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ella\"))\n   :ARG4 (c / club\n            :location (c2 / city\n                          :name (n3 / name\n                                    :op1 \"Cork\")))\n   :time (w / weekend\n            :mod (l / last)))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Serena\"))\n   :ARG4 (c / club\n            :location (c2 / city\n                          :name (n3 / name\n                                    :op1 \"Cork\")))\n   :ARG4 c\n   :time (w / weekend\n            :mod (l / last)))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Serena\"))\n   :ARG4 (c / club\n            :location (c2 / city\n                          :name (n3 / name\n                                    :op1 \"Cork\")))\n   :ARG4 c\n   :time (w / weekend\n            :mod (l / last)))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Ella\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Serena\")))\n   :ARG4 (c / club\n            :location (c2 / city\n                          :name (n3 / name\n                                    :op1 \"Cork\"))))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Ella\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Serena\")))\n   :ARG4 (c / club\n            :location (c2 / city\n                          :name (n3 / name\n                                    :op1 \"Cork\")))\n   :time (w / weekend\n            :mod (l / last)))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Ella\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Serena\")))\n   :ARG4 (c / club\n            :location (c2 / city\n                          :name (n3 / name\n                                    :op1 \"Cork\")))\n   :time (w / weekend\n            :mod (l / last)))", "(d / dislike-01\n   :ARG0 (t / they)\n   :ARG1 (e / empty-02))", "(d / dislike-01\n   :ARG0 (t / they)\n   :ARG1 (e / empty-02))"], "smus": ["went last weekend.", "went last weekend.", "Ella went.", "Serena went.", "Ella and Serena went.", "Ella went to a cork club.", "Serena went to a Cork club.", "Last weekend, Ella went to a Cork club.", "Last weekend, Ella went to a Cork club.", "Serena went to a Cork club last weekend.", "Serena went to a Cork club last weekend.", "Ella and Serena went to a cork club.", "Last weekend, Ella and Serena went to a Cork club.", "Last weekend, Ella and Serena went to a Cork club.", "They don't like empty.", "They don't like empty."]}, {"instance_id": "samsum-481", "summary": "Ying sent a photo of his 10 years challenge to Helen, Norma and Zazu.", "summary_trees": ["# ::snt Ying sent a photo of his 10 years challenge to Helen, Norma and Zazu.\n(s / send-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Ying\"))\n      :ARG1 (p2 / photo\n            :topic (c / challenge-01\n                  :ARG0 p\n                  :ARG1 (a / and\n                        :op1 (p3 / person\n                              :name (n2 / name\n                                    :op1 \"Helen\"))\n                        :op2 (p4 / person\n                              :name (n3 / name\n                                    :op1 \"Norma\"))\n                        :op3 (p5 / person\n                              :name (n4 / name\n                                    :op1 \"Zazu\")))\n                  :duration (t / temporal-quantity\n                        :quant 10\n                        :unit (y / year))))\n      :ARG2 a)"], "tree": ["(c / challenge-01\n   :duration (t / temporal-quantity\n                :quant 10\n                :unit (y / year)))", "(c / challenge-01\n   :ARG1 (p4 / person\n             :name (n3 / name\n                       :op1 \"Norma\")))", "(c / challenge-01\n   :ARG0 (p / person :name (n / name :op1 \"Ying\"))\n   :ARG1 (p3 / person\n             :name (n2 / name\n                       :op1 \"Helen\")))", "(c / challenge-01\n   :ARG0 (p / person :name (n / name :op1 \"Ying\"))\n   :ARG1 (p4 / person\n             :name (n3 / name\n                       :op1 \"Norma\")))", "(c / challenge-01\n   :ARG0 (p / person :name (n / name :op1 \"Ying\"))\n   :ARG1 (p5 / person\n             :name (n4 / name\n                       :op1 \"Zazu\")))", "(c / challenge-01\n   :ARG0 (p / person :name (n / name :op1 \"Ying\"))\n   :ARG1 (p3 / person\n             :name (n2 / name\n                       :op1 \"Helen\"))\n   :duration (t / temporal-quantity\n                :quant 10\n                :unit (y / year)))", "(c / challenge-01\n   :ARG0 (p / person :name (n / name :op1 \"Ying\"))\n   :ARG1 (p5 / person\n             :name (n4 / name\n                       :op1 \"Zazu\"))\n   :duration (t / temporal-quantity\n                :quant 10\n                :unit (y / year))\n   :duration t)", "(s / send-01\n   :ARG1 (p2 / photo\n             :topic (c / challenge-01\n                       :ARG0 (p / person :name (n / name :op1 \"Ying\"))\n                       :ARG1 (p3 / person\n                                 :name (n2 / name\n                                           :op1 \"Helen\"))\n                       :duration (t / temporal-quantity\n                                    :quant 10\n                                    :unit (y / year))))\n   :ARG2 p3)", "(c / challenge-01\n   :ARG1 (a / and\n            :op1 (p3 / person\n                     :name (n2 / name\n                               :op1 \"Helen\"))\n            :op2 (p4 / person\n                     :name (n3 / name\n                               :op1 \"Norma\"))\n            :op3 (p5 / person\n                     :name (n4 / name\n                               :op1 \"Zazu\"))))", "(s / send-01\n   :ARG1 (p2 / photo\n             :topic (c / challenge-01\n                       :ARG0 (p / person :name (n / name :op1 \"Ying\"))\n                       :ARG1 (p5 / person\n                                 :name (n4 / name\n                                           :op1 \"Zazu\"))\n                       :duration (t / temporal-quantity\n                                    :quant 10\n                                    :unit (y / year))\n                       :duration t))\n   :ARG2 p5)", "(c / challenge-01\n   :ARG0 (p / person :name (n / name :op1 \"Ying\"))\n   :ARG1 (a / and\n            :op1 (p3 / person\n                     :name (n2 / name\n                               :op1 \"Helen\"))\n            :op2 (p4 / person\n                     :name (n3 / name\n                               :op1 \"Norma\"))\n            :op3 (p5 / person\n                     :name (n4 / name\n                               :op1 \"Zazu\"))))", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ying\"))\n   :ARG1 (p2 / photo\n             :topic (c / challenge-01\n                       :ARG0 p\n                       :ARG1 (p3 / person\n                                 :name (n2 / name\n                                           :op1 \"Helen\"))\n                       :duration (t / temporal-quantity\n                                    :quant 10\n                                    :unit (y / year)))))", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ying\"))\n   :ARG1 (p2 / photo\n             :topic (c / challenge-01\n                       :ARG0 p\n                       :ARG1 (p4 / person\n                                 :name (n3 / name\n                                           :op1 \"Norma\"))\n                       :duration (t / temporal-quantity\n                                    :quant 10\n                                    :unit (y / year)))))", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ying\"))\n   :ARG1 (p2 / photo\n             :topic (c / challenge-01\n                       :ARG0 p\n                       :ARG1 (p3 / person\n                                 :name (n2 / name\n                                           :op1 \"Helen\"))\n                       :duration (t / temporal-quantity\n                                    :quant 10\n                                    :unit (y / year))))\n   :ARG2 p3)", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ying\"))\n   :ARG1 (p2 / photo\n             :topic (c / challenge-01\n                       :ARG0 p\n                       :ARG1 (p4 / person\n                                 :name (n3 / name\n                                           :op1 \"Norma\"))\n                       :duration (t / temporal-quantity\n                                    :quant 10\n                                    :unit (y / year))))\n   :ARG2 p4)", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ying\"))\n   :ARG1 (p2 / photo\n             :topic (c / challenge-01\n                       :ARG0 p\n                       :ARG1 (p3 / person\n                                 :name (n2 / name\n                                           :op1 \"Helen\"))\n                       :duration (t / temporal-quantity\n                                    :quant 10\n                                    :unit (y / year))))\n   :ARG2 p3)", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ying\"))\n   :ARG1 (p2 / photo\n             :topic (c / challenge-01\n                       :ARG0 p\n                       :ARG1 (p4 / person\n                                 :name (n3 / name\n                                           :op1 \"Norma\"))\n                       :duration (t / temporal-quantity\n                                    :quant 10\n                                    :unit (y / year))))\n   :ARG2 p4)", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ying\"))\n   :ARG1 (p2 / photo\n             :topic (c / challenge-01\n                       :ARG0 p\n                       :ARG1 (p5 / person\n                                 :name (n4 / name\n                                           :op1 \"Zazu\"))\n                       :duration (t / temporal-quantity\n                                    :quant 10\n                                    :unit (y / year))\n                       :duration t)))", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ying\"))\n   :ARG1 (p2 / photo\n             :topic (c / challenge-01\n                       :ARG0 p\n                       :ARG1 (p5 / person\n                                 :name (n4 / name\n                                           :op1 \"Zazu\"))\n                       :duration (t / temporal-quantity\n                                    :quant 10\n                                    :unit (y / year))\n                       :duration t))\n   :ARG2 p5)", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ying\"))\n   :ARG1 (p2 / photo\n             :topic (c / challenge-01\n                       :ARG0 p\n                       :ARG1 (p5 / person\n                                 :name (n4 / name\n                                           :op1 \"Zazu\"))\n                       :duration (t / temporal-quantity\n                                    :quant 10\n                                    :unit (y / year))\n                       :duration t))\n   :ARG2 p5)", "(c / challenge-01\n   :ARG0 (p / person :name (n / name :op1 \"Ying\"))\n   :ARG1 (a / and\n            :op1 (p3 / person\n                     :name (n2 / name\n                               :op1 \"Helen\"))\n            :op2 (p4 / person\n                     :name (n3 / name\n                               :op1 \"Norma\"))\n            :op3 (p5 / person\n                     :name (n4 / name\n                               :op1 \"Zazu\")))\n   :duration (t / temporal-quantity\n                :quant 10\n                :unit (y / year)))", "(s / send-01\n   :ARG1 (p2 / photo\n             :topic (c / challenge-01\n                       :ARG0 (p / person :name (n / name :op1 \"Ying\"))\n                       :ARG1 (a / and\n                                :op1 (p3 / person\n                                         :name (n2 / name\n                                                   :op1 \"Helen\"))\n                                :op2 (p4 / person\n                                         :name (n3 / name\n                                                   :op1 \"Norma\"))\n                                :op3 (p5 / person\n                                         :name (n4 / name\n                                                   :op1 \"Zazu\")))\n                       :duration (t / temporal-quantity\n                                    :quant 10\n                                    :unit (y / year))))\n   :ARG2 a)", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ying\"))\n   :ARG1 (p2 / photo\n             :topic (c / challenge-01\n                       :ARG0 p\n                       :ARG1 (a / and\n                                :op1 (p3 / person\n                                         :name (n2 / name\n                                                   :op1 \"Helen\"))\n                                :op2 (p4 / person\n                                         :name (n3 / name\n                                                   :op1 \"Norma\"))\n                                :op3 (p5 / person\n                                         :name (n4 / name\n                                                   :op1 \"Zazu\")))\n                       :duration (t / temporal-quantity\n                                    :quant 10\n                                    :unit (y / year)))))"], "smus": ["The challenge has been on for 10 years.", "Norma is up for challenge.", "Ying is a challenge to Helen.", "Ying is a challenge to Norma.", "Ying is a challenger to Zazu.", "Ying has been challenging Helen for 10 years.", "Ying has been challenging Zazu for 10 years.", "She was sent a photo of Ying's 10-year challenge to Helen.", "The challenge is Helen, Norma and Zazu.", "A photo of Ying's 10-year challenge to Zazu was sent to him.", "Ying is challenging Helen, Norma and Zazu.", "Ying sent a photo of his 10-year challenge to Helen.", "Ying sent a photo of his 10-year challenge to Norma.", "Ying sent her a photo of his 10-year challenge to Helen.", "Ying sent her a photo of his 10 years of challenge to Norma.", "Ying sent her a photo of his 10-year challenge to Helen.", "Ying sent her a photo of his 10 years of challenge to Norma.", "Ying sent a photo of his 10-year challenge to Zazu.", "Ying sent her a photo of his 10-year challenge to Zazu.", "Ying sent her a photo of his 10-year challenge to Zazu.", "Ying has been challenging Helen, Norma and Zazu for 10 years.", "The photo sent was of Ying's 10-year challenge to Helen, Norma and Zazu.", "Ying sent a photo of his 10-year challenge to Helen, Norma and Zazu."]}, {"instance_id": "samsum-482", "summary": "Ella rented a car, this makes things much faster for her and Tom. ", "summary_trees": ["# ::snt Ella rented a car, this makes things much faster for her and Tom.\n(r / rent-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Ella\"))\n      :ARG1 (c / car)\n      :ARG0-of (m / make-02\n            :ARG1 (h / have-degree-91\n                  :ARG1 (t / thing)\n                  :ARG2 (f / fast-02\n                        :ARG1 t)\n                  :ARG3 (m2 / more\n                        :quant (m3 / much))\n                  :beneficiary (a / and\n                        :op1 p\n                        :op2 (p2 / person\n                              :name (n2 / name\n                                    :op1 \"Tom\"))))))"], "tree": ["(r / rent-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ella\")))", "(h / have-degree-91\n   :beneficiary (p2 / person\n                    :name (n2 / name\n                              :op1 \"Tom\")))", "(h / have-degree-91\n   :beneficiary (a / and\n                   :op1 (p / person :name (n / name :op1 \"Ella\"))\n                   :op2 (p2 / person\n                            :name (n2 / name\n                                      :op1 \"Tom\"))))", "(h / have-degree-91\n   :ARG1 (t / thing)\n   :ARG2 (f / fast-02\n            :ARG1 t)\n   :ARG3 (m2 / more\n             :quant (m3 / much)))", "(h / have-degree-91\n   :ARG1 (t / thing)\n   :ARG2 (f / fast-02\n            :ARG1 t)\n   :ARG3 (m2 / more\n             :quant (m3 / much))\n   :beneficiary (p / person :name (n / name :op1 \"Ella\")))", "(m / make-02\n   :ARG1 (h / have-degree-91\n            :ARG1 (t / thing)\n            :ARG2 (f / fast-02\n                     :ARG1 t)\n            :ARG3 (m2 / more\n                      :quant (m3 / much))\n            :beneficiary (p / person :name (n / name :op1 \"Ella\"))))", "(h / have-degree-91\n   :ARG1 (t / thing)\n   :ARG2 (f / fast-02\n            :ARG1 t)\n   :ARG3 (m2 / more\n             :quant (m3 / much))\n   :beneficiary (p2 / person\n                    :name (n2 / name\n                              :op1 \"Tom\")))", "(m / make-02\n   :ARG1 (h / have-degree-91\n            :ARG1 (t / thing)\n            :ARG2 (f / fast-02\n                     :ARG1 t)\n            :ARG3 (m2 / more\n                      :quant (m3 / much))\n            :beneficiary (p2 / person\n                             :name (n2 / name\n                                       :op1 \"Tom\"))))", "(h / have-degree-91\n   :ARG1 (t / thing)\n   :ARG2 (f / fast-02\n            :ARG1 t)\n   :ARG3 (m2 / more\n             :quant (m3 / much))\n   :beneficiary (a / and\n                   :op1 (p / person :name (n / name :op1 \"Ella\"))\n                   :op2 (p2 / person\n                            :name (n2 / name\n                                      :op1 \"Tom\"))))", "(m / make-02\n   :ARG1 (h / have-degree-91\n            :ARG1 (t / thing)\n            :ARG2 (f / fast-02\n                     :ARG1 t)\n            :ARG3 (m2 / more\n                      :quant (m3 / much))\n            :beneficiary (a / and\n                            :op1 (p / person :name (n / name :op1 \"Ella\"))\n                            :op2 (p2 / person\n                                     :name (n2 / name\n                                               :op1 \"Tom\")))))", "(r / rent-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ella\"))\n   :ARG1 (c / car)\n   :ARG0 (m / make-02\n            :ARG1 (h / have-degree-91\n                     :ARG1 (t / thing)\n                     :ARG2 (f / fast-02\n                              :ARG1 t)\n                     :ARG3 (m2 / more\n                               :quant (m3 / much))\n                     :beneficiary p)))", "(r / rent-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ella\"))\n   :ARG1 (c / car)\n   :ARG0 (m / make-02\n            :ARG1 (h / have-degree-91\n                     :ARG1 (t / thing)\n                     :ARG2 (f / fast-02\n                              :ARG1 t)\n                     :ARG3 (m2 / more\n                               :quant (m3 / much))\n                     :beneficiary (p2 / person\n                                      :name (n2 / name\n                                                :op1 \"Tom\")))))", "(r / rent-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ella\"))\n   :ARG1 (c / car)\n   :ARG0 (m / make-02\n            :ARG1 (h / have-degree-91\n                     :ARG1 (t / thing)\n                     :ARG2 (f / fast-02\n                              :ARG1 t)\n                     :ARG3 (m2 / more\n                               :quant (m3 / much))\n                     :beneficiary (a / and\n                                     :op1 p\n                                     :op2 (p2 / person\n                                              :name (n2 / name\n                                                        :op1 \"Tom\"))))))"], "smus": ["Ella rented.", "For Tom.", "for Ella and Tom.", "Things are going much faster.", "Things are going much faster for Ella.", "Makes things much faster for Ella.", "Things are much faster for Tom.", "Makes things much faster for Tom.", "Things are going much faster for Ella and Tom.", "Makes things much faster for Ella and Tom.", "Ella rented a car because it makes things much faster for her.", "Ella rented a car because it makes things much faster for Tom.", "Ella rented a car because it makes things much faster for her and Tom."]}, {"instance_id": "samsum-483", "summary": "Molly and Anna will go to the Muse concert in Cracow.", "summary_trees": ["# ::snt Molly and Anna will go to the Muse concert in Cracow.\n(g / go-02\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Molly\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Anna\")))\n      :ARG4 (c / concert\n            :mod (o / organization\n                  :name (n3 / name\n                        :op1 \"Muse\"))\n            :location (c2 / city\n                  :name (n4 / name\n                        :op1 \"Cracow\"))))"], "tree": ["(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Molly\")))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Anna\")))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Molly\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Anna\"))))"], "smus": ["Molly, go.", "Anna, go.", "Molly and Anna will go."]}, {"instance_id": "samsum-484", "summary": "Tony sent a photo of his cat to Amy and Lucas.", "summary_trees": ["# ::snt Tony sent a photo of his cat to Amy and Lucas.\n(s / send-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Tony\"))\n      :ARG1 (p2 / photo\n            :topic (c / cat\n                  :poss p))\n      :ARG2 (a / and\n            :op1 (p3 / person\n                  :name (n2 / name\n                        :op1 \"Amy\"))\n            :op2 (p4 / person\n                  :name (n3 / name\n                        :op1 \"Lucas\"))))"], "tree": ["(s / send-01\n   :ARG1 (p2 / photo\n             :topic (c / cat\n                       :poss (p / person :name (n / name :op1 \"Tony\"))))\n   :ARG2 (p3 / person\n             :name (n2 / name\n                       :op1 \"Amy\")))", "(s / send-01\n   :ARG1 (p2 / photo\n             :topic (c / cat\n                       :poss (p / person :name (n / name :op1 \"Tony\"))))\n   :ARG2 (p4 / person\n             :name (n3 / name\n                       :op1 \"Lucas\")))", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tony\"))\n   :ARG1 (p2 / photo\n             :topic (c / cat\n                       :poss p))\n   :ARG2 (p3 / person\n             :name (n2 / name\n                       :op1 \"Amy\")))", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tony\"))\n   :ARG1 (p2 / photo\n             :topic (c / cat\n                       :poss p))\n   :ARG2 (p4 / person\n             :name (n3 / name\n                       :op1 \"Lucas\")))", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tony\"))\n   :ARG1 (p2 / photo\n             :topic (c / cat\n                       :poss p))\n   :ARG2 (p3 / person\n             :name (n2 / name\n                       :op1 \"Amy\")))", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tony\"))\n   :ARG1 (p2 / photo\n             :topic (c / cat\n                       :poss p))\n   :ARG2 (p4 / person\n             :name (n3 / name\n                       :op1 \"Lucas\")))", "(s / send-01\n   :ARG1 (p2 / photo\n             :topic (c / cat\n                       :poss (p / person :name (n / name :op1 \"Tony\"))))\n   :ARG2 (a / and\n            :op1 (p3 / person\n                     :name (n2 / name\n                               :op1 \"Amy\"))\n            :op2 (p4 / person\n                     :name (n3 / name\n                               :op1 \"Lucas\"))))", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tony\"))\n   :ARG1 (p2 / photo\n             :topic (c / cat\n                       :poss p))\n   :ARG2 (a / and\n            :op1 (p3 / person\n                     :name (n2 / name\n                               :op1 \"Amy\"))\n            :op2 (p4 / person\n                     :name (n3 / name\n                               :op1 \"Lucas\"))))", "(s / send-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tony\"))\n   :ARG1 (p2 / photo\n             :topic (c / cat\n                       :poss p))\n   :ARG2 (a / and\n            :op1 (p3 / person\n                     :name (n2 / name\n                               :op1 \"Amy\"))\n            :op2 (p4 / person\n                     :name (n3 / name\n                               :op1 \"Lucas\"))))"], "smus": ["Tony sent Amy a photo of his cat.", "Tony's cat photo was sent to Lucas.", "Tony sent Amy a photo of his cat.", "Tony sent Lucas a photo of his cat.", "Tony sent Amy a photo of his cat.", "Tony sent Lucas a photo of his cat.", "Tony's cat photo was sent to Amy and Lucas.", "Tony sent Amy and Lucas a photo of his cat.", "Tony sent Amy and Lucas a photo of his cat."]}, {"instance_id": "samsum-485", "summary": "Ethan was at the gym yesterday. This week he has been training every day. Ethan and Dustin will come to Ray's place at 8pm.", "summary_trees": ["# ::snt Ethan was at the gym yesterday.\n(b / be-located-at-91\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Ethan\"))\n      :ARG2 (g / gym)\n      :time (y / yesterday))", "# ::snt This week he has been training every day.\n(t / train-01\n      :ARG2 (h / he)\n      :frequency (r / rate-entity-91\n            :ARG3 (t2 / temporal-quantity\n                  :quant 1\n                  :unit (d / day)))\n      :time (w / week\n            :mod (t3 / this)))", "# ::snt Ethan and Dustin will come to Ray's place at 8pm.\n(c / come-01\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Ethan\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Dustin\")))\n      :ARG4 (p3 / place\n            :poss (p4 / person\n                  :name (n3 / name\n                        :op1 \"Ray\")))\n      :time (d / date-entity\n            :time \"18:00\"))"], "tree": ["(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Ethan\"))\n   :ARG2 (g / gym))", "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Ethan\"))\n   :ARG2 (g / gym)\n   :time (y / yesterday))", "(r / rate-entity-91\n   :ARG3 (t2 / temporal-quantity\n             :quant 1\n             :unit (d / day)))", "(r / rate-entity-91\n   :ARG3 (t2 / temporal-quantity\n             :quant 1\n             :unit (d / day)))", "(t / train-01\n   :frequency (r / rate-entity-91)\n   :time (w / week\n            :mod (t3 / this)))", "(t / train-01\n   :ARG2 (h / he)\n   :frequency (r / rate-entity-91\n                 :ARG3 (t2 / temporal-quantity\n                           :quant 1\n                           :unit (d / day)))\n   :time (w / week\n            :mod (t3 / this)))", "(c / come-01\n   :time (d / date-entity\n            :time \"18:00\"))", "(c / come-01\n   :time (d / date-entity\n            :time \"18:00\"))", "(c / come-01\n   :time (d / date-entity\n            :time \"18:00\"))", "(c / come-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Dustin\")))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Ethan\"))\n   :time (d / date-entity\n            :time \"18:00\"))", "(c / come-01\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Ethan\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Dustin\"))))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Ethan\"))\n   :ARG4 (p3 / place\n             :poss (p4 / person\n                       :name (n3 / name\n                                 :op1 \"Ray\"))))", "(c / come-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Dustin\"))\n   :ARG4 (p3 / place\n             :poss (p4 / person\n                       :name (n3 / name\n                                 :op1 \"Ray\")))\n   :ARG4 p3)", "(c / come-01\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Ethan\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Dustin\")))\n   :time (d / date-entity\n            :time \"18:00\"))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Ethan\"))\n   :ARG4 (p3 / place\n             :poss (p4 / person\n                       :name (n3 / name\n                                 :op1 \"Ray\")))\n   :time (d / date-entity\n            :time \"18:00\"))", "(c / come-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Ethan\"))\n   :ARG4 (p3 / place\n             :poss (p4 / person\n                       :name (n3 / name\n                                 :op1 \"Ray\")))\n   :time (d / date-entity\n            :time \"18:00\"))", "(c / come-01\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Ethan\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Dustin\")))\n   :ARG4 (p3 / place\n             :poss (p4 / person\n                       :name (n3 / name\n                                 :op1 \"Ray\"))))", "(c / come-01\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Ethan\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Dustin\")))\n   :ARG4 (p3 / place\n             :poss (p4 / person\n                       :name (n3 / name\n                                 :op1 \"Ray\")))\n   :time (d / date-entity\n            :time \"18:00\"))", "(c / come-01\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Ethan\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Dustin\")))\n   :ARG4 (p3 / place\n             :poss (p4 / person\n                       :name (n3 / name\n                                 :op1 \"Ray\")))\n   :time (d / date-entity\n            :time \"18:00\"))"], "smus": ["Ethan is in the gym.", "Ethan was in the gym yesterday.", "Every day.", "Every day.", "Training every week this week.", "He's been training every day this week.", "Come at 8 o'clock.", "Come at 8 o'clock.", "Come at 8 o'clock.", "Come Dustin.", "Come at 8 o'clock.", "come Ethan and Dustin.", "Ethan will come to Ray's place.", "Dustin will come to Ray's place.", "Ethan and Dustin will come at 8 o'clock p.m.", "At 8 o'clock ethan will come to Ray's place.", "At 8 o'clock ethan will come to Ray's place.", "Ethan and Dustin will come to Ray's place.", "At 8 o'clock ethan and dustin will come to Ray's place.", "At 8 o'clock ethan and dustin will come to Ray's place."]}, {"instance_id": "samsum-486", "summary": "Jake, Florence, Margot and others are going on a research trip to Swazi. The name of the country was changed last year and it's now Eswatini.", "summary_trees": ["# ::snt Jake, Florence, Margot and others are going on a research trip to Swazi.\n(g / go-02\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Jake\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Florence\"))\n            :op3 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Margot\"))\n            :op4 (o / other))\n      :ARG1 (t / trip-03\n            :ARG0 a\n            :ARG1 (c / country\n                  :name (n4 / name\n                        :op1 \"Swazi\"))\n            :purpose (r / research-01\n                  :ARG0 a)))", "# ::snt The name of the country was changed last year and it's now Eswatini.\n(a / and\n      :op1 (c / change-01\n            :ARG1 (n / name\n                  :poss (c2 / country))\n            :time (y / year\n                  :mod (l / last)))\n      :op2 (n2 / name-01\n            :ARG1 c2\n            :ARG2 (n3 / name\n                  :op1 \"Eswatini\")\n            :time (n4 / now)))"], "tree": ["(t / trip-03\n   :ARG1 (c / country\n            :name (n4 / name\n                      :op1 \"Swazi\")))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jake\")))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Florence\")))", "(g / go-02\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Margot\")))", "(t / trip-03\n   :ARG0 (a / and)\n   :ARG1 (c / country\n            :name (n4 / name\n                      :op1 \"Swazi\")))", "(t / trip-03\n   :ARG0 (a / and)\n   :ARG1 (c / country\n            :name (n4 / name\n                      :op1 \"Swazi\"))\n   :purpose (r / research-01\n               :ARG0 a))", "(g / go-02\n   :ARG0 (o / other)\n   :ARG1 (t / trip-03\n            :ARG0 o\n            :ARG1 (c / country\n                     :name (n4 / name\n                               :op1 \"Swazi\"))\n            :purpose (r / research-01\n                        :ARG0 o))\n   :ARG1 t)", "(g / go-02\n   :ARG0 (o / other)\n   :ARG1 (t / trip-03\n            :ARG0 o\n            :ARG1 (c / country\n                     :name (n4 / name\n                               :op1 \"Swazi\"))\n            :purpose (r / research-01\n                        :ARG0 o))\n   :ARG1 t)", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jake\"))\n   :ARG1 (t / trip-03\n            :ARG0 p\n            :ARG1 (c / country\n                     :name (n4 / name\n                               :op1 \"Swazi\"))\n            :purpose (r / research-01\n                        :ARG0 p)))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Florence\"))\n   :ARG1 (t / trip-03\n            :ARG0 p2\n            :ARG1 (c / country\n                     :name (n4 / name\n                               :op1 \"Swazi\"))\n            :purpose (r / research-01\n                        :ARG0 p2)))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jake\"))\n   :ARG1 (t / trip-03\n            :ARG0 p\n            :ARG1 (c / country\n                     :name (n4 / name\n                               :op1 \"Swazi\"))\n            :purpose (r / research-01\n                        :ARG0 p)))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Florence\"))\n   :ARG1 (t / trip-03\n            :ARG0 p2\n            :ARG1 (c / country\n                     :name (n4 / name\n                               :op1 \"Swazi\"))\n            :purpose (r / research-01\n                        :ARG0 p2)))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Jake\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Florence\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Margot\"))\n            :op4 (o / other)))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Jake\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Florence\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Margot\"))\n            :op4 (o / other))\n   :ARG1 (t / trip-03\n            :ARG0 a\n            :ARG1 (c / country\n                     :name (n4 / name\n                               :op1 \"Swazi\"))\n            :purpose (r / research-01\n                        :ARG0 a)))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Jake\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Florence\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Margot\"))\n            :op4 (o / other))\n   :ARG1 (t / trip-03\n            :ARG0 a\n            :ARG1 (c / country\n                     :name (n4 / name\n                               :op1 \"Swazi\"))\n            :purpose (r / research-01\n                        :ARG0 a)))", "(n2 / name-01\n    :ARG1 (c2 / country)\n    :ARG2 (n3 / name\n              :op1 \"Eswatini\"))", "(c / change-01\n   :ARG1 (n / name\n            :poss (c2 / country)))", "(c / change-01\n   :time (y / year\n            :mod (l / last)))", "(c / change-01\n   :time (y / year\n            :mod (l / last)))", "(n2 / name-01\n    :ARG1 (c2 / country)\n    :ARG2 (n3 / name\n              :op1 \"Eswatini\")\n    :time (n4 / now))", "(n2 / name-01\n    :ARG1 (c2 / country)\n    :ARG2 (n3 / name\n              :op1 \"Eswatini\")\n    :time (n4 / now))", "(c / change-01\n   :ARG1 (n / name\n            :poss (c2 / country))\n   :time (y / year\n            :mod (l / last)))", "(c / change-01\n   :ARG1 (n / name\n            :poss (c2 / country))\n   :time (y / year\n            :mod (l / last)))"], "smus": ["The trip to Swaziland.", "Jake is going.", "Florence is going.", "Margaret is going.", "The trip was Swazi.", "The trip was a research trip to Swaziland.", "Others are going on a research trip to Swaziland.", "Others are going on a research trip to Swaziland.", "Jake is going on a research trip to Swaziland.", "Florence is going on a research trip to Swaziland.", "Jake is going on a research trip to Swaziland.", "Florence is going on a research trip to Swaziland.", "Jake, Florence, Margaret and others are going.", "Jake, Florence, Margaret and others are going on a research trip to Swaziland.", "Jake, Florence, Margaret and others are going on a research trip to Swaziland.", "The country's name is Eswatini.", "The name of the country has changed.", "Changed last year.", "Changed last year.", "The country is now named Eswatini.", "The country is now named Eswatini.", "The country's name changed last year.", "The country's name changed last year."]}, {"instance_id": "samsum-487", "summary": "In the agreement it was decided that it's neither a sea nor a lake and it will have a special legal status. They will also completely divide the seabed up. It's rich in resources, mostly gas and oil.", "summary_trees": ["# ::snt In the agreement it was decided that it's neither a sea nor a lake and it will have a special legal status.\n(a / agree-01\n      :ARG1 (d / decide-01\n            :ARG1 (a2 / and\n                  :op1 (s / sea\n                        :polarity -\n                        :domain (ii / it))\n                  :op2 (l / lake\n                        :polarity -\n                        :domain ii)\n                  :op3 (h / have-03\n                        :ARG0 ii\n                        :ARG1 (s2 / status\n                              :ARG1-of (l2 / legal-02)\n                              :ARG1-of (s3 / special-02))))))", "# ::snt They will also completely divide the seabed up.\n(d / divide-02\n      :ARG0 (t / they)\n      :ARG1 (s / seabed)\n      :ARG1-of (c / complete-02)\n      :mod (a / also)\n      :mod (u / up))", "# ::snt It's rich in resources, mostly gas and oil.\n(r / rich\n      :domain (ii / it)\n      :source (r2 / resource\n            :ARG2-of (ii2 / include-91\n                  :ARG1 (a / and\n                        :op1 (g / gas)\n                        :op2 (o / oil)\n                        :mod (m / most)))))"], "tree": ["(d / decide-01\n   :ARG1 (l / lake\n            :polarity -\n            :domain (ii / it)))", "(d / decide-01\n   :ARG1 (l / lake\n            :polarity -\n            :domain (ii / it)))", "(d / decide-01\n   :ARG1 (s / sea\n            :polarity -\n            :domain (ii / it)))", "(d / decide-01\n   :ARG1 (s / sea\n            :polarity -\n            :domain (ii / it)))", "(a / agree-01\n   :ARG1 (d / decide-01\n            :ARG1 (l / lake\n                     :polarity -\n                     :domain (ii / it))))", "(a / agree-01\n   :ARG1 (d / decide-01\n            :ARG1 (l / lake\n                     :polarity -\n                     :domain (ii / it))))", "(a / agree-01\n   :ARG1 (d / decide-01\n            :ARG1 (s / sea\n                     :polarity -\n                     :domain (ii / it))))", "(a / agree-01\n   :ARG1 (d / decide-01\n            :ARG1 (s / sea\n                     :polarity -\n                     :domain (ii / it))))", "(d / decide-01\n   :ARG1 (h / have-03\n            :ARG0 (ii / it)\n            :ARG1 (s2 / status\n                      :ARG1 (l2 / legal-02)\n                      :ARG1 (s3 / special-02))))", "(d / decide-01\n   :ARG1 (h / have-03\n            :ARG0 (ii / it)\n            :ARG1 (s2 / status\n                      :ARG1 (l2 / legal-02)\n                      :ARG1 (s3 / special-02))))", "(a / agree-01\n   :ARG1 (d / decide-01\n            :ARG1 (h / have-03\n                     :ARG0 (ii / it)\n                     :ARG1 (s2 / status\n                               :ARG1 (l2 / legal-02)\n                               :ARG1 (s3 / special-02)))))", "(a / agree-01\n   :ARG1 (d / decide-01\n            :ARG1 (h / have-03\n                     :ARG0 (ii / it)\n                     :ARG1 (s2 / status\n                               :ARG1 (l2 / legal-02)\n                               :ARG1 (s3 / special-02)))))", "(d / decide-01\n   :ARG1 (a2 / and\n             :op1 (s / sea\n                     :polarity -\n                     :domain (ii / it))\n             :op2 (l / lake\n                     :polarity -\n                     :domain ii)\n             :op3 (h / have-03\n                     :ARG0 ii\n                     :ARG1 (s2 / status\n                               :ARG1 (l2 / legal-02)\n                               :ARG1 (s3 / special-02)))))", "(d / decide-01\n   :ARG1 (a2 / and\n             :op1 (s / sea\n                     :polarity -\n                     :domain (ii / it))\n             :op2 (l / lake\n                     :polarity -\n                     :domain ii)\n             :op3 (h / have-03\n                     :ARG0 ii\n                     :ARG1 (s2 / status\n                               :ARG1 (l2 / legal-02)\n                               :ARG1 (s3 / special-02)))))", "(a / agree-01\n   :ARG1 (d / decide-01\n            :ARG1 (a2 / and\n                      :op1 (s / sea\n                              :polarity -\n                              :domain (ii / it))\n                      :op2 (l / lake\n                              :polarity -\n                              :domain ii)\n                      :op3 (h / have-03\n                              :ARG0 ii\n                              :ARG1 (s2 / status\n                                        :ARG1 (l2 / legal-02)\n                                        :ARG1 (s3 / special-02))))))", "(a / agree-01\n   :ARG1 (d / decide-01\n            :ARG1 (a2 / and\n                      :op1 (s / sea\n                              :polarity -\n                              :domain (ii / it))\n                      :op2 (l / lake\n                              :polarity -\n                              :domain ii)\n                      :op3 (h / have-03\n                              :ARG0 ii\n                              :ARG1 (s2 / status\n                                        :ARG1 (l2 / legal-02)\n                                        :ARG1 (s3 / special-02))))))", "(d / divide-02\n   :mod (a / also)\n   :mod (u / up))", "(d / divide-02\n   :ARG0 (t / they)\n   :ARG1 (s / seabed)\n   :ARG1 (c / complete-02)\n   :mod (a / also)\n   :mod (u / up))", "(ii2 / include-91\n     :ARG1 (o / oil\n              :mod (m / most)))", "(ii2 / include-91\n     :ARG1 (a / and\n              :op1 (g / gas)\n              :op2 (o / oil)\n              :mod (m / most)))"], "smus": ["It was decided that it wasn't a lake.", "It was decided that it wasn't a lake.", "It was decided that it was not a sea.", "It was decided that it was not a sea.", "It's been decided that it's not a lake, in agreement.", "It's been decided that it's not a lake, in agreement.", "It's decided that it's not a sea, in agreement.", "It's decided that it's not a sea, in agreement.", "It was decided to have special legal status.", "It was decided to have special legal status.", "The agreement was that it was decided to have special legal status.", "The agreement was that it was decided to have special legal status.", "It was decided that it was not sea or lake and that it would have special legal status.", "It was decided that it was not sea or lake and that it would have special legal status.", "The agreement was decided that it was not a sea or lake and would have special legal status.", "The agreement was decided that it was not a sea or lake and would have special legal status.", "Also divide up.", "They also would divide the seabed completely up.", "Most of the oil.", "mostly gas and oil."]}, {"instance_id": "samsum-488", "summary": "John is in the park. He is leaving now.", "summary_trees": ["# ::snt John is in the park.\n(b / be-located-at-91\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"John\"))\n      :ARG2 (p2 / park))", "# ::snt He is leaving now.\n(l / leave-11\n      :ARG0 (h / he)\n      :time (n / now))"], "tree": ["(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"John\"))\n   :ARG2 (p2 / park))", "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"John\"))\n   :ARG2 (p2 / park))", "(l / leave-11\n   :ARG0 (h / he)\n   :time (n / now))"], "smus": ["John in the park.", "John in the park.", "He's leaving now."]}, {"instance_id": "samsum-489", "summary": "Conrad can't enter the house because he forgot his keys. Since Rebecca and Tiffany are coming back late, he'll wait in the coffee shop. ", "summary_trees": ["# ::snt Conrad can't enter the house because he forgot his keys.\n(p / possible-01\n      :polarity -\n      :ARG1 (e / enter-01\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Conrad\"))\n            :ARG1 (h / house))\n      :ARG1-of (c / cause-01\n            :ARG0 (f / forget-01\n                  :ARG0 p2\n                  :ARG1 (k / key\n                        :poss p2))))", "# ::snt Since Rebecca and Tiffany are coming back late, he'll wait in the coffee shop.\n(w / wait-01\n      :ARG1 (h / he)\n      :location (s / shop\n            :mod (c / coffee))\n      :ARG1-of (c2 / cause-01\n            :ARG0 (c3 / come-01\n                  :ARG1 (a / and\n                        :op1 (p / person\n                              :name (n / name\n                                    :op1 \"Rebecca\"))\n                        :op2 (p2 / person\n                              :name (n2 / name\n                                    :op1 \"Tiffany\")))\n                  :ARG4 (b / back)\n                  :time (l / late))))"], "tree": ["(f / forget-01\n   :ARG1 (k / key\n            :poss (p2 / person :name (n / name :op1 \"Conrad\"))))", "(f / forget-01\n   :ARG0 (p2 / person :name (n / name :op1 \"Conrad\"))\n   :ARG1 (k / key\n            :poss p2))", "(f / forget-01\n   :ARG0 (p2 / person :name (n / name :op1 \"Conrad\"))\n   :ARG1 (k / key\n            :poss p2))", "(c / cause-01\n   :ARG0 (f / forget-01\n            :ARG0 (p2 / person :name (n / name :op1 \"Conrad\"))\n            :ARG1 (k / key\n                     :poss p2)))", "(p / possible-01\n   :polarity -\n   :ARG1 (e / enter-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Conrad\"))\n            :ARG1 (h / house))\n   :ARG1 (c / cause-01\n            :ARG0 (f / forget-01\n                     :ARG0 p2\n                     :ARG1 (k / key\n                              :poss p2))))", "(w / wait-01\n   :location (s / shop\n                :mod (c / coffee)))", "(c3 / come-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Rebecca\")))", "(c3 / come-01\n    :ARG1 (p2 / person\n              :name (n2 / name\n                        :op1 \"Tiffany\")))", "(c3 / come-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Rebecca\"))\n    :time (l / late))", "(c3 / come-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Rebecca\"))\n    :ARG4 (b / back))", "(c3 / come-01\n    :ARG1 (p2 / person\n              :name (n2 / name\n                        :op1 \"Tiffany\"))\n    :ARG4 (b / back)\n    :ARG4 b)", "(c3 / come-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Rebecca\"))\n    :ARG4 (b / back)\n    :time (l / late))", "(c3 / come-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Rebecca\"))\n    :ARG4 (b / back)\n    :time (l / late))", "(c3 / come-01\n    :ARG1 (p2 / person\n              :name (n2 / name\n                        :op1 \"Tiffany\"))\n    :ARG4 (b / back)\n    :ARG4 b\n    :time (l / late))", "(c3 / come-01\n    :ARG1 (p2 / person\n              :name (n2 / name\n                        :op1 \"Tiffany\"))\n    :ARG4 (b / back)\n    :ARG4 b\n    :time (l / late))", "(c2 / cause-01\n    :ARG0 (c3 / come-01\n              :ARG1 (p / person\n                       :name (n / name\n                                :op1 \"Rebecca\"))\n              :ARG4 (b / back)\n              :time (l / late)))", "(c3 / come-01\n    :ARG1 (a / and\n             :op1 (p / person\n                     :name (n / name\n                              :op1 \"Rebecca\"))\n             :op2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Tiffany\"))))", "(c2 / cause-01\n    :ARG0 (c3 / come-01\n              :ARG1 (p2 / person\n                        :name (n2 / name\n                                  :op1 \"Tiffany\"))\n              :ARG4 (b / back)\n              :ARG4 b\n              :time (l / late)))", "(c3 / come-01\n    :ARG1 (a / and\n             :op1 (p / person\n                     :name (n / name\n                              :op1 \"Rebecca\"))\n             :op2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Tiffany\")))\n    :time (l / late))", "(c3 / come-01\n    :ARG1 (a / and\n             :op1 (p / person\n                     :name (n / name\n                              :op1 \"Rebecca\"))\n             :op2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Tiffany\")))\n    :ARG4 (b / back))", "(c3 / come-01\n    :ARG1 (a / and\n             :op1 (p / person\n                     :name (n / name\n                              :op1 \"Rebecca\"))\n             :op2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Tiffany\")))\n    :ARG4 (b / back)\n    :time (l / late))", "(c3 / come-01\n    :ARG1 (a / and\n             :op1 (p / person\n                     :name (n / name\n                              :op1 \"Rebecca\"))\n             :op2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Tiffany\")))\n    :ARG4 (b / back)\n    :time (l / late))", "(c2 / cause-01\n    :ARG0 (c3 / come-01\n              :ARG1 (a / and\n                       :op1 (p / person\n                               :name (n / name\n                                        :op1 \"Rebecca\"))\n                       :op2 (p2 / person\n                                :name (n2 / name\n                                          :op1 \"Tiffany\")))\n              :ARG4 (b / back)\n              :time (l / late)))", "(w / wait-01\n   :ARG1 (h / he)\n   :location (s / shop\n                :mod (c / coffee))\n   :ARG1 (c2 / cause-01\n             :ARG0 (c3 / come-01\n                       :ARG1 (p / person\n                                :name (n / name\n                                         :op1 \"Rebecca\"))\n                       :ARG4 (b / back)\n                       :time (l / late))))", "(w / wait-01\n   :ARG1 (h / he)\n   :location (s / shop\n                :mod (c / coffee))\n   :ARG1 (c2 / cause-01\n             :ARG0 (c3 / come-01\n                       :ARG1 (p2 / person\n                                 :name (n2 / name\n                                           :op1 \"Tiffany\"))\n                       :ARG4 (b / back)\n                       :ARG4 b\n                       :time (l / late))))", "(w / wait-01\n   :ARG1 (h / he)\n   :location (s / shop\n                :mod (c / coffee))\n   :ARG1 (c2 / cause-01\n             :ARG0 (c3 / come-01\n                       :ARG1 (a / and\n                                :op1 (p / person\n                                        :name (n / name\n                                                 :op1 \"Rebecca\"))\n                                :op2 (p2 / person\n                                         :name (n2 / name\n                                                   :op1 \"Tiffany\")))\n                       :ARG4 (b / back)\n                       :time (l / late))))"], "smus": ["Conrad's keys were forgotten.", "Conrad forgot his keys.", "Conrad forgot his keys.", "Because Conrad forgot his keys.", "Conrad couldn't enter the house because he forgot his keys.", "Wait in the coffee shop.", "Rebecca is coming.", "Tiffany is coming.", "Rebecca is coming late.", "Rebecca is coming back.", "Tiffany is coming back.", "Rebecca is coming back late.", "Rebecca is coming back late.", "Tiffany is coming back late.", "Tiffany is coming back late.", "Because Rebecca is coming back late.", "Coming are Rebecca and Tiffany.", "Because Tiffany is coming back late.", "Rebecca and Tiffany are coming late.", "Rebecca and Tiffany are coming back.", "Rebecca and Tiffany are coming back late.", "Rebecca and Tiffany are coming back late.", "Because Rebecca and Tiffany are coming back late.", "He'll wait in the coffee shop for Rebecca to come back later.", "He'll wait in the coffee shop for Tiffany to come back later.", "He'll wait in the coffee shop for Rebecca and Tiffany coming back late."]}, {"instance_id": "samsum-490", "summary": "Mary is giving Matt Patrick's new phone number.", "summary_trees": ["# ::snt Mary is giving Matt Patrick's new phone number.\n(g / give-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Mary\"))\n      :ARG1 (n2 / number\n            :mod (p2 / phone)\n            :ARG1-of (n3 / new-01)\n            :poss (p3 / person\n                  :name (n4 / name\n                        :op1 \"Matt\"\n                        :op2 \"Patrick\")))\n      :ARG2 p3)"], "tree": ["(g / give-01\n   :ARG1 (n2 / number\n             :mod (p2 / phone)\n             :ARG1 (n3 / new-01)\n             :poss (p3 / person\n                       :name (n4 / name\n                                 :op1 \"Matt\"\n                                 :op2 \"Patrick\"))))", "(g / give-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mary\"))\n   :ARG1 (n2 / number\n             :mod (p2 / phone)\n             :ARG1 (n3 / new-01)\n             :poss (p3 / person\n                       :name (n4 / name\n                                 :op1 \"Matt\"\n                                 :op2 \"Patrick\"))))", "(g / give-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mary\"))\n   :ARG1 (n2 / number\n             :mod (p2 / phone)\n             :ARG1 (n3 / new-01)\n             :poss (p3 / person\n                       :name (n4 / name\n                                 :op1 \"Matt\"\n                                 :op2 \"Patrick\")))\n   :ARG2 p3)", "(g / give-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mary\"))\n   :ARG1 (n2 / number\n             :mod (p2 / phone)\n             :ARG1 (n3 / new-01)\n             :poss (p3 / person\n                       :name (n4 / name\n                                 :op1 \"Matt\"\n                                 :op2 \"Patrick\")))\n   :ARG2 p3)"], "smus": ["Giving Matt Patrick's new phone number.", "Mary was giving Matt Patrick's new phone number.", "Mary was giving Matthew Patrick's new phone number.", "Mary was giving Matthew Patrick's new phone number."]}, {"instance_id": "samsum-491", "summary": "Max's sister is studying in Shanghai and she already speaks Chinese. She doesn't find the whole experience amazing but she believes it's a good investment.", "summary_trees": ["# ::snt Max's sister is studying in Shanghai and she already speaks Chinese.\n(a / and\n      :op1 (s / study-01\n            :ARG0 (p / person\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 (p2 / person\n                              :name (n / name\n                                    :op1 \"Max\"))\n                        :ARG2 (s2 / sister)))\n            :location (c / city\n                  :name (n2 / name\n                        :op1 \"Shanghai\")))\n      :op2 (s3 / speak-01\n            :ARG0 p\n            :ARG3 (l / language\n                  :name (n3 / name\n                        :op1 \"Chinese\"))\n            :time (a2 / already)))", "# ::snt She doesn't find the whole experience amazing\n(f / find-02\n      :polarity -\n      :ARG0 (s / she)\n      :ARG1 (a / amaze-01\n            :ARG0 (e / experience\n                  :mod (w / whole))\n            :ARG1 s))", "# ::snt but she believes it's a good investment.\n(c / contrast-01\n      :ARG2 (b / believe-01\n            :ARG0 (s / she)\n            :ARG1 (ii / invest-01\n                  :ARG1 (ii2 / it)\n                  :ARG1-of (g / good-02))))"], "tree": ["(s3 / speak-01\n    :ARG0 (p / person)\n    :time (a2 / already))", "(s / study-01\n   :location (c / city\n                :name (n2 / name\n                          :op1 \"Shanghai\")))", "(h / have-rel-role-91\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Max\"))\n   :ARG2 (s2 / sister))", "(s3 / speak-01\n    :ARG0 (p / person)\n    :ARG3 (l / language\n             :name (n3 / name\n                       :op1 \"Chinese\"))\n    :time (a2 / already))", "(s / study-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :name (n / name\n                                        :op1 \"Max\"))\n                     :ARG2 (s2 / sister))))", "(s / study-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :name (n / name\n                                        :op1 \"Max\"))\n                     :ARG2 (s2 / sister)))\n   :location (c / city\n                :name (n2 / name\n                          :op1 \"Shanghai\")))", "(f / find-02\n   :polarity -\n   :ARG0 (s / she)\n   :ARG1 (a / amaze-01\n            :ARG0 (e / experience\n                     :mod (w / whole))\n            :ARG1 s))", "(ii / invest-01\n    :ARG1 (ii2 / it)\n    :ARG1 (g / good-02))", "(b / believe-01\n   :ARG1 (ii / invest-01\n             :ARG1 (ii2 / it)\n             :ARG1 (g / good-02)))", "(b / believe-01\n   :ARG0 (s / she)\n   :ARG1 (ii / invest-01\n             :ARG1 (ii2 / it)\n             :ARG1 (g / good-02)))", "(b / believe-01\n   :ARG0 (s / she)\n   :ARG1 (ii / invest-01\n             :ARG1 (ii2 / it)\n             :ARG1 (g / good-02)))", "(c / contrast-01\n   :ARG2 (b / believe-01\n            :ARG0 (s / she)\n            :ARG1 (ii / invest-01\n                      :ARG1 (ii2 / it)\n                      :ARG1 (g / good-02))))"], "smus": ["People already speaks.", "Studying in Shanghai.", "Max's sister", "People already speaks Chinese.", "Max's sister is studying.", "Max's sister is studying in Shanghai.", "She didn't find the whole experience amazing.", "It's a good investment.", "It believes to be a good investment.", "She believes it is a good investment.", "She believes it is a good investment.", "But she believes it is a good investment."]}, {"instance_id": "samsum-492", "summary": "Derek closed some deals today. Phil didn't manage to do it.", "summary_trees": ["# ::snt Derek closed some deals today.\n(c / close-03\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Derek\"))\n      :ARG1 (d / deal-01\n            :quant (s / some))\n      :time (t / today))", "# ::snt Phil didn't manage to do it.\n(m / manage-02\n      :polarity -\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Phil\"))\n      :ARG1 (d / do-02\n            :ARG0 p\n            :ARG1 (ii / it)))"], "tree": ["(c / close-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Derek\"))\n   :ARG1 (d / deal-01\n            :quant (s / some))\n   :time (t / today))", "(m / manage-02\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Phil\"))\n   :ARG1 (d / do-02\n            :ARG0 p\n            :ARG1 (ii / it)))"], "smus": ["Derek closed some deals today.", "Phil didn't manage to do it."]}, {"instance_id": "samsum-493", "summary": "Julia knew Tim was gay, while Adam and Nate didn't. ", "summary_trees": ["# ::snt Julia knew Tim was gay, while Adam and Nate didn't.\n(c / contrast-01\n      :ARG1 (k / know-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Julia\"))\n            :ARG1 (g / gay-01\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Tim\"))))\n      :ARG2 (k2 / know-01\n            :polarity -\n            :ARG0 (a / and\n                  :op1 (p3 / person\n                        :name (n3 / name\n                              :op1 \"Adam\"))\n                  :op2 (p4 / person\n                        :name (n4 / name\n                              :op1 \"Nate\")))\n            :ARG1 g))"], "tree": ["(g / gay-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Tim\")))", "(g / gay-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Tim\")))", "(k2 / know-01\n    :polarity -\n    :ARG0 (p3 / person\n              :name (n3 / name\n                        :op1 \"Adam\")))", "(k2 / know-01\n    :polarity -\n    :ARG0 (p3 / person\n              :name (n3 / name\n                        :op1 \"Adam\")))", "(k2 / know-01\n    :polarity -\n    :ARG0 (p4 / person\n              :name (n4 / name\n                        :op1 \"Nate\"))\n    :ARG1 (g / gay-01))", "(k2 / know-01\n    :polarity -\n    :ARG0 (p4 / person\n              :name (n4 / name\n                        :op1 \"Nate\"))\n    :ARG1 (g / gay-01))", "(k / know-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Julia\"))\n   :ARG1 (g / gay-01\n            :ARG1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Tim\"))))", "(k / know-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Julia\"))\n   :ARG1 (g / gay-01\n            :ARG1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Tim\"))))", "(c / contrast-01\n   :ARG1 (k / know-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Julia\"))\n            :ARG1 (g / gay-01\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Tim\"))))\n   :ARG2 (k2 / know-01\n             :polarity -\n             :ARG0 (p3 / person\n                       :name (n3 / name\n                                 :op1 \"Adam\"))))", "(c / contrast-01\n   :ARG1 (k / know-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Julia\"))\n            :ARG1 (g / gay-01\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Tim\"))))\n   :ARG2 (k2 / know-01\n             :polarity -\n             :ARG0 (p3 / person\n                       :name (n3 / name\n                                 :op1 \"Adam\"))))", "(c / contrast-01\n   :ARG1 (k / know-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Julia\"))\n            :ARG1 (g / gay-01\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Tim\"))))\n   :ARG2 (k2 / know-01\n             :polarity -\n             :ARG0 (p4 / person\n                       :name (n4 / name\n                                 :op1 \"Nate\"))\n             :ARG1 g))", "(c / contrast-01\n   :ARG1 (k / know-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Julia\"))\n            :ARG1 (g / gay-01\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Tim\"))))\n   :ARG2 (k2 / know-01\n             :polarity -\n             :ARG0 (p4 / person\n                       :name (n4 / name\n                                 :op1 \"Nate\"))\n             :ARG1 g))", "(c / contrast-01\n   :ARG1 (k / know-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Julia\"))\n            :ARG1 (g / gay-01\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Tim\"))))\n   :ARG2 (k2 / know-01\n             :polarity -\n             :ARG0 (a / and\n                      :op1 (p3 / person\n                               :name (n3 / name\n                                         :op1 \"Adam\"))\n                      :op2 (p4 / person\n                               :name (n4 / name\n                                         :op1 \"Nate\")))\n             :ARG1 g))", "(c / contrast-01\n   :ARG1 (k / know-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Julia\"))\n            :ARG1 (g / gay-01\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Tim\"))))\n   :ARG2 (k2 / know-01\n             :polarity -\n             :ARG0 (a / and\n                      :op1 (p3 / person\n                               :name (n3 / name\n                                         :op1 \"Adam\"))\n                      :op2 (p4 / person\n                               :name (n4 / name\n                                         :op1 \"Nate\")))\n             :ARG1 g))"], "smus": ["Tim is gay.", "Tim is gay.", "Adam didn't know.", "Adam didn't know.", "Nate didn't know that Gay.", "Nate didn't know that Gay.", "Julia knew Tim was gay.", "Julia knew Tim was gay.", "Julia knew Tim was gay, Adam didn't.", "Julia knew Tim was gay, Adam didn't.", "Julia knew Tim was gay, Nate didn't.", "Julia knew Tim was gay, Nate didn't.", "Julia knew Tim was gay, Adam and Nate didn't.", "Julia knew Tim was gay, Adam and Nate didn't."]}, {"instance_id": "samsum-494", "summary": "Amanda and Peter don't like what the man in dreads looks like, but Dan does.", "summary_trees": ["# ::snt Amanda and Peter don't like what the man in dreads looks like, but Dan does.\n(c / contrast-01\n      :ARG1 (d / dislike-01\n            :ARG0 (a / and\n                  :op1 (p / person\n                        :name (n / name\n                              :op1 \"Amanda\"))\n                  :op2 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Peter\")))\n            :ARG1 (t / thing\n                  :ARG1-of (l / look-02\n                        :ARG0 (m / man\n                              :mod (d2 / dread)))))\n      :ARG2 (d3 / dislike-01\n            :ARG0 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Dan\"))\n            :ARG1 t))"], "tree": ["(l / look-02\n   :ARG0 (m / man\n            :mod (d2 / dread)))", "(c / contrast-01\n   :ARG1 (d / dislike-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Amanda\"))\n            :ARG1 (t / thing\n                     :ARG1 (l / look-02\n                              :ARG0 (m / man\n                                       :mod (d2 / dread)))))\n   :ARG2 (d3 / dislike-01\n             :ARG0 (p3 / person\n                       :name (n3 / name\n                                 :op1 \"Dan\"))\n             :ARG1 t))", "(c / contrast-01\n   :ARG1 (d / dislike-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Amanda\"))\n            :ARG1 (t / thing\n                     :ARG1 (l / look-02\n                              :ARG0 (m / man\n                                       :mod (d2 / dread)))))\n   :ARG2 (d3 / dislike-01\n             :ARG0 (p3 / person\n                       :name (n3 / name\n                                 :op1 \"Dan\"))\n             :ARG1 t))", "(c / contrast-01\n   :ARG1 (d / dislike-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Peter\"))\n            :ARG1 (t / thing\n                     :ARG1 (l / look-02\n                              :ARG0 (m / man\n                                       :mod (d2 / dread))))\n            :ARG1 t)\n   :ARG2 (d3 / dislike-01\n             :ARG0 (p3 / person\n                       :name (n3 / name\n                                 :op1 \"Dan\"))\n             :ARG1 t))", "(c / contrast-01\n   :ARG1 (d / dislike-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Peter\"))\n            :ARG1 (t / thing\n                     :ARG1 (l / look-02\n                              :ARG0 (m / man\n                                       :mod (d2 / dread))))\n            :ARG1 t)\n   :ARG2 (d3 / dislike-01\n             :ARG0 (p3 / person\n                       :name (n3 / name\n                                 :op1 \"Dan\"))\n             :ARG1 t))"], "smus": ["The dreads man looks.", "Amand doesn't like how a dreads man looks, but Dan does.", "Amand doesn't like how a dreads man looks, but Dan does.", "Peter doesn't like how a dreads man looks, but Dan does.", "Peter doesn't like how a dreads man looks, but Dan does."]}, {"instance_id": "samsum-495", "summary": "Mico and Jeff will go to the village party. Jeff will drive.", "summary_trees": ["# ::snt Mico and Jeff will go to the village party.\n(g / go-02\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Mico\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Jeff\")))\n      :ARG4 (p3 / party-01\n            :mod (v / village)))", "# ::snt Jeff will drive.\n(d / drive-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jeff\")))"], "tree": ["(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mico\")))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Jeff\")))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mico\"))\n   :ARG4 (p3 / party-01\n             :mod (v / village)))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mico\"))\n   :ARG4 (p3 / party-01\n             :mod (v / village)))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Jeff\"))\n   :ARG4 (p3 / party-01\n             :mod (v / village))\n   :ARG4 p3)", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Jeff\"))\n   :ARG4 (p3 / party-01\n             :mod (v / village))\n   :ARG4 p3)", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Mico\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Jeff\"))))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Mico\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Jeff\")))\n   :ARG4 (p3 / party-01\n             :mod (v / village)))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Mico\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Jeff\")))\n   :ARG4 (p3 / party-01\n             :mod (v / village)))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Jeff\")))", "(d / drive-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jeff\")))", "(d / drive-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jeff\")))"], "smus": ["Micco, go.", "Jeff, go.", "Micco will go to the village party.", "Micco will go to the village party.", "Jeff would go to a village party.", "Jeff would go to a village party.", "Micco and Jeff will go.", "Micco and Jeff will go to a village party.", "Micco and Jeff will go to a village party.", "Jeff, go.", "Jeff would drive.", "Jeff would drive."]}, {"instance_id": "samsum-496", "summary": "Jane, Anne and Ella have been to La Perle. Jane ate cheesecake and got an allergic reaction. They are getting out of ER. ", "summary_trees": ["# ::snt Jane, Anne and Ella have been to La Perle.\n(b / be-located-at-91\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Jane\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Anne\"))\n            :op3 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Ella\")))\n      :ARG2 (l / location\n            :name (n4 / name\n                  :op1 \"La\"\n                  :op2 \"Perle\")))", "# ::snt Jane ate cheesecake and got an allergic reaction.\n(a / and\n      :op1 (e / eat-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Jane\"))\n            :ARG1 (c / cheesecake))\n      :op2 (r / react-01\n            :ARG0 p\n            :ARG2 (a2 / allergy)))", "# ::snt They are getting out of ER.\n(g / get-05\n      :ARG1 (t / they)\n      :ARG2 (o / out-06\n            :ARG1 t\n            :ARG2 (e / emergency)))"], "tree": ["(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Jane\"))\n   :ARG2 (l / location\n            :name (n4 / name\n                      :op1 \"La\"\n                      :op2 \"Perle\")))", "(b / be-located-at-91\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Anne\"))\n   :ARG2 (l / location\n            :name (n4 / name\n                      :op1 \"La\"\n                      :op2 \"Perle\")))", "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Jane\"))\n   :ARG2 (l / location\n            :name (n4 / name\n                      :op1 \"La\"\n                      :op2 \"Perle\")))", "(b / be-located-at-91\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Anne\"))\n   :ARG2 (l / location\n            :name (n4 / name\n                      :op1 \"La\"\n                      :op2 \"Perle\")))", "(b / be-located-at-91\n   :ARG1 (p3 / person\n             :name (n3 / name\n                       :op1 \"Ella\"))\n   :ARG2 (l / location\n            :name (n4 / name\n                      :op1 \"La\"\n                      :op2 \"Perle\"))\n   :ARG2 l)", "(b / be-located-at-91\n   :ARG1 (p3 / person\n             :name (n3 / name\n                       :op1 \"Ella\"))\n   :ARG2 (l / location\n            :name (n4 / name\n                      :op1 \"La\"\n                      :op2 \"Perle\"))\n   :ARG2 l)", "(b / be-located-at-91\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Jane\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Anne\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Ella\")))\n   :ARG2 (l / location\n            :name (n4 / name\n                      :op1 \"La\"\n                      :op2 \"Perle\")))", "(b / be-located-at-91\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Jane\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Anne\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Ella\")))\n   :ARG2 (l / location\n            :name (n4 / name\n                      :op1 \"La\"\n                      :op2 \"Perle\")))", "(r / react-01\n   :ARG0 (p / person :name (n / name :op1 \"Jane\"))\n   :ARG2 (a2 / allergy))", "(e / eat-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jane\")))", "(e / eat-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jane\"))\n   :ARG1 (c / cheesecake))", "(e / eat-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jane\"))\n   :ARG1 (c / cheesecake))", "(o / out-06\n   :ARG1 (t / they)\n   :ARG2 (e / emergency))", "(o / out-06\n   :ARG1 (t / they)\n   :ARG2 (e / emergency))", "(g / get-05\n   :ARG1 (t / they)\n   :ARG2 (o / out-06\n            :ARG1 t\n            :ARG2 (e / emergency)))", "(g / get-05\n   :ARG1 (t / they)\n   :ARG2 (o / out-06\n            :ARG1 t\n            :ARG2 (e / emergency)))"], "smus": ["Jane at La Perle.", "Anne at La Perle.", "Jane at La Perle.", "Anne at La Perle.", "Ella is at La Perle.", "Ella is at La Perle.", "Jane, Anne and Ella are at La Perle.", "Jane, Anne and Ella are at La Perle.", "Jane had an allergic reaction.", "Jane ate.", "Jane ate cheesecake.", "Jane ate cheesecake.", "They are out of an emergency.", "They are out of an emergency.", "They are getting out of an emergency.", "They are getting out of an emergency."]}, {"instance_id": "samsum-497", "summary": "Marsha and John planned the trip. They will spend a week on the beach with Cynthia, Mohammad and Gavin. They will all stay in a hotel in Nosy Be.", "summary_trees": ["# ::snt Marsha and John planned the trip.\n(p / plan-01\n      :ARG0 (a / and\n            :op1 (p2 / person\n                  :name (n / name\n                        :op1 \"Marsha\"))\n            :op2 (p3 / person\n                  :name (n2 / name\n                        :op1 \"John\")))\n      :ARG1 (t / trip-03))", "# ::snt They will spend a week on the beach with Cynthia, Mohammad and Gavin.\n(s / spend-02\n      :ARG0 (t / they)\n      :ARG1 (t2 / temporal-quantity\n            :quant 1\n            :unit (w / week))\n      :ARG2 (b / beach)\n      :accompanier (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Cynthia\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Mohammad\"))\n            :op3 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Gavin\"))))", "# ::snt They will all stay in a hotel in Nosy Be.\n(s / stay-01\n      :ARG1 (t / they\n            :mod (a / all))\n      :location (h / hotel\n            :location (c / city\n                  :name (n / name\n                        :op1 \"Nosy\"\n                        :op2 \"Be\"))))"], "tree": ["(p / plan-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"John\"))\n   :ARG1 (t / trip-03)\n   :ARG1 t)", "(p / plan-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"John\"))\n   :ARG1 (t / trip-03)\n   :ARG1 t)", "(p / plan-01\n   :ARG0 (a / and\n            :op1 (p2 / person\n                     :name (n / name\n                              :op1 \"Marsha\"))\n            :op2 (p3 / person\n                     :name (n2 / name\n                               :op1 \"John\")))\n   :ARG1 (t / trip-03))", "(p / plan-01\n   :ARG0 (a / and\n            :op1 (p2 / person\n                     :name (n / name\n                              :op1 \"Marsha\"))\n            :op2 (p3 / person\n                     :name (n2 / name\n                               :op1 \"John\")))\n   :ARG1 (t / trip-03))", "(s / spend-02\n   :accompanier (p / person\n                   :name (n / name\n                            :op1 \"Cynthia\")))", "(s / spend-02\n   :accompanier (p2 / person\n                    :name (n2 / name\n                              :op1 \"Mohammad\")))", "(s / spend-02\n   :accompanier (p3 / person\n                    :name (n3 / name\n                              :op1 \"Gavin\")))", "(s / spend-02\n   :ARG0 (t / they)\n   :ARG1 (t2 / temporal-quantity\n             :quant 1\n             :unit (w / week))\n   :ARG2 (b / beach))", "(s / spend-02\n   :ARG0 (t / they)\n   :ARG1 (t2 / temporal-quantity\n             :quant 1\n             :unit (w / week))\n   :ARG2 (b / beach)\n   :accompanier (p / person\n                   :name (n / name\n                            :op1 \"Cynthia\")))", "(s / spend-02\n   :ARG0 (t / they)\n   :ARG1 (t2 / temporal-quantity\n             :quant 1\n             :unit (w / week))\n   :ARG2 (b / beach)\n   :accompanier (p2 / person\n                    :name (n2 / name\n                              :op1 \"Mohammad\")))", "(s / spend-02\n   :ARG0 (t / they)\n   :ARG1 (t2 / temporal-quantity\n             :quant 1\n             :unit (w / week))\n   :ARG2 (b / beach)\n   :accompanier (p3 / person\n                    :name (n3 / name\n                              :op1 \"Gavin\")))", "(s / spend-02\n   :accompanier (a / and\n                   :op1 (p / person\n                           :name (n / name\n                                    :op1 \"Cynthia\"))\n                   :op2 (p2 / person\n                            :name (n2 / name\n                                      :op1 \"Mohammad\"))\n                   :op3 (p3 / person\n                            :name (n3 / name\n                                      :op1 \"Gavin\"))))", "(s / spend-02\n   :ARG0 (t / they)\n   :ARG1 (t2 / temporal-quantity\n             :quant 1\n             :unit (w / week))\n   :ARG2 (b / beach)\n   :accompanier (a / and\n                   :op1 (p / person\n                           :name (n / name\n                                    :op1 \"Cynthia\"))\n                   :op2 (p2 / person\n                            :name (n2 / name\n                                      :op1 \"Mohammad\"))\n                   :op3 (p3 / person\n                            :name (n3 / name\n                                      :op1 \"Gavin\"))))", "(s / stay-01\n   :location (h / hotel\n                :location (c / city\n                             :name (n / name\n                                      :op1 \"Nosy\"\n                                      :op2 \"Be\"))))", "(s / stay-01\n   :location (h / hotel\n                :location (c / city\n                             :name (n / name\n                                      :op1 \"Nosy\"\n                                      :op2 \"Be\"))))", "(s / stay-01\n   :ARG1 (t / they\n            :mod (a / all))\n   :location (h / hotel\n                :location (c / city\n                             :name (n / name\n                                      :op1 \"Nosy\"\n                                      :op2 \"Be\"))))", "(s / stay-01\n   :ARG1 (t / they\n            :mod (a / all))\n   :location (h / hotel\n                :location (c / city\n                             :name (n / name\n                                      :op1 \"Nosy\"\n                                      :op2 \"Be\"))))"], "smus": ["John planned the trip.", "John planned the trip.", "Marsha and John planned the trip.", "Marsha and John planned the trip.", "Spend with Cynthia.", "Spend with Mohammad.", "Spend with Gavin.", "They'll spend a week at the beach.", "They'll spend a week at the beach with Cynthia.", "They would spend a week at the beach with Mohammad.", "They'll spend a week at the beach with Gavin.", "Spend with Cynthia, Mohammad and Gavin.", "They'll spend a week at the beach with Cynthia, Mohammad and Gavin.", "Stay in a hotel in Nosy Be.", "Stay in a hotel in Nosy Be.", "They all stay in a hotel in Nosy Be.", "They all stay in a hotel in Nosy Be."]}, {"instance_id": "samsum-498", "summary": "Annette is sick. James is going to the Jesus bar. Oli couldn't find anyone near the bar.", "summary_trees": ["# ::snt Annette is sick.\n(s / sick-05\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Annette\")))", "# ::snt James is going to the Jesus bar.\n(g / go-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"James\"))\n      :ARG4 (b / bar\n            :mod (p2 / person\n                  :name (n2 / name\n                        :op1 \"Jesus\"))))", "# ::snt Oli couldn't find anyone near the bar.\n(p / possible-01\n      :polarity -\n      :ARG1 (f / find-01\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Oli\"))\n            :ARG1 (a / anyone\n                  :ARG1-of (n2 / near-02\n                        :ARG2 (b / bar)))))"], "tree": ["(s / sick-05\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Annette\")))", "(s / sick-05\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Annette\")))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"James\")))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"James\"))\n   :ARG4 (b / bar\n            :mod (p2 / person\n                     :name (n2 / name\n                               :op1 \"Jesus\"))))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"James\"))\n   :ARG4 (b / bar\n            :mod (p2 / person\n                     :name (n2 / name\n                               :op1 \"Jesus\"))))", "(p / possible-01\n   :polarity -\n   :ARG1 (f / find-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Oli\"))\n            :ARG1 (a / anyone\n                     :ARG1 (n2 / near-02\n                               :ARG2 (b / bar)))))"], "smus": ["Annette is sick.", "Annette is sick.", "James is going.", "James was going to the Jesus bar.", "James was going to the Jesus bar.", "Li couldn't find anyone near the bar."]}, {"instance_id": "samsum-499", "summary": "Maria, Kate, Tommy and Sam are going to a conference. Tommy will use Prezi instead of Power Point. He has a Prezi subscription for $10 a month.", "summary_trees": ["# ::snt Maria, Kate, Tommy and Sam are going to a conference.\n(g / go-02\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Maria\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Kate\"))\n            :op3 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Tommy\"))\n            :op4 (p4 / person\n                  :name (n4 / name\n                        :op1 \"Sam\")))\n      :ARG4 (c / conference))", "# ::snt Tommy will use Prezi instead of Power Point.\n(u / use-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Tommy\"))\n      :ARG1 (p2 / product\n            :name (n2 / name\n                  :op1 \"Prezi\")\n            :ARG1-of (ii / instead-of-91\n                  :ARG2 (p3 / product\n                        :name (n3 / name\n                              :op1 \"Power\"\n                              :op2 \"Point\")))))", "# ::snt He has a Prezi subscription for $10 a month.\n(h / have-03\n      :ARG0 (h2 / he)\n      :ARG1 (s / subscribe-01\n            :ARG0 h2\n            :ARG1 (c / company\n                  :name (n / name\n                        :op1 \"Prezi\"))\n            :ARG3 (r / rate-entity-91\n                  :ARG1 (m / monetary-quantity\n                        :quant 10\n                        :unit (d / dollar))\n                  :ARG2 (t / temporal-quantity\n                        :quant 1\n                        :unit (m2 / month)))))"], "tree": ["(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Maria\")))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Kate\")))", "(g / go-02\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Tommy\")))", "(g / go-02\n   :ARG0 (p4 / person\n             :name (n4 / name\n                       :op1 \"Sam\")))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Maria\"))\n   :ARG4 (c / conference))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Kate\"))\n   :ARG4 (c / conference))", "(g / go-02\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Tommy\"))\n   :ARG4 (c / conference))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Maria\"))\n   :ARG4 (c / conference))", "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Kate\"))\n   :ARG4 (c / conference))", "(g / go-02\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Tommy\"))\n   :ARG4 (c / conference))", "(g / go-02\n   :ARG0 (p4 / person\n             :name (n4 / name\n                       :op1 \"Sam\"))\n   :ARG4 (c / conference)\n   :ARG4 c)", "(g / go-02\n   :ARG0 (p4 / person\n             :name (n4 / name\n                       :op1 \"Sam\"))\n   :ARG4 (c / conference)\n   :ARG4 c)", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Maria\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Kate\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Tommy\"))\n            :op4 (p4 / person\n                     :name (n4 / name\n                               :op1 \"Sam\"))))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Maria\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Kate\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Tommy\"))\n            :op4 (p4 / person\n                     :name (n4 / name\n                               :op1 \"Sam\")))\n   :ARG4 (c / conference))", "(g / go-02\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Maria\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Kate\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Tommy\"))\n            :op4 (p4 / person\n                     :name (n4 / name\n                               :op1 \"Sam\")))\n   :ARG4 (c / conference))", "(u / use-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tommy\")))", "(ii / instead-of-91\n    :ARG2 (p3 / product\n              :name (n3 / name\n                        :op1 \"Power\"\n                        :op2 \"Point\")))", "(u / use-01\n   :ARG1 (p2 / product\n             :name (n2 / name\n                       :op1 \"Prezi\")\n             :ARG1 (ii / instead-of-91\n                       :ARG2 (p3 / product\n                                 :name (n3 / name\n                                           :op1 \"Power\"\n                                           :op2 \"Point\")))))", "(u / use-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tommy\"))\n   :ARG1 (p2 / product\n             :name (n2 / name\n                       :op1 \"Prezi\")\n             :ARG1 (ii / instead-of-91\n                       :ARG2 (p3 / product\n                                 :name (n3 / name\n                                           :op1 \"Power\"\n                                           :op2 \"Point\")))))", "(u / use-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tommy\"))\n   :ARG1 (p2 / product\n             :name (n2 / name\n                       :op1 \"Prezi\")\n             :ARG1 (ii / instead-of-91\n                       :ARG2 (p3 / product\n                                 :name (n3 / name\n                                           :op1 \"Power\"\n                                           :op2 \"Point\")))))", "(r / rate-entity-91\n   :ARG1 (m / monetary-quantity\n            :quant 10\n            :unit (d / dollar))\n   :ARG2 (t / temporal-quantity\n            :quant 1\n            :unit (m2 / month)))", "(r / rate-entity-91\n   :ARG1 (m / monetary-quantity\n            :quant 10\n            :unit (d / dollar))\n   :ARG2 (t / temporal-quantity\n            :quant 1\n            :unit (m2 / month)))", "(s / subscribe-01\n   :ARG0 (h2 / he)\n   :ARG1 (c / company\n            :name (n / name\n                     :op1 \"Prezi\"))\n   :ARG3 (r / rate-entity-91\n            :ARG1 (m / monetary-quantity\n                     :quant 10\n                     :unit (d / dollar))\n            :ARG2 (t / temporal-quantity\n                     :quant 1\n                     :unit (m2 / month))))", "(h / have-03\n   :ARG0 (h2 / he)\n   :ARG1 (s / subscribe-01\n            :ARG0 h2\n            :ARG1 (c / company\n                     :name (n / name\n                              :op1 \"Prezi\"))\n            :ARG3 (r / rate-entity-91\n                     :ARG1 (m / monetary-quantity\n                              :quant 10\n                              :unit (d / dollar))\n                     :ARG2 (t / temporal-quantity\n                              :quant 1\n                              :unit (m2 / month)))))", "(h / have-03\n   :ARG0 (h2 / he)\n   :ARG1 (s / subscribe-01\n            :ARG0 h2\n            :ARG1 (c / company\n                     :name (n / name\n                              :op1 \"Prezi\"))\n            :ARG3 (r / rate-entity-91\n                     :ARG1 (m / monetary-quantity\n                              :quant 10\n                              :unit (d / dollar))\n                     :ARG2 (t / temporal-quantity\n                              :quant 1\n                              :unit (m2 / month)))))"], "smus": ["Maria is going.", "Kate is going.", "Tommy is going.", "Sam is going.", "Maria is going to the conference.", "Kate is going to the conference.", "Tommy was going to the conference.", "Maria is going to the conference.", "Kate is going to the conference.", "Tommy was going to the conference.", "Sam is going to the conference.", "Sam is going to the conference.", "Maria, Kate, Tom and Sam are going.", "Maria, Kate, Tom and Sam are going to the conference.", "Maria, Kate, Tom and Sam are going to the conference.", "Use Tom.", "instead of Power Point.", "Use Prezi instead of Power Point.", "Tommy would use Prezi over Power Point.", "Tommy would use Prezi over Power Point.", "10 bucks a month", "10 bucks a month", "He subscribes to Prezi at $10 a month.", "He has a Prezi subscription of $10 a month.", "He has a Prezi subscription of $10 a month."]}]