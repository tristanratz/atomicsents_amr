[{"instance_id": "realsumm-0", "summary": "<t> Anuradha Koirala and 425 young women and girls have been sleeping outdoors because of aftershocks . </t> <t> Pushpa Basnet and 45 children Koirala cares for were forced to evacuate Basnet and children residence . </t> <t> Seven other CNN Heroes and Heroes and organizations organizations now assisting in relief efforts . </t>", "summary_trees": ["# ::snt  Anuradha Koirala and 425 young women and girls have been sleeping outdoors because of aftershocks . \n(c / cause-01\n      :ARG0 (a / aftershock)\n      :ARG1 (s / sleep-01\n            :ARG0 (a2 / and\n                  :op1 (p / person\n                        :name (n / name\n                              :op1 \"Anuradha\"\n                              :op2 \"Koirala\"))\n                  :op2 (w / woman)\n                  :op3 (g / girl)\n                  :quant 425\n                  :mod (y / young))\n            :location (o / outdoors)))", "# ::snt  Pushpa Basnet and 45 children Koirala cares for were forced to evacuate Basnet and children residence . \n(f / force-01\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Pushpa\"\n                        :op2 \"Basnet\"))\n            :op2 (c / child\n                  :quant 45\n                  :ARG1-of (c2 / care-03\n                        :ARG0 (p2 / person\n                              :name (n2 / name\n                                    :op1 \"Koirala\")))))\n      :ARG2 (e / evacuate-01\n            :ARG1 (a2 / and\n                  :op1 p\n                  :op2 (c3 / child\n                        :ARG0-of (r / reside-01\n                              :ARG1 p)))))", "# ::snt  Seven other CNN Heroes and Heroes and organizations organizations now assisting in relief efforts . \n(a / assist-01\n      :ARG0 (o / organization\n            :quant 7\n            :mod (o2 / other)\n            :mod (p / publication\n                  :name (n / name\n                        :op1 \"CNN\"))\n            :mod (o3 / organization\n                  :name n\n                  :op1 \"Heroes\"\n                  :op2 \"and\"\n                  :op3 \"Heroes\"))\n      :mod (o4 / organization)\n      :ARG2 (e / effort-01\n            :ARG1 (r / relieve-01))\n      :time (n2 / now))"], "tree": ["(c / cause-01\n   :ARG0 (a / aftershock)\n   :ARG1 (s / sleep-01\n            :location (o / outdoors)))", "(c / cause-01\n   :ARG0 (a / aftershock)\n   :ARG1 (s / sleep-01\n            :ARG0 (w / woman)))", "(s / sleep-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Anuradha\"\n                     :op2 \"Koirala\"))\n   :location (o / outdoors))", "(s / sleep-01\n   :ARG0 (w / woman)\n   :location (o / outdoors))", "(a2 / and\n    :op2 (w / woman)\n    :op3 (g / girl))", "(f / force-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Pushpa\"\n                     :op2 \"Basnet\")))", "(f / force-01\n   :ARG2 (e / evacuate-01\n            :ARG1 (p / person :name (n / name :op1 \"Pushpa\" :op2 \"Basnet\"))))", "(f / force-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Pushpa\"\n                     :op2 \"Basnet\"))\n   :ARG2 (e / evacuate-01\n            :ARG1 (a2 / and\n                      :op2 (c3 / child\n                               :ARG0 (r / reside-01\n                                        :ARG1 p)))))", "(f / force-01\n   :ARG1 (c / child\n            :quant 45)\n   :ARG2 (e / evacuate-01\n            :ARG1 (a2 / and\n                      :op1 (p / person :name (n / name :op1 \"Pushpa\" :op2 \"Basnet\")))))", "(a / assist-01\n   :ARG0 (o / organization\n            :mod (o3 / organization\n                     :op2 \"and\"))\n   :ARG2 (e / effort-01\n            :ARG1 (r / relieve-01)))", "(a / assist-01\n   :mod (o4 / organization)\n   :ARG2 (e / effort-01\n            :ARG1 (r / relieve-01)))", "(a / assist-01\n   :mod (o4 / organization)\n   :time (n2 / now))", "(a / assist-01\n   :mod (o4 / organization)\n   :ARG2 (e / effort-01\n            :ARG1 (r / relieve-01))\n   :time (n2 / now))"], "smus": ["Aftershocks cause sleeping outdoors.", "The women were sleeping because of the aftershocks.", "Anuradha koirala is sleeping outdoors.", "Women sleeping outdoors.", "Women and girls.", "Pushpa Basnet was forced.", "Pushpa Basnet was forced to evacuate.", "Pushpa Basnet was forced to evacuate along with her resident children.", "45 children were forced to evacuate including Pushpa Basnet.", "Organizations and organizations are assisting in relief efforts.", "Organizations are assisting in relief efforts.", "Organizations are now assisting.", "Organizations are now assisting in relief efforts."]}, {"instance_id": "realsumm-1", "summary": "<t> Students from the University of Surrey discovered thousands of colonies . </t> <t> Students submerged coins and notes in agar to accelerate growth pf bacteria . </t> <t> Most were harmless on the money , but one caused boils and spots . </t> <t> Previous studies have revealed MRSA bacteria on notes and coins . </t>", "summary_trees": ["# ::snt  Students from the University of Surrey discovered thousands of colonies . \n(d / discover-01\n      :ARG0 (p / person\n            :ARG0-of (s / study-01)\n            :source (u / university\n                  :name (n / name\n                        :op1 \"University\"\n                        :op2 \"of\"\n                        :op3 \"Surrey\")))\n      :ARG1 (c / colony\n            :quant (m / multiple\n                  :op1 1000)))", "# ::snt  Students submerged coins and notes in agar to accelerate growth pf bacteria . \n(s / submerge-01\n      :ARG0 (p / person\n            :ARG0-of (s2 / study-01))\n      :ARG1 (a / and\n            :op1 (c / coin)\n            :op2 (n / note))\n      :ARG2 (a2 / agar)\n      :purpose (a3 / accelerate-01\n            :ARG0 p\n            :ARG1 (g / grow-03\n                  :ARG1 (b / bacterium\n                        :name (n2 / name\n                              :op1 \"Pf\")))))", "# ::snt  Most were harmless on the money , but one caused boils and spots . \n(c / contrast-01\n      :ARG1 (h / harmful-02\n            :polarity -\n            :ARG0 (m / most)\n            :mod (o / on-the-money))\n      :ARG2 (c2 / cause-01\n            :ARG0 (o2 / one)\n            :ARG1 (a / and\n                  :op1 (b / boil-01)\n                  :op2 (s / spot))))", "# ::snt  Previous studies have revealed MRSA bacteria on notes and coins . \n(r / reveal-01\n      :ARG0 (s / study-01\n            :time (p / previous))\n      :ARG1 (b / bacterium\n            :mod (d / disease\n                  :name (n / name\n                        :op1 \"MRSA\"))\n            :location (a / and\n                  :op1 (n2 / note)\n                  :op2 (c / coin))))"], "tree": ["(d / discover-01\n   :ARG0 (p / person\n            :ARG0 (s / study-01)))", "(d / discover-01\n   :ARG1 (c / colony\n            :quant (m / multiple\n                      :op1 1000)))", "(d / discover-01\n   :ARG0 (p / person\n            :ARG0 (s / study-01))\n   :ARG1 (c / colony\n            :quant (m / multiple\n                      :op1 1000)))", "(p / person\n   :ARG0 (s / study-01)\n   :source (u / university\n              :name (n / name\n                       :op1 \"University\"\n                       :op2 \"of\"\n                       :op3 \"Surrey\")))", "(c / colony\n   :quant (m / multiple\n             :op1 1000))", "(s / submerge-01\n   :ARG0 (p / person\n            :ARG0 (s2 / study-01)))", "(s / submerge-01\n   :ARG0 (p / person\n            :ARG0 (s2 / study-01))\n   :ARG1 (c / coin))", "(s / submerge-01\n   :ARG0 (p / person\n            :ARG0 (s2 / study-01))\n   :ARG1 (n / note))", "(s / submerge-01\n   :ARG1 (c / coin)\n   :ARG2 (a2 / agar))", "(s / submerge-01\n   :ARG0 (p / person\n            :ARG0 (s2 / study-01))\n   :ARG1 (c / coin)\n   :ARG2 (a2 / agar)\n   :purpose (a3 / accelerate-01\n                :ARG0 p))", "(c / contrast-01\n   :ARG2 (c2 / cause-01\n             :ARG0 (o2 / one)))", "(c / contrast-01\n   :ARG2 (c2 / cause-01\n             :ARG1 (b / boil-01)))", "(c / contrast-01\n   :ARG2 (c2 / cause-01\n             :ARG1 (s / spot)))", "(c2 / cause-01\n    :ARG0 (o2 / one)\n    :ARG1 (b / boil-01))", "(c2 / cause-01\n    :ARG0 (o2 / one)\n    :ARG1 (s / spot))", "(r / reveal-01\n   :ARG1 (b / bacterium\n            :mod (d / disease\n                    :name (n / name\n                             :op1 \"MRSA\"))))", "(r / reveal-01\n   :ARG1 (b / bacterium\n            :location (c / coin)))", "(r / reveal-01\n   :ARG0 (s / study-01\n            :time (p / previous))\n   :ARG1 (b / bacterium\n            :mod (d / disease\n                    :name (n / name\n                             :op1 \"MRSA\"))))", "(r / reveal-01\n   :ARG0 (s / study-01\n            :time (p / previous))\n   :ARG1 (b / bacterium\n            :location (n2 / note)))", "(r / reveal-01\n   :ARG0 (s / study-01\n            :time (p / previous))\n   :ARG1 (b / bacterium\n            :location (c / coin)))"], "smus": ["The students discovered.", "Thousands of colonies were discovered.", "The students discovered thousands of colonies.", "Students from the University of Surrey", "There were thousands of colonies.", "Students submerged.", "Students submerged the coins.", "Students submerged notes.", "The coins were submerged in the agar.", "Students submerged coins in agar to accelerate.", "But one caused.", "But it caused boils.", "But it caused spots.", "One caused boils.", "One caused the spots.", "MRSA bacteria have been revealed.", "Bacteria in coins have been revealed.", "Previous studies have revealed MRSA bacteria.", "The bacteria in the notes have been revealed in previous studies.", "Previous studies have revealed bacteria in coins."]}, {"instance_id": "realsumm-2", "summary": "<t> Danilo this week agreed to join Real Madrid in the summer for \u00a3 23million . </t> <t> Transfer will take total raised from player sales to \u00a3 440 m since 2004 . </t> <t> James Rodriguez , Pepe and Radamel Falcao among those sold by Porto . </t> <t> CLICK HERE for all the latest Real Madrid news . </t>", "summary_trees": ["# ::snt  Danilo this week agreed to join Real Madrid in the summer for \u00a3 23million . \n(a / agree-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Danilo\"))\n      :ARG1 (j / join-04\n            :ARG0 p\n            :ARG1 (t / team\n                  :name (n2 / name\n                        :op1 \"Real\"\n                        :op2 \"Madrid\"))\n            :time (d / date-entity\n                  :season (s / summer))\n            :prep-for (m / monetary-quantity\n                  :quant 23000000\n                  :unit (p2 / pound)))\n      :time (w / week\n            :mod (t2 / this)))", "# ::snt  Transfer will take total raised from player sales to \u00a3 440 m since 2004 . \n(t / take-01\n      :ARG0 (t2 / transfer-01)\n      :ARG1 (m / monetary-quantity\n            :ARG1-of (t3 / total-01)\n            :ARG1-of (r / raise-01\n                  :ARG3 (s / sell-01\n                        :ARG1 (p / person\n                              :ARG0-of (p2 / play-01)))))\n      :ARG3 (m2 / monetary-quantity\n            :quant 440000000\n            :unit (p3 / pound))\n      :time (s2 / since\n            :op1 (d / date-entity\n                  :year 2004)))", "# ::snt  James Rodriguez , Pepe and Radamel Falcao among those sold by Porto . \n(ii / include-91\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"James\"\n                        :op2 \"Roduez\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Pepe\"))\n            :op3 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Radamel\"\n                        :op2 \"Falcao\")))\n      :ARG2 (t / that\n            :ARG1-of (s / sell-01\n                  :ARG0 (t2 / team\n                        :name (n4 / name\n                              :op1 \"Porto\")))))", "# ::snt  CLICK HERE for all the latest Real Madrid news . \n(c / CLICK-01\n      :mode imperative\n      :ARG0 (y / you)\n      :location (h / here)\n      :purpose (n / news\n            :mod (a / all)\n            :topic (t / team\n                  :name (n2 / name\n                        :op1 \"Real\"\n                        :op2 \"Madrid\"))\n            :mod (l / last)))"], "tree": ["(a / agree-01\n   :ARG1 (j / join-04\n            :ARG0 (p / person :name (n / name :op1 \"Danilo\"))))", "(a / agree-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Danilo\"))\n   :ARG1 (j / join-04\n            :ARG1 (t / team\n                     :name (n2 / name\n                               :op1 \"Real\"\n                               :op2 \"Madrid\"))))", "(a / agree-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Danilo\"))\n   :time (w / week\n            :mod (t2 / this)))", "(a / agree-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Danilo\"))\n   :ARG1 (j / join-04\n            :ARG1 (t / team\n                     :name (n2 / name\n                               :op1 \"Real\"\n                               :op2 \"Madrid\")))\n   :time (w / week\n            :mod (t2 / this)))", "(t / take-01\n   :ARG0 (t2 / transfer-01)\n   :ARG1 (m / monetary-quantity\n            :ARG1 (t3 / total-01)))", "(t / take-01\n   :ARG0 (t2 / transfer-01)\n   :ARG1 (m / monetary-quantity\n            :ARG1 (r / raise-01\n                     :ARG3 (s / sell-01\n                              :ARG1 (p / person\n                                       :ARG0 (p2 / play-01))))))", "(t / take-01\n   :ARG1 (m / monetary-quantity\n            :ARG1 (r / raise-01\n                     :ARG3 (s / sell-01\n                              :ARG1 (p / person\n                                       :ARG0 (p2 / play-01)))))\n   :time (s2 / since\n             :op1 (d / date-entity\n                     :year 2004)))", "(t / take-01\n   :ARG0 (t2 / transfer-01)\n   :ARG1 (m / monetary-quantity\n            :ARG1 (r / raise-01\n                     :ARG3 (s / sell-01\n                              :ARG1 (p / person\n                                       :ARG0 (p2 / play-01)))))\n   :time (s2 / since\n             :op1 (d / date-entity\n                     :year 2004)))", "(s2 / since\n    :op1 (d / date-entity\n            :year 2004))", "(ii / include-91\n    :ARG1 (p2 / person\n              :name (n2 / name\n                        :op1 \"Pepe\"))\n    :ARG2 (t / that\n             :ARG1 (s / sell-01\n                      :ARG0 (t2 / team\n                                :name (n4 / name\n                                          :op1 \"Porto\")))))", "(ii / include-91\n    :ARG1 (p3 / person\n              :name (n3 / name\n                        :op1 \"Radamel\"\n                        :op2 \"Falcao\"))\n    :ARG2 (t / that\n             :ARG1 (s / sell-01\n                      :ARG0 (t2 / team\n                                :name (n4 / name\n                                          :op1 \"Porto\")))))", "(a / and\n   :op1 (p / person\n           :name (n / name\n                    :op1 \"James\"\n                    :op2 \"Roduez\"))\n   :op2 (p2 / person\n            :name (n2 / name\n                      :op1 \"Pepe\")))", "(a / and\n   :op2 (p2 / person\n            :name (n2 / name\n                      :op1 \"Pepe\"))\n   :op3 (p3 / person\n            :name (n3 / name\n                      :op1 \"Radamel\"\n                      :op2 \"Falcao\")))", "(a / and\n   :op1 (p / person\n           :name (n / name\n                    :op1 \"James\"\n                    :op2 \"Roduez\"))\n   :op2 (p2 / person\n            :name (n2 / name\n                      :op1 \"Pepe\"))\n   :op3 (p3 / person\n            :name (n3 / name\n                      :op1 \"Radamel\"\n                      :op2 \"Falcao\")))", "(c / CLICK-01\n   :ARG0 (y / you)\n   :purpose (n / news\n               :topic (t / team\n                         :name (n2 / name\n                                   :op1 \"Real\"\n                                   :op2 \"Madrid\"))))", "(c / CLICK-01\n   :ARG0 (y / you)\n   :purpose (n / news\n               :mod (l / last)))", "(c / CLICK-01\n   :location (h / here)\n   :purpose (n / news\n               :topic (t / team\n                         :name (n2 / name\n                                   :op1 \"Real\"\n                                   :op2 \"Madrid\"))))"], "smus": ["Danilo agreed to join.", "Danilo agreed to join Real Madrid.", "Danilo agreed this week.", "Danilo agreed to join Real Madrid this week.", "The transfer would take the total.", "The transfer would take the amount raised from the sale of the player.", "Take the money raised from the sale of the player since 2004.", "The transfer would take the amount raised from the sale of the player since 2004.", "since 2004.", "Pepe was one of those Porto have sold.", "Radamel Falcao was one of those sold by Porto.", "James Rodriguez and Pepe", "Pepe and Radamel Falcao.", "James Rodriguez, Pepe and Radamel Falcao.", "For Real Madrid news, CLICK HERE.", "For the latest news, CLICK HERE.", "CLICK HERE for Real Madrid news."]}, {"instance_id": "realsumm-3", "summary": "<t> Dominatrix claims Dominatrix shared a ' hot , deep kiss ' with Prince Harry in Vegas . </t> <t> Carrie Reichert said Reichert felt overdressed after seeing Harry ' cute naked a * * ' The 43-year - old made the claim in an excerpt from Reichert upcoming book . </t> <t> Kensington Palace has previously denied Reichert was invited to the hotel suite . </t>", "summary_trees": ["# ::snt  Dominatrix claims Dominatrix shared a ' hot , deep kiss ' with Prince Harry in Vegas . \n(c / claim-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Dominatrix\"))\n      :ARG1 (s / share-01\n            :ARG0 p\n            :ARG1 (k / kiss-01\n                  :ARG0 p\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Prince\"\n                              :op2 \"Harry\"))\n                  :ARG1-of (h / hot-05)\n                  :ARG1-of (d / deep-03))\n            :ARG2 p2\n            :location (c2 / city\n                  :name (n3 / name\n                        :op1 \"Vegas\"))))", "# ::snt  Carrie Reichert said Reichert felt overdressed after seeing Harry ' cute naked a * * ' The 43-year - old made the claim in an excerpt from Reichert upcoming book . \n(c / claim-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Carrie\"\n                  :op2 \"Reichert\")\n            :age (t / temporal-quantity\n                  :quant 43\n                  :unit (y / year)))\n      :ARG1 (f / feel-01\n            :ARG0 p\n            :ARG1 (o / overdress-01\n                  :ARG1 p)\n            :time (a / after\n                  :op1 (s / see-01\n                        :ARG0 p\n                        :ARG1 (a2 / and\n                              :op1 (c2 / cute\n                                    :domain (p2 / person\n                                          :name (n2 / name\n                                                :op1 \"Harry\")))\n                              :op2 (n3 / naked\n                                    :domain p2)))))\n      :medium (t2 / thing\n            :ARG1-of (e / excerpt-01\n                  :ARG2 (b / book\n                        :ARG1-of (c3 / come-up-11)\n                        :poss p))))", "# ::snt  Kensington Palace has previously denied Reichert was invited to the hotel suite . \n(d / deny-01\n      :ARG0 (g / government-organization\n            :name (n / name\n                  :op1 \"Kensington\"\n                  :op2 \"Palace\"))\n      :ARG1 (ii / invite-01\n            :ARG1 (p / person\n                  :name (n2 / name\n                        :op1 \"Reichert\"))\n            :ARG2 (s / suite\n                  :location (h / hotel)))\n      :time (p2 / previous))"], "tree": ["(c / claim-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dominatrix\")))", "(c / claim-01\n   :ARG1 (s / share-01\n            :ARG1 (k / kiss-01\n                     :ARG0 (p / person :name (n / name :op1 \"Dominatrix\")))))", "(c / claim-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dominatrix\"))\n   :ARG1 (s / share-01\n            :ARG1 (k / kiss-01\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Prince\"\n                                         :op2 \"Harry\")))))", "(c / claim-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dominatrix\"))\n   :ARG1 (s / share-01\n            :ARG1 (k / kiss-01\n                     :ARG1 (h / hot-05))))", "(s / share-01\n   :ARG1 (k / kiss-01\n            :ARG0 (p / person :name (n / name :op1 \"Dominatrix\"))))", "(c / claim-01\n   :ARG0 (p / person\n            :age (t / temporal-quantity\n                    :quant 43)))", "(c / claim-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Carrie\"\n                     :op2 \"Reichert\"))\n   :ARG1 (f / feel-01\n            :ARG0 p))", "(c / claim-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Carrie\"\n                     :op2 \"Reichert\"))\n   :ARG1 (f / feel-01\n            :ARG1 (o / overdress-01\n                     :ARG1 p)))", "(c / claim-01\n   :ARG0 (p / person\n            :age (t / temporal-quantity\n                    :quant 43))\n   :ARG1 (f / feel-01\n            :ARG1 (o / overdress-01\n                     :ARG1 p)))", "(c / claim-01\n   :ARG1 (f / feel-01\n            :ARG1 (o / overdress-01\n                     :ARG1 (p / person :name (n / name :op1 \"Carrie\" :op2 \"Reichert\")))))\n   :medium (t2 / thing\n               :ARG1 (e / excerpt-01\n                        :ARG2 (b / book\n                                 :poss p))))", "(d / deny-01\n   :ARG0 (g / government-organization\n            :name (n / name\n                     :op1 \"Kensington\"\n                     :op2 \"Palace\")))", "(d / deny-01\n   :ARG0 (g / government-organization\n            :name (n / name\n                     :op1 \"Kensington\"\n                     :op2 \"Palace\"))\n   :time (p2 / previous))", "(d / deny-01\n   :ARG1 (ii / invite-01\n             :ARG2 (s / suite\n                      :location (h / hotel)))\n   :time (p2 / previous))", "(d / deny-01\n   :ARG0 (g / government-organization\n            :name (n / name\n                     :op1 \"Kensington\"\n                     :op2 \"Palace\"))\n   :ARG1 (ii / invite-01\n             :ARG1 (p / person\n                      :name (n2 / name\n                                :op1 \"Reichert\")))\n   :time (p2 / previous))", "(d / deny-01\n   :ARG0 (g / government-organization\n            :name (n / name\n                     :op1 \"Kensington\"\n                     :op2 \"Palace\"))\n   :ARG1 (ii / invite-01\n             :ARG2 (s / suite\n                      :location (h / hotel)))\n   :time (p2 / previous))"], "smus": ["Dominatrix claims.", "claiming dominatrix shared a kiss.", "Dominatrix claims they shared a kiss with Prince Harry.", "Dominatrix claims they shared a hot kiss.", "Dominatrix shared a kiss.", "The 43-year-old made the claim.", "Carrie Reichert's claim is that she feels.", "Carrie Reichert's claim is that she feels overdressed.", "The 43-year-old claimed to be feeling overdressed.", "In an excerpt from her book, the claim is made that Carrie Reichert felt overdressed.", "The Kensington Palace has denied.", "The Kensington Palace has previously denied.", "Previously, the invitation to a hotel suite was denied.", "The Kensington Palace had previously denied inviting Reichert.", "The Kensington Palace had previously denied being invited to a hotel suite."]}, {"instance_id": "realsumm-4", "summary": "<t> Eva Chapin , 34 , from West Linn , Oregon , has been accused of harassment . </t> <t> Referred to Linn neighbors as ' n * * * * * ' but insists Linn is not racist . </t> <t> One note said : ' There were no [ expletive ] in W.L until you came ' . </t> <t> Victim has said Linn family may be forced to move as family do n't feel safe . </t>", "summary_trees": ["# ::snt  Eva Chapin , 34 , from West Linn , Oregon , has been accused of harassment . \n(a / accuse-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Eva\"\n                  :op2 \"Chapin\")\n            :age (t / temporal-quantity\n                  :quant 34\n                  :unit (y / year))\n            :source (c / city\n                  :name (n2 / name\n                        :op1 \"West\"\n                        :op2 \"Linn\")\n                  :location (s / state\n                        :name (n3 / name\n                              :op1 \"Oregon\"))))\n      :ARG2 (h / harass-01\n            :ARG0 p))", "# ::snt  Referred to Linn neighbors as ' n * * * * * ' but insists Linn is not racist . \n(c / contrast-01\n      :ARG1 (r / refer-01\n            :ARG1 (p / person\n                  :ARG1-of (n / neighbor-01\n                        :ARG2 (c2 / city\n                              :name (n2 / name\n                                    :op1 \"Linn\"))))\n            :ARG2 (n3 / nigger))\n      :ARG2 (ii / insist-01\n            :ARG1 (r2 / racist\n                  :polarity -\n                  :domain c2)))", "# ::snt  One note said : ' There were no [ expletive ] in W.L until you came ' . \n(s / say-01\n      :ARG0 (n / note\n            :quant 1)\n      :ARG1 (b / be-located-at-91\n            :polarity -\n            :ARG1 (e / expletive)\n            :ARG2 (c / city\n                  :name (n2 / name\n                        :op1 \"W.L\"))\n            :time (u / until\n                  :op1 (c2 / come-01\n                        :ARG1 (y / you)))))", "# ::snt  Victim has said Linn family may be forced to move as family do n't feel safe . \n(s / say-01\n      :ARG0 (v / victim)\n      :ARG1 (p / possible-01\n            :ARG1 (f / force-01\n                  :ARG1 (f2 / family\n                        :name (n / name\n                              :op1 \"Linn\"))\n                  :ARG2 (m / move-01\n                        :ARG1 f2))\n            :ARG1-of (c / cause-01\n                  :ARG0 (f3 / feel-01\n                        :polarity -\n                        :ARG0 (f4 / family)\n                        :ARG1 (s2 / safe-01\n                              :ARG1 f4)))))"], "tree": ["(a / accuse-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Eva\"\n                     :op2 \"Chapin\")))", "(a / accuse-01\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :quant 34)))", "(a / accuse-01\n   :ARG2 (h / harass-01\n            :ARG0 (p / person :name (n / name :op1 \"Eva\" :op2 \"Chapin\")))))", "(a / accuse-01\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :quant 34))\n   :ARG2 (h / harass-01\n            :ARG0 p))", "(c / contrast-01\n   :ARG1 (r / refer-01\n            :ARG1 (p / person\n                     :ARG1 (n / neighbor-01\n                              :ARG2 (c2 / city\n                                        :name (n2 / name\n                                                  :op1 \"Linn\"))))))", "(c / contrast-01\n   :ARG2 (ii / insist-01\n             :ARG1 (r2 / racist\n                       :polarity -)))", "(c / contrast-01\n   :ARG1 (r / refer-01\n            :ARG1 (p / person\n                     :ARG1 (n / neighbor-01\n                              :ARG2 (c2 / city\n                                        :name (n2 / name\n                                                  :op1 \"Linn\")))))\n   :ARG2 (ii / insist-01\n             :ARG1 (r2 / racist\n                       :polarity -)))", "(r / refer-01\n   :ARG1 (p / person\n            :ARG1 (n / neighbor-01\n                     :ARG2 (c2 / city\n                               :name (n2 / name\n                                         :op1 \"Linn\")))))", "(ii / insist-01\n    :ARG1 (r2 / racist\n              :polarity -))", "(s / say-01\n   :ARG1 (b / be-located-at-91\n            :ARG2 (c / city\n                     :name (n2 / name\n                               :op1 \"W.L\"))))", "(s / say-01\n   :ARG0 (n / note\n            :quant 1)\n   :ARG1 (b / be-located-at-91\n            :ARG2 (c / city\n                     :name (n2 / name\n                               :op1 \"W.L\"))))", "(b / be-located-at-91\n   :ARG1 (e / expletive)\n   :ARG2 (c / city\n            :name (n2 / name\n                      :op1 \"W.L\")))", "(b / be-located-at-91\n   :ARG2 (c / city\n            :name (n2 / name\n                      :op1 \"W.L\"))\n   :time (u / until\n            :op1 (c2 / come-01\n                     :ARG1 (y / you))))", "(u / until\n   :op1 (c2 / come-01\n            :ARG1 (y / you)))", "(s / say-01\n   :ARG1 (p / possible-01\n            :ARG1 (f / force-01\n                     :ARG1 (f2 / family\n                               :name (n / name\n                                        :op1 \"Linn\")))))", "(s / say-01\n   :ARG1 (p / possible-01\n            :ARG1 (f / force-01\n                     :ARG2 (m / move-01\n                              :ARG1 (f2 / family :name (n / name :op1 \"Linn\"))))))", "(s / say-01\n   :ARG0 (v / victim)\n   :ARG1 (p / possible-01\n            :ARG1 (f / force-01\n                     :ARG1 (f2 / family\n                               :name (n / name\n                                        :op1 \"Linn\")))))", "(s / say-01\n   :ARG0 (v / victim)\n   :ARG1 (p / possible-01\n            :ARG1 (f / force-01\n                     :ARG2 (m / move-01\n                              :ARG1 (f2 / family :name (n / name :op1 \"Linn\"))))))", "(p / possible-01\n   :ARG1 (f / force-01\n            :ARG2 (m / move-01\n                     :ARG1 (f2 / family :name (n / name :op1 \"Linn\")))))"], "smus": ["Eva Chapin was accused.", "The 34-year-old was accused.", "Eva Chapin was accused of harassment.", "The 34-year-old was accused of harassment.", "But neighbors in Linn are referred to.", "But insists it is not racist.", "neighbors in Linn are referred to, but insists not to be racist.", "neighbors in Linn are referred to.", "Insisted not to be racist.", "W.L.", "One note said W.L.", "expletive in W.L", "Until you come W.L.", "Until you come.", "The Linn family could be forced, it is said.", "It is said that the Linn family could be forced to move.", "Victims have said the Linn family could have been forced.", "Victims have said the Linn family could be forced to move.", "The Linn family could be forced to move."]}, {"instance_id": "realsumm-5", "summary": "<t> Justin Rose finished joint runner - up at the Masters 2015 on 14-under - par . </t> <t> Rose 's final total has only been bettered six times at the the Masters . </t> <t> Rose hopes to build on Rose display and take some big titles across the year . </t> <t> CLICK HERE for all the latest news and reaction following the Masters . </t>", "summary_trees": ["# ::snt  Justin Rose finished joint runner - up at the Masters 2015 on 14-under - par . \n(f / finish-07\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Justin\"\n                  :op2 \"Rose\"))\n      :ARG2 (r / runner-up\n            :mod (j / joint))\n      :ARG3 (e / event\n            :name (n2 / name\n                  :op1 \"Masters\")\n            :time (d / date-entity\n                  :year 2015))\n      :manner (s / score-entity\n            :op1 14\n            :op2 (p2 / par)))", "# ::snt  Rose 's final total has only been bettered six times at the the Masters . \n(b / best-01\n      :frequency 6\n      :ARG1 (t / total\n            :mod (f / final)\n            :poss (p / person\n                  :name (n / name\n                        :op1 \"Rose\")))\n      :mod (o / only)\n      :time (g / game\n            :name (n2 / name\n                  :op1 \"Masters\")))", "# ::snt  Rose hopes to build on Rose display and take some big titles across the year . \n(h / hope-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Rose\"))\n      :ARG1 (a / and\n            :op1 (b / build-01\n                  :ARG0 p\n                  :ARG2 (d / display-01\n                        :ARG0 p))\n            :op2 (t / take-01\n                  :ARG0 p\n                  :ARG1 (t2 / title\n                        :mod (b2 / big)\n                        :quant (s / some))\n                  :time (a2 / across\n                        :op1 (y / year)))))", "# ::snt  CLICK HERE for all the latest news and reaction following the Masters . \n(c / CLICK-01\n      :mode imperative\n      :ARG0 (y / you)\n      :location (h / here)\n      :purpose (a / and\n            :op1 (n / news\n                  :mod (l / last))\n            :op2 (r / react-01)\n            :mod (a2 / all)\n            :ARG1-of (f / follow-01\n                  :ARG2 (g / game\n                        :name (n2 / name\n                              :op1 \"Masters\")))))"], "tree": ["(f / finish-07\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Justin\"\n                     :op2 \"Rose\")))", "(f / finish-07\n   :ARG2 (r / runner-up\n            :mod (j / joint)))", "(f / finish-07\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Justin\"\n                     :op2 \"Rose\"))\n   :ARG2 (r / runner-up\n            :mod (j / joint)))", "(f / finish-07\n   :ARG2 (r / runner-up\n            :mod (j / joint))\n   :manner (s / score-entity\n              :op1 14\n              :op2 (p2 / par)))", "(f / finish-07\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Justin\"\n                     :op2 \"Rose\"))\n   :ARG2 (r / runner-up\n            :mod (j / joint))\n   :ARG3 (e / event\n            :name (n2 / name\n                      :op1 \"Masters\")))", "(b / best-01\n   :ARG1 (t / total\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Rose\")))\n   :time (g / game\n            :name (n2 / name\n                      :op1 \"Masters\")))", "(t / total\n   :poss (p / person\n            :name (n / name\n                     :op1 \"Rose\")))", "(t / total\n   :mod (f / final)\n   :poss (p / person\n            :name (n / name\n                     :op1 \"Rose\")))", "(p / person\n   :name (n / name\n            :op1 \"Rose\"))", "(g / game\n   :name (n2 / name\n             :op1 \"Masters\"))", "(h / hope-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rose\"))\n   :ARG1 (b / build-01\n            :ARG0 p))", "(h / hope-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rose\"))\n   :ARG1 (t / take-01\n            :ARG0 p))", "(h / hope-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rose\"))\n   :ARG1 (t / take-01\n            :time (a2 / across\n                      :op1 (y / year))))", "(h / hope-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rose\"))\n   :ARG1 (t / take-01\n            :ARG1 (t2 / title\n                      :quant (s / some))))", "(a / and\n   :op2 (t / take-01\n           :ARG1 (t2 / title\n                     :quant (s / some))))", "(c / CLICK-01\n   :purpose (n / news\n               :mod (l / last)))", "(c / CLICK-01\n   :ARG0 (y / you)\n   :purpose (n / news\n               :mod (l / last)))", "(a / and\n   :op1 (n / news\n           :mod (l / last))\n   :op2 (r / react-01)\n   :ARG1 (f / follow-01\n            :ARG2 (g / game\n                     :name (n2 / name\n                               :op1 \"Masters\"))))", "(f / follow-01\n   :ARG2 (g / game\n            :name (n2 / name\n                      :op1 \"Masters\")))"], "smus": ["Justin Rose finished.", "finished joint runner up.", "Justin Rose finished joint runner up.", "Joint runner-up finished 14 under par.", "Justin Rose finished joint runner up at the Masters.", "Rose's total was best during the Masters.", "Rose's total.", "The final total of Rose.", "Rose", "Masters", "Rose hopes to build.", "Rose hopes to take.", "Rose hopes to take across the year.", "Rose hopes to take some titles.", "And take some titles.", "CLICKS for the latest news.", "For the latest news, CLICK HERE.", "Following the Masters, the latest news and reaction.", "Following the Masters."]}, {"instance_id": "realsumm-6", "summary": "<t> Girl was playing with friend when Zbigniew Huminski forced friend into car . </t> <t> Chloe 's naked body was found in nearby woods an hour - and - a - half later . </t> <t> Prosecutors say there is evidence of ' strangulation and sexual violence ' Polish immigrant , who was heading to England , has admitted to killing . </t>", "summary_trees": ["# ::snt  Girl was playing with friend when Zbigniew Huminski forced friend into car . \n(p / play-01\n      :ARG0 (g / girl)\n      :ARG3 (p2 / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 g\n                  :ARG2 (f / friend)))\n      :time (f2 / force-01\n            :ARG0 (p3 / person\n                  :name (n / name\n                        :op1 \"Zbigniew\"\n                        :op2 \"Huminski\"))\n            :ARG1 p2\n            :ARG2 (c / car)))", "# ::snt  Chloe 's naked body was found in nearby woods an hour - and - a - half later . \n(f / find-01\n      :ARG1 (b / body\n            :poss (p / person\n                  :name (n / name\n                        :op1 \"Chloe\"))\n            :ARG1-of (n2 / naked-02))\n      :location (w / woods\n            :location (n3 / nearby))\n      :time (a / after\n            :quant (t / temporal-quantity\n                  :quant 1.5\n                  :unit (h / hour))))", "# ::snt  Prosecutors say there is evidence of ' strangulation and sexual violence ' Polish immigrant , who was heading to England , has admitted to killing . \n(m / multi-sentence\n      :snt1 (s / say-01\n            :ARG0 (p / person\n                  :ARG0-of (p2 / prosecute-01))\n            :ARG1 (e / evidence-01\n                  :ARG1 (a / and\n                        :op1 (s2 / strangulate-01)\n                        :op2 (v / violence\n                              :mod (s3 / sex)))))\n      :snt2 (a2 / admit-01\n            :ARG0 (p3 / person\n                  :ARG0-of (ii / immigrate-01\n                        :ARG2 (c / country\n                              :name (n / name\n                                    :op1 \"Poland\")))\n                  :ARG0-of (h / head-02\n                        :ARG1 (c2 / country\n                              :name (n2 / name\n                                    :op1 \"England\"))))\n            :ARG1 (k / kill-01\n                  :ARG0 p3)))"], "tree": ["(p / play-01\n   :ARG3 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG2 (f / friend))))", "(p / play-01\n   :ARG0 (g / girl)\n   :ARG3 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG2 (f / friend))))", "(p / play-01\n   :ARG0 (g / girl)\n   :ARG3 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG2 (f / friend)))\n   :time (f2 / force-01\n             :ARG1 p2))", "(p / play-01\n   :ARG0 (g / girl)\n   :ARG3 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG2 (f / friend)))\n   :time (f2 / force-01\n             :ARG2 (c / car)))", "(f2 / force-01\n    :ARG0 (p3 / person\n              :name (n / name\n                       :op1 \"Zbigniew\"\n                       :op2 \"Huminski\")))", "(f / find-01\n   :ARG1 (b / body\n            :ARG1 (n2 / naked-02)))", "(f / find-01\n   :location (w / woods\n                :location (n3 / nearby)))", "(f / find-01\n   :ARG1 (b / body\n            :ARG1 (n2 / naked-02))\n   :location (w / woods\n                :location (n3 / nearby)))", "(f / find-01\n   :location (w / woods\n                :location (n3 / nearby))\n   :time (a / after\n            :quant (t / temporal-quantity\n                      :unit (h / hour))))", "(f / find-01\n   :ARG1 (b / body\n            :ARG1 (n2 / naked-02))\n   :location (w / woods\n                :location (n3 / nearby))\n   :time (a / after\n            :quant (t / temporal-quantity\n                      :unit (h / hour))))", "(m / multi-sentence\n   :snt2 (a2 / admit-01\n             :ARG1 (k / kill-01\n                      :ARG0 (p3 / person))))", "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (p2 / prosecute-01))\n   :ARG1 (e / evidence-01\n            :ARG1 (s2 / strangulate-01)))", "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (p2 / prosecute-01))\n   :ARG1 (e / evidence-01\n            :ARG1 (v / violence\n                     :mod (s3 / sex))))", "(e / evidence-01\n   :ARG1 (v / violence\n            :mod (s3 / sex)))"], "smus": ["Playing with a friend.", "The Girl is playing with a friend.", "The Girl was playing with a friend when she was forced.", "The Girl was playing with a friend when the car forced into.", "Zbigniew Huminski forced.", "The body was found naked.", "Found in nearby woods.", "A naked body was found in the nearby woods.", "Found in nearby woods an hour later.", "The naked body was found in the nearby woods an hour later.", "People are admitted to killing.", "Prosecutors say there is evidence of strangulation.", "Prosecutors say there is evidence of sexual violence.", "There is evidence of sexual violence."]}, {"instance_id": "realsumm-7", "summary": "<t> Pair were left homeless after storms and met in Connecticut trailer park . </t> <t> Won lottery last year but only cashed prize in after Easter to mark new start . ' </t> <t> Because of Sandy I met the love of my life ' , said thrilled lottery winner . </t>", "summary_trees": ["# ::snt  Pair were left homeless after storms and met in Connecticut trailer park . \n(a / and\n      :op1 (l / leave-13\n            :ARG1 (p / pair)\n            :ARG2 (h / homeless\n                  :domain p)\n            :time (a2 / after\n                  :op1 (s / storm)))\n      :op2 (m / meet-03\n            :ARG0 p\n            :location (p2 / park\n                  :mod (t / trailer)\n                  :location (s2 / state\n                        :name (n / name\n                              :op1 \"Connecticut\")))))", "# ::snt  Won lottery last year but only cashed prize in after Easter to mark new start . ' \n(c / contrast-01\n      :ARG1 (w / win-01\n            :ARG2 (l / lottery)\n            :time (y / year\n                  :mod (l2 / last)))\n      :ARG2 (c2 / cash-in-03\n            :ARG1 (p / prize)\n            :time (a / after\n                  :op1 (f / festival\n                        :name (n / name\n                              :op1 \"Easter\")))\n            :purpose (m / mark-01\n                  :ARG1 (s / start-01\n                        :ARG1-of (n2 / new-01)))\n            :mod (o / only)))", "# ::snt  Because of Sandy I met the love of my life ' , said thrilled lottery winner . \n(s / say-01\n      :ARG0 (p / person\n            :ARG0-of (w / win-01\n                  :ARG1 (l / lottery))\n            :ARG1-of (t / thrill-01))\n      :ARG1 (c / cause-01\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Sandy\"))\n            :ARG1 (m / meet-02\n                  :ARG0 p\n                  :ARG1 (p3 / person\n                        :ARG0-of (l2 / love-01\n                              :ARG1 p)\n                        :ARG0-of (l3 / live-01\n                              :ARG1 p)))))"], "tree": ["(a / and\n   :op1 (l / leave-13\n           :ARG2 (h / homeless\n                    :domain (p / pair)))\n   :op2 (m / meet-03\n           :ARG0 p))", "(a / and\n   :op1 (l / leave-13\n           :time (a2 / after\n                     :op1 (s / storm)))\n   :op2 (m / meet-03\n           :ARG0 (p / pair)))", "(l / leave-13\n   :ARG2 (h / homeless\n            :domain (p / pair)))", "(l / leave-13\n   :ARG2 (h / homeless\n            :domain (p / pair))\n   :time (a2 / after\n             :op1 (s / storm)))", "(c / contrast-01\n   :ARG1 (w / win-01\n            :ARG2 (l / lottery))\n   :ARG2 (c2 / cash-in-03\n             :time (a / after\n                      :op1 (f / festival\n                              :name (n / name\n                                       :op1 \"Easter\")))))", "(c / contrast-01\n   :ARG1 (w / win-01\n            :ARG2 (l / lottery))\n   :ARG2 (c2 / cash-in-03\n             :purpose (m / mark-01\n                         :ARG1 (s / start-01\n                                  :ARG1 (n2 / new-01)))))", "(c2 / cash-in-03\n    :time (a / after\n             :op1 (f / festival\n                     :name (n / name\n                              :op1 \"Easter\"))))", "(c2 / cash-in-03\n    :time (a / after\n             :op1 (f / festival\n                     :name (n / name\n                              :op1 \"Easter\")))\n    :mod (o / only))", "(c2 / cash-in-03\n    :time (a / after\n             :op1 (f / festival\n                     :name (n / name\n                              :op1 \"Easter\")))\n    :purpose (m / mark-01\n                :ARG1 (s / start-01\n                         :ARG1 (n2 / new-01)))\n    :mod (o / only))", "(s / say-01\n   :ARG1 (c / cause-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Sandy\"))))", "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (w / win-01\n                     :ARG1 (l / lottery)))\n   :ARG1 (c / cause-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Sandy\"))))", "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (w / win-01\n                     :ARG1 (l / lottery)))\n   :ARG1 (c / cause-01\n            :ARG1 (m / meet-02\n                     :ARG1 (p3 / person\n                               :ARG0 (l2 / love-01\n                                         :ARG1 p)))))", "(c / cause-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Sandy\"))\n   :ARG1 (m / meet-02\n            :ARG0 (p / person)))"], "smus": ["The pair were left homeless and met.", "The pair were left after the storms and met.", "The pair were left homeless.", "The pair were left homeless after the storms.", "Lottery wins, but after Easter, cash in.", "Lottery wins, but cash in to mark the start of a new.", "Cash in after Easter.", "Only after Easter is cash in.", "Only after Easter to cash in to mark the start of a new year.", "Because of Sandy.", "Lottery winners said because Sandy.", "Lottery winners said because they met their love.", "Because Sandy, people met."]}, {"instance_id": "realsumm-8", "summary": "<t> Cesc Fabregas was caught by trailing arm of Stoke City ace Charlie Adam . </t> <t> Former Barcelona man picked up the injury during Chelsea 's home win . </t> <t> Midfielder Adam scored wonder goal during the game but goal was n't enough . </t> <t> Fabregas took to Instagram to show Adam was all smiles despite the bruises . </t> <t> CLICK HERE for all the latest Chelsea news . </t>", "summary_trees": ["# ::snt  Cesc Fabregas was caught by trailing arm of Stoke City ace Charlie Adam . \n(c / catch-03\n      :ARG0 (a / arm\n            :part-of (p / person\n                  :name (n / name\n                        :op1 \"Charlie\"\n                        :op2 \"Adam\")\n                  :mod (a2 / ace)\n                  :part-of (t / team\n                        :name (n2 / name\n                              :op1 \"Stoke\"\n                              :op2 \"City\")))\n            :ARG0-of (t2 / trail-01))\n      :ARG1 (p2 / person\n            :name (n3 / name\n                  :op1 \"Cesc\"\n                  :op2 \"Fabregas\")))", "# ::snt  Former Barcelona man picked up the injury during Chelsea 's home win . \n(p / pick-up-11\n      :ARG0 (m / man\n            :time (f / former)\n            :part-of (t / team\n                  :name (n / name\n                        :op1 \"Barcelona\")))\n      :ARG1 (ii / injury)\n      :time (w / win-01\n            :ARG0 (t2 / team\n                  :name (n2 / name\n                        :op1 \"Chelsea\"))\n            :location (h / home)))", "# ::snt  Midfielder Adam scored wonder goal during the game but goal was n't enough . \n(h / have-concession-91\n      :ARG1 (h2 / have-quant-91\n            :polarity -\n            :ARG1 (g / goal)\n            :ARG3 (e / enough))\n      :ARG2 (s / score-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Adam\")\n                  :ARG0-of (h3 / have-org-role-91\n                        :ARG2 (m / midfielder)))\n            :ARG1 (g2 / goal\n                  :mod (w / wonder))\n            :time (g3 / game)))", "# ::snt  Fabregas took to Instagram to show Adam was all smiles despite the bruises . \n(t / take-35\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Fabregas\"))\n      :ARG2 (p2 / publication\n            :name (n2 / name\n                  :op1 \"Instagram\"))\n      :purpose (s / show-01\n            :ARG0 p\n            :ARG1 (s2 / smile-01\n                  :ARG0 (p3 / person\n                        :name (n3 / name\n                              :op1 \"Adam\"))\n                  :mod (a / all)\n                  :concession (b / bruise-01\n                        :ARG1 p3))))", "# ::snt  CLICK HERE for all the latest Chelsea news . \n(c / CLICK-01\n      :mode imperative\n      :ARG0 (y / you)\n      :location (h / here)\n      :purpose (n / news\n            :mod (l / last)\n            :mod (a / all)\n            :topic (p / person\n                  :name (n2 / name\n                        :op1 \"Chelsea\"))))"], "tree": ["(c / catch-03\n   :ARG1 (p2 / person\n             :name (n3 / name\n                       :op1 \"Cesc\"\n                       :op2 \"Fabregas\")))", "(c / catch-03\n   :ARG0 (a / arm\n            :part (p / person\n                     :name (n / name\n                              :op1 \"Charlie\"\n                              :op2 \"Adam\")))\n   :ARG1 (p2 / person\n             :name (n3 / name\n                       :op1 \"Cesc\"\n                       :op2 \"Fabregas\")))", "(a / arm\n   :part (p / person\n            :name (n / name\n                     :op1 \"Charlie\"\n                     :op2 \"Adam\"))\n   :ARG0 (t2 / trail-01))", "(p / person\n   :name (n / name\n            :op1 \"Charlie\"\n            :op2 \"Adam\")\n   :mod (a2 / ace))", "(p / person\n   :name (n / name\n            :op1 \"Charlie\"\n            :op2 \"Adam\")\n   :mod (a2 / ace)\n   :part (t / team\n            :name (n2 / name\n                      :op1 \"Stoke\"\n                      :op2 \"City\")))", "(p / pick-up-11\n   :ARG0 (m / man\n            :time (f / former)))", "(p / pick-up-11\n   :time (w / win-01\n            :location (h / home)))", "(p / pick-up-11\n   :ARG0 (m / man\n            :time (f / former))\n   :time (w / win-01\n            :ARG0 (t2 / team\n                      :name (n2 / name\n                                :op1 \"Chelsea\"))))", "(p / pick-up-11\n   :ARG0 (m / man\n            :time (f / former))\n   :ARG1 (ii / injury))", "(m / man\n   :time (f / former)\n   :part (t / team\n            :name (n / name\n                     :op1 \"Barcelona\")))", "(s / score-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Adam\")))", "(s / score-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Adam\"))\n   :ARG1 (g2 / goal\n             :mod (w / wonder)))", "(s / score-01\n   :ARG0 (p / person\n            :ARG0 (h3 / have-org-role-91\n                      :ARG2 (m / midfielder)))\n   :ARG1 (g2 / goal\n             :mod (w / wonder)))", "(s / score-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Adam\"))\n   :time (g3 / game))", "(s / score-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Adam\"))\n   :ARG1 (g2 / goal\n             :mod (w / wonder))\n   :time (g3 / game))", "(t / take-35\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Fabregas\"))\n   :ARG2 (p2 / publication\n             :name (n2 / name\n                       :op1 \"Instagram\")))", "(t / take-35\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Fabregas\"))\n   :ARG2 (p2 / publication\n             :name (n2 / name\n                       :op1 \"Instagram\"))\n   :purpose (s / show-01\n               :ARG0 p))", "(s2 / smile-01\n    :ARG0 (p3 / person\n              :name (n3 / name\n                        :op1 \"Adam\"))\n    :concession (b / bruise-01\n                   :ARG1 p3))", "(s2 / smile-01\n    :mod (a / all)\n    :concession (b / bruise-01\n                   :ARG1 (p3 / person :name (n3 / name :op1 \"Adam\"))))", "(s2 / smile-01\n    :ARG0 (p3 / person\n              :name (n3 / name\n                        :op1 \"Adam\"))\n    :mod (a / all)\n    :concession (b / bruise-01\n                   :ARG1 p3))", "(c / CLICK-01\n   :ARG0 (y / you)\n   :purpose (n / news\n               :mod (l / last)))", "(c / CLICK-01\n   :location (h / here)\n   :purpose (n / news\n               :topic (p / person\n                         :name (n2 / name\n                                   :op1 \"Chelsea\"))))", "(c / CLICK-01\n   :ARG0 (y / you)\n   :location (h / here)\n   :purpose (n / news\n               :topic (p / person\n                         :name (n2 / name\n                                   :op1 \"Chelsea\"))))", "(n / news\n   :topic (p / person\n             :name (n2 / name\n                       :op1 \"Chelsea\")))"], "smus": ["Cesc Fabregas was caught.", "Charlie Adam's arm caught Cesc Fabregas.", "Charlie Adam's arm is trailing.", "Charlie Adam, ace.", "Charlie Adam is an ace at Stoke City.", "The former man picked up.", "Picked up with a win at home.", "The former man picked up with Chelsea's victory.", "The former man picked up the injury.", "Former Barcelona man.", "Adam scored.", "Adam scored a wonder goal.", "The midfielder scored a wonder goal.", "Adam scored in the game.", "Adam scored a wonder goal in the game.", "Fabregas took to Instagram.", "Fabregas took to Instagram to show.", "Adam smiles despite bruises.", "All smiles, despite Adam's bruises.", "Adam all smiles despite bruises", "For the latest news, CLICK HERE.", "CLICK HERE for Chelsea news", "For Chelsea news, CLICK HERE.", "News about Chelsea."]}, {"instance_id": "realsumm-9", "summary": "<t> The life of 16-year - old Maren Sanchez stabbed to death a year ago on the day of prom was celebrated on Saturday by hundreds of people . ' </t> <t> I do n't think there 's anything sad about this . </t> <t> this 's such a celebration , ' said Darby Hudd , a 17-year - old friend of the slain teen . </t> <t> A classmate , Christopher Plaskon , has been charged with Sanchez 's murder . </t>", "summary_trees": ["# ::snt  The life of 16-year - old Maren Sanchez stabbed to death a year ago on the day of prom was celebrated on Saturday by hundreds of people . ' \n(m / multi-sentence\n      :snt1 (c / celebrate-01\n            :ARG0 (p / person\n                  :quant (m2 / multiple\n                        :op1 100))\n            :ARG1 (l / life\n                  :poss (p2 / person\n                        :name (n / name\n                              :op1 \"Maren\"\n                              :op2 \"Sanchez\")\n                        :age (t / temporal-quantity\n                              :quant 16\n                              :unit (y / year))\n                        :ARG1-of (s / stab-01\n                              :ARG4 (d / die-01\n                                    :ARG1 p2)\n                              :time (b / before\n                                    :op1 (n2 / now)\n                                    :quant (t2 / temporal-quantity\n                                          :quant 1\n                                          :unit (y2 / year)))\n                              :time (d2 / day\n                                    :time-of (p3 / prom)))))\n            :time (d3 / date-entity\n                  :weekday (s2 / saturday))))", "# ::snt  I do n't think there 's anything sad about this . \n(t / think-01\n      :polarity -\n      :ARG0 (ii / i)\n      :ARG1 (s / sad-02\n            :ARG0 (a / anything)\n            :topic (t2 / this)))", "# ::snt  this 's such a celebration , ' said Darby Hudd , a 17-year - old friend of the slain teen . \n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Darby\"\n                  :op2 \"Hudd\")\n            :age (t / temporal-quantity\n                  :quant 17\n                  :unit (y / year))\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (t2 / teen\n                        :ARG1-of (s2 / slay-01))\n                  :ARG2 (f / friend)))\n      :ARG1 (c / celebrate-02\n            :ARG1 (t3 / this)\n            :mod (s3 / such)))", "# ::snt  A classmate , Christopher Plaskon , has been charged with Sanchez 's murder . \n(m / multi-sentence\n      :snt1 (c / charge-05\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Christopher\"\n                        :op2 \"Plaskon\")\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG2 (c2 / classmate)))\n            :ARG2 (m2 / murder-01\n                  :ARG0 p\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Sanchez\")))))"], "tree": ["(m / multi-sentence\n   :snt1 (c / celebrate-01\n            :ARG0 (p / person\n                     :quant (m2 / multiple\n                                :op1 100))))", "(c / celebrate-01\n   :ARG0 (p / person\n            :quant (m2 / multiple\n                       :op1 100))\n   :ARG1 (l / life\n            :poss (p2 / person\n                      :name (n / name\n                               :op1 \"Maren\"\n                               :op2 \"Sanchez\")))\n   :time (d3 / date-entity\n             :weekday (s2 / saturday)))", "(p2 / person\n    :age (t / temporal-quantity\n            :unit (y / year)))", "(p2 / person\n    :name (n / name\n             :op1 \"Maren\"\n             :op2 \"Sanchez\")\n    :age (t / temporal-quantity\n            :quant 16)\n    :ARG1 (s / stab-01\n             :ARG4 (d / die-01\n                      :ARG1 p2)))", "(b / before\n   :op1 (n2 / now)\n   :quant (t2 / temporal-quantity\n              :unit (y2 / year)))", "(t / think-01\n   :ARG1 (s / sad-02\n            :ARG0 (a / anything)))", "(t / think-01\n   :ARG1 (s / sad-02\n            :topic (t2 / this)))", "(t / think-01\n   :ARG0 (ii / i)\n   :ARG1 (s / sad-02\n            :ARG0 (a / anything)))", "(t / think-01\n   :ARG0 (ii / i)\n   :ARG1 (s / sad-02\n            :topic (t2 / this)))", "(s / sad-02\n   :ARG0 (a / anything)\n   :topic (t2 / this))", "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Darby\"\n                     :op2 \"Hudd\"))\n   :ARG1 (c / celebrate-02\n            :ARG1 (t3 / this)))", "(s / say-01\n   :ARG0 (p / person\n            :age (t / temporal-quantity\n                    :quant 17))\n   :ARG1 (c / celebrate-02\n            :mod (s3 / such)))", "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (f / friend)))\n   :ARG1 (c / celebrate-02\n            :ARG1 (t3 / this)))", "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (f / friend)))\n   :ARG1 (c / celebrate-02\n            :mod (s3 / such)))", "(p / person\n   :name (n / name\n            :op1 \"Darby\"\n            :op2 \"Hudd\")\n   :age (t / temporal-quantity\n           :quant 17)\n   :ARG0 (h / have-rel-role-91\n            :ARG2 (f / friend)))", "(m / multi-sentence\n   :snt1 (c / charge-05\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Christopher\"\n                              :op2 \"Plaskon\"))))", "(c / charge-05\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Christopher\"\n                     :op2 \"Plaskon\"))\n   :ARG2 (m2 / murder-01\n             :ARG0 p))", "(c / charge-05\n   :ARG1 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (c2 / classmate)))\n   :ARG2 (m2 / murder-01\n             :ARG0 p))", "(c / charge-05\n   :ARG1 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (c2 / classmate)))\n   :ARG2 (m2 / murder-01\n             :ARG1 (p2 / person\n                       :name (n2 / name\n                                 :op1 \"Sanchez\"))))"], "smus": ["Hundreds of people celebrated.", "On Saturday, hundreds celebrated Maren Sanchez's life.", "a year old", "Maren Sanchez, 16, was stabbed to death.", "A year ago.", "thief, anythief is sad.", "thi, sad thi.", "I'd thik if anythi would be sad.", "I'll thief be sad to topi.", "Anythi is sad tpi.", "This is a celebration,\" Darby Husd said.", "Such a celebration, said the 17-year-old.", "\"This is a celebration,\" a friend said.", "Such a celebration, friend said.", "Darby Husd, 17, is a friend.", "Christopher Plaskon was charged.", "Christopher Plaskon was charged with murder.", "A classmate has been charged with murder.", "A classmate has been charged with murdering Sanchez."]}, {"instance_id": "realsumm-10", "summary": "<t> Audrey Alexander wanted Alexander neighbours to chop down neighbours huge hedge . </t> <t> Alexander claims the 40 ft leylandii was blocking sunlight from reaching Alexander home . </t> <t> Feud started in 1980 when Feud blocked light from reaching a vegetable patch . </t> <t> Council finally rules that the hedge can stay - but must be cut back to 20 ft . </t>", "summary_trees": ["# ::snt  Audrey Alexander wanted Alexander neighbours to chop down neighbours huge hedge . \n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Audrey\"\n                  :op2 \"Alexander\"))\n      :ARG1 (c / chop-down-02\n            :ARG0 (p2 / person\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 p\n                        :ARG2 (n2 / neighbor)))\n            :ARG1 (h2 / hedge\n                  :mod (h3 / huge)\n                  :poss p2))\n      :ARG2 p2)", "# ::snt  Alexander claims the 40 ft leylandii was blocking sunlight from reaching Alexander home . \n(c / claim-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Alexander\"))\n      :ARG1 (b / block-01\n            :ARG0 (l / leylandii\n                  :quant (d / distance-quantity\n                        :quant 40\n                        :unit (f / foot)))\n            :ARG1 (s / sunlight)\n            :ARG2 (r / reach-01\n                  :ARG1 (h / home\n                        :poss p))))", "# ::snt  Feud started in 1980 when Feud blocked light from reaching a vegetable patch . \n(s / start-01\n      :ARG1 (f / feud-01)\n      :time (d / date-entity\n            :year 1980\n            :time-of (b / block-01\n                  :ARG0 f\n                  :ARG1 (r / reach-01\n                        :ARG0 (l / light)\n                        :ARG1 (p / patch\n                              :mod (v / vegetable))))))", "# ::snt  Council finally rules that the hedge can stay - but must be cut back to 20 ft . \n(r / rule-01\n      :ARG0 (c / council)\n      :ARG1 (c2 / contrast-01\n            :ARG1 (p / possible-01\n                  :ARG1 (s / stay-01\n                        :ARG1 (h / hedge)))\n            :ARG2 (o / obligate-01\n                  :ARG2 (c3 / cut-back-05\n                        :ARG1 h\n                        :ARG2 (d / distance-quantity\n                              :quant 20\n                              :unit (f / foot)))))\n      :time (f2 / final))"], "tree": ["(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Audrey\"\n                     :op2 \"Alexander\")))", "(w / want-01\n   :ARG1 (c / chop-down-02\n            :ARG1 (h2 / hedge\n                      :mod (h3 / huge))))", "(w / want-01\n   :ARG1 (c / chop-down-02\n            :ARG1 (h2 / hedge\n                      :poss (p2 / person))))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Audrey\"\n                     :op2 \"Alexander\"))\n   :ARG1 (c / chop-down-02\n            :ARG1 (h2 / hedge\n                      :mod (h3 / huge))))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Audrey\"\n                     :op2 \"Alexander\"))\n   :ARG1 (c / chop-down-02\n            :ARG0 (p2 / person\n                      :ARG0 (h / have-rel-role-91\n                               :ARG2 (n2 / neighbor)))))", "(c / claim-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Alexander\")))", "(c / claim-01\n   :ARG1 (b / block-01\n            :ARG2 (r / reach-01\n                     :ARG1 (h / home\n                              :poss (p / person :name (n / name :op1 \"Alexander\"))))))", "(c / claim-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Alexander\"))\n   :ARG1 (b / block-01\n            :ARG0 (l / leylandii\n                     :quant (d / distance-quantity\n                               :quant 40))))", "(c / claim-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Alexander\"))\n   :ARG1 (b / block-01\n            :ARG1 (s / sunlight)))", "(c / claim-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Alexander\"))\n   :ARG1 (b / block-01\n            :ARG0 (l / leylandii\n                     :quant (d / distance-quantity\n                               :unit (f / foot)))))", "(s / start-01\n   :time (d / date-entity\n            :year 1980))", "(s / start-01\n   :time (d / date-entity\n            :time (b / block-01\n                     :ARG1 (r / reach-01\n                              :ARG1 (p / patch\n                                       :mod (v / vegetable))))))", "(s / start-01\n   :ARG1 (f / feud-01)\n   :time (d / date-entity\n            :year 1980))", "(d / date-entity\n   :time (b / block-01\n            :ARG1 (r / reach-01\n                     :ARG1 (p / patch\n                              :mod (v / vegetable)))))", "(b / block-01\n   :ARG1 (r / reach-01\n            :ARG1 (p / patch\n                     :mod (v / vegetable))))", "(r / rule-01\n   :ARG0 (c / council)\n   :time (f2 / final))", "(r / rule-01\n   :ARG1 (c2 / contrast-01\n             :ARG1 (p / possible-01\n                      :ARG1 (s / stay-01\n                               :ARG1 (h / hedge))))\n   :time (f2 / final))", "(r / rule-01\n   :ARG0 (c / council)\n   :ARG1 (c2 / contrast-01\n             :ARG1 (p / possible-01\n                      :ARG1 (s / stay-01\n                               :ARG1 (h / hedge))))\n   :time (f2 / final))", "(c2 / contrast-01\n    :ARG2 (o / obligate-01\n             :ARG2 (c3 / cut-back-05\n                       :ARG1 (h / hedge))))", "(c2 / contrast-01\n    :ARG1 (p / possible-01\n             :ARG1 (s / stay-01\n                      :ARG1 (h / hedge)))\n    :ARG2 (o / obligate-01\n             :ARG2 (c3 / cut-back-05\n                       :ARG1 h)))"], "smus": ["Audrey Alexander wanted.", "wanted to chop down a huge hedge.", "wanted to chop down people's hedge.", "Audrey Alexander wanted to chop down a huge hedge.", "Audrey Alexander wanted his neighbors to chop down.", "Alexander claims.", "Alexander's home claims to be blocked from reaching.", "Alexander claims 40 leylandii are blocking.", "Alexander claims the sunlight is blocking.", "Alexander claims there are feet of leylandii blocking.", "started in 1980.", "started when the reaching of the vegetable patch was blocked.", "Feuds started in 1980.", "When reaching the vegetable patch was blocked.", "Reaching the vegetable patch was blocked.", "The Council finally rules.", "Finally, it rules that the hedge can stay.", "The Council finally rules that the hedge can stay.", "But the hedge must be cut back.", "The hedge may stay, but it must be cut back."]}, {"instance_id": "realsumm-11", "summary": "<t> Catherine Nevin was allowed out despite being jailed for life in April 2000 . </t> <t> 62-year - old was seen on the bus , with a pal and walking around in Dublin . </t> <t> Sat next to unsuspecting commuter on bus and went totally unnoticed . </t> <t> Ireland 's most infamous female prisoner murdered husband Tom in 1996 . </t>", "summary_trees": ["# ::snt  Catherine Nevin was allowed out despite being jailed for life in April 2000 . \n(a / allow-01\n      :ARG1 (o / out-06\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Catherine\"\n                        :op2 \"Nevin\")))\n      :concession (j / jail-01\n            :ARG1 p\n            :ARG2 (l / life)\n            :time (d / date-entity\n                  :year 2000\n                  :month 4)))", "# ::snt  62-year - old was seen on the bus , with a pal and walking around in Dublin . \n(s / see-01\n      :ARG1 (p / person\n            :age (t / temporal-quantity\n                  :quant 62\n                  :unit (y / year))\n            :accompanier (p2 / person\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 p\n                        :ARG2 (p3 / pal)))\n            :ARG0-of (w / walk-01\n                  :location (a / around\n                        :op1 (c / city\n                              :name (n / name\n                                    :op1 \"Dublin\")))))\n      :location (b / bus))", "# ::snt  Sat next to unsuspecting commuter on bus and went totally unnoticed . \n(a / and\n      :op1 (s / sit-01\n            :ARG1 (ii / i)\n            :ARG2 (n / next-to\n                  :op1 (p / person\n                        :ARG0-of (c / commute-01)\n                        :ARG0-of (s2 / suspect-01\n                              :polarity -))\n                  :location (b / bus)))\n      :op2 (n2 / notice-01\n            :polarity -\n            :ARG1 ii\n            :degree (t / total)))", "# ::snt  Ireland 's most infamous female prisoner murdered husband Tom in 1996 . \n(m / murder-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Tom\")\n            :ARG1-of (h / have-rel-role-91\n                  :ARG0 (p2 / person\n                        :ARG1-of (ii / imprison-01)\n                        :mod (f / female)\n                        :ARG1-of (h2 / have-degree-91\n                              :ARG2 (ii2 / infamous)\n                              :ARG3 (m2 / most)\n                              :ARG5 (p3 / person\n                                    :ARG1-of (ii3 / imprison-01)\n                                    :location (c / country\n                                          :name (n2 / name\n                                                :op1 \"Ireland\")))))\n                  :ARG2 (h3 / husband)))\n      :ARG1 p\n      :time (d / date-entity\n            :year 1996))"], "tree": ["(a / allow-01\n   :ARG1 (o / out-06\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Catherine\"\n                              :op2 \"Nevin\"))))", "(a / allow-01\n   :concession (j / jail-01\n                  :ARG1 (p / person\n                           :name (n / name\n                                    :op1 \"Catherine\"\n                                    :op2 \"Nevin\"))))", "(a / allow-01\n   :ARG1 (o / out-06\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Catherine\"\n                              :op2 \"Nevin\")))\n   :concession (j / jail-01\n                  :ARG1 p))", "(a / allow-01\n   :ARG1 (o / out-06\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Catherine\"\n                              :op2 \"Nevin\")))\n   :concession (j / jail-01\n                  :ARG2 (l / life)))", "(a / allow-01\n   :ARG1 (o / out-06\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Catherine\"\n                              :op2 \"Nevin\")))\n   :concession (j / jail-01\n                  :time (d / date-entity\n                           :year 2000)))", "(s / see-01\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :quant 62)))", "(s / see-01\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :quant 62))\n   :location (b / bus))", "(p / person\n   :age (t / temporal-quantity\n           :quant 62)\n   :ARG0 (w / walk-01\n            :location (a / around\n                         :op1 (c / city\n                                 :name (n / name\n                                          :op1 \"Dublin\")))))", "(p2 / person\n    :ARG0 (h / have-rel-role-91\n             :ARG1 (p :ARG0 (w / walk-01\n                               :location (a / around\n                                            :op1 (c / city\n                                                    :name (n / name\n                                                             :op1 \"Dublin\")))))))", "(a / and\n   :op1 (s / sit-01\n           :ARG2 (n / next-to\n                    :op1 (p / person\n                            :ARG0 (c / commute-01))))\n   :op2 (n2 / notice-01\n            :polarity -))", "(a / and\n   :op1 (s / sit-01\n           :ARG2 (n / next-to\n                    :op1 (p / person\n                            :ARG0 (c / commute-01))))\n   :op2 (n2 / notice-01\n            :degree (t / total)))", "(s / sit-01\n   :ARG2 (n / next-to\n            :op1 (p / person\n                    :ARG0 (c / commute-01))))", "(s / sit-01\n   :ARG2 (n / next-to\n            :op1 (p / person\n                    :ARG0 (s2 / suspect-01\n                              :polarity -))))", "(n / next-to\n   :op1 (p / person\n           :ARG0 (c / commute-01))\n   :location (b / bus))", "(m / murder-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tom\")))", "(m / murder-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tom\"))\n   :time (d / date-entity\n            :year 1996))"], "smus": ["Catherine Nevin was allowed out.", "allowed despite Catherine Nevin being jailed.", "Catherine Nevin was allowed out despite being jailed.", "Catherine Nevin was allowed out despite being jailed for life.", "Catherine Nevin was allowed out despite being jailed in 2000.", "The 62-year-old was seen.", "The 62-year-old was seen on the bus.", "62-year-old walking around Dublin", "Walking around Dublin.", "Sitting next to commuters and unnoticeable.", "Sitting next to a commuter and totally noticeless.", "Sitting next to a commuter.", "Sitting next to an unsuspecting person.", "next to commuter on bus", "Tom was murdered.", "Tom was murdered in 1996."]}, {"instance_id": "realsumm-12", "summary": "<t> Didier Drogba given the Barclays Spirit of the Game award . </t> <t> The 37-year - old 's foundation has done impressive work in Africa . </t> <t> Some of Chelsea 's stars attended a charity ball which raised \u00a3 400,000 . </t> <t> CLICK HERE for all the latest Chelsea news . </t>", "summary_trees": ["# ::snt  Didier Drogba given the Barclays Spirit of the Game award . \n(g / give-01\n      :ARG1 (a / award\n            :name (n / name\n                  :op1 \"Barclays\"\n                  :op2 \"Spirit\"\n                  :op3 \"of\"\n                  :op4 \"the\"\n                  :op5 \"Game\"))\n      :ARG2 (p / person\n            :name (n2 / name\n                  :op1 \"Didier\"\n                  :op2 \"Drogba\")))", "# ::snt  The 37-year - old 's foundation has done impressive work in Africa . \n(w / work-01\n      :ARG0 (f / foundation\n            :poss (p / person\n                  :age (t / temporal-quantity\n                        :quant 37\n                        :unit (y / year))))\n      :ARG0-of (ii / impress-01)\n      :location (c / continent\n            :name (n / name\n                  :op1 \"Africa\")))", "# ::snt  Some of Chelsea 's stars attended a charity ball which raised \u00a3 400,000 . \n(a / attend-01\n      :ARG0 (s / star\n            :ARG1-of (ii / include-91\n                  :ARG2 (s2 / star\n                        :poss (p / person\n                              :name (n / name\n                                    :op1 \"Chelsea\"))))\n            :quant (s3 / some))\n      :ARG1 (b / ball\n            :purpose (c / charity)\n            :ARG0-of (r / raise-02\n                  :ARG1 (m / monetary-quantity\n                        :quant 400000\n                        :unit (p2 / pound)))))", "# ::snt  CLICK HERE for all the latest Chelsea news . \n(c / CLICK-01\n      :mode imperative\n      :ARG0 (y / you)\n      :location (h / here)\n      :purpose (n / news\n            :mod (l / last)\n            :mod (a / all)\n            :topic (p / person\n                  :name (n2 / name\n                        :op1 \"Chelsea\"))))"], "tree": ["(g / give-01\n   :ARG1 (a / award\n            :name (n / name\n                     :op1 \"Barclays\"\n                     :op2 \"Spirit\"\n                     :op3 \"of\"\n                     :op4 \"the\"\n                     :op5 \"Game\")))", "(g / give-01\n   :ARG2 (p / person\n            :name (n2 / name\n                      :op1 \"Didier\"\n                      :op2 \"Drogba\")))", "(g / give-01\n   :ARG1 (a / award\n            :name (n / name\n                     :op1 \"Barclays\"\n                     :op2 \"Spirit\"\n                     :op3 \"of\"\n                     :op4 \"the\"\n                     :op5 \"Game\"))\n   :ARG2 (p / person\n            :name (n2 / name\n                      :op1 \"Didier\"\n                      :op2 \"Drogba\")))", "(a / award\n   :name (n / name\n            :op1 \"Barclays\"\n            :op2 \"Spirit\"\n            :op3 \"of\"\n            :op4 \"the\"\n            :op5 \"Game\"))", "(p / person\n   :name (n2 / name\n             :op1 \"Didier\"\n             :op2 \"Drogba\"))", "(w / work-01\n   :ARG0 (f / foundation\n            :poss (p / person\n                     :age (t / temporal-quantity\n                             :quant 37))))", "(w / work-01\n   :location (c / continent\n                :name (n / name\n                         :op1 \"Africa\")))", "(w / work-01\n   :ARG0 (f / foundation\n            :poss (p / person\n                     :age (t / temporal-quantity\n                             :quant 37)))\n   :location (c / continent\n                :name (n / name\n                         :op1 \"Africa\")))", "(f / foundation\n   :poss (p / person\n            :age (t / temporal-quantity\n                    :quant 37)))", "(p / person\n   :age (t / temporal-quantity\n           :quant 37))", "(a / attend-01\n   :ARG0 (s / star\n            :quant (s3 / some)))", "(a / attend-01\n   :ARG1 (b / ball\n            :purpose (c / charity)))", "(a / attend-01\n   :ARG0 (s / star\n            :ARG1 (ii / include-91\n                      :ARG2 (s2 / star\n                                :poss (p / person\n                                         :name (n / name\n                                                  :op1 \"Chelsea\")))))\n   :ARG1 (b / ball\n            :purpose (c / charity)))", "(a / attend-01\n   :ARG0 (s / star\n            :quant (s3 / some))\n   :ARG1 (b / ball\n            :purpose (c / charity)))", "(a / attend-01\n   :ARG0 (s / star\n            :quant (s3 / some))\n   :ARG1 (b / ball\n            :ARG0 (r / raise-02\n                     :ARG1 (m / monetary-quantity\n                              :quant 400000))))", "(c / CLICK-01\n   :ARG0 (y / you)\n   :purpose (n / news\n               :mod (l / last)))", "(c / CLICK-01\n   :location (h / here)\n   :purpose (n / news\n               :topic (p / person\n                         :name (n2 / name\n                                   :op1 \"Chelsea\"))))", "(c / CLICK-01\n   :ARG0 (y / you)\n   :location (h / here)\n   :purpose (n / news\n               :topic (p / person\n                         :name (n2 / name\n                                   :op1 \"Chelsea\"))))", "(n / news\n   :topic (p / person\n             :name (n2 / name\n                       :op1 \"Chelsea\")))"], "smus": ["The Barclays Spirit of the Game award was given", "given to Didier Drogba", "The Barclays Spirit of the Game award was given to Didier Drogba.", "The Barclays Spirit of the Game award", "Didier Drogba", "The 37-year-old's foundation is at work.", "Work in Africa.", "The 37-year-old's foundation is at work in Africa.", "The foundation of 37.", "37.", "Some stars attended.", "attended a charity ball.", "Some of Chelsea's stars attended a charity ball.", "Some stars attended a charity ball.", "Some stars attended the ball that raised 400,000.", "For the latest news, CLICK HERE.", "CLICK HERE for Chelsea news", "For Chelsea news, CLICK HERE.", "News about Chelsea."]}, {"instance_id": "realsumm-13", "summary": "<t> Figures from the Catholic Church show more and more becoming nuns . </t> <t> The number of women taking Holy Vows stood at just seven back in 2004 . </t> <t> But that figure had risen to 15 in 2009 and increased further to 45 last year . </t> <t> One father said a ' gap in the market for meaning ' led people toward religion . </t>", "summary_trees": ["# ::snt  Figures from the Catholic Church show more and more becoming nuns . \n(s / show-01\n      :ARG0 (f / figure\n            :source (o / organization\n                  :name (n / name\n                        :op1 \"Catholic\"\n                        :op2 \"Church\")))\n      :ARG1 (b / become-01\n            :ARG1 (p / person\n                  :quant (n2 / number\n                        :ARG1-of (ii / increase-01)))\n            :ARG2 (n3 / nun)))", "# ::snt  The number of women taking Holy Vows stood at just seven back in 2004 . \n(m / multi-sentence\n      :snt1 (s / stand-04\n            :ARG1 (n / number\n                  :quant-of (w / woman\n                        :ARG0-of (t / take-01\n                              :ARG1 (v / vow-01\n                                    :mod (h / holy)))))\n            :ARG2 (n2 / numerical-quantity\n                  :quant 7\n                  :mod (j / just))\n            :time (d / date-entity\n                  :year 2004)))", "# ::snt  But that figure had risen to 15 in 2009 and increased further to 45 last year . \n(c / contrast-01\n      :ARG2 (a / and\n            :op1 (r / rise-01\n                  :ARG1 (f / figure\n                        :mod (t / that))\n                  :ARG4 (n / numerical-quantity\n                        :quant 15)\n                  :time (d / date-entity\n                        :year 2009))\n            :op2 (ii / increase-01\n                  :ARG1 f\n                  :ARG4 (n2 / numerical-quantity\n                        :quant 45)\n                  :degree (f2 / further)\n                  :time (y / year\n                        :mod (l / last)))))", "# ::snt  One father said a ' gap in the market for meaning ' led people toward religion . \n(s / say-01\n      :ARG0 (p / person\n            :quant 1\n            :ARG0-of (h / have-rel-role-91\n                  :ARG2 (f / father)))\n      :ARG1 (l / lead-01\n            :ARG0 (g / gap\n                  :location (m / market)\n                  :topic (m2 / mean-01))\n            :ARG1 (p2 / person)\n            :ARG4 (r / religion)))"], "tree": ["(s / show-01\n   :ARG1 (b / become-01\n            :ARG2 (n3 / nun)))", "(s / show-01\n   :ARG0 (f / figure\n            :source (o / organization\n                       :name (n / name\n                                :op1 \"Catholic\"\n                                :op2 \"Church\")))\n   :ARG1 (b / become-01\n            :ARG2 (n3 / nun)))", "(f / figure\n   :source (o / organization\n              :name (n / name\n                       :op1 \"Catholic\"\n                       :op2 \"Church\")))", "(o / organization\n   :name (n / name\n            :op1 \"Catholic\"\n            :op2 \"Church\"))", "(b / become-01\n   :ARG1 (p / person\n            :quant (n2 / number\n                       :ARG1 (ii / increase-01)))\n   :ARG2 (n3 / nun))", "(s / stand-04\n   :ARG2 (n2 / numerical-quantity\n             :quant 7))", "(s / stand-04\n   :ARG1 (n / number\n            :quant (w / woman\n                      :ARG0 (t / take-01\n                               :ARG1 (v / vow-01\n                                        :mod (h / holy)))))\n   :ARG2 (n2 / numerical-quantity\n             :quant 7))", "(s / stand-04\n   :ARG1 (n / number\n            :quant (w / woman\n                      :ARG0 (t / take-01\n                               :ARG1 (v / vow-01\n                                        :mod (h / holy)))))\n   :time (d / date-entity\n            :year 2004))", "(s / stand-04\n   :ARG2 (n2 / numerical-quantity\n             :quant 7)\n   :time (d / date-entity\n            :year 2004))", "(s / stand-04\n   :ARG1 (n / number\n            :quant (w / woman\n                      :ARG0 (t / take-01\n                               :ARG1 (v / vow-01\n                                        :mod (h / holy)))))\n   :ARG2 (n2 / numerical-quantity\n             :quant 7)\n   :time (d / date-entity\n            :year 2004))", "(c / contrast-01\n   :ARG2 (r / rise-01\n            :time (d / date-entity\n                     :year 2009)))", "(a / and\n   :op2 (ii / increase-01\n            :time (y / year\n                     :mod (l / last))))", "(r / rise-01\n   :ARG4 (n / numerical-quantity\n            :quant 15)\n   :time (d / date-entity\n            :year 2009))", "(r / rise-01\n   :ARG1 (f / figure\n            :mod (t / that))\n   :ARG4 (n / numerical-quantity\n            :quant 15)\n   :time (d / date-entity\n            :year 2009))", "(ii / increase-01\n    :time (y / year\n             :mod (l / last)))", "(s / say-01\n   :ARG1 (l / lead-01\n            :ARG0 (g / gap\n                     :location (m / market))))", "(s / say-01\n   :ARG0 (p / person\n            :quant 1)\n   :ARG1 (l / lead-01\n            :ARG0 (g / gap\n                     :topic (m2 / mean-01))))", "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (f / father)))\n   :ARG1 (l / lead-01\n            :ARG0 (g / gap\n                     :location (m / market))))", "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (f / father)))\n   :ARG1 (l / lead-01\n            :ARG1 (p2 / person)))", "(l / lead-01\n   :ARG0 (g / gap\n            :topic (m2 / mean-01))\n   :ARG1 (p2 / person)\n   :ARG4 (r / religion))"], "smus": ["Shows how nuns are becoming.", "Catholic Church figures show nuns becoming.", "Catholic Church figures", "The Catholic Church.", "More and more people are becoming nuns.", "stood at 7.", "The number of women taking the Holy Vow stood at 7.", "The number of women taking the holy vow stood in 2004.", "In 2004, it stood at 7.", "In 2004, the number of women taking the holy vow stood at 7.", "But in 2009, it rose.", "And increased last year.", "In 2009, the number has risen to 15.", "That figure has risen to 15 in 2009.", "Increased last year.", "The gap in the market has led, it said.", "One said the gap in meaning had led.", "The father said the gap in the market had led to it.", "The father said the people were led.", "The meaning gap has led people to religion."]}, {"instance_id": "realsumm-14", "summary": "<t> Eduardo Vargas put QPR ahead with a spectacular strike from 25 yards after 15 minutes . </t> <t> Charlie Austin doubled the lead with a header 20 minutes later , Bobby Zamora made it three . </t> <t> Victor Anichebe pulled one back for West Brom before Youssouf Mulumbu was sent off and Joey Barton scored . </t>", "summary_trees": ["# ::snt  Eduardo Vargas put QPR ahead with a spectacular strike from 25 yards after 15 minutes . \n(p / put-03\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Eduardo\"\n                  :op2 \"Vargas\"))\n      :ARG1 (t / team\n            :name (n2 / name\n                  :op1 \"QPR\"))\n      :ARG2 (a / ahead)\n      :manner (s / strike-01\n            :ARG0 p2\n            :ARG2 (d / distance-quantity\n                  :quant 25\n                  :unit (y / yard))\n            :mod (s2 / spectacle))\n      :time (a2 / after\n            :op1 (t2 / temporal-quantity\n                  :quant 15\n                  :unit (m / minute))))", "# ::snt  Charlie Austin doubled the lead with a header 20 minutes later , Bobby Zamora made it three . \n(a / and\n      :op1 (d / double-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Charlie\"\n                        :op2 \"Austin\"))\n            :ARG1 (l / lead-01)\n            :instrument (h / header)\n            :time (a2 / after\n                  :quant (t / temporal-quantity\n                        :quant 20\n                        :unit (m / minute))))\n      :op2 (m2 / make-01\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Bobby\"\n                        :op2 \"Zamora\"))\n            :ARG1 (ii / it\n                  :quant 3)))", "# ::snt  Victor Anichebe pulled one back for West Brom before Youssouf Mulumbu was sent off and Joey Barton scored . \n(p / pull-back-09\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Victor\"\n                  :op2 \"Anichebe\"))\n      :ARG1 (o / one)\n      :beneficiary (t / team\n            :name (n2 / name\n                  :op1 \"West\"\n                  :op2 \"Brum\"))\n      :time (b / before\n            :op1 (a / and\n                  :op1 (s / send-off-08\n                        :ARG1 (p3 / person\n                              :name (n3 / name\n                                    :op1 \"Youssouf\"\n                                    :op2 \"Mulumbu\")))\n                  :op2 (s2 / score-01\n                        :ARG0 (p4 / person\n                              :name (n4 / name\n                                    :op1 \"Joey\"\n                                    :op2 \"Barton\"))))))"], "tree": ["(p / put-03\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Eduardo\"\n                      :op2 \"Vargas\"))\n   :ARG1 (t / team\n            :name (n2 / name\n                      :op1 \"QPR\"))\n   :ARG2 (a / ahead))", "(p / put-03\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Eduardo\"\n                      :op2 \"Vargas\"))\n   :ARG1 (t / team\n            :name (n2 / name\n                      :op1 \"QPR\"))\n   :time (a2 / after\n             :op1 (t2 / temporal-quantity\n                      :quant 15)))", "(p / put-03\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Eduardo\"\n                      :op2 \"Vargas\"))\n   :ARG2 (a / ahead)\n   :time (a2 / after\n             :op1 (t2 / temporal-quantity\n                      :quant 15)))", "(p / put-03\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Eduardo\"\n                      :op2 \"Vargas\"))\n   :ARG1 (t / team\n            :name (n2 / name\n                      :op1 \"QPR\"))\n   :ARG2 (a / ahead)\n   :time (a2 / after\n             :op1 (t2 / temporal-quantity\n                      :quant 15)))", "(s / strike-01\n   :ARG2 (d / distance-quantity\n            :quant 25))", "(a / and\n   :op1 (d / double-01\n           :ARG0 (p / person\n                    :name (n / name\n                             :op1 \"Charlie\"\n                             :op2 \"Austin\"))))", "(d / double-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Charlie\"\n                     :op2 \"Austin\"))\n   :ARG1 (l / lead-01))", "(d / double-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Charlie\"\n                     :op2 \"Austin\"))\n   :ARG1 (l / lead-01)\n   :instrument (h / header))", "(m2 / make-01\n    :ARG0 (p2 / person\n              :name (n2 / name\n                        :op1 \"Bobby\"\n                        :op2 \"Zamora\")))", "(p / pull-back-09\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Victor\"\n                      :op2 \"Anichebe\")))", "(p / pull-back-09\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Victor\"\n                      :op2 \"Anichebe\"))\n   :ARG1 (o / one))", "(p / pull-back-09\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Victor\"\n                      :op2 \"Anichebe\"))\n   :time (b / before\n            :op1 (s / send-off-08\n                    :ARG1 (p3 / person\n                              :name (n3 / name\n                                        :op1 \"Youssouf\"\n                                        :op2 \"Mulumbu\")))))", "(s / send-off-08\n   :ARG1 (p3 / person\n             :name (n3 / name\n                       :op1 \"Youssouf\"\n                       :op2 \"Mulumbu\")))", "(s2 / score-01\n    :ARG0 (p4 / person\n              :name (n4 / name\n                        :op1 \"Joey\"\n                        :op2 \"Barton\")))"], "smus": ["Eduardo Vargas put QPR ahead.", "After 15 minutes Eduardo Vargas put QPR up.", "Eduardo Vargas put ahead after 15 minutes.", "Eduardo Vargas put QPR ahead after 15 minutes.", "The strike was 25 yards.", "Charlie Austin doubled.", "Charlie Austin doubled the lead.", "Charlie Austin doubled the lead with a header.", "Bobby Zamora made.", "Victor Anichebe pulled back.", "Victor Anichebe pulled back one.", "Victor Anichebe pulled back before Youssouf Mulumbu was sent off.", "Youssouf Mulumbu was sent off.", "Joey Barton scored."]}, {"instance_id": "realsumm-15", "summary": "<t> Detroit Red Wings ' Drew Miller was caught by a skate in the first period against the Ottawa Senators . </t> <t> The massive cut required 50 to 60 stitches to close , but did not damage Miller 's eye . </t> <t> The Red Wings lost 2 - 1 but remained in third place in the Atlantic division . </t>", "summary_trees": ["# ::snt  Detroit Red Wings ' Drew Miller was caught by a skate in the first period against the Ottawa Senators . \n(c / catch-02\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Drew\"\n                  :op2 \"Miller\")\n            :part-of (t / team\n                  :name (n2 / name\n                        :op1 \"Detroit\"\n                        :op2 \"Red\"\n                        :op3 \"Wings\")))\n      :ARG2 (s / skate)\n      :time (p2 / period\n            :ord (o / ordinal-entity\n                  :value 1)\n            :subevent-of (o2 / oppose-01\n                  :ARG0 t\n                  :ARG1 (t2 / team\n                        :name (n3 / name\n                              :op1 \"Ottawa\"\n                              :op2 \"Senators\")))))", "# ::snt  The massive cut required 50 to 60 stitches to close , but did not damage Miller 's eye . \n(c / contrast-01\n      :ARG1 (r / require-01\n            :ARG0 (c2 / close-01\n                  :ARG1 (c3 / cut-01\n                        :mod (m / massive)))\n            :ARG1 (s / stitch\n                  :quant (b / between\n                        :op1 50\n                        :op2 60)))\n      :ARG2 (d / damage-01\n            :polarity -\n            :ARG0 c3\n            :ARG1 (e / eye\n                  :part-of (p / person\n                        :name (n / name\n                              :op1 \"Miller\")))))", "# ::snt  The Red Wings lost 2 - 1 but remained in third place in the Atlantic division . \n(h / have-concession-91\n      :ARG1 (r / remain-01\n            :ARG1 (t / team\n                  :name (n / name\n                        :op1 \"Red\"\n                        :op2 \"Wings\"))\n            :ARG3 (p / place\n                  :ord (o / ordinal-entity\n                        :value 3)\n                  :location (d / division\n                        :mod (o2 / ocean\n                              :name (n2 / name\n                                    :op1 \"Atlantic\")))))\n      :ARG2 (l / lose-03\n            :ARG0 t\n            :quant (s / score-entity\n                  :op1 2\n                  :op2 1)))"], "tree": ["(c / catch-02\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Drew\"\n                     :op2 \"Miller\")))", "(c / catch-02\n   :time (p2 / period\n             :ord (o / ordinal-entity\n                     :value 1)))", "(c / catch-02\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Drew\"\n                     :op2 \"Miller\"))\n   :time (p2 / period\n             :ord (o / ordinal-entity\n                     :value 1)))", "(p / person\n   :name (n / name\n            :op1 \"Drew\"\n            :op2 \"Miller\")\n   :part (t / team\n            :name (n2 / name\n                      :op1 \"Detroit\"\n                      :op2 \"Red\"\n                      :op3 \"Wings\")))", "(p2 / period\n    :ord (o / ordinal-entity\n            :value 1)\n    :subevent (o2 / oppose-01\n                  :ARG1 (t2 / team\n                            :name (n3 / name\n                                      :op1 \"Ottawa\"\n                                      :op2 \"Senators\"))))", "(c / contrast-01\n   :ARG1 (r / require-01\n            :ARG0 (c2 / close-01\n                      :ARG1 (c3 / cut-01\n                                :mod (m / massive))))\n   :ARG2 (d / damage-01\n            :polarity -))", "(c / contrast-01\n   :ARG1 (r / require-01\n            :ARG1 (s / stitch\n                     :quant (b / between\n                               :op2 60)))\n   :ARG2 (d / damage-01\n            :polarity -))", "(c2 / close-01\n    :ARG1 (c3 / cut-01\n              :mod (m / massive)))", "(s / stitch\n   :quant (b / between\n             :op1 50))", "(e / eye\n   :part (p / person\n            :name (n / name\n                     :op1 \"Miller\")))", "(h / have-concession-91\n   :ARG1 (r / remain-01\n            :ARG1 (t / team\n                     :name (n / name\n                              :op1 \"Red\"\n                              :op2 \"Wings\"))))", "(h / have-concession-91\n   :ARG2 (l / lose-03\n            :ARG0 (t / team\n                     :name (n / name\n                              :op1 \"Red\"\n                              :op2 \"Wings\"))))", "(h / have-concession-91\n   :ARG1 (r / remain-01\n            :ARG3 (p / place\n                     :ord (o / ordinal-entity\n                             :value 3)))\n   :ARG2 (l / lose-03\n            :ARG0 (t / team\n                     :name (n / name\n                              :op1 \"Red\"\n                              :op2 \"Wings\"))))", "(r / remain-01\n   :ARG1 (t / team\n            :name (n / name\n                     :op1 \"Red\"\n                     :op2 \"Wings\")))", "(r / remain-01\n   :ARG1 (t / team\n            :name (n / name\n                     :op1 \"Red\"\n                     :op2 \"Wings\"))\n   :ARG3 (p / place\n            :ord (o / ordinal-entity\n                    :value 3)))"], "smus": ["Drew Miller was caught.", "Catched in the first period.", "Drew Miller was caught in the first period.", "Drew Miller for the Detroit Red Wings", "The first period was against the Ottawa Senators.", "Massive cuts required to close, but did not cause damage.", "60 stitches required, but did not cause damage.", "Close the massive cut.", "50-plus stitches.", "Miller's eye.", "However, the Red Wings remained.", "However, the Red Wings lost.", "Red Wings lost, but remained third place.", "The Red Wings remained.", "The Red Wings remained in third place."]}, {"instance_id": "realsumm-16", "summary": "<t> Jurgen Klopp will leave Borussia Dortmund at the end of the season . </t> <t> German boss has enjoyed success with club during seven - year stint . </t> <t> Klopp has been linked with Manchester City , Manchester United and Arsenal . </t> <t> Per Mertesacker says Klopp would like to see Klopp in the Premier League . </t>", "summary_trees": ["# ::snt  Jurgen Klopp will leave Borussia Dortmund at the end of the season . \n(l / leave-15\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jurgen\"\n                  :op2 \"Klopp\"))\n      :ARG1 (t / team\n            :name (n2 / name\n                  :op1 \"Borussia\"\n                  :op2 \"Dortmund\"))\n      :time (e / end-01\n            :ARG1 (s / season)))", "# ::snt  German boss has enjoyed success with club during seven - year stint . \n(e / enjoy-01\n      :ARG0 (b / boss\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"Germany\")))\n      :ARG1 (s / succeed-01\n            :ARG0 b\n            :ARG1 (c2 / club))\n      :duration (s2 / stint\n            :duration (t / temporal-quantity\n                  :quant 7\n                  :unit (y / year))))", "# ::snt  Klopp has been linked with Manchester City , Manchester United and Arsenal . \n(l / link-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Klopp\"))\n      :ARG2 (a / and\n            :op1 (t / team\n                  :name (n2 / name\n                        :op1 \"Manchester\"\n                        :op2 \"City\"))\n            :op2 (t2 / team\n                  :name (n3 / name\n                        :op1 \"Manchester\"\n                        :op2 \"United\"))\n            :op3 (t3 / team\n                  :name (n4 / name\n                        :op1 \"Arsenal\"))))", "# ::snt  Per Mertesacker says Klopp would like to see Klopp in the Premier League . \n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Per\"\n                  :op2 \"Mertesacker\"))\n      :ARG1 (l / like-02\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Klopp\"))\n            :ARG1 (s2 / see-01\n                  :ARG0 p2\n                  :ARG1 p2\n                  :location (l2 / league\n                        :name (n3 / name\n                              :op1 \"Premier\"\n                              :op2 \"League\")))))"], "tree": ["(l / leave-15\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jurgen\"\n                     :op2 \"Klopp\")))", "(l / leave-15\n   :time (e / end-01\n            :ARG1 (s / season)))", "(l / leave-15\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jurgen\"\n                     :op2 \"Klopp\"))\n   :ARG1 (t / team\n            :name (n2 / name\n                      :op1 \"Borussia\"\n                      :op2 \"Dortmund\")))", "(l / leave-15\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jurgen\"\n                     :op2 \"Klopp\"))\n   :time (e / end-01\n            :ARG1 (s / season)))", "(l / leave-15\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jurgen\"\n                     :op2 \"Klopp\"))\n   :ARG1 (t / team\n            :name (n2 / name\n                      :op1 \"Borussia\"\n                      :op2 \"Dortmund\"))\n   :time (e / end-01\n            :ARG1 (s / season)))", "(e / enjoy-01\n   :ARG1 (s / succeed-01\n            :ARG1 (c2 / club)))", "(e / enjoy-01\n   :ARG0 (b / boss\n            :mod (c / country\n                    :name (n / name\n                             :op1 \"Germany\")))\n   :ARG1 (s / succeed-01\n            :ARG0 b))", "(e / enjoy-01\n   :ARG0 (b / boss\n            :mod (c / country\n                    :name (n / name\n                             :op1 \"Germany\")))\n   :ARG1 (s / succeed-01\n            :ARG1 (c2 / club)))", "(e / enjoy-01\n   :ARG0 (b / boss\n            :mod (c / country\n                    :name (n / name\n                             :op1 \"Germany\")))\n   :ARG1 (s / succeed-01\n            :ARG1 (c2 / club))\n   :duration (s2 / stint\n                 :duration (t / temporal-quantity\n                              :quant 7)))", "(b / boss\n   :mod (c / country\n           :name (n / name\n                    :op1 \"Germany\")))", "(l / link-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Klopp\")))", "(l / link-01\n   :ARG2 (t3 / team\n             :name (n4 / name\n                       :op1 \"Arsenal\")))", "(l / link-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Klopp\"))\n   :ARG2 (t / team\n            :name (n2 / name\n                      :op1 \"Manchester\"\n                      :op2 \"City\")))", "(l / link-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Klopp\"))\n   :ARG2 (t2 / team\n             :name (n3 / name\n                       :op1 \"Manchester\"\n                       :op2 \"United\")))", "(l / link-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Klopp\"))\n   :ARG2 (t3 / team\n             :name (n4 / name\n                       :op1 \"Arsenal\")))", "(s / say-01\n   :ARG1 (l / like-02\n            :ARG1 (s2 / see-01\n                      :ARG1 (p2 / person :name (n2 / name :op1 \"Klopp\")))))", "(p / person\n   :name (n / name\n            :op1 \"Per\"\n            :op2 \"Mertesacker\"))", "(l / like-02\n   :ARG1 (s2 / see-01\n             :ARG0 (p2 / person :name (n2 / name :op1 \"Klopp\"))))", "(l / like-02\n   :ARG1 (s2 / see-01\n             :location (l2 / league\n                           :name (n3 / name\n                                     :op1 \"Premier\"\n                                     :op2 \"League\"))))"], "smus": ["Kurgen Klopp will leave.", "Leave at the end of the season.", "Kurgen Klopp will leave Borussia Dortmund.", "Kurgen Klopp will leave at the end of the season.", "Jurgen Klopp will leave Borussia Dortmund at the end of the season.", "Enjoyed the club's success.", "The German boss has enjoyed success.", "The German boss has enjoyed success at the club.", "The German boss has enjoyed club success in his seven stints.", "German boss.", "Klopp is linked.", "Linked to Arsenal.", "Klopp is linked with Manchester City.", "Klopp is linked with Manchester United.", "Klopp is linked with Arsenal.", "Like to see Klopp, says.", "Per Mertesacker.", "Would like to see Klopp.", "Would like to see it in the Prem."]}, {"instance_id": "realsumm-17", "summary": "<t> AppleInsider spotted nine listings in the past month relating to batteries . </t> <t> These include one for an iOS battery life software engineer and another for iOS software power systems engineer . </t> <t> Apple significantly improved the battery life on Apple iPhone 6 and 6 Plus . </t> <t> But Apple has been criticised for phones and tablets that only do n't last a day . </t>", "summary_trees": ["# ::snt  AppleInsider spotted nine listings in the past month relating to batteries . \n(s / spot-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"AppleInsider\"))\n      :ARG1 (l / listing\n            :quant 9\n            :ARG1-of (r / relate-01\n                  :ARG2 (b / battery)))\n      :time (m / month\n            :mod (p2 / past)))", "# ::snt  These include one for an iOS battery life software engineer and another for iOS software power systems engineer . \n(ii / include-01\n      :ARG1 (a / and\n            :op1 (o / one\n                  :purpose (p / person\n                        :ARG0-of (e / engineer-01\n                              :ARG1 (s / software\n                                    :purpose (l / life\n                                          :mod (b / battery))\n                                    :mod (p2 / product\n                                          :name (n / name\n                                                :op1 \"iOS\"))))))\n            :op2 (a2 / another\n                  :purpose (p3 / person\n                        :ARG0-of (e2 / engineer-01\n                              :ARG1 (s2 / system\n                                    :mod (p4 / power)\n                                    :mod (s3 / software))))))\n      :ARG2 (t / this))", "# ::snt  Apple significantly improved the battery life on Apple iPhone 6 and 6 Plus . \n(ii / improve-01\n      :ARG0 (c / company\n            :name (n / name\n                  :op1 \"Apple\"))\n      :ARG1 (l / life\n            :duration-of (b / battery)\n            :poss (a / and\n                  :op1 (p / product\n                        :name (n2 / name\n                              :op1 \"iPhone\"\n                              :op2 6))\n                  :op2 (p2 / product\n                        :name (n3 / name\n                              :op1 \"iPhone\"\n                              :op2 6\n                              :op3 \"Plus\"))\n                  :mod c))\n      :ARG1-of (s / significant-02))", "# ::snt  But Apple has been criticised for phones and tablets that only do n't last a day . \n(c / contrast-01\n      :ARG2 (c2 / criticize-01\n            :ARG1 (c3 / company\n                  :name (n / name\n                        :op1 \"Apple\"))\n            :ARG2 (a / and\n                  :op1 (p / phone)\n                  :op2 (t / tablet)\n                  :ARG1-of (l / last-04\n                        :polarity -\n                        :ARG2 (t2 / temporal-quantity\n                              :quant 1\n                              :unit (d / day))\n                        :mod (o / only)))))"], "tree": ["(s / spot-01\n   :time (m / month\n            :mod (p2 / past)))", "(s / spot-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"AppleInsider\"))\n   :ARG1 (l / listing\n            :quant 9))", "(s / spot-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"AppleInsider\"))\n   :ARG1 (l / listing\n            :ARG1 (r / relate-01\n                     :ARG2 (b / battery))))", "(s / spot-01\n   :ARG1 (l / listing\n            :ARG1 (r / relate-01\n                     :ARG2 (b / battery)))\n   :time (m / month\n            :mod (p2 / past)))", "(s / spot-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"AppleInsider\"))\n   :ARG1 (l / listing\n            :ARG1 (r / relate-01\n                     :ARG2 (b / battery)))\n   :time (m / month\n            :mod (p2 / past)))", "(ii / include-01\n    :ARG1 (o / one\n             :purpose (p / person\n                         :ARG0 (e / engineer-01\n                                  :ARG1 (s / software\n                                           :purpose (l / life\n                                                       :mod (b / battery)))))))", "(ii / include-01\n    :ARG1 (o / one\n             :purpose (p / person\n                         :ARG0 (e / engineer-01\n                                  :ARG1 (s / software\n                                           :purpose (l / life\n                                                       :mod (b / battery))))))\n    :ARG2 (t / this))", "(ii / include-01\n    :ARG1 (a2 / another\n              :purpose (p3 / person\n                           :ARG0 (e2 / engineer-01\n                                     :ARG1 (s2 / system\n                                               :mod (p4 / power)))))\n    :ARG2 (t / this))", "(a / and\n   :op1 (o / one\n           :purpose (p / person\n                       :ARG0 (e / engineer-01\n                                :ARG1 (s / software\n                                         :purpose (l / life\n                                                     :mod (b / battery))))))\n   :op2 (a2 / another\n            :purpose (p3 / person\n                         :ARG0 (e2 / engineer-01\n                                   :ARG1 (s2 / system\n                                             :mod (p4 / power))))))", "(o / one\n   :purpose (p / person\n               :ARG0 (e / engineer-01\n                        :ARG1 (s / software\n                                 :purpose (l / life\n                                             :mod (b / battery))))))", "(ii / improve-01\n    :ARG1 (l / life\n             :duration (b / battery)))", "(ii / improve-01\n    :ARG1 (l / life\n             :poss (p2 / product\n                       :name (n3 / name\n                                 :op1 \"iPhone\"\n                                 :op2 6\n                                 :op3 \"Plus\"))))", "(ii / improve-01\n    :ARG0 (c / company\n             :name (n / name\n                      :op1 \"Apple\"))\n    :ARG1 (l / life\n             :duration (b / battery)))", "(ii / improve-01\n    :ARG0 (c / company\n             :name (n / name\n                      :op1 \"Apple\"))\n    :ARG1 (l / life\n             :poss (p2 / product\n                       :name (n3 / name\n                                 :op1 \"iPhone\"\n                                 :op2 6\n                                 :op3 \"Plus\"))))", "(a / and\n   :op2 (p2 / product\n            :name (n3 / name\n                      :op1 \"iPhone\"\n                      :op2 6\n                      :op3 \"Plus\")))", "(c / contrast-01\n   :ARG2 (c2 / criticize-01\n             :ARG1 (c3 / company\n                       :name (n / name\n                                :op1 \"Apple\"))))", "(c / contrast-01\n   :ARG2 (c2 / criticize-01\n             :ARG2 (p / phone)))", "(c2 / criticize-01\n    :ARG1 (c3 / company\n              :name (n / name\n                       :op1 \"Apple\")))", "(c2 / criticize-01\n    :ARG1 (c3 / company\n              :name (n / name\n                       :op1 \"Apple\"))\n    :ARG2 (p / phone))", "(c2 / criticize-01\n    :ARG1 (c3 / company\n              :name (n / name\n                       :op1 \"Apple\"))\n    :ARG2 (t / tablet))"], "smus": ["Spotted in the past month.", "AppleInsider spotted 9 listings.", "AppleInsider spotted listings relating to batteries.", "Listings related to batteries were spotted in the past month.", "AppleInsider spotted listings related to batteries in the past month.", "One for the battery life engineer.", "These include one for the battery life engineer.", "This includes another for power systems engineers.", "One for the battery life software engineer and another for the power systems engineer.", "one for the battery life engineer.", "Battery life improved.", "The life of the iPhone 6 Plus improved.", "Apple improved battery life.", "Apple improved the life of the iPhone 6 Plus.", "and the iPhone 6 Plus.", "But Apple has been criticized.", "But the phones were criticized.", "Apple has been criticized.", "Apple has been criticized for the phones.", "Apple has been criticized for the tablets."]}, {"instance_id": "realsumm-18", "summary": "<t> Tournament performances have restored Andy Murray to World No 3 . </t> <t> But it 's wedding to Kim Sears that takes Murray 's No 1 spot this week . </t> <t> Murray is due to marry fianc\u00e9e Sears in Dunblane this coming Saturday . </t> <t> There are believed to be well over 100 names on down - to - earth guest list . </t>", "summary_trees": ["# ::snt  Tournament performances have restored Andy Murray to World No 3 . \n(r / restore-01\n      :ARG0 (p / perform-02\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Andy\"\n                        :op2 \"Murray\"))\n            :mod (t / tournament))\n      :ARG1 (h / have-org-role-91\n            :ARG0 p2\n            :ARG1 (w / world)\n            :ARG2 (n2 / no\n                  :ord (o / ordinal-entity\n                        :value 3))))", "# ::snt  But it 's wedding to Kim Sears that takes Murray 's No 1 spot this week . \n(c / contrast-01\n      :ARG2 (t / take-01\n            :ARG0 (w / wed-01\n                  :ARG1 (p / person\n                        :name (n / name\n                              :op1 \"Murray\"))\n                  :ARG2 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Kim\"\n                              :op2 \"Sears\")))\n            :ARG1 (s / spot\n                  :ord (o / ordinal-entity\n                        :value 1)\n                  :poss p)\n            :time (w2 / week\n                  :mod (t2 / this))))", "# ::snt  Murray is due to marry fianc\u00e9e Sears in Dunblane this coming Saturday . \n(d / due-03\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Murray\"))\n      :ARG2 (m / marry-01\n            :ARG1 p\n            :ARG2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Sears\")\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 p\n                        :ARG2 (f / fiancee)))\n            :location (c / city\n                  :name (n3 / name\n                        :op1 \"Dunblane\")))\n      :time (d2 / date-entity\n            :weekday (s / saturday)\n            :mod (t / this)\n            :ARG1-of (c2 / come-01)))", "# ::snt  There are believed to be well over 100 names on down - to - earth guest list . \n(b / believe-01\n      :ARG1 (n / name\n            :quant (o / over\n                  :op1 100\n                  :quant (w / well))\n            :location (l / list-01\n                  :ARG1 (g / guest)\n                  :mod (d / down-to-earth))))"], "tree": ["(r / restore-01\n   :ARG0 (p / perform-02\n            :mod (t / tournament)))", "(r / restore-01\n   :ARG1 (h / have-org-role-91\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Andy\"\n                               :op2 \"Murray\"))))", "(r / restore-01\n   :ARG0 (p / perform-02\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Andy\"\n                               :op2 \"Murray\")))\n   :ARG1 (h / have-org-role-91\n            :ARG2 (n2 / no\n                      :ord (o / ordinal-entity\n                              :value 3))))", "(r / restore-01\n   :ARG0 (p / perform-02\n            :mod (t / tournament))\n   :ARG1 (h / have-org-role-91\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Andy\"\n                               :op2 \"Murray\"))))", "(r / restore-01\n   :ARG0 (p / perform-02\n            :mod (t / tournament))\n   :ARG1 (h / have-org-role-91\n            :ARG2 (n2 / no\n                      :ord (o / ordinal-entity\n                              :value 3))))", "(c / contrast-01\n   :ARG2 (t / take-01\n            :ARG1 (s / spot\n                     :poss (p / person\n                              :name (n / name\n                                       :op1 \"Murray\")))))", "(t / take-01\n   :ARG1 (s / spot\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Murray\"))))", "(t / take-01\n   :ARG0 (w / wed-01\n            :ARG2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Kim\"\n                                :op2 \"Sears\")))\n   :ARG1 (s / spot\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Murray\"))))", "(t / take-01\n   :ARG0 (w / wed-01\n            :ARG2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Kim\"\n                                :op2 \"Sears\")))\n   :ARG1 (s / spot\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Murray\")))\n   :time (w2 / week\n             :mod (t2 / this)))", "(w / wed-01\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Kim\"\n                       :op2 \"Sears\")))", "(d / due-03\n   :ARG2 (m / marry-01\n            :ARG1 (p / person :name (n / name :op1 \"Murray\"))))", "(d / due-03\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Murray\"))\n   :ARG2 (m / marry-01\n            :ARG2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Sears\"))))", "(d / due-03\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Murray\"))\n   :ARG2 (m / marry-01\n            :location (c / city\n                         :name (n3 / name\n                                   :op1 \"Dunblane\"))))", "(b / believe-01\n   :ARG1 (n / name\n            :quant (o / over\n                      :op1 100)))", "(n / name\n   :quant (o / over\n             :op1 100))", "(n / name\n   :location (l / list-01\n                :ARG1 (g / guest)))", "(n / name\n   :location (l / list-01\n                :mod (d / down-to-earth)))", "(n / name\n   :quant (o / over\n             :op1 100)\n   :location (l / list-01\n                :mod (d / down-to-earth)))"], "smus": ["Tournament performances have restored.", "Andy Murray is restored.", "Andy Murray's performances have restored the No. 3 status.", "The Tournament performances have restored Andy Murray.", "Tournament performances have restored the No. 3 status.", "But it takes Murray's spot.", "Takes Murray's spot.", "The wedding of Kim Sears takes Murray's spot.", "The wedding of Kim Sears takes Murray's spot this week.", "Kim Sears got married.", "Murray is due to marry.", "Murray is due to marry Sears.", "Murray is due to marry in Dunblane.", "Over 100 names are believed.", "Over 100 names.", "names on guest list", "Names on the down-to-earth list.", "Over 100 names on the down-to-earth list."]}, {"instance_id": "realsumm-19", "summary": "<t> Paula Dunican paid \u00a3 25 for the baby blue coat at Dunican local branch of Asda . </t> <t> When Dunican took Asda home Dunican noticed a ' seeping ' stain on the back of coat . </t> <t> Dunican then discovered the reptile 's crushed body on the garment 's lining . </t> <t> The supermarket has apologised and offered Dunican a \u00a3 40 voucher and refund . </t>", "summary_trees": ["# ::snt  Paula Dunican paid \u00a3 25 for the baby blue coat at Dunican local branch of Asda . \n(p / pay-01\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Paula\"\n                  :op2 \"Dunican\"))\n      :ARG1 (m / monetary-quantity\n            :quant 25\n            :unit (p3 / pound))\n      :ARG3 (c / coat\n            :mod (b / blue)\n            :mod (b2 / baby))\n      :location (b3 / branch\n            :mod (l / local)\n            :part-of (c2 / company\n                  :name (n2 / name\n                        :op1 \"Asda\"))\n            :location (c3 / city\n                  :name (n3 / name\n                        :op1 \"Dunican\"))))", "# ::snt  When Dunican took Asda home Dunican noticed a ' seeping ' stain on the back of coat . \n(n / notice-01\n      :ARG0 (p / person\n            :name (n2 / name\n                  :op1 \"Dunican\"))\n      :ARG1 (s / stain-01\n            :ARG1-of (s2 / seep-01)\n            :location (b / back\n                  :part-of (c / coat)))\n      :time (t / take-01\n            :ARG0 p\n            :ARG1 (c2 / company\n                  :name (n3 / name\n                        :op1 \"Asda\"))\n            :ARG3 (h / home)))", "# ::snt  Dunican then discovered the reptile 's crushed body on the garment 's lining . \n(d / discover-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Dunican\"))\n      :ARG1 (b / body\n            :part-of (r / reptile)\n            :ARG1-of (c / crush-01))\n      :location (l / lining\n            :part-of (g / garment))\n      :time (t / then))", "# ::snt  The supermarket has apologised and offered Dunican a \u00a3 40 voucher and refund . \n(a / and\n      :op1 (a2 / apologize-01\n            :ARG0 (s / supermarket))\n      :op2 (o / offer-01\n            :ARG0 s\n            :ARG1 (a3 / and\n                  :op1 (v / voucher\n                        :mod (m / monetary-quantity\n                              :quant 40\n                              :unit (p / pound)))\n                  :op2 (r / refund-01\n                        :ARG0 s\n                        :ARG2 (p2 / person\n                              :name (n / name\n                                    :op1 \"Dunican\"))))\n            :ARG3 p2))"], "tree": ["(p / pay-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Paula\"\n                      :op2 \"Dunican\")))", "(p / pay-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Paula\"\n                      :op2 \"Dunican\"))\n   :ARG1 (m / monetary-quantity\n            :quant 25))", "(p / pay-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Paula\"\n                      :op2 \"Dunican\"))\n   :ARG3 (c / coat\n            :mod (b / blue)))", "(p / pay-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Paula\"\n                      :op2 \"Dunican\"))\n   :ARG3 (c / coat\n            :mod (b2 / baby)))", "(b3 / branch\n    :mod (l / local)\n    :part (c2 / company\n              :name (n2 / name\n                        :op1 \"Asda\"))\n    :location (c3 / city\n                  :name (n3 / name\n                            :op1 \"Dunican\")))", "(n / notice-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Dunican\")))", "(n / notice-01\n   :ARG1 (s / stain-01\n            :location (b / back\n                         :part (c / coat))))", "(n / notice-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Dunican\"))\n   :ARG1 (s / stain-01\n            :ARG1 (s2 / seep-01)))", "(n / notice-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Dunican\"))\n   :ARG1 (s / stain-01\n            :location (b / back\n                         :part (c / coat))))", "(n / notice-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Dunican\"))\n   :ARG1 (s / stain-01\n            :location (b / back\n                         :part (c / coat)))\n   :time (t / take-01\n            :ARG3 (h / home)))", "(d / discover-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dunican\"))\n   :ARG1 (b / body\n            :part (r / reptile)))", "(d / discover-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dunican\"))\n   :time (t / then))", "(d / discover-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dunican\"))\n   :ARG1 (b / body\n            :part (r / reptile))\n   :location (l / lining\n                :part (g / garment)))", "(d / discover-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dunican\"))\n   :ARG1 (b / body\n            :ARG1 (c / crush-01))\n   :location (l / lining\n                :part (g / garment)))", "(d / discover-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dunican\"))\n   :ARG1 (b / body\n            :part (r / reptile))\n   :time (t / then))", "(a / and\n   :op1 (a2 / apologize-01\n            :ARG0 (s / supermarket)))", "(a / and\n   :op2 (o / offer-01\n           :ARG1 (r / refund-01\n                    :ARG2 (p2 / person\n                              :name (n / name\n                                       :op1 \"Dunican\")))))", "(a / and\n   :op1 (a2 / apologize-01\n            :ARG0 (s / supermarket))\n   :op2 (o / offer-01\n           :ARG0 s))", "(a / and\n   :op1 (a2 / apologize-01\n            :ARG0 (s / supermarket))\n   :op2 (o / offer-01\n           :ARG1 (r / refund-01\n                    :ARG0 s)))", "(a / and\n   :op1 (a2 / apologize-01\n            :ARG0 (s / supermarket))\n   :op2 (o / offer-01\n           :ARG1 (r / refund-01\n                    :ARG2 (p2 / person\n                              :name (n / name\n                                       :op1 \"Dunican\")))))"], "smus": ["Paula dunican paid.", "Paula dunican paid 25.", "Paula dunican paid for the blue coat.", "Paula dunican paid for the baby coat.", "There is a local branch of Asda in Dunican.", "Dunican noticed.", "Noticed stain on coat back.", "Dunican noticed a stain of seeping.", "Dunican noticed a stain on the coat back.", "Dunican noticed a stain on the back of the coat when he took home.", "Dunican discovered the reptile's body.", "Then Dunican discovered.", "Dunican discovered the reptile's body in the garment lining.", "Dunican discovered the crushed body in the garment lining.", "Then Dunican discovered the reptile's body.", "And the supermarket has apologized.", "And offered Dunican a refund.", "The supermarket apologized and offered.", "The supermarket apologized and offered a refund.", "The supermarket apologized and offered Dunican a refund."]}, {"instance_id": "realsumm-20", "summary": "<t> Ronnie Carroll placed fourth in the Eurovision contest in 1962 and 1963 . </t> <t> Carroll died in London two days ago , aged 80 , following a battle with cancer . </t> <t> Mr Carroll was running in the General Election for Hampstead and Kilburn . </t> <t> Carroll remains on the paper and Carroll will be elected if Carroll gets enough votes . </t>", "summary_trees": ["# ::snt  Ronnie Carroll placed fourth in the Eurovision contest in 1962 and 1963 . \n(p / place-01\n      :ARG1 (p2 / person\n            :name (n / name\n                  :op1 \"Ronnie\"\n                  :op2 \"Carroll\"))\n      :ARG2 (f / fourth)\n      :subevent-of (c / contest-02\n            :ARG3 (e / event\n                  :name (n2 / name\n                        :op1 \"Eurovision\")))\n      :time (a / and\n            :op1 (d / date-entity\n                  :year 1962)\n            :op2 (d2 / date-entity\n                  :year 1963)))", "# ::snt  Carroll died in London two days ago , aged 80 , following a battle with cancer . \n(d / die-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Carroll\")\n            :age (t / temporal-quantity\n                  :quant 80\n                  :unit (y / year)))\n      :location (c / city\n            :name (n2 / name\n                  :op1 \"London\"))\n      :time (b / before\n            :op1 (n3 / now)\n            :quant (t2 / temporal-quantity\n                  :quant 2\n                  :unit (d2 / day)))\n      :ARG1-of (f / follow-01\n            :ARG2 (b2 / battle-01\n                  :ARG0 p\n                  :ARG1 (d3 / disease\n                        :name (n4 / name\n                              :op1 \"cancer\")))))", "# ::snt  Mr Carroll was running in the General Election for Hampstead and Kilburn . \n(r / run-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Mr\"\n                  :op2 \"Carroll\"))\n      :ARG1 (a / and\n            :op1 (c / city-district\n                  :name (n2 / name\n                        :op1 \"Hampstead\"))\n            :op2 (c2 / city-district\n                  :name (n3 / name\n                        :op1 \"Kilburn\")))\n      :subevent-of (e / elect-01\n            :ARG1-of (g / general-02)))", "# ::snt  Carroll remains on the paper and Carroll will be elected if Carroll gets enough votes . \n(a / and\n      :op1 (r / remain-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Carroll\"))\n            :location (p2 / paper))\n      :op2 (e / elect-01\n            :ARG1 p\n            :condition (g / get-01\n                  :ARG0 p\n                  :ARG1 (v / vote-01\n                        :ARG1 p\n                        :ARG1-of (h / have-quant-91\n                              :ARG3 (e2 / enough))))))"], "tree": ["(p / place-01\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Ronnie\"\n                      :op2 \"Carroll\"))\n   :ARG2 (f / fourth))", "(p / place-01\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Ronnie\"\n                      :op2 \"Carroll\"))\n   :subevent (c / contest-02\n                :ARG3 (e / event\n                         :name (n2 / name\n                                   :op1 \"Eurovision\"))))", "(p / place-01\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Ronnie\"\n                      :op2 \"Carroll\"))\n   :ARG2 (f / fourth)\n   :time (d / date-entity\n            :year 1962))", "(p / place-01\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Ronnie\"\n                      :op2 \"Carroll\"))\n   :ARG2 (f / fourth)\n   :subevent (c / contest-02\n                :ARG3 (e / event\n                         :name (n2 / name\n                                   :op1 \"Eurovision\")))\n   :time (d / date-entity\n            :year 1962))", "(p / place-01\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Ronnie\"\n                      :op2 \"Carroll\"))\n   :ARG2 (f / fourth)\n   :subevent (c / contest-02\n                :ARG3 (e / event\n                         :name (n2 / name\n                                   :op1 \"Eurovision\")))\n   :time (d2 / date-entity\n             :year 1963))", "(d / die-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Carroll\")))", "(d / die-01\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :quant 80)))", "(d / die-01\n   :location (c / city\n                :name (n2 / name\n                          :op1 \"London\")))", "(d / die-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Carroll\"))\n   :location (c / city\n                :name (n2 / name\n                          :op1 \"London\")))", "(p / person\n   :name (n / name\n            :op1 \"Carroll\")\n   :age (t / temporal-quantity\n           :quant 80))", "(r / run-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mr\"\n                     :op2 \"Carroll\")))", "(r / run-02\n   :subevent (e / elect-01\n                :ARG1 (g / general-02)))", "(r / run-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mr\"\n                     :op2 \"Carroll\"))\n   :ARG1 (c / city-district\n            :name (n2 / name\n                      :op1 \"Hampstead\")))", "(r / run-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mr\"\n                     :op2 \"Carroll\"))\n   :subevent (e / elect-01\n                :ARG1 (g / general-02)))", "(r / run-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mr\"\n                     :op2 \"Carroll\"))\n   :ARG1 (c2 / city-district\n             :name (n3 / name\n                       :op1 \"Kilburn\"))\n   :subevent (e / elect-01\n                :ARG1 (g / general-02)))", "(a / and\n   :op1 (r / remain-01\n           :ARG1 (p / person\n                    :name (n / name\n                             :op1 \"Carroll\")))\n   :op2 (e / elect-01\n           :condition (g / get-01\n                         :ARG1 (v / vote-01\n                                  :ARG1 p))))", "(a / and\n   :op1 (r / remain-01\n           :ARG1 (p / person\n                    :name (n / name\n                             :op1 \"Carroll\")))\n   :op2 (e / elect-01\n           :condition (g / get-01\n                         :ARG1 (v / vote-01\n                                  :ARG1 (h / have-quant-91\n                                           :ARG3 (e2 / enough))))))", "(a / and\n   :op1 (r / remain-01\n           :location (p2 / paper))\n   :op2 (e / elect-01\n           :condition (g / get-01\n                         :ARG1 (v / vote-01\n                                  :ARG1 (p / person :name (n / name :op1 \"Carroll\"))))))", "(r / remain-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Carroll\"))\n   :location (p2 / paper))", "(e / elect-01\n   :condition (g / get-01\n                 :ARG1 (v / vote-01\n                          :ARG1 (p / person :name (n / name :op1 \"Carroll\")))))"], "smus": ["Ronnie Carroll placed fourth.", "Ronie Carroll placed in the Eurovision contest.", "In 1962, Ronnie Carroll placed fourth.", "In the Eurovision contest in 1962, Ronnie Carroll placed fourth.", "In 1963, Ronnie Carroll placed fourth in the Eurovision contest.", "Carroll died.", "The 80-year-old died.", "died in London.", "Carroll died in London.", "Carroll, 80.", "Mr Carroll is running.", "Running in the General Election.", "Mr Carroll is running for Hampstead.", "Mr Carroll is running in the General Election.", "Mr Carroll is running for Kilburn in the General Election.", "Carroll remains and if he gets the votes he will be elected.", "Carroll remains and if it gets enough votes it will be elected.", "remains on paper and if Carroll gets the votes, he will be elected.", "Carroll remains in the paper.", "If Carroll gets the votes, he will be elected."]}, {"instance_id": "realsumm-21", "summary": "<t> McHenry , 28 , berated single mother Gina Michelle for towing Michelle car . </t> <t> Michelle insulted Michelle looks and social status in footage that went viral . </t> <t> ESPN suspended the sports reporter for a week amid investigation . </t> <t> But despite thousands of calls for Michelle to be fired , Michelle returns this week . </t>", "summary_trees": ["# ::snt  McHenry , 28 , berated single mother Gina Michelle for towing Michelle car . \n(b / berate-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"McHenry\")\n            :age (t / temporal-quantity\n                  :quant 28\n                  :unit (y / year)))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Gina\"\n                  :op2 \"Michelle\")\n            :ARG0-of (h / have-rel-role-91\n                  :ARG2 (m / mother\n                        :ARG1-of (s / single-03))))\n      :ARG2 (t2 / tow-01\n            :ARG0 p\n            :ARG1 (c / car\n                  :poss p2)))", "# ::snt  Michelle insulted Michelle looks and social status in footage that went viral . \n(ii / insult-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Michelle\"))\n      :ARG1 (a / and\n            :op1 (l / look\n                  :mod p)\n            :op2 (s / status\n                  :mod (s2 / social)\n                  :poss p))\n      :medium (f / footage\n            :ARG1-of (g / go-08\n                  :ARG2 (v / viral))))", "# ::snt  ESPN suspended the sports reporter for a week amid investigation . \n(s / suspend-01\n      :ARG0 (p / publication\n            :name (n / name\n                  :op1 \"ESPN\"))\n      :ARG1 (p2 / person\n            :ARG0-of (r / report-01\n                  :ARG1 (s2 / sport)))\n      :duration (t / temporal-quantity\n            :quant 1\n            :unit (w / week))\n      :ARG1-of (c / cause-01\n            :ARG0 (ii / investigate-01)))", "# ::snt  But despite thousands of calls for Michelle to be fired , Michelle returns this week . \n(c / contrast-01\n      :ARG2 (r / return-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Michelle\"))\n            :time (w / week\n                  :mod (t / this))\n            :concession (c2 / call-03\n                  :ARG1 (f / fire-02\n                        :ARG1 p)\n                  :quant (m / multiple\n                        :op1 1000))))"], "tree": ["(b / berate-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"McHenry\")))", "(b / berate-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"McHenry\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Gina\"\n                       :op2 \"Michelle\")))", "(b / berate-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"McHenry\"))\n   :ARG1 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG2 (m / mother\n                               :ARG1 (s / single-03)))))", "(b / berate-01\n   :ARG0 (p / person\n            :age (t / temporal-quantity\n                    :quant 28))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Gina\"\n                       :op2 \"Michelle\")))", "(b / berate-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"McHenry\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Gina\"\n                       :op2 \"Michelle\"))\n   :ARG2 (t2 / tow-01\n             :ARG0 p))", "(ii / insult-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Michelle\")))", "(ii / insult-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Michelle\"))\n    :medium (f / footage\n               :ARG1 (g / go-08\n                        :ARG2 (v / viral))))", "(ii / insult-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Michelle\"))\n    :ARG1 (l / look\n             :mod p)\n    :medium (f / footage\n               :ARG1 (g / go-08\n                        :ARG2 (v / viral))))", "(ii / insult-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Michelle\"))\n    :ARG1 (s / status\n             :mod (s2 / social))\n    :medium (f / footage\n               :ARG1 (g / go-08\n                        :ARG2 (v / viral))))", "(f / footage\n   :ARG1 (g / go-08\n            :ARG2 (v / viral)))", "(s / suspend-01\n   :duration (t / temporal-quantity\n                :unit (w / week)))", "(s / suspend-01\n   :ARG0 (p / publication\n            :name (n / name\n                     :op1 \"ESPN\"))\n   :ARG1 (p2 / person\n             :ARG0 (r / report-01\n                      :ARG1 (s2 / sport))))", "(s / suspend-01\n   :ARG1 (p2 / person\n             :ARG0 (r / report-01\n                      :ARG1 (s2 / sport)))\n   :duration (t / temporal-quantity\n                :unit (w / week)))", "(s / suspend-01\n   :ARG0 (p / publication\n            :name (n / name\n                     :op1 \"ESPN\"))\n   :ARG1 (p2 / person\n             :ARG0 (r / report-01\n                      :ARG1 (s2 / sport)))\n   :duration (t / temporal-quantity\n                :quant 1))", "(p2 / person\n    :ARG0 (r / report-01\n             :ARG1 (s2 / sport)))", "(c / contrast-01\n   :ARG2 (r / return-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Michelle\"))))", "(r / return-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Michelle\")))", "(r / return-01\n   :time (w / week\n            :mod (t / this)))", "(r / return-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Michelle\"))\n   :time (w / week\n            :mod (t / this)))", "(r / return-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Michelle\"))\n   :time (w / week\n            :mod (t / this))\n   :concession (c2 / call-03\n                   :quant (m / multiple\n                             :op1 1000)))"], "smus": ["McHenry berated.", "McHenry berated Gina Michelle.", "McHenry berated a single mother.", "The 28-year-old berated Gina Michelle.", "McHenry berated Gina Michelle for towing.", "Michelle insulted.", "Michelle insulted in the footage that went viral.", "In the footage that went viral, Michelle insulted her looks.", "In the footage that went viral, Michelle insulted social status.", "The footage went viral.", "The suspension was for a week.", "ESPN suspended a sports reporter.", "Sports reporting suspended for a week.", "ESPN suspended a sports reporter for one week.", "Sports reporter", "But Michelle returns.", "Michelle returns.", "Returns this week.", "Michelle returns this week.", "Michelle returns this week despite thousands of calls."]}, {"instance_id": "realsumm-22", "summary": "<t> Chloe Owens , 27 , from Swanley , designed new app Bump 2 Breast . </t> <t> Came up with idea when pregnant with daughter , Lola , now three months . </t> <t> Says Lola and husband David felt like ' rabbits in headlights ' at first . </t> <t> Also struggled to remember which boob to use when breastfeeding . </t>", "summary_trees": ["# ::snt  Chloe Owens , 27 , from Swanley , designed new app Bump 2 Breast . \n(d / design-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Chloe\"\n                  :op2 \"Owens\")\n            :age (t / temporal-quantity\n                  :quant 27\n                  :unit (y / year))\n            :source (c / city\n                  :name (n2 / name\n                        :op1 \"Swanley\")))\n      :ARG1 (a / app\n            :name (n3 / name\n                  :op1 \"Bump\"\n                  :op2 2\n                  :op3 \"Breast\")\n            :ARG1-of (n4 / new-01)))", "# ::snt  Came up with idea when pregnant with daughter , Lola , now three months . \n(c / come-up-11\n      :ARG1 (ii / idea)\n      :time (ii2 / impregnate-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Lola\")\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG2 (d / daughter))\n                  :age (t / temporal-quantity\n                        :quant 3\n                        :unit (m / month)\n                        :time (n2 / now)))))", "# ::snt  Says Lola and husband David felt like ' rabbits in headlights ' at first . \n(s / say-01\n      :ARG1 (f / feel-01\n            :ARG0 (a / and\n                  :op1 (p / person\n                        :name (n / name\n                              :op1 \"Lola\"))\n                  :op2 (p2 / person\n                        :name (n2 / name\n                              :op1 \"David\")\n                        :ARG0-of (h / have-rel-role-91\n                              :ARG1 p\n                              :ARG2 (h2 / husband))))\n            :ARG1 (r / resemble-01\n                  :ARG1 a\n                  :ARG2 (b / bunny\n                        :location (h3 / head\n                              :part-of (h4 / headlights))))\n            :time (a2 / at-first)))", "# ::snt  Also struggled to remember which boob to use when breastfeeding . \n(s / struggle-02\n      :ARG0 (ii / i)\n      :ARG1 (r / remember-01\n            :ARG0 ii\n            :ARG1 (b / boob\n                  :ARG1-of (u / use-01\n                        :ARG0 ii\n                        :time (b2 / breastfeed-01\n                              :ARG0 ii))))\n      :mod (a / also))"], "tree": ["(d / design-01\n   :ARG1 (a / app\n            :name (n3 / name\n                      :op1 \"Bump\"\n                      :op2 2\n                      :op3 \"Breast\")))", "(d / design-01\n   :ARG1 (a / app\n            :ARG1 (n4 / new-01)))", "(d / design-01\n   :ARG0 (p / person\n            :age (t / temporal-quantity\n                    :unit (y / year)))\n   :ARG1 (a / app\n            :ARG1 (n4 / new-01)))", "(p / person\n   :source (c / city\n              :name (n2 / name\n                        :op1 \"Swanley\")))", "(a / app\n   :name (n3 / name\n             :op1 \"Bump\"\n             :op2 2\n             :op3 \"Breast\")\n   :ARG1 (n4 / new-01))", "(c / come-up-11\n   :time (ii2 / impregnate-01\n              :ARG1 (p / person\n                       :name (n / name\n                                :op1 \"Lola\"))))", "(c / come-up-11\n   :ARG1 (ii / idea)\n   :time (ii2 / impregnate-01\n              :ARG1 (p / person\n                       :name (n / name\n                                :op1 \"Lola\"))))", "(c / come-up-11\n   :ARG1 (ii / idea)\n   :time (ii2 / impregnate-01\n              :ARG1 (p / person\n                       :ARG0 (h / have-rel-role-91\n                                :ARG2 (d / daughter)))))", "(p / person\n   :name (n / name\n            :op1 \"Lola\")\n   :ARG0 (h / have-rel-role-91\n            :ARG2 (d / daughter))\n   :age (t / temporal-quantity\n           :unit (m / month)))", "(p / person\n   :name (n / name\n            :op1 \"Lola\")\n   :ARG0 (h / have-rel-role-91\n            :ARG2 (d / daughter))\n   :age (t / temporal-quantity\n           :time (n2 / now)))", "(s / say-01\n   :ARG1 (f / feel-01\n            :time (a2 / at-first)))", "(f / feel-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lola\")))", "(f / feel-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lola\"))\n   :time (a2 / at-first))", "(s / struggle-02\n   :ARG0 (ii / i)\n   :ARG1 (r / remember-01\n            :ARG1 (b / boob\n                     :ARG1 (u / use-01\n                              :ARG0 ii))))", "(s / struggle-02\n   :ARG1 (r / remember-01\n            :ARG0 (ii / i))\n   :mod (a / also))", "(s / struggle-02\n   :ARG0 (ii / i)\n   :ARG1 (r / remember-01\n            :ARG1 (b / boob\n                     :ARG1 (u / use-01\n                              :ARG0 ii)))\n   :mod (a / also))", "(s / struggle-02\n   :ARG0 (ii / i)\n   :ARG1 (r / remember-01\n            :ARG1 (b / boob\n                     :ARG1 (u / use-01\n                              :time (b2 / breastfeed-01\n                                        :ARG0 ii))))\n   :mod (a / also))"], "smus": ["The app was designed as bump 2 breast.", "The new app was designed.", "The year old designed the new app.", "swanley", "New bump 2 breast app", "came up when Lola was pregnant.", "The idea came up when Lola was pregnant.", "The idea came up when the daughter was pregnant.", "Lola is a three month old daughter.", "Lola is a daughter now.", "Says felt at first.", "Lola felt.", "At first, Lola felt.", "I struggled to remember the boob to use.", "I also struggled to remember.", "I also struggled to remember the boob to use.", "I also struggled to remember the boob to use when breast feeding."]}, {"instance_id": "realsumm-23", "summary": "<t> Harley Street is a top destination for private cosmetic surgery . </t> <t> Patients pay thousands for treatments Patients hope will change Patients lives . </t> <t> Michael , 33 , spent \u00a3 7,500 on a hair transplant to boost Michael self - esteem . </t> <t> Andrea , 72 , pays for a facelift - but Street husband ca n't tell the difference . </t>", "summary_trees": ["# ::snt  Harley Street is a top destination for private cosmetic surgery . \n(d / destination\n      :mod (t / top)\n      :domain (s / street\n            :name (n / name\n                  :op1 \"Harley\"\n                  :op2 \"Street\"))\n      :purpose (s2 / surgery-01\n            :ARG2 (c / cosmetic)\n            :ARG1-of (p / private-03)))", "# ::snt  Patients pay thousands for treatments Patients hope will change Patients lives . \n(p / pay-01\n      :ARG0 (p2 / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG2 (p3 / patient)))\n      :ARG1 (m / multiple\n            :op1 (m2 / monetary-quantity\n                  :quant 1000\n                  :unit (d / dollar)))\n      :ARG3 (t / treat-03\n            :ARG1 p2\n            :ARG0-of (c / change-01\n                  :ARG1 (l / life\n                        :poss p2)\n                  :ARG1-of (h2 / hope-01\n                        :ARG0 p2))))", "# ::snt  Michael , 33 , spent \u00a3 7,500 on a hair transplant to boost Michael self - esteem . \n(s / spend-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Michael\")\n            :age (t / temporal-quantity\n                  :quant 33\n                  :unit (y / year))\n            :part (h / hair))\n      :ARG1 (t2 / transplant-01\n            :ARG1 h)\n      :ARG3 (m / monetary-quantity\n            :quant 7000\n            :unit (p2 / pound))\n      :purpose (b / boost-01\n            :ARG0 t2\n            :ARG1 (e / esteem-01\n                  :ARG0 p\n                  :ARG1 p)))", "# ::snt  Andrea , 72 , pays for a facelift - but Street husband ca n't tell the difference . \n(c / contrast-01\n      :ARG1 (p / pay-01\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Andrea\")\n                  :age (t / temporal-quantity\n                        :quant 72\n                        :unit (y / year)))\n            :ARG3 (f / facelift))\n      :ARG2 (p3 / possible-01\n            :polarity -\n            :ARG1 (k / know-04\n                  :ARG0 (p4 / person\n                        :ARG0-of (h / have-rel-role-91\n                              :ARG1 p2\n                              :ARG2 (h2 / husband))\n                        :mod (s / street))\n                  :ARG1 (t2 / thing\n                        :ARG1-of (d / differ-02)))))"], "tree": ["(d / destination\n   :domain (s / street\n              :name (n / name\n                       :op1 \"Harley\"\n                       :op2 \"Street\")))", "(d / destination\n   :domain (s / street\n              :name (n / name\n                       :op1 \"Harley\"\n                       :op2 \"Street\"))\n   :purpose (s2 / surgery-01\n                :ARG2 (c / cosmetic)))", "(d / destination\n   :domain (s / street\n              :name (n / name\n                       :op1 \"Harley\"\n                       :op2 \"Street\"))\n   :purpose (s2 / surgery-01\n                :ARG1 (p / private-03)))", "(d / destination\n   :mod (t / top)\n   :domain (s / street\n              :name (n / name\n                       :op1 \"Harley\"\n                       :op2 \"Street\"))\n   :purpose (s2 / surgery-01\n                :ARG2 (c / cosmetic)))", "(d / destination\n   :mod (t / top)\n   :domain (s / street\n              :name (n / name\n                       :op1 \"Harley\"\n                       :op2 \"Street\"))\n   :purpose (s2 / surgery-01\n                :ARG1 (p / private-03)))", "(p / pay-01\n   :ARG0 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG2 (p3 / patient))))", "(p / pay-01\n   :ARG3 (t / treat-03\n            :ARG1 (p2 / person)))", "(p / pay-01\n   :ARG0 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG2 (p3 / patient)))\n   :ARG1 (m / multiple\n            :op1 (m2 / monetary-quantity\n                     :quant 1000)))", "(p / pay-01\n   :ARG1 (m / multiple\n            :op1 (m2 / monetary-quantity\n                     :quant 1000))\n   :ARG3 (t / treat-03\n            :ARG1 (p2 / person)))", "(p / pay-01\n   :ARG0 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG2 (p3 / patient)))\n   :ARG1 (m / multiple\n            :op1 (m2 / monetary-quantity\n                     :quant 1000))\n   :ARG3 (t / treat-03\n            :ARG1 p2))", "(s / spend-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Michael\")))", "(s / spend-01\n   :ARG1 (t2 / transplant-01\n             :ARG1 (h / hair)))", "(s / spend-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Michael\"))\n   :purpose (b / boost-01\n               :ARG1 (e / esteem-01\n                        :ARG0 p)))", "(s / spend-01\n   :ARG1 (t2 / transplant-01\n             :ARG1 (h / hair))\n   :purpose (b / boost-01\n               :ARG1 (e / esteem-01\n                        :ARG1 (p / person :name (n / name :op1 \"Michael\"))))))", "(p / person\n   :name (n / name\n            :op1 \"Michael\")\n   :age (t / temporal-quantity\n           :quant 33))", "(c / contrast-01\n   :ARG1 (p / pay-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Andrea\"))))", "(c / contrast-01\n   :ARG1 (p / pay-01\n            :ARG0 (p2 / person\n                      :age (t / temporal-quantity\n                              :quant 72))))", "(p / pay-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Andrea\")))", "(p / pay-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Andrea\"))\n   :ARG3 (f / facelift))", "(p2 / person\n    :name (n / name\n             :op1 \"Andrea\")\n    :age (t / temporal-quantity\n            :quant 72))"], "smus": ["Harley Street is a destination.", "Harley Street is a destination for cosmetic surgery.", "Harley Street is a private surgery destination.", "Harley Street is the top destination for cosmetic surgery.", "Harley Street is the top destination for private surgery.", "Patients pay.", "People pay for their treatments.", "Patients pay thousands.", "People pay thousands for treatments.", "Patients pay thousands for their treatments.", "Michael spent.", "spent on a hair transplant.", "Michael spent to boost his self esteem.", "The hair transplant was spent to boost Michael's self-esteem.", "Michael, 33.", "But Andrea pays.", "But 72 pays.", "Andrea pays.", "Andrea pays for a facelift.", "Andrea, 72."]}, {"instance_id": "realsumm-24", "summary": "<t> General Motors unveiled Motors concept car at an event in Shanghai . </t> <t> Chevrolet - FNR has ' dragonfly ' swing doors and ' crystal laser headlights ' FNR is self - driving , electric , and the front chairs can swivel round . </t> <t> And using iris recognition software you can start software using just your eyes . </t>", "summary_trees": ["# ::snt  General Motors unveiled Motors concept car at an event in Shanghai . \n(u / unveil-01\n      :ARG0 (c / company\n            :name (n / name\n                  :op1 \"General\"\n                  :op2 \"Motors\"))\n      :ARG1 (c2 / car\n            :name (n2 / name\n                  :op1 \"Motors\"\n                  :op2 \"Concept\"))\n      :time (e / event\n            :location (c3 / city\n                  :name (n3 / name\n                        :op1 \"Shanghai\"))))", "# ::snt  Chevrolet - FNR has ' dragonfly ' swing doors and ' crystal laser headlights ' FNR is self - driving , electric , and the front chairs can swivel round . \n(m / multi-sentence\n      :snt1 (h / have-03\n            :ARG0 (c / car-make\n                  :name (n / name\n                        :op1 \"Chevrolet-FNR\"))\n            :ARG1 (a / and\n                  :op1 (d / door\n                        :mod (s / swing)\n                        :mod (d2 / dragonfly))\n                  :op2 (h2 / headlight\n                        :mod (l / laser\n                              :mod (c2 / crystal)))))\n      :snt2 (a2 / and\n            :op1 (d3 / drive-01\n                  :ARG0 (c3 / car-make\n                        :name (n2 / name\n                              :op1 \"FNR\"))\n                  :manner (s2 / self))\n            :op2 (e / electric\n                  :domain c3)\n            :op3 (p / possible-01\n                  :ARG1 (s3 / swivel-01\n                        :ARG1 (c4 / chair\n                              :mod (f / front))\n                        :direction (r / round)))))", "# ::snt  And using iris recognition software you can start software using just your eyes . \n(m / multi-sentence\n      :snt1 (a / and\n            :op2 (p / possible-01\n                  :ARG1 (s / start-01\n                        :ARG0 (y / you)\n                        :ARG1 (s2 / software)\n                        :manner (u / use-01\n                              :ARG0 y\n                              :ARG1 (e / eye\n                                    :mod (j / just)\n                                    :part-of (y2 / you))))\n                  :manner (u2 / use-01\n                        :ARG0 y\n                        :ARG1 (s3 / software\n                              :ARG0-of (r / recognize-01\n                                    :ARG1 (ii / iris)))))))"], "tree": ["(u / unveil-01\n   :time (e / event\n            :location (c3 / city\n                          :name (n3 / name\n                                    :op1 \"Shanghai\"))))", "(u / unveil-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"General\"\n                     :op2 \"Motors\"))\n   :ARG1 (c2 / car\n             :name (n2 / name\n                       :op1 \"Motors\"\n                       :op2 \"Concept\")))", "(u / unveil-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"General\"\n                     :op2 \"Motors\"))\n   :time (e / event\n            :location (c3 / city\n                          :name (n3 / name\n                                    :op1 \"Shanghai\"))))", "(u / unveil-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"General\"\n                     :op2 \"Motors\"))\n   :ARG1 (c2 / car\n             :name (n2 / name\n                       :op1 \"Motors\"\n                       :op2 \"Concept\"))\n   :time (e / event\n            :location (c3 / city\n                          :name (n3 / name\n                                    :op1 \"Shanghai\"))))", "(e / event\n   :location (c3 / city\n                 :name (n3 / name\n                           :op1 \"Shanghai\")))", "(m / multi-sentence\n   :snt2 (p / possible-01\n            :ARG1 (s3 / swivel-01\n                      :ARG1 (c4 / chair\n                                :mod (f / front)))))", "(a2 / and\n    :op3 (p / possible-01\n            :ARG1 (s3 / swivel-01\n                      :ARG1 (c4 / chair\n                                :mod (f / front)))))", "(a2 / and\n    :op2 (e / electric\n            :domain (c3 / car-make\n                        :name (n2 / name\n                                  :op1 \"FNR\")))\n    :op3 (p / possible-01\n            :ARG1 (s3 / swivel-01\n                      :ARG1 (c4 / chair\n                                :mod (f / front)))))", "(a2 / and\n    :op1 (d3 / drive-01\n             :manner (s2 / self))\n    :op2 (e / electric\n            :domain (c3 / car-make\n                        :name (n2 / name\n                                  :op1 \"FNR\")))\n    :op3 (p / possible-01\n            :ARG1 (s3 / swivel-01\n                      :ARG1 (c4 / chair\n                                :mod (f / front)))))", "(p / possible-01\n   :ARG1 (s3 / swivel-01\n             :ARG1 (c4 / chair\n                       :mod (f / front))))", "(m / multi-sentence\n   :snt1 (p / possible-01\n            :ARG1 (s / start-01\n                     :manner (u / use-01\n                                :ARG1 (e / eye\n                                         :part (y2 / you))))))", "(a / and\n   :op2 (p / possible-01\n           :ARG1 (s / start-01\n                    :manner (u / use-01\n                               :ARG1 (e / eye\n                                        :part (y2 / you))))))", "(p / possible-01\n   :ARG1 (s / start-01\n            :manner (u / use-01\n                       :ARG1 (e / eye\n                                :mod (j / just))))\n   :manner (u2 / use-01\n               :ARG0 (y / you)))"], "smus": ["The unveiling took place at an event in Shanghai.", "General Motors unveiled the \" Motors Concept \" car.", "General Motors unveiled at an event in Shanghai.", "General Motors unveiled the \" Motors Concept \" car at the event in Shanghai.", "The event took place in Shanghai.", "Front chairs can swivel.", "And the front chairs can swivel.", "And the FNR is electric and the front chairs can swivel.", "Self driving, the FNR is electric and the front chairs can swivel.", "The front chairs can swivel.", "You can start by using your eyes.", "And you can start by using your eyes.", "You can start by using just eyes."]}, {"instance_id": "realsumm-25", "summary": "<t> Candidate Lynne Abraham says Abraham suffered a momentary drop in blood pressure and that drop 's never happened before . </t> <t> While a doctor kept attorney from returning to the debate , the 74-year - old former district attorney says attorney will not let the incident affect attorney campaign . </t>", "summary_trees": ["# ::snt  Candidate Lynne Abraham says Abraham suffered a momentary drop in blood pressure and that drop 's never happened before . \n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Lynne\"\n                  :op2 \"Abraham\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (c / candidate)))\n      :ARG1 (a / and\n            :op1 (s2 / suffer-01\n                  :ARG0 p\n                  :ARG1 (d / drop-01\n                        :ARG1 (p2 / pressure\n                              :mod (b / blood))\n                        :mod (m / momentary)))\n            :op2 (b2 / be-temporally-at-91\n                  :polarity -\n                  :ARG1 d\n                  :ARG2 (b3 / before))))", "# ::snt  While a doctor kept attorney from returning to the debate , the 74-year - old former district attorney says attorney will not let the incident affect attorney campaign . \n(c / contrast-01\n      :ARG1 (s / say-01\n            :ARG0 (a / attorney\n                  :mod (d / district)\n                  :time (f / former)\n                  :age (t / temporal-quantity\n                        :quant 74\n                        :unit (y / year)))\n            :ARG1 (l / let-01\n                  :polarity -\n                  :ARG0 (a2 / attorney)\n                  :ARG1 (a3 / affect-01\n                        :ARG0 (ii / incident)\n                        :ARG1 (c2 / campaign-01\n                              :ARG0 a2))))\n      :ARG2 (k / keep-04\n            :ARG0 (d2 / doctor)\n            :ARG1 a2\n            :ARG2 (r / return-01\n                  :ARG1 a2\n                  :ARG4 (d3 / debate-01))))"], "tree": ["(s / say-01\n   :ARG1 (s2 / suffer-01\n             :ARG1 (d / drop-01\n                      :mod (m / momentary))))", "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lynne\"\n                     :op2 \"Abraham\"))\n   :ARG1 (s2 / suffer-01\n             :ARG1 (d / drop-01\n                      :mod (m / momentary))))", "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (c / candidate)))\n   :ARG1 (s2 / suffer-01\n             :ARG1 (d / drop-01\n                      :ARG1 (p2 / pressure\n                                :mod (b / blood)))))", "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (c / candidate)))\n   :ARG1 (s2 / suffer-01\n             :ARG1 (d / drop-01\n                      :mod (m / momentary))))", "(p / person\n   :ARG0 (h / have-org-role-91\n            :ARG2 (c / candidate)))", "(s / say-01\n   :ARG0 (a / attorney\n            :time (f / former))\n   :ARG1 (l / let-01\n            :polarity -))", "(s / say-01\n   :ARG0 (a / attorney\n            :age (t / temporal-quantity\n                    :quant 74))\n   :ARG1 (l / let-01\n            :polarity -))", "(a / attorney\n   :mod (d / district)\n   :time (f / former))", "(a / attorney\n   :time (f / former)\n   :age (t / temporal-quantity\n           :quant 74))", "(a / attorney\n   :mod (d / district)\n   :time (f / former)\n   :age (t / temporal-quantity\n           :quant 74))"], "smus": ["Momentary drop suffered, says says.", "\"Momentary drop suffered,\" says Lynne Abraham.", "Candidate says blood pressure suffered drop.", "Candidate says momentary drop suffered.", "Candidate.", "The former attorney says he won't let.", "The 74-year-old attorney says he won't let.", "Former district attorney", "74 - Former attorney", "74 - Former district attorney"]}, {"instance_id": "realsumm-26", "summary": "<t> Bundles of notes spilled onto Interstate 20 in Albilene , Texas , on Friday . </t> <t> Passenger door of vehicle flung open - releasing the money onto the road . </t> <t> Motorists pulled over and abandoned Motorists vehicles to pick up the cash . </t> <t> Police have warned anyone caught with the money will be arrested . </t>", "summary_trees": ["# ::snt  Bundles of notes spilled onto Interstate 20 in Albilene , Texas , on Friday . \n(s / spill-over-02\n      :ARG1 (b / bundle\n            :consist-of (n / note))\n      :ARG2 (r / road\n            :name (n2 / name\n                  :op1 \"Interstate\"\n                  :op2 20)\n            :location (c / city\n                  :name (n3 / name\n                        :op1 \"Alilene\")\n                  :location (s2 / state\n                        :name (n4 / name\n                              :op1 \"Texas\"))))\n      :time (d / date-entity\n            :weekday (f / friday)))", "# ::snt  Passenger door of vehicle flung open - releasing the money onto the road . \n(o / open-01\n      :ARG1 (d / door\n            :part-of (v / vehicle)\n            :mod (p / passenger))\n      :ARG0-of (r / release-01\n            :ARG1 (m / money)\n            :ARG2 (r2 / road)))", "# ::snt  Motorists pulled over and abandoned Motorists vehicles to pick up the cash . \n(a / and\n      :op1 (p / pull-over-05\n            :ARG1 (p2 / person\n                  :ARG0-of (d / drive-01\n                        :ARG1 (v / vehicle\n                              :poss p2))))\n      :op2 (a2 / abandon-01\n            :ARG0 p2\n            :ARG1 v)\n      :purpose (p3 / pick-up-04\n            :ARG0 p2\n            :ARG1 (c / cash)))", "# ::snt  Police have warned anyone caught with the money will be arrested . \n(w / warn-01\n      :ARG0 (p / police)\n      :ARG1 (a / arrest-01\n            :ARG1 (a2 / anyone\n                  :ARG1-of (c / catch-02\n                        :ARG2 (h / have-03\n                              :ARG0 a2\n                              :ARG1 (m / money))))))"], "tree": ["(s / spill-over-02\n   :ARG1 (b / bundle\n            :consist-of (n / note)))", "(s / spill-over-02\n   :ARG1 (b / bundle\n            :consist-of (n / note))\n   :ARG2 (r / road\n            :name (n2 / name\n                      :op1 \"Interstate\"\n                      :op2 20)))", "(s / spill-over-02\n   :ARG1 (b / bundle\n            :consist-of (n / note))\n   :ARG2 (r / road\n            :location (c / city\n                         :location (s2 / state\n                                       :name (n4 / name\n                                                 :op1 \"Texas\")))))", "(s / spill-over-02\n   :ARG1 (b / bundle\n            :consist-of (n / note))\n   :time (d / date-entity\n            :weekday (f / friday)))", "(s / spill-over-02\n   :ARG1 (b / bundle\n            :consist-of (n / note))\n   :ARG2 (r / road\n            :name (n2 / name\n                      :op1 \"Interstate\"\n                      :op2 20))\n   :time (d / date-entity\n            :weekday (f / friday)))", "(o / open-01\n   :ARG1 (d / door\n            :part (v / vehicle)))", "(o / open-01\n   :ARG1 (d / door\n            :mod (p / passenger)))", "(o / open-01\n   :ARG1 (d / door\n            :part (v / vehicle))\n   :ARG0 (r / release-01\n            :ARG1 (m / money)))", "(o / open-01\n   :ARG1 (d / door\n            :mod (p / passenger))\n   :ARG0 (r / release-01\n            :ARG1 (m / money)))", "(r / release-01\n   :ARG1 (m / money)\n   :ARG2 (r2 / road))", "(a / and\n   :op2 (a2 / abandon-01\n            :ARG1 (v / vehicle\n                     :poss (p2 / person))))", "(a / and\n   :op2 (a2 / abandon-01\n            :ARG1 (v / vehicle\n                     :poss (p2 / person)))\n   :purpose (p3 / pick-up-04\n                :ARG1 (c / cash)))", "(a / and\n   :op1 (p / pull-over-05\n           :ARG1 (p2 / person\n                     :ARG0 (d / drive-01\n                              :ARG1 (v / vehicle\n                                       :poss p2))))\n   :op2 (a2 / abandon-01\n            :ARG0 p2)\n   :purpose (p3 / pick-up-04\n                :ARG0 p2))", "(a / and\n   :op1 (p / pull-over-05\n           :ARG1 (p2 / person\n                     :ARG0 (d / drive-01\n                              :ARG1 (v / vehicle\n                                       :poss p2))))\n   :op2 (a2 / abandon-01\n            :ARG0 p2)\n   :purpose (p3 / pick-up-04\n                :ARG1 (c / cash)))", "(w / warn-01\n   :ARG1 (a / arrest-01\n            :ARG1 (a2 / anyone\n                      :ARG1 (c / catch-02\n                               :ARG2 (h / have-03\n                                        :ARG0 a2)))))", "(w / warn-01\n   :ARG1 (a / arrest-01\n            :ARG1 (a2 / anyone\n                      :ARG1 (c / catch-02\n                               :ARG2 (h / have-03\n                                        :ARG1 (m / money))))))", "(w / warn-01\n   :ARG0 (p / police)\n   :ARG1 (a / arrest-01\n            :ARG1 (a2 / anyone\n                      :ARG1 (c / catch-02\n                               :ARG2 (h / have-03\n                                        :ARG1 (m / money))))))", "(a / arrest-01\n   :ARG1 (a2 / anyone\n             :ARG1 (c / catch-02\n                      :ARG2 (h / have-03\n                               :ARG0 a2))))", "(a / arrest-01\n   :ARG1 (a2 / anyone\n             :ARG1 (c / catch-02\n                      :ARG2 (h / have-03\n                               :ARG1 (m / money)))))"], "smus": ["Bundles of notes spilled over.", "Bundles of notes spilled over Interstate 20.", "Bundles of notes spilled over the road in Texas.", "Bundles of notes spilled over on Friday.", "Bundles of notes spilled over Interstate 20 on Friday.", "The vehicle's door opened.", "The passenger door opened.", "The vehicle's door opened to releasing money.", "The passenger door opened to the money being released.", "releasing money on the road.", "and the people's vehicles are abandoned.", "and people's vehicles abandoned to pick up cash.", "The drivers of their vehicles pulled over and abandoned to pick up.", "The drivers of their vehicles pulled over and abandoned to pick up cash.", "Anyone caught with it will be warned to be arrested.", "Anyone caught with money will be warned to be arrested.", "Police have warned that anyone caught with money will be arrested.", "Anyone caught with it will be arrested.", "Anyone caught with money will be arrested."]}, {"instance_id": "realsumm-27", "summary": "<t> Godfrey Elfwick recruited via Twitter to appear on World Have Your Say . </t> <t> Came after claims Elfwick had never seen the Star Wars franchise before . </t> <t> On the show Say described the films as both anti - women and anti - gay . </t> <t> Also said that Darth Vader was a black man and a ' really bad racial stereotype ' . </t>", "summary_trees": ["# ::snt  Godfrey Elfwick recruited via Twitter to appear on World Have Your Say . \n(r / recruit-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Godfrey\"\n                  :op2 \"Elfwick\"))\n      :ARG2 (a / appear-01\n            :ARG1 p\n            :medium (b / broadcast-program\n                  :name (n2 / name\n                        :op1 \"World\"\n                        :op2 \"Have\"\n                        :op3 \"Your\"\n                        :op4 \"Say\")))\n      :medium (p2 / publication\n            :name (n3 / name\n                  :op1 \"Twitter\")))", "# ::snt  Came after claims Elfwick had never seen the Star Wars franchise before . \n(b / be-temporally-at-91\n      :ARG1 (e / event)\n      :ARG2 (a / after\n            :op1 (c / claim-01\n                  :ARG1 (s / see-01\n                        :polarity -\n                        :ARG0 (p / person\n                              :name (n / name\n                                    :op1 \"Elfwick\"))\n                        :ARG1 (f / franchise\n                              :name (n2 / name\n                                    :op1 \"Star\"\n                                    :op2 \"Wars\"))\n                        :time (e2 / ever)\n                        :time (b2 / before)))))", "# ::snt  On the show Say described the films as both anti - women and anti - gay . \n(d / describe-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Say\"))\n      :ARG1 (f / film)\n      :ARG2 (a / and\n            :op1 (o / oppose-01\n                  :ARG0 f\n                  :ARG1 (w / woman))\n            :op2 (o2 / oppose-01\n                  :ARG0 f\n                  :ARG1 (g / gay-01)))\n      :medium (s / show-04))", "# ::snt  Also said that Darth Vader was a black man and a ' really bad racial stereotype ' . \n(s / say-01\n      :ARG1 (a / and\n            :op1 (m / man\n                  :ARG1-of (b / black-05)\n                  :domain (p / person\n                        :name (n / name\n                              :op1 \"Darth\"\n                              :op2 \"Vader\")))\n            :op2 (s2 / stereotype-01\n                  :ARG2 p\n                  :mod (r / race)\n                  :ARG1-of (b2 / bad-07\n                        :degree (r2 / really))))\n      :mod (a2 / also))"], "tree": ["(r / recruit-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Godfrey\"\n                     :op2 \"Elfwick\")))", "(r / recruit-01\n   :ARG2 (a / appear-01\n            :ARG1 (p / person :name (n / name :op1 \"Godfrey\" :op2 \"Elfwick\"))))", "(r / recruit-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Godfrey\"\n                     :op2 \"Elfwick\"))\n   :ARG2 (a / appear-01\n            :medium (b / broadcast-program\n                       :name (n2 / name\n                                 :op1 \"World\"\n                                 :op2 \"Have\"\n                                 :op3 \"Your\"\n                                 :op4 \"Say\"))))", "(r / recruit-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Godfrey\"\n                     :op2 \"Elfwick\"))\n   :medium (p2 / publication\n               :name (n3 / name\n                         :op1 \"Twitter\")))", "(b / be-temporally-at-91\n   :ARG2 (a / after\n            :op1 (c / claim-01\n                    :ARG1 (s / see-01\n                             :time (e2 / ever)))))", "(c / claim-01\n   :ARG1 (s / see-01\n            :time (e2 / ever)))", "(s / see-01\n   :ARG1 (f / franchise\n            :name (n2 / name\n                      :op1 \"Star\"\n                      :op2 \"Wars\")))", "(p / person\n   :name (n / name\n            :op1 \"Elfwick\"))", "(f / franchise\n   :name (n2 / name\n             :op1 \"Star\"\n             :op2 \"Wars\"))", "(d / describe-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Say\"))\n   :ARG1 (f / film))", "(d / describe-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Say\"))\n   :ARG1 (f / film)\n   :ARG2 (o / oppose-01\n            :ARG1 (w / woman)))", "(d / describe-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Say\"))\n   :ARG1 (f / film)\n   :ARG2 (o2 / oppose-01\n             :ARG1 (g / gay-01)))", "(d / describe-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Say\"))\n   :ARG1 (f / film)\n   :medium (s / show-04))", "(d / describe-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Say\"))\n   :ARG1 (f / film)\n   :ARG2 (o2 / oppose-01\n             :ARG1 (g / gay-01))\n   :medium (s / show-04))", "(s / say-01\n   :ARG1 (s2 / stereotype-01\n             :mod (r / race))\n   :mod (a2 / also))", "(a / and\n   :op1 (m / man\n           :domain (p / person\n                      :name (n / name\n                               :op1 \"Darth\"\n                               :op2 \"Vader\")))\n   :op2 (s2 / stereotype-01\n            :mod (r / race)))", "(a / and\n   :op1 (m / man\n           :domain (p / person\n                      :name (n / name\n                               :op1 \"Darth\"\n                               :op2 \"Vader\")))\n   :op2 (s2 / stereotype-01\n            :ARG1 (b2 / bad-07\n                      :degree (r2 / really))))", "(m / man\n   :domain (p / person\n              :name (n / name\n                       :op1 \"Darth\"\n                       :op2 \"Vader\")))", "(s2 / stereotype-01\n    :mod (r / race)\n    :ARG1 (b2 / bad-07\n              :degree (r2 / really)))"], "smus": ["Godfrey Elfwick was recruited.", "Godfrey Elfwick was recruited to appear.", "Godfrey Elfwick was recruited to appear on World Have Your Say.", "Godfrey Elfwick was recruited on Twitter.", "After claims that they have never been seen.", "claims to have never been seen.", "Star Wars is seen.", "Elfwick.", "Star Wars franchise.", "Say described the films.", "Say described the films as anti-women.", "Say described the films as anti-gay.", "Say described the films on the show.", "Say described the films on the show as anti-gay.", "Also said racial stereotype.", "arth Vader is a man and a racial stereotype.", "arth vader is a man and the stereotype is really bad.", "arth Vader is a man.", "Really bad racial stereotype."]}, {"instance_id": "realsumm-28", "summary": "<t> Cuban - born Kathy Ferreiro 's curves have attracted fans on social media . </t> <t> Bikini - loving beach babe says photos of babe booty are all natural . </t> <t> Miami - based party girl is hoping to become next Kim Kardashian . </t> <t> Has a huge following in Colombia and other Latin American countries . </t>", "summary_trees": ["# ::snt  Cuban - born Kathy Ferreiro 's curves have attracted fans on social media . \n(a / attract-01\n      :ARG0 (c / curve\n            :poss (p / person\n                  :name (n / name\n                        :op1 \"Kathy\"\n                        :op2 \"Ferreiro\")\n                  :ARG1-of (b / bear-02\n                        :location (c2 / country\n                              :name (n2 / name\n                                    :op1 \"Cuba\")))))\n      :ARG1 (f / fan)\n      :medium (m / media\n            :mod (s / social)))", "# ::snt  Bikini - loving beach babe says photos of babe booty are all natural . \n(s / say-01\n      :ARG0 (b / babe\n            :ARG0-of (l / love-01\n                  :ARG1 (b2 / beach))\n            :mod (b3 / bikini))\n      :ARG1 (n / natural-03\n            :ARG1 (p / photograph-01\n                  :ARG1 (b4 / booty\n                        :mod (b5 / babe)))\n            :mod (a / all)))", "# ::snt  Miami - based party girl is hoping to become next Kim Kardashian . \n(h / hope-01\n      :ARG0 (g / girl\n            :mod (p / party)\n            :ARG1-of (b / base-01\n                  :location (c / city\n                        :name (n / name\n                              :op1 \"Miami\"))))\n      :ARG1 (b2 / become-01\n            :ARG1 g\n            :ARG2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Kim\"\n                        :op2 \"Kardinez\")\n                  :mod (n3 / next))))", "# ::snt  Has a huge following in Colombia and other Latin American countries . \n(f / follow-02\n      :ARG1 (ii / it)\n      :mod (h / huge)\n      :location (a / and\n            :op1 (c / country\n                  :name (n / name\n                        :op1 \"Colombia\"))\n            :op2 (c2 / country\n                  :location (w / world-region\n                        :name (n2 / name\n                              :op1 \"Latin\"\n                              :op2 \"America\"))\n                  :mod (o / other))))"], "tree": ["(a / attract-01\n   :ARG0 (c / curve\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Kathy\"\n                              :op2 \"Ferreiro\")))\n   :ARG1 (f / fan))", "(a / attract-01\n   :ARG0 (c / curve\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Kathy\"\n                              :op2 \"Ferreiro\")))\n   :ARG1 (f / fan)\n   :medium (m / media\n              :mod (s / social)))", "(a / attract-01\n   :ARG0 (c / curve\n            :poss (p / person\n                     :ARG1 (b / bear-02\n                              :location (c2 / country\n                                            :name (n2 / name\n                                                      :op1 \"Cuba\")))))\n   :ARG1 (f / fan)\n   :medium (m / media\n              :mod (s / social)))", "(p / person\n   :ARG1 (b / bear-02\n            :location (c2 / country\n                          :name (n2 / name\n                                    :op1 \"Cuba\"))))", "(p / person\n   :name (n / name\n            :op1 \"Kathy\"\n            :op2 \"Ferreiro\")\n   :ARG1 (b / bear-02\n            :location (c2 / country\n                          :name (n2 / name\n                                    :op1 \"Cuba\"))))", "(s / say-01\n   :ARG0 (b / babe\n            :ARG0 (l / love-01\n                     :ARG1 (b2 / beach)))\n   :ARG1 (n / natural-03\n            :ARG1 (p / photograph-01\n                     :ARG1 (b4 / booty\n                               :mod (b5 / babe)))))", "(s / say-01\n   :ARG0 (b / babe\n            :ARG0 (l / love-01\n                     :ARG1 (b2 / beach)))\n   :ARG1 (n / natural-03\n            :mod (a / all)))", "(s / say-01\n   :ARG0 (b / babe\n            :mod (b3 / bikini))\n   :ARG1 (n / natural-03\n            :ARG1 (p / photograph-01\n                     :ARG1 (b4 / booty\n                               :mod (b5 / babe)))))", "(s / say-01\n   :ARG0 (b / babe\n            :mod (b3 / bikini))\n   :ARG1 (n / natural-03\n            :mod (a / all)))", "(p / photograph-01\n   :ARG1 (b4 / booty\n             :mod (b5 / babe)))", "(h / hope-01\n   :ARG0 (g / girl\n            :mod (p / party))\n   :ARG1 (b2 / become-01\n             :ARG1 g))", "(h / hope-01\n   :ARG0 (g / girl\n            :mod (p / party))\n   :ARG1 (b2 / become-01\n             :ARG2 (p2 / person\n                       :mod (n3 / next))))", "(g / girl\n   :ARG1 (b / base-01\n            :location (c / city\n                         :name (n / name\n                                  :op1 \"Miami\"))))", "(g / girl\n   :mod (p / party)\n   :ARG1 (b / base-01\n            :location (c / city\n                         :name (n / name\n                                  :op1 \"Miami\"))))", "(b / base-01\n   :location (c / city\n                :name (n / name\n                         :op1 \"Miami\")))", "(f / follow-02\n   :location (c2 / country\n                 :location (w / world-region\n                              :name (n2 / name\n                                        :op1 \"Latin\"\n                                        :op2 \"America\"))))", "(f / follow-02\n   :ARG1 (ii / it)\n   :location (c / country\n                :name (n / name\n                         :op1 \"Colombia\")))", "(f / follow-02\n   :ARG1 (ii / it)\n   :location (c2 / country\n                 :location (w / world-region\n                              :name (n2 / name\n                                        :op1 \"Latin\"\n                                        :op2 \"America\"))))", "(f / follow-02\n   :mod (h / huge)\n   :location (c2 / country\n                 :location (w / world-region\n                              :name (n2 / name\n                                        :op1 \"Latin\"\n                                        :op2 \"America\"))))", "(f / follow-02\n   :ARG1 (ii / it)\n   :mod (h / huge)\n   :location (c2 / country\n                 :location (w / world-region\n                              :name (n2 / name\n                                        :op1 \"Latin\"\n                                        :op2 \"America\"))))"], "smus": ["Kathy Ferreiro's curves have attracted fans.", "Kathy Ferreiro's curves have attracted fans on social media.", "Cuban born curves have attracted fans through social media.", "Cuban born", "Kathy Ferreiro was born in Cuba.", "\"The photos of the babe booty are natural,\" says the babe babe loving the beach.", "\"All natural,\" says the babe who loves the beach.", "Bikini babe says photos of the babe booty are natural.", "Bikini babe says it's all natural.", "Photos of the babe booty.", "The party girl is hoping to become.", "The party girl is hoping to become the next person.", "The girl is based in Miami.", "A party girl based in Miami.", "Based in Miami.", "Followed in Latin American countries.", "It is followed in Colombia.", "It is followed in Latin American countries.", "There is huge follow in Latin American countries.", "It's a huge follower in Latin American countries."]}, {"instance_id": "realsumm-29", "summary": "<t> Thousands of accounts vanished from the social network last week . </t> <t> Twitter said Twitter had received numerous reports about terror - promoting users . </t> <t> Decided to suspend 10,000 accounts for making threats of violence . </t> <t> Suspensions were almost certainly linked to a campaign by ' hacktavist ' collective Anonymous targeting online jihadis . </t>", "summary_trees": ["# ::snt  Thousands of accounts vanished from the social network last week . \n(v / vanish-01\n      :ARG1 (a / account\n            :quant (m / multiple\n                  :op1 1000))\n      :location (n / network\n            :ARG1-of (s / social-03))\n      :time (w / week\n            :mod (l / last)))", "# ::snt  Twitter said Twitter had received numerous reports about terror - promoting users . \n(s / say-01\n      :ARG0 (p / publication\n            :name (n / name\n                  :op1 \"Twitter\"))\n      :ARG1 (r / receive-01\n            :ARG0 p\n            :ARG1 (r2 / report-01\n                  :ARG1 (p2 / person\n                        :ARG0-of (u / use-01)\n                        :ARG0-of (p3 / promote-02\n                              :ARG1 (t / terror)))\n                  :quant (n2 / numerous))))", "# ::snt  Decided to suspend 10,000 accounts for making threats of violence . \n(d / decide-01\n      :ARG1 (s / suspend-01\n            :ARG1 (a / account\n                  :quant 10000)\n            :ARG1-of (c / cause-01\n                  :ARG0 (t / threaten-01\n                        :ARG1 (v / violence)))))", "# ::snt  Suspensions were almost certainly linked to a campaign by ' hacktavist ' collective Anonymous targeting online jihadis . \n(l / link-01\n      :ARG1 (s / suspend-01)\n      :ARG2 (c / campaign-01\n            :ARG0 (c2 / collective\n                  :name (n / name\n                        :op1 \"Anonymous\")\n                  :mod (h / hacktavist))\n            :ARG0-of (t / target-01\n                  :ARG1 (j / jihadi\n                        :mod (o / online))))\n      :mod (c3 / certain\n            :mod (a / almost)))"], "tree": ["(v / vanish-01\n   :ARG1 (a / account\n            :quant (m / multiple\n                      :op1 1000)))", "(v / vanish-01\n   :time (w / week\n            :mod (l / last)))", "(v / vanish-01\n   :ARG1 (a / account\n            :quant (m / multiple\n                      :op1 1000))\n   :location (n / network\n                :ARG1 (s / social-03)))", "(v / vanish-01\n   :ARG1 (a / account\n            :quant (m / multiple\n                      :op1 1000))\n   :time (w / week\n            :mod (l / last)))", "(v / vanish-01\n   :ARG1 (a / account\n            :quant (m / multiple\n                      :op1 1000))\n   :location (n / network\n                :ARG1 (s / social-03))\n   :time (w / week\n            :mod (l / last)))", "(s / say-01\n   :ARG1 (r / receive-01\n            :ARG0 (p / publication :name (n / name :op1 \"Twitter\"))))", "(s / say-01\n   :ARG0 (p / publication\n            :name (n / name\n                     :op1 \"Twitter\"))\n   :ARG1 (r / receive-01\n            :ARG0 p))", "(s / say-01\n   :ARG0 (p / publication\n            :name (n / name\n                     :op1 \"Twitter\"))\n   :ARG1 (r / receive-01\n            :ARG1 (r2 / report-01\n                      :quant (n2 / numerous))))", "(s / say-01\n   :ARG0 (p / publication\n            :name (n / name\n                     :op1 \"Twitter\"))\n   :ARG1 (r / receive-01\n            :ARG1 (r2 / report-01\n                      :ARG1 (p2 / person\n                                :ARG0 (p3 / promote-02\n                                          :ARG1 (t / terror))))))", "(r / receive-01\n   :ARG1 (r2 / report-01\n             :quant (n2 / numerous)))", "(d / decide-01\n   :ARG1 (s / suspend-01\n            :ARG1 (a / account\n                     :quant 10000)))", "(d / decide-01\n   :ARG1 (s / suspend-01\n            :ARG1 (c / cause-01\n                     :ARG0 (t / threaten-01\n                              :ARG1 (v / violence)))))", "(s / suspend-01\n   :ARG1 (a / account\n            :quant 10000))", "(c / cause-01\n   :ARG0 (t / threaten-01\n            :ARG1 (v / violence)))", "(l / link-01\n   :ARG1 (s / suspend-01)\n   :ARG2 (c / campaign-01\n            :ARG0 (c2 / collective\n                      :name (n / name\n                               :op1 \"Anonymous\")))\n   :mod (c3 / certain\n            :mod (a / almost)))", "(l / link-01\n   :ARG1 (s / suspend-01)\n   :ARG2 (c / campaign-01\n            :ARG0 (t / target-01\n                     :ARG1 (j / jihadi\n                              :mod (o / online))))\n   :mod (c3 / certain\n            :mod (a / almost)))", "(l / link-01\n   :ARG1 (s / suspend-01)\n   :ARG2 (c / campaign-01\n            :ARG0 (c2 / collective\n                      :mod (h / hacktavist)))\n   :mod (c3 / certain\n            :mod (a / almost)))", "(c2 / collective\n    :name (n / name\n             :op1 \"Anonymous\")\n    :mod (h / hacktavist))", "(t / target-01\n   :ARG1 (j / jihadi\n            :mod (o / online)))"], "smus": ["Thousands of accounts vanished.", "vanished last week.", "Thousands of accounts vanished from the social network.", "Thousands of accounts vanished last week.", "Thousands of accounts vanished from the social network last week.", "Twitter received, it said.", "Twitter said it had received.", "Numerous reports have been received, Twitter said.", "Reports of terrorists have been received, Twitter said.", "Numerous reports have been received.", "Decided to suspend 10,000 accounts.", "The decision to suspend was made over threats of violence.", "Suspend 10,000 accounts.", "Because of threats of violence.", "The suspensions are almost certainly linked to the Anonymous collective campaign.", "The suspensions are almost certainly linked to a campaign targeting online jihadis.", "The suspensions are almost certainly linked to a hacktavist collective campaign.", "Anonymous is a hacktavist collective.", "Online jihadis are targeted."]}, {"instance_id": "realsumm-30", "summary": "<t> Locals say power cuts the weekend before raid could be linked to heist . </t> <t> Locals also tell of suspicious ' drilling ' noises on evening of Good Friday . </t> <t> Group seen returning to scene on Saturday - a day after initial break - in . </t> <t> Police admit Police did n't respond after alarm went off early on Friday . </t>", "summary_trees": ["# ::snt  Locals say power cuts the weekend before raid could be linked to heist . \n(s / say-01\n      :ARG0 (p / person\n            :ARG1-of (l / local-02))\n      :ARG1 (p2 / possible-01\n            :ARG1 (l2 / link-01\n                  :ARG1 (c / cut-02\n                        :ARG1 (p3 / power)\n                        :time (w / weekend)\n                        :time (b / before\n                              :op1 (r / raid-01)))\n                  :ARG2 (h / heist))))", "# ::snt  Locals also tell of suspicious ' drilling ' noises on evening of Good Friday . \n(t / tell-01\n      :ARG0 (p / person\n            :ARG1-of (l / local-02))\n      :ARG1 (n / noise\n            :mod (d / drill-01)\n            :ARG1-of (s / suspicious-03)\n            :time (d2 / date-entity\n                  :weekday (f / friday)\n                  :dayperiod (e / evening)))\n      :mod (a / also))", "# ::snt  Group seen returning to scene on Saturday - a day after initial break - in . \n(s / see-01\n      :ARG1 (r / return-01\n            :ARG1 (g / group)\n            :ARG4 (s2 / scene)\n            :time (d / date-entity\n                  :weekday (s3 / saturday))\n            :time (a / after\n                  :op1 (b / break-02\n                        :mod (ii / initial))\n                  :quant (t / temporal-quantity\n                        :quant 1\n                        :unit (d2 / day)))))", "# ::snt  Police admit Police did n't respond after alarm went off early on Friday . \n(a / admit-01\n      :ARG0 (p / police)\n      :ARG1 (r / respond-01\n            :polarity -\n            :ARG0 p\n            :time (a2 / after\n                  :op1 (g / go-off-16\n                        :ARG1 (a3 / alarm-01)\n                        :time (e / early\n                              :op1 (d / date-entity\n                                    :weekday (f / friday)))))))"], "tree": ["(s / say-01\n   :ARG1 (p2 / possible-01\n             :ARG1 (l2 / link-01\n                       :ARG1 (c / cut-02\n                                :ARG1 (p3 / power)))))", "(s / say-01\n   :ARG1 (p2 / possible-01\n             :ARG1 (l2 / link-01\n                       :ARG2 (h / heist))))", "(s / say-01\n   :ARG1 (p2 / possible-01\n             :ARG1 (l2 / link-01\n                       :ARG1 (c / cut-02\n                                :time (w / weekend)))))", "(s / say-01\n   :ARG0 (p / person\n            :ARG1 (l / local-02))\n   :ARG1 (p2 / possible-01\n             :ARG1 (l2 / link-01\n                       :ARG1 (c / cut-02\n                                :ARG1 (p3 / power)))))", "(c / cut-02\n   :ARG1 (p3 / power)\n   :time (w / weekend))", "(t / tell-01\n   :ARG0 (p / person\n            :ARG1 (l / local-02)))", "(t / tell-01\n   :ARG1 (n / noise\n            :ARG1 (s / suspicious-03)))", "(t / tell-01\n   :ARG0 (p / person\n            :ARG1 (l / local-02))\n   :ARG1 (n / noise\n            :ARG1 (s / suspicious-03)))", "(t / tell-01\n   :ARG0 (p / person\n            :ARG1 (l / local-02))\n   :mod (a / also))", "(t / tell-01\n   :ARG0 (p / person\n            :ARG1 (l / local-02))\n   :ARG1 (n / noise\n            :ARG1 (s / suspicious-03))\n   :mod (a / also))", "(s / see-01\n   :ARG1 (r / return-01\n            :ARG1 (g / group)))", "(s / see-01\n   :ARG1 (r / return-01\n            :time (a / after\n                     :quant (t / temporal-quantity\n                               :unit (d2 / day)))))", "(r / return-01\n   :time (d / date-entity\n            :weekday (s3 / saturday)))", "(a / after\n   :op1 (b / break-02\n           :mod (ii / initial)))", "(a / after\n   :op1 (b / break-02\n           :mod (ii / initial))\n   :quant (t / temporal-quantity\n             :unit (d2 / day)))", "(a / admit-01\n   :ARG1 (r / respond-01\n            :polarity -))", "(a / admit-01\n   :ARG0 (p / police)\n   :ARG1 (r / respond-01\n            :polarity -))", "(a2 / after\n    :op1 (g / go-off-16\n            :ARG1 (a3 / alarm-01)))", "(a2 / after\n    :op1 (g / go-off-16\n            :time (e / early\n                     :op1 (d / date-entity\n                             :weekday (f / friday)))))", "(g / go-off-16\n   :ARG1 (a3 / alarm-01)\n   :time (e / early\n            :op1 (d / date-entity\n                    :weekday (f / friday))))"], "smus": ["Power cuts could be linked, they say.", "They say the heist could be linked.", "The weekend cuts could be linked, they say.", "Locals say power cuts could be linked.", "Power cuts over the weekend.", "Locals tell.", "Tells of suspicious noises.", "Locals tell of suspicious noises.", "Locals also tell.", "Locals also tell of suspicious noises.", "The Group saw return.", "Seemed to be returning a day later.", "Returning Saturday.", "After the initial break.", "After the initial break, a day later", "Admit to not responding.", "Police admit they did not respond.", "After the alarm went off.", "After going off early Friday.", "The alarm went off early Friday."]}, {"instance_id": "realsumm-31", "summary": "<t> Shiraz Nawaz felt lucky to be alive after the flames shot out the manhole . </t> <t> The fire erupted just moments after Nawaz walked over fire in the busy street . </t> <t> Incredibly no - one was hurt in the incident after Nawaz evacuated the area . </t>", "summary_trees": ["# ::snt  Shiraz Nawaz felt lucky to be alive after the flames shot out the manhole . \n(f / feel-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Shiraz\"\n                  :op2 \"Nawaz\"))\n      :ARG1 (l / lucky\n            :domain p\n            :ARG1-of (c / cause-01\n                  :ARG0 (l2 / live-01\n                        :ARG0 p)))\n      :time (a / after\n            :op1 (s / shoot-02\n                  :ARG0 (f2 / flame)\n                  :ARG3 (m / manhole))))", "# ::snt  The fire erupted just moments after Nawaz walked over fire in the busy street . \n(e / erupt-01\n      :ARG1 (f / fire)\n      :time (a / after\n            :op1 (w / walk-01\n                  :ARG0 (p / person\n                        :name (n / name\n                              :op1 \"Nawaz\"))\n                  :ARG2 (o / over\n                        :op1 (f2 / fire))\n                  :location (s / street\n                        :ARG1-of (b / busy-02)))\n            :quant (m / moment\n                  :mod (j / just))))", "# ::snt  Incredibly no - one was hurt in the incident after Nawaz evacuated the area . \n(h / hurt-01\n      :ARG1 (n / no-one)\n      :manner (ii / incredible)\n      :time (ii2 / incident)\n      :time (a / after\n            :op1 (e / evacuate-01\n                  :ARG0 (p / person\n                        :name (n2 / name\n                              :op1 \"Nawaz\"))\n                  :ARG1 (a2 / area))))"], "tree": ["(f / feel-01\n   :time (a / after\n            :op1 (s / shoot-02\n                    :ARG0 (f2 / flame))))", "(f / feel-01\n   :ARG1 (l / lucky\n            :domain (p / person :name (n / name :op1 \"Shiraz\" :op2 \"Nawaz\")))\n   :time (a / after\n            :op1 (s / shoot-02\n                    :ARG0 (f2 / flame))))", "(f / feel-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Shiraz\"\n                     :op2 \"Nawaz\"))\n   :ARG1 (l / lucky\n            :ARG1 (c / cause-01\n                     :ARG0 (l2 / live-01\n                               :ARG0 p)))\n   :time (a / after\n            :op1 (s / shoot-02\n                    :ARG0 (f2 / flame))))", "(l / lucky\n   :ARG1 (c / cause-01\n            :ARG0 (l2 / live-01\n                      :ARG0 (p / person :name (n / name :op1 \"Shiraz\" :op2 \"Nawaz\")))))", "(s / shoot-02\n   :ARG0 (f2 / flame)\n   :ARG3 (m / manhole))", "(e / erupt-01\n   :time (a / after\n            :op1 (w / walk-01\n                    :location (s / street\n                                 :ARG1 (b / busy-02)))))", "(w / walk-01\n   :ARG2 (o / over\n            :op1 (f2 / fire)))", "(w / walk-01\n   :location (s / street\n                :ARG1 (b / busy-02)))", "(w / walk-01\n   :ARG2 (o / over\n            :op1 (f2 / fire))\n   :location (s / street\n                :ARG1 (b / busy-02)))", "(w / walk-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nawaz\"))\n   :ARG2 (o / over\n            :op1 (f2 / fire))\n   :location (s / street\n                :ARG1 (b / busy-02)))", "(h / hurt-01\n   :ARG1 (n / no-one)\n   :manner (ii / incredible))", "(h / hurt-01\n   :ARG1 (n / no-one)\n   :time (ii2 / incident))", "(h / hurt-01\n   :ARG1 (n / no-one)\n   :manner (ii / incredible)\n   :time (ii2 / incident))", "(a / after\n   :op1 (e / evacuate-01\n           :ARG0 (p / person\n                    :name (n2 / name\n                              :op1 \"Nawaz\"))))", "(a / after\n   :op1 (e / evacuate-01\n           :ARG1 (a2 / area)))"], "smus": ["Feeled after the flames shot.", "After the flames shot, Shiraz Nawza felt lucky.", "After the flames shot, Shiraz Nawza felt lucky to have survived.", "Lucky Shiraz Nawaz lived.", "Flames shot through the manhole.", "Erupted after people walked in a busy street.", "Walked over the fire.", "Walked on a busy street.", "Walked over a fire on a busy street.", "Nawaz walked over a fire on a busy street.", "No one was hurt incredibly.", "No one was hurt in the incident.", "No one was hurt incredibly during the incident.", "After Nawabs evacuated,", "After the area was evacuated."]}, {"instance_id": "realsumm-32", "summary": "<t> Ao Nang Princess 5 ferry was in Andaman Sea on way from resort of Krabi . </t> <t> Was five miles from the coast travelling to Phuket when engine exploded . </t> <t> 35-metre - long boat caught fire around 3.30pm before sinking around 6 pm . </t> <t> Passengers seen throwing Passengers overboard before being rescued . </t> <t> No injuries reported but search will continue into tomorrow for missing girl . </t>", "summary_trees": ["# ::snt  Ao Nang Princess 5 ferry was in Andaman Sea on way from resort of Krabi . \n(b / be-located-at-91\n      :ARG1 (f / ferry\n            :name (n / name\n                  :op1 \"Ao\"\n                  :op2 \"Nang\"\n                  :op3 \"Princess\"\n                  :op4 5))\n      :ARG2 (s / sea\n            :name (n2 / name\n                  :op1 \"Andaman\"\n                  :op2 \"Sea\"))\n      :time (w / way\n            :direction (r / resort\n                  :name (n3 / name\n                        :op1 \"Krabi\"))))", "# ::snt  Was five miles from the coast travelling to Phuket when engine exploded . \n(t / travel-01\n      :ARG0 (ii / i)\n      :ARG1 (ii2 / island\n            :name (n / name\n                  :op1 \"Phuket\"))\n      :time (e / explode-01\n            :ARG1 (e2 / engine))\n      :extent (d / distance-quantity\n            :quant 5\n            :unit (m / mile)\n            :location (f / from\n                  :op1 (c / coast))))", "# ::snt  35-metre - long boat caught fire around 3.30pm before sinking around 6 pm . \n(a / and\n      :op1 (c / catch-on-fire-09\n            :ARG1 (b / boat\n                  :ARG1-of (l / long-03\n                        :ARG2 (d / distance-quantity\n                              :quant 35\n                              :unit (m / meter))))\n            :time (a2 / around\n                  :op1 (d2 / date-entity\n                        :time \"15:30\")))\n      :op2 (s / sink-01\n            :ARG1 b\n            :time (a3 / around\n                  :op1 (d3 / date-entity\n                        :time \"18:00\"))))", "# ::snt  Passengers seen throwing Passengers overboard before being rescued . \n(s / see-01\n      :ARG1 (t / throw-01\n            :ARG0 (p / passenger)\n            :ARG1 (p2 / passenger)\n            :ARG2 (o / overboard)\n            :time (b / before\n                  :op1 (r / rescue-01\n                        :ARG1 p2))))", "# ::snt  No injuries reported but search will continue into tomorrow for missing girl . \n(h / have-concession-91\n      :ARG1 (c / continue-01\n            :ARG1 (s / search-01\n                  :ARG2 (g / girl\n                        :ARG1-of (m / miss-01)))\n            :time (ii / into\n                  :op1 (t / tomorrow)))\n      :ARG2 (r / report-01\n            :polarity -\n            :ARG1 (ii2 / injure-01)))"], "tree": ["(b / be-located-at-91\n   :ARG1 (f / ferry\n            :name (n / name\n                     :op1 \"Ao\"\n                     :op2 \"Nang\"\n                     :op3 \"Princess\"\n                     :op4 5)))", "(b / be-located-at-91\n   :ARG2 (s / sea\n            :name (n2 / name\n                      :op1 \"Andaman\"\n                      :op2 \"Sea\")))", "(b / be-located-at-91\n   :ARG1 (f / ferry\n            :name (n / name\n                     :op1 \"Ao\"\n                     :op2 \"Nang\"\n                     :op3 \"Princess\"\n                     :op4 5))\n   :ARG2 (s / sea\n            :name (n2 / name\n                      :op1 \"Andaman\"\n                      :op2 \"Sea\")))", "(s / sea\n   :name (n2 / name\n             :op1 \"Andaman\"\n             :op2 \"Sea\"))", "(t / travel-01\n   :ARG1 (ii2 / island\n              :name (n / name\n                       :op1 \"Phuket\")))", "(t / travel-01\n   :time (e / explode-01\n            :ARG1 (e2 / engine)))", "(t / travel-01\n   :time (e / explode-01\n            :ARG1 (e2 / engine))\n   :extent (d / distance-quantity\n              :quant 5))", "(t / travel-01\n   :ARG0 (ii / i)\n   :time (e / explode-01\n            :ARG1 (e2 / engine))\n   :extent (d / distance-quantity\n              :quant 5))", "(t / travel-01\n   :ARG0 (ii / i)\n   :ARG1 (ii2 / island\n              :name (n / name\n                       :op1 \"Phuket\"))\n   :time (e / explode-01\n            :ARG1 (e2 / engine))\n   :extent (d / distance-quantity\n              :quant 5))", "(a / and\n   :op1 (c / catch-on-fire-09\n           :ARG1 (b / boat\n                    :ARG1 (l / long-03\n                             :ARG2 (d / distance-quantity\n                                      :unit (m / meter))))))", "(a / and\n   :op1 (c / catch-on-fire-09\n           :ARG1 (b / boat\n                    :ARG1 (l / long-03\n                             :ARG2 (d / distance-quantity\n                                      :quant 35\n                                      :unit (m / meter)))))\n   :op2 (s / sink-01\n           :ARG1 b))", "(a / and\n   :op1 (c / catch-on-fire-09\n           :ARG1 (b / boat\n                    :ARG1 (l / long-03\n                             :ARG2 (d / distance-quantity\n                                      :unit (m / meter)))))\n   :op2 (s / sink-01\n           :ARG1 b))", "(s / see-01\n   :ARG1 (t / throw-01\n            :ARG0 (p / passenger)))", "(t / throw-01\n   :ARG0 (p / passenger)\n   :ARG1 (p2 / passenger)\n   :ARG2 (o / overboard))", "(t / throw-01\n   :ARG0 (p / passenger)\n   :ARG1 (p2 / passenger)\n   :time (b / before\n            :op1 (r / rescue-01\n                    :ARG1 p2)))", "(t / throw-01\n   :ARG1 (p2 / passenger)\n   :ARG2 (o / overboard)\n   :time (b / before\n            :op1 (r / rescue-01\n                    :ARG1 p2)))", "(t / throw-01\n   :ARG0 (p / passenger)\n   :ARG1 (p2 / passenger)\n   :ARG2 (o / overboard)\n   :time (b / before\n            :op1 (r / rescue-01\n                    :ARG1 p2)))", "(h / have-concession-91\n   :ARG1 (c / continue-01\n            :ARG1 (s / search-01\n                     :ARG2 (g / girl\n                              :ARG1 (m / miss-01)))))", "(h / have-concession-91\n   :ARG1 (c / continue-01\n            :time (ii / into\n                      :op1 (t / tomorrow))))", "(c / continue-01\n   :ARG1 (s / search-01\n            :ARG2 (g / girl\n                     :ARG1 (m / miss-01))))", "(c / continue-01\n   :time (ii / into\n             :op1 (t / tomorrow)))", "(c / continue-01\n   :ARG1 (s / search-01\n            :ARG2 (g / girl\n                     :ARG1 (m / miss-01)))\n   :time (ii / into\n             :op1 (t / tomorrow)))"], "smus": ["Ao Nang Princess 5 ferry", "In the Andaman Sea.", "The Ao Nang Princess 5 ferry is on the Andaman Sea.", "Andaman Sea", "Traveling to Phuket.", "Traveling when the engine exploded.", "The engine exploded, traveling 5 miles.", "I was traveling 5 miles when the engine exploded.", "I was traveling to Phuket 5 miles when the engine exploded.", "The long boat caught fire.", "The 35-meter-long boat caught fire, sinking.", "A long boat caught fire, sinking.", "The passengers were seen throwing.", "Passengers throwing passengers overboard.", "Passengers throwing passengers before they are rescued.", "Throwing passengers overboard before they were rescued.", "Passengers throwing passengers overboard before they were rescued.", "Nevertheless, the search for the missing girl will continue.", "However, it will continue into tomorrow.", "Search continues for missing girl", "Continue into tomorrow.", "The search for the missing girl will continue into tomorrow."]}, {"instance_id": "realsumm-33", "summary": "<t> The worker was caught on camera by a member of the public . </t> <t> Field owner TH Clements & Son was alerted and the man was sacked . </t> <t> Passer - by who used mobile phone to snap photo branded act ' disgusting ' Tesco : Vegetables undergo ' extensive assessment ' before hitting shelves . </t>", "summary_trees": ["# ::snt  The worker was caught on camera by a member of the public . \n(c / catch-03\n      :ARG0 (m / member\n            :part-of (p / public))\n      :ARG1 (p2 / person\n            :ARG0-of (w / work-01))\n      :ARG2 (c2 / camera))", "# ::snt  Field owner TH Clements & Son was alerted and the man was sacked . \n(a / and\n      :op1 (a2 / alert-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"TH\"\n                        :op2 \"Clements\"\n                        :op3 \"&\"\n                        :op4 \"Son\")\n                  :ARG0-of (o / own-01\n                        :ARG1 (f / field))))\n      :op2 (s / sack-01\n            :ARG1 (m / man)))", "# ::snt  Passer - by who used mobile phone to snap photo branded act ' disgusting ' Tesco : Vegetables undergo ' extensive assessment ' before hitting shelves . \n(m / multi-sentence\n      :snt1 (p / person\n            :ARG0-of (p2 / pass-by-17)\n            :ARG0-of (u / use-01\n                  :ARG1 (p3 / phone\n                        :mod (m2 / mobile))\n                  :ARG2 (s / snap-03\n                        :ARG0 p\n                        :ARG1 (a / act-02\n                              :ARG1-of (b / brand-01\n                                    :ARG2 (d / disgust-01))\n                              :mod (p4 / photo))))\n            :mod (c / company\n                  :name (n / name\n                        :op1 \"Tesco\")))\n      :snt2 (u2 / undergo-28\n            :ARG1 (v / vegetable)\n            :ARG2 (a2 / assess-01\n                  :ARG1 v\n                  :ARG1-of (e / extensive-03))\n            :time (b2 / before\n                  :op1 (h / hit-01\n                        :ARG1 (s2 / shelf)))))"], "tree": ["(c / catch-03\n   :ARG0 (m / member\n            :part (p / public)))", "(c / catch-03\n   :ARG1 (p2 / person\n             :ARG0 (w / work-01)))", "(c / catch-03\n   :ARG0 (m / member\n            :part (p / public))\n   :ARG1 (p2 / person\n             :ARG0 (w / work-01)))", "(c / catch-03\n   :ARG1 (p2 / person\n             :ARG0 (w / work-01))\n   :ARG2 (c2 / camera))", "(c / catch-03\n   :ARG0 (m / member\n            :part (p / public))\n   :ARG1 (p2 / person\n             :ARG0 (w / work-01))\n   :ARG2 (c2 / camera))", "(a / and\n   :op1 (a2 / alert-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"TH\"\n                              :op2 \"Clements\"\n                              :op3 \"&\"\n                              :op4 \"Son\"))))", "(a / and\n   :op2 (s / sack-01\n           :ARG1 (m / man)))", "(a / and\n   :op1 (a2 / alert-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"TH\"\n                              :op2 \"Clements\"\n                              :op3 \"&\"\n                              :op4 \"Son\")))\n   :op2 (s / sack-01\n           :ARG1 (m / man)))", "(a / and\n   :op1 (a2 / alert-01\n            :ARG1 (p / person\n                     :ARG0 (o / own-01\n                              :ARG1 (f / field))))\n   :op2 (s / sack-01\n           :ARG1 (m / man)))", "(a2 / alert-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"TH\"\n                      :op2 \"Clements\"\n                      :op3 \"&\"\n                      :op4 \"Son\")))", "(u2 / undergo-28\n    :ARG2 (a2 / assess-01\n              :ARG1 (v / vegetable)))", "(u2 / undergo-28\n    :ARG2 (a2 / assess-01\n              :ARG1 (v / vegetable))\n    :time (b2 / before\n              :op1 (h / hit-01\n                      :ARG1 (s2 / shelf))))", "(u2 / undergo-28\n    :ARG1 (v / vegetable)\n    :ARG2 (a2 / assess-01\n              :ARG1 (e / extensive-03))\n    :time (b2 / before\n              :op1 (h / hit-01\n                      :ARG1 (s2 / shelf))))"], "smus": ["A member of the public was caught.", "Work gets caught.", "A member of the public has caught the worker.", "The worker was caught on camera.", "A member of the public has caught the worker on camera.", "And TH Clements & Son was alerted.", "and the man was sacked.", "TH Clements & Son was alerted and the man was sacked.", "The field owner was alerted and the man was sacked.", "TH Clements & Son alerted.", "Vegetables undergo an assessment.", "Vegetables undergo assessment before hitting the shelves.", "Vegetables undergo an extensive assessment before hitting the shelves."]}, {"instance_id": "realsumm-34", "summary": "<t> Tim Stanley : Muhammadu Buhar won Nigeria vote on campaign against corruption . </t> <t> Buhar 's an ex - dictator , but there 's reason for optimism . </t> <t> dictator says Jonathan administration failed to address corruption , poverty and rise of Boko Haram . </t> <t> Buhar may be tonic to years of misrule . </t>", "summary_trees": ["# ::snt  Tim Stanley : Muhammadu Buhar won Nigeria vote on campaign against corruption . \n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Tim\"\n                  :op2 \"Stanley\"))\n      :ARG1 (w / win-01\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Muhammadu\"\n                        :op2 \"Buhar\"))\n            :ARG1 (v / vote-01)\n            :ARG2 (c / country\n                  :name (n3 / name\n                        :op1 \"Nigeria\"))\n            :ARG1-of (c2 / cause-01\n                  :ARG0 (c3 / campaign-01\n                        :ARG0 p2\n                        :ARG1 (a / against\n                              :op1 (c4 / corrupt-01))))))", "# ::snt  Buhar 's an ex - dictator , but there 's reason for optimism . \n(h / have-concession-91\n      :ARG1 (r / reason\n            :ARG0-of (c / cause-01\n                  :ARG1 (o / optimism)))\n      :ARG2 (d / dictator\n            :domain (p / person\n                  :name (n / name\n                        :op1 \"Buhar\"))\n            :time (e / ex)))", "# ::snt  dictator says Jonathan administration failed to address corruption , poverty and rise of Boko Haram . \n(s / say-01\n      :ARG0 (d / dictator)\n      :ARG1 (f / fail-01\n            :ARG1 (g / government-organization\n                  :ARG0-of (a / administrate-01)\n                  :mod (p / person\n                        :name (n / name\n                              :op1 \"Jonathan\")))\n            :ARG2 (a2 / address-02\n                  :ARG0 g\n                  :ARG1 (a3 / and\n                        :op1 (c / corruption)\n                        :op2 (p2 / poor)\n                        :op3 (r / rise-01\n                              :ARG1 (c2 / criminal-organization\n                                    :name (n2 / name\n                                          :op1 \"Boko\"\n                                          :op2 \"Hararma\")))))))", "# ::snt  Buhar may be tonic to years of misrule . \n(p / possible-01\n      :ARG1 (t / tonic\n            :beneficiary (m / misrule\n                  :duration (m2 / multiple\n                        :op1 (t2 / temporal-quantity\n                              :quant 1\n                              :unit (y / year))))\n            :domain (p2 / person\n                  :name (n / name\n                        :op1 \"Buhar\"))))"], "tree": ["(s / say-01\n   :ARG1 (w / win-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Muhammadu\"\n                                :op2 \"Buhar\"))))", "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tim\"\n                     :op2 \"Stanley\"))\n   :ARG1 (w / win-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Muhammadu\"\n                                :op2 \"Buhar\"))))", "(w / win-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Muhammadu\"\n                       :op2 \"Buhar\"))\n   :ARG2 (c / country\n            :name (n3 / name\n                      :op1 \"Nigeria\")))", "(w / win-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Muhammadu\"\n                       :op2 \"Buhar\"))\n   :ARG1 (v / vote-01)\n   :ARG2 (c / country\n            :name (n3 / name\n                      :op1 \"Nigeria\")))", "(h / have-concession-91\n   :ARG1 (r / reason\n            :ARG0 (c / cause-01\n                     :ARG1 (o / optimism))))", "(h / have-concession-91\n   :ARG2 (d / dictator\n            :time (e / ex)))", "(h / have-concession-91\n   :ARG1 (r / reason\n            :ARG0 (c / cause-01\n                     :ARG1 (o / optimism)))\n   :ARG2 (d / dictator\n            :time (e / ex)))", "(d / dictator\n   :domain (p / person\n              :name (n / name\n                       :op1 \"Buhar\"))\n   :time (e / ex))", "(p / person\n   :name (n / name\n            :op1 \"Buhar\"))", "(s / say-01\n   :ARG1 (f / fail-01\n            :ARG1 (g / government-organization\n                     :ARG0 (a / administrate-01))))", "(s / say-01\n   :ARG0 (d / dictator)\n   :ARG1 (f / fail-01\n            :ARG1 (g / government-organization\n                     :ARG0 (a / administrate-01))))", "(s / say-01\n   :ARG0 (d / dictator)\n   :ARG1 (f / fail-01\n            :ARG2 (a2 / address-02\n                      :ARG1 (p2 / poor))))", "(f / fail-01\n   :ARG2 (a2 / address-02\n             :ARG1 (c / corruption)))", "(a3 / and\n    :op1 (c / corruption)\n    :op2 (p2 / poor))", "(p / possible-01\n   :ARG1 (t / tonic\n            :domain (p2 / person\n                        :name (n / name\n                                 :op1 \"Buhar\"))))", "(t / tonic\n   :beneficiary (m / misrule\n                   :duration (m2 / multiple\n                                 :op1 (t2 / temporal-quantity\n                                          :unit (y / year)))))", "(m / misrule\n   :duration (m2 / multiple\n                 :op1 (t2 / temporal-quantity\n                          :quant 1)))", "(m / misrule\n   :duration (m2 / multiple\n                 :op1 (t2 / temporal-quantity\n                          :unit (y / year))))"], "smus": ["Muhammadu Buhar won.", "Tim Stanley said Muhammadu Buhar won.", "Muhammadu Buhar won Nigeria.", "Muhammadu Buhar won the vote for Nigeria.", "There is reason to be optimistic though.", "Despite being an ex-dictator.", "The ex-dictator is the reason for optimism, though.", "Buhar is an ex-dictator.", "Buhar", "Says the administration failed.", "The dictator says the administration failed.", "The dictator says that failing to address poverty.", "failed to address corruption.", "Corruption and poverty.", "Buhar may have been a tonic.", "A tonic for years of misrule.", "Misrule for years.", "There has been years of misrule."]}, {"instance_id": "realsumm-35", "summary": "<t> Bulgaria 's Black Sea resorts cheaper than hotspots in Italy , Spain and Turkey . </t> <t> Researchers found cheapest destination using ' imaginary shopping basket ' Cheap prices are driven by low exchange rates and country 's high inflation . </t> <t> country most popular resort of Sunny Beach copies those of Spain and Greece . </t>", "summary_trees": ["# ::snt  Bulgaria 's Black Sea resorts cheaper than hotspots in Italy , Spain and Turkey . \n(h / have-degree-91\n      :ARG1 (r / resort\n            :location (s / sea\n                  :name (n / name\n                        :op1 \"Black\"\n                        :op2 \"Sea\"))\n            :poss (c / country\n                  :name (n2 / name\n                        :op1 \"Bulgaria\")))\n      :ARG2 (c2 / cheap-02\n            :ARG1 r)\n      :ARG3 (m / more)\n      :ARG4 (h2 / hotspot\n            :location (a / and\n                  :op1 (c3 / country\n                        :name (n3 / name\n                              :op1 \"Italy\"))\n                  :op2 (c4 / country\n                        :name (n4 / name\n                              :op1 \"Spain\"))\n                  :op3 (c5 / country\n                        :name (n5 / name\n                              :op1 \"Turkey\")))))", "# ::snt  Researchers found cheapest destination using ' imaginary shopping basket ' Cheap prices are driven by low exchange rates and country 's high inflation . \n(m / multi-sentence\n      :snt1 (f / find-01\n            :ARG0 (p / person\n                  :ARG0-of (r / research-01))\n            :ARG1 (d / destination\n                  :ARG1-of (h / have-degree-91\n                        :ARG2 (c / cheap-02\n                              :ARG1 d)\n                        :ARG3 (m2 / most)))\n            :manner (u / use-01\n                  :ARG0 p\n                  :ARG1 (b / basket\n                        :mod (s / shop-01)\n                        :mod (ii / imaginary))))\n      :snt2 (d2 / drive-02\n            :ARG0 (a / and\n                  :op1 (r2 / rate\n                        :ARG1-of (l / low-04)\n                        :mod (e / exchange-01))\n                  :op2 (ii2 / inflate-01\n                        :ARG1 (c2 / country)\n                        :ARG1-of (h2 / high-02)))\n            :ARG1 (p2 / price-01\n                  :ARG1-of (c3 / cheap-02))))", "# ::snt  country most popular resort of Sunny Beach copies those of Spain and Greece . \n(c / copy-01\n      :ARG1 (r / resort\n            :poss (b / beach\n                  :name (n / name\n                        :op1 \"Sunny\"\n                        :op2 \"Beach\"))\n            :ARG1-of (h / have-degree-91\n                  :ARG2 (p / popular-02\n                        :ARG1 r)\n                  :ARG3 (m / most)\n                  :ARG5 (r2 / resort\n                        :poss (a / and\n                              :op1 (c2 / country\n                                    :name (n2 / name\n                                          :op1 \"Spain\"))\n                              :op2 (c3 / country\n                                    :name (n3 / name\n                                          :op1 \"Greece\"))))))\n      :ARG2 r2)"], "tree": ["(h / have-degree-91\n   :ARG1 (r / resort\n            :location (s / sea\n                         :name (n / name\n                                  :op1 \"Black\"\n                                  :op2 \"Sea\")))\n   :ARG2 (c2 / cheap-02\n             :ARG1 r)\n   :ARG3 (m / more))", "(h / have-degree-91\n   :ARG1 (r / resort\n            :poss (c / country\n                     :name (n2 / name\n                               :op1 \"Bulgaria\")))\n   :ARG2 (c2 / cheap-02\n             :ARG1 r)\n   :ARG3 (m / more))", "(h / have-degree-91\n   :ARG2 (c2 / cheap-02\n             :ARG1 (r / resort))\n   :ARG3 (m / more)\n   :ARG4 (h2 / hotspot\n             :location (c3 / country\n                           :name (n3 / name\n                                     :op1 \"Italy\"))))", "(h / have-degree-91\n   :ARG1 (r / resort\n            :poss (c / country\n                     :name (n2 / name\n                               :op1 \"Bulgaria\")))\n   :ARG2 (c2 / cheap-02\n             :ARG1 r)\n   :ARG3 (m / more)\n   :ARG4 (h2 / hotspot\n             :location (c3 / country\n                           :name (n3 / name\n                                     :op1 \"Italy\"))))", "(h / have-degree-91\n   :ARG1 (r / resort\n            :poss (c / country\n                     :name (n2 / name\n                               :op1 \"Bulgaria\")))\n   :ARG2 (c2 / cheap-02\n             :ARG1 r)\n   :ARG3 (m / more)\n   :ARG4 (h2 / hotspot\n             :location (c4 / country\n                           :name (n4 / name\n                                     :op1 \"Spain\"))))", "(f / find-01\n   :ARG0 (p / person\n            :ARG0 (r / research-01))\n   :ARG1 (d / destination\n            :ARG1 (h / have-degree-91\n                     :ARG2 (c / cheap-02\n                              :ARG1 d)))\n   :manner (u / use-01\n              :ARG0 p\n              :ARG1 (b / basket)))", "(d2 / drive-02\n    :ARG0 (ii2 / inflate-01\n               :ARG1 (c2 / country))\n    :ARG1 (p2 / price-01\n              :ARG1 (c3 / cheap-02)))", "(a / and\n   :op1 (r2 / rate\n            :ARG1 (l / low-04))\n   :op2 (ii2 / inflate-01\n             :ARG1 (c2 / country)))", "(a / and\n   :op1 (r2 / rate\n            :ARG1 (l / low-04))\n   :op2 (ii2 / inflate-01\n             :ARG1 (h2 / high-02)))", "(r2 / rate\n    :ARG1 (l / low-04)\n    :mod (e / exchange-01))", "(c / copy-01\n   :ARG1 (r / resort\n            :ARG1 (h / have-degree-91\n                     :ARG5 (r2 / resort\n                               :poss (c3 / country\n                                         :name (n3 / name\n                                                   :op1 \"Greece\"))))))", "(r / resort\n   :ARG1 (h / have-degree-91\n            :ARG2 (p / popular-02\n                     :ARG1 r)))", "(r / resort\n   :poss (b / beach\n            :name (n / name\n                     :op1 \"Sunny\"\n                     :op2 \"Beach\"))\n   :ARG1 (h / have-degree-91\n            :ARG2 (p / popular-02\n                     :ARG1 r)))", "(b / beach\n   :name (n / name\n            :op1 \"Sunny\"\n            :op2 \"Beach\"))", "(a / and\n   :op2 (c3 / country\n            :name (n3 / name\n                      :op1 \"Greece\")))"], "smus": ["Black Sea resorts are cheaper.", "Bulgaria's resorts are cheaper.", "The resorts are cheaper than the hotspots in Italy.", "Bulgaria's resorts are cheaper than Italy's hotspots.", "Bulgaria's resorts are cheaper than Spain's hotspots.", "The researchers found a cheap destination using a basket.", "Cheap prices are driven by inflation in the country.", "Low rates and inflation in the country.", "Low rates and high inflation.", "Low exchange rates.", "The resort copies Greece's.", "A popular resort.", "Sunny Beach is a popular resort.", "Sunny Beach", "and Greece."]}, {"instance_id": "realsumm-36", "summary": "<t> WARNING : GRAPHIC CONTENT . </t> <t> Series of photos appear to show the beheading of a man in Hama in Syria . </t> <t> Man is handcuffed and blindfolded as man is led from a van to area of land . </t> <t> man is surrounded by men with guns and executioner with a meat cleaver . </t> <t> It is claimed the man was beheaded because man is an alleged ' blasphemer ' </t>", "summary_trees": ["# ::snt  WARNING : GRAPHIC CONTENT . \n(w / warn-01\n      :ARG1 (c / content\n            :mod (g / graphic)))", "# ::snt  Series of photos appear to show the beheading of a man in Hama in Syria . \n(a / appear-02\n      :ARG1 (s / show-01\n            :ARG0 (s2 / series\n                  :consist-of (p / photo))\n            :ARG1 (b / behead-01\n                  :ARG1 (m / man)\n                  :location (c / city\n                        :name (n / name\n                              :op1 \"Hama\")\n                        :location (c2 / country\n                              :name (n2 / name\n                                    :op1 \"Syria\"))))))", "# ::snt  Man is handcuffed and blindfolded as man is led from a van to area of land . \n(a / and\n      :op1 (h / handcuff-01\n            :ARG1 (m / man))\n      :op2 (b / blindfold-01\n            :ARG1 m)\n      :time (l / lead-01\n            :ARG1 m\n            :ARG3 (v / van)\n            :ARG4 (a2 / area\n                  :mod (l2 / land))))", "# ::snt  man is surrounded by men with guns and executioner with a meat cleaver . \n(s / surround-01\n      :ARG1 (a / and\n            :op1 (m / man\n                  :ARG0-of (h / have-03\n                        :ARG1 (g / gun)))\n            :op2 (p / person\n                  :ARG0-of (e / execute-01)\n                  :ARG0-of (h2 / have-03\n                        :ARG1 (c / cleaver\n                              :purpose (m2 / meat)))))\n      :ARG2 (m3 / man))", "# ::snt  It is claimed the man was beheaded because man is an alleged ' blasphemer ' \n(c / claim-01\n      :ARG1 (b / behead-01\n            :ARG1 (m / man)\n            :ARG1-of (c2 / cause-01\n                  :ARG0 (b2 / blaspheme-01\n                        :ARG0 m\n                        :ARG1-of (a / allege-01)))))"], "tree": ["(w / warn-01\n   :ARG1 (c / content\n            :mod (g / graphic)))", "(a / appear-02\n   :ARG1 (s / show-01\n            :ARG1 (b / behead-01\n                     :ARG1 (m / man))))", "(a / appear-02\n   :ARG1 (s / show-01\n            :ARG1 (b / behead-01\n                     :location (c / city\n                                  :name (n / name\n                                           :op1 \"Hama\")))))", "(s / show-01\n   :ARG1 (b / behead-01\n            :location (c / city\n                         :name (n / name\n                                  :op1 \"Hama\"))))", "(b / behead-01\n   :location (c / city\n                :name (n / name\n                         :op1 \"Hama\")))", "(b / behead-01\n   :ARG1 (m / man)\n   :location (c / city\n                :name (n / name\n                         :op1 \"Hama\")))", "(a / and\n   :op1 (h / handcuff-01\n           :ARG1 (m / man)))", "(a / and\n   :op1 (h / handcuff-01\n           :ARG1 (m / man))\n   :op2 (b / blindfold-01\n           :ARG1 m))", "(a / and\n   :op1 (h / handcuff-01\n           :ARG1 (m / man))\n   :op2 (b / blindfold-01\n           :ARG1 m)\n   :time (l / lead-01\n            :ARG1 m))", "(a / and\n   :op1 (h / handcuff-01\n           :ARG1 (m / man))\n   :op2 (b / blindfold-01\n           :ARG1 m)\n   :time (l / lead-01\n            :ARG4 (a2 / area\n                      :mod (l2 / land))))", "(l / lead-01\n   :ARG4 (a2 / area\n             :mod (l2 / land)))", "(s / surround-01\n   :ARG1 (m / man\n            :ARG0 (h / have-03\n                     :ARG1 (g / gun))))", "(a / and\n   :op1 (m / man\n           :ARG0 (h / have-03\n                    :ARG1 (g / gun))))", "(a / and\n   :op1 (m / man\n           :ARG0 (h / have-03\n                    :ARG1 (g / gun)))\n   :op2 (p / person\n           :ARG0 (h2 / have-03\n                     :ARG1 (c / cleaver\n                              :purpose (m2 / meat)))))", "(m / man\n   :ARG0 (h / have-03\n            :ARG1 (g / gun)))", "(c / claim-01\n   :ARG1 (b / behead-01\n            :ARG1 (m / man)))", "(c / claim-01\n   :ARG1 (b / behead-01\n            :ARG1 (c2 / cause-01\n                      :ARG0 (b2 / blaspheme-01\n                                :ARG0 (m / man)))))", "(c / claim-01\n   :ARG1 (b / behead-01\n            :ARG1 (c2 / cause-01\n                      :ARG0 (b2 / blaspheme-01\n                                :ARG1 (a / allege-01)))))", "(c2 / cause-01\n    :ARG0 (b2 / blaspheme-01\n              :ARG0 (m / man)))", "(c2 / cause-01\n    :ARG0 (b2 / blaspheme-01\n              :ARG1 (a / allege-01)))"], "smus": ["Graphic Content Warning:", "The appear to show a man was beheaded.", "The beheadings appear to show in Hama.", "Show beheading in Hama.", "The beheading took place in Hama.", "The man was beheaded in Hama.", "and the man was handcuffed.", "The man was handcuffed and blindfolded.", "When led, the man was handcuffed and blindfolded.", "When led to a land area, the man was handcuffed and blindfolded.", "led to a land area.", "The men were surrounded by men with guns.", "And men with guns.", "Men with guns and people with meat cleaver.", "men with guns", "The man was claimed to have been beheaded.", "It is claimed that the beheadings were done because of the blasphemy of the man.", "It is claimed that the beheadings were done because of the alleged blasphemy.", "Because of the man's blasphemy.", "Because of the alleged blasphemy."]}, {"instance_id": "realsumm-37", "summary": "<t> Denise and Glen Higgs thought they 'd never have children . </t> <t> Higgs was made infertile due to cancer treatment , but they tried IVF . </t> <t> Couple from of Braunton , Devon , had Mazy , born three years ago . </t> <t> Tried again using the same batch and had twins Carter & Carson last week . </t>", "summary_trees": ["# ::snt  Denise and Glen Higgs thought they 'd never have children . \n(t / think-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Denise\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Glenn\"\n                        :op2 \"Higgs\")))\n      :ARG1 (h / have-05\n            :polarity -\n            :ARG0 a\n            :ARG1 (c / child)\n            :time (e / ever)))", "# ::snt  Higgs was made infertile due to cancer treatment , but they tried IVF . \n(m / make-02\n      :ARG0 (t / treat-03\n            :ARG2 (c / cancer))\n      :ARG1 (ii / infertile\n            :domain (p / person\n                  :name (n / name\n                        :op1 \"Higgs\")))\n      :concession-of (t2 / try-01\n            :ARG0 (t3 / they)\n            :ARG1 (f / fertilize-01\n                  :mod (m2 / multiple))))", "# ::snt  Couple from of Braunton , Devon , had Mazy , born three years ago . \n(h / have-05\n      :ARG0 (c / couple\n            :source (c2 / city\n                  :name (n / name\n                        :op1 \"Braunton\")\n                  :location (c3 / county\n                        :name (n2 / name\n                              :op1 \"Devon\"))))\n      :ARG1 (p / person\n            :name (n3 / name\n                  :op1 \"Mazy\")\n            :ARG1-of (b / bear-02\n                  :time (b2 / before\n                        :op1 (n4 / now)\n                        :quant (t / temporal-quantity\n                              :quant 3\n                              :unit (y / year))))))", "# ::snt  Tried again using the same batch and had twins Carter & Carson last week . \n(a / and\n      :op1 (t / try-01\n            :ARG0 (ii / i)\n            :mod (a2 / again)\n            :manner (u / use-01\n                  :ARG0 ii\n                  :ARG1 (b / batch\n                        :ARG1-of (s / same-01))))\n      :op2 (h / have-05\n            :ARG0 ii\n            :ARG1 (a3 / and\n                  :op1 (p / person\n                        :name (n / name\n                              :op1 \"Carter\"))\n                  :op2 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Carson\"))\n                  :mod (t2 / twin))\n            :time (w / week\n                  :mod (l / last))))"], "tree": ["(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Denise\")))", "(t / think-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Glenn\"\n                       :op2 \"Higgs\")))", "(t / think-01\n   :ARG1 (h / have-05\n            :polarity -))", "(t / think-01\n   :ARG1 (h / have-05\n            :time (e / ever)))", "(a / and\n   :op1 (p / person\n           :name (n / name\n                    :op1 \"Denise\"))\n   :op2 (p2 / person\n            :name (n2 / name\n                      :op1 \"Glenn\"\n                      :op2 \"Higgs\")))", "(m / make-02\n   :ARG1 (ii / infertile\n             :domain (p / person\n                        :name (n / name\n                                 :op1 \"Higgs\"))))", "(m / make-02\n   :ARG0 (t / treat-03\n            :ARG2 (c / cancer))\n   :ARG1 (ii / infertile\n             :domain (p / person\n                        :name (n / name\n                                 :op1 \"Higgs\"))))", "(m / make-02\n   :ARG0 (t / treat-03\n            :ARG2 (c / cancer))\n   :concession (t2 / try-01\n                   :ARG0 (t3 / they)))", "(m / make-02\n   :ARG0 (t / treat-03\n            :ARG2 (c / cancer))\n   :ARG1 (ii / infertile\n             :domain (p / person\n                        :name (n / name\n                                 :op1 \"Higgs\")))\n   :concession (t2 / try-01\n                   :ARG0 (t3 / they)))", "(ii / infertile\n    :domain (p / person\n               :name (n / name\n                        :op1 \"Higgs\")))", "(h / have-05\n   :ARG0 (c / couple\n            :source (c2 / city\n                        :name (n / name\n                                 :op1 \"Braunton\"))))", "(h / have-05\n   :ARG0 (c / couple\n            :source (c2 / city\n                        :location (c3 / county\n                                      :name (n2 / name\n                                                :op1 \"Devon\")))))", "(h / have-05\n   :ARG1 (p / person\n            :name (n3 / name\n                      :op1 \"Mazy\")))", "(h / have-05\n   :ARG0 (c / couple\n            :source (c2 / city\n                        :name (n / name\n                                 :op1 \"Braunton\")))\n   :ARG1 (p / person\n            :name (n3 / name\n                      :op1 \"Mazy\")))", "(h / have-05\n   :ARG0 (c / couple\n            :source (c2 / city\n                        :location (c3 / county\n                                      :name (n2 / name\n                                                :op1 \"Devon\"))))\n   :ARG1 (p / person\n            :name (n3 / name\n                      :op1 \"Mazy\")))", "(a / and\n   :op1 (t / try-01\n           :manner (u / use-01\n                      :ARG1 (b / batch\n                               :ARG1 (s / same-01)))))", "(a / and\n   :op2 (h / have-05\n           :time (w / week\n                    :mod (l / last))))", "(a / and\n   :op1 (t / try-01\n           :mod (a2 / again))\n   :op2 (h / have-05\n           :ARG1 (t2 / twin)))", "(t / try-01\n   :ARG0 (ii / i)\n   :mod (a2 / again)\n   :manner (u / use-01\n              :ARG0 ii\n              :ARG1 (b / batch)))", "(h / have-05\n   :time (w / week\n            :mod (l / last)))"], "smus": ["Denise thought.", "Glenn Higgs thought.", "Thought it didn't.", "Thought it would never happen.", "Denise and Glenn Higgs", "Higgs was made infertile.", "The treatment for cancer has made Higgs infertile.", "Cancer treatment was made, but they tried.", "Even though they tried, cancer treatment has made Higgs infertile.", "Higgs was infertile.", "The couple from Braunton had.", "The couple from Devon had.", "had mazy.", "The couple from Braunton had mazy.", "The couple from Devon had Mazy.", "And tried using the same batch.", "And had last week.", "tried again and had twins.", "I've tried again using a batch.", "Had last week."]}, {"instance_id": "realsumm-38", "summary": "<t> Speed camera discovered pointing at house in Handsworth , Birmingham . </t> <t> Fixed cameras switched off across the West Midlands in Spring of 2013 . </t> <t> Site is not going to be part of a new trial using digital technology . </t> <t> Obsolete camera may now be taken down after engineers examine device . </t>", "summary_trees": ["# ::snt  Speed camera discovered pointing at house in Handsworth , Birmingham . \n(d / discover-01\n      :ARG1 (c / camera\n            :mod (s / speed)\n            :ARG0-of (p / point-01\n                  :ARG2 (h / house\n                        :location (c2 / city-district\n                              :name (n / name\n                                    :op1 \"Handsworth\")\n                              :part-of (c3 / city\n                                    :name (n2 / name\n                                          :op1 \"Birmingham\")))))))", "# ::snt  Fixed cameras switched off across the West Midlands in Spring of 2013 . \n(s / switch-off-04\n      :ARG1 (c / camera\n            :ARG1-of (f / fix-03))\n      :location (a / across\n            :op1 (c2 / country-region\n                  :name (n / name\n                        :op1 \"West\"\n                        :op2 \"Midlands\")))\n      :time (d / date-entity\n            :year 2013\n            :season (s2 / spring)))", "# ::snt  Site is not going to be part of a new trial using digital technology . \n(h / have-part-91\n      :polarity -\n      :ARG1 (t / try-02\n            :ARG1-of (n / new-01)\n            :ARG0-of (u / use-01\n                  :ARG1 (t2 / technology\n                        :mod (d / digit))))\n      :ARG2 (s / site))", "# ::snt  Obsolete camera may now be taken down after engineers examine device . \n(p / possible-01\n      :ARG1 (t / take-down-22\n            :ARG1 (c / camera\n                  :mod (o / obsolete))\n            :time (a / after\n                  :op1 (e / examine-01\n                        :ARG0 (p2 / person\n                              :ARG0-of (e2 / engineer-01))\n                        :ARG1 (d / device))))\n      :time (n / now))"], "tree": ["(d / discover-01\n   :ARG1 (c / camera\n            :mod (s / speed)))", "(d / discover-01\n   :ARG1 (c / camera\n            :ARG0 (p / point-01\n                     :ARG2 (h / house\n                              :location (c2 / city-district\n                                            :name (n / name\n                                                     :op1 \"Handsworth\"))))))", "(c / camera\n   :mod (s / speed)\n   :ARG0 (p / point-01\n            :ARG2 (h / house\n                     :location (c2 / city-district\n                                   :name (n / name\n                                            :op1 \"Handsworth\")))))", "(c / camera\n   :mod (s / speed)\n   :ARG0 (p / point-01\n            :ARG2 (h / house\n                     :location (c2 / city-district\n                                   :part (c3 / city\n                                             :name (n2 / name\n                                                       :op1 \"Birmingham\"))))))", "(p / point-01\n   :ARG2 (h / house\n            :location (c2 / city-district\n                          :part (c3 / city\n                                    :name (n2 / name\n                                              :op1 \"Birmingham\")))))", "(s / switch-off-04\n   :ARG1 (c / camera\n            :ARG1 (f / fix-03))\n   :location (a / across\n                :op1 (c2 / country-region\n                         :name (n / name\n                                  :op1 \"West\"\n                                  :op2 \"Midlands\"))))", "(s / switch-off-04\n   :ARG1 (c / camera\n            :ARG1 (f / fix-03))\n   :time (d / date-entity\n            :year 2013))", "(s / switch-off-04\n   :location (a / across\n                :op1 (c2 / country-region\n                         :name (n / name\n                                  :op1 \"West\"\n                                  :op2 \"Midlands\")))\n   :time (d / date-entity\n            :season (s2 / spring)))", "(s / switch-off-04\n   :ARG1 (c / camera\n            :ARG1 (f / fix-03))\n   :location (a / across\n                :op1 (c2 / country-region\n                         :name (n / name\n                                  :op1 \"West\"\n                                  :op2 \"Midlands\")))\n   :time (d / date-entity\n            :year 2013))", "(s / switch-off-04\n   :ARG1 (c / camera\n            :ARG1 (f / fix-03))\n   :location (a / across\n                :op1 (c2 / country-region\n                         :name (n / name\n                                  :op1 \"West\"\n                                  :op2 \"Midlands\")))\n   :time (d / date-entity\n            :season (s2 / spring)))", "(h / have-part-91\n   :ARG1 (t / try-02\n            :ARG1 (n / new-01)))", "(h / have-part-91\n   :ARG1 (t / try-02\n            :ARG0 (u / use-01\n                     :ARG1 (t2 / technology\n                               :mod (d / digit)))))", "(t / try-02\n   :ARG0 (u / use-01\n            :ARG1 (t2 / technology\n                      :mod (d / digit))))", "(t / try-02\n   :ARG1 (n / new-01)\n   :ARG0 (u / use-01\n            :ARG1 (t2 / technology\n                      :mod (d / digit))))", "(u / use-01\n   :ARG1 (t2 / technology\n             :mod (d / digit)))", "(p / possible-01\n   :ARG1 (t / take-down-22\n            :time (a / after\n                     :op1 (e / examine-01\n                             :ARG0 (p2 / person\n                                       :ARG0 (e2 / engineer-01))))))", "(p / possible-01\n   :ARG1 (t / take-down-22\n            :time (a / after\n                     :op1 (e / examine-01\n                             :ARG1 (d / device)))))", "(p / possible-01\n   :ARG1 (t / take-down-22\n            :ARG1 (c / camera\n                     :mod (o / obsolete)))\n   :time (n / now))", "(e / examine-01\n   :ARG0 (p2 / person\n             :ARG0 (e2 / engineer-01)))", "(e / examine-01\n   :ARG0 (p2 / person\n             :ARG0 (e2 / engineer-01))\n   :ARG1 (d / device))"], "smus": ["The speed camera was discovered.", "The camera was discovered at a house in Handsworth.", "A speed camera pointing at a house in Handsworth.", "A speed camera pointing at a house in Birmingham.", "Point to a house in Birmingham.", "Fixed cameras switched off across the West Midlands.", "Fixed cameras switched off in 2013.", "Switched off across the West Midlands in spring.", "Fixed cameras switched off across the West Midlands in 2013.", "Fixed cameras switched off across the West Midlands in spring.", "Part of trying new.", "Part of the try is to use digital technology.", "Trying to use digital technology.", "Using digital technology is trying to do new things.", "using digital technology", "It can be taken down after engineers examine.", "It can be taken down after the devices are examined.", "The obsolete camera can now be taken down.", "Engineers examine.", "Engineers examine the device."]}, {"instance_id": "realsumm-39", "summary": "<t> Charles Terreni , 18 , was found dead March 18 at a frat house in Columbia . </t> <t> Terreni was a USC freshman and a member of the Pi Kappa Alpha house . </t> <t> Coroner identified cause of death as alcohol poisoning . </t> <t> Toxicology tests showed freshman had a blood alcohol of .375 . </t> <t> Neighbors said there was a large party ; a beer keg was still visible outside . </t>", "summary_trees": ["# ::snt  Charles Terreni , 18 , was found dead March 18 at a frat house in Columbia . \n(f / find-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Charles\"\n                  :op2 \"Terreni\")\n            :age (t / temporal-quantity\n                  :quant 18\n                  :unit (y / year)))\n      :ARG2 (d / die-01\n            :ARG1 p)\n      :time (d2 / date-entity\n            :day 18\n            :month 3)\n      :location (h / house\n            :mod (f2 / frat)\n            :location (c / city\n                  :name (n2 / name\n                        :op1 \"Columbia\"))))", "# ::snt  Terreni was a USC freshman and a member of the Pi Kappa Alpha house . \n(a / and\n      :op1 (f / freshman\n            :domain (p / person\n                  :name (n / name\n                        :op1 \"Terreni\"))\n            :location (u / university\n                  :name (n2 / name\n                        :op1 \"USC\")))\n      :op2 (h / have-org-role-91\n            :ARG0 p\n            :ARG1 (h2 / house\n                  :name (n3 / name\n                        :op1 \"Pi\"\n                        :op2 \"Kappa\"\n                        :op3 \"Alpha\"))\n            :ARG2 (m / member)))", "# ::snt  Coroner identified cause of death as alcohol poisoning . \n(ii / identify-01\n      :ARG0 (c / coroner)\n      :ARG1 (c2 / cause-01\n            :ARG1 (d / die-01))\n      :ARG2 (p / poison-02\n            :ARG1 (a / alcohol)))", "# ::snt  Toxicology tests showed freshman had a blood alcohol of .375 . \n(s / show-01\n      :ARG0 (t / test-01\n            :mod (t2 / toxicology))\n      :ARG1 (h / have-03\n            :ARG0 (f / freshman)\n            :ARG1 (a / alcohol\n                  :mod (b / blood)\n                  :quant (c / concentration-quantity\n                        :quant.375 (f2 / fluid-ounce)))))", "# ::snt  Neighbors said there was a large party ; a beer keg was still visible outside . \n(a / and\n      :op1 (s / say-01\n            :ARG0 (n / neighbor)\n            :ARG1 (p / party-01\n                  :mod (l / large)))\n      :op2 (s2 / see-01\n            :ARG1 (k / keg\n                  :mod (b / beer))\n            :mod (s3 / still)\n            :location (o / outside)))"], "tree": ["(f / find-01\n   :ARG2 (d / die-01\n            :ARG1 (p / person :name (n / name :op1 \"Charles\" :op2 \"Terreni\")))))", "(f / find-01\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :quant 18))\n   :ARG2 (d / die-01\n            :ARG1 p))", "(f / find-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Charles\"\n                     :op2 \"Terreni\"))\n   :ARG2 (d / die-01\n            :ARG1 p)\n   :time (d2 / date-entity\n             :month 3))", "(f / find-01\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :quant 18))\n   :ARG2 (d / die-01\n            :ARG1 p)\n   :time (d2 / date-entity\n             :month 3)\n   :location (h / house\n                :mod (f2 / frat)))", "(a / and\n   :op1 (f / freshman\n           :domain (p / person\n                      :name (n / name\n                               :op1 \"Terreni\"))))", "(a / and\n   :op2 (h / have-org-role-91\n           :ARG2 (m / member)))", "(a / and\n   :op1 (f / freshman\n           :domain (p / person\n                      :name (n / name\n                               :op1 \"Terreni\")))\n   :op2 (h / have-org-role-91\n           :ARG2 (m / member)))", "(f / freshman\n   :domain (p / person\n              :name (n / name\n                       :op1 \"Terreni\")))", "(f / freshman\n   :domain (p / person\n              :name (n / name\n                       :op1 \"Terreni\"))\n   :location (u / university\n                :name (n2 / name\n                          :op1 \"USC\")))", "(ii / identify-01\n    :ARG1 (c2 / cause-01\n              :ARG1 (d / die-01)))", "(ii / identify-01\n    :ARG0 (c / coroner)\n    :ARG1 (c2 / cause-01\n              :ARG1 (d / die-01)))", "(ii / identify-01\n    :ARG0 (c / coroner)\n    :ARG2 (p / poison-02\n             :ARG1 (a / alcohol)))", "(ii / identify-01\n    :ARG1 (c2 / cause-01\n              :ARG1 (d / die-01))\n    :ARG2 (p / poison-02\n             :ARG1 (a / alcohol)))", "(ii / identify-01\n    :ARG0 (c / coroner)\n    :ARG1 (c2 / cause-01\n              :ARG1 (d / die-01))\n    :ARG2 (p / poison-02\n             :ARG1 (a / alcohol)))", "(s / show-01\n   :ARG1 (h / have-03\n            :ARG0 (f / freshman)))", "(s / show-01\n   :ARG1 (h / have-03\n            :ARG1 (a / alcohol\n                     :mod (b / blood))))", "(s / show-01\n   :ARG0 (t / test-01\n            :mod (t2 / toxicology))\n   :ARG1 (h / have-03\n            :ARG0 (f / freshman)))", "(h / have-03\n   :ARG1 (a / alcohol\n            :mod (b / blood)))", "(h / have-03\n   :ARG0 (f / freshman)\n   :ARG1 (a / alcohol\n            :mod (b / blood)))", "(a / and\n   :op1 (s / say-01\n           :ARG1 (p / party-01\n                    :mod (l / large))))", "(a / and\n   :op1 (s / say-01\n           :ARG0 (n / neighbor))\n   :op2 (s2 / see-01\n            :ARG1 (k / keg\n                     :mod (b / beer))))", "(a / and\n   :op1 (s / say-01\n           :ARG1 (p / party-01\n                    :mod (l / large)))\n   :op2 (s2 / see-01\n            :ARG1 (k / keg\n                     :mod (b / beer))))", "(s / say-01\n   :ARG0 (n / neighbor)\n   :ARG1 (p / party-01\n            :mod (l / large)))", "(s2 / see-01\n    :ARG1 (k / keg\n             :mod (b / beer))\n    :location (o / outside))"], "smus": ["Charles Terreni was found dead.", "The 18-year-old was found dead.", "Charles Terreni was found dead in March.", "In March, an 18-year-old was found dead in a frat house.", "And Terreni is a freshman.", "and a member.", "Terreni is a freshman and a member.", "Terreni is a freshman.", "Terreni is a freshman at USC.", "The cause of death was identified.", "The Coroner identified the cause of death.", "The coroner identified the alcohol poisoning.", "The cause of death was identified as alcohol poisoning.", "The coroner identified the cause of death as alcohol poisoning.", "Showed that the freshman had.", "showed that there was blood alcohol.", "The toxicology tests showed the freshman had.", "had blood alcohol.", "The freshman had blood alcohol.", "And said a large party.", "Neighbors said, and a beer keg was seen.", "A large party was said, a beer keg was seen.", "The neighbors said it was a large party.", "There was a beer keg seen outside."]}, {"instance_id": "realsumm-40", "summary": "<t> Air strikes were launched by Saudi forces a month ago against rebels . </t> <t> Saudi forces have focused on beating back Shiite Houthi rebels in Yemen . </t> <t> Prince Alwaleed Bin Talal pledged Bentleys for pilots involved in bombings . </t> <t> Talal made pledge on Wednesday after bombing raids appeared to resume , despite an official announcement that raids would be halted last night . </t>", "summary_trees": ["# ::snt  Air strikes were launched by Saudi forces a month ago against rebels . \n(l / launch-01\n      :ARG0 (f / force\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"Saudi\"\n                        :op2 \"Arabia\")))\n      :ARG1 (s / strike-01\n            :ARG0 f\n            :ARG1 (p / person\n                  :ARG0-of (r / rebel-01))\n            :path (a / air))\n      :time (b / before\n            :op1 (n2 / now)\n            :quant (t / temporal-quantity\n                  :quant 1\n                  :unit (m / month))))", "# ::snt  Saudi forces have focused on beating back Shiite Houthi rebels in Yemen . \n(f / focus-01\n      :ARG0 (f2 / force\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"Saudi\"\n                        :op2 \"Arabia\")))\n      :ARG2 (b / beat-back-05\n            :ARG0 f2\n            :ARG1 (p / person\n                  :mod (r / religious-group\n                        :name (n2 / name\n                              :op1 \"Shiite\"\n                              :op2 \"Hathi\"))\n                  :location (c2 / country\n                        :name (n3 / name\n                              :op1 \"Yemen\"))\n                  :ARG0-of (r2 / rebel-01))))", "# ::snt  Prince Alwaleed Bin Talal pledged Bentleys for pilots involved in bombings . \n(p / pledge-01\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Alwaleed\"\n                  :op2 \"Bin\"\n                  :op3 \"Talal\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (p3 / prince)))\n      :ARG2 (c / car-make\n            :name (n2 / name\n                  :op1 \"Bentley\"))\n      :beneficiary (p4 / person\n            :ARG0-of (p5 / pilot-01)\n            :ARG1-of (ii / involve-01\n                  :ARG2 (b / bomb-01))))", "# ::snt  Talal made pledge on Wednesday after bombing raids appeared to resume , despite an official announcement that raids would be halted last night . \n(p / pledge-01\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Talal\"))\n      :time (d / date-entity\n            :weekday (w / wednesday))\n      :time (a / after\n            :op1 (a2 / appear-02\n                  :ARG1 (r / resume-01\n                        :ARG1 (r2 / raid-01\n                              :manner (b / bomb-01)))))\n      :concession (a3 / announce-01\n            :ARG1 (h / halt-01\n                  :ARG1 r2)\n            :mod (o / official)\n            :time (d2 / date-entity\n                  :dayperiod (n2 / night)\n                  :mod (y / yesterday))))"], "tree": ["(l / launch-01\n   :ARG0 (f / force\n            :mod (c / country\n                    :name (n / name\n                             :op1 \"Saudi\"\n                             :op2 \"Arabia\"))))", "(l / launch-01\n   :ARG1 (s / strike-01\n            :path (a / air)))", "(l / launch-01\n   :ARG0 (f / force\n            :mod (c / country\n                    :name (n / name\n                             :op1 \"Saudi\"\n                             :op2 \"Arabia\")))\n   :ARG1 (s / strike-01\n            :ARG1 (p / person\n                     :ARG0 (r / rebel-01))))", "(l / launch-01\n   :ARG0 (f / force\n            :mod (c / country\n                    :name (n / name\n                             :op1 \"Saudi\"\n                             :op2 \"Arabia\")))\n   :ARG1 (s / strike-01\n            :path (a / air)))", "(b / before\n   :op1 (n2 / now)\n   :quant (t / temporal-quantity\n             :unit (m / month)))", "(f / focus-01\n   :ARG0 (f2 / force\n             :mod (c / country\n                     :name (n / name\n                              :op1 \"Saudi\"\n                              :op2 \"Arabia\"))))", "(f / focus-01\n   :ARG2 (b / beat-back-05\n            :ARG1 (p / person\n                     :ARG0 (r2 / rebel-01))))", "(f / focus-01\n   :ARG0 (f2 / force\n             :mod (c / country\n                     :name (n / name\n                              :op1 \"Saudi\"\n                              :op2 \"Arabia\")))\n   :ARG2 (b / beat-back-05\n            :ARG0 f2))", "(f / focus-01\n   :ARG0 (f2 / force\n             :mod (c / country\n                     :name (n / name\n                              :op1 \"Saudi\"\n                              :op2 \"Arabia\")))\n   :ARG2 (b / beat-back-05\n            :ARG1 (p / person\n                     :ARG0 (r2 / rebel-01))))", "(f2 / force\n    :mod (c / country\n            :name (n / name\n                     :op1 \"Saudi\"\n                     :op2 \"Arabia\")))", "(p / pledge-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Alwaleed\"\n                      :op2 \"Bin\"\n                      :op3 \"Talal\"))\n   :ARG2 (c / car-make\n            :name (n2 / name\n                      :op1 \"Bentley\")))", "(p / pledge-01\n   :ARG0 (p2 / person\n             :ARG0 (h / have-org-role-91\n                      :ARG2 (p3 / prince)))\n   :ARG2 (c / car-make\n            :name (n2 / name\n                      :op1 \"Bentley\")))", "(p / pledge-01\n   :ARG0 (p2 / person\n             :ARG0 (h / have-org-role-91\n                      :ARG2 (p3 / prince)))\n   :beneficiary (p4 / person\n                    :ARG0 (p5 / pilot-01)))", "(p2 / person\n    :name (n / name\n             :op1 \"Alwaleed\"\n             :op2 \"Bin\"\n             :op3 \"Talal\")\n    :ARG0 (h / have-org-role-91\n             :ARG2 (p3 / prince)))", "(p4 / person\n    :ARG0 (p5 / pilot-01)\n    :ARG1 (ii / involve-01\n              :ARG2 (b / bomb-01)))", "(p / pledge-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Talal\")))", "(p / pledge-01\n   :time (d / date-entity\n            :weekday (w / wednesday)))", "(p / pledge-01\n   :concession (a3 / announce-01\n                   :mod (o / official)))", "(p / pledge-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Talal\"))\n   :time (d / date-entity\n            :weekday (w / wednesday)))", "(p / pledge-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Talal\"))\n   :time (d / date-entity\n            :weekday (w / wednesday))\n   :concession (a3 / announce-01\n                   :mod (o / official)))"], "smus": ["Saudi forces launched.", "Air strikes were launched.", "Saudi forces have launched strikes on rebels.", "Saudi forces have launched air strikes.", "A month ago.", "Saudi forces have focused.", "Focused on beating back against rebels.", "Saudi forces have focused on beating back.", "Saudi forces have focused on beating back rebels.", "Saudi forces", "Alwaleed Bin Talal pledged the Bentleys.", "The Prince pledged the Bentleys.", "The Prince pledged for the pilots.", "Prince Alwaleed Bin Talal", "Pilots were involved in the bombings.", "Talal made the pledge.", "The pledge was made Wednesday.", "The pledge was made despite an official announcement.", "Talal made the pledge Wednesday.", "Talal made the pledge Wednesday despite an official announcement."]}, {"instance_id": "realsumm-41", "summary": "<t> Brawl at Spring Gardens station in Philadelphia was captured on CCTV . </t> <t> Fight involved students from nearby Benjamin Franklin High School . </t> <t> At one point an attacker falls onto the tracks , but manages to get back up . </t> <t> After the confrontation , the victims and attackers walk onto the same train . </t>", "summary_trees": ["# ::snt  Brawl at Spring Gardens station in Philadelphia was captured on CCTV . \n(c / capture-01\n      :ARG0 (p / publication\n            :name (n / name\n                  :op1 \"CCTV\"))\n      :ARG1 (b / brawl-01\n            :location (s / station\n                  :name (n2 / name\n                        :op1 \"Spring\"\n                        :op2 \"Gardens\")\n                  :location (c2 / city\n                        :name (n3 / name\n                              :op1 \"Philadelphia\")))))", "# ::snt  Fight involved students from nearby Benjamin Franklin High School . \n(ii / involve-01\n      :ARG1 (p / person\n            :ARG0-of (s / study-01)\n            :source (h / high-school\n                  :name (n / name\n                        :op1 \"Benjamin\"\n                        :op2 \"Franklin\"\n                        :op3 \"High\"\n                        :op4 \"School\")\n                  :location (n2 / nearby)))\n      :ARG2 (f / fight-01))", "# ::snt  At one point an attacker falls onto the tracks , but manages to get back up . \n(c / contrast-01\n      :ARG1 (f / fall-01\n            :ARG1 (p / person\n                  :ARG0-of (a / attack-01))\n            :ARG4 (t / track))\n      :ARG2 (m / manage-01\n            :ARG0 p\n            :ARG1 (g / get-back-10\n                  :ARG1 p\n                  :ARG2 t))\n      :time (p2 / point\n            :quant 1))", "# ::snt  After the confrontation , the victims and attackers walk onto the same train . \n(w / walk-01\n      :ARG0 (a / and\n            :op1 (v / victim)\n            :op2 (p / person\n                  :ARG0-of (a2 / attack-01)))\n      :destination (t / train\n            :ARG1-of (s / same-01))\n      :time (a3 / after\n            :op1 (c / confront-01)))"], "tree": ["(c / capture-01\n   :ARG0 (p / publication\n            :name (n / name\n                     :op1 \"CCTV\")))", "(c / capture-01\n   :ARG1 (b / brawl-01\n            :location (s / station\n                         :name (n2 / name\n                                   :op1 \"Spring\"\n                                   :op2 \"Gardens\"))))", "(c / capture-01\n   :ARG0 (p / publication\n            :name (n / name\n                     :op1 \"CCTV\"))\n   :ARG1 (b / brawl-01\n            :location (s / station\n                         :name (n2 / name\n                                   :op1 \"Spring\"\n                                   :op2 \"Gardens\"))))", "(b / brawl-01\n   :location (s / station\n                :name (n2 / name\n                          :op1 \"Spring\"\n                          :op2 \"Gardens\")))", "(c2 / city\n    :name (n3 / name\n              :op1 \"Philadelphia\"))", "(ii / involve-01\n    :ARG1 (p / person\n             :source (h / high-school\n                        :name (n / name\n                                 :op1 \"Benjamin\"\n                                 :op2 \"Franklin\"\n                                 :op3 \"High\"\n                                 :op4 \"School\"))))", "(ii / involve-01\n    :ARG1 (p / person\n             :source (h / high-school\n                        :name (n / name\n                                 :op1 \"Benjamin\"\n                                 :op2 \"Franklin\"\n                                 :op3 \"High\"\n                                 :op4 \"School\")))\n    :ARG2 (f / fight-01))", "(ii / involve-01\n    :ARG1 (p / person\n             :source (h / high-school\n                        :location (n2 / nearby)))\n    :ARG2 (f / fight-01))", "(p / person\n   :ARG0 (s / study-01)\n   :source (h / high-school\n              :name (n / name\n                       :op1 \"Benjamin\"\n                       :op2 \"Franklin\"\n                       :op3 \"High\"\n                       :op4 \"School\")))", "(h / high-school\n   :name (n / name\n            :op1 \"Benjamin\"\n            :op2 \"Franklin\"\n            :op3 \"High\"\n            :op4 \"School\")\n   :location (n2 / nearby))", "(c / contrast-01\n   :ARG1 (f / fall-01\n            :ARG1 (p / person\n                     :ARG0 (a / attack-01)))\n   :ARG2 (m / manage-01\n            :ARG0 p))", "(c / contrast-01\n   :ARG1 (f / fall-01\n            :ARG1 (p / person\n                     :ARG0 (a / attack-01)))\n   :ARG2 (m / manage-01\n            :ARG1 (g / get-back-10\n                     :ARG1 p)))", "(c / contrast-01\n   :ARG1 (f / fall-01\n            :ARG1 (p / person\n                     :ARG0 (a / attack-01)))\n   :ARG2 (m / manage-01\n            :ARG0 p)\n   :time (p2 / point\n             :quant 1))", "(c / contrast-01\n   :ARG1 (f / fall-01\n            :ARG1 (p / person\n                     :ARG0 (a / attack-01)))\n   :ARG2 (m / manage-01\n            :ARG1 (g / get-back-10\n                     :ARG1 p))\n   :time (p2 / point\n             :quant 1))", "(f / fall-01\n   :ARG1 (p / person\n            :ARG0 (a / attack-01)))", "(w / walk-01\n   :time (a3 / after\n             :op1 (c / confront-01)))", "(w / walk-01\n   :ARG0 (v / victim)\n   :time (a3 / after\n             :op1 (c / confront-01)))", "(w / walk-01\n   :destination (t / train\n                   :ARG1 (s / same-01))\n   :time (a3 / after\n             :op1 (c / confront-01)))", "(w / walk-01\n   :ARG0 (v / victim)\n   :destination (t / train\n                   :ARG1 (s / same-01))\n   :time (a3 / after\n             :op1 (c / confront-01)))", "(a / and\n   :op1 (v / victim)\n   :op2 (p / person\n           :ARG0 (a2 / attack-01)))"], "smus": ["CCTV has captured.", "Brawl at Spring Gardens station captured.", "The brawl at the Spring Gardens station was captured by CCTV.", "Brawl at Spring Gardens station", "Philadelphia", "The involved were people from Benjamin Franklin High School.", "The fight involved people from the Benjamin Franklin High School.", "The fight involved people from nearby High School.", "Students from Benjamin Franklin High School.", "There is a nearby Benjamin Franklin High School.", "The attacker falls but manages.", "The attacker falls but manages to get back.", "At one point the attacker falls but manages.", "At one point the attacker falls but manages to get back.", "The attacker falls.", "Walk after the confrontation.", "Victims walk after confrontation.", "After the confrontation, walk to the same train.", "Victims walk to the same train after the confrontation.", "Victims and attackers"]}, {"instance_id": "realsumm-42", "summary": "<t> Paul and Laura Elliott met half way round at St Katharine Docks . </t> <t> Ceremony was witnessed by 80 guests . </t> <t> Pair ran across finish line under a shower of confetti . </t> <t> Returned to scene of ceremony for party later on . </t> <t> Raised \u00a3 7,000 for Cancer Research in honour of Paul 's father . </t>", "summary_trees": ["# ::snt  Paul and Laura Elliott met half way round at St Katharine Docks . \n(m / meet-03\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Paul\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Laura\"\n                        :op2 \"Elliott\")))\n      :location (r / round-03\n            :extent (h / half-way)\n            :location (p3 / port\n                  :name (n3 / name\n                        :op1 \"St\"\n                        :op2 \"Katharine\"\n                        :op3 \"Docks\"))))", "# ::snt  Ceremony was witnessed by 80 guests . \n(w / witness-01\n      :ARG0 (g / guest\n            :quant 80)\n      :ARG1 (c / ceremony))", "# ::snt  Pair ran across finish line under a shower of confetti . \n(r / run-02\n      :ARG0 (p / pair)\n      :path (a / across\n            :op1 (l / line\n                  :mod (f / finish-01)))\n      :time (s / shower-01\n            :ARG1 (c / confetti)))", "# ::snt  Returned to scene of ceremony for party later on . \n(r / return-01\n      :ARG4 (s / scene\n            :location-of (c / ceremony\n                  :purpose (p / party-01)))\n      :time (a / after))", "# ::snt  Raised \u00a3 7,000 for Cancer Research in honour of Paul 's father . \n(r / raise-02\n      :ARG1 (m / monetary-quantity\n            :quant 7000\n            :unit (p / pound))\n      :purpose (r2 / research-01\n            :ARG1 (c / cancer))\n      :manner (h / honor-01\n            :ARG1 (p2 / person\n                  :ARG0-of (h2 / have-rel-role-91\n                        :ARG1 (p3 / person\n                              :name (n / name\n                                    :op1 \"Paul\"))\n                        :ARG2 (f / father)))))"], "tree": ["(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Paul\")))", "(m / meet-03\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Laura\"\n                       :op2 \"Elliott\")))", "(m / meet-03\n   :location (r / round-03\n                :extent (h / half-way)))", "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Paul\"))\n   :location (r / round-03\n                :extent (h / half-way)))", "(a / and\n   :op1 (p / person\n           :name (n / name\n                    :op1 \"Paul\"))\n   :op2 (p2 / person\n            :name (n2 / name\n                      :op1 \"Laura\"\n                      :op2 \"Elliott\")))", "(w / witness-01\n   :ARG0 (g / guest\n            :quant 80))", "(w / witness-01\n   :ARG0 (g / guest\n            :quant 80)\n   :ARG1 (c / ceremony))", "(r / run-02\n   :path (a / across\n            :op1 (l / line\n                    :mod (f / finish-01))))", "(r / run-02\n   :ARG0 (p / pair)\n   :path (a / across\n            :op1 (l / line\n                    :mod (f / finish-01))))", "(r / run-02\n   :path (a / across\n            :op1 (l / line\n                    :mod (f / finish-01)))\n   :time (s / shower-01\n            :ARG1 (c / confetti)))", "(r / run-02\n   :ARG0 (p / pair)\n   :path (a / across\n            :op1 (l / line\n                    :mod (f / finish-01)))\n   :time (s / shower-01\n            :ARG1 (c / confetti)))", "(a / across\n   :op1 (l / line\n           :mod (f / finish-01)))", "(r / return-01\n   :ARG4 (s / scene\n            :location (c / ceremony\n                         :purpose (p / party-01))))", "(r / return-01\n   :ARG4 (s / scene\n            :location (c / ceremony\n                         :purpose (p / party-01)))\n   :time (a / after))", "(s / scene\n   :location (c / ceremony\n                :purpose (p / party-01)))", "(r / raise-02\n   :ARG1 (m / monetary-quantity\n            :quant 7000))", "(r / raise-02\n   :purpose (r2 / research-01\n                :ARG1 (c / cancer)))", "(r / raise-02\n   :manner (h / honor-01\n              :ARG1 (p2 / person\n                        :ARG0 (h2 / have-rel-role-91\n                                  :ARG2 (f / father)))))", "(r / raise-02\n   :ARG1 (m / monetary-quantity\n            :quant 7000)\n   :manner (h / honor-01\n              :ARG1 (p2 / person\n                        :ARG0 (h2 / have-rel-role-91\n                                  :ARG2 (f / father)))))", "(h2 / have-rel-role-91\n    :ARG1 (p3 / person\n              :name (n / name\n                       :op1 \"Paul\"))\n    :ARG2 (f / father))"], "smus": ["Paul met.", "Laura Elliot met.", "The meeting took place round half way through.", "Paul met half way round.", "Paul and Laura Elliott", "80 guests were witnessed.", "The Ceremony was witnessed by 80 guests.", "ran across the finish line.", "The pair ran across the finish line.", "ran across the finish line in a confetti shower.", "The pair ran across the finish line in a confetti shower.", "across the finish line.", "The scene of the party ceremony was returned.", "The scene of the party ceremony was later returned.", "Scene from the party ceremony", "7k raised.", "Raised for Cancer Research", "Raised in honor of the father.", "7000 were raised in honor of the father.", "Paul's father."]}, {"instance_id": "realsumm-43", "summary": "<t> Nasr Bitar spotted Google Street View car driving around last autumn . </t> <t> Decided it was ' Bitar time to shine ' with car so followed in Bitar car to get a selfie . </t> <t> Sensing the perfect moment , Bitar got out and took the snap in Mississauga . </t> <t> Picture of Nasr 's selfie and the Street View image shared 2.9million times . </t>", "summary_trees": ["# ::snt  Nasr Bitar spotted Google Street View car driving around last autumn . \n(s / spot-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Nasr\"\n                  :op2 \"Bitar\"))\n      :ARG1 (d / drive-01\n            :ARG0 (c / car-make\n                  :name (n2 / name\n                        :op1 \"Google\"\n                        :op2 \"Street\"\n                        :op3 \"View\"))\n            :ARG1 (a / around))\n      :time (d2 / date-entity\n            :season (a2 / autumn\n                  :mod (l / last))))", "# ::snt  Decided it was ' Bitar time to shine ' with car so followed in Bitar car to get a selfie . \n(c / cause-01\n      :ARG0 (d / decide-01\n            :ARG1 (t / time\n                  :time-of (s / shine-01\n                        :location (c2 / city\n                              :name (n / name\n                                    :op1 \"Brisbane\")))\n                  :domain (c3 / car)))\n      :ARG1 (f / follow-01\n            :ARG1 (ii / i)\n            :ARG2 (c4 / car\n                  :mod c2)\n            :purpose (g / get-01\n                  :ARG0 ii\n                  :ARG1 (s2 / selfie))))", "# ::snt  Sensing the perfect moment , Bitar got out and took the snap in Mississauga . \n(a / and\n      :op1 (g / get-05\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Bitar\"))\n            :ARG2 (o / out))\n      :op2 (s / snap-03\n            :ARG0 p\n            :location (c / city\n                  :name (n2 / name\n                        :op1 \"Mississauga\")))\n      :manner (s2 / sense-01\n            :ARG0 p\n            :ARG1 (m / moment\n                  :ARG1-of (p2 / perfect-02))))", "# ::snt  Picture of Nasr 's selfie and the Street View image shared 2.9million times . \n(a / and\n      :op1 (p / picture\n            :poss (p2 / person\n                  :name (n / name\n                        :op1 \"Nasr\")))\n      :op2 (ii / image\n            :mod (p3 / product\n                  :name (n2 / name\n                        :op1 \"Street\"\n                        :op2 \"View\"))\n            :ARG1-of (s / share-01\n                  :ARG3 (t / times\n                        :quant 2900000))))"], "tree": ["(s / spot-01\n   :time (d2 / date-entity\n             :season (a2 / autumn\n                         :mod (l / last))))", "(s / spot-01\n   :ARG1 (d / drive-01\n            :ARG0 (c / car-make\n                     :name (n2 / name\n                               :op1 \"Google\"\n                               :op2 \"Street\"\n                               :op3 \"View\")))\n   :time (d2 / date-entity\n             :season (a2 / autumn\n                         :mod (l / last))))", "(s / spot-01\n   :ARG1 (d / drive-01\n            :ARG1 (a / around))\n   :time (d2 / date-entity\n             :season (a2 / autumn\n                         :mod (l / last))))", "(d / drive-01\n   :ARG0 (c / car-make\n            :name (n2 / name\n                      :op1 \"Google\"\n                      :op2 \"Street\"\n                      :op3 \"View\"))\n   :ARG1 (a / around))", "(d2 / date-entity\n    :season (a2 / autumn\n                :mod (l / last)))", "(c / cause-01\n   :ARG1 (f / follow-01\n            :ARG1 (ii / i)))", "(c / cause-01\n   :ARG1 (f / follow-01\n            :purpose (g / get-01\n                        :ARG1 (s2 / selfie))))", "(c / cause-01\n   :ARG0 (d / decide-01\n            :ARG1 (t / time\n                     :domain (c3 / car)))\n   :ARG1 (f / follow-01\n            :purpose (g / get-01\n                        :ARG1 (s2 / selfie))))", "(f / follow-01\n   :purpose (g / get-01\n               :ARG1 (s2 / selfie)))", "(f / follow-01\n   :ARG1 (ii / i)\n   :purpose (g / get-01\n               :ARG1 (s2 / selfie)))", "(a / and\n   :op1 (g / get-05\n           :ARG2 (o / out)))", "(a / and\n   :op1 (g / get-05\n           :ARG2 (o / out))\n   :op2 (s / snap-03\n           :location (c / city\n                        :name (n2 / name\n                                  :op1 \"Mississauga\"))))", "(a / and\n   :op1 (g / get-05\n           :ARG2 (o / out))\n   :op2 (s / snap-03\n           :ARG0 (p / person\n                    :name (n / name\n                             :op1 \"Bitar\")))\n   :manner (s2 / sense-01\n               :ARG0 p\n               :ARG1 (m / moment)))", "(a / and\n   :op1 (g / get-05\n           :ARG2 (o / out))\n   :op2 (s / snap-03\n           :location (c / city\n                        :name (n2 / name\n                                  :op1 \"Mississauga\")))\n   :manner (s2 / sense-01\n               :ARG0 (p / person :name (n / name :op1 \"Bitar\"))\n               :ARG1 (m / moment)))", "(a / and\n   :op1 (g / get-05\n           :ARG2 (o / out))\n   :op2 (s / snap-03\n           :location (c / city\n                        :name (n2 / name\n                                  :op1 \"Mississauga\")))\n   :manner (s2 / sense-01\n               :ARG0 (p / person\n                        :name (n / name))))", "(a / and\n   :op2 (ii / image\n            :mod (p3 / product\n                     :name (n2 / name\n                               :op1 \"Street\"\n                               :op2 \"View\"))))", "(a / and\n   :op1 (p / picture\n           :poss (p2 / person\n                     :name (n / name\n                              :op1 \"Nasr\")))\n   :op2 (ii / image\n            :mod (p3 / product\n                     :name (n2 / name\n                               :op1 \"Street\"\n                               :op2 \"View\"))))", "(p / picture\n   :poss (p2 / person\n             :name (n / name\n                      :op1 \"Nasr\")))", "(p2 / person\n    :name (n / name\n             :op1 \"Nasr\"))", "(ii / image\n    :mod (p3 / product\n             :name (n2 / name\n                       :op1 \"Street\"\n                       :op2 \"View\")))"], "smus": ["Spotted last autumn.", "Last autumn, a Google Street View spotted driving.", "A driving around was spotted last autumn.", "Google Street View is driving around.", "last autumn", "So I followed.", "So, followed to get a selfie.", "The car decided it was time, so followed to get a selfie.", "Followed to get a selfie.", "I followed to get a selfie.", "and got out.", "got out and took a snap in Mississauga.", "Got out and took a snap, senseing the moment.", "With Bitcoin sensing the moment, he got out and there was a snap in Mississauga.", "Sensingly, the out got out and there was a snap in Mississauga.", "and the Street View image.", "Nasr's Picture and Street View image", "Nasr's Picture", "Nasr", "Street View image"]}, {"instance_id": "realsumm-44", "summary": "<t> Rory McIlroy bidding to win McIlroy first Masters title this week at Augusta . </t> <t> The Northern Irishman finished tied for eighth place last year in Irishman best finish in Georgia . </t> <t> McIlroy looking for third straight major victory after winning The Open and USPGA Championship last year . </t> <t> One Direction star Niall Horan caddied for McIlroy in Wednesday 's Par-3 Contest . </t>", "summary_trees": ["# ::snt  Rory McIlroy bidding to win McIlroy first Masters title this week at Augusta . \n(b / bid-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Rory\"\n                  :op2 \"McIlroy\"))\n      :ARG1 (w / win-01\n            :ARG0 p\n            :ARG1 (t / title\n                  :mod (g / game\n                        :name (n2 / name\n                              :op1 \"Masters\"))\n                  :ord (o / ordinal-entity\n                        :value 1))\n            :time (w2 / week\n                  :mod (t2 / this))\n            :location (f / facility\n                  :name (n3 / name\n                        :op1 \"Augusta\"))))", "# ::snt  The Northern Irishman finished tied for eighth place last year in Irishman best finish in Georgia . \n(f / finish-07\n      :ARG0 (p / person\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"Northern\"\n                        :op2 \"Ireland\")))\n      :ARG2 (t / tie-01\n            :ARG1 p\n            :ARG3 (p2 / place\n                  :ord (o / ordinal-entity\n                        :value 8)))\n      :time (y / year\n            :mod (l / last))\n      :subevent-of (f2 / finish-07\n            :ARG0 p\n            :location (c2 / country\n                  :name (n2 / name\n                        :op1 \"Georgia\"))\n            :ARG1-of (h / have-degree-91\n                  :ARG2 (g / good-03\n                        :ARG1 f2)\n                  :ARG3 (m / most))))", "# ::snt  McIlroy looking for third straight major victory after winning The Open and USPGA Championship last year . \n(l / look-04\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"McIlroy\"))\n      :ARG1 (w / win-01\n            :ARG0 p\n            :mod (m / major)\n            :ord (o / ordinal-entity\n                  :value 3\n                  :range (s / straight)))\n      :time (a / after\n            :op1 (w2 / win-01\n                  :ARG0 p\n                  :ARG2 (a2 / and\n                        :op1 (e / event\n                              :name (n2 / name\n                                    :op1 \"The\"\n                                    :op2 \"Open\"))\n                        :op2 (e2 / event\n                              :name (n3 / name\n                                    :op1 \"USPGA\"\n                                    :op2 \"Championship\")))\n                  :time (y / year\n                        :mod (l2 / last)))))", "# ::snt  One Direction star Niall Horan caddied for McIlroy in Wednesday 's Par-3 Contest . \n(c / caddie-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Niall\"\n                  :op2 \"Horan\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (o / organization\n                        :name (n2 / name\n                              :op1 \"One\"\n                              :op2 \"Direction\"))\n                  :ARG2 (s / star)))\n      :ARG1 (p2 / person\n            :name (n3 / name\n                  :op1 \"McIlroy\"))\n      :subevent-of (c2 / contest-02\n            :name (n4 / name\n                  :op1 \"Par-3\")\n            :time (d / date-entity\n                  :weekday (w / wednesday))))"], "tree": ["(b / bid-01\n   :ARG1 (w / win-01\n            :ARG1 (t / title\n                     :mod (g / game\n                             :name (n2 / name\n                                       :op1 \"Masters\")))))", "(b / bid-01\n   :ARG1 (w / win-01\n            :time (w2 / week\n                      :mod (t2 / this))))", "(b / bid-01\n   :ARG1 (w / win-01\n            :location (f / facility\n                         :name (n3 / name\n                                   :op1 \"Augusta\"))))", "(b / bid-01\n   :ARG1 (w / win-01\n            :ARG1 (t / title\n                     :ord (o / ordinal-entity\n                             :value 1))))", "(t / title\n   :ord (o / ordinal-entity\n           :value 1))", "(f / finish-07\n   :ARG2 (t / tie-01\n            :ARG3 (p2 / place\n                      :ord (o / ordinal-entity\n                              :value 8))))", "(f / finish-07\n   :ARG0 (p / person\n            :mod (c / country\n                    :name (n / name\n                             :op1 \"Northern\"\n                             :op2 \"Ireland\")))\n   :time (y / year\n            :mod (l / last)))", "(f / finish-07\n   :ARG2 (t / tie-01\n            :ARG3 (p2 / place\n                      :ord (o / ordinal-entity\n                              :value 8)))\n   :time (y / year\n            :mod (l / last)))", "(f / finish-07\n   :ARG0 (p / person\n            :mod (c / country\n                    :name (n / name\n                             :op1 \"Northern\"\n                             :op2 \"Ireland\")))\n   :ARG2 (t / tie-01\n            :ARG1 p)\n   :time (y / year\n            :mod (l / last)))", "(f / finish-07\n   :ARG0 (p / person\n            :mod (c / country\n                    :name (n / name\n                             :op1 \"Northern\"\n                             :op2 \"Ireland\")))\n   :ARG2 (t / tie-01\n            :ARG3 (p2 / place\n                      :ord (o / ordinal-entity\n                              :value 8)))\n   :time (y / year\n            :mod (l / last)))", "(l / look-04\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"McIlroy\"))\n   :ARG1 (w / win-01\n            :mod (m / major)))", "(l / look-04\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"McIlroy\"))\n   :ARG1 (w / win-01\n            :ord (o / ordinal-entity\n                    :value 3))\n   :time (a / after\n            :op1 (w2 / win-01\n                     :time (y / year\n                              :mod (l2 / last)))))", "(l / look-04\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"McIlroy\"))\n   :ARG1 (w / win-01\n            :ord (o / ordinal-entity\n                    :range (s / straight)))\n   :time (a / after\n            :op1 (w2 / win-01\n                     :ARG2 (e / event\n                              :name (n2 / name\n                                        :op1 \"The\"\n                                        :op2 \"Open\")))))", "(a / after\n   :op1 (w2 / win-01\n            :time (y / year\n                     :mod (l2 / last))))", "(w2 / win-01\n    :ARG2 (e2 / event\n              :name (n3 / name\n                        :op1 \"USPGA\"\n                        :op2 \"Championship\"))\n    :time (y / year\n             :mod (l2 / last)))", "(c / caddie-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Niall\"\n                     :op2 \"Horan\")))", "(c / caddie-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (s / star))))", "(c / caddie-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Niall\"\n                     :op2 \"Horan\"))\n   :ARG1 (p2 / person\n             :name (n3 / name\n                       :op1 \"McIlroy\")))", "(c / caddie-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Niall\"\n                     :op2 \"Horan\"))\n   :subevent (c2 / contest-02\n                 :name (n4 / name\n                           :op1 \"Par-3\")))", "(c / caddie-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Niall\"\n                     :op2 \"Horan\"))\n   :subevent (c2 / contest-02\n                 :time (d / date-entity\n                          :weekday (w / wednesday))))"], "smus": ["bid to win the Masters title", "bid to win this week", "bid to win at Augusta", "bid to win the title", "First title.", "The finish was tied for 8th place.", "The Northern Irish finished last year.", "The finish of last year was tied for eighth place.", "The Northern Irish finished tied last year.", "The Northern Irish finished last year tied for 8th place.", "McIlroy is looking for a major victory.", "McIlroy is looking for a third victory after winning last year.", "After winning the Open, McIlroy is looking for his third straight victory.", "After winning last year.", "Winning the USPGA Championship last year.", "Niall Horan caddied.", "The star caddied.", "Niall Horan caddied for McIlroy.", "Niall Horan caddied in the Par-3 Contest.", "Niall Horan caddied in the Wednesday contest."]}, {"instance_id": "realsumm-45", "summary": "<t> Danny Higginbotham covers Higginbotham time under Roy Keane in Higginbotham new book . </t> <t> Higginbotham played for Keane 's Sunderland during the 2007 - 08 season . </t> <t> Keane told Higginbotham players ' basically you 're s * * * ' before a game with Aston Villa . </t> <t> Higginbotham also told one player Higginbotham was ' not f * * * * * * good enough ' to play for the club . </t>", "summary_trees": ["# ::snt  Danny Higginbotham covers Higginbotham time under Roy Keane in Higginbotham new book . \n(c / cover-03\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Danny\"\n                  :op2 \"Higginbotham\"))\n      :ARG1 (t / time\n            :poss (p2 / person\n                  :name (n2 / name\n                        :op1 \"Higginbotham\"))\n            :prep-under (p3 / person\n                  :name (n3 / name\n                        :op1 \"Roy\"\n                        :op2 \"Keane\")))\n      :medium (b / book\n            :ARG1-of (n4 / new-01)))", "# ::snt  Higginbotham played for Keane 's Sunderland during the 2007 - 08 season . \n(p / play-01\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Higginbotham\"))\n      :ARG2 (t / team\n            :name (n2 / name\n                  :op1 \"Sunderland\")\n            :ARG1-of (h / have-org-role-91\n                  :ARG0 (p3 / person\n                        :name (n3 / name\n                              :op1 \"Keane\"))))\n      :time (d / date-entity\n            :year 2007\n            :year2 2008\n            :season (s / season)))", "# ::snt  Keane told Higginbotham players ' basically you 're s * * * ' before a game with Aston Villa . \n(t / tell-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Keane\"))\n      :ARG1 (s / shit\n            :domain (p2 / person\n                  :ARG0-of (p3 / play-01)\n                  :part-of (t2 / team\n                        :name (n2 / name\n                              :op1 \"Higginbotham\")))\n            :mod (b / basic))\n      :ARG2 p2\n      :time (b2 / before\n            :op1 (g / game\n                  :mod (t3 / team\n                        :name (n3 / name\n                              :op1 \"Aston\"\n                              :op2 \"Villa\")))))", "# ::snt  Higginbotham also told one player Higginbotham was ' not f * * * * * * good enough ' to play for the club . \n(t / tell-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Higginbotham\"))\n      :ARG1 (h / have-degree-91\n            :polarity -\n            :ARG1 p\n            :ARG2 (g / good-03\n                  :ARG1 p)\n            :ARG3 (e / enough)\n            :ARG6 (p2 / play-01\n                  :ARG0 p\n                  :ARG3 (c / club)))\n      :ARG2 (p3 / person\n            :quant 1\n            :ARG0-of (p4 / play-01))\n      :mod (a / also))"], "tree": ["(c / cover-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Danny\"\n                     :op2 \"Higginbotham\")))", "(c / cover-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Danny\"\n                     :op2 \"Higginbotham\"))\n   :ARG1 (t / time\n            :poss (p2 / person\n                      :name (n2 / name\n                                :op1 \"Higginbotham\"))))", "(c / cover-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Danny\"\n                     :op2 \"Higginbotham\"))\n   :ARG1 (t / time\n            :prep-under (p3 / person\n                            :name (n3 / name\n                                      :op1 \"Roy\"\n                                      :op2 \"Keane\"))))", "(c / cover-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Danny\"\n                     :op2 \"Higginbotham\"))\n   :medium (b / book\n              :ARG1 (n4 / new-01)))", "(c / cover-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Danny\"\n                     :op2 \"Higginbotham\"))\n   :ARG1 (t / time\n            :prep-under (p3 / person\n                            :name (n3 / name\n                                      :op1 \"Roy\"\n                                      :op2 \"Keane\")))\n   :medium (b / book\n              :ARG1 (n4 / new-01)))", "(p / play-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Higginbotham\")))", "(p / play-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Higginbotham\"))\n   :time (d / date-entity\n            :year 2007))", "(p / play-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Higginbotham\"))\n   :time (d / date-entity\n            :season (s / season)))", "(p / play-01\n   :ARG2 (t / team\n            :name (n2 / name\n                      :op1 \"Sunderland\"))\n   :time (d / date-entity\n            :season (s / season)))", "(p / play-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Higginbotham\"))\n   :ARG2 (t / team\n            :name (n2 / name\n                      :op1 \"Sunderland\"))\n   :time (d / date-entity\n            :season (s / season)))", "(t / tell-01\n   :time (b2 / before\n             :op1 (g / game\n                     :mod (t3 / team\n                              :name (n3 / name\n                                        :op1 \"Aston\"\n                                        :op2 \"Villa\")))))", "(t / tell-01\n   :ARG1 (s / shit\n            :domain (p2 / person\n                        :ARG0 (p3 / play-01)))\n   :time (b2 / before\n             :op1 (g / game\n                     :mod (t3 / team\n                              :name (n3 / name\n                                        :op1 \"Aston\"\n                                        :op2 \"Villa\")))))", "(t / tell-01\n   :ARG1 (s / shit\n            :domain (p2 / person\n                        :part (t2 / team\n                                  :name (n2 / name\n                                            :op1 \"Higginbotham\"))))\n   :time (b2 / before\n             :op1 (g / game\n                     :mod (t3 / team\n                              :name (n3 / name\n                                        :op1 \"Aston\"\n                                        :op2 \"Villa\")))))", "(t / tell-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Keane\"))\n   :ARG1 (s / shit\n            :domain (p2 / person\n                        :ARG0 (p3 / play-01)))\n   :time (b2 / before\n             :op1 (g / game\n                     :mod (t3 / team\n                              :name (n3 / name\n                                        :op1 \"Aston\"\n                                        :op2 \"Villa\")))))", "(b2 / before\n    :op1 (g / game\n            :mod (t3 / team\n                     :name (n3 / name\n                               :op1 \"Aston\"\n                               :op2 \"Villa\"))))", "(t / tell-01\n   :ARG2 (p3 / person\n             :ARG0 (p4 / play-01)))", "(t / tell-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Higginbotham\"))\n   :ARG2 (p3 / person\n             :quant 1))", "(t / tell-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Higginbotham\"))\n   :ARG1 (h / have-degree-91\n            :polarity -)\n   :ARG2 (p3 / person\n             :quant 1))", "(t / tell-01\n   :ARG1 (h / have-degree-91\n            :ARG1 (p / person :name (n / name :op1 \"Higginbotham\")))\n   :ARG2 (p3 / person\n             :quant 1)\n   :mod (a / also))", "(t / tell-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Higginbotham\"))\n   :ARG1 (h / have-degree-91\n            :polarity -)\n   :ARG2 (p3 / person\n             :quant 1)\n   :mod (a / also))"], "smus": ["Danny Higginbotham covers.", "Danny Higginbotham covers Higginbotham's time.", "Danny Higginbotham covers time under Roy Keane.", "Danny Higginbotham covers in the new book.", "In the new book, Danny Higginbotham covers the time under Roy Keane.", "Higginbotham played.", "Higginbotham played in 2007.", "Higginbotham played in the season.", "Played for Sunderland in the season.", "Higginbotham played for Sunderland in the season.", "told before the Aston Villa game.", "The players were told to be shit before the Aston Villa game.", "Before the Aston Villa game, Higginbotham were told they were shit.", "Before the Aston Villa game, Keane told the players were shit.", "Before the Aston Villa game.", "The player was told.", "Higginbotham told one person.", "Higginbotham told one person that it was not.", "Higginbotham was also told to one.", "Higginbotham also told one person that it was not."]}, {"instance_id": "realsumm-46", "summary": "<t> Four - poster bed dumped in a hotel car park and sold at auction for \u00a3 2,200 . </t> <t> Owner suspected Owner had historic value and experts have been investigating . </t> <t> Historian now claims DNA from the timber proves Historian belonged to Henry VII . </t> <t> Ornate bed , now on display , was made for King and wife Elizabeth of York . </t>", "summary_trees": ["# ::snt  Four - poster bed dumped in a hotel car park and sold at auction for \u00a3 2,200 . \n(a / and\n      :op1 (d / dump-01\n            :ARG1 (b / bed\n                  :mod (p / poster\n                        :quant 4))\n            :location (p2 / park\n                  :mod (c / car)\n                  :mod (h / hotel)))\n      :op2 (s / sell-01\n            :ARG1 b\n            :ARG3 (m / monetary-quantity\n                  :quant 2100\n                  :unit (p3 / pound))\n            :time (a2 / auction-off-01)))", "# ::snt  Owner suspected Owner had historic value and experts have been investigating . \n(a / and\n      :op1 (s / suspect-01\n            :ARG0 (p / person\n                  :ARG0-of (o / own-01\n                        :ARG1 (p2 / person)))\n            :ARG1 (v / value-01\n                  :ARG1 p2\n                  :mod (h / history)))\n      :op2 (ii / investigate-01\n            :ARG0 (p3 / person\n                  :ARG1-of (e / expert-01))))", "# ::snt  Historian now claims DNA from the timber proves Historian belonged to Henry VII . \n(c / claim-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (h2 / historian)))\n      :ARG1 (p2 / prove-01\n            :ARG0 (n / nucleic-acid\n                  :name (n2 / name\n                        :op1 \"DNA\")\n                  :source (t / timber))\n            :ARG1 (b / belong-01\n                  :ARG0 p\n                  :ARG1 (p3 / person\n                        :name (n3 / name\n                              :op1 \"Henry\"\n                              :op2 \"VII\"))))\n      :time (n4 / now))", "# ::snt  Ornate bed , now on display , was made for King and wife Elizabeth of York . \n(m / make-01\n      :ARG1 (b / bed\n            :mod (o / ornate)\n            :ARG1-of (d / display-01\n                  :time (n / now)))\n      :ARG3 (p / person\n            :name (n2 / name\n                  :op1 \"Elizabeth\"\n                  :op2 \"of\"\n                  :op3 \"York\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (k / king))\n            :ARG0-of (h2 / have-rel-role-91\n                  :ARG2 (w / wife))))"], "tree": ["(a / and\n   :op2 (s / sell-01\n           :time (a2 / auction-off-01)))", "(a / and\n   :op1 (d / dump-01\n           :ARG1 (b / bed\n                    :mod (p / poster\n                            :quant 4)))\n   :op2 (s / sell-01\n           :ARG1 b))", "(a / and\n   :op1 (d / dump-01\n           :ARG1 (b / bed\n                    :mod (p / poster\n                            :quant 4)))\n   :op2 (s / sell-01\n           :time (a2 / auction-off-01)))", "(a / and\n   :op1 (d / dump-01\n           :location (p2 / park\n                         :mod (c / car)))\n   :op2 (s / sell-01\n           :time (a2 / auction-off-01)))", "(a / and\n   :op1 (d / dump-01\n           :location (p2 / park\n                         :mod (h / hotel)))\n   :op2 (s / sell-01\n           :time (a2 / auction-off-01)))", "(a / and\n   :op1 (s / suspect-01\n           :ARG1 (v / value-01\n                    :mod (h / history))))", "(a / and\n   :op2 (ii / investigate-01\n            :ARG0 (p3 / person\n                      :ARG1 (e / expert-01))))", "(a / and\n   :op1 (s / suspect-01\n           :ARG0 (p / person\n                    :ARG0 (o / own-01\n                             :ARG1 (p2 / person))))\n   :op2 (ii / investigate-01\n            :ARG0 (p3 / person\n                      :ARG1 (e / expert-01))))", "(a / and\n   :op1 (s / suspect-01\n           :ARG1 (v / value-01\n                    :mod (h / history)))\n   :op2 (ii / investigate-01\n            :ARG0 (p3 / person\n                      :ARG1 (e / expert-01))))", "(ii / investigate-01\n    :ARG0 (p3 / person\n              :ARG1 (e / expert-01)))", "(c / claim-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (h2 / historian))))", "(c / claim-01\n   :ARG1 (p2 / prove-01\n             :ARG0 (n / nucleic-acid\n                      :name (n2 / name\n                                :op1 \"DNA\"))))", "(c / claim-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (h2 / historian)))\n   :ARG1 (p2 / prove-01\n             :ARG0 (n / nucleic-acid\n                      :name (n2 / name\n                                :op1 \"DNA\"))))", "(c / claim-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (h2 / historian)))\n   :time (n4 / now))", "(c / claim-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (h2 / historian)))\n   :ARG1 (p2 / prove-01\n             :ARG0 (n / nucleic-acid\n                      :name (n2 / name\n                                :op1 \"DNA\")))\n   :time (n4 / now))", "(m / make-01\n   :ARG1 (b / bed\n            :mod (o / ornate)))", "(m / make-01\n   :ARG3 (p / person\n            :name (n2 / name\n                      :op1 \"Elizabeth\"\n                      :op2 \"of\"\n                      :op3 \"York\")))", "(m / make-01\n   :ARG1 (b / bed\n            :mod (o / ornate))\n   :ARG3 (p / person\n            :name (n2 / name\n                      :op1 \"Elizabeth\"\n                      :op2 \"of\"\n                      :op3 \"York\")))", "(m / make-01\n   :ARG1 (b / bed\n            :mod (o / ornate))\n   :ARG3 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (k / king))))", "(m / make-01\n   :ARG1 (b / bed\n            :ARG1 (d / display-01\n                     :time (n / now)))\n   :ARG3 (p / person\n            :name (n2 / name\n                      :op1 \"Elizabeth\"\n                      :op2 \"of\"\n                      :op3 \"York\")))"], "smus": ["and sold at the auction.", "Dumped 4 poster bed and sold.", "Dumped 4 poster bed and sold at auction.", "Dumped in car park and sold at auction.", "Dumped in hotel park and sold at auction.", "And suspected of historical value.", "and the experts are investigating.", "The owners suspected and experts were investigating.", "The historical value was suspected and experts were investigating.", "Experts are investigating.", "The historian claims.", "claims DNA proves.", "The historian claims DNA proves it.", "Now the historian claims.", "Now the historian claims DNA proves it.", "Made into an ornate bed.", "Made for Elizabeth of York.", "An ornate bed was made for Elizabeth of York.", "An ornate bed is made for the King.", "The bed for now's display was made for Elizabeth of York."]}, {"instance_id": "realsumm-47", "summary": "<t> Attorney : Robert Bates assumed the gun was a Taser because Bates saw a laser sight on gun . </t> <t> Harris family lawyers say there are stark differences between the gun and Taser used . </t> <t> In 2009 , an officer in California also said officer mistakenly used officer gun instead of a Taser . </t>", "summary_trees": ["# ::snt  Attorney : Robert Bates assumed the gun was a Taser because Bates saw a laser sight on gun . \n(a / assume-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Robert\"\n                  :op2 \"Bates\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (a2 / attorney)))\n      :ARG1 (t / taser\n            :domain (g / gun))\n      :ARG1-of (c / cause-01\n            :ARG0 (s / see-01\n                  :ARG0 p\n                  :ARG1 (s2 / sight\n                        :mod (l / laser)\n                        :location g))))", "# ::snt  Harris family lawyers say there are stark differences between the gun and Taser used . \n(s / say-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (f / family\n                        :name (n / name\n                              :op1 \"Harris\"))\n                  :ARG2 (l / lawyer)))\n      :ARG1 (d / differ-02\n            :ARG1 (g / gun)\n            :ARG2 (t / taser\n                  :ARG1-of (u / use-01))\n            :mod (s2 / stark)))", "# ::snt  In 2009 , an officer in California also said officer mistakenly used officer gun instead of a Taser . \n(s / say-01\n      :ARG0 (o / officer\n            :location (s2 / state\n                  :name (n / name\n                        :op1 \"California\")))\n      :ARG1 (u / use-01\n            :ARG0 (o2 / officer)\n            :ARG1 (g / gun\n                  :mod (o3 / officer)\n                  :ARG1-of (ii / instead-of-91\n                        :ARG2 (t / taser)))\n            :ARG1-of (m / mistake-01\n                  :ARG0 o2))\n      :mod (a / also)\n      :time (d / date-entity\n            :year 2009))"], "tree": ["(a / assume-02\n   :ARG1 (t / taser\n            :domain (g / gun)))", "(a / assume-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Robert\"\n                     :op2 \"Bates\"))\n   :ARG1 (t / taser\n            :domain (g / gun)))", "(a / assume-02\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (a2 / attorney)))\n   :ARG1 (t / taser\n            :domain (g / gun)))", "(c / cause-01\n   :ARG0 (s / see-01\n            :ARG0 (p / person :name (n / name :op1 \"Robert\" :op2 \"Bates\")))))", "(c / cause-01\n   :ARG0 (s / see-01\n            :ARG1 (s2 / sight\n                      :mod (l / laser))))", "(s / say-01\n   :ARG1 (d / differ-02\n            :mod (s2 / stark)))", "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (l / lawyer)))\n   :ARG1 (d / differ-02\n            :ARG1 (g / gun)))", "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (l / lawyer)))\n   :ARG1 (d / differ-02\n            :mod (s2 / stark)))", "(d / differ-02\n   :ARG1 (g / gun)\n   :ARG2 (t / taser\n            :ARG1 (u / use-01)))", "(d / differ-02\n   :ARG1 (g / gun)\n   :ARG2 (t / taser\n            :ARG1 (u / use-01))\n   :mod (s2 / stark))", "(s / say-01\n   :ARG1 (u / use-01\n            :ARG1 (g / gun\n                     :ARG1 (ii / instead-of-91\n                               :ARG2 (t / taser))))\n   :mod (a / also))", "(s / say-01\n   :ARG1 (u / use-01\n            :ARG1 (g / gun\n                     :ARG1 (ii / instead-of-91\n                               :ARG2 (t / taser))))\n   :time (d / date-entity\n            :year 2009))", "(s / say-01\n   :ARG0 (o / officer\n            :location (s2 / state\n                          :name (n / name\n                                   :op1 \"California\")))\n   :ARG1 (u / use-01\n            :ARG1 (g / gun\n                     :ARG1 (ii / instead-of-91\n                               :ARG2 (t / taser))))\n   :mod (a / also))", "(s / say-01\n   :ARG0 (o / officer\n            :location (s2 / state\n                          :name (n / name\n                                   :op1 \"California\")))\n   :ARG1 (u / use-01\n            :ARG1 (g / gun\n                     :ARG1 (ii / instead-of-91\n                               :ARG2 (t / taser))))\n   :time (d / date-entity\n            :year 2009))", "(s / say-01\n   :ARG1 (u / use-01\n            :ARG1 (g / gun\n                     :ARG1 (ii / instead-of-91\n                               :ARG2 (t / taser))))\n   :mod (a / also)\n   :time (d / date-entity\n            :year 2009))"], "smus": ["assumed the gun was a Taser.", "Robert Bates assumed the gun was a taser.", "The Attorney assumed the gun was a taser.", "Because Robert Bates saw.", "Because the laser sight was seen.", "There are stark differences, they say.", "Lawyers say there are differences in gun.", "Lawyers say there are stark differences.", "There are differences between a gun and the Taser used.", "There are stark differences between a gun and the Taser used.", "Also said that the gun was used instead of a Taser.", "In 2009, it was said that the gun was used instead of a Taser.", "The California officer also said the gun was used instead of a taser.", "In 2009, an officer in California said he used a gun instead of a Taser.", "Also in 2009, it was said that the gun was used instead of a Taser."]}, {"instance_id": "realsumm-48", "summary": "<t> Singer arrived at artists ' entrance to gain entry to Drake 's gig . </t> <t> Security told Drake area was at full capacity and denied admission . </t> <t> A row erupted and a Coachella staffer tried to get Bieber into the gig . </t> <t> But festival security then intervened and put singer in chokehold and removed staffer from the area . </t>", "summary_trees": ["# ::snt  Singer arrived at artists ' entrance to gain entry to Drake 's gig . \n(a / arrive-01\n      :ARG1 (p / person\n            :ARG0-of (s / sing-01))\n      :ARG4 (e / entrance\n            :poss (a2 / artist))\n      :purpose (g / gain-02\n            :ARG0 p\n            :ARG1 (e2 / enter-01\n                  :ARG0 p\n                  :ARG1 (g2 / gig\n                        :poss (p2 / person\n                              :name (n / name\n                                    :op1 \"Drake\"))))))", "# ::snt  Security told Drake area was at full capacity and denied admission . \n(a / and\n      :op1 (t / tell-01\n            :ARG0 (s / security)\n            :ARG1 (c / capacity\n                  :ARG1-of (f / full-09)\n                  :domain (a2 / area\n                        :poss (p / person\n                              :name (n / name\n                                    :op1 \"Drake\")))))\n      :op2 (d / deny-01\n            :ARG0 s\n            :ARG1 (a3 / admit-02\n                  :ARG1 p)))", "# ::snt  A row erupted and a Coachella staffer tried to get Bieber into the gig . \n(a / and\n      :op1 (e / erupt-01\n            :ARG1 (r / row))\n      :op2 (t / try-01\n            :ARG0 (p / person\n                  :ARG0-of (h / have-org-role-91\n                        :ARG1 (o / organization\n                              :name (n / name\n                                    :op1 \"Coachella\"))\n                        :ARG2 (s / staffer)))\n            :ARG1 (g / get-05\n                  :ARG0 p\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Bieber\"))\n                  :ARG2 (g2 / gig))))", "# ::snt  But festival security then intervened and put singer in chokehold and removed staffer from the area . \n(c / contrast-01\n      :ARG2 (a / and\n            :op1 (ii / intervene-01\n                  :ARG0 (s / security\n                        :mod (f / festival))\n                  :time (t / then))\n            :op2 (p / put-01\n                  :ARG0 s\n                  :ARG1 (p2 / person\n                        :ARG0-of (s2 / sing-01))\n                  :ARG2 (c2 / chokehold))\n            :op3 (r / remove-01\n                  :ARG0 s\n                  :ARG1 (p3 / person\n                        :ARG2-of (s3 / staff-01))\n                  :ARG2 (a2 / area))))"], "tree": ["(a / arrive-01\n   :ARG1 (p / person\n            :ARG0 (s / sing-01)))", "(a / arrive-01\n   :purpose (g / gain-02\n               :ARG1 (e2 / enter-01\n                         :ARG0 (p / person))))", "(a / arrive-01\n   :purpose (g / gain-02\n               :ARG1 (e2 / enter-01\n                         :ARG1 (g2 / gig\n                                   :poss (p2 / person\n                                             :name (n / name\n                                                      :op1 \"Drake\"))))))", "(a / arrive-01\n   :ARG1 (p / person\n            :ARG0 (s / sing-01))\n   :ARG4 (e / entrance\n            :poss (a2 / artist)))", "(a / arrive-01\n   :ARG1 (p / person\n            :ARG0 (s / sing-01))\n   :purpose (g / gain-02\n               :ARG1 (e2 / enter-01\n                         :ARG0 p)))", "(a / and\n   :op1 (t / tell-01\n           :ARG0 (s / security))\n   :op2 (d / deny-01\n           :ARG0 s))", "(a / and\n   :op1 (t / tell-01\n           :ARG0 (s / security))\n   :op2 (d / deny-01\n           :ARG1 (a3 / admit-02\n                     :ARG1 (p / person\n                              :name (n / name\n                                       :op1 \"Drake\")))))", "(a / and\n   :op1 (t / tell-01\n           :ARG1 (c / capacity\n                    :ARG1 (f / full-09)))\n   :op2 (d / deny-01\n           :ARG1 (a3 / admit-02\n                     :ARG1 (p / person\n                              :name (n / name\n                                       :op1 \"Drake\")))))", "(t / tell-01\n   :ARG1 (c / capacity\n            :ARG1 (f / full-09)))", "(d / deny-01\n   :ARG1 (a3 / admit-02\n             :ARG1 (p / person :name (n / name :op1 \"Drake\"))))", "(a / and\n   :op1 (e / erupt-01\n           :ARG1 (r / row)))", "(a / and\n   :op1 (e / erupt-01\n           :ARG1 (r / row))\n   :op2 (t / try-01\n           :ARG0 (p / person\n                    :ARG0 (h / have-org-role-91\n                             :ARG1 (o / organization\n                                      :name (n / name\n                                               :op1 \"Coachella\"))))))", "(a / and\n   :op1 (e / erupt-01\n           :ARG1 (r / row))\n   :op2 (t / try-01\n           :ARG0 (p / person\n                    :ARG0 (h / have-org-role-91\n                             :ARG2 (s / staffer)))))", "(t / try-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (s / staffer))))", "(t / try-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (s / staffer)))\n   :ARG1 (g / get-05\n            :ARG1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Bieber\"))))", "(c / contrast-01\n   :ARG2 (ii / intervene-01\n             :ARG0 (s / security\n                      :mod (f / festival))))", "(a / and\n   :op1 (ii / intervene-01\n            :ARG0 (s / security\n                     :mod (f / festival)))\n   :op3 (r / remove-01\n           :ARG1 (p3 / person\n                     :ARG2 (s3 / staff-01))))", "(a / and\n   :op1 (ii / intervene-01\n            :time (t / then))\n   :op3 (r / remove-01\n           :ARG1 (p3 / person\n                     :ARG2 (s3 / staff-01))))", "(ii / intervene-01\n    :ARG0 (s / security\n             :mod (f / festival)))", "(r / remove-01\n   :ARG1 (p3 / person\n             :ARG2 (s3 / staff-01))\n   :ARG2 (a2 / area))"], "smus": ["The Singer arrived.", "Arrived to gain entry.", "Arrived to gain entry to Drake's gig.", "The Singer arrived at the artists entrance.", "The Singer arrived to gain entry.", "Security told and denied.", "Security told and denied Drake's admission.", "told full capacity and denied Drake admission.", "Full capacity was told.", "Drake's admission was denied.", "And a row erupted.", "The row erupted and Coachella tried.", "The row erupted and a staffer tried.", "A staffer tried.", "A staffer tried to get Bieber.", "But festival security intervened.", "Festival security intervened and staff were removed.", "Then intervened and staff were removed.", "Festival security intervened.", "Staff were removed from the area."]}, {"instance_id": "realsumm-49", "summary": "<t> Sir Philip Carter died at Carter home on Thursday morning after a short illness . </t> <t> Carter served Everton during three spells after first joining the club in 1977 . </t> <t> Toffees chairman Bill Kenwright pays tribute to a ' great man and leader ' </t>", "summary_trees": ["# ::snt  Sir Philip Carter died at Carter home on Thursday morning after a short illness . \n(d / die-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Sir\"\n                  :op2 \"Philip\"\n                  :op3 \"Carter\"))\n      :location (h / home\n            :poss p)\n      :time (d2 / date-entity\n            :weekday (t / thursday)\n            :dayperiod (m / morning))\n      :time (a / after\n            :op1 (ii / ill-01\n                  :ARG1 p\n                  :ARG1-of (s / short-07))))", "# ::snt  Carter served Everton during three spells after first joining the club in 1977 . \n(s / serve-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Carter\"))\n      :ARG2 (t / team\n            :name (n2 / name\n                  :op1 \"Everton\"))\n      :duration (s2 / spell\n            :quant 3)\n      :time (a / after\n            :op1 (j / join-04\n                  :ARG0 p\n                  :ARG1 t\n                  :time (d / date-entity\n                        :year 1977)\n                  :ord (o / ordinal-entity\n                        :value 1))))", "# ::snt  Toffees chairman Bill Kenwright pays tribute to a ' great man and leader ' \n(p / pay\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Bill\"\n                  :op2 \"Kenwright\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (o / organization\n                        :name (n2 / name\n                              :op1 \"Toffees\"))\n                  :ARG2 (c / chairman)))\n      :ARG1 (a / and\n            :op1 (m / man\n                  :mod (g / great))\n            :op2 (p3 / person\n                  :ARG0-of (l / lead-02))))"], "tree": ["(d / die-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Sir\"\n                     :op2 \"Philip\"\n                     :op3 \"Carter\")))", "(d / die-01\n   :location (h / home\n                :poss (p / person :name (n / name :op1 \"Sir\" :op2 \"Philip\" :op3 \"Carter\"))))", "(d / die-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Sir\"\n                     :op2 \"Philip\"\n                     :op3 \"Carter\"))\n   :time (d2 / date-entity\n             :weekday (t / thursday)))", "(a / after\n   :op1 (ii / ill-01\n            :ARG1 (p / person :name (n / name :op1 \"Sir\" :op2 \"Philip\" :op3 \"Carter\"))))", "(a / after\n   :op1 (ii / ill-01\n            :ARG1 (s / short-07)))", "(s / serve-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Carter\")))", "(s / serve-01\n   :duration (s2 / spell\n                 :quant 3))", "(s / serve-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Carter\"))\n   :ARG2 (t / team\n            :name (n2 / name\n                      :op1 \"Everton\")))", "(s / serve-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Carter\"))\n   :duration (s2 / spell\n                 :quant 3))", "(s / serve-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Carter\"))\n   :ARG2 (t / team\n            :name (n2 / name\n                      :op1 \"Everton\"))\n   :duration (s2 / spell\n                 :quant 3))", "(p / pay\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Bill\"\n                      :op2 \"Kenwright\")))", "(p / pay\n   :ARG0 (p2 / person\n             :ARG0 (h / have-org-role-91\n                      :ARG2 (c / chairman))))", "(p / pay\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Bill\"\n                      :op2 \"Kenwright\"))\n   :ARG1 (m / man\n            :mod (g / great)))", "(p / pay\n   :ARG0 (p2 / person\n             :ARG0 (h / have-org-role-91\n                      :ARG2 (c / chairman)))\n   :ARG1 (m / man\n            :mod (g / great)))", "(a / and\n   :op1 (m / man\n           :mod (g / great))\n   :op2 (p3 / person\n            :ARG0 (l / lead-02)))"], "smus": ["Sir Philip Carter died.", "Sir Philip Carter died at his home.", "Sir Philip Carter died Thursday.", "After Sir Philip Carter was ill.", "After a short illness.", "Carter served.", "served for three spells.", "Carter served for Everton.", "Carter served for three spells.", "Carter served for three spells with Everton.", "Bill Kenwright pays.", "The chairman pays.", "Bill Kenwright pays a great man.", "The chairman pays a great man.", "Great man and leader."]}, {"instance_id": "realsumm-50", "summary": "<t> Border collies Ace and Holly were caught on camera performing a gravity - defying feat together . </t> <t> The two pooches stood up on pooches hind legs while balancing on pooches owner and trainer Dai Aoki . </t> <t> pooches have appeared in a number of videos showing off pooches tricks . </t>", "summary_trees": ["# ::snt  Border collies Ace and Holly were caught on camera performing a gravity - defying feat together . \n(c / catch-03\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Ace\")\n                  :mod (b / border-line))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Holly\")\n                  :mod b))\n      :ARG2 (p3 / perform-01\n            :ARG0 a\n            :ARG1 (f / feat\n                  :mod (d / defy-01\n                        :ARG0 a\n                        :ARG1 (g / gravity)))\n            :manner (t / together))\n      :medium (c2 / camera))", "# ::snt  The two pooches stood up on pooches hind legs while balancing on pooches owner and trainer Dai Aoki . \n(m / multi-sentence\n      :snt1 (s / stand-up-07\n            :ARG1 (p / poocch\n                  :quant 2\n                  :part (l / leg\n                        :mod (h / hind)\n                        :prep-on-of s)))\n      :snt2 (b / balance-01\n            :ARG1 (p2 / poocch\n                  :part l)\n            :prep-on (p3 / person\n                  :name (n / name\n                        :op1 \"Dai\"\n                        :op2 \"Aoki\")\n                  :ARG0-of (o / own-01\n                        :ARG1 (p4 / poocch))\n                  :ARG0-of (t / train-01\n                        :ARG2 p4))))", "# ::snt  pooches have appeared in a number of videos showing off pooches tricks . \n(a / appear-01\n      :ARG1 (p / pooch)\n      :location (v / video\n            :quant (n / number)\n            :ARG0-of (s / show-off-04\n                  :ARG1 (t / trick-01\n                        :ARG0 p))))"], "tree": ["(c / catch-03\n   :ARG2 (p3 / perform-01\n             :ARG1 (f / feat\n                      :mod (d / defy-01\n                              :ARG1 (g / gravity)))))", "(c / catch-03\n   :ARG2 (p3 / perform-01\n             :ARG1 (f / feat\n                      :mod (d / defy-01\n                              :ARG1 (g / gravity))))\n   :medium (c2 / camera))", "(p3 / perform-01\n    :ARG1 (f / feat\n             :mod (d / defy-01\n                     :ARG1 (g / gravity))))", "(p3 / perform-01\n    :ARG1 (f / feat\n             :mod (d / defy-01\n                     :ARG1 (g / gravity)))\n    :manner (t / together))", "(f / feat\n   :mod (d / defy-01\n           :ARG1 (g / gravity)))", "(m / multi-sentence\n   :snt1 (s / stand-up-07\n            :ARG1 (p / poocch\n                     :quant 2)))", "(m / multi-sentence\n   :snt1 (s / stand-up-07\n            :ARG1 (p / poocch\n                     :quant 2))\n   :snt2 (b / balance-01\n            :ARG1 (p2 / poocch\n                      :part (l / leg\n                               :mod (h / hind)))))", "(m / multi-sentence\n   :snt1 (s / stand-up-07\n            :ARG1 (p / poocch\n                     :quant 2))\n   :snt2 (b / balance-01\n            :prep-on (p3 / person\n                         :name (n / name\n                                  :op1 \"Dai\"\n                                  :op2 \"Aoki\"))))", "(m / multi-sentence\n   :snt1 (s / stand-up-07\n            :ARG1 (p / poocch\n                     :part (l / leg\n                              :mod (h / hind))))\n   :snt2 (b / balance-01\n            :prep-on (p3 / person\n                         :name (n / name\n                                  :op1 \"Dai\"\n                                  :op2 \"Aoki\"))))", "(a / appear-01\n   :location (v / video\n                :quant (n / number)))", "(a / appear-01\n   :ARG1 (p / pooch)\n   :location (v / video\n                :quant (n / number)))", "(a / appear-01\n   :ARG1 (p / pooch)\n   :location (v / video\n                :ARG0 (s / show-off-04\n                         :ARG1 (t / trick-01\n                                  :ARG0 p))))", "(v / video\n   :ARG0 (s / show-off-04\n            :ARG1 (t / trick-01\n                     :ARG0 (p / pooch))))", "(v / video\n   :quant (n / number)\n   :ARG0 (s / show-off-04\n            :ARG1 (t / trick-01\n                     :ARG0 (p / pooch))))"], "smus": ["Catch performing a feat of defying gravity.", "Performing a feat of defying gravity was caught on camera.", "performing a feat of defying gravity.", "performing a feat of defying gravity together.", "A feat of defying gravity.", "Two poocchs stood up.", "Two poocchs stood up. The poocchs were balancing on their hind legs.", "Two poocchs stood up. Balancing on Dai Aoki.", "Poocchs stood up on hind legs. Balancing on Dai Aoki.", "A number of videos have appeared.", "The pooch has appeared in a number of videos.", "Poochs appear in videos showing off their tricks.", "Videos showing off pooch tricks.", "There are a number of videos showing off pooch tricks."]}, {"instance_id": "realsumm-51", "summary": "<t> Dayna Dobias , 19 , has created a video in which Dobias dances despite having a disability that makes it difficult for Dobias to walk . </t> <t> Dobias loves TV , film and fashion , and says Dobias \u2019s not happy with how people with disabilities are represented . </t> <t> The teen has created several videos during the past year aimed at changing stereotypes . </t>", "summary_trees": ["# ::snt  Dayna Dobias , 19 , has created a video in which Dobias dances despite having a disability that makes it difficult for Dobias to walk . \n(c / create-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Dayna\"\n                  :op2 \"Dobias\")\n            :age (t / temporal-quantity\n                  :quant 19\n                  :unit (y / year)))\n      :ARG1 (v / video\n            :medium-of (d / dance-01\n                  :ARG0 p\n                  :concession (h / have-03\n                        :ARG0 p\n                        :ARG1 (d2 / disability\n                              :ARG0-of (m / make-02\n                                    :ARG1 (d3 / difficult\n                                          :domain (w / walk-01\n                                                :ARG0 p))))))))", "# ::snt  Dobias loves TV , film and fashion , and says Dobias \u2019s not happy with how people with disabilities are represented . \n(a / and\n      :op1 (l / love-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Dobias\"))\n            :ARG1 (a2 / and\n                  :op1 (t / television)\n                  :op2 (f / film)\n                  :op3 (f2 / fashion)))\n      :op2 (s / say-01\n            :ARG0 p\n            :ARG1 (h / happy-01\n                  :polarity -\n                  :ARG0 (t2 / thing\n                        :ARG2-of (r / represent-01\n                              :ARG1 (p2 / person\n                                    :ARG0-of (h2 / have-03\n                                          :ARG1 (d / disability)))))\n                  :ARG1 p)))", "# ::snt  The teen has created several videos during the past year aimed at changing stereotypes . \n(c / create-01\n      :ARG0 (t / teen)\n      :ARG1 (v / video\n            :ARG0-of (a / aim-02\n                  :ARG1 (c2 / change-01\n                        :ARG1 (s / stereotype-01)))\n            :quant (s2 / several))\n      :time (y / year\n            :mod (p / past)))"], "tree": ["(c / create-01\n   :ARG1 (v / video\n            :medium (d / dance-01\n                       :ARG0 (p / person :name (n / name :op1 \"Dayna\" :op2 \"Dobias\"))))))", "(c / create-01\n   :ARG1 (v / video\n            :medium (d / dance-01\n                       :concession (h / have-03\n                                      :ARG1 (d2 / disability\n                                                :ARG0 (m / make-02\n                                                         :ARG1 (d3 / difficult\n                                                                   :domain (w / walk-01\n                                                                              :ARG0 (p / person :name (n / name :op1 \"Dayna\" :op2 \"Dobias\")))))))))))", "(c / create-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dayna\"\n                     :op2 \"Dobias\"))\n   :ARG1 (v / video\n            :medium (d / dance-01\n                       :concession (h / have-03\n                                      :ARG1 (d2 / disability\n                                                :ARG0 (m / make-02\n                                                         :ARG1 (d3 / difficult\n                                                                   :domain (w / walk-01\n                                                                              :ARG0 p))))))))", "(c / create-01\n   :ARG0 (p / person\n            :age (t / temporal-quantity\n                    :quant 19))\n   :ARG1 (v / video\n            :medium (d / dance-01\n                       :concession (h / have-03\n                                      :ARG1 (d2 / disability\n                                                :ARG0 (m / make-02\n                                                         :ARG1 (d3 / difficult\n                                                                   :domain (w / walk-01\n                                                                              :ARG0 p))))))))", "(p / person\n   :name (n / name\n            :op1 \"Dayna\"\n            :op2 \"Dobias\"))", "(a / and\n   :op1 (l / love-01\n           :ARG1 (t / television))\n   :op2 (s / say-01\n           :ARG0 (p / person\n                    :name (n / name\n                             :op1 \"Dobias\"))))", "(l / love-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dobias\"))\n   :ARG1 (t / television))", "(l / love-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dobias\"))\n   :ARG1 (f2 / fashion))", "(a2 / and\n    :op2 (f / film)\n    :op3 (f2 / fashion))", "(a2 / and\n    :op1 (t / television)\n    :op2 (f / film)\n    :op3 (f2 / fashion))", "(c / create-01\n   :ARG1 (v / video\n            :quant (s2 / several)))", "(c / create-01\n   :ARG0 (t / teen)\n   :ARG1 (v / video\n            :ARG0 (a / aim-02\n                     :ARG1 (c2 / change-01\n                               :ARG1 (s / stereotype-01)))))", "(c / create-01\n   :ARG0 (t / teen)\n   :ARG1 (v / video\n            :quant (s2 / several)))", "(c / create-01\n   :ARG1 (v / video\n            :quant (s2 / several))\n   :time (y / year\n            :mod (p / past)))", "(c / create-01\n   :ARG0 (t / teen)\n   :ARG1 (v / video\n            :ARG0 (a / aim-02\n                     :ARG1 (c2 / change-01\n                               :ARG1 (s / stereotype-01))))\n   :time (y / year\n            :mod (p / past)))"], "smus": ["The video in which Dayna Dobias dances was created.", "The video was created in which Dayna Dobias dances despite her disability which makes it difficult for her to walk.", "Dayna Dobias has created a video in which she dances despite her disability, which makes it difficult for her to walk.", "A 19 year old has created a video in which she dances despite a disability that makes it difficult for her to walk.", "Dayna Dobias", "Loves TV, says Dobias.", "Dobias loves TV.", "Dobias loves fashion.", "Film and fashion", "TV, film and fashion", "Several videos have been created.", "The teen has created videos aimed at changing stereotypes.", "The teen has created several videos.", "Several videos have been created over the past year.", "The teen has created videos in the past year aimed at changing stereotypes."]}, {"instance_id": "realsumm-52", "summary": "<t> Manchester United take on Manchester City on Sunday . </t> <t> Match will begin at 4 pm local time at United 's Old Trafford home . </t> <t> Police have no objections to kick - off being so late in the afternoon . </t> <t> Last late afternoon weekend kick - off in the Manchester derby saw 34 fans arrested at Wembley in 2011 FA Cup semi - final . </t>", "summary_trees": ["# ::snt  Manchester United take on Manchester City on Sunday . \n(t / take-on-09\n      :ARG0 (t2 / team\n            :name (n / name\n                  :op1 \"Manchester\"\n                  :op2 \"United\"))\n      :ARG1 (t3 / team\n            :name (n2 / name\n                  :op1 \"Manchester\"\n                  :op2 \"City\"))\n      :time (d / date-entity\n            :weekday (s / sunday)))", "# ::snt  Match will begin at 4 pm local time at United 's Old Trafford home . \n(b / begin-01\n      :ARG1 (m / match-03)\n      :location (h / home\n            :poss (t / team\n                  :name (n / name\n                        :op1 \"United\"))\n            :mod (s / sports-facility\n                  :name n\n                  :op1 \"Old\"\n                  :op2 \" Trafford\"))\n      :time (d / date-entity\n            :time \"16:00\"\n            :timezone (l / local-02)))", "# ::snt  Police have no objections to kick - off being so late in the afternoon . \n(o / object-01\n      :polarity -\n      :ARG0 (p / police)\n      :ARG1 (k / kick-off-04\n            :time (l / late\n                  :op1 (d / date-entity\n                        :dayperiod (a / afternoon))\n                  :degree (s / so))))", "# ::snt  Last late afternoon weekend kick - off in the Manchester derby saw 34 fans arrested at Wembley in 2011 FA Cup semi - final . \n(s / see-01\n      :ARG0 (k / kick-off-04\n            :ARG1 (d / derby\n                  :mod (c / city\n                        :name (n / name\n                              :op1 \"Manchester\")))\n            :time (w / weekend)\n            :time (d2 / date-entity\n                  :dayperiod (a / afternoon)\n                  :mod (l / late))\n            :mod (l2 / last))\n      :ARG1 (a2 / arrest-01\n            :ARG1 (f / fan\n                  :quant 34)\n            :location (s2 / sports-facility\n                  :name (n2 / name\n                        :op1 \"Wembley\"))\n            :time (f2 / final\n                  :mod (s3 / semi)\n                  :subevent-of (g / game\n                        :name (n3 / name\n                              :op1 \"FA\"\n                              :op2 \"Cup\")\n                        :time (d3 / date-entity\n                              :year 2011)))))"], "tree": ["(t / take-on-09\n   :ARG1 (t3 / team\n             :name (n2 / name\n                       :op1 \"Manchester\"\n                       :op2 \"City\")))", "(t / take-on-09\n   :time (d / date-entity\n            :weekday (s / sunday)))", "(t / take-on-09\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Manchester\"\n                      :op2 \"United\"))\n   :ARG1 (t3 / team\n             :name (n2 / name\n                       :op1 \"Manchester\"\n                       :op2 \"City\")))", "(t / take-on-09\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Manchester\"\n                      :op2 \"United\"))\n   :time (d / date-entity\n            :weekday (s / sunday)))", "(t / take-on-09\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Manchester\"\n                      :op2 \"United\"))\n   :ARG1 (t3 / team\n             :name (n2 / name\n                       :op1 \"Manchester\"\n                       :op2 \"City\"))\n   :time (d / date-entity\n            :weekday (s / sunday)))", "(b / begin-01\n   :location (h / home\n                :mod (s / sports-facility\n                        :op2 \" Trafford\")))", "(b / begin-01\n   :ARG1 (m / match-03)\n   :location (h / home\n                :poss (t / team\n                         :name (n / name\n                                  :op1 \"United\"))))", "(b / begin-01\n   :ARG1 (m / match-03)\n   :location (h / home\n                :mod (s / sports-facility\n                        :name (n / name\n                                 :op1 \"United\"))))", "(b / begin-01\n   :ARG1 (m / match-03)\n   :location (h / home\n                :mod (s / sports-facility\n                        :op2 \" Trafford\")))", "(b / begin-01\n   :ARG1 (m / match-03)\n   :location (h / home\n                :mod (s / sports-facility\n                        :op2 \" Trafford\"))\n   :time (d / date-entity\n            :timezone (l / local-02)))", "(o / object-01\n   :ARG1 (k / kick-off-04\n            :time (l / late\n                     :degree (s / so))))", "(k / kick-off-04\n   :time (l / late\n            :op1 (d / date-entity\n                    :dayperiod (a / afternoon))))", "(k / kick-off-04\n   :time (l / late\n            :degree (s / so)))", "(l / late\n   :op1 (d / date-entity\n           :dayperiod (a / afternoon)))", "(l / late\n   :op1 (d / date-entity\n           :dayperiod (a / afternoon))\n   :degree (s / so))", "(s / see-01\n   :ARG0 (k / kick-off-04\n            :ARG1 (d / derby\n                     :mod (c / city\n                             :name (n / name\n                                      :op1 \"Manchester\"))))\n   :ARG1 (a2 / arrest-01\n             :ARG1 (f / fan\n                      :quant 34)))", "(s / see-01\n   :ARG0 (k / kick-off-04\n            :mod (l2 / last))\n   :ARG1 (a2 / arrest-01\n             :ARG1 (f / fan\n                      :quant 34)))", "(a2 / arrest-01\n    :ARG1 (f / fan\n             :quant 34))", "(a2 / arrest-01\n    :ARG1 (f / fan\n             :quant 34)\n    :time (f2 / final\n              :mod (s3 / semi)))", "(f2 / final\n    :mod (s3 / semi)\n    :subevent (g / game\n                 :name (n3 / name\n                           :op1 \"FA\"\n                           :op2 \"Cup\")))"], "smus": ["Take on Manchester City", "Take on Sunday.", "Manchester United will take on Manchester City.", "Manchester United will take on on Sunday.", "Manchester United will take on Manchester City on Sunday.", "Begin at Trafford home.", "The Match will begin at United's home.", "The Match will begin at United.", "The Match will begin at Trafford.", "The Match will begin at Trafford home at the local time.", "Objection to kick off so late.", "Kick off late in the afternoon.", "Kick off so late.", "late afternoon", "So late in the afternoon.", "The Manchester derby kicked off with 34 fans arrested.", "Last kick off saw 34 fans arrested.", "34 fans were arrested.", "34 fans were arrested in the semi-finals.", "Semi-final in the FA Cup"]}, {"instance_id": "realsumm-53", "summary": "<t> Kamal criticised umpires ' decision to award controversial no - ball against Rohit Sharma in India 's World Cup match with Bangladesh . </t> <t> The Bangladeshi president alleged India had used president influence in the ICC . </t> <t> Governing body asked Bangladeshi to withdraw Bangladeshi statement or apologise . </t> <t> But Kamal confirmed Kamal intention to step down . </t>", "summary_trees": ["# ::snt  Kamal criticised umpires ' decision to award controversial no - ball against Rohit Sharma in India 's World Cup match with Bangladesh . \n(c / criticize-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Kamal\"))\n      :ARG1 (d / decide-01\n            :ARG0 (u / umpire)\n            :ARG1 (a / award-01\n                  :ARG0 u\n                  :ARG1 (b / ball\n                        :mod (c2 / controversy))\n                  :ARG2 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Rohit\"\n                              :op2 \"Sharma\"))\n                  :time (m / match-03\n                        :ARG0 (c3 / country\n                              :name (n3 / name\n                                    :op1 \"India\"))\n                        :ARG1 (c4 / country\n                              :name (n4 / name\n                                    :op1 \"Bangladesh\"))\n                        :subevent-of (g / game\n                              :name (n5 / name\n                                    :op1 \"World\"\n                                    :op2 \"Cup\"))))))", "# ::snt  The Bangladeshi president alleged India had used president influence in the ICC . \n(a / allege-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (c / country\n                        :name (n / name\n                              :op1 \"Bangladesh\"))\n                  :ARG2 (p2 / president)))\n      :ARG1 (u / use-01\n            :ARG0 (c2 / country\n                  :name (n2 / name\n                        :op1 \"India\"))\n            :ARG1 (ii / influence-01\n                  :ARG0 (p3 / president)\n                  :ARG1 (o / organization\n                        :name (n3 / name\n                              :op1 \"ICC\")))))", "# ::snt  Governing body asked Bangladeshi to withdraw Bangladeshi statement or apologise . \n(a / ask-02\n      :ARG0 (b / body\n            :ARG0-of (g / govern-01))\n      :ARG1 (o / or\n            :op1 (w / withdraw-01\n                  :ARG0 (p / person\n                        :mod (c / country\n                              :name (n / name\n                                    :op1 \"Bangladesh\")))\n                  :ARG1 (t / thing\n                        :ARG1-of (s / state-01\n                              :ARG0 p)))\n            :op2 (a2 / apologize-01\n                  :ARG0 p))\n      :ARG2 p)", "# ::snt  But Kamal confirmed Kamal intention to step down . \n(c / contrast-01\n      :ARG2 (c2 / confirm-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Kamal\"))\n            :ARG1 (ii / intend-01\n                  :ARG0 p\n                  :ARG1 (s / step-down-04\n                        :ARG0 p))))"], "tree": ["(c / criticize-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kamal\")))", "(c / criticize-01\n   :ARG1 (d / decide-01\n            :ARG0 (u / umpire)))", "(c / criticize-01\n   :ARG1 (d / decide-01\n            :ARG1 (a / award-01\n                     :ARG1 (b / ball\n                              :mod (c2 / controversy)))))", "(c / criticize-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kamal\"))\n   :ARG1 (d / decide-01\n            :ARG0 (u / umpire)))", "(c / criticize-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kamal\"))\n   :ARG1 (d / decide-01\n            :ARG1 (a / award-01\n                     :ARG1 (b / ball\n                              :mod (c2 / controversy)))))", "(a / allege-01\n   :ARG1 (u / use-01\n            :ARG1 (ii / influence-01\n                      :ARG0 (p3 / president))))", "(a / allege-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (c / country\n                              :name (n / name\n                                       :op1 \"Bangladesh\"))))\n   :ARG1 (u / use-01\n            :ARG1 (ii / influence-01\n                      :ARG0 (p3 / president))))", "(a / allege-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (p2 / president)))\n   :ARG1 (u / use-01\n            :ARG1 (ii / influence-01\n                      :ARG0 (p3 / president))))", "(a / allege-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (p2 / president)))\n   :ARG1 (u / use-01\n            :ARG1 (ii / influence-01\n                      :ARG1 (o / organization\n                               :name (n3 / name\n                                         :op1 \"ICC\")))))", "(h / have-org-role-91\n   :ARG1 (c / country\n            :name (n / name\n                     :op1 \"Bangladesh\"))\n   :ARG2 (p2 / president))", "(a / ask-02\n   :ARG1 (o / or\n            :op1 (w / withdraw-01\n                    :ARG0 (p / person\n                             :mod (c / country\n                                     :name (n / name\n                                              :op1 \"Bangladesh\"))))))", "(a / ask-02\n   :ARG1 (o / or\n            :op2 (a2 / apologize-01\n                     :ARG0 (p / person\n                              :mod (c / country\n                                      :name (n / name\n                                               :op1 \"Bangladesh\"))))))", "(a / ask-02\n   :ARG0 (b / body\n            :ARG0 (g / govern-01))\n   :ARG1 (o / or\n            :op2 (a2 / apologize-01\n                     :ARG0 (p / person\n                              :mod (c / country\n                                      :name (n / name\n                                               :op1 \"Bangladesh\"))))))", "(a / ask-02\n   :ARG0 (b / body\n            :ARG0 (g / govern-01))\n   :ARG1 (o / or\n            :op1 (w / withdraw-01\n                    :ARG1 (t / thing\n                             :ARG1 (s / state-01\n                                      :ARG0 (p / person))))))", "(o / or\n   :op2 (a2 / apologize-01\n            :ARG0 (p / person\n                     :mod (c / country\n                             :name (n / name\n                                      :op1 \"Bangladesh\")))))", "(c / contrast-01\n   :ARG2 (c2 / confirm-01\n             :ARG1 (ii / intend-01\n                       :ARG0 (p / person :name (n / name :op1 \"Kamal\")))))", "(c / contrast-01\n   :ARG2 (c2 / confirm-01\n             :ARG1 (ii / intend-01\n                       :ARG1 (s / step-down-04\n                                :ARG0 (p / person :name (n / name :op1 \"Kamal\"))))))", "(c2 / confirm-01\n    :ARG1 (ii / intend-01\n              :ARG0 (p / person :name (n / name :op1 \"Kamal\"))))", "(c2 / confirm-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Kamal\"))\n    :ARG1 (ii / intend-01\n              :ARG0 p))", "(c2 / confirm-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Kamal\"))\n    :ARG1 (ii / intend-01\n              :ARG1 (s / step-down-04\n                       :ARG0 p)))"], "smus": ["Kamal criticized.", "Criticized the umpires decision.", "Criticized the decision to award the controversial ball.", "Kamal criticized the umpires decision.", "Kamal criticized the decision to award the controversial ball.", "The allegations were that the president's influence was used.", "The Bangladeshi alleged that the president had been used to influence.", "The president alleged that the president's influence was used.", "The president alleged that influence on the ICC was used.", "Bangladesh's president.", "Bangladeshis were asked to withdraw or not.", "asked for an apology from Bangladesh.", "The governing body asked for an apology from Bangladesh.", "The governing body asked that the person's statement be withheld or withdrawn.", "or an apology from Bangladesh.", "But Kamal's intention was confirmed.", "But confirmed the intention of Kamal to step down.", "Kamal's intention was confirmed.", "Kamal confirmed his intention.", "Kamal confirmed his intention to step down."]}, {"instance_id": "realsumm-54", "summary": "<t> Floyd Mayweather and Manny Pacquiao face off in Las Vegas on May 2 . </t> <t> Joe Calzaghe believes Mayweather 's unbeaten record is a burden . </t> <t> Despite that , the Welshman thinks Mayweather will beat Welshman opponent . </t> <t> READ : Ricky Hatton gives Hatton prediction to Jeff Powell ahead of the fight . </t> <t> READ : Floyd Mayweather vs Manny Pacquiao tickets FINALLY go on sale . </t>", "summary_trees": ["# ::snt  Floyd Mayweather and Manny Pacquiao face off in Las Vegas on May 2 . \n(f / face-off-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Floyd\"\n                  :op2 \"Mayweather\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Manny\"\n                  :op2 \"Pacquiao\"))\n      :location (c / city\n            :name (n3 / name\n                  :op1 \"Las\"\n                  :op2 \"Vegas\"))\n      :time (d / date-entity\n            :day 2\n            :month 5))", "# ::snt  Joe Calzaghe believes Mayweather 's unbeaten record is a burden . \n(b / believe-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Joe\"\n                  :op2 \"Calzaghe\"))\n      :ARG1 (b2 / burden-01\n            :ARG2 (r / record\n                  :poss (p2 / person\n                        :name (n2 / name\n                              :op1 \"Mayweather\"))\n                  :ARG1-of (b3 / beat-03\n                        :polarity -))))", "# ::snt  Despite that , the Welshman thinks Mayweather will beat Welshman opponent . \n(t / think-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Walesman\"))\n      :ARG1 (b / beat-03\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Mayweather\"))\n            :ARG1 (p3 / person\n                  :ARG0-of (o / oppose-01\n                        :ARG1 p)))\n      :concession (t2 / that))", "# ::snt  READ : Ricky Hatton gives Hatton prediction to Jeff Powell ahead of the fight . \n(r / read-01\n      :mode imperative\n      :ARG0 (y / you)\n      :ARG1 (p / predict-01\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Ricky\"\n                        :op2 \"Hatton\"))\n            :ARG2 (p3 / person\n                  :name (n2 / name\n                        :op1 \"Jeff\"\n                        :op2 \"Powell\"))\n            :time (a / ahead\n                  :op1 (f / fight-01))))", "# ::snt  READ : Floyd Mayweather vs Manny Pacquiao tickets FINALLY go on sale . \n(r / read-01\n      :mode imperative\n      :ARG0 (y / you)\n      :ARG1 (s / sell-01\n            :ARG1 (t / ticket\n                  :mod (o / oppose-01\n                        :ARG0 (p / person\n                              :name (n / name\n                                    :op1 \"Floyd\"\n                                    :op2 \"Mayweather\"))\n                        :ARG1 (p2 / person\n                              :name (n2 / name\n                                    :op1 \"Manny\"\n                                    :op2 \"Pacquiao\"))))\n            :time (f / final)))"], "tree": ["(f / face-off-02\n   :location (c / city\n                :name (n3 / name\n                          :op1 \"Las\"\n                          :op2 \"Vegas\")))", "(f / face-off-02\n   :time (d / date-entity\n            :day 2))", "(f / face-off-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Floyd\"\n                     :op2 \"Mayweather\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Manny\"\n                       :op2 \"Pacquiao\")))", "(f / face-off-02\n   :location (c / city\n                :name (n3 / name\n                          :op1 \"Las\"\n                          :op2 \"Vegas\"))\n   :time (d / date-entity\n            :day 2))", "(f / face-off-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Floyd\"\n                     :op2 \"Mayweather\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Manny\"\n                       :op2 \"Pacquiao\"))\n   :location (c / city\n                :name (n3 / name\n                          :op1 \"Las\"\n                          :op2 \"Vegas\")))", "(b / believe-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Joe\"\n                     :op2 \"Calzaghe\")))", "(b / believe-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Joe\"\n                     :op2 \"Calzaghe\"))\n   :ARG1 (b2 / burden-01\n             :ARG2 (r / record\n                      :poss (p2 / person\n                                :name (n2 / name\n                                          :op1 \"Mayweather\")))))", "(p / person\n   :name (n / name\n            :op1 \"Joe\"\n            :op2 \"Calzaghe\"))", "(b2 / burden-01\n    :ARG2 (r / record\n             :ARG1 (b3 / beat-03\n                       :polarity -)))", "(r / record\n   :ARG1 (b3 / beat-03\n             :polarity -))", "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Walesman\")))", "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Walesman\"))\n   :ARG1 (b / beat-03\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Mayweather\"))))", "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Walesman\"))\n   :concession (t2 / that))", "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Walesman\"))\n   :ARG1 (b / beat-03\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Mayweather\")))\n   :concession (t2 / that))", "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Walesman\"))\n   :ARG1 (b / beat-03\n            :ARG1 (p3 / person\n                      :ARG0 (o / oppose-01\n                               :ARG1 p)))\n   :concession (t2 / that))", "(r / read-01\n   :ARG1 (p / predict-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Ricky\"\n                               :op2 \"Hatton\"))))", "(r / read-01\n   :ARG1 (p / predict-01\n            :time (a / ahead\n                     :op1 (f / fight-01))))", "(p / predict-01\n   :time (a / ahead\n            :op1 (f / fight-01)))", "(p / predict-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Ricky\"\n                      :op2 \"Hatton\"))\n   :ARG2 (p3 / person\n             :name (n2 / name\n                       :op1 \"Jeff\"\n                       :op2 \"Powell\"))\n   :time (a / ahead\n            :op1 (f / fight-01)))", "(p2 / person\n    :name (n / name\n             :op1 \"Ricky\"\n             :op2 \"Hatton\"))", "(t / ticket\n   :mod (o / oppose-01\n           :ARG0 (p / person\n                    :name (n / name\n                             :op1 \"Floyd\"\n                             :op2 \"Mayweather\"))))", "(t / ticket\n   :mod (o / oppose-01\n           :ARG1 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Manny\"\n                               :op2 \"Pacquiao\"))))", "(o / oppose-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Manny\"\n                       :op2 \"Pacquiao\")))", "(o / oppose-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Floyd\"\n                     :op2 \"Mayweather\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Manny\"\n                       :op2 \"Pacquiao\")))", "(p / person\n   :name (n / name\n            :op1 \"Floyd\"\n            :op2 \"Mayweather\"))"], "smus": ["Face off in Las Vegas.", "Face off on the 2nd.", "Floyd Mayweather and Manny Pacquiao face off.", "On the 2nd, face off in Las Vegas.", "Floyd Mayweather and Manny Pacquiao face off in Las Vegas.", "Joe Calzaghe believes --", "Joe Calzaghe believes Mayweather's record is a burden.", "Joe Calzaghe", "The burden is on a unbeaten record.", "A record that hasn't been beat.", "Walesman thinks.", "Walesman thinks Mayweather will beat him.", "That said, Walesman thinks.", "That said, Walesman thinks Mayweather will beat him.", "That said, Walesman thinks he will beat his opponents.", "Ricky Hatton's prediction was read.", "The prediction ahead of the fight is read.", "The prediction ahead of the fight.", "Ricky Hatton predicts Jeff Powell ahead of the fight.", "Ricky Hatton", "There are tickets against Floyd Mayweather.", "There are tickets against Manny Pacquiao.", "against Manny Pacquiao.", "Floyd Mayweather is against Manny Pacquiao.", "Floyd Mayweather"]}, {"instance_id": "realsumm-55", "summary": "<t> Winchester Council in Hampshire claimed annual clean - up hit by new rules . </t> <t> But the Health and Safety Executive denied tightening rules and added that councils were \u2018 over - interpreting \u2019 legislation . </t> <t> Poet Laureate Sir Andrew Motion accused town hall bosses and Highways Agency of ruining the countryside by failing to remove rubbish . </t>", "summary_trees": ["# ::snt  Winchester Council in Hampshire claimed annual clean - up hit by new rules . \n(c / claim-01\n      :ARG0 (c2 / council\n            :mod (c3 / city\n                  :name (n / name\n                        :op1 \"Winchester\")\n                  :location (c4 / county\n                        :name (n2 / name\n                              :op1 \"Hampshire\"))))\n      :ARG1 (c5 / clean-up-02\n            :ARG1-of (h / hit-01\n                  :ARG0 (r / rule\n                        :ARG1-of (n3 / new-01)))\n            :frequency (r2 / rate-entity-91\n                  :ARG3 (t / temporal-quantity\n                        :quant 1\n                        :unit (y / year)))))", "# ::snt  But the Health and Safety Executive denied tightening rules and added that councils were \u2018 over - interpreting \u2019 legislation . \n(c / contrast-01\n      :ARG2 (a / and\n            :op1 (d / deny-01\n                  :ARG0 (g / government-organization\n                        :name (n / name\n                              :op1 \"Health\"\n                              :op2 \"and\"\n                              :op3 \"Safety\"\n                              :op4 \"Executive\"))\n                  :ARG1 (t / tighten-01\n                        :ARG1 (r / rule)))\n            :op2 (a2 / add-01\n                  :ARG0 g\n                  :ARG1 (ii / interpret-01\n                        :ARG0 (c2 / council)\n                        :ARG1 (l / legislate-01)\n                        :ARG1-of (o / over-03)))))", "# ::snt  Poet Laureate Sir Andrew Motion accused town hall bosses and Highways Agency of ruining the countryside by failing to remove rubbish . \n(a / accuse-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Sir\"\n                  :op2 \"Andrew\"\n                  :op3 \"Motion\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (l / laureate\n                        :mod (p2 / poet))))\n      :ARG1 (a2 / and\n            :op1 (p3 / person\n                  :ARG0-of h\n                  :ARG1 (h2 / hall\n                        :mod (t / town))\n                  :ARG2 (b / boss)))\n      :op2 (g / government-organization\n            :name (n2 / name\n                  :op1 \"Highways\"\n                  :op2 \"Agency\"))\n      :ARG2 (r / ruin-01\n            :ARG0 a2\n            :ARG1 (c / countryside)\n            :ARG3 (f / fail-01\n                  :ARG0 a2\n                  :ARG1 (r2 / remove-01\n                        :ARG0 a2\n                        :ARG1 (r3 / rubbish)))))"], "tree": ["(c / claim-01\n   :ARG0 (c2 / council\n             :mod (c3 / city\n                      :name (n / name\n                               :op1 \"Winchester\"))))", "(c / claim-01\n   :ARG0 (c2 / council\n             :mod (c3 / city\n                      :name (n / name\n                               :op1 \"Winchester\")))\n   :ARG1 (c5 / clean-up-02\n             :ARG1 (h / hit-01\n                      :ARG0 (r / rule\n                               :ARG1 (n3 / new-01)))))", "(c / claim-01\n   :ARG0 (c2 / council\n             :mod (c3 / city\n                      :name (n / name\n                               :op1 \"Winchester\")))\n   :ARG1 (c5 / clean-up-02\n             :frequency (r2 / rate-entity-91\n                            :ARG3 (t / temporal-quantity\n                                     :unit (y / year)))))", "(c2 / council\n    :mod (c3 / city\n             :name (n / name\n                      :op1 \"Winchester\")))", "(c5 / clean-up-02\n    :ARG1 (h / hit-01\n             :ARG0 (r / rule\n                      :ARG1 (n3 / new-01))))", "(c / contrast-01\n   :ARG2 (d / deny-01\n            :ARG0 (g / government-organization\n                     :name (n / name\n                              :op1 \"Health\"\n                              :op2 \"and\"\n                              :op3 \"Safety\"\n                              :op4 \"Executive\"))))", "(a / and\n   :op1 (d / deny-01\n           :ARG0 (g / government-organization\n                    :name (n / name\n                             :op1 \"Health\"\n                             :op2 \"and\"\n                             :op3 \"Safety\"\n                             :op4 \"Executive\"))))", "(a / and\n   :op1 (d / deny-01\n           :ARG1 (t / tighten-01\n                    :ARG1 (r / rule))))", "(d / deny-01\n   :ARG0 (g / government-organization\n            :name (n / name\n                     :op1 \"Health\"\n                     :op2 \"and\"\n                     :op3 \"Safety\"\n                     :op4 \"Executive\")))", "(d / deny-01\n   :ARG0 (g / government-organization\n            :name (n / name\n                     :op1 \"Health\"\n                     :op2 \"and\"\n                     :op3 \"Safety\"\n                     :op4 \"Executive\"))\n   :ARG1 (t / tighten-01\n            :ARG1 (r / rule)))", "(a / accuse-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sir\"\n                     :op2 \"Andrew\"\n                     :op3 \"Motion\")))", "(a / accuse-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sir\"\n                     :op2 \"Andrew\"\n                     :op3 \"Motion\"))\n   :op2 (g / government-organization\n           :name (n2 / name\n                     :op1 \"Highways\"\n                     :op2 \"Agency\")))", "(a / accuse-01\n   :ARG0 (p / person :name (n / name :op1 \"Sir\" :op2 \"Andrew\" :op3 \"Motion\")))\n   :op2 (g / government-organization\n           :name (n2 / name\n                     :op1 \"Highways\"\n                     :op2 \"Agency\")))", "(a / accuse-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sir\"\n                     :op2 \"Andrew\"\n                     :op3 \"Motion\"))\n   :ARG1 (p3 / person\n             :ARG2 (b / boss)))"], "smus": ["The Winchester Council claimed.", "The Winchester Council claimed the new rules had been a clean-up.", "The Winchester Council claimed there was a annual clean-up.", "Winchester Council", "New rules have hit the clean-up.", "But the Health and Safety Executive denied.", "And the Health and Safety Executive denied.", "and denied tightening rules.", "The Health and Safety Executive denied.", "The Health and Safety Executive denied tightening the rules.", "Sir Andrew Motion accused.", "Sir Andrew Motion accused the Highways Agency.", "Sir Andrew Motion accused the Highway Agency.", "Sir Andrew Motion accused the bosses."]}, {"instance_id": "realsumm-56", "summary": "<t> Simon Wood , 38 , from Oldham won Masterchef last Friday . </t> <t> Father - of - four got cooking skills by feeding culinary creations to Wood kids . </t> <t> The award - winning chef says one of chef favourite meals is a plain omelette . </t>", "summary_trees": ["# ::snt  Simon Wood , 38 , from Oldham won Masterchef last Friday . \n(w / win-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Simon\"\n                  :op2 \"Wood\")\n            :age (t / temporal-quantity\n                  :quant 38\n                  :unit (y / year))\n            :source (c / city\n                  :name (n2 / name\n                        :op1 \"Oldham\")))\n      :ARG1 (a / award\n            :name (n3 / name\n                  :op1 \"Masterchef\"))\n      :time (d / date-entity\n            :weekday (f / friday)\n            :mod (l / last)))", "# ::snt  Father - of - four got cooking skills by feeding culinary creations to Wood kids . \n(g / get-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (c / child\n                        :quant 4)\n                  :ARG2 (f / father)))\n      :ARG1 (s / skill\n            :topic (c2 / cook-01))\n      :ARG2 (f2 / feed-01\n            :ARG0 p\n            :ARG1 (t / thing\n                  :ARG1-of (c3 / create-01\n                        :mod (c4 / culinary)))\n            :ARG2 (k / kid\n                  :mod (w / wood))))", "# ::snt  The award - winning chef says one of chef favourite meals is a plain omelette . \n(s / say-01\n      :ARG0 (c / chef\n            :ARG0-of (w / win-01\n                  :ARG1 (a / award)))\n      :ARG1 (o / omelette\n            :mod (p / plain)\n            :domain (m / meal\n                  :ARG1-of (ii / include-91\n                        :ARG2 (m2 / meal\n                              :ARG1-of (f / favor-01\n                                    :ARG0 c))))))"], "tree": ["(w / win-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Simon\"\n                     :op2 \"Wood\")))", "(w / win-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Simon\"\n                     :op2 \"Wood\"))\n   :ARG1 (a / award\n            :name (n3 / name\n                      :op1 \"Masterchef\")))", "(w / win-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Simon\"\n                     :op2 \"Wood\"))\n   :time (d / date-entity\n            :weekday (f / friday)))", "(w / win-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Simon\"\n                     :op2 \"Wood\"))\n   :ARG1 (a / award\n            :name (n3 / name\n                      :op1 \"Masterchef\"))\n   :time (d / date-entity\n            :weekday (f / friday)))", "(p / person\n   :name (n / name\n            :op1 \"Simon\"\n            :op2 \"Wood\")\n   :age (t / temporal-quantity\n           :quant 38))", "(g / get-01\n   :ARG1 (s / skill\n            :topic (c2 / cook-01)))", "(g / get-01\n   :ARG2 (f2 / feed-01\n             :ARG0 (p / person)))", "(g / get-01\n   :ARG1 (s / skill\n            :topic (c2 / cook-01))\n   :ARG2 (f2 / feed-01\n             :ARG2 (k / kid\n                      :mod (w / wood))))", "(g / get-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (f / father)))\n   :ARG1 (s / skill\n            :topic (c2 / cook-01))\n   :ARG2 (f2 / feed-01\n             :ARG2 (k / kid\n                      :mod (w / wood))))", "(f2 / feed-01\n    :ARG1 (t / thing\n             :ARG1 (c3 / create-01\n                       :mod (c4 / culinary)))\n    :ARG2 (k / kid\n             :mod (w / wood)))", "(s / say-01\n   :ARG1 (o / omelette\n            :domain (m / meal\n                       :ARG1 (ii / include-91\n                                 :ARG2 (m2 / meal\n                                           :ARG1 (f / favor-01\n                                                    :ARG0 (c / chef)))))))", "(c / chef\n   :ARG0 (w / win-01\n            :ARG1 (a / award)))", "(o / omelette\n   :domain (m / meal\n              :ARG1 (ii / include-91\n                        :ARG2 (m2 / meal\n                                  :ARG1 (f / favor-01\n                                           :ARG0 (c / chef))))))", "(o / omelette\n   :mod (p / plain)\n   :domain (m / meal\n              :ARG1 (ii / include-91\n                        :ARG2 (m2 / meal\n                                  :ARG1 (f / favor-01\n                                           :ARG0 (c / chef))))))", "(ii / include-91\n    :ARG2 (m2 / meal\n              :ARG1 (f / favor-01\n                       :ARG0 (c / chef))))"], "smus": ["Simon Wood won.", "Simon Wood won the Masterchef.", "Simon Wood won on Friday.", "Simon Wood won the Masterchef on Friday.", "Simon Wood, 38.", "got cooking skills.", "People got fed.", "Cooking skills got from feeding the wood kids.", "The father got the cooking skills from feeding the wood kids.", "Feeding the wood kids with culinary creations.", "\"Meals that are the favorite of the chef are omelettes,\" says the chef.", "winning the award is a chef.", "Meals that are \"favored\" by the chef are omelettes.", "Meals that are \"favored\" by the chef are plain omelettes.", "One of the chef's favorite meals."]}, {"instance_id": "realsumm-57", "summary": "<t> Swansea 's Gerhard Tremmel in goal behind the Free Agents ' 4 - 4 - 2 . </t> <t> Glen Johnson , Kolo Toure , Ron Vlaar and Luke Garbutt at the back . </t> <t> James Milner , Mikel Arteta , Tom Cleverley and Jonas Gutierrez in midfield . </t> <t> Burnley 's Danny Ings and Manchester United 's James Wilson up front . </t>", "summary_trees": ["# ::snt  Swansea 's Gerhard Tremmel in goal behind the Free Agents ' 4 - 4 - 2 . \n(b / be-located-at-91\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Gerhard\"\n                  :op2 \"Tremmel\")\n            :poss (t / team\n                  :name (n2 / name\n                        :op1 \"Swansea\")))\n      :ARG2 (g / goal)\n      :location (b2 / behind\n            :op1 (t2 / team\n                  :ARG1-of (f / free-04)\n                  :quant (s / score-entity\n                        :op1 4\n                        :op2 4\n                        :op3 2))))", "# ::snt  Glen Johnson , Kolo Toure , Ron Vlaar and Luke Garbutt at the back . \n(b / be-located-at-91\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Glen\"\n                        :op2 \"Johnson\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Kolo\"\n                        :op2 \"Toure\"))\n            :op3 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Ron\"\n                        :op2 \"Vlaar\"))\n            :op4 (p4 / person\n                  :name (n4 / name\n                        :op1 \"Luke\"\n                        :op2 \"Garbutt\")))\n      :ARG2 (b2 / back))", "# ::snt  James Milner , Mikel Arteta , Tom Cleverley and Jonas Gutierrez in midfield . \n(b / be-located-at-91\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"James\"\n                        :op2 \"Milner\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Mikel\"\n                        :op2 \"Arteta\"))\n            :op3 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Tom\"\n                        :op2 \"Cleverley\"))\n            :op4 (p4 / person\n                  :name (n4 / name\n                        :op1 \"Jonas\"\n                        :op2 \"Gutierrez\")))\n      :ARG2 (m / midfield))", "# ::snt  Burnley 's Danny Ings and Manchester United 's James Wilson up front . \n(a / and\n      :op1 (p / person\n            :name (n / name\n                  :op1 \"Danny\"\n                  :op2 \"Ingers\")\n            :poss (t / team\n                  :name (n2 / name\n                        :op1 \"Burnley\")))\n      :op2 (p2 / person\n            :name (n3 / name\n                  :op1 \"James\"\n                  :op2 \"Wilson\")\n            :poss (t2 / team\n                  :name (n4 / name\n                        :op1 \"Manchester\"\n                        :op2 \"United\")))\n      :location (u / up-front))"], "tree": ["(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Gerhard\"\n                     :op2 \"Tremmel\")))", "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Gerhard\"\n                     :op2 \"Tremmel\"))\n   :ARG2 (g / goal))", "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Gerhard\"\n                     :op2 \"Tremmel\"))\n   :location (b2 / behind\n                 :op1 (t2 / team\n                          :quant (s / score-entity\n                                    :op1 4))))", "(p / person\n   :name (n / name\n            :op1 \"Gerhard\"\n            :op2 \"Tremmel\"))", "(p / person\n   :name (n / name\n            :op1 \"Gerhard\"\n            :op2 \"Tremmel\")\n   :poss (t / team\n            :name (n2 / name\n                      :op1 \"Swansea\")))", "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Glen\"\n                     :op2 \"Johnson\")))", "(a / and\n   :op2 (p2 / person\n            :name (n2 / name\n                      :op1 \"Kolo\"\n                      :op2 \"Toure\")))", "(a / and\n   :op3 (p3 / person\n            :name (n3 / name\n                      :op1 \"Ron\"\n                      :op2 \"Vlaar\")))", "(a / and\n   :op1 (p / person\n           :name (n / name\n                    :op1 \"Glen\"\n                    :op2 \"Johnson\"))\n   :op2 (p2 / person\n            :name (n2 / name\n                      :op1 \"Kolo\"\n                      :op2 \"Toure\")))", "(a / and\n   :op2 (p2 / person\n            :name (n2 / name\n                      :op1 \"Kolo\"\n                      :op2 \"Toure\"))\n   :op3 (p3 / person\n            :name (n3 / name\n                      :op1 \"Ron\"\n                      :op2 \"Vlaar\"))\n   :op4 (p4 / person\n            :name (n4 / name\n                      :op1 \"Luke\"\n                      :op2 \"Garbutt\")))", "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"James\"\n                     :op2 \"Milner\")))", "(b / be-located-at-91\n   :ARG1 (p4 / person\n             :name (n4 / name\n                       :op1 \"Jonas\"\n                       :op2 \"Gutierrez\"))\n   :ARG2 (m / midfield))", "(a / and\n   :op2 (p2 / person\n            :name (n2 / name\n                      :op1 \"Mikel\"\n                      :op2 \"Arteta\")))", "(a / and\n   :op3 (p3 / person\n            :name (n3 / name\n                      :op1 \"Tom\"\n                      :op2 \"Cleverley\")))", "(a / and\n   :op1 (p / person\n           :name (n / name\n                    :op1 \"James\"\n                    :op2 \"Milner\"))\n   :op2 (p2 / person\n            :name (n2 / name\n                      :op1 \"Mikel\"\n                      :op2 \"Arteta\")))", "(a / and\n   :op1 (p / person\n           :name (n / name\n                    :op1 \"Danny\"\n                    :op2 \"Ingers\")))", "(a / and\n   :op2 (p2 / person\n            :name (n3 / name\n                      :op1 \"James\"\n                      :op2 \"Wilson\")))", "(a / and\n   :op1 (p / person\n           :name (n / name\n                    :op1 \"Danny\"\n                    :op2 \"Ingers\"))\n   :location (u / up-front))", "(a / and\n   :op2 (p2 / person\n            :name (n3 / name\n                      :op1 \"James\"\n                      :op2 \"Wilson\"))\n   :location (u / up-front))", "(p2 / person\n    :name (n3 / name\n              :op1 \"James\"\n              :op2 \"Wilson\")\n    :poss (t2 / team\n              :name (n4 / name\n                        :op1 \"Manchester\"\n                        :op2 \"United\")))"], "smus": ["Gerhard Tremmel.", "Gerhard Tremmel is at the goal.", "Gerhard Tremmel is behind the 4 team.", "Gerhard Tremmel", "Swansea's Gerhard Tremmel", "Glen Johnson.", "And Kolo Toure.", "And Ron Vlaar.", "Glen Johnson and Kolo Toure.", "Kolo Toure, Ron Vlaar and Luke Garbutt.", "James Milner.", "Jonas Gutierrez is in midfield.", "and Mikel Arteta.", "and Tom Cleverley.", "James Milner and Mikel Arteta", "And Danny Ingers.", "And James Wilson.", "And Danny Ingers up front.", "And James Wilson up front.", "Manchester United's James Wilson"]}, {"instance_id": "realsumm-58", "summary": "<t> Michigan high school students Mikenzy Snell and Matt Pliska who has Down syndrome , made plans to go to plans junior prom together last year . </t> <t> For plans prom picture , the pair held up a sign which read : ' Real friends do n't count chromosomes ' . </t> <t> The sign references the fact that people with Down syndrome have an extra copy of chromosome 21 . </t>", "summary_trees": ["# ::snt  Michigan high school students Mikenzy Snell and Matt Pliska who has Down syndrome , made plans to go to plans junior prom together last year . \n(p / plan-01\n      :ARG0 (a / and\n            :op1 (p2 / person\n                  :name (n / name\n                        :op1 \"Mikenzy\"\n                        :op2 \"Snell\")\n                  :ARG0-of (s / study-01\n                        :location (h / high-school\n                              :location (s2 / state\n                                    :name (n2 / name\n                                          :op1 \"Michigan\")))))\n            :op2 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Matt\"\n                        :op2 \"Pliska\")\n                  :ARG0-of (h2 / have-03\n                        :ARG1 (m / medical-condition\n                              :name (n4 / name\n                                    :op1 \"Down\"\n                                    :op2 \"Syndrome\")))))\n      :ARG1 (g / go-02\n            :ARG0 a\n            :ARG4 (p4 / prom\n                  :mod (j / junior))\n            :manner (t / together))\n      :time (y / year\n            :mod (l / last)))", "# ::snt  For plans prom picture , the pair held up a sign which read : ' Real friends do n't count chromosomes ' . \n(h / hold-up-10\n      :ARG0 (p / pair)\n      :ARG1 (s / sign\n            :ARG0-of (r / read-01\n                  :ARG1 (c / count-01\n                        :polarity -\n                        :ARG0 (p2 / person\n                              :ARG0-of (h2 / have-rel-role-91\n                                    :ARG2 (f / friend\n                                          :ARG1-of (r2 / real-04))))\n                        :ARG1 (c2 / chromosome))))\n      :purpose (p3 / plan-01\n            :ARG1 (p4 / picture-01\n                  :ARG1 (p5 / prom))))", "# ::snt  The sign references the fact that people with Down syndrome have an extra copy of chromosome 21 . \n(r / reference-04\n      :ARG0 (s / sign)\n      :ARG1 (h / have-03\n            :ARG0 (p / person\n                  :ARG1 (m / medical-condition\n                        :name (n / name\n                              :op1 \"Down\"\n                              :op2 \"Syndrome\")))\n            :ARG0 p)\n      :ARG1 (c / copy-01\n            :ARG1 (c2 / chromosome\n                  :mod 21)\n            :mod (e / extra)))"], "tree": ["(p / plan-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Mikenzy\"\n                      :op2 \"Snell\"))\n   :time (y / year\n            :mod (l / last)))", "(p / plan-01\n   :ARG1 (g / go-02\n            :ARG4 (p4 / prom\n                      :mod (j / junior)))\n   :time (y / year\n            :mod (l / last)))", "(p / plan-01\n   :ARG1 (g / go-02\n            :manner (t / together))\n   :time (y / year\n            :mod (l / last)))", "(p2 / person\n    :name (n / name\n             :op1 \"Mikenzy\"\n             :op2 \"Snell\")\n    :ARG0 (s / study-01\n             :location (h / high-school\n                          :location (s2 / state\n                                        :name (n2 / name\n                                                  :op1 \"Michigan\")))))", "(p3 / person\n    :name (n3 / name\n              :op1 \"Matt\"\n              :op2 \"Pliska\")\n    :ARG0 (h2 / have-03\n              :ARG1 (m / medical-condition\n                       :name (n4 / name\n                                 :op1 \"Down\"\n                                 :op2 \"Syndrome\"))))", "(h / hold-up-10\n   :purpose (p3 / plan-01\n                :ARG1 (p4 / picture-01\n                          :ARG1 (p5 / prom))))", "(h / hold-up-10\n   :ARG0 (p / pair)\n   :purpose (p3 / plan-01\n                :ARG1 (p4 / picture-01\n                          :ARG1 (p5 / prom))))", "(h / hold-up-10\n   :ARG0 (p / pair)\n   :ARG1 (s / sign\n            :ARG0 (r / read-01\n                     :ARG1 (c / count-01\n                              :polarity -)))\n   :purpose (p3 / plan-01\n                :ARG1 (p4 / picture-01\n                          :ARG1 (p5 / prom))))", "(p2 / person\n    :ARG0 (h2 / have-rel-role-91\n              :ARG2 (f / friend\n                       :ARG1 (r2 / real-04))))", "(p3 / plan-01\n    :ARG1 (p4 / picture-01\n              :ARG1 (p5 / prom)))", "(r / reference-04\n   :ARG1 (h / have-03\n            :ARG0 (p / person\n                     :ARG1 (m / medical-condition\n                              :name (n / name\n                                       :op1 \"Down\"\n                                       :op2 \"Syndrome\")))))", "(r / reference-04\n   :ARG0 (s / sign)\n   :ARG1 (h / have-03\n            :ARG0 (p / person\n                     :ARG1 (m / medical-condition\n                              :name (n / name\n                                       :op1 \"Down\"\n                                       :op2 \"Syndrome\")))))", "(c / copy-01\n   :ARG1 (c2 / chromosome\n             :mod 21)\n   :mod (e / extra))"], "smus": ["Mikenzy Snell made plans last year.", "Plans were made last year to go to junior prom.", "Plans to go together were made last year.", "Mikenzy Snell is a Michigan high school student.", "Matt Pliska has Down Syndrome.", "Hold up for prom pictures.", "The pair held up for prom pictures.", "The pair held up a \"count doesn't count\" sign for prom pictures.", "Real friends.", "Plans for a prom picture:", "Refers to people with Down Syndrome.", "The sign references people with Down Syndrome.", "An extra copy of chromosome 21."]}, {"instance_id": "realsumm-59", "summary": "<t> Police say Michael Scott Shemansky came to Police attention after Shemansky failed to appear for a supervised visit with Shemansky son Saturday . </t> <t> That same day mother Sandra Shemansky , 57 , was found dead at the home Police shared in Winter Garden , Florida . </t> <t> Michael Shemansky was going through a difficult divorce and neighbors believe the stress may have caused Shemansky to snap . </t>", "summary_trees": ["# ::snt  Police say Michael Scott Shemansky came to Police attention after Shemansky failed to appear for a supervised visit with Shemansky son Saturday . \n(s / say-01\n      :ARG0 (p / police)\n      :ARG1 (c / come-01\n            :ARG1 (p2 / person\n                  :name (n / name\n                        :op1 \"Michael\"\n                        :op2 \"Scott\"\n                        :op3 \"Shemansky\"))\n            :ARG4 (a / attend-02\n                  :ARG0 p\n                  :ARG1 p2)\n            :time (a2 / after\n                  :op1 (f / fail-01\n                        :ARG1 p2\n                        :ARG2 (a3 / appear-01\n                              :ARG1 p2\n                              :purpose (v / visit-01\n                                    :ARG0 p2\n                                    :ARG1 (p3 / person\n                                          :ARG0-of (h / have-rel-role-91\n                                                :ARG1 p2\n                                                :ARG2 (s2 / son)))\n                                    :ARG1-of (s3 / supervise-01\n                                          :ARG0 p))\n                              :time (d / date-entity\n                                    :weekday (s4 / saturday)))))))", "# ::snt  That same day mother Sandra Shemansky , 57 , was found dead at the home Police shared in Winter Garden , Florida . \n(f / find-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Sandra\"\n                  :op2 \"Shemansky\")\n            :ARG0-of (h / have-rel-role-91\n                  :ARG2 (m / mother))\n            :age (t / temporal-quantity\n                  :quant 57\n                  :unit (y / year)))\n      :ARG2 (d / die-01\n            :ARG1 p)\n      :time (d2 / day\n            :ARG1-of (s / same-01)\n            :mod (t2 / that))\n      :location (h2 / home\n            :ARG1-of (s2 / share-01\n                  :ARG0 (p2 / police)\n                  :location (c / city\n                        :name (n2 / name\n                              :op1 \"Winter\"\n                              :op2 \"Garden\")\n                        :location (s3 / state\n                              :name (n3 / name\n                                    :op1 \"Florida\"))))))", "# ::snt  Michael Shemansky was going through a difficult divorce and neighbors believe the stress may have caused Shemansky to snap . \n(a / and\n      :op1 (g / go-through-20\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Michael\"\n                        :op2 \"Shemansky\"))\n            :ARG1 (d / divorce-01\n                  :ARG0 p\n                  :mod (d2 / difficult)))\n      :op2 (b / believe-01\n            :ARG0 (p2 / person\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 p\n                        :ARG2 (n2 / neighbor)))\n            :ARG1 (p3 / possible-01\n                  :ARG1 (c / cause-01\n                        :ARG0 (s / stress-02)\n                        :ARG1 (s2 / snap-04\n                              :ARG1 p)))))"], "tree": ["(c / come-01\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Michael\"\n                      :op2 \"Scott\"\n                      :op3 \"Shemansky\"))\n   :ARG4 (a / attend-02\n            :ARG0 (p / police)))", "(c / come-01\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Michael\"\n                      :op2 \"Scott\"\n                      :op3 \"Shemansky\"))\n   :ARG4 (a / attend-02\n            :ARG0 (p / police))\n   :time (a2 / after\n             :op1 (f / fail-01\n                     :ARG2 (a3 / appear-01\n                               :ARG1 p2))))", "(c / come-01\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Michael\"\n                      :op2 \"Scott\"\n                      :op3 \"Shemansky\"))\n   :ARG4 (a / attend-02\n            :ARG0 (p / police))\n   :time (a2 / after\n             :op1 (f / fail-01\n                     :ARG2 (a3 / appear-01\n                               :purpose (v / visit-01\n                                           :ARG0 p2)))))", "(c / come-01\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Michael\"\n                      :op2 \"Scott\"\n                      :op3 \"Shemansky\"))\n   :ARG4 (a / attend-02\n            :ARG0 (p / police))\n   :time (a2 / after\n             :op1 (f / fail-01\n                     :ARG2 (a3 / appear-01\n                               :time (d / date-entity\n                                        :weekday (s4 / saturday))))))", "(p3 / person\n    :ARG0 (h / have-rel-role-91\n             :ARG1 (p2 / person :name (n / name :op1 \"Michael\" :op2 \"Scott\" :op3 \"Shemansky\"))))", "(f / find-01\n   :ARG2 (d / die-01\n            :ARG1 (p / person :name (n / name :op1 \"Sandra\" :op2 \"Shemansky\")))))", "(f / find-01\n   :ARG2 (d / die-01\n            :ARG1 (p / person :name (n / name :op1 \"Sandra\" :op2 \"Shemansky\"))))\n   :time (d2 / day\n             :ARG1 (s / same-01)))", "(f / find-01\n   :ARG2 (d / die-01\n            :ARG1 (p / person :name (n / name :op1 \"Sandra\" :op2 \"Shemansky\"))))\n   :time (d2 / day\n             :mod (t2 / that)))", "(f / find-01\n   :ARG1 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (m / mother)))\n   :ARG2 (d / die-01\n            :ARG1 p)\n   :time (d2 / day\n             :mod (t2 / that)))", "(a / and\n   :op1 (g / go-through-20\n           :ARG1 (d / divorce-01\n                    :ARG0 (p / person :name (n / name :op1 \"Michael\" :op2 \"Shemansky\"))))\n   :op2 (b / believe-01\n           :ARG0 (p2 / person\n                     :ARG0 (h / have-rel-role-91\n                              :ARG2 (n2 / neighbor)))))", "(g / go-through-20\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Michael\"\n                     :op2 \"Shemansky\"))\n   :ARG1 (d / divorce-01\n            :ARG0 p))", "(g / go-through-20\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Michael\"\n                     :op2 \"Shemansky\"))\n   :ARG1 (d / divorce-01\n            :mod (d2 / difficult)))", "(b / believe-01\n   :ARG0 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG2 (n2 / neighbor))))", "(b / believe-01\n   :ARG0 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG2 (n2 / neighbor)))\n   :ARG1 (p3 / possible-01\n             :ARG1 (c / cause-01\n                      :ARG0 (s / stress-02))))"], "smus": ["Michael Scott Shemansky came under police attention.", "Michael Scott Shemansky came under police attention after failing to appear.", "Michael Scott Shemansky came under police attention after failing to appear for a visit.", "Michael Scott Shemansky came under police attention after failing to appear Saturday.", "Michael Scott Shemansky is a person.", "Sandra Shemansky was found dead.", "On the same day, Sandra Shemansky was found dead.", "That day, Sandra Shemansky was found dead.", "That day, the mother was found dead.", "Michael Shemansky went through a divorce and neighbors believe.", "Michael Shemansky went through a divorce.", "Michael Shemansky went through a difficult divorce.", "Neighbors believe.", "Neighbors believe stress may have caused."]}, {"instance_id": "realsumm-60", "summary": "<t> Bayern Munich beat Porto 6 - 1 in the Champions League on Tuesday . </t> <t> Pep Guardiola 's side progressed 7 - 4 on aggregate to reach semi - finals . </t> <t> Thomas Muller scored 27th Champions League goal to pass Mario Gomez . </t> <t> Muller is now the leading German scorer in the competition . </t> <t> After game Muller led the celebrations with supporters using a megaphone . </t>", "summary_trees": ["# ::snt  Bayern Munich beat Porto 6 - 1 in the Champions League on Tuesday . \n(b / beat-03\n      :ARG0 (t / team\n            :name (n / name\n                  :op1 \"Bayern\"\n                  :op2 \"Munich\"))\n      :ARG1 (t2 / team\n            :name (n2 / name\n                  :op1 \"Porto\"))\n      :ARG2 (g / game\n            :name (n3 / name\n                  :op1 \"Champions\"\n                  :op2 \"League\"))\n      :time (d / date-entity\n            :weekday (t3 / tuesday))\n      :quant (s / score-entity\n            :op1 6\n            :op2 1))", "# ::snt  Pep Guardiola 's side progressed 7 - 4 on aggregate to reach semi - finals . \n(p / progress-01\n      :ARG1 (s / side\n            :poss (p2 / person\n                  :name (n / name\n                        :op1 \"Pep\"\n                        :op2 \"Guardiola\")))\n      :ARG4 (r / reach-01\n            :ARG0 s\n            :ARG1 (f / final\n                  :mod (s2 / semi)))\n      :manner (s3 / score-entity\n            :op1 7\n            :op2 4)\n      :ARG4-of (a / aggregate-01))", "# ::snt  Thomas Muller scored 27th Champions League goal to pass Mario Gomez . \n(s / score-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Thomas\"\n                  :op2 \"Muller\"))\n      :ARG1 (g / goal\n            :ord (o / ordinal-entity\n                  :value 27)\n            :mod (g2 / game\n                  :name (n2 / name\n                        :op1 \"Champions\"\n                        :op2 \"League\")))\n      :ARG2-of (p2 / pass-03\n            :ARG0 p\n            :ARG1 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Mario\"\n                        :op2 \"Gomez\"))))", "# ::snt  Muller is now the leading German scorer in the competition . \n(p / person\n      :name (n / name\n            :op1 \"Muller\")\n      :ARG0-of (s / score-01\n            :ARG2 (p2 / person\n                  :ARG0-of (c / compete-01))\n            :ARG3 (l / lead-01\n                  :ARG0 p\n                  :ARG1 p2))\n      :mod (c2 / country\n            :name (n2 / name\n                  :op1 \"Germany\"))\n      :time (n3 / now))", "# ::snt  After game Muller led the celebrations with supporters using a megaphone . \n(l / lead-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Muller\"))\n      :ARG1 (c / celebrate-02\n            :accompanier (p2 / person\n                  :ARG0-of (s / support-01)\n                  :ARG0-of (u / use-01\n                        :ARG1 (m / megaphone))))\n      :time (a / after\n            :op1 (g / game)))"], "tree": ["(b / beat-03\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Bayern\"\n                     :op2 \"Munich\")))", "(b / beat-03\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Bayern\"\n                     :op2 \"Munich\"))\n   :ARG1 (t2 / team\n             :name (n2 / name\n                       :op1 \"Porto\"))\n   :quant (s / score-entity\n             :op1 6))", "(b / beat-03\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Bayern\"\n                     :op2 \"Munich\"))\n   :ARG1 (t2 / team\n             :name (n2 / name\n                       :op1 \"Porto\"))\n   :time (d / date-entity\n            :weekday (t3 / tuesday))\n   :quant (s / score-entity\n             :op1 6))", "(b / beat-03\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Bayern\"\n                     :op2 \"Munich\"))\n   :ARG1 (t2 / team\n             :name (n2 / name\n                       :op1 \"Porto\"))\n   :ARG2 (g / game\n            :name (n3 / name\n                      :op1 \"Champions\"\n                      :op2 \"League\"))\n   :time (d / date-entity\n            :weekday (t3 / tuesday))\n   :quant (s / score-entity\n             :op1 6))", "(t / team\n   :name (n / name\n            :op1 \"Bayern\"\n            :op2 \"Munich\"))", "(p / progress-01\n   :ARG1 (s / side\n            :poss (p2 / person\n                      :name (n / name\n                               :op1 \"Pep\"\n                               :op2 \"Guardiola\"))))", "(p / progress-01\n   :manner (s3 / score-entity\n               :op1 7\n               :op2 4))", "(p / progress-01\n   :ARG1 (s / side\n            :poss (p2 / person\n                      :name (n / name\n                               :op1 \"Pep\"\n                               :op2 \"Guardiola\")))\n   :ARG4 (r / reach-01\n            :ARG0 s))", "(p / progress-01\n   :ARG1 (s / side\n            :poss (p2 / person\n                      :name (n / name\n                               :op1 \"Pep\"\n                               :op2 \"Guardiola\")))\n   :ARG4 (r / reach-01\n            :ARG1 (f / final\n                     :mod (s2 / semi))))", "(p / progress-01\n   :ARG1 (s / side\n            :poss (p2 / person\n                      :name (n / name\n                               :op1 \"Pep\"\n                               :op2 \"Guardiola\")))\n   :manner (s3 / score-entity\n               :op1 7\n               :op2 4))", "(s / score-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Thomas\"\n                     :op2 \"Muller\")))", "(s / score-01\n   :ARG2 (p2 / pass-03\n             :ARG1 (p3 / person\n                       :name (n3 / name\n                                 :op1 \"Mario\"\n                                 :op2 \"Gomez\"))))", "(s / score-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Thomas\"\n                     :op2 \"Muller\"))\n   :ARG1 (g / goal\n            :ord (o / ordinal-entity\n                    :value 27)))", "(s / score-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Thomas\"\n                     :op2 \"Muller\"))\n   :ARG2 (p2 / pass-03\n             :ARG1 (p3 / person\n                       :name (n3 / name\n                                 :op1 \"Mario\"\n                                 :op2 \"Gomez\"))))", "(s / score-01\n   :ARG1 (g / goal\n            :ord (o / ordinal-entity\n                    :value 27))\n   :ARG2 (p2 / pass-03\n             :ARG0 (p / person :name (n / name :op1 \"Thomas\" :op2 \"Muller\"))))", "(p / person\n   :ARG0 (s / score-01\n            :ARG3 (l / lead-01\n                     :ARG0 p))\n   :mod (c2 / country\n            :name (n2 / name\n                      :op1 \"Germany\")))", "(p / person\n   :ARG0 (s / score-01\n            :ARG3 (l / lead-01\n                     :ARG0 p))\n   :time (n3 / now))", "(p / person\n   :name (n / name\n            :op1 \"Muller\")\n   :ARG0 (s / score-01\n            :ARG3 (l / lead-01\n                     :ARG0 p))\n   :mod (c2 / country\n            :name (n2 / name\n                      :op1 \"Germany\")))", "(p / person\n   :name (n / name\n            :op1 \"Muller\")\n   :ARG0 (s / score-01\n            :ARG3 (l / lead-01\n                     :ARG0 p))\n   :time (n3 / now))", "(l / lead-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Muller\")))", "(l / lead-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Muller\"))\n   :ARG1 (c / celebrate-02\n            :accompanier (p2 / person\n                             :ARG0 (s / support-01))))", "(l / lead-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Muller\"))\n   :time (a / after\n            :op1 (g / game)))", "(l / lead-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Muller\"))\n   :ARG1 (c / celebrate-02\n            :accompanier (p2 / person\n                             :ARG0 (s / support-01)))\n   :time (a / after\n            :op1 (g / game)))", "(l / lead-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Muller\"))\n   :ARG1 (c / celebrate-02\n            :accompanier (p2 / person\n                             :ARG0 (u / use-01\n                                      :ARG1 (m / megaphone))))\n   :time (a / after\n            :op1 (g / game)))"], "smus": ["Bayern Munich beat", "Bayern Munich beat Porto 6-1.", "Bayern Munich beat Porto 6-1 on Tuesday.", "Bayern M\u00fcnchen beat Porto 6-1 in the Champions League game Tuesday.", "Bayern Munich", "Pep Guardiola's side progressed.", "Progressed 7-4.", "Pep Guardiola's side progressed to reach.", "Pep Guardiola's side progressed to reach the semi-finals.", "Pep Guardiola's side progressed 7-4.", "Thomas Muller scored.", "Scored to pass Mario Gomez", "Thomas Muller scored the 27th goal.", "Thomas Muller scored to pass Mario Gomez.", "The 27th goal was scored by Thomas Muller.", "The leading scorer was German.", "The lead scorer is now.", "Muller is German with the leading score.", "Muller is now the leading scorer.", "Muller led.", "Muller led celebrations with supporters.", "Muller led after the game.", "Muller led celebrations with supporters after the game.", "After the game, Muller led celebrations with people using the megaphone."]}, {"instance_id": "realsumm-61", "summary": "<t> Domenico Rancadore given a seven - year sentence by Italian court in 1999 . </t> <t> Rancadore was convicted for role as a ' man of honour ' , taking bribes from builders . </t> <t> In February the Sicilian Mafia fugitive lost battle against extradition to Italy . </t> <t> Today Mafia emerged that the 65-year - old 's case expired in October last year . </t>", "summary_trees": ["# ::snt  Domenico Rancadore given a seven - year sentence by Italian court in 1999 . \n(s / sentence-01\n      :ARG0 (c / court\n            :mod (c2 / country\n                  :name (n / name\n                        :op1 \"Italy\")))\n      :ARG1 (p / person\n            :name (n2 / name\n                  :op1 \"Domenico\"\n                  :op2 \"Rancadore\"))\n      :ARG2 (t / temporal-quantity\n            :quant 7\n            :unit (y / year))\n      :time (d / date-entity\n            :year 1999))", "# ::snt  Rancadore was convicted for role as a ' man of honour ' , taking bribes from builders . \n(c / convict-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Rancadore\"))\n      :ARG2 (a / and\n            :op1 (r / role\n                  :mod (m / man\n                        :mod (h / honor)))\n            :op2 (b / bribe-01\n                  :ARG0 p\n                  :ARG1 (p2 / person\n                        :ARG0-of (b2 / build-01)))))", "# ::snt  In February the Sicilian Mafia fugitive lost battle against extradition to Italy . \n(l / lose-03\n      :ARG0 (f / fugitive\n            :mod (c / criminal-organization\n                  :name (n / name\n                        :op1 \"Mafia\"))\n            :mod (ii / island\n                  :name (n2 / name\n                        :op1 \"Sicily\")))\n      :ARG1 (b / battle-01\n            :ARG0 f\n            :ARG1 (e / extradite-01\n                  :ARG1 f\n                  :ARG3 (c2 / country\n                        :name (n3 / name\n                              :op1 \"Italy\"))))\n      :time (d / date-entity\n            :month 2))", "# ::snt  Today Mafia emerged that the 65-year - old 's case expired in October last year . \n(e / emerge-02\n      :ARG0 (c / criminal-organization\n            :name (n / name\n                  :op1 \"Mafia\"))\n      :ARG1 (e2 / expire-01\n            :ARG1 (c2 / case-03\n                  :ARG2 (p / person\n                        :age (t / temporal-quantity\n                              :quant 65\n                              :unit (y / year))))\n            :time (d / date-entity\n                  :month 10\n                  :mod (y2 / year\n                        :mod (l / last))))\n      :time (t2 / today))"], "tree": ["(s / sentence-01\n   :ARG0 (c / court\n            :mod (c2 / country\n                     :name (n / name\n                              :op1 \"Italy\"))))", "(s / sentence-01\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Domenico\"\n                      :op2 \"Rancadore\"))\n   :ARG2 (t / temporal-quantity\n            :quant 7))", "(s / sentence-01\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Domenico\"\n                      :op2 \"Rancadore\"))\n   :time (d / date-entity\n            :year 1999))", "(s / sentence-01\n   :ARG0 (c / court\n            :mod (c2 / country\n                     :name (n / name\n                              :op1 \"Italy\")))\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Domenico\"\n                      :op2 \"Rancadore\"))\n   :time (d / date-entity\n            :year 1999))", "(s / sentence-01\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Domenico\"\n                      :op2 \"Rancadore\"))\n   :ARG2 (t / temporal-quantity\n            :quant 7)\n   :time (d / date-entity\n            :year 1999))", "(c / convict-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Rancadore\")))", "(c / convict-01\n   :ARG2 (r / role\n            :mod (m / man\n                    :mod (h / honor))))", "(c / convict-01\n   :ARG2 (b / bribe-01\n            :ARG0 (p / person :name (n / name :op1 \"Rancadore\"))))", "(a / and\n   :op2 (b / bribe-01\n           :ARG0 (p / person :name (n / name :op1 \"Rancadore\"))))", "(l / lose-03\n   :ARG0 (f / fugitive\n            :mod (c / criminal-organization\n                    :name (n / name\n                             :op1 \"Mafia\")))\n   :ARG1 (b / battle-01\n            :ARG0 f))", "(l / lose-03\n   :ARG0 (f / fugitive\n            :mod (c / criminal-organization\n                    :name (n / name\n                             :op1 \"Mafia\")))\n   :time (d / date-entity\n            :month 2))", "(l / lose-03\n   :ARG0 (f / fugitive\n            :mod (c / criminal-organization\n                    :name (n / name\n                             :op1 \"Mafia\")))\n   :ARG1 (b / battle-01\n            :ARG0 f)\n   :time (d / date-entity\n            :month 2))", "(l / lose-03\n   :ARG0 (f / fugitive\n            :mod (c / criminal-organization\n                    :name (n / name\n                             :op1 \"Mafia\")))\n   :ARG1 (b / battle-01\n            :ARG1 (e / extradite-01\n                     :ARG1 f))\n   :time (d / date-entity\n            :month 2))", "(l / lose-03\n   :ARG0 (f / fugitive\n            :mod (c / criminal-organization\n                    :name (n / name\n                             :op1 \"Mafia\")))\n   :ARG1 (b / battle-01\n            :ARG1 (e / extradite-01\n                     :ARG3 (c2 / country\n                               :name (n3 / name\n                                         :op1 \"Italy\"))))\n   :time (d / date-entity\n            :month 2))", "(e / emerge-02\n   :ARG1 (e2 / expire-01\n             :time (d / date-entity\n                      :month 10)))", "(e / emerge-02\n   :ARG0 (c / criminal-organization\n            :name (n / name\n                     :op1 \"Mafia\"))\n   :time (t2 / today))", "(e / emerge-02\n   :ARG1 (e2 / expire-01\n             :ARG1 (c2 / case-03\n                       :ARG2 (p / person\n                                :age (t / temporal-quantity\n                                        :quant 65))))\n   :time (t2 / today))", "(e2 / expire-01\n    :ARG1 (c2 / case-03\n              :ARG2 (p / person\n                       :age (t / temporal-quantity\n                               :quant 65)))\n    :time (d / date-entity\n             :month 10))", "(e2 / expire-01\n    :ARG1 (c2 / case-03\n              :ARG2 (p / person\n                       :age (t / temporal-quantity\n                               :quant 65)))\n    :time (d / date-entity\n             :mod (y2 / year\n                      :mod (l / last))))"], "smus": ["The sentence was given by an Italian court.", "Domenico Rancadore received a 7-year sentence.", "Domenico Rancadore was sentenced in 1999.", "A court in Italy sentenced Domenico Rancadore in 1999.", "Domenico Rancadore received a seven-year sentence in 1999.", "Rancadore was convicted.", "Convicted for the role of honor man.", "Rancadore was convicted of bribery.", "And Rancadore took bribes.", "The Mafia fugitive lost the battle.", "The Mafia fugitive lost in February.", "The Mafia fugitive lost the battle in February.", "The Mafia fugitive lost the extradition battle in February.", "The Mafia fugitive lost the battle over extradition to Italy in February.", "It emerged that the expiration date was October.", "Today, the Mafia emerged.", "Today, it emerged that the case of the 65-year-old had expired.", "The case of the 65-year-old expired in October.", "The 65-year-old case expired last year."]}, {"instance_id": "realsumm-62", "summary": "<t> Baron the German Shepard was filmed as Shepard helped get the dishes done at home in California . </t> <t> The pup was professionally trained at the Hill Country K9 school . </t> <t> To date the clip of Baron dishwashing has been watched over 27,000 times . </t> <t> Many viewers have deemed the dog 's cleaning antics ' cute ' and adorable ' </t>", "summary_trees": ["# ::snt  Baron the German Shepard was filmed as Shepard helped get the dishes done at home in California . \n(f / film-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Baron\"\n                  :op2 \"the\"\n                  :op3 \"German\"\n                  :op4 \"Shepard\"))\n      :time (h / help-01\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Shepard\"))\n            :ARG1 (g / get-04\n                  :ARG0 p2\n                  :ARG1 (b / be-done-08\n                        :ARG1 (d / dish))\n                  :location (h2 / home\n                        :location (s / state\n                              :name (n3 / name\n                                    :op1 \"California\"))))))", "# ::snt  The pup was professionally trained at the Hill Country K9 school . \n(t / train-01\n      :ARG0 (s / school\n            :name (n / name\n                  :op1 \"Hill\"\n                  :op2 \"Country\"\n                  :op3 \"K9\"))\n      :ARG2 (p / pup)\n      :manner (p2 / professional))", "# ::snt  To date the clip of Baron dishwashing has been watched over 27,000 times . \n(w / watch-01\n      :ARG1 (c / clip\n            :topic (w2 / wash-01\n                  :ARG0 (p / person\n                        :name (n / name\n                              :op1 \"Baron\"))\n                  :ARG1 (d / dish)))\n      :time (t / to-date)\n      :quant (o / over\n            :op1 27000))", "# ::snt  Many viewers have deemed the dog 's cleaning antics ' cute ' and adorable ' \n(d / deem-01\n      :ARG0 (p / person\n            :ARG0-of (v / view-01)\n            :quant (m / many))\n      :ARG1 (a / and\n            :op1 (c / cute)\n            :op2 (a2 / adorable)\n            :domain (a3 / antics\n                  :topic (c2 / clean-01\n                        :ARG0 (d2 / dog)))))"], "tree": ["(f / film-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Baron\"\n                     :op2 \"the\"\n                     :op3 \"German\"\n                     :op4 \"Shepard\")))", "(f / film-01\n   :time (h / help-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Shepard\"))))", "(f / film-01\n   :time (h / help-01\n            :ARG1 (g / get-04\n                     :ARG1 (b / be-done-08\n                              :ARG1 (d / dish)))))", "(h / help-01\n   :ARG1 (g / get-04\n            :ARG1 (b / be-done-08\n                     :ARG1 (d / dish))))", "(h / help-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Shepard\"))\n   :ARG1 (g / get-04\n            :ARG1 (b / be-done-08\n                     :ARG1 (d / dish))))", "(t / train-01\n   :ARG0 (s / school\n            :name (n / name\n                     :op1 \"Hill\"\n                     :op2 \"Country\"\n                     :op3 \"K9\")))", "(t / train-01\n   :ARG0 (s / school\n            :name (n / name\n                     :op1 \"Hill\"\n                     :op2 \"Country\"\n                     :op3 \"K9\"))\n   :ARG2 (p / pup))", "(t / train-01\n   :ARG2 (p / pup)\n   :manner (p2 / professional))", "(t / train-01\n   :ARG0 (s / school\n            :name (n / name\n                     :op1 \"Hill\"\n                     :op2 \"Country\"\n                     :op3 \"K9\"))\n   :ARG2 (p / pup)\n   :manner (p2 / professional))", "(s / school\n   :name (n / name\n            :op1 \"Hill\"\n            :op2 \"Country\"\n            :op3 \"K9\"))", "(w / watch-01\n   :quant (o / over\n             :op1 27000))", "(w / watch-01\n   :ARG1 (c / clip\n            :topic (w2 / wash-01\n                       :ARG0 (p / person\n                                :name (n / name\n                                         :op1 \"Baron\"))))\n   :time (t / to-date))", "(w / watch-01\n   :ARG1 (c / clip\n            :topic (w2 / wash-01\n                       :ARG1 (d / dish)))\n   :time (t / to-date))", "(w / watch-01\n   :time (t / to-date)\n   :quant (o / over\n             :op1 27000))", "(w / watch-01\n   :ARG1 (c / clip\n            :topic (w2 / wash-01\n                       :ARG1 (d / dish)))\n   :time (t / to-date)\n   :quant (o / over\n             :op1 27000))", "(d / deem-01\n   :ARG0 (p / person\n            :ARG0 (v / view-01))\n   :ARG1 (c / cute))", "(d / deem-01\n   :ARG0 (p / person\n            :ARG0 (v / view-01))\n   :ARG1 (a2 / adorable))", "(d / deem-01\n   :ARG0 (p / person\n            :ARG0 (v / view-01))\n   :ARG1 (a3 / antics\n             :topic (c2 / clean-01\n                        :ARG0 (d2 / dog))))", "(d / deem-01\n   :ARG0 (p / person\n            :quant (m / many))\n   :ARG1 (c / cute))", "(d / deem-01\n   :ARG0 (p / person\n            :quant (m / many))\n   :ARG1 (a3 / antics\n             :topic (c2 / clean-01\n                        :ARG0 (d2 / dog))))"], "smus": ["Baron the German Shepard was filmed.", "Filmed as Shepard helped.", "Filmed as helping get the dishes done.", "Helped get the dishes done.", "Shepard helped get the dishes done.", "The Hill Country K9 school was trained.", "The Hill Country K9 school has trained the pup.", "The pup is professionally trained.", "The Hill Country K9 school has professionally trained the pup.", "Hill Country K9", "Over 27,000 watched.", "To date, there has been a clip watched about Baron's washing.", "To date, there has been a clip watched about dish washing.", "Over 27,000 watched to date.", "The dish washing clip has been watched over 27,000 times to date.", "Viewers have deemed it cute.", "Viewers have deemed it adorable.", "Viewers deemed the dog cleaning antics.", "Many have deemed it cute.", "Many have deemed the dog cleaning antics."]}, {"instance_id": "realsumm-63", "summary": "<t> Jihadis face fines , whipping or even jail time for wearing Nike products . </t> <t> Ban is also partly due to the brand sharing Ban name with a Greek Goddess . </t> <t> Commanders say the name also sounds like sexual slang words in Arabic . </t> <t> Those living under ISIS are already banned from wearing jeans or items of clothing carrying provocative language or swear words . </t>", "summary_trees": ["# ::snt  Jihadis face fines , whipping or even jail time for wearing Nike products . \n(f / face-01\n      :ARG0 (j / jihadi)\n      :ARG1 (o / or\n            :op1 (f2 / fine-01)\n            :op2 (w / whip-01)\n            :op3 (j2 / jail-01\n                  :mod (e / even)))\n      :ARG1-of (c / cause-01\n            :ARG0 (w2 / wear-01\n                  :ARG0 j\n                  :ARG1 (p / product\n                        :mod (c2 / company\n                              :name (n / name\n                                    :op1 \"Nike\"))))))", "# ::snt  Ban is also partly due to the brand sharing Ban name with a Greek Goddess . \n(c / cause-01\n      :ARG0 (s / share-01\n            :ARG0 (b / brand)\n            :ARG1 (n / name\n                  :poss (p / person\n                        :name (n2 / name\n                              :op1 \"Ban\")))\n            :ARG2 p\n            :name (n3 / name\n                  :op1 \"Goddess\")\n            :mod (c2 / country\n                  :name (n4 / name\n                        :op1 \"Greece\")))\n      :ARG1 p\n      :degree (p2 / part)\n      :mod (a / also))", "# ::snt  Commanders say the name also sounds like sexual slang words in Arabic . \n(s / say-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (c / commander)))\n      :ARG1 (s2 / sound-01\n            :ARG1 (n / name)\n            :ARG2 (w / word\n                  :mod (s3 / slang\n                        :mod (s4 / sex))\n                  :medium (l / language\n                        :name (n2 / name\n                              :op1 \"Arabic\")))\n            :mod (a / also)))", "# ::snt  Those living under ISIS are already banned from wearing jeans or items of clothing carrying provocative language or swear words . \n(b / ban-01\n      :ARG1 (w / wear-01\n            :ARG0 (p / person\n                  :mod (t / that)\n                  :ARG0-of (l / live-01\n                        :location (u / under\n                              :op1 (c / criminal-organization\n                                    :name (n / name\n                                          :op1 \"ISIS\")))))\n            :ARG1 (o / or\n                  :op1 (j / jeans)\n                  :op2 (ii / item\n                        :ARG2-of (c2 / clothe-01))\n                  :ARG0-of (c3 / carry-01\n                        :ARG1 (o2 / or\n                              :op1 (l2 / language\n                                    :ARG0-of (p2 / provoke-01))\n                              :op2 (w2 / word\n                                    :ARG1-of (s / swear-01))))))\n      :ARG2 p\n      :time (a / already))"], "tree": ["(f / face-01\n   :ARG1 (o / or\n            :op3 (j2 / jail-01\n                     :mod (e / even))))", "(f / face-01\n   :ARG0 (j / jihadi)\n   :ARG1 (o / or\n            :op1 (f2 / fine-01)))", "(f / face-01\n   :ARG0 (j / jihadi)\n   :ARG1 (o / or\n            :op2 (w / whip-01)))", "(o / or\n   :op1 (f2 / fine-01)\n   :op2 (w / whip-01))", "(o / or\n   :op1 (f2 / fine-01)\n   :op2 (w / whip-01)\n   :op3 (j2 / jail-01\n            :mod (e / even)))", "(c / cause-01\n   :ARG0 (s / share-01\n            :ARG0 (b / brand))\n   :degree (p2 / part))", "(c / cause-01\n   :ARG0 (s / share-01\n            :ARG1 (n / name\n                     :poss (p / person\n                              :name (n2 / name\n                                        :op1 \"Ban\"))))\n   :degree (p2 / part))", "(s / share-01\n   :ARG1 (n / name\n            :poss (p / person\n                     :name (n2 / name\n                               :op1 \"Ban\"))))", "(s / share-01\n   :ARG0 (b / brand)\n   :ARG1 (n / name\n            :poss (p / person\n                     :name (n2 / name\n                               :op1 \"Ban\"))))", "(s / share-01\n   :ARG0 (b / brand)\n   :ARG1 (n / name\n            :poss (p / person\n                     :name (n2 / name\n                               :op1 \"Ban\")))\n   :name (n3 / name\n             :op1 \"Goddess\"))", "(s / say-01\n   :ARG1 (s2 / sound-01\n             :ARG2 (w / word\n                      :mod (s3 / slang\n                               :mod (s4 / sex)))))", "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (c / commander)))\n   :ARG1 (s2 / sound-01\n             :ARG1 (n / name)))", "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (c / commander)))\n   :ARG1 (s2 / sound-01\n             :mod (a / also)))", "(s2 / sound-01\n    :ARG1 (n / name)\n    :ARG2 (w / word\n             :mod (s3 / slang\n                      :mod (s4 / sex))))", "(s2 / sound-01\n    :ARG1 (n / name)\n    :ARG2 (w / word\n             :mod (s3 / slang\n                      :mod (s4 / sex)))\n    :mod (a / also))", "(b / ban-01\n   :ARG1 (w / wear-01\n            :ARG0 (p / person\n                     :ARG0 (l / live-01\n                              :location (u / under\n                                           :op1 (c / criminal-organization\n                                                   :name (n / name\n                                                            :op1 \"ISIS\")))))))", "(b / ban-01\n   :ARG1 (w / wear-01\n            :ARG0 (p / person\n                     :mod (t / that)))\n   :time (a / already))", "(b / ban-01\n   :ARG1 (w / wear-01\n            :ARG1 (o / or\n                     :op1 (j / jeans)))\n   :time (a / already))", "(b / ban-01\n   :ARG1 (w / wear-01\n            :ARG0 (p / person\n                     :ARG0 (l / live-01\n                              :location (u / under\n                                           :op1 (c / criminal-organization\n                                                   :name (n / name\n                                                            :op1 \"ISIS\"))))))\n   :time (a / already))", "(p / person\n   :ARG0 (l / live-01\n            :location (u / under\n                         :op1 (c / criminal-organization\n                                 :name (n / name\n                                          :op1 \"ISIS\")))))"], "smus": ["Faced with jail even.", "Jihadis face fines or", "Jihadis face whipping.", "Fines or whipping.", "Fines, whipping, or even jail.", "Partly because the brand is sharing.", "Partly because Ban's name is sharing.", "Sharing Ban's name.", "The brand is sharing Ban's name.", "The brand is sharing Ban's name with the name Goddess.", "Sound like slang words, say.", "The commanders say the name sounds.", "Commanders say it also sounds.", "The name sounds like slang words.", "The name also sounds like slang words.", "People living under ISIS are banned from wearing.", "Those people are already banned from wearing.", "Wearing jeans is already banned.", "People living under ISIS are already banned from wearing clothing.", "People living under ISIS."]}, {"instance_id": "realsumm-64", "summary": "<t> Lorraine Bracco was asked by The Sopranos creator to be Carmela . </t> <t> The actress turned Bracco down because actress played a mobster 's wife in Martin Scorsese 's Goodfellas in 1990 . </t> <t> Convinced showrunner David Chase to let actress play the role of Dr. Jennifer Melfi . </t>", "summary_trees": ["# ::snt  Lorraine Bracco was asked by The Sopranos creator to be Carmela . \n(a / ask-02\n      :ARG0 (p / person\n            :ARG0-of (c / create-01\n                  :ARG1 (b / broadcast-program\n                        :name (n / name\n                              :op1 \"The\"\n                              :op2 \"Sopranos\"))))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Carmela\")\n            :domain (p3 / person\n                  :name (n3 / name\n                        :op1 \"Lorraine\"\n                        :op2 \"Bracco\")))\n      :ARG2 p3)", "# ::snt  The actress turned Bracco down because actress played a mobster 's wife in Martin Scorsese 's Goodfellas in 1990 . \n(c / cause-01\n      :ARG0 (p / play-02\n            :ARG0 (p2 / person\n                  :ARG0-of (a / act-01))\n            :ARG1 (p3 / person\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 (m / mobster)\n                        :ARG2 (w / wife)))\n            :time (w2 / work-of-art\n                  :name (n / name\n                        :op1 \"Goodfellas\")\n                  :poss (p4 / person\n                        :name (n2 / name\n                              :op1 \"Martin\"\n                              :op2 \"Scorsese\"))\n                  :time (d / date-entity\n                        :year 1990)))\n      :ARG1 (t / turn-down-05\n            :ARG0 p2\n            :ARG1 (p5 / person\n                  :name (n3 / name\n                        :op1 \"Bracco\"))))", "# ::snt  Convinced showrunner David Chase to let actress play the role of Dr. Jennifer Melfi . \n(c / convince-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"David\"\n                  :op2 \"Chase\")\n            :ARG0-of (r / run-01\n                  :ARG1 (s / show)))\n      :ARG2 (l / let-01\n            :ARG0 p\n            :ARG1 (p2 / play-02\n                  :ARG0 (p3 / person\n                        :ARG0-of (a / act-01))\n                  :ARG1 (d / doctor\n                        :name (n2 / name\n                              :op1 \"Jennifer\"\n                              :op2 \"Melfi\")))))"], "tree": ["(a / ask-02\n   :ARG0 (p / person\n            :ARG0 (c / create-01\n                     :ARG1 (b / broadcast-program\n                              :name (n / name\n                                       :op1 \"The\"\n                                       :op2 \"Sopranos\"))))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Carmela\")))", "(c / create-01\n   :ARG1 (b / broadcast-program\n            :name (n / name\n                     :op1 \"The\"\n                     :op2 \"Sopranos\")))", "(b / broadcast-program\n   :name (n / name\n            :op1 \"The\"\n            :op2 \"Sopranos\"))", "(p2 / person\n    :domain (p3 / person\n                :name (n3 / name\n                          :op1 \"Lorraine\"\n                          :op2 \"Bracco\")))", "(p3 / person\n    :name (n3 / name\n              :op1 \"Lorraine\"\n              :op2 \"Bracco\"))", "(p / play-02\n   :ARG1 (p3 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG2 (w / wife))))", "(p / play-02\n   :time (w2 / work-of-art\n             :name (n / name\n                      :op1 \"Goodfellas\")))", "(p / play-02\n   :time (w2 / work-of-art\n             :poss (p4 / person\n                       :name (n2 / name\n                                 :op1 \"Martin\"\n                                 :op2 \"Scorsese\"))))", "(w2 / work-of-art\n    :name (n / name\n             :op1 \"Goodfellas\")\n    :poss (p4 / person\n              :name (n2 / name\n                        :op1 \"Martin\"\n                        :op2 \"Scorsese\")))", "(t / turn-down-05\n   :ARG1 (p5 / person\n             :name (n3 / name\n                       :op1 \"Bracco\")))", "(c / convince-01\n   :ARG2 (l / let-01\n            :ARG1 (p2 / play-02\n                      :ARG1 (d / doctor\n                               :name (n2 / name\n                                         :op1 \"Jennifer\"\n                                         :op2 \"Melfi\")))))", "(c / convince-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"David\"\n                     :op2 \"Chase\"))\n   :ARG2 (l / let-01\n            :ARG1 (p2 / play-02\n                      :ARG1 (d / doctor\n                               :name (n2 / name\n                                         :op1 \"Jennifer\"\n                                         :op2 \"Melfi\")))))", "(p / person\n   :name (n / name\n            :op1 \"David\"\n            :op2 \"Chase\")\n   :ARG0 (r / run-01\n            :ARG1 (s / show)))", "(l / let-01\n   :ARG1 (p2 / play-02\n             :ARG1 (d / doctor\n                      :name (n2 / name\n                                :op1 \"Jennifer\"\n                                :op2 \"Melfi\"))))", "(p2 / play-02\n    :ARG1 (d / doctor\n             :name (n2 / name\n                       :op1 \"Jennifer\"\n                       :op2 \"Melfi\")))"], "smus": ["The creators of The Sopranos have asked Carmela.", "The Sopranos was a creation.", "The Sopranos.", "Lorraine Bracco is a person.", "Lorraine Bracco", "Played wife.", "Played in Goodfellas.", "Played in Martin Scorsese's work of art.", "Goodfellas by Martin Scorsese", "Bracco was turned down.", "Let Dr. Jennifer Melfi play, he's convinced.", "David Chase was convinced to let Dr. Jennifer Melfi play.", "Show run by David Chase.", "Let Dr. Jennifer Melfi play.", "Play Doctor Jennifer Melfi."]}, {"instance_id": "realsumm-65", "summary": "<t> Kevin Carr set off on Carr epic journey from Haytor , Dartmoor in July 2013 . </t> <t> Carr is now less than 24 hours away from completing Carr epic trip . </t> <t> Mr Carr ran around the world unsupported - taking Carr own tent with Carr . </t> <t> Carr is set to break the previous record held by an Australian by 24 hours . </t>", "summary_trees": ["# ::snt  Kevin Carr set off on Carr epic journey from Haytor , Dartmoor in July 2013 . \n(s / set-off-06\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Kevin\"\n                  :op2 \"Carr\"))\n      :ARG1 (j / journey-01\n            :ARG0 p\n            :mod (e / epic))\n      :source (l / location\n            :name (n2 / name\n                  :op1 \"Haytor\")\n            :part-of (ii / island\n                  :name (n3 / name\n                        :op1 \"Dartmoor\")))\n      :time (d / date-entity\n            :month 7\n            :year 2013))", "# ::snt  Carr is now less than 24 hours away from completing Carr epic trip . \n(b / be-temporally-at-91\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Carr\"))\n      :ARG2 (a / away\n            :op1 (c / complete-01\n                  :ARG0 p\n                  :ARG1 (t / trip-03\n                        :ARG0 p\n                        :mod (e / epic)))\n            :duration (l / less-than\n                  :op1 (t2 / temporal-quantity\n                        :quant 24\n                        :unit (h / hour))))\n      :time (n2 / now))", "# ::snt  Mr Carr ran around the world unsupported - taking Carr own tent with Carr . \n(r / run-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Mr\"\n                  :op2 \"Carr\"))\n      :path (a / around\n            :op1 (w / world))\n      :manner (s / support-01\n            :polarity -\n            :ARG1 p)\n      :manner (t / take-01\n            :ARG0 p\n            :ARG1 (t2 / tent\n                  :poss p)\n            :prep-with p))", "# ::snt  Carr is set to break the previous record held by an Australian by 24 hours . \n(s / set-08\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Carr\"))\n      :ARG2 (b / break-02\n            :ARG0 p\n            :ARG1 (r / record\n                  :time (p2 / previous)\n                  :ARG1-of (h / hold-01\n                        :ARG0 (p3 / person\n                              :mod (c / country\n                                    :name (n2 / name\n                                          :op1 \"Australia\")))))\n            :extent (t / temporal-quantity\n                  :quant 24\n                  :unit (h2 / hour))))"], "tree": ["(s / set-off-06\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kevin\"\n                     :op2 \"Carr\")))", "(s / set-off-06\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kevin\"\n                     :op2 \"Carr\"))\n   :source (l / location\n              :name (n2 / name\n                        :op1 \"Haytor\")))", "(s / set-off-06\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kevin\"\n                     :op2 \"Carr\"))\n   :time (d / date-entity\n            :year 2013))", "(s / set-off-06\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kevin\"\n                     :op2 \"Carr\"))\n   :ARG1 (j / journey-01\n            :ARG0 p)\n   :time (d / date-entity\n            :month 7))", "(s / set-off-06\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kevin\"\n                     :op2 \"Carr\"))\n   :ARG1 (j / journey-01\n            :mod (e / epic))\n   :time (d / date-entity\n            :month 7))", "(b / be-temporally-at-91\n   :ARG2 (a / away\n            :duration (l / less-than\n                         :op1 (t2 / temporal-quantity\n                                  :quant 24))))", "(b / be-temporally-at-91\n   :ARG2 (a / away\n            :duration (l / less-than\n                         :op1 (t2 / temporal-quantity\n                                  :quant 24)))\n   :time (n2 / now))", "(b / be-temporally-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Carr\"))\n   :ARG2 (a / away\n            :duration (l / less-than\n                         :op1 (t2 / temporal-quantity\n                                  :quant 24)))\n   :time (n2 / now))", "(a / away\n   :op1 (c / complete-01\n           :ARG1 (t / trip-03\n                    :mod (e / epic)))\n   :duration (l / less-than\n                :op1 (t2 / temporal-quantity\n                         :quant 24)))", "(r / run-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mr\"\n                     :op2 \"Carr\")))", "(r / run-02\n   :path (a / around\n            :op1 (w / world)))", "(r / run-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mr\"\n                     :op2 \"Carr\"))\n   :path (a / around\n            :op1 (w / world)))", "(r / run-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mr\"\n                     :op2 \"Carr\"))\n   :manner (s / support-01\n              :polarity -\n              :ARG1 p))", "(r / run-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mr\"\n                     :op2 \"Carr\"))\n   :path (a / around\n            :op1 (w / world))\n   :manner (s / support-01\n              :polarity -\n              :ARG1 p))", "(s / set-08\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Carr\")))", "(s / set-08\n   :ARG2 (b / break-02\n            :ARG0 (p / person :name (n / name :op1 \"Carr\"))))", "(s / set-08\n   :ARG2 (b / break-02\n            :ARG1 (r / record\n                     :time (p2 / previous))))", "(s / set-08\n   :ARG2 (b / break-02\n            :extent (t / temporal-quantity\n                       :quant 24)))"], "smus": ["Kevin Carr set off.", "Kevin Carr set off from Haytor.", "Kevin Carr set off in 2013.", "In July, Kevin Carr set off on a journey.", "In July, Kevin Carr set off on an epic journey.", "less than 24 hours away.", "less than 24 hours away now.", "Carr is less than 24 hours away now.", "completing the epic trip is less than 24 hours away.", "Mr Carr ran.", "ran around the world.", "Mr Carr ran around the world.", "Mr Carr ran unsupported.", "Mr Carr ran around the world unsupported.", "Carr is set.", "Carr is set to break.", "Set to break previous record.", "Set to break in 24 hours."]}, {"instance_id": "realsumm-66", "summary": "<t> David Axelrod masterminded two Obama presidential election victories . </t> <t> Axelrod was hired by Labour leader Ed Miliband amid great fanfare last year . </t> <t> Revealed at a book launch that Axelrod is not resident for tax purposes in UK . </t> <t> Labour confirms Labour pays Mr Axelrod in dollars through consultancy firm . </t>", "summary_trees": ["# ::snt  David Axelrod masterminded two Obama presidential election victories . \n(m / mastermind-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"David\"\n                  :op2 \"Axelrod\"))\n      :ARG1 (w / win-01\n            :quant 2\n            :ARG1 (e / elect-01\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Obama\"))\n                  :ARG2 (p3 / president))))", "# ::snt  Axelrod was hired by Labour leader Ed Miliband amid great fanfare last year . \n(h / hire-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Ed\"\n                  :op2 \"Miliband\")\n            :ARG0-of (l / lead-02\n                  :ARG1 (p2 / political-party\n                        :name (n2 / name\n                              :op1 \"Labour\"))))\n      :ARG1 (p3 / person\n            :name (n3 / name\n                  :op1 \"Axelrod\"))\n      :time (y / year\n            :mod (l2 / last))\n      :manner (f / fanfare\n            :mod (g / great)))", "# ::snt  Revealed at a book launch that Axelrod is not resident for tax purposes in UK . \n(r / reveal-01\n      :ARG1 (r2 / reside-01\n            :polarity -\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Axelrod\"))\n            :ARG1 (c / country\n                  :name (n2 / name\n                        :op1 \"UK\"))\n            :purpose (t / tax-01))\n      :location (l / launch-01\n            :ARG1 (b / book)))", "# ::snt  Labour confirms Labour pays Mr Axelrod in dollars through consultancy firm . \n(c / confirm-01\n      :ARG0 (p / political-party\n            :name (n / name\n                  :op1 \"Labour\"))\n      :ARG1 (p2 / pay-01\n            :ARG0 p\n            :ARG2 (p3 / person\n                  :name (n2 / name\n                        :op1 \"Mr\"\n                        :op2 \"Axelrod\"))\n            :manner (d / dollar)\n            :instrument (f / firm\n                  :ARG0-of (c2 / consult-01))))"], "tree": ["(m / mastermind-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"David\"\n                     :op2 \"Axelrod\")))", "(m / mastermind-01\n   :ARG1 (w / win-01\n            :quant 2))", "(m / mastermind-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"David\"\n                     :op2 \"Axelrod\"))\n   :ARG1 (w / win-01\n            :quant 2))", "(m / mastermind-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"David\"\n                     :op2 \"Axelrod\"))\n   :ARG1 (w / win-01\n            :ARG1 (e / elect-01\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Obama\")))))", "(p / person\n   :name (n / name\n            :op1 \"David\"\n            :op2 \"Axelrod\"))", "(h / hire-01\n   :ARG1 (p3 / person\n             :name (n3 / name\n                       :op1 \"Axelrod\")))", "(h / hire-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ed\"\n                     :op2 \"Miliband\"))\n   :ARG1 (p3 / person\n             :name (n3 / name\n                       :op1 \"Axelrod\")))", "(h / hire-01\n   :ARG1 (p3 / person\n             :name (n3 / name\n                       :op1 \"Axelrod\"))\n   :time (y / year\n            :mod (l2 / last)))", "(h / hire-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ed\"\n                     :op2 \"Miliband\"))\n   :ARG1 (p3 / person\n             :name (n3 / name\n                       :op1 \"Axelrod\"))\n   :time (y / year\n            :mod (l2 / last)))", "(h / hire-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ed\"\n                     :op2 \"Miliband\"))\n   :ARG1 (p3 / person\n             :name (n3 / name\n                       :op1 \"Axelrod\"))\n   :time (y / year\n            :mod (l2 / last))\n   :manner (f / fanfare\n              :mod (g / great)))", "(r / reveal-01\n   :ARG1 (r2 / reside-01\n             :polarity -))", "(r / reveal-01\n   :location (l / launch-01\n                :ARG1 (b / book)))", "(r / reveal-01\n   :ARG1 (r2 / reside-01\n             :polarity -)\n   :location (l / launch-01\n                :ARG1 (b / book)))", "(r / reveal-01\n   :ARG1 (r2 / reside-01\n             :purpose (t / tax-01))\n   :location (l / launch-01\n                :ARG1 (b / book)))", "(p / person\n   :name (n / name\n            :op1 \"Axelrod\"))", "(c / confirm-01\n   :ARG0 (p / political-party\n            :name (n / name\n                     :op1 \"Labour\")))", "(c / confirm-01\n   :ARG1 (p2 / pay-01\n             :manner (d / dollar)))", "(c / confirm-01\n   :ARG0 (p / political-party\n            :name (n / name\n                     :op1 \"Labour\"))\n   :ARG1 (p2 / pay-01\n             :ARG0 p))", "(c / confirm-01\n   :ARG0 (p / political-party\n            :name (n / name\n                     :op1 \"Labour\"))\n   :ARG1 (p2 / pay-01\n             :manner (d / dollar)))", "(p2 / pay-01\n    :manner (d / dollar)\n    :instrument (f / firm\n                   :ARG0 (c2 / consult-01)))"], "smus": ["David Axelrod masterminded.", "Masterminded two victories.", "David Axelrod masterminded the two victories.", "David Axelrod masterminded the victory in the Obama election.", "David Axelrod", "Axelrod was hired.", "Ed Miliband has hired Axelrod.", "Axelrod was hired last year.", "Ed Miliband hired Axelrod last year.", "Ed Miliband hired Axelrod last year with great fanfare.", "It was revealed that the residence was not residing.", "revealed at book launch", "Not residing was revealed at the book's launch.", "The residency for tax purposes was revealed at the book's launch.", "Axelrod", "Labour confirms.", "confirms payments are made in dollars.", "Labour confirms it pays.", "Labour confirms dollars payments.", "The consulting firm pays by dollars."]}, {"instance_id": "realsumm-67", "summary": "<t> HBO is the US network behind Game of Thrones and the Sopranos . </t> <t> Service is available on Apple TV and iOS exclusively for three months . </t> <t> Apple has also cut the price of Apple TV system from $ 99 ( \u00a3 65 ) to $ 69 . </t>", "summary_trees": ["# ::snt  HBO is the US network behind Game of Thrones and the Sopranos . \n(n / network\n      :domain (b / broadcast-program\n            :name (n2 / name\n                  :op1 \"HBO\"))\n      :mod (c / country\n            :name (n3 / name\n                  :op1 \"US\"))\n      :location (b2 / behind\n            :op1 (a / and\n                  :op1 (b3 / broadcast-program\n                        :name (n4 / name\n                              :op1 \"Game\"\n                              :op2 \"of\"\n                              :op3 \"Thrones\"))\n                  :op2 (b4 / broadcast-program\n                        :name (n5 / name\n                              :op1 \"The\"\n                              :op2 \"Sapranos\")))))", "# ::snt  Service is available on Apple TV and iOS exclusively for three months . \n(a / available-02\n      :ARG2 (s / service)\n      :location (a2 / and\n            :op1 (p / product\n                  :name (n / name\n                        :op1 \"Apple\"\n                        :op2 \"TV\"))\n            :op2 (p2 / product\n                  :name (n2 / name\n                        :op1 \"iOS\")))\n      :duration (t / temporal-quantity\n            :quant 3\n            :unit (m / month)\n            :ARG0-of (e / exclusive-02)))", "# ::snt  Apple has also cut the price of Apple TV system from $ 99 ( \u00a3 65 ) to $ 69 . \n(c / cut-02\n      :ARG0 (c2 / company\n            :name (n / name\n                  :op1 \"Apple\"))\n      :ARG1 (p / price-01\n            :ARG1 (s / system\n                  :mod (p2 / product\n                        :name (n2 / name\n                              :op1 \"Apple\"\n                              :op2 \"TV\"))))\n      :ARG3 (m / monetary-quantity\n            :quant 99\n            :unit (d / dollar))\n      :ARG4 (m2 / monetary-quantity\n            :quant 69\n            :unit (d2 / dollar))\n      :mod (a / also))"], "tree": ["(n / network\n   :domain (b / broadcast-program\n              :name (n2 / name\n                        :op1 \"HBO\")))", "(n / network\n   :domain (b / broadcast-program\n              :name (n2 / name\n                        :op1 \"HBO\"))\n   :mod (c / country\n           :name (n3 / name\n                     :op1 \"US\")))", "(n / network\n   :domain (b / broadcast-program\n              :name (n2 / name\n                        :op1 \"HBO\"))\n   :location (b2 / behind\n                 :op1 (b3 / broadcast-program\n                          :name (n4 / name\n                                    :op1 \"Game\"\n                                    :op2 \"of\"\n                                    :op3 \"Thrones\"))))", "(n / network\n   :domain (b / broadcast-program\n              :name (n2 / name\n                        :op1 \"HBO\"))\n   :mod (c / country\n           :name (n3 / name\n                     :op1 \"US\"))\n   :location (b2 / behind\n                 :op1 (b3 / broadcast-program\n                          :name (n4 / name\n                                    :op1 \"Game\"\n                                    :op2 \"of\"\n                                    :op3 \"Thrones\"))))", "(n / network\n   :domain (b / broadcast-program\n              :name (n2 / name\n                        :op1 \"HBO\"))\n   :mod (c / country\n           :name (n3 / name\n                     :op1 \"US\"))\n   :location (b2 / behind\n                 :op1 (b4 / broadcast-program\n                          :name (n5 / name\n                                    :op1 \"The\"\n                                    :op2 \"Sapranos\"))))", "(a / available-02\n   :location (p / product\n                :name (n / name\n                         :op1 \"Apple\"\n                         :op2 \"TV\")))", "(a / available-02\n   :ARG2 (s / service)\n   :location (p / product\n                :name (n / name\n                         :op1 \"Apple\"\n                         :op2 \"TV\")))", "(a / available-02\n   :ARG2 (s / service)\n   :location (p2 / product\n                 :name (n2 / name\n                           :op1 \"iOS\")))", "(a2 / and\n    :op2 (p2 / product\n             :name (n2 / name\n                       :op1 \"iOS\")))", "(a2 / and\n    :op1 (p / product\n            :name (n / name\n                     :op1 \"Apple\"\n                     :op2 \"TV\"))\n    :op2 (p2 / product\n             :name (n2 / name\n                       :op1 \"iOS\")))", "(c / cut-02\n   :ARG0 (c2 / company\n             :name (n / name\n                      :op1 \"Apple\"))\n   :ARG1 (p / price-01\n            :ARG1 (s / system\n                     :mod (p2 / product\n                              :name (n2 / name\n                                        :op1 \"Apple\"\n                                        :op2 \"TV\")))))", "(c / cut-02\n   :ARG0 (c2 / company\n             :name (n / name\n                      :op1 \"Apple\"))\n   :mod (a / also))", "(c / cut-02\n   :ARG1 (p / price-01\n            :ARG1 (s / system\n                     :mod (p2 / product\n                              :name (n2 / name\n                                        :op1 \"Apple\"\n                                        :op2 \"TV\"))))\n   :mod (a / also))", "(c / cut-02\n   :ARG1 (p / price-01\n            :ARG1 (s / system\n                     :mod (p2 / product\n                              :name (n2 / name\n                                        :op1 \"Apple\"\n                                        :op2 \"TV\"))))\n   :ARG4 (m2 / monetary-quantity\n             :quant 69))", "(c / cut-02\n   :ARG0 (c2 / company\n             :name (n / name\n                      :op1 \"Apple\"))\n   :ARG1 (p / price-01\n            :ARG1 (s / system\n                     :mod (p2 / product\n                              :name (n2 / name\n                                        :op1 \"Apple\"\n                                        :op2 \"TV\"))))\n   :mod (a / also))"], "smus": ["HBO is a network.", "HBO is a US network.", "HBO is the network behind the Game of Thrones.", "HBO is the US network behind the Game of Thrones.", "HBO is the US network behind The Sapranos.", "available on Apple TV.", "Service is available on Apple TV.", "Service is available on iOS.", "and iOS.", "Apple TV and iOS.", "Apple has cut the price of the Apple TV system.", "Apple has also cut.", "Price for Apple TV system was also cut.", "Apple TV system price cut to 69.", "Apple has also cut the price of the Apple TV system."]}, {"instance_id": "realsumm-68", "summary": "<t> Huma Abedin came under fire for not tipping at Chipotle in Iowa . </t> <t> Abedin is Hillary Clinton 's most trusted aide for the 2016 campaign . </t> <t> On Saturday , aide and husband Anthony Weiner went for Mexican lunch . </t> <t> It is one of aide and Weiner final weekends before the campaign gets into swing . </t>", "summary_trees": ["# ::snt  Huma Abedin came under fire for not tipping at Chipotle in Iowa . \n(f / fire-02\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Huma\"\n                  :op2 \"Abedin\"))\n      :ARG2 (t / tip-02\n            :polarity -\n            :ARG0 p\n            :location (c / company\n                  :name (n2 / name\n                        :op1 \"Chipotle\")\n                  :location (s / state\n                        :name (n3 / name\n                              :op1 \"Iowa\")))))", "# ::snt  Abedin is Hillary Clinton 's most trusted aide for the 2016 campaign . \n(h / have-degree-91\n      :ARG1 (a / aide\n            :poss (p / person\n                  :name (n / name\n                        :op1 \"Hillary\"\n                        :op2 \"Clinton\"))\n            :domain (p2 / person\n                  :name (n2 / name\n                        :op1 \"Abedin\")))\n      :ARG2 (t / trust-01\n            :ARG0 p\n            :ARG1 a)\n      :ARG3 (m / most)\n      :ARG5 (c / campaign-01\n            :time (d / date-entity\n                  :year 2016)))", "# ::snt  On Saturday , aide and husband Anthony Weiner went for Mexican lunch . \n(g / go-02\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Anthony\"\n                        :op2 \"Weiner\")\n                  :ARG0-of (h / have-org-role-91\n                        :ARG2 (a2 / aide)))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Anthony\"\n                        :op2 \"Weiner\")\n                  :ARG0-of (h2 / have-rel-role-91\n                        :ARG2 (h3 / husband))))\n      :ARG4 (l / lunch\n            :mod (c / country\n                  :name (n3 / name\n                        :op1 \"Mexico\")))\n      :time (d / date-entity\n            :weekday (s / saturday)))", "# ::snt  It is one of aide and Weiner final weekends before the campaign gets into swing . \n(w / weekend\n      :ARG1-of (ii / include-91\n            :ARG2 (w2 / weekend\n                  :mod (f / final)\n                  :time (b / before\n                        :op1 (s / swing-06\n                              :ARG1 (c / campaign-01)))\n                  :poss (a / and\n                        :op1 (p / person\n                              :ARG0-of (a2 / aid-01))\n                        :op2 (p2 / person\n                              :name (n / name\n                                    :op1 \"Weiner\")))))\n      :domain (ii2 / it))"], "tree": ["(f / fire-02\n   :ARG2 (t / tip-02\n            :polarity -))", "(p / person\n   :name (n / name\n            :op1 \"Huma\"\n            :op2 \"Abedin\"))", "(c / company\n   :name (n2 / name\n             :op1 \"Chipotle\"))", "(c / company\n   :name (n2 / name\n             :op1 \"Chipotle\")\n   :location (s / state\n                :name (n3 / name\n                          :op1 \"Iowa\")))", "(s / state\n   :name (n3 / name\n             :op1 \"Iowa\"))", "(h / have-degree-91\n   :ARG1 (a / aide\n            :domain (p2 / person\n                        :name (n2 / name\n                                  :op1 \"Abedin\")))\n   :ARG2 (t / trust-01\n            :ARG1 a))", "(h / have-degree-91\n   :ARG1 (a / aide\n            :domain (p2 / person\n                        :name (n2 / name\n                                  :op1 \"Abedin\")))\n   :ARG2 (t / trust-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Hillary\"\n                              :op2 \"Clinton\")))\n   :ARG3 (m / most))", "(h / have-degree-91\n   :ARG1 (a / aide\n            :domain (p2 / person\n                        :name (n2 / name\n                                  :op1 \"Abedin\")))\n   :ARG2 (t / trust-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Hillary\"\n                              :op2 \"Clinton\")))\n   :ARG5 (c / campaign-01\n            :time (d / date-entity\n                     :year 2016)))", "(h / have-degree-91\n   :ARG1 (a / aide\n            :domain (p2 / person\n                        :name (n2 / name\n                                  :op1 \"Abedin\")))\n   :ARG2 (t / trust-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Hillary\"\n                              :op2 \"Clinton\")))\n   :ARG3 (m / most)\n   :ARG5 (c / campaign-01\n            :time (d / date-entity\n                     :year 2016)))", "(h / have-degree-91\n   :ARG1 (a / aide\n            :domain (p2 / person\n                        :name (n2 / name\n                                  :op1 \"Abedin\")))\n   :ARG2 (t / trust-01\n            :ARG1 a)\n   :ARG3 (m / most)\n   :ARG5 (c / campaign-01\n            :time (d / date-entity\n                     :year 2016)))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Anthony\"\n                     :op2 \"Weiner\")))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Anthony\"\n                     :op2 \"Weiner\"))\n   :ARG4 (l / lunch\n            :mod (c / country\n                    :name (n3 / name\n                              :op1 \"Mexico\"))))", "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Anthony\"\n                     :op2 \"Weiner\"))\n   :ARG4 (l / lunch\n            :mod (c / country\n                    :name (n3 / name\n                              :op1 \"Mexico\")))\n   :time (d / date-entity\n            :weekday (s / saturday)))", "(w / weekend\n   :ARG1 (ii / include-91\n             :ARG2 (w2 / weekend\n                       :time (b / before\n                                :op1 (s / swing-06\n                                        :ARG1 (c / campaign-01))))))", "(w / weekend\n   :ARG1 (ii / include-91\n             :ARG2 (w2 / weekend\n                       :mod (f / final)))\n   :domain (ii2 / it))", "(ii / include-91\n    :ARG2 (w2 / weekend\n              :mod (f / final)))", "(ii / include-91\n    :ARG2 (w2 / weekend\n              :time (b / before\n                       :op1 (s / swing-06\n                               :ARG1 (c / campaign-01)))))", "(w2 / weekend\n    :time (b / before\n             :op1 (s / swing-06\n                     :ARG1 (c / campaign-01))))"], "smus": ["Fired not tipped.", "Huma Abedin", "Chipotle.", "Chipotle, Iowa", "Iowa", "Abedin is a trusted aide.", "Abedin was Hillary Clinton's most trusted aide.", "Abedin was Hillary Clinton's trusted aide in the 2016 campaign.", "Abedin was Hillary Clinton's most trusted aide in the 2016 campaign.", "Abedin is the most trusted aide in the 2016 campaign.", "Anthony Weiner went.", "Anthony Weiner went to a Mexican lunch.", "Anthony Weiner went to a Mexican lunch Saturday.", "Weekends before the campaign swing.", "It was one of the final weekends.", "One of the final weekends.", "One of the weekends before the campaign swings in.", "Weekends before the campaign swings."]}, {"instance_id": "realsumm-69", "summary": "<t> Gary fell from 147th most popular British name in 1996 to 1,001st in 2013 . </t> <t> Reached height of height popularity in 1964 , when height was ranked 16th . </t> <t> Meanwhile , names including Dexter and Jenson are now in the top 100 . </t>", "summary_trees": ["# ::snt  Gary fell from 147th most popular British name in 1996 to 1,001st in 2013 . \n(f / fall-01\n      :ARG1 (n / name\n            :name (n2 / name\n                  :op1 \"Gary\"))\n      :ARG3 (r / rank-01\n            :ARG2 147\n            :ARG1 n\n            :ARG1-of (h / have-degree-91\n                  :ARG2 (p / popular-02\n                        :ARG1 n)\n                  :ARG3 (m / most)\n                  :ARG5 (n3 / name\n                        :mod (c / country\n                              :name (n4 / name\n                                    :op1 \"Britain\"))))\n            :time (d / date-entity\n                  :year 1996))\n      :ARG4 (r2 / rank-01\n            :ARG2 1091\n            :ARG1 n\n            :time (d2 / date-entity\n                  :year 2013)))", "# ::snt  Reached height of height popularity in 1964 , when height was ranked 16th . \n(r / reach-01\n      :ARG1 (h / high-02\n            :ARG1 (p / popularity)\n            :mod-of p)\n      :time (d / date-entity\n            :year 1964\n            :time-of (r2 / rank-01\n                  :ARG1 h\n                  :ARG2 16)))", "# ::snt  Meanwhile , names including Dexter and Jenson are now in the top 100 . \n(b / be-located-at-91\n      :ARG1 (n / name\n            :ARG2-of (ii / include-01\n                  :ARG1 (a / and\n                        :op1 (p / person\n                              :name (n2 / name\n                                    :op1 \"Dexter\"))\n                        :op2 (p2 / person\n                              :name (n3 / name\n                                    :op1 \"Jenson\")))))\n      :ARG2 (t / top\n            :ord (o / ordinal-entity\n                  :value 100))\n      :time (n4 / now)\n      :time (m / meanwhile))"], "tree": ["(f / fall-01\n   :ARG1 (n / name\n            :name (n2 / name\n                      :op1 \"Gary\")))", "(f / fall-01\n   :ARG3 (r / rank-01\n            :ARG1 (h / have-degree-91\n                     :ARG5 (n3 / name\n                               :mod (c / country\n                                       :name (n4 / name\n                                                 :op1 \"Britain\"))))))", "(f / fall-01\n   :ARG3 (r / rank-01\n            :time (d / date-entity\n                     :year 1996))\n   :ARG4 (r2 / rank-01\n             :time (d2 / date-entity\n                       :year 2013)))", "(f / fall-01\n   :ARG1 (n / name\n            :name (n2 / name\n                      :op1 \"Gary\"))\n   :ARG3 (r / rank-01\n            :time (d / date-entity\n                     :year 1996))\n   :ARG4 (r2 / rank-01\n             :time (d2 / date-entity\n                       :year 2013)))", "(n / name\n   :name (n2 / name\n             :op1 \"Gary\"))", "(r / reach-01\n   :time (d / date-entity\n            :year 1964))", "(r / reach-01\n   :time (d / date-entity\n            :time (r2 / rank-01\n                      :ARG2 16)))", "(r / reach-01\n   :ARG1 (h / high-02\n            :ARG1 (p / popularity\n                     :mod h))\n   :time (d / date-entity\n            :year 1964))", "(r / reach-01\n   :ARG1 (h / high-02\n            :ARG1 (p / popularity\n                     :mod h))\n   :time (d / date-entity\n            :time (r2 / rank-01\n                      :ARG1 h)))", "(r / reach-01\n   :ARG1 (h / high-02\n            :ARG1 (p / popularity\n                     :mod h))\n   :time (d / date-entity\n            :time (r2 / rank-01\n                      :ARG2 16)))", "(b / be-located-at-91\n   :ARG1 (n / name\n            :ARG2 (ii / include-01\n                      :ARG1 (p / person\n                               :name (n2 / name\n                                         :op1 \"Dexter\"))))\n   :ARG2 (t / top\n            :ord (o / ordinal-entity\n                    :value 100)))", "(b / be-located-at-91\n   :ARG1 (n / name\n            :ARG2 (ii / include-01\n                      :ARG1 (p / person\n                               :name (n2 / name\n                                         :op1 \"Dexter\"))))\n   :time (n4 / now))", "(b / be-located-at-91\n   :ARG1 (n / name\n            :ARG2 (ii / include-01\n                      :ARG1 (p2 / person\n                                :name (n3 / name\n                                          :op1 \"Jenson\"))))\n   :time (n4 / now))", "(b / be-located-at-91\n   :ARG1 (n / name\n            :ARG2 (ii / include-01\n                      :ARG1 (p / person\n                               :name (n2 / name\n                                         :op1 \"Dexter\"))))\n   :ARG2 (t / top\n            :ord (o / ordinal-entity\n                    :value 100))\n   :time (n4 / now))", "(n / name\n   :ARG2 (ii / include-01\n             :ARG1 (p2 / person\n                       :name (n3 / name\n                                 :op1 \"Jenson\"))))"], "smus": ["The name Gary fell.", "The British name rank fell.", "The rank fell from 1996 to 2013.", "Gary fell from 1996 to 2013.", "Gary", "Reached in 1964.", "Reached 16th in rank.", "In 1964, its popularity reached a high.", "At the time of its ranking, its popularity reached a high.", "At the time of the ranking, popularity reached a high.", "Names including Dexter are in the top 100.", "Now there are names including Dexter.", "Now there are names including Jenson.", "The names now in the top 100 include Dexter.", "names including jenson"]}, {"instance_id": "realsumm-70", "summary": "<t> Leanne Mitchell has been dropped by Mitchell label and sings at a holiday camp . </t> <t> Andrea Begley and Jermain Jackman are yet to become household names . </t> <t> Will 2015 winner Stevie become a chart success or another Voice flop ? </t> <t> . </t>", "summary_trees": ["# ::snt  Leanne Mitchell has been dropped by Mitchell label and sings at a holiday camp . \n(a / and\n      :op1 (d / drop-05\n            :ARG0 (l / label\n                  :mod (p / person\n                        :name (n / name\n                              :op1 \"Mitchell\")))\n            :ARG1 p)\n      :op2 (s / sing-01\n            :ARG0 p\n            :location (c / camp\n                  :mod (h / holiday))))", "# ::snt  Andrea Begley and Jermain Jackman are yet to become household names . \n(h / have-11\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Andrea\"\n                        :op2 \"Begley\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Jermain\"\n                        :op2 \"Jackman\")))\n      :ARG1 (y / yet)\n      :ARG2 (b / become-01\n            :ARG1 a\n            :ARG2 (n3 / name\n                  :mod (h2 / household))))", "# ::snt  Will 2015 winner Stevie become a chart success or another Voice flop ? \n(b / become-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Stevie\")\n            :ARG0-of (w / win-01\n                  :time (d / date-entity\n                        :year 2015)))\n      :ARG2 (a / amr-choice\n            :op1 (s / succeed-01\n                  :ARG0 p\n                  :ARG1 (c / chart-01))\n            :op2 (f / flop-01\n                  :ARG1 p\n                  :mod (v / voice-01)\n                  :mod (a2 / another))))", "# ::snt  . \n(a / amr-empty)"], "tree": ["(a / and\n   :op1 (d / drop-05\n           :ARG1 (p / person\n                    :name (n / name\n                             :op1 \"Mitchell\"))))", "(a / and\n   :op2 (s / sing-01\n           :ARG0 (p / person\n                    :name (n / name\n                             :op1 \"Mitchell\"))))", "(a / and\n   :op2 (s / sing-01\n           :location (c / camp\n                        :mod (h / holiday))))", "(a / and\n   :op1 (d / drop-05\n           :ARG1 (p / person\n                    :name (n / name\n                             :op1 \"Mitchell\")))\n   :op2 (s / sing-01\n           :location (c / camp\n                        :mod (h / holiday))))", "(s / sing-01\n   :location (c / camp\n                :mod (h / holiday)))", "(h / have-11\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Andrea\"\n                     :op2 \"Begley\"))\n   :ARG1 (y / yet))", "(h / have-11\n   :ARG1 (y / yet)\n   :ARG2 (b / become-01\n            :ARG2 (n3 / name\n                      :mod (h2 / household))))", "(h / have-11\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Andrea\"\n                     :op2 \"Begley\"))\n   :ARG1 (y / yet)\n   :ARG2 (b / become-01\n            :ARG2 (n3 / name\n                      :mod (h2 / household))))", "(a / and\n   :op1 (p / person\n           :name (n / name\n                    :op1 \"Andrea\"\n                    :op2 \"Begley\")))", "(p / person\n   :ARG0 (w / win-01\n            :time (d / date-entity\n                     :year 2015)))", "(a / amr-choice\n   :op1 (s / succeed-01\n           :ARG0 (p / person :name (n / name :op1 \"Stevie\"))))\n   :op2 (f / flop-01\n           :mod (a2 / another)))", "(a / amr-choice\n   :op1 (s / succeed-01\n           :ARG1 (c / chart-01))\n   :op2 (f / flop-01\n           :ARG1 (p / person :name (n / name :op1 \"Stevie\")))))", "(a / amr-choice\n   :op1 (s / succeed-01\n           :ARG1 (c / chart-01))\n   :op2 (f / flop-01\n           :mod (v / voice-01)))", "(a / amr-choice\n   :op1 (s / succeed-01\n           :ARG1 (c / chart-01))\n   :op2 (f / flop-01\n           :mod (a2 / another)))", "(a / amr-empty)"], "smus": ["And Mitchell was dropped.", "And Mitchell sings.", "and sings at a holiday camp.", "Mitchell dropped and sings at a holiday camp.", "sings in a holiday camp.", "Andrea Begley has yet to.", "Yet to become a household name.", "Andrea Begley has yet to become a household name.", "Andrea Begley", "The winner in 2015", "Steve's success or another flop?", "Chart success or flop for Steve?", "Chart Success or Voice Flop?", "Chart success or another flop?", "SetC-WP-01"]}, {"instance_id": "realsumm-71", "summary": "<t> Romanian - born Alexandra Harra , 28 , has become an Instagram star . </t> <t> Model , who 's posed for Playboy , posts selfies with inspirational messages . </t> <t> After dyeing locks black , being hailed as a rival to Kim Kardashian . </t>", "summary_trees": ["# ::snt  Romanian - born Alexandra Harra , 28 , has become an Instagram star . \n(b / become-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Alexandra\"\n                  :op2 \"Harra\")\n            :ARG1-of (b2 / bear-02\n                  :location (c / country\n                        :name (n2 / name\n                              :op1 \"Romania\")))\n            :age (t / temporal-quantity\n                  :quant 28\n                  :unit (y / year)))\n      :ARG2 (s / star\n            :mod (p2 / publication\n                  :name (n3 / name\n                        :op1 \"Instagram\"))))", "# ::snt  Model , who 's posed for Playboy , posts selfies with inspirational messages . \n(p / post-01\n      :ARG0 (m / model\n            :ARG0-of (p2 / pose-01\n                  :ARG2 (m2 / magazine\n                        :name (n / name\n                              :op1 \"Playboy\"))))\n      :ARG1 (s / selfie\n            :accompanier (m3 / message-01\n                  :ARG0-of (ii / inspire-01))))", "# ::snt  After dyeing locks black , being hailed as a rival to Kim Kardashian . \n(h / hail-02\n      :ARG1 (r / rival-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Kim\"\n                        :op2 \"Kardinez\")))\n      :time (a / after\n            :op1 (d / dye-01\n                  :ARG1 (l / lock)\n                  :ARG2 (b / black-04\n                        :ARG1 l))))"], "tree": ["(b / become-01\n   :ARG2 (s / star\n            :mod (p2 / publication\n                     :name (n3 / name\n                               :op1 \"Instagram\"))))", "(b / become-01\n   :ARG1 (p / person\n            :ARG1 (b2 / bear-02\n                      :location (c / country\n                                   :name (n2 / name\n                                             :op1 \"Romania\"))))\n   :ARG2 (s / star\n            :mod (p2 / publication\n                     :name (n3 / name\n                               :op1 \"Instagram\"))))", "(b / become-01\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :quant 28))\n   :ARG2 (s / star\n            :mod (p2 / publication\n                     :name (n3 / name\n                               :op1 \"Instagram\"))))", "(p / person\n   :ARG1 (b2 / bear-02\n             :location (c / country\n                          :name (n2 / name\n                                    :op1 \"Romania\"))))", "(p / person\n   :name (n / name\n            :op1 \"Alexandra\"\n            :op2 \"Harra\")\n   :ARG1 (b2 / bear-02\n             :location (c / country\n                          :name (n2 / name\n                                    :op1 \"Romania\")))\n   :age (t / temporal-quantity\n           :quant 28))", "(p / post-01\n   :ARG1 (s / selfie\n            :accompanier (m3 / message-01\n                             :ARG0 (ii / inspire-01))))", "(p / post-01\n   :ARG0 (m / model\n            :ARG0 (p2 / pose-01\n                      :ARG2 (m2 / magazine\n                                :name (n / name\n                                         :op1 \"Playboy\"))))\n   :ARG1 (s / selfie\n            :accompanier (m3 / message-01\n                             :ARG0 (ii / inspire-01))))", "(m / model\n   :ARG0 (p2 / pose-01\n             :ARG2 (m2 / magazine\n                       :name (n / name\n                                :op1 \"Playboy\"))))", "(p2 / pose-01\n    :ARG2 (m2 / magazine\n              :name (n / name\n                       :op1 \"Playboy\")))", "(s / selfie\n   :accompanier (m3 / message-01\n                    :ARG0 (ii / inspire-01)))", "(h / hail-02\n   :ARG1 (r / rival-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Kim\"\n                              :op2 \"Kardinez\")))\n   :time (a / after\n            :op1 (d / dye-01\n                    :ARG1 (l / lock))))", "(a / after\n   :op1 (d / dye-01\n           :ARG1 (l / lock)))", "(a / after\n   :op1 (d / dye-01\n           :ARG2 (b / black-04\n                    :ARG1 (l / lock))))", "(d / dye-01\n   :ARG2 (b / black-04\n            :ARG1 (l / lock)))", "(d / dye-01\n   :ARG1 (l / lock)\n   :ARG2 (b / black-04\n            :ARG1 l))"], "smus": ["Has become an Instagram star.", "Romanian born has become an Instagram star.", "The 28-year-old has become an Instagram star.", "Romanian born", "Alexandra Harra is a Romanian born.", "Posts selfies with inspiring messages", "Model posed for Playboy posts selfies with inspirational messages", "Model posed for Playboy", "Posing for Playboy.", "selfies with inspiring messages", "Kim Kardinez's rivalry was hailed after the locks were dyed.", "After the locks are dyed.", "After the locks are dyed black.", "The locks are dyed black.", "The locks were dyed black."]}, {"instance_id": "realsumm-72", "summary": "<t> Nadir Ciftci celebrated by blowing a kiss at rival goalkeeper Scott Bain . </t> <t> However , Ciftci was left blushing as rivals earned impressive victory . </t> <t> Win gave hosts Dundee rivals first derby win in more than a decade . </t> <t> Goals from Greg Stewart , Jake McPake and Paul Heffernen secured win . </t>", "summary_trees": ["# ::snt  Nadir Ciftci celebrated by blowing a kiss at rival goalkeeper Scott Bain . \n(c / celebrate-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Nadir\"\n                  :op2 \"Ciftci\"))\n      :manner (b / blow-01\n            :ARG0 p\n            :ARG1 (k / kiss-01\n                  :ARG0 p\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Scott\"\n                              :op2 \"Bain\")\n                        :ARG0-of (g / goalkeeper-01)\n                        :ARG0-of (r / rival-01\n                              :ARG1 p)))))", "# ::snt  However , Ciftci was left blushing as rivals earned impressive victory . \n(c / contrast-01\n      :ARG2 (l / leave-13\n            :ARG0 (e / earn-01\n                  :ARG0 (r / rival)\n                  :ARG1 (w / win-01\n                        :ARG0 r\n                        :ARG0-of (ii / impress-01)))\n            :ARG1 (b / blush-01\n                  :ARG1 (p / person\n                        :name (n / name\n                              :op1 \"Ciftci\")))))", "# ::snt  Win gave hosts Dundee rivals first derby win in more than a decade . \n(g / give-01\n      :ARG0 (w / win-01)\n      :ARG1 (w2 / win-01\n            :ARG0 (t / team\n                  :ARG0-of (h / host-01))\n            :mod (d / derby)\n            :ord (o / ordinal-entity\n                  :value 1\n                  :range (m / more-than\n                        :op1 (t2 / temporal-quantity\n                              :quant 1\n                              :unit (d2 / decade)))))\n      :ARG2 (t3 / team\n            :name (n / name\n                  :op1 \"Dundee\")\n            :ARG0-of (r / rival-01\n                  :ARG1 t)))", "# ::snt  Goals from Greg Stewart , Jake McPake and Paul Heffernen secured win . \n(s / secure-02\n      :ARG0 (g / goal\n            :source (a / and\n                  :op1 (p / person\n                        :name (n / name\n                              :op1 \"Greg\"\n                              :op2 \"Stewart\"))\n                  :op2 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Jake\"\n                              :op2 \"McPake\"))\n                  :op3 (p3 / person\n                        :name (n3 / name\n                              :op1 \"Paul\"\n                              :op2 \"Heffernen\"))))\n      :ARG1 (w / win-01))"], "tree": ["(c / celebrate-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nadir\"\n                     :op2 \"Ciftci\")))", "(c / celebrate-01\n   :manner (b / blow-01\n              :ARG0 (p / person :name (n / name :op1 \"Nadir\" :op2 \"Ciftci\"))\n              :ARG1 (k / kiss-01)))", "(p / person\n   :name (n / name\n            :op1 \"Nadir\"\n            :op2 \"Ciftci\"))", "(b / blow-01\n   :ARG1 (k / kiss-01\n            :ARG1 (p2 / person\n                      :ARG0 (g / goalkeeper-01))))", "(c / contrast-01\n   :ARG2 (l / leave-13\n            :ARG1 (b / blush-01\n                     :ARG1 (p / person\n                              :name (n / name\n                                       :op1 \"Ciftci\")))))", "(l / leave-13\n   :ARG0 (e / earn-01\n            :ARG0 (r / rival))\n   :ARG1 (b / blush-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Ciftci\"))))", "(l / leave-13\n   :ARG0 (e / earn-01\n            :ARG1 (w / win-01\n                     :ARG0 (r / rival)))\n   :ARG1 (b / blush-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Ciftci\"))))", "(e / earn-01\n   :ARG0 (r / rival)\n   :ARG1 (w / win-01\n            :ARG0 r))", "(e / earn-01\n   :ARG0 (r / rival)\n   :ARG1 (w / win-01\n            :ARG0 (ii / impress-01)))", "(g / give-01\n   :ARG1 (w2 / win-01\n             :mod (d / derby)))", "(g / give-01\n   :ARG0 (w / win-01)\n   :ARG1 (w2 / win-01\n             :mod (d / derby))\n   :ARG2 (t3 / team\n             :name (n / name\n                      :op1 \"Dundee\")))", "(g / give-01\n   :ARG0 (w / win-01)\n   :ARG1 (w2 / win-01\n             :mod (d / derby))\n   :ARG2 (t3 / team\n             :ARG0 (r / rival-01\n                      :ARG1 (t / team))))", "(o / ordinal-entity\n   :range (m / more-than\n             :op1 (t2 / temporal-quantity\n                      :unit (d2 / decade))))", "(s / secure-02\n   :ARG0 (g / goal\n            :source (p / person\n                       :name (n / name\n                                :op1 \"Greg\"\n                                :op2 \"Stewart\")))\n   :ARG1 (w / win-01))", "(s / secure-02\n   :ARG0 (g / goal\n            :source (p3 / person\n                        :name (n3 / name\n                                  :op1 \"Paul\"\n                                  :op2 \"Heffernen\")))\n   :ARG1 (w / win-01))", "(g / goal\n   :source (p / person\n              :name (n / name\n                       :op1 \"Greg\"\n                       :op2 \"Stewart\")))", "(a / and\n   :op1 (p / person\n           :name (n / name\n                    :op1 \"Greg\"\n                    :op2 \"Stewart\"))\n   :op2 (p2 / person\n            :name (n2 / name\n                      :op1 \"Jake\"\n                      :op2 \"McPake\")))", "(p / person\n   :name (n / name\n            :op1 \"Greg\"\n            :op2 \"Stewart\"))"], "smus": ["Nadir Ciftci was celebrated.", "Nadir ciftci was celebrated by blowing a kiss.", "Nadir Ciftci", "blowing a kiss to the goalkeeper.", "But Ciftci was left blushing.", "Rivals earned, leaving Cifitci blushing.", "The fact that rivals earned a victory left Ciftci blushing.", "The rivals earned a victory.", "The rivals earned an impressive victory.", "gave a derby win.", "The win gave Dundee a derby victory.", "The win gave the derby victory to the rivals.", "more than a decade", "Greg Stewart's goals secured the victory.", "Paul Heffernen's goals secured the victory.", "Goals from Greg Stewart", "Greg Stewart and Jake McPake.", "Greg Stewart"]}, {"instance_id": "realsumm-73", "summary": "<t> Mercedes - Benz Fashion Week Australia 2015 came to a close on Thursday night in Sydney . </t> <t> Stand - out shows included Maticevski , Romance Was Born , Tome , Steven Khalil and Johanna Johnson . </t> <t> Sheer and metallic fabrics and slouchy and voluminous silhouettes were recurring trends . </t>", "summary_trees": ["# ::snt  Mercedes - Benz Fashion Week Australia 2015 came to a close on Thursday night in Sydney . \n(c / close-01\n      :ARG1 (e / event\n            :name (n / name\n                  :op1 \"Mercedes-Benz\"\n                  :op2 \"Fashion\"\n                  :op3 \"Week\"\n                  :op4 \"Australia\")\n            :time (d / date-entity\n                  :year 2015\n                  :weekday (t / thursday)\n                  :dayperiod (n2 / night))\n            :location (c2 / city\n                  :name (n3 / name\n                        :op1 \"Sydney\"))))", "# ::snt  Stand - out shows included Maticevski , Romance Was Born , Tome , Steven Khalil and Johanna Johnson . \n(ii / include-91\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Maticevski\"))\n            :op2 (w / work-of-art\n                  :name (n2 / name\n                        :op1 \"Romance\"\n                        :op2 \"Was\"\n                        :op3 \"Born\"))\n            :op3 (p2 / person\n                  :name (n3 / name\n                        :op1 \"Tome\"))\n            :op4 (p3 / person\n                  :name (n4 / name\n                        :op1 \"Steven\"\n                        :op2 \"Khalil\"))\n            :op5 (p4 / person\n                  :name (n5 / name\n                        :op1 \"Johanna\"\n                        :op2 \"Johnson\")))\n      :ARG2 (s / show-04\n            :ARG1-of (s2 / stand-out-06)))", "# ::snt  Sheer and metallic fabrics and slouchy and voluminous silhouettes were recurring trends . \n(t / trend\n      :ARG1-of (r / repeat-01)\n      :domain (a / and\n            :op1 (f / fabric\n                  :mod (s / sheer)\n                  :mod (m / metallic))\n            :op2 (s2 / silhouette\n                  :mod (s3 / slouchy)\n                  :mod (v / voluminous))))"], "tree": ["(e / event\n   :name (n / name\n            :op1 \"Mercedes-Benz\"\n            :op2 \"Fashion\"\n            :op3 \"Week\"\n            :op4 \"Australia\"))", "(e / event\n   :time (d / date-entity\n            :weekday (t / thursday)))", "(e / event\n   :name (n / name\n            :op1 \"Mercedes-Benz\"\n            :op2 \"Fashion\"\n            :op3 \"Week\"\n            :op4 \"Australia\")\n   :time (d / date-entity\n            :year 2015))", "(e / event\n   :time (d / date-entity\n            :weekday (t / thursday))\n   :location (c2 / city\n                 :name (n3 / name\n                           :op1 \"Sydney\")))", "(d / date-entity\n   :weekday (t / thursday)\n   :dayperiod (n2 / night))", "(ii / include-91\n    :ARG1 (p2 / person\n              :name (n3 / name\n                        :op1 \"Tome\"))\n    :ARG2 (s / show-04\n             :ARG1 (s2 / stand-out-06)))", "(ii / include-91\n    :ARG1 (p3 / person\n              :name (n4 / name\n                        :op1 \"Steven\"\n                        :op2 \"Khalil\"))\n    :ARG2 (s / show-04\n             :ARG1 (s2 / stand-out-06)))", "(a / and\n   :op2 (w / work-of-art\n           :name (n2 / name\n                     :op1 \"Romance\"\n                     :op2 \"Was\"\n                     :op3 \"Born\")))", "(a / and\n   :op2 (w / work-of-art\n           :name (n2 / name\n                     :op1 \"Romance\"\n                     :op2 \"Was\"\n                     :op3 \"Born\"))\n   :op3 (p2 / person\n            :name (n3 / name\n                      :op1 \"Tome\"))\n   :op5 (p4 / person\n            :name (n5 / name\n                      :op1 \"Johanna\"\n                      :op2 \"Johnson\")))", "(a / and\n   :op3 (p2 / person\n            :name (n3 / name\n                      :op1 \"Tome\"))\n   :op4 (p3 / person\n            :name (n4 / name\n                      :op1 \"Steven\"\n                      :op2 \"Khalil\"))\n   :op5 (p4 / person\n            :name (n5 / name\n                      :op1 \"Johanna\"\n                      :op2 \"Johnson\")))", "(t / trend\n   :domain (f / fabric\n              :mod (s / sheer)))", "(t / trend\n   :domain (f / fabric\n              :mod (m / metallic)))", "(a / and\n   :op2 (s2 / silhouette\n            :mod (s3 / slouchy)))", "(a / and\n   :op1 (f / fabric\n           :mod (s / sheer))\n   :op2 (s2 / silhouette\n            :mod (s3 / slouchy)))", "(a / and\n   :op1 (f / fabric\n           :mod (m / metallic))\n   :op2 (s2 / silhouette\n            :mod (s3 / slouchy)))"], "smus": ["Mercedes-Benz Fashion Week Australia", "Thursday.", "Mercedes-Benz Fashion Week Australia 2015", "Thursday in Sydney.", "Thursday night", "Tome was one of the stand out shows.", "Steven Khalil was one of the stand out shows.", "And Romance Was Born.", "Romance Was Born, Tome, and Johanna Johnson.", "Tome, Steven Khalil, and Johanna Johnson.", "sheer fabrics are trends.", "Metallic fabrics are trends.", "and slouchy silhouettes.", "sheer fabrics and slouchy silhouettes.", "metallic fabrics and slouchy silhouettes"]}, {"instance_id": "realsumm-74", "summary": "<t> Lindsay Sandiford fears Sandiford will be next to face the firing squad . </t> <t> Andrew Chan and Myuran Sukumaran killed after a final KFC bucket meal . </t> <t> The 58-year - old has been on death row in Bali since 2012 . </t> <t> Bali was convicted of attempting to smuggle \u00a3 1.6million of cocaine in 2012 . </t>", "summary_trees": ["# ::snt  Lindsay Sandiford fears Sandiford will be next to face the firing squad . \n(f / fear-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Lindsay\"\n                  :op2 \"Sandiford\"))\n      :ARG1 (n2 / next\n            :domain p\n            :prep-to (f2 / face-01\n                  :ARG0 p\n                  :ARG1 (s / squad\n                        :ARG0-of (f3 / fire-01)))))", "# ::snt  Andrew Chan and Myuran Sukumaran killed after a final KFC bucket meal . \n(k / kill-01\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Andrew\"\n                        :op2 \"Chan\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Myuran\"\n                        :op2 \"Sukumaran\")))\n      :time (a2 / after\n            :op1 (m / meal\n                  :mod (b / bucket)\n                  :mod (c / company\n                        :name (n3 / name\n                              :op1 \"KFC\"))\n                  :mod (f / final))))", "# ::snt  The 58-year - old has been on death row in Bali since 2012 . \n(b / be-located-at-91\n      :ARG1 (p / person\n            :age (t / temporal-quantity\n                  :quant 58\n                  :unit (y / year)))\n      :ARG2 (r / row\n            :mod (d / die-01))\n      :location (ii / island\n            :name (n / name\n                  :op1 \"Bali\"))\n      :time (s / since\n            :op1 (d2 / date-entity\n                  :year 2012)))", "# ::snt  Bali was convicted of attempting to smuggle \u00a3 1.6million of cocaine in 2012 . \n(c / convict-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Bali\"))\n      :ARG2 (a / attempt-01\n            :ARG0 p\n            :ARG1 (s / smuggle-01\n                  :ARG0 p\n                  :ARG1 (c2 / cocaine\n                        :quant (m / monetary-quantity\n                              :quant 1600000\n                              :unit (p2 / pound))))\n            :time (d / date-entity\n                  :year 2012)))"], "tree": ["(f / fear-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lindsay\"\n                     :op2 \"Sandiford\")))", "(f / fear-01\n   :ARG1 (n2 / next\n             :domain (p / person :name (n / name :op1 \"Lindsay\" :op2 \"Sandiford\"))))", "(f / fear-01\n   :ARG1 (n2 / next\n             :prep-to (f2 / face-01\n                          :ARG1 (s / squad\n                                   :ARG0 (f3 / fire-01)))))", "(f / fear-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lindsay\"\n                     :op2 \"Sandiford\"))\n   :ARG1 (n2 / next\n             :prep-to (f2 / face-01\n                          :ARG1 (s / squad\n                                   :ARG0 (f3 / fire-01)))))", "(p / person\n   :name (n / name\n            :op1 \"Lindsay\"\n            :op2 \"Sandiford\"))", "(k / kill-01\n   :time (a2 / after\n             :op1 (m / meal\n                     :mod (c / company\n                             :name (n3 / name\n                                       :op1 \"KFC\")))))", "(k / kill-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Andrew\"\n                     :op2 \"Chan\"))\n   :time (a2 / after\n             :op1 (m / meal\n                     :mod (b / bucket))))", "(k / kill-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Andrew\"\n                     :op2 \"Chan\"))\n   :time (a2 / after\n             :op1 (m / meal\n                     :mod (c / company\n                             :name (n3 / name\n                                       :op1 \"KFC\")))))", "(k / kill-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Myuran\"\n                       :op2 \"Sukumaran\"))\n   :time (a2 / after\n             :op1 (m / meal\n                     :mod (b / bucket))))", "(k / kill-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Myuran\"\n                       :op2 \"Sukumaran\"))\n   :time (a2 / after\n             :op1 (m / meal\n                     :mod (c / company\n                             :name (n3 / name\n                                       :op1 \"KFC\")))))", "(b / be-located-at-91\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :quant 58))\n   :ARG2 (r / row\n            :mod (d / die-01)))", "(b / be-located-at-91\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :quant 58))\n   :ARG2 (r / row\n            :mod (d / die-01))\n   :location (ii / island\n                 :name (n / name\n                          :op1 \"Bali\")))", "(b / be-located-at-91\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :quant 58))\n   :ARG2 (r / row\n            :mod (d / die-01))\n   :time (s / since\n            :op1 (d2 / date-entity\n                     :year 2012)))", "(b / be-located-at-91\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :quant 58))\n   :ARG2 (r / row\n            :mod (d / die-01))\n   :location (ii / island\n                 :name (n / name\n                          :op1 \"Bali\"))\n   :time (s / since\n            :op1 (d2 / date-entity\n                     :year 2012)))", "(s / since\n   :op1 (d2 / date-entity\n            :year 2012))", "(c / convict-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Bali\")))", "(c / convict-01\n   :ARG2 (a / attempt-01\n            :ARG0 (p / person :name (n / name :op1 \"Bali\"))))", "(c / convict-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Bali\"))\n   :ARG2 (a / attempt-01\n            :ARG1 (s / smuggle-01\n                     :ARG0 p)))", "(c / convict-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Bali\"))\n   :ARG2 (a / attempt-01\n            :time (d / date-entity\n                     :year 2012)))"], "smus": ["Lindsay Sandiford fears.", "Lindsay Sandiford fears he's the next.", "Fears the next to face a firing squad.", "Lindsay Sandiford fears the firing squad will be next.", "Lindsay Sandiford", "Killed after a KFC meal.", "Andrew Chan killed after a bucket meal.", "Andrew Chan killed after a KFC meal.", "Myuran Sukumaran killed after a bucket meal.", "Myuran Sukumaran killed after a KFC meal.", "The 58-year-old is on death row.", "58-year-old on death row in Bali", "The 58-year-old has been on death row since 2012.", "58-year-old on death row in Bali since 2012.", "since 2012", "Bali was convicted.", "Bali was convicted of attempting.", "Bali was convicted of attempting to smuggle.", "Bali was convicted of attempting in 2012."]}, {"instance_id": "realsumm-75", "summary": "<t> Abby Bishop took in Bishop two - day - old niece Zala in August 2013 . </t> <t> Now Zala is 20 months old and Zala follows Bishop as Zala travels the world playing for professional basketball teams . </t> <t> Bishop said world was a big decision but Zala would n't change anything . </t> <t> Zala will go with Bishop when Zala starts playing in the U.S. WNBA in May. </t>", "summary_trees": ["# ::snt  Abby Bishop took in Bishop two - day - old niece Zala in August 2013 . \n(t / take-in-06\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Abby\"\n                  :op2 \"Bishop\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Zala\")\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 p\n                  :ARG2 (n3 / niece))\n            :age (t2 / temporal-quantity\n                  :quant 2\n                  :unit (d / day)))\n      :time (d2 / date-entity\n            :month 8\n            :year 2013))", "# ::snt  Now Zala is 20 months old and Zala follows Bishop as Zala travels the world playing for professional basketball teams . \n(a / and\n      :op1 (a2 / age-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Zala\"))\n            :ARG2 (t / temporal-quantity\n                  :quant 20\n                  :unit (m / month))\n            :time (n2 / now))\n      :op2 (f / follow-01\n            :ARG1 p\n            :ARG2 (p2 / person\n                  :name (n3 / name\n                        :op1 \"Bishop\"))\n            :time (t2 / travel-01\n                  :ARG0 p\n                  :ARG1 (w / world)\n                  :manner (p3 / play-01\n                        :ARG0 p\n                        :ARG2 (t3 / team\n                              :mod (b / basketball)\n                              :mod (p4 / professional))))))", "# ::snt  Bishop said world was a big decision but Zala would n't change anything . \n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Bishop\"))\n      :ARG1 (c / contrast-01\n            :ARG1 (d / decide-01\n                  :ARG3 (w / world)\n                  :mod (b / big))\n            :ARG2 (c2 / change-01\n                  :polarity -\n                  :ARG0 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Zala\"))\n                  :ARG1 (a / anything))))", "# ::snt  Zala will go with Bishop when Zala starts playing in the U.S. WNBA in May. \n(g / go-21\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Zala\"))\n      :ARG2 (p2 / person\n            :name (n2 / name\n                  :op1 \"Bishop\"))\n      :time (s / start-01\n            :ARG0 p\n            :ARG1 (p3 / play-01\n                  :ARG0 p\n                  :ARG3 (l / league\n                        :name (n3 / name\n                              :op1 \"WNBA\")\n                        :mod (c / country\n                              :name (n4 / name\n                                    :op1 \"U.S.\"))))\n            :time (d / date-entity\n                  :month 5)))"], "tree": ["(t / take-in-06\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Abby\"\n                     :op2 \"Bishop\")))", "(t / take-in-06\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Abby\"\n                     :op2 \"Bishop\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Zala\")))", "(t / take-in-06\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Abby\"\n                     :op2 \"Bishop\"))\n   :time (d2 / date-entity\n             :month 8))", "(t / take-in-06\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Abby\"\n                     :op2 \"Bishop\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Zala\"))\n   :time (d2 / date-entity\n             :month 8))", "(a / and\n   :op2 (f / follow-01\n           :ARG2 (p2 / person\n                     :name (n3 / name\n                               :op1 \"Bishop\"))))", "(a / and\n   :op2 (f / follow-01\n           :time (t2 / travel-01\n                     :manner (p3 / play-01\n                                 :ARG2 (t3 / team\n                                           :mod (b / basketball))))))", "(f / follow-01\n   :ARG2 (p2 / person\n             :name (n3 / name\n                       :op1 \"Bishop\")))", "(t2 / travel-01\n    :ARG1 (w / world)\n    :manner (p3 / play-01\n                :ARG0 (p / person :name (n / name :op1 \"Zala\"))\n                :ARG2 (t3 / team)))", "(p3 / play-01\n    :ARG2 (t3 / team\n              :mod (b / basketball)))", "(s / say-01\n   :ARG1 (c / contrast-01\n            :ARG2 (c2 / change-01\n                      :polarity -)))", "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Bishop\"))\n   :ARG1 (c / contrast-01\n            :ARG2 (c2 / change-01\n                      :polarity -)))", "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Bishop\"))\n   :ARG1 (c / contrast-01\n            :ARG1 (d / decide-01\n                     :mod (b / big))))", "(p / person\n   :name (n / name\n            :op1 \"Bishop\"))", "(c / contrast-01\n   :ARG1 (d / decide-01\n            :mod (b / big))\n   :ARG2 (c2 / change-01\n             :polarity -))", "(g / go-21\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Zala\"))\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Bishop\")))", "(g / go-21\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Zala\"))\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Bishop\"))\n   :time (s / start-01\n            :ARG1 (p3 / play-01\n                      :ARG0 p)))", "(s / start-01\n   :time (d / date-entity\n            :month 5))", "(s / start-01\n   :ARG1 (p3 / play-01\n             :ARG0 (p / person :name (n / name :op1 \"Zala\")))\n   :time (d / date-entity\n            :month 5))", "(s / start-01\n   :ARG1 (p3 / play-01\n             :ARG3 (l / league\n                      :name (n3 / name\n                                :op1 \"WNBA\")))\n   :time (d / date-entity\n            :month 5))"], "smus": ["Abby Bishop took in.", "Abby Bishop took in Zala.", "In August, Abby Bishop took in.", "In August, Abby Bishop took in Zala.", "And follows Bishop.", "and follows as it travels playing for basketball teams.", "Follows Bishop.", "Sala travels the world playing for teams.", "Playing for basketball teams.", "But it won't change,\" he said.", "But it won't change,\" Bishop said.", "But it was a big decision, Bishop said.", "Bishop", "It's a big decision, but it won't change.", "Zala will go with Bishop.", "When zala starts playing he will go to bishop.", "Starts May", "Sala starts playing in May.", "Playing in the WNBA starts in May."]}, {"instance_id": "realsumm-76", "summary": "<t> ONE Pro Cycling preparing to take on Team Sky and Sir Bradley Wiggins . </t> <t> Tour de Yorkshire runs over three stages starting in Bridlington on May 1 . </t> <t> Prior 's team and Yorkshire race inspired by Tour de France Grand Depart . </t>", "summary_trees": ["# ::snt  ONE Pro Cycling preparing to take on Team Sky and Sir Bradley Wiggins . \n(p / prepare-02\n      :ARG0 (o / organization\n            :name (n / name\n                  :op1 \"One\"\n                  :op2 \"Pro\"\n                  :op3 \"Cycling\"))\n      :ARG1 (t / take-on-21\n            :ARG0 o\n            :ARG1 (a / and\n                  :op1 (t2 / team\n                        :name (n2 / name\n                              :op1 \"Team\"\n                              :op2 \"Sky\"))\n                  :op2 (p2 / person\n                        :name (n3 / name\n                              :op1 \"Sir\"\n                              :op2 \"Bradley\"\n                              :op3 \"Wiggins\")))))", "# ::snt  Tour de Yorkshire runs over three stages starting in Bridlington on May 1 . \n(r / run-over-04\n      :ARG1 (t / tour\n            :name (n / name\n                  :op1 \"Tour\"\n                  :op2 \"de\"\n                  :op3 \"Yorkshire\"))\n      :ARG2 (s / stage\n            :quant 3)\n      :ARG1-of (s2 / start-01\n            :location (c / city\n                  :name (n2 / name\n                        :op1 \"Bridlington\"))\n            :time (d / date-entity\n                  :day 1\n                  :month 5)))", "# ::snt  Prior 's team and Yorkshire race inspired by Tour de France Grand Depart . \n(ii / inspire-01\n      :ARG0 (t / tour\n            :name (n / name\n                  :op1 \"Tour\"\n                  :op2 \"de\"\n                  :op3 \"France\"\n                  :op4 \"Grand\"\n                  :op5 \"Depart\"))\n      :ARG1 (a / and\n            :op1 (t2 / team\n                  :poss (p / person\n                        :name (n2 / name\n                              :op1 \"Prior\")))\n            :op2 (r / race-02\n                  :ARG0 p\n                  :location (c / county\n                        :name (n3 / name\n                              :op1 \"Yorkshire\")))))"], "tree": ["(p / prepare-02\n   :ARG0 (o / organization\n            :name (n / name\n                     :op1 \"One\"\n                     :op2 \"Pro\"\n                     :op3 \"Cycling\")))", "(p / prepare-02\n   :ARG1 (t / take-on-21\n            :ARG1 (t2 / team\n                      :name (n2 / name\n                                :op1 \"Team\"\n                                :op2 \"Sky\"))))", "(p / prepare-02\n   :ARG1 (t / take-on-21\n            :ARG1 (p2 / person\n                      :name (n3 / name\n                                :op1 \"Sir\"\n                                :op2 \"Bradley\"\n                                :op3 \"Wiggins\"))))", "(p / prepare-02\n   :ARG0 (o / organization\n            :name (n / name\n                     :op1 \"One\"\n                     :op2 \"Pro\"\n                     :op3 \"Cycling\"))\n   :ARG1 (t / take-on-21\n            :ARG1 (t2 / team\n                      :name (n2 / name\n                                :op1 \"Team\"\n                                :op2 \"Sky\"))))", "(p / prepare-02\n   :ARG0 (o / organization\n            :name (n / name\n                     :op1 \"One\"\n                     :op2 \"Pro\"\n                     :op3 \"Cycling\"))\n   :ARG1 (t / take-on-21\n            :ARG1 (p2 / person\n                      :name (n3 / name\n                                :op1 \"Sir\"\n                                :op2 \"Bradley\"\n                                :op3 \"Wiggins\"))))", "(r / run-over-04\n   :ARG2 (s / stage\n            :quant 3))", "(r / run-over-04\n   :ARG1 (t / tour\n            :name (n / name\n                     :op1 \"Tour\"\n                     :op2 \"de\"\n                     :op3 \"Yorkshire\"))\n   :ARG2 (s / stage\n            :quant 3))", "(t / tour\n   :name (n / name\n            :op1 \"Tour\"\n            :op2 \"de\"\n            :op3 \"Yorkshire\"))", "(s2 / start-01\n    :time (d / date-entity\n             :day 1))", "(s2 / start-01\n    :time (d / date-entity\n             :month 5))", "(ii / inspire-01\n    :ARG0 (t / tour\n             :name (n / name\n                      :op1 \"Tour\"\n                      :op2 \"de\"\n                      :op3 \"France\"\n                      :op4 \"Grand\"\n                      :op5 \"Depart\")))", "(ii / inspire-01\n    :ARG0 (t / tour\n             :name (n / name\n                      :op1 \"Tour\"\n                      :op2 \"de\"\n                      :op3 \"France\"\n                      :op4 \"Grand\"\n                      :op5 \"Depart\"))\n    :ARG1 (t2 / team\n              :poss (p / person\n                       :name (n2 / name\n                                 :op1 \"Prior\"))))", "(ii / inspire-01\n    :ARG0 (t / tour\n             :name (n / name\n                      :op1 \"Tour\"\n                      :op2 \"de\"\n                      :op3 \"France\"\n                      :op4 \"Grand\"\n                      :op5 \"Depart\"))\n    :ARG1 (r / race-02\n             :location (c / county\n                          :name (n3 / name\n                                    :op1 \"Yorkshire\"))))", "(a / and\n   :op1 (t2 / team\n            :poss (p / person\n                     :name (n2 / name\n                               :op1 \"Prior\"))))", "(a / and\n   :op1 (t2 / team\n            :poss (p / person\n                     :name (n2 / name\n                               :op1 \"Prior\")))\n   :op2 (r / race-02\n           :location (c / county\n                        :name (n3 / name\n                                  :op1 \"Yorkshire\"))))"], "smus": ["One Pro Cycling is preparing.", "preparing to take on Team Sky.", "preparing to take on Sir Bradley Wiggins.", "One Pro Cycling is preparing to take on Team Sky.", "One Pro Cycling is preparing to take on Sir Bradley Wiggins.", "Three stages were run over.", "Tour de Yorkshire has run over three stages.", "Tour de Yorkshire", "Starting on the 1st.", "Starting in May.", "Inspired by Tour de France Grand D\u00e9part.", "The Tour de France Grand D\u00e9part has inspired the team of Prior.", "The Tour de France Grand Depart has inspired the race in Yorkshire.", "and Prior's team.", "Prior's team and the race in Yorkshire."]}, {"instance_id": "realsumm-77", "summary": "<t> Woman reported ' someone ' had been run over , but victim was a squirrel . </t> <t> Another man dialled 999 to say man dropped a burger which was ' bleeding ' East of England ambulance service warned hoax calls can cost lives . </t>", "summary_trees": ["# ::snt  Woman reported ' someone ' had been run over , but victim was a squirrel . \n(c / contrast-01\n      :ARG1 (r / report-01\n            :ARG0 (w / woman)\n            :ARG1 (r2 / run-over-12\n                  :ARG1 (s / someone)))\n      :ARG2 (s2 / squirrel\n            :domain (v / victim)))", "# ::snt  Another man dialled 999 to say man dropped a burger which was ' bleeding ' East of England ambulance service warned hoax calls can cost lives . \n(m / multi-sentence\n      :snt1 (d / dial-01\n            :ARG0 (m2 / man\n                  :mod (a / another))\n            :ARG1 (p / phone-number-entity\n                  :value 999)\n            :purpose (s / say-01\n                  :ARG0 m2\n                  :ARG1 (d2 / drop-01\n                        :ARG0 (m3 / man)\n                        :ARG1 (b / burger\n                              :ARG1-of (b2 / bleed-01)))))\n      :snt2 (w / warn-01\n            :ARG0 (s2 / service\n                  :mod (a2 / ambulance)\n                  :mod (c / country-region\n                        :name (n / name\n                              :op1 \"East\"\n                              :op2 \"of\"\n                              :op3 \"England\")))\n            :ARG1 (p2 / possible-01\n                  :ARG1 (c2 / cost-01\n                        :ARG1 (c3 / call-02\n                              :mod (h / hoax-01))\n                        :ARG2 (l / live-01)))))"], "tree": ["(c / contrast-01\n   :ARG1 (r / report-01\n            :ARG1 (r2 / run-over-12\n                      :ARG1 (s / someone))))", "(c / contrast-01\n   :ARG2 (s2 / squirrel\n             :domain (v / victim)))", "(c / contrast-01\n   :ARG1 (r / report-01\n            :ARG0 (w / woman))\n   :ARG2 (s2 / squirrel\n             :domain (v / victim)))", "(c / contrast-01\n   :ARG1 (r / report-01\n            :ARG1 (r2 / run-over-12\n                      :ARG1 (s / someone)))\n   :ARG2 (s2 / squirrel\n             :domain (v / victim)))", "(r / report-01\n   :ARG0 (w / woman)\n   :ARG1 (r2 / run-over-12\n             :ARG1 (s / someone)))", "(m / multi-sentence\n   :snt1 (d / dial-01\n            :ARG0 (m2 / man\n                      :mod (a / another))))", "(m / multi-sentence\n   :snt1 (d / dial-01\n            :ARG0 (m2 / man\n                      :mod (a / another)))\n   :snt2 (w / warn-01\n            :ARG0 (s2 / service\n                      :mod (a2 / ambulance))))", "(m / multi-sentence\n   :snt1 (d / dial-01\n            :ARG0 (m2 / man\n                      :mod (a / another)))\n   :snt2 (w / warn-01\n            :ARG0 (s2 / service\n                      :mod (c / country-region\n                              :name (n / name\n                                       :op1 \"East\"\n                                       :op2 \"of\"\n                                       :op3 \"England\")))))", "(d / dial-01\n   :ARG0 (m2 / man\n             :mod (a / another))\n   :ARG1 (p / phone-number-entity\n            :value 999))"], "smus": ["But someone was reported run over.", "But the victim is a squirrel.", "The woman reported, but the victim was a squirrel.", "Someone was reported run over but the victim was a squirrel.", "The woman reported someone being run over.", "Another man dialed.", "Another man dialled. The ambulance service warned.", "Another man dialled. The East of England service warned.", "Another man dialed 999."]}, {"instance_id": "realsumm-78", "summary": "<t> Ben Flower returned from Flower six - month ban on Thursday night . </t> <t> Wales forward made first appearance since Flower punched St Helens ' Lance Hohaia in the opening moments of last season 's Grand Final . </t> <t> 27-year - old received a brilliant reception during 's Wigan 's 30 - 20 victory against Warrington . </t>", "summary_trees": ["# ::snt  Ben Flower returned from Flower six - month ban on Thursday night . \n(r / return-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Ben\"\n                  :op2 \"Flower\"))\n      :ARG3 (b / ban-01\n            :ARG2 p\n            :duration (t / temporal-quantity\n                  :quant 6\n                  :unit (m / month)))\n      :time (d / date-entity\n            :weekday (t2 / thursday)\n            :dayperiod (n2 / night)))", "# ::snt  Wales forward made first appearance since Flower punched St Helens ' Lance Hohaia in the opening moments of last season 's Grand Final . \n(a / appear-01\n      :ARG1 (p / person\n            :ARG0-of (f / forward-01)\n            :part-of (t / team\n                  :name (n / name\n                        :op1 \"Wales\")))\n      :ord (o / ordinal-entity\n            :value 1\n            :range (s / since\n                  :op1 (p2 / punch-01\n                        :ARG0 (p3 / person\n                              :name (n2 / name\n                                    :op1 \"Flower\"))\n                        :ARG1 (p4 / person\n                              :name (n3 / name\n                                    :op1 \"Lance\"\n                                    :op2 \"Hohaia\")\n                              :part-of (t2 / team\n                                    :name (n4 / name\n                                          :op1 \"St\"\n                                          :op2 \"Helens\")))\n                        :time (m / moment\n                              :ARG0-of (o2 / open-02\n                                    :ARG1 (g / game\n                                          :name (n5 / name\n                                                :op1 \"Grand\"\n                                                :op2 \"Final\")\n                                          :time (s2 / season\n                                                :mod (l / last)))))))))", "# ::snt  27-year - old received a brilliant reception during 's Wigan 's 30 - 20 victory against Warrington . \n(r / receive-01\n      :ARG0 (p / person\n            :age (t / temporal-quantity\n                  :quant 27\n                  :unit (y / year)))\n      :ARG1 (r2 / reception\n            :ARG1-of (b / brilliant-01))\n      :time (w / win-01\n            :ARG0 (t2 / team\n                  :name (n / name\n                        :op1 \"Wigan\"))\n            :ARG4 (t3 / team\n                  :name (n2 / name\n                        :op1 \"Warrington\"))\n            :manner (s / score-entity\n                  :op1 30\n                  :op2 20)))"], "tree": ["(r / return-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Ben\"\n                     :op2 \"Flower\")))", "(r / return-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Ben\"\n                     :op2 \"Flower\"))\n   :ARG3 (b / ban-01\n            :duration (t / temporal-quantity\n                         :quant 6)))", "(r / return-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Ben\"\n                     :op2 \"Flower\"))\n   :time (d / date-entity\n            :weekday (t2 / thursday)))", "(r / return-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Ben\"\n                     :op2 \"Flower\"))\n   :time (d / date-entity\n            :dayperiod (n2 / night)))", "(r / return-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Ben\"\n                     :op2 \"Flower\"))\n   :ARG3 (b / ban-01\n            :duration (t / temporal-quantity\n                         :quant 6))\n   :time (d / date-entity\n            :weekday (t2 / thursday)))", "(a / appear-01\n   :ARG1 (p / person\n            :ARG0 (f / forward-01)))", "(a / appear-01\n   :ARG1 (p / person\n            :part (t / team\n                     :name (n / name\n                              :op1 \"Wales\"))))", "(p2 / punch-01\n    :ARG0 (p3 / person\n              :name (n2 / name\n                        :op1 \"Flower\")))", "(p2 / punch-01\n    :ARG1 (p4 / person\n              :name (n3 / name\n                        :op1 \"Lance\"\n                        :op2 \"Hohaia\")))", "(p2 / punch-01\n    :ARG1 (p4 / person\n              :name (n3 / name\n                        :op1 \"Lance\"\n                        :op2 \"Hohaia\"))\n    :time (m / moment\n             :ARG0 (o2 / open-02\n                       :ARG1 (g / game\n                                :time (s2 / season\n                                          :mod (l / last))))))", "(r / receive-01\n   :ARG0 (p / person\n            :age (t / temporal-quantity\n                    :quant 27)))", "(r / receive-01\n   :ARG1 (r2 / reception\n             :ARG1 (b / brilliant-01)))", "(w / win-01\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Wigan\")))", "(w / win-01\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Wigan\"))\n   :manner (s / score-entity\n              :op1 30\n              :op2 20))", "(w / win-01\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Wigan\"))\n   :ARG4 (t3 / team\n             :name (n2 / name\n                       :op1 \"Warrington\"))\n   :manner (s / score-entity\n              :op1 30\n              :op2 20))"], "smus": ["Ben Flower returned.", "Ben Flower returned from six-month ban.", "Ben Flower returned Thursday.", "Ben Flower returned the night of.", "Ben Flower returned Thursday from a six-month ban.", "A forwarder appeared.", "Wales appear.", "Flower punched.", "Lance Hohaia was punched.", "Lance Hohaia was punched at the opening moments of last season's game.", "The 27-year-old received.", "Received a brilliant reception.", "Wigan won", "Wigan won by 30-20.", "Wigan beat Warrington 30-20"]}, {"instance_id": "realsumm-79", "summary": "<t> Inspired by the aesthetic of the Belle Epoque era , the Jacques Garcia designed hotel is both opulent and edgy . </t> <t> A mix of Arabian and Napoleon III decor , the Pigalle haunt harkens back to the city 's pleasure houses of yesteryear . </t> <t> Also available for guest use : a charming conservatory , library bar and celestial spa available for private rental . </t>", "summary_trees": ["# ::snt  Inspired by the aesthetic of the Belle Epoque era , the Jacques Garcia designed hotel is both opulent and edgy . \n(a / and\n      :op1 (o / opulent\n            :domain (h / hotel\n                  :ARG1-of (d / design-01\n                        :ARG0 (p / person\n                              :name (n / name\n                                    :op1 \"Jacques\"\n                                    :op2 \"Garcia\")))))\n      :op2 (e / edgy\n            :domain h)\n      :ARG1-of (ii / inspire-01\n            :ARG0 (a2 / aesthetic\n                  :poss (e2 / era\n                        :name (n2 / name\n                              :op1 \"Belle\"\n                              :op2 \"Epoque\")))))", "# ::snt  A mix of Arabian and Napoleon III decor , the Pigalle haunt harkens back to the city 's pleasure houses of yesteryear . \n(h / harken-01\n      :ARG0 (h2 / haunt-01\n            :location (c / city-district\n                  :name (n / name\n                        :op1 \"Pigalle\"))\n            :ARG2-of (m / mix-01\n                  :ARG1 (d / decor\n                        :mod (w / world-region\n                              :name (n2 / name\n                                    :op1 \"Arabia\")))\n                  :ARG3 (d2 / decor\n                        :mod (p / person\n                              :name (n3 / name\n                                    :op1 \"Napoleon\"\n                                    :op2 \"III\")))))\n      :ARG1 (h3 / house\n            :mod (p2 / pleasure)\n            :poss c\n            :time (y / yesteryear))\n      :direction (b / back))", "# ::snt  Also available for guest use : a charming conservatory , library bar and celestial spa available for private rental . \n(a / available-02\n      :ARG2 (u / use-01\n            :ARG0 (g / guest)\n            :ARG1 (a2 / and\n                  :op1 (c / conservatory\n                        :ARG0-of (c2 / charm-01))\n                  :op2 (b / bar\n                        :mod (l / library))\n                  :op3 (s / spa\n                        :mod (c3 / celestial))\n                  :ARG2-of (a3 / available-02\n                        :ARG2 (r / rent-01\n                              :ARG1 a2\n                              :ARG1-of (p / private-03)))))\n      :mod (a4 / also))"], "tree": ["(a / and\n   :op1 (o / opulent\n           :domain (h / hotel\n                      :ARG1 (d / design-01\n                               :ARG0 (p / person\n                                        :name (n / name\n                                                 :op1 \"Jacques\"\n                                                 :op2 \"Garcia\"))))))", "(a / and\n   :op1 (o / opulent\n           :domain (h / hotel\n                      :ARG1 (d / design-01\n                               :ARG0 (p / person\n                                        :name (n / name\n                                                 :op1 \"Jacques\"\n                                                 :op2 \"Garcia\")))))\n   :ARG1 (ii / inspire-01\n             :ARG0 (a2 / aesthetic\n                       :poss (e2 / era\n                                 :name (n2 / name\n                                           :op1 \"Belle\"\n                                           :op2 \"Epoque\")))))", "(a / and\n   :op1 (o / opulent\n           :domain (h / hotel\n                      :ARG1 (d / design-01\n                               :ARG0 (p / person\n                                        :name (n / name\n                                                 :op1 \"Jacques\"\n                                                 :op2 \"Garcia\")))))\n   :op2 (e / edgy\n           :domain h))", "(h / hotel\n   :ARG1 (d / design-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Jacques\"\n                              :op2 \"Garcia\"))))", "(d / design-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jacques\"\n                     :op2 \"Garcia\")))", "(h / harken-01\n   :ARG1 (h3 / house\n             :mod (p2 / pleasure)))", "(h / harken-01\n   :ARG0 (h2 / haunt-01\n             :location (c / city-district\n                          :name (n / name\n                                   :op1 \"Pigalle\")))\n   :ARG1 (h3 / house\n             :mod (p2 / pleasure)))", "(h / harken-01\n   :ARG1 (h3 / house\n             :mod (p2 / pleasure))\n   :direction (b / back))", "(h / harken-01\n   :ARG0 (h2 / haunt-01\n             :location (c / city-district\n                          :name (n / name\n                                   :op1 \"Pigalle\")))\n   :ARG1 (h3 / house\n             :mod (p2 / pleasure))\n   :direction (b / back))", "(h2 / haunt-01\n    :location (c / city-district\n                 :name (n / name\n                          :op1 \"Pigalle\"))\n    :ARG2 (m / mix-01\n             :ARG3 (d2 / decor\n                       :mod (p / person\n                               :name (n3 / name\n                                         :op1 \"Napoleon\"\n                                         :op2 \"III\")))))", "(a2 / and\n    :op2 (b / bar\n            :mod (l / library))\n    :ARG2 (a3 / available-02\n              :ARG2 (r / rent-01\n                       :ARG1 (p / private-03))))", "(a2 / and\n    :op1 (c / conservatory\n            :ARG0 (c2 / charm-01))\n    :op2 (b / bar\n            :mod (l / library))\n    :ARG2 (a3 / available-02\n              :ARG2 (r / rent-01\n                       :ARG1 (p / private-03))))", "(a2 / and\n    :op1 (c / conservatory\n            :ARG0 (c2 / charm-01))\n    :op3 (s / spa\n            :mod (c3 / celestial))\n    :ARG2 (a3 / available-02\n              :ARG2 (r / rent-01\n                       :ARG1 (p / private-03))))", "(a2 / and\n    :op2 (b / bar\n            :mod (l / library))\n    :op3 (s / spa\n            :mod (c3 / celestial))\n    :ARG2 (a3 / available-02\n              :ARG2 (r / rent-01\n                       :ARG1 (p / private-03))))", "(a2 / and\n    :op1 (c / conservatory\n            :ARG0 (c2 / charm-01))\n    :op2 (b / bar\n            :mod (l / library))\n    :op3 (s / spa\n            :mod (c3 / celestial))\n    :ARG2 (a3 / available-02\n              :ARG2 (r / rent-01\n                       :ARG1 (p / private-03))))"], "smus": ["And the hotel Jacques Garcia designed was opulent.", "The opulent hotel Jacques Garcia designed is inspired by the aesthetic of the Belle Epoque era.", "The hotel Jacques Garcia designed was opulent and edgy.", "The hotel was designed by Jacques Garcia.", "Jacques Garcia designed.", "Harkens to pleasure houses.", "Pigalle's haunt harkens to pleasure houses.", "Harkens back to pleasure houses.", "Pigalle's haunt harkens back to pleasure houses.", "The Pigalle haunt is a mix of Napoleon III decor.", "and a Library bar is available for private rent.", "A charming conservatory and a library bar are available for private rent.", "A charming conservatory and a celestial spa are available for private rent.", "and a library bar and a celestial spa available for private rent.", "A charming conservatory, a library bar and a celestial spa are available for private rent."]}, {"instance_id": "realsumm-80", "summary": "<t> Steven Finn was left out of the England squad for the West Indies tour . </t> <t> The Middlesex quick bowler has regained form after a tough 12 months . </t> <t> Finn said Finn 's back to bowling like Finn was as ' a carefree 21-year - old ' Finn last of 23 Test caps came for England back in 2013 . </t>", "summary_trees": ["# ::snt  Steven Finn was left out of the England squad for the West Indies tour . \n(l / leave-out-03\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Steven\"\n                  :op2 \"Finn\"))\n      :ARG2 (s / squad\n            :mod (c / country\n                  :name (n2 / name\n                        :op1 \"England\"))\n            :subevent-of (t / tour-01\n                  :ARG0 c\n                  :ARG1 (c2 / country\n                        :name (n3 / name\n                              :op1 \"West\"\n                              :op2 \"Indies\")))))", "# ::snt  The Middlesex quick bowler has regained form after a tough 12 months . \n(r / regain-01\n      :ARG0 (b / bowler\n            :ARG1-of (q / quick-02)\n            :mod (t / team\n                  :name (n / name\n                        :op1 \"Middlesex\")))\n      :ARG1 (f / form)\n      :time (a / after\n            :op1 (t2 / temporal-quantity\n                  :quant 12\n                  :unit (m / month)\n                  :ARG1-of (t3 / tough-02))))", "# ::snt  Finn said Finn 's back to bowling like Finn was as ' a carefree 21-year - old ' Finn last of 23 Test caps came for England back in 2013 . \n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Finn\"))\n      :ARG1 (b / back-02\n            :ARG1 p\n            :direction (b2 / bowl-01\n                  :ARG0 p)\n            :ARG1-of (r / resemble-01\n                  :ARG2 (b3 / back-02\n                        :ARG1 (p2 / person\n                              :name (n2 / name\n                                    :op1 \"Finn\")\n                              :age (t / temporal-quantity\n                                    :quant 21\n                                    :unit (y / year))\n                              :mod (c / carefree)\n                              :ARG1-of (ii / include-91\n                                    :ARG2 (c2 / cap\n                                          :quant 23\n                                          :mod (t2 / test)\n                                          :ARG1-of (c3 / come-01\n                                                :ARG4 (t3 / team\n                                                      :name (n3 / name\n                                                            :op1 \"England\"))\n                                                :time (d / date-entity\n                                                      :year 2013))\n                                          :mod (l / last))))))))"], "tree": ["(l / leave-out-03\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Steven\"\n                     :op2 \"Finn\")))", "(l / leave-out-03\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Steven\"\n                     :op2 \"Finn\"))\n   :ARG2 (s / squad\n            :mod (c / country\n                    :name (n2 / name\n                              :op1 \"England\"))))", "(l / leave-out-03\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Steven\"\n                     :op2 \"Finn\"))\n   :ARG2 (s / squad\n            :subevent (t / tour-01\n                         :ARG1 (c2 / country\n                                   :name (n3 / name\n                                             :op1 \"West\"\n                                             :op2 \"Indies\")))))", "(p / person\n   :name (n / name\n            :op1 \"Steven\"\n            :op2 \"Finn\"))", "(s / squad\n   :subevent (t / tour-01\n                :ARG1 (c2 / country\n                          :name (n3 / name\n                                    :op1 \"West\"\n                                    :op2 \"Indies\"))))", "(r / regain-01\n   :ARG0 (b / bowler\n            :ARG1 (q / quick-02)))", "(r / regain-01\n   :ARG0 (b / bowler\n            :ARG1 (q / quick-02))\n   :ARG1 (f / form))", "(r / regain-01\n   :ARG0 (b / bowler\n            :mod (t / team\n                    :name (n / name\n                             :op1 \"Middlesex\")))\n   :ARG1 (f / form))", "(r / regain-01\n   :ARG0 (b / bowler\n            :ARG1 (q / quick-02))\n   :time (a / after\n            :op1 (t2 / temporal-quantity\n                     :ARG1 (t3 / tough-02))))", "(r / regain-01\n   :ARG1 (f / form)\n   :time (a / after\n            :op1 (t2 / temporal-quantity\n                     :ARG1 (t3 / tough-02))))", "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Finn\"))\n   :ARG1 (b / back-02\n            :direction (b2 / bowl-01\n                           :ARG0 p)))", "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Finn\"))\n   :ARG1 (b / back-02\n            :ARG1 (r / resemble-01\n                     :ARG2 (b3 / back-02\n                               :ARG1 (p2 / person\n                                         :age (t / temporal-quantity\n                                                 :quant 21))))))", "(c2 / cap\n    :ARG1 (c3 / come-01\n              :ARG4 (t3 / team\n                        :name (n3 / name\n                                  :op1 \"England\"))))", "(c2 / cap\n    :ARG1 (c3 / come-01\n              :time (d / date-entity\n                       :year 2013)))", "(c3 / come-01\n    :time (d / date-entity\n             :year 2013))"], "smus": ["Steven Finn was left out.", "Steven Finn was left out of the English squad.", "Steven Finn was left out of the squad for the West Indies tour.", "Steven Finn", "The squad is on a tour of the West Indies.", "The quick bowler has regained.", "The quick bowler has regained form.", "Middlesex bowler has regained form.", "The quick bowler has regained after a tough time.", "After toughness, form has regained.", "\"Back to bowling,\" Finn said.", "Back like a 21 year old, Finn said.", "Caps for England.", "Caps came in 2013.", "It came in 2013."]}, {"instance_id": "realsumm-81", "summary": "<t> Paul Armstrong flew to Cyprus to celebrate new job as IT project manager . </t> <t> Was stopped at airport with stun gun , baton and knuckle duster in Armstrong bag . </t> <t> Pleaded guilty to possession of a firearm and lost Armstrong job before starting job . </t> <t> 26-year - old was sentenced to eight months in jail , suspended for two years . </t>", "summary_trees": ["# ::snt  Paul Armstrong flew to Cyprus to celebrate new job as IT project manager . \n(f / fly-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Paul\"\n                  :op2 \"Armstrong\"))\n      :destination (c / country\n            :name (n2 / name\n                  :op1 \"Cyprus\"))\n      :purpose (c2 / celebrate-01\n            :ARG0 p\n            :ARG1 (j / job\n                  :ARG1-of (n3 / new-01)\n                  :topic (p2 / person\n                        :ARG0-of (m / manage-01\n                              :ARG1 (p3 / project\n                                    :mod (t / technology\n                                          :mod (ii / information))))))))", "# ::snt  Was stopped at airport with stun gun , baton and knuckle duster in Armstrong bag . \n(s / stop-01\n      :ARG1 (h / have-03\n            :ARG1 (a / and\n                  :op1 (g / gun\n                        :ARG2-of (s2 / stun-01))\n                  :op2 (b / baton)\n                  :op3 (d / duster\n                        :mod (k / knuckle)))\n            :location (b2 / bag\n                  :mod (c / company\n                        :name (n / name\n                              :op1 \"Armstrong\"))))\n      :location (a2 / airport))", "# ::snt  Pleaded guilty to possession of a firearm and lost Armstrong job before starting job . \n(a / and\n      :op1 (p / plead-02\n            :ARG2 (g / guilty-01\n                  :ARG1 (p2 / person\n                        :name (n / name\n                              :op1 \"Armstrong\"))\n                  :ARG2 (p3 / possess-01\n                        :ARG1 (f / firearm))))\n      :op2 (l / lose-02\n            :ARG1 (j / job\n                  :poss p2)\n            :time (b / before\n                  :op1 (s / start-01\n                        :ARG1 j))))", "# ::snt  26-year - old was sentenced to eight months in jail , suspended for two years . \n(s / sentence-01\n      :ARG1 (p / person\n            :age (t / temporal-quantity\n                  :quant 26\n                  :unit (y / year)))\n      :ARG2 (a / and\n            :op1 (t2 / temporal-quantity\n                  :quant 8\n                  :unit (m / month)\n                  :location (j / jail))\n            :op2 (s2 / suspend-01\n                  :ARG1 t2\n                  :duration (t3 / temporal-quantity\n                        :quant 2\n                        :unit (y2 / year)))))"], "tree": ["(f / fly-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Paul\"\n                     :op2 \"Armstrong\")))", "(f / fly-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Paul\"\n                     :op2 \"Armstrong\"))\n   :destination (c / country\n                   :name (n2 / name\n                             :op1 \"Cyprus\")))", "(f / fly-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Paul\"\n                     :op2 \"Armstrong\"))\n   :purpose (c2 / celebrate-01\n                :ARG0 p))", "(f / fly-01\n   :destination (c / country\n                   :name (n2 / name\n                             :op1 \"Cyprus\"))\n   :purpose (c2 / celebrate-01\n                :ARG0 (p / person :name (n / name :op1 \"Paul\" :op2 \"Armstrong\"))))", "(f / fly-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Paul\"\n                     :op2 \"Armstrong\"))\n   :destination (c / country\n                   :name (n2 / name\n                             :op1 \"Cyprus\"))\n   :purpose (c2 / celebrate-01\n                :ARG1 (j / job\n                         :ARG1 (n3 / new-01))))", "(h / have-03\n   :ARG1 (g / gun\n            :ARG2 (s2 / stun-01)))", "(h / have-03\n   :ARG1 (d / duster\n            :mod (k / knuckle))\n   :location (b2 / bag\n                 :mod (c / company\n                         :name (n / name\n                                  :op1 \"Armstrong\"))))", "(a / and\n   :op3 (d / duster\n           :mod (k / knuckle)))", "(a / and\n   :op1 (g / gun\n           :ARG2 (s2 / stun-01))\n   :op2 (b / baton))", "(a / and\n   :op1 (g / gun\n           :ARG2 (s2 / stun-01))\n   :op2 (b / baton)\n   :op3 (d / duster\n           :mod (k / knuckle)))", "(a / and\n   :op2 (l / lose-02\n           :ARG1 (j / job\n                    :poss (p2 / person\n                              :name (n / name\n                                       :op1 \"Armstrong\")))))", "(a / and\n   :op2 (l / lose-02\n           :time (b / before\n                    :op1 (s / start-01\n                            :ARG1 (j / job)))))", "(l / lose-02\n   :ARG1 (j / job\n            :poss (p2 / person :name (n / name :op1 \"Armstrong\"))))", "(l / lose-02\n   :time (b / before\n            :op1 (s / start-01\n                    :ARG1 (j / job))))", "(l / lose-02\n   :ARG1 (j / job\n            :poss (p2 / person :name (n / name :op1 \"Armstrong\")))\n   :time (b / before\n            :op1 (s / start-01\n                    :ARG1 j)))", "(s / sentence-01\n   :ARG2 (s2 / suspend-01\n             :ARG1 (t2 / temporal-quantity)))", "(s / sentence-01\n   :ARG2 (t2 / temporal-quantity\n             :location (j / jail)))", "(a / and\n   :op1 (t2 / temporal-quantity\n            :unit (m / month))\n   :op2 (s2 / suspend-01\n            :ARG1 t2))", "(a / and\n   :op1 (t2 / temporal-quantity\n            :location (j / jail))\n   :op2 (s2 / suspend-01\n            :ARG1 t2))", "(t2 / temporal-quantity\n    :unit (m / month)\n    :location (j / jail))"], "smus": ["Paul Armstrong flew.", "Paul Armstrong flew to Cyprus.", "Paul Armstrong flew to celebrate.", "Paul Armstrong flew to Cyprus to celebrate.", "Paul Armstrong flew to Cyprus to celebrate the new job.", "had a stun gun.", "In the Armstrong bag was a knuckle duster.", "and a knuckle duster.", "a stun gun and a baton", "A stun gun, a baton and a knuckle duster.", "And Armstrong lost his job.", "And lost before starting a job.", "Armstrong's job was lost.", "Lost before starting a job.", "Armstrong's job was lost before starting.", "sentenced to be suspended for two years", "sentenced to jail.", "Months, suspended.", "Jail, suspended.", "Months in jail."]}, {"instance_id": "realsumm-82", "summary": "<t> Australian fashion designer Alex Perry wo n't show at this year 's MBFWA . </t> <t> The designer is excited to kick back and enjoy the shows from front row . </t> <t> This will be the designer 's second MBFWA designer has missed in two decades . </t> <t> Perry is now focusing on global expansion in Asia and Middle East . </t>", "summary_trees": ["# ::snt  Australian fashion designer Alex Perry wo n't show at this year 's MBFWA . \n(s / show-01\n      :polarity -\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Alex\"\n                  :op2 \"Perry\")\n            :ARG0-of (d / design-01\n                  :ARG1 (f / fashion))\n            :mod (c / country\n                  :name (n2 / name\n                        :op1 \"Australia\")))\n      :time (e / event\n            :name (n3 / name\n                  :op1 \"MBFWA\")\n            :mod (y / year\n                  :mod (t / this))))", "# ::snt  The designer is excited to kick back and enjoy the shows from front row . \n(e / excite-01\n      :ARG0 (a / and\n            :op1 (k / kick-01\n                  :ARG0 (p / person\n                        :ARG0-of (d / design-01))\n                  :direction (b / back))\n            :op2 (e2 / enjoy-01\n                  :ARG0 p\n                  :ARG1 (s / show-04)\n                  :location (r / row\n                        :mod (f / front))))\n      :ARG1 p)", "# ::snt  This will be the designer 's second MBFWA designer has missed in two decades . \n(m / miss-02\n      :ARG0 (p / person\n            :ARG0-of (d / design-01)\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (o / organization\n                        :name (n / name\n                              :op1 \"MBFWA\"))\n                  :ARG2 (p2 / person\n                        :ARG0-of (d2 / design-01))))\n      :ARG1 (t / this)\n      :ord (o2 / ordinal-entity\n            :value 2\n            :range (t2 / temporal-quantity\n                  :quant 2\n                  :unit (d3 / decade))))", "# ::snt  Perry is now focusing on global expansion in Asia and Middle East . \n(f / focus-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Perry\"))\n      :ARG1 (e / expand-01\n            :ARG1 p\n            :ARG2 (g / globe)\n            :location (a / and\n                  :op1 (c / continent\n                        :name (n2 / name\n                              :op1 \"Asia\"))\n                  :op2 (w / world-region\n                        :name (n3 / name\n                              :op1 \"Middle\"\n                              :op2 \"East\"))))\n      :time (n4 / now))"], "tree": ["(p / person\n   :ARG0 (d / design-01\n            :ARG1 (f / fashion)))", "(p / person\n   :name (n / name\n            :op1 \"Alex\"\n            :op2 \"Perry\")\n   :ARG0 (d / design-01\n            :ARG1 (f / fashion)))", "(p / person\n   :ARG0 (d / design-01\n            :ARG1 (f / fashion))\n   :mod (c / country\n           :name (n2 / name\n                     :op1 \"Australia\")))", "(p / person\n   :name (n / name\n            :op1 \"Alex\"\n            :op2 \"Perry\")\n   :ARG0 (d / design-01\n            :ARG1 (f / fashion))\n   :mod (c / country\n           :name (n2 / name\n                     :op1 \"Australia\")))", "(e / event\n   :name (n3 / name\n             :op1 \"MBFWA\")\n   :mod (y / year\n           :mod (t / this)))", "(e / excite-01\n   :ARG0 (e2 / enjoy-01\n             :ARG1 (s / show-04)))", "(e / excite-01\n   :ARG0 (e2 / enjoy-01\n             :location (r / row\n                          :mod (f / front))))", "(a / and\n   :op2 (e2 / enjoy-01\n            :location (r / row\n                         :mod (f / front))))", "(a / and\n   :op1 (k / kick-01\n           :direction (b / back))\n   :op2 (e2 / enjoy-01\n            :ARG1 (s / show-04)))", "(e2 / enjoy-01\n    :ARG1 (s / show-04)\n    :location (r / row\n                 :mod (f / front)))", "(m / miss-02\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (p2 / person\n                               :ARG0 (d2 / design-01)))))", "(m / miss-02\n   :ARG0 (p / person\n            :ARG0 (d / design-01))\n   :ord (o2 / ordinal-entity\n            :range (t2 / temporal-quantity\n                       :quant 2)))", "(m / miss-02\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (p2 / person\n                               :ARG0 (d2 / design-01))))\n   :ord (o2 / ordinal-entity\n            :value 2))", "(m / miss-02\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (p2 / person\n                               :ARG0 (d2 / design-01))))\n   :ord (o2 / ordinal-entity\n            :range (t2 / temporal-quantity\n                       :quant 2)))", "(m / miss-02\n   :ARG1 (t / this)\n   :ord (o2 / ordinal-entity\n            :value 2))", "(f / focus-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Perry\"))\n   :ARG1 (e / expand-01\n            :ARG1 p))", "(f / focus-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Perry\"))\n   :ARG1 (e / expand-01\n            :ARG2 (g / globe)))", "(f / focus-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Perry\"))\n   :ARG1 (e / expand-01\n            :ARG1 p)\n   :time (n4 / now))", "(f / focus-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Perry\"))\n   :ARG1 (e / expand-01\n            :ARG2 (g / globe))\n   :time (n4 / now))", "(f / focus-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Perry\"))\n   :ARG1 (e / expand-01\n            :location (c / continent\n                         :name (n2 / name\n                                   :op1 \"Asia\")))\n   :time (n4 / now))"], "smus": ["Fashion designer.", "Fashion designer Alex Perry", "Australian fashion designer", "Australian fashion designer Alex Perry", "This year's MBFWA", "Excited to enjoy the shows.", "Enjoy in front row.", "and enjoy in front row.", "Kick back and enjoy the shows.", "Enjoy the shows in front row.", "The designer has been missing.", "The designer has missed two times.", "The designer has missed second time.", "The designer has been missing for the second time.", "This is the second time this has been missed.", "Perry is focusing on expansion.", "Perry is focusing on global expansion.", "Perry is now focusing on expansion.", "Perry is now focusing on global expansion.", "Perry is now focusing on expansion in Asia."]}, {"instance_id": "realsumm-83", "summary": "<t> An Indiana public school performance of American Pie ended in tragedy Wednesday when a riser buckled just as dozens danced on - stage . </t> <t> More than a dozen people were injured at the Westfield High performance and one student was taken to a hospital in critical condition . </t> <t> Students said there had been no issues when Students previously practiced the song on the stage with the same number of people . </t>", "summary_trees": ["# ::snt  An Indiana public school performance of American Pie ended in tragedy Wednesday when a riser buckled just as dozens danced on - stage . \n(e / end-01\n      :ARG1 (p / perform-01\n            :ARG0 (s / school\n                  :location (s2 / state\n                        :name (n / name\n                              :op1 \"Indiana\"))\n                  :ARG1-of (p2 / public-02))\n            :ARG1 (m / music\n                  :name (n2 / name\n                        :op1 \"American\"\n                        :op2 \"Pie\")))\n      :ARG2 (t / tragedy)\n      :time (d / date-entity\n            :weekday (w / wednesday))\n      :time (b / buckle-01\n            :ARG1 (p3 / person\n                  :ARG0-of (r / rise-01))\n            :time (d2 / dance-01\n                  :ARG0 (p4 / person\n                        :quant (m2 / multiple\n                              :op1 12))\n                  :location (s3 / stage))))", "# ::snt  More than a dozen people were injured at the Westfield High performance and one student was taken to a hospital in critical condition . \n(a / and\n      :op1 (ii / injure-01\n            :ARG1 (p / person\n                  :quant (m / more-than\n                        :op1 12))\n            :time (p2 / perform-01\n                  :ARG0 (h / high-school\n                        :name (n / name\n                              :op1 \"Westfield\"\n                              :op2 \"High\"))))\n      :op2 (t / take-01\n            :ARG1 (p3 / person\n                  :quant 1\n                  :ARG0-of (s / study-01))\n            :ARG3 (h2 / hospital)\n            :manner (c / condition\n                  :ARG1-of (c2 / critical-03))))", "# ::snt  Students said there had been no issues when Students previously practiced the song on the stage with the same number of people . \n(s / say-01\n      :ARG0 (p / person\n            :ARG0-of (s2 / study-01))\n      :ARG1 (ii / issue-02\n            :polarity -\n            :time (p2 / practice-01\n                  :ARG0 p\n                  :ARG1 (s3 / song)\n                  :location (s4 / stage)\n                  :accompanier (p3 / person\n                        :quant (n / number\n                              :ARG1-of (s5 / same-01)))\n                  :time (p4 / previous))))"], "tree": ["(e / end-01\n   :ARG1 (p / perform-01\n            :ARG1 (m / music\n                     :name (n2 / name\n                               :op1 \"American\"\n                               :op2 \"Pie\")))\n   :ARG2 (t / tragedy))", "(e / end-01\n   :ARG1 (p / perform-01\n            :ARG1 (m / music\n                     :name (n2 / name\n                               :op1 \"American\"\n                               :op2 \"Pie\")))\n   :ARG2 (t / tragedy)\n   :time (d / date-entity\n            :weekday (w / wednesday)))", "(b / buckle-01\n   :ARG1 (p3 / person\n             :ARG0 (r / rise-01))\n   :time (d2 / dance-01\n             :ARG0 (p4 / person\n                       :quant (m2 / multiple\n                                  :op1 12))))", "(d2 / dance-01\n    :ARG0 (p4 / person\n              :quant (m2 / multiple\n                         :op1 12)))", "(d2 / dance-01\n    :ARG0 (p4 / person\n              :quant (m2 / multiple\n                         :op1 12))\n    :location (s3 / stage))", "(a / and\n   :op1 (ii / injure-01\n            :ARG1 (p / person\n                     :quant (m / more-than\n                               :op1 12))))", "(ii / injure-01\n    :ARG1 (p / person\n             :quant (m / more-than\n                       :op1 12)))", "(ii / injure-01\n    :ARG1 (p / person\n             :quant (m / more-than\n                       :op1 12))\n    :time (p2 / perform-01\n              :ARG0 (h / high-school\n                       :name (n / name\n                                :op1 \"Westfield\"\n                                :op2 \"High\"))))", "(t / take-01\n   :ARG1 (p3 / person\n             :quant 1))", "(t / take-01\n   :ARG1 (p3 / person\n             :quant 1)\n   :ARG3 (h2 / hospital))", "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (s2 / study-01)))", "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (s2 / study-01))\n   :ARG1 (ii / issue-02\n             :polarity -))", "(p2 / practice-01\n    :location (s4 / stage)\n    :time (p4 / previous))", "(p2 / practice-01\n    :location (s4 / stage)\n    :accompanier (p3 / person\n                     :quant (n / number\n                               :ARG1 (s5 / same-01)))\n    :time (p4 / previous))", "(p2 / practice-01\n    :ARG1 (s3 / song)\n    :location (s4 / stage)\n    :accompanier (p3 / person\n                     :quant (n / number\n                               :ARG1 (s5 / same-01)))\n    :time (p4 / previous))"], "smus": ["The performance of American Pie ended in tragedy.", "The performance of American Pie ended in tragedy Wednesday.", "The riser buckled as dozens danced.", "Dozens danced.", "Dozens danced on stage.", "And more than one person was injured.", "More than one person was injured.", "More than one person was injured during Westfield High's performance.", "One person was taken.", "One person was taken to hospital.", "Students said.", "No issues, said students.", "There has previously been practice on stage.", "There has previously been practice on stage with the same number of people.", "The song has previously been practiced on stage with the same number of people."]}, {"instance_id": "realsumm-84", "summary": "<t> Manchester City have been linked with summer move for Raheem Sterling . </t> <t> Sterling has two years left on Sterling contract and is stalling on a new deal . </t> <t> Brendan Rodgers says a move to City would not be step up for Sterling . </t> <t> Indicating move will take the Manchester club 20 years to eclipse Liverpool . </t>", "summary_trees": ["# ::snt  Manchester City have been linked with summer move for Raheem Sterling . \n(l / link-01\n      :ARG1 (m / move-03\n            :ARG0 (t / team\n                  :name (n / name\n                        :op1 \"Manchester\"\n                        :op2 \"City\"))\n            :ARG1 (p / person\n                  :name (n2 / name\n                        :op1 \"Raheem\"\n                        :op2 \"Sterling\"))\n            :time (d / date-entity\n                  :season (s / summer))))", "# ::snt  Sterling has two years left on Sterling contract and is stalling on a new deal . \n(a / and\n      :op1 (l / leave-17\n            :ARG1 (c / contract\n                  :poss (p / person\n                        :name (n / name\n                              :op1 \"Sterling\")))\n            :ARG2 (t / temporal-quantity\n                  :quant 2\n                  :unit (y / year)))\n      :op2 (s / stall-01\n            :ARG1 p\n            :ARG2 (d / deal\n                  :ARG1-of (n2 / new-01))))", "# ::snt  Brendan Rodgers says a move to City would not be step up for Sterling . \n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Brendan\"\n                  :op2 \"Rodgers\"))\n      :ARG1 (s2 / step-01\n            :polarity -\n            :ARG4 (m / move-01\n                  :ARG0 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Sterling\"))\n                  :ARG2 (c / city))\n            :direction (u / up)))", "# ::snt  Indicating move will take the Manchester club 20 years to eclipse Liverpool . \n(t / take-10\n      :ARG0 (e / eclipse-01\n            :ARG0 (c / club\n                  :mod (t2 / team\n                        :name (n / name\n                              :op1 \"Manchester\")))\n            :ARG1 (t3 / team\n                  :name (n2 / name\n                        :op1 \"Liverpool\")))\n      :ARG1 (t4 / temporal-quantity\n            :quant 20\n            :unit (y / year))\n      :ARG2 (m / move-02\n            :ARG0-of (ii / indicate-01)))"], "tree": ["(l / link-01\n   :ARG1 (m / move-03\n            :ARG0 (t / team\n                     :name (n / name\n                              :op1 \"Manchester\"\n                              :op2 \"City\"))))", "(l / link-01\n   :ARG1 (m / move-03\n            :ARG1 (p / person\n                     :name (n2 / name\n                               :op1 \"Raheem\"\n                               :op2 \"Sterling\"))))", "(l / link-01\n   :ARG1 (m / move-03\n            :time (d / date-entity\n                     :season (s / summer))))", "(t / team\n   :name (n / name\n            :op1 \"Manchester\"\n            :op2 \"City\"))", "(p / person\n   :name (n2 / name\n             :op1 \"Raheem\"\n             :op2 \"Sterling\"))", "(a / and\n   :op2 (s / stall-01\n           :ARG1 (p / person\n                    :name (n / name\n                             :op1 \"Sterling\"))))", "(a / and\n   :op2 (s / stall-01\n           :ARG2 (d / deal\n                    :ARG1 (n2 / new-01))))", "(a / and\n   :op1 (l / leave-17\n           :ARG1 (c / contract\n                    :poss (p / person\n                             :name (n / name\n                                      :op1 \"Sterling\"))))\n   :op2 (s / stall-01\n           :ARG1 p))", "(a / and\n   :op1 (l / leave-17\n           :ARG1 (c / contract\n                    :poss (p / person\n                             :name (n / name\n                                      :op1 \"Sterling\"))))\n   :op2 (s / stall-01\n           :ARG2 (d / deal\n                    :ARG1 (n2 / new-01))))", "(s / stall-01\n   :ARG2 (d / deal\n            :ARG1 (n2 / new-01)))", "(s / say-01\n   :ARG1 (s2 / step-01\n             :polarity -))", "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Brendan\"\n                     :op2 \"Rodgers\"))\n   :ARG1 (s2 / step-01\n             :polarity -))", "(p / person\n   :name (n / name\n            :op1 \"Brendan\"\n            :op2 \"Rodgers\"))", "(m / move-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Sterling\")))", "(p2 / person\n    :name (n2 / name\n              :op1 \"Sterling\"))", "(t / take-10\n   :ARG0 (e / eclipse-01\n            :ARG0 (c / club\n                     :mod (t2 / team\n                              :name (n / name\n                                       :op1 \"Manchester\")))))", "(t / take-10\n   :ARG0 (e / eclipse-01\n            :ARG1 (t3 / team\n                      :name (n2 / name\n                                :op1 \"Liverpool\")))\n   :ARG1 (t4 / temporal-quantity\n             :quant 20))", "(t / take-10\n   :ARG0 (e / eclipse-01\n            :ARG1 (t3 / team\n                      :name (n2 / name\n                                :op1 \"Liverpool\")))\n   :ARG1 (t4 / temporal-quantity\n             :unit (y / year)))", "(t / take-10\n   :ARG0 (e / eclipse-01\n            :ARG1 (t3 / team\n                      :name (n2 / name\n                                :op1 \"Liverpool\")))\n   :ARG2 (m / move-02\n            :ARG0 (ii / indicate-01)))", "(t / take-10\n   :ARG0 (e / eclipse-01\n            :ARG1 (t3 / team\n                      :name (n2 / name\n                                :op1 \"Liverpool\")))\n   :ARG1 (t4 / temporal-quantity\n             :unit (y / year))\n   :ARG2 (m / move-02\n            :ARG0 (ii / indicate-01)))"], "smus": ["Manchester City move linked.", "The move of Raheem Sternling was linked.", "Link to move in summer.", "Manchester City", "Raheem Sternling", "And Sternling is stalling.", "and the new deal is stalled.", "Sternling's contract was left and he was stalling.", "Sternling's contract was left and the new deal was stalled.", "The new deal is stalled.", "Says not a step.", "Brendan Rodgers says it's not a step.", "Brendan Rodgers", "Sternling is moving.", "Sternling.", "It will take a Manchester club to eclipse.", "It will take 20 years to eclipse Liverpool.", "It will take years to eclipse Liverpool.", "It will take an indicating move to eclipse Liverpool.", "It will take years to eclipse Liverpool with the indicating move."]}, {"instance_id": "realsumm-85", "summary": "<t> Up to one in five Chinese eateries could be selling soup using illegal meat . </t> <t> Charity says meat is often disguised on menu or only offered if requested . </t> <t> Loophole lets people bring 20 kg of meat into UK for personal consumption . </t>", "summary_trees": ["# ::snt  Up to one in five Chinese eateries could be selling soup using illegal meat . \n(p / possible-01\n      :ARG1 (s / sell-01\n            :ARG0 (r / restaurant\n                  :mod (c / country\n                        :name (n / name\n                              :op1 \"China\"))\n                  :ARG1-of (ii / include-91\n                        :ARG2 (p2 / person\n                              :ARG0-of (e / eat-01))\n                        :ARG3 (u / up-to\n                              :op1 \"1/5\")))\n            :ARG1 (s2 / soup\n                  :ARG1-of (u2 / use-01\n                        :ARG0 r\n                        :ARG2 (m / meat\n                              :ARG1-of (l / legal-02\n                                    :polarity -))))))", "# ::snt  Charity says meat is often disguised on menu or only offered if requested . \n(s / say-01\n      :ARG0 (o / organization\n            :name (n / name\n                  :op1 \"Charity\"))\n      :ARG1 (o2 / or\n            :op1 (d / disguise-01\n                  :ARG1 (m / meat)\n                  :location (m2 / menu)\n                  :frequency (o3 / often))\n            :op2 (o4 / offer-01\n                  :ARG1 m\n                  :mod (o5 / only)\n                  :condition (r / request-01\n                        :ARG1 m))))", "# ::snt  Loophole lets people bring 20 kg of meat into UK for personal consumption . \n(l / let-01\n      :ARG0 (l2 / loophole)\n      :ARG1 (b / bring-01\n            :ARG0 (p / person)\n            :ARG1 (m / meat\n                  :quant (m2 / mass-quantity\n                        :quant 20\n                        :unit (k / kilogram)))\n            :ARG2 (c / country\n                  :name (n / name\n                        :op1 \"UK\"))\n            :purpose (c2 / consume-01\n                  :ARG0 p\n                  :ARG1 m\n                  :ARG1-of (p2 / personal-02))))"], "tree": ["(p / possible-01\n   :ARG1 (s / sell-01\n            :ARG0 (r / restaurant\n                     :mod (c / country\n                             :name (n / name\n                                      :op1 \"China\")))))", "(p / possible-01\n   :ARG1 (s / sell-01\n            :ARG0 (r / restaurant\n                     :ARG1 (ii / include-91\n                               :ARG3 (u / up-to\n                                        :op1 \"1/5\")))))", "(p / possible-01\n   :ARG1 (s / sell-01\n            :ARG1 (s2 / soup\n                      :ARG1 (u2 / use-01\n                                :ARG2 (m / meat\n                                         :ARG1 (l / legal-02\n                                                  :polarity -))))))", "(ii / include-91\n    :ARG3 (u / up-to\n             :op1 \"1/5\"))", "(u2 / use-01\n    :ARG2 (m / meat\n             :ARG1 (l / legal-02\n                      :polarity -)))", "(o2 / or\n    :op2 (o4 / offer-01\n             :condition (r / request-01\n                           :ARG1 (m / meat))))", "(o2 / or\n    :op1 (d / disguise-01\n            :location (m2 / menu))\n    :op2 (o4 / offer-01\n             :condition (r / request-01\n                           :ARG1 (m / meat))))", "(d / disguise-01\n   :ARG1 (m / meat)\n   :frequency (o3 / often))", "(d / disguise-01\n   :ARG1 (m / meat)\n   :location (m2 / menu)\n   :frequency (o3 / often))", "(o4 / offer-01\n    :mod (o5 / only)\n    :condition (r / request-01\n                  :ARG1 (m / meat)))", "(l / let-01\n   :ARG0 (l2 / loophole)\n   :ARG1 (b / bring-01\n            :ARG0 (p / person)))", "(l / let-01\n   :ARG0 (l2 / loophole)\n   :ARG1 (b / bring-01\n            :purpose (c2 / consume-01\n                         :ARG1 (m / meat))))", "(b / bring-01\n   :purpose (c2 / consume-01\n                :ARG1 (p2 / personal-02)))", "(b / bring-01\n   :ARG1 (m / meat\n            :quant (m2 / mass-quantity\n                       :quant 20))\n   :ARG2 (c / country\n            :name (n / name\n                     :op1 \"UK\"))\n   :purpose (c2 / consume-01\n                :ARG0 (p / person)))"], "smus": ["Chinese restaurants can be selling.", "Up to one fifth of the restaurants could be selling.", "soup selling using illegal meat could", "up to a fifth", "using illegal meat.", "or offered if meat is requested.", "disguised on the menu or offered if meat is requested.", "meat is often disguised.", "meat is often disguised on the menu.", "Only offered if meat is requested.", "Loophole lets people bring.", "The Loophole lets the meat be brought in for consumption.", "Bring for personal consumption.", "20kg of meat to be brought to the UK for personal consumption."]}, {"instance_id": "realsumm-86", "summary": "<t> Two types of cereal in an Easter egg with marshmallows and brownies . </t> <t> Served at Black Milk cafe in Manchester 's Northern Quarter . ' </t> <t> Easter is less about what is used to mean , ' cafe owner Olly Taylor said . </t>", "summary_trees": ["# ::snt  Two types of cereal in an Easter egg with marshmallows and brownies . \n(c / cereal\n      :mod (t / type\n            :quant 2)\n      :location (e / egg\n            :mod (f / festival\n                  :name (n / name\n                        :op1 \"Easter\")))\n      :accompanier (a / and\n            :op1 (m / marshmallow)\n            :op2 (b / brownie)))", "# ::snt  Served at Black Milk cafe in Manchester 's Northern Quarter . ' \n(s / serve-01\n      :location (c / cafe\n            :name (n / name\n                  :op1 \"Black\"\n                  :op2 \"Milk\")\n            :location (q / quarter\n                  :name (n2 / name\n                        :op1 \"Northern\"\n                        :op2 \"Quarter\")\n                  :part-of (c2 / city\n                        :name (n3 / name\n                              :op1 \"Manchester\")))))", "# ::snt  Easter is less about what is used to mean , ' cafe owner Olly Taylor said . \n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Olly\"\n                  :op2 \"Taylor\")\n            :ARG0-of (o / own-01\n                  :ARG1 (c / cafe)))\n      :ARG1 (c2 / concern-02\n            :ARG0 (f / festival\n                  :name (n2 / name\n                        :op1 \"Easter\"))\n            :ARG1 (t / thing\n                  :ARG2-of (m / mean-01\n                        :ARG1 f\n                        :time (u / use-03)))\n            :mod (l / less)))"], "tree": ["(c / cereal\n   :mod (t / type\n           :quant 2))", "(c / cereal\n   :mod (t / type\n           :quant 2)\n   :location (e / egg\n                :mod (f / festival\n                        :name (n / name\n                                 :op1 \"Easter\"))))", "(c / cereal\n   :mod (t / type\n           :quant 2)\n   :location (e / egg\n                :mod (f / festival\n                        :name (n / name\n                                 :op1 \"Easter\")))\n   :accompanier (m / marshmallow))", "(c / cereal\n   :mod (t / type\n           :quant 2)\n   :location (e / egg\n                :mod (f / festival\n                        :name (n / name\n                                 :op1 \"Easter\")))\n   :accompanier (b / brownie))", "(a / and\n   :op1 (m / marshmallow)\n   :op2 (b / brownie))", "(s / serve-01\n   :location (c / cafe\n                :name (n / name\n                         :op1 \"Black\"\n                         :op2 \"Milk\")))", "(s / serve-01\n   :location (c / cafe\n                :location (q / quarter\n                             :name (n2 / name\n                                       :op1 \"Northern\"\n                                       :op2 \"Quarter\"))))", "(c / cafe\n   :location (q / quarter\n                :name (n2 / name\n                          :op1 \"Northern\"\n                          :op2 \"Quarter\")))", "(c / cafe\n   :location (q / quarter\n                :part (c2 / city\n                          :name (n3 / name\n                                    :op1 \"Manchester\"))))", "(c / cafe\n   :name (n / name\n            :op1 \"Black\"\n            :op2 \"Milk\")\n   :location (q / quarter\n                :name (n2 / name\n                          :op1 \"Northern\"\n                          :op2 \"Quarter\")))", "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (o / own-01\n                     :ARG1 (c / cafe))))", "(p / person\n   :ARG0 (o / own-01\n            :ARG1 (c / cafe)))", "(p / person\n   :name (n / name\n            :op1 \"Olly\"\n            :op2 \"Taylor\")\n   :ARG0 (o / own-01\n            :ARG1 (c / cafe)))", "(c2 / concern-02\n    :ARG1 (t / thing\n             :ARG2 (m / mean-01\n                      :time (u / use-03)))\n    :mod (l / less))", "(c2 / concern-02\n    :ARG0 (f / festival\n             :name (n2 / name\n                       :op1 \"Easter\"))\n    :ARG1 (t / thing\n             :ARG2 (m / mean-01\n                      :time (u / use-03)))\n    :mod (l / less))"], "smus": ["Two types of cereal.", "There are two types of cereal in an Easter egg.", "There are two types of cereal in an Easter egg with marshmallows.", "There are two types of cereal in an Easter egg with brownies.", "Marshmallows and brownies.", "served in the Black Milk cafe.", "served in a cafe in Northern Quarter.", "The cafe is in Northern Quarter.", "a cafe in the Manchester quarter.", "The Black Milk Cafe in Northern Quarter.", "The owner of the cafe said --", "The owner of the cafe.", "Owner of the cafe, Ollie Taylor.", "Less about what used to mean.", "There's less about Easter than what it used to mean."]}, {"instance_id": "realsumm-87", "summary": "<t> The European Union will accuse Google of illegally abusing Union supremacy . </t> <t> Union could fine Google more than \u00a3 4 billion - 10 per cent of Union annual revenue . </t> <t> Brussels to say Union uses search engine to divert traffic to Union own services . </t> <t> Google boasts a 90 per cent share in Europe 's search engine market . </t>", "summary_trees": ["# ::snt  The European Union will accuse Google of illegally abusing Union supremacy . \n(a / accuse-01\n      :ARG0 (o / organization\n            :name (n / name\n                  :op1 \"European\"\n                  :op2 \"Union\"))\n      :ARG1 (c / company\n            :name (n2 / name\n                  :op1 \"Google\"))\n      :ARG2 (a2 / abuse-02\n            :ARG0 c\n            :ARG1 (s / supremacy\n                  :poss o)\n            :manner (l / law\n                  :polarity -)))", "# ::snt  Union could fine Google more than \u00a3 4 billion - 10 per cent of Union annual revenue . \n(p / possible-01\n      :ARG1 (f / fine-01\n            :ARG0 (c / company\n                  :name (n / name\n                        :op1 \"Union\"))\n            :ARG1 (m / more-than\n                  :op1 (m2 / monetary-quantity\n                        :quant 4000000000\n                        :unit (p2 / pound)\n                        :ARG1-of (m3 / mean-01\n                              :ARG2 (p3 / percentage-entity\n                                    :value 10\n                                    :ARG3-of (ii / include-91\n                                          :ARG2 (r / revenue\n                                                :poss c\n                                                :frequency (r2 / rate-entity-91\n                                                      :ARG3 (t / temporal-quantity\n                                                            :quant 1\n                                                            :unit (y / year)))))))))\n            :ARG2 (c2 / company\n                  :name (n2 / name\n                        :op1 \"Google\"))))", "# ::snt  Brussels to say Union uses search engine to divert traffic to Union own services . \n(s / say-01\n      :ARG0 (c / city\n            :name (n / name\n                  :op1 \"Brussels\"))\n      :ARG1 (u / use-01\n            :ARG0 (o / organization\n                  :name (n2 / name\n                        :op1 \"Union\"))\n            :ARG1 (s2 / search-engine)\n            :ARG2 (d / divert-01\n                  :ARG0 o\n                  :ARG1 (t / traffic)\n                  :ARG3 (s3 / service\n                        :poss o))))", "# ::snt  Google boasts a 90 per cent share in Europe 's search engine market . \n(b / boast-01\n      :ARG0 (c / company\n            :name (n / name\n                  :op1 \"Google\"))\n      :ARG1 (s / share-01\n            :ARG1 (m / market\n                  :mod (s2 / search-engine)\n                  :location (c2 / continent\n                        :name (n2 / name\n                              :op1 \"Europe\")))\n            :ARG2 c\n            :quant (p / percentage-entity\n                  :value 90)))"], "tree": ["(a / accuse-01\n   :ARG0 (o / organization\n            :name (n / name\n                     :op1 \"European\"\n                     :op2 \"Union\")))", "(a / accuse-01\n   :ARG0 (o / organization\n            :name (n / name\n                     :op1 \"European\"\n                     :op2 \"Union\"))\n   :ARG1 (c / company\n            :name (n2 / name\n                      :op1 \"Google\")))", "(a / accuse-01\n   :ARG0 (o / organization\n            :name (n / name\n                     :op1 \"European\"\n                     :op2 \"Union\"))\n   :ARG2 (a2 / abuse-02\n             :ARG0 (c / company :name (n2 / name :op1 \"Google\"))))", "(a / accuse-01\n   :ARG1 (c / company\n            :name (n2 / name\n                      :op1 \"Google\"))\n   :ARG2 (a2 / abuse-02\n             :manner (l / law\n                        :polarity -)))", "(a / accuse-01\n   :ARG0 (o / organization\n            :name (n / name\n                     :op1 \"European\"\n                     :op2 \"Union\"))\n   :ARG1 (c / company\n            :name (n2 / name\n                      :op1 \"Google\"))\n   :ARG2 (a2 / abuse-02\n             :manner (l / law\n                        :polarity -)))", "(p / possible-01\n   :ARG1 (f / fine-01\n            :ARG0 (c / company\n                     :name (n / name\n                              :op1 \"Union\"))))", "(p / possible-01\n   :ARG1 (f / fine-01\n            :ARG1 (m / more-than\n                     :op1 (m2 / monetary-quantity\n                              :quant 4000000000))))", "(p / possible-01\n   :ARG1 (f / fine-01\n            :ARG1 (m / more-than\n                     :op1 (m2 / monetary-quantity\n                              :ARG1 (m3 / mean-01\n                                        :ARG2 (p3 / percentage-entity\n                                                  :ARG3 (ii / include-91\n                                                            :ARG2 (r / revenue\n                                                                     :poss (c / company :name (n / name :op1 \"Union\"))))))))))", "(p / possible-01\n   :ARG1 (f / fine-01\n            :ARG1 (m / more-than\n                     :op1 (m2 / monetary-quantity\n                              :ARG1 (m3 / mean-01\n                                        :ARG2 (p3 / percentage-entity\n                                                  :ARG3 (ii / include-91\n                                                            :ARG2 (r / revenue\n                                                                     :frequency (r2 / rate-entity-91\n                                                                                    :ARG3 (t / temporal-quantity\n                                                                                             :unit (y / year)))))))))))", "(ii / include-91\n    :ARG2 (r / revenue\n             :frequency (r2 / rate-entity-91\n                            :ARG3 (t / temporal-quantity\n                                     :unit (y / year)))))", "(s / say-01\n   :ARG1 (u / use-01\n            :ARG2 (d / divert-01\n                     :ARG0 (o / organization :name (n2 / name :op1 \"Union\")))))", "(s / say-01\n   :ARG0 (c / city\n            :name (n / name\n                     :op1 \"Brussels\"))\n   :ARG1 (u / use-01\n            :ARG0 (o / organization\n                     :name (n2 / name\n                               :op1 \"Union\"))))", "(u / use-01\n   :ARG0 (o / organization\n            :name (n2 / name\n                      :op1 \"Union\"))\n   :ARG1 (s2 / search-engine))", "(u / use-01\n   :ARG0 (o / organization\n            :name (n2 / name\n                      :op1 \"Union\"))\n   :ARG1 (s2 / search-engine)\n   :ARG2 (d / divert-01\n            :ARG0 o))", "(u / use-01\n   :ARG0 (o / organization\n            :name (n2 / name\n                      :op1 \"Union\"))\n   :ARG1 (s2 / search-engine)\n   :ARG2 (d / divert-01\n            :ARG1 (t / traffic)))", "(b / boast-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Google\")))", "(b / boast-01\n   :ARG1 (s / share-01\n            :quant (p / percentage-entity\n                      :value 90)))", "(b / boast-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Google\"))\n   :ARG1 (s / share-01\n            :ARG1 (m / market\n                     :mod (s2 / search-engine))))", "(b / boast-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Google\"))\n   :ARG1 (s / share-01\n            :quant (p / percentage-entity\n                      :value 90)))", "(b / boast-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Google\"))\n   :ARG1 (s / share-01\n            :ARG1 (m / market\n                     :location (c2 / continent\n                                   :name (n2 / name\n                                             :op1 \"Europe\")))))"], "smus": ["The European Union will accuse.", "The European Union will accuse Google.", "The European Union will accuse Google of abusing.", "accuse Google of illegally abusing.", "The European Union will accuse Google of illegally abusing.", "Union can fine.", "More than 4 billion could be fined.", "More than a percentage of Union's revenue could be fined.", "More than a percent of annual revenue can be fined.", "is part of annual revenue.", "Says Union uses to divert.", "Brussels says the Union uses.", "The Union uses a search engine.", "Union uses search engine to divert", "The Union uses a search engine to divert traffic.", "Google boasts.", "boasts a share of 90 percent.", "Google boasts a share of the search engine market.", "Google boasts a 90 percent share.", "Google boasts a market share in Europe."]}, {"instance_id": "realsumm-88", "summary": "<t> Phil Smith , 25 , forgot Smith keys and scaled fence to try to get in Smith flat . </t> <t> But teaching assistant fell and hit Smith head while climbing through window . </t> <t> Smith fractured Smith skull and suffered a bleed on the brain and a blood clot . </t> <t> Parents paid tribute to ' lovely son ' who worked at special needs school . </t>", "summary_trees": ["# ::snt  Phil Smith , 25 , forgot Smith keys and scaled fence to try to get in Smith flat . \n(f / forget-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Phil\"\n                  :op2 \"Smith\")\n            :age (t / temporal-quantity\n                  :quant 25\n                  :unit (y / year)))\n      :ARG1 (a / and\n            :op1 (k / key\n                  :poss p)\n            :op2 (s / scale-01\n                  :ARG0 p\n                  :ARG1 (f2 / fence)\n                  :purpose (t2 / try-01\n                        :ARG0 p\n                        :ARG1 (g / get-05\n                              :ARG1 p\n                              :ARG2 (f3 / flat\n                                    :poss p))))))", "# ::snt  But teaching assistant fell and hit Smith head while climbing through window . \n(c / contrast-01\n      :ARG2 (a / and\n            :op1 (f / fall-01\n                  :ARG1 (p / person\n                        :ARG0-of (a2 / assist-01\n                              :ARG1 (t / teach-01))))\n            :op2 (h / hit-01\n                  :ARG0 p\n                  :ARG1 (h2 / head\n                        :part-of (p2 / person\n                              :name (n / name\n                                    :op1 \"Smith\"))))\n            :time (c2 / climb-01\n                  :ARG0 p\n                  :path (t2 / through\n                        :op1 (w / window)))))", "# ::snt  Smith fractured Smith skull and suffered a bleed on the brain and a blood clot . \n(a / and\n      :op1 (f / fracture-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Smith\")\n                  :part (s / skull))\n            :ARG1 s)\n      :op2 (s2 / suffer-01\n            :ARG0 p\n            :ARG1 (a2 / and\n                  :op1 (b / bleed-01\n                        :ARG1 s)\n                  :op2 (c / clot\n                        :mod (b2 / blood)))))", "# ::snt  Parents paid tribute to ' lovely son ' who worked at special needs school . \n(p / pay-01\n      :ARG0 (p2 / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG2 (p3 / parent)))\n      :ARG1 (t / tribute)\n      :ARG2 (p4 / person\n            :ARG0-of (h2 / have-rel-role-91\n                  :ARG2 (s / son))\n            :mod (l / lovely)\n            :ARG0-of (w / work-01\n                  :ARG2 (s2 / school\n                        :ARG1-of (n / need-01\n                              :ARG1-of (s3 / special-02))))))"], "tree": ["(f / forget-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Phil\"\n                     :op2 \"Smith\")))", "(f / forget-01\n   :ARG0 (p / person\n            :age (t / temporal-quantity\n                    :quant 25)))", "(f / forget-01\n   :ARG1 (k / key\n            :poss (p / person :name (n / name :op1 \"Phil\" :op2 \"Smith\")))))", "(f / forget-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Phil\"\n                     :op2 \"Smith\"))\n   :ARG1 (k / key\n            :poss p))", "(f / forget-01\n   :ARG0 (p / person\n            :age (t / temporal-quantity\n                    :quant 25))\n   :ARG1 (k / key\n            :poss p))", "(c / contrast-01\n   :ARG2 (f / fall-01\n            :ARG1 (p / person\n                     :ARG0 (a2 / assist-01\n                               :ARG1 (t / teach-01)))))", "(a / and\n   :op1 (f / fall-01\n           :ARG1 (p / person\n                    :ARG0 (a2 / assist-01\n                              :ARG1 (t / teach-01)))))", "(a / and\n   :op1 (f / fall-01\n           :ARG1 (p / person\n                    :ARG0 (a2 / assist-01\n                              :ARG1 (t / teach-01))))\n   :op2 (h / hit-01\n           :ARG0 p))", "(a / and\n   :op1 (f / fall-01\n           :ARG1 (p / person\n                    :ARG0 (a2 / assist-01\n                              :ARG1 (t / teach-01))))\n   :time (c2 / climb-01\n             :ARG0 p))", "(f / fall-01\n   :ARG1 (p / person\n            :ARG0 (a2 / assist-01\n                      :ARG1 (t / teach-01))))", "(a / and\n   :op2 (s2 / suffer-01\n            :ARG1 (c / clot\n                     :mod (b2 / blood))))", "(a / and\n   :op1 (f / fracture-01\n           :ARG0 (p / person\n                    :name (n / name\n                             :op1 \"Smith\")))\n   :op2 (s2 / suffer-01\n            :ARG0 p))", "(a / and\n   :op1 (f / fracture-01\n           :ARG0 (p / person\n                    :name (n / name\n                             :op1 \"Smith\")\n                    :part (s / skull)))\n   :op2 (s2 / suffer-01\n            :ARG0 p))", "(s2 / suffer-01\n    :ARG1 (c / clot\n             :mod (b2 / blood)))", "(p / pay-01\n   :ARG0 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG2 (p3 / parent))))", "(p / pay-01\n   :ARG0 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG2 (p3 / parent)))\n   :ARG2 (p4 / person\n             :ARG0 (w / work-01\n                      :ARG2 (s2 / school\n                                :ARG1 (n / need-01\n                                         :ARG1 (s3 / special-02))))))", "(p / pay-01\n   :ARG0 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG2 (p3 / parent)))\n   :ARG1 (t / tribute))", "(p4 / person\n    :ARG0 (h2 / have-rel-role-91\n              :ARG2 (s / son))\n    :mod (l / lovely))", "(w / work-01\n   :ARG2 (s2 / school\n             :ARG1 (n / need-01\n                      :ARG1 (s3 / special-02))))"], "smus": ["Phil Smith forgot.", "The 25-year-old forgot.", "Phil Smith's keys were forgotten.", "Phil Smith forgot his keys.", "The 25-year-old forgot his keys.", "But the teaching assistant fell.", "And the teaching assistant fell.", "The teaching assistant fell and hit.", "And the teaching assistant fell while climbing.", "The teaching assistant fell.", "and suffered from a blood clot.", "Smith fractured and suffered.", "Smith fractured his skull and suffered.", "suffered from a blood clot.", "Parents paid.", "Parents paid the person who worked in a special needs school.", "Parents paid tribute.", "Lovely son.", "Worked for a school with special needs."]}, {"instance_id": "realsumm-89", "summary": "<t> Emmanuel Adebayor 's current Tottenham contract runs out in 2016 . </t> <t> The striker is unwilling to take anything less than striker current \u00a3 5.2million salary before accepting a move out of White Hart Lane . </t> <t> Togolese forward has made just nine league starts this season . </t>", "summary_trees": ["# ::snt  Emmanuel Adebayor 's current Tottenham contract runs out in 2016 . \n(r / run-out-05\n      :ARG1 (c / contract\n            :poss (p / person\n                  :name (n / name\n                        :op1 \"Emmanuel\"\n                        :op2 \"Adebayor\"))\n            :time (c2 / current)\n            :mod (t / team\n                  :name (n2 / name\n                        :op1 \"Tottenham\")))\n      :time (d / date-entity\n            :year 2016))", "# ::snt  The striker is unwilling to take anything less than striker current \u00a3 5.2million salary before accepting a move out of White Hart Lane . \n(w / will-02\n      :polarity -\n      :ARG0 (p / person\n            :ARG0-of (s / strike-02))\n      :ARG1 (t / take-01\n            :ARG0 p\n            :ARG1 (a / anything\n                  :ARG1-of (h / have-quant-91\n                        :ARG3 (l / less)\n                        :ARG4 (s2 / salary\n                              :mod (m / monetary-quantity\n                                    :quant 5500000\n                                    :unit (p2 / pound))\n                              :poss p\n                              :time (c / current)))))\n      :time (b / before\n            :op1 (a2 / accept-01\n                  :ARG0 p\n                  :ARG1 (m2 / move-01\n                        :ARG0 p\n                        :ARG2 (r / road\n                              :name (n / name\n                                    :op1 \"White\"\n                                    :op2 \"Hart\"\n                                    :op3 \"Lane\"))))))", "# ::snt  Togolese forward has made just nine league starts this season . \n(s / start-01\n      :ARG0 (f / forward\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"Togolese\")))\n      :mod (l / league)\n      :quant (j / just\n            :op1 9)\n      :time (s2 / season\n            :mod (t / this)))"], "tree": ["(r / run-out-05\n   :ARG1 (c / contract\n            :time (c2 / current)))", "(r / run-out-05\n   :time (d / date-entity\n            :year 2016))", "(r / run-out-05\n   :ARG1 (c / contract\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Emmanuel\"\n                              :op2 \"Adebayor\")))\n   :time (d / date-entity\n            :year 2016))", "(r / run-out-05\n   :ARG1 (c / contract\n            :time (c2 / current))\n   :time (d / date-entity\n            :year 2016))", "(c / contract\n   :poss (p / person\n            :name (n / name\n                     :op1 \"Emmanuel\"\n                     :op2 \"Adebayor\"))\n   :time (c2 / current)\n   :mod (t / team\n           :name (n2 / name\n                     :op1 \"Tottenham\")))", "(h / have-quant-91\n   :ARG4 (s2 / salary\n             :poss (p / person)))", "(h / have-quant-91\n   :ARG3 (l / less)\n   :ARG4 (s2 / salary\n             :mod (m / monetary-quantity\n                     :quant 5500000)))", "(b / before\n   :op1 (a2 / accept-01\n            :ARG0 (p / person)))", "(b / before\n   :op1 (a2 / accept-01\n            :ARG1 (m2 / move-01\n                      :ARG0 (p / person))))", "(r / road\n   :name (n / name\n            :op1 \"White\"\n            :op2 \"Hart\"\n            :op3 \"Lane\"))", "(s / start-01\n   :quant (j / just\n             :op1 9)\n   :time (s2 / season\n             :mod (t / this)))", "(s / start-01\n   :ARG0 (f / forward\n            :mod (c / country\n                    :name (n / name\n                             :op1 \"Togolese\")))\n   :mod (l / league)\n   :quant (j / just\n             :op1 9))", "(s / start-01\n   :ARG0 (f / forward\n            :mod (c / country\n                    :name (n / name\n                             :op1 \"Togolese\")))\n   :quant (j / just\n             :op1 9)\n   :time (s2 / season\n             :mod (t / this)))", "(s / start-01\n   :mod (l / league)\n   :quant (j / just\n             :op1 9)\n   :time (s2 / season\n             :mod (t / this)))", "(s / start-01\n   :ARG0 (f / forward\n            :mod (c / country\n                    :name (n / name\n                             :op1 \"Togolese\")))\n   :mod (l / league)\n   :quant (j / just\n             :op1 9)\n   :time (s2 / season\n             :mod (t / this)))"], "smus": ["Current contract runs out.", "Run out in 2016.", "Emmanuel Adebayor's contract runs out in 2016.", "Current contract runs out in 2016.", "Emmanuel Adebayor's current contract is with Tottenham.", "the salary of the person", "less than a salary of 5. million.", "before accepting.", "Before accepting a move by the person.", "White Hart Lane", "Just 9 starts this season.", "The Togolese forward starts just 9 league starts.", "The Togolese forward starts just 9 starts this season.", "Just 9 league starts this season.", "The Togolese forward starts just 9 league starts this season."]}, {"instance_id": "realsumm-90", "summary": "<t> John Helm was commentating on the game the day the fire broke out . </t> <t> Helm gives Helm insight into what cause the blaze 30 years ago . ' </t> <t> From everything I have been told there is n\u2019t a jot of evidence to suggest the blaze was caused deliberately , ' says Helm . </t>", "summary_trees": ["# ::snt  John Helm was commentating on the game the day the fire broke out . \n(c / commentate-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"John\"\n                  :op2 \"Helm\"))\n      :ARG3 (g / game)\n      :time (b / break-out-30\n            :ARG1 (f / fire)))", "# ::snt  Helm gives Helm insight into what cause the blaze 30 years ago . ' \n(g / give-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Helm\"))\n      :ARG1 (ii / insight\n            :topic (t / thing\n                  :ARG0-of (c / cause-01\n                        :ARG1 (b / blaze-01\n                              :time (b2 / before\n                                    :op1 (n2 / now)\n                                    :quant (t2 / temporal-quantity\n                                          :quant 30\n                                          :unit (y / year)))))))\n      :ARG2 p)", "# ::snt  From everything I have been told there is n\u2019t a jot of evidence to suggest the blaze was caused deliberately , ' says Helm . \n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Helm\"))\n      :ARG1 (e / evidence-01\n            :polarity -\n            :quant (j / jot)\n            :ARG0-of (s2 / suggest-01\n                  :ARG1 (c / cause-01\n                        :ARG1 (b / blaze-01)\n                        :manner (d / deliberate)))\n            :source (e2 / everything\n                  :ARG1-of (t / tell-01\n                        :ARG2 (ii / i)))))"], "tree": ["(c / commentate-01\n   :time (b / break-out-30\n            :ARG1 (f / fire)))", "(c / commentate-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\"\n                     :op2 \"Helm\"))\n   :ARG3 (g / game))", "(c / commentate-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\"\n                     :op2 \"Helm\"))\n   :time (b / break-out-30\n            :ARG1 (f / fire)))", "(c / commentate-01\n   :ARG3 (g / game)\n   :time (b / break-out-30\n            :ARG1 (f / fire)))", "(p / person\n   :name (n / name\n            :op1 \"John\"\n            :op2 \"Helm\"))", "(g / give-01\n   :ARG1 (ii / insight\n             :topic (t / thing\n                       :ARG0 (c / cause-01\n                                :ARG1 (b / blaze-01\n                                         :time (b2 / before\n                                                   :quant (t2 / temporal-quantity\n                                                              :unit (y / year))))))))", "(g / give-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Helm\"))\n   :ARG1 (ii / insight\n             :topic (t / thing\n                       :ARG0 (c / cause-01\n                                :ARG1 (b / blaze-01\n                                         :time (b2 / before\n                                                   :quant (t2 / temporal-quantity\n                                                              :unit (y / year))))))))", "(g / give-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Helm\"))\n   :ARG1 (ii / insight\n             :topic (t / thing\n                       :ARG0 (c / cause-01\n                                :ARG1 (b / blaze-01\n                                         :time (b2 / before\n                                                   :quant (t2 / temporal-quantity\n                                                              :unit (y / year)))))))\n   :ARG2 p)", "(ii / insight\n    :topic (t / thing\n              :ARG0 (c / cause-01\n                       :ARG1 (b / blaze-01\n                                :time (b2 / before\n                                          :quant (t2 / temporal-quantity\n                                                     :quant 30))))))", "(b / blaze-01\n   :time (b2 / before\n             :quant (t2 / temporal-quantity\n                        :quant 30)))", "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Helm\")))", "(s / say-01\n   :ARG1 (e / evidence-01\n            :source (e2 / everything\n                        :ARG1 (t / tell-01\n                                 :ARG2 (ii / i)))))", "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Helm\"))\n   :ARG1 (e / evidence-01\n            :source (e2 / everything\n                        :ARG1 (t / tell-01\n                                 :ARG2 (ii / i)))))", "(p / person\n   :name (n / name\n            :op1 \"Helm\"))", "(e / evidence-01\n   :source (e2 / everything\n               :ARG1 (t / tell-01\n                        :ARG2 (ii / i))))"], "smus": ["Commentating as the fire broke out.", "John Helm commentating on the game.", "John Helm was commentating when the fire broke out.", "Commentating on the game as the fire broke out.", "John Helm", "gives insight into the cause of the blaze years earlier.", "Helm gives insight into the cause of the blaze of years earlier.", "Helm gives him insight into the cause of the blaze of the past.", "An insight into the cause of the blaze that occurred 30 years earlier.", "The blaze occurred 30 years earlier.", "\"Helm says.", "evi from everythiy I've been told...", "\"Evi from everythiy I've been told, he says,\" says Helm.", "Helm.", "evi from everythiy I've been told."]}, {"instance_id": "realsumm-91", "summary": "<t> Rory McIlroy faced with Fifty Shades of Grey 's Jamie Dornan . </t> <t> McIlroy and Dornan took part in the first Circular Soccer Showdown of 2015 . </t> <t> McIlroy finished strongly to finish an impressive fourth at the Masters . </t> <t> READ : It wo n't be too long before McIlroy wins a Masters . </t>", "summary_trees": ["# ::snt  Rory McIlroy faced with Fifty Shades of Grey 's Jamie Dornan . \n(f / face-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Rory\"\n                  :op2 \"McIlroy\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Jamie\"\n                  :op2 \"Dornan\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (b / book\n                        :name (n3 / name\n                              :op1 \"Fifty\"\n                              :op2 \" Shades\"\n                              :op3 \"of\"\n                              :op4 \"Grey\")))))", "# ::snt  McIlroy and Dornan took part in the first Circular Soccer Showdown of 2015 . \n(p / participate-01\n      :ARG0 (a / and\n            :op1 (p2 / person\n                  :name (n / name\n                        :op1 \"McIlroy\"))\n            :op2 (p3 / person\n                  :name (n2 / name\n                        :op1 \"Dornan\")))\n      :ARG1 (g / game\n            :name (n3 / name\n                  :op1 \"Circular\"\n                  :op2 \"Soccer\"\n                  :op3 \"Showdown\")\n            :ord (o / ordinal-entity\n                  :value 1)\n            :time (d / date-entity\n                  :year 2015)))", "# ::snt  McIlroy finished strongly to finish an impressive fourth at the Masters . \n(f / finish-07\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"McIlroy\"))\n      :ARG1-of (s / strong-02)\n      :purpose (f2 / finish-07\n            :ARG0 p\n            :ARG2 (f3 / fourth\n                  :ARG0-of (ii / impress-01))\n            :location (g / game\n                  :name (n2 / name\n                        :op1 \"Masters\"))))", "# ::snt  READ : It wo n't be too long before McIlroy wins a Masters . \n(r / read-01\n      :mode imperative\n      :ARG0 (y / you)\n      :ARG1 (b / before\n            :op1 (w / win-01\n                  :ARG0 (p / person\n                        :name (n / name\n                              :op1 \"McIlroy\"))\n                  :ARG1 (g / game\n                        :name (n2 / name\n                              :op1 \"Masters\")))\n            :ARG1-of (l / long-03\n                  :polarity -\n                  :ARG2-of (h / have-degree-91\n                        :ARG1 b\n                        :ARG3 (t / too)))))"], "tree": ["(f / face-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Jamie\"\n                       :op2 \"Dornan\")))", "(f / face-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rory\"\n                     :op2 \"McIlroy\"))\n   :ARG1 (p2 / person\n             :ARG0 (h / have-org-role-91\n                      :ARG1 (b / book\n                               :name (n3 / name\n                                         :op1 \"Fifty\"\n                                         :op2 \" Shades\"\n                                         :op3 \"of\"\n                                         :op4 \"Grey\")))))", "(p2 / person\n    :name (n2 / name\n              :op1 \"Jamie\"\n              :op2 \"Dornan\"))", "(p2 / person\n    :ARG0 (h / have-org-role-91\n             :ARG1 (b / book\n                      :name (n3 / name\n                                :op1 \"Fifty\"\n                                :op2 \" Shades\"\n                                :op3 \"of\"\n                                :op4 \"Grey\"))))", "(p / participate-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"McIlroy\")))", "(p / participate-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"Dornan\")))", "(p / participate-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"McIlroy\"))\n   :ARG1 (g / game\n            :name (n3 / name\n                      :op1 \"Circular\"\n                      :op2 \"Soccer\"\n                      :op3 \"Showdown\")))", "(p / participate-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"Dornan\"))\n   :ARG1 (g / game\n            :name (n3 / name\n                      :op1 \"Circular\"\n                      :op2 \"Soccer\"\n                      :op3 \"Showdown\")))", "(a / and\n   :op1 (p2 / person\n            :name (n / name\n                     :op1 \"McIlroy\"))\n   :op2 (p3 / person\n            :name (n2 / name\n                      :op1 \"Dornan\")))", "(f / finish-07\n   :ARG1 (s / strong-02)\n   :purpose (f2 / finish-07\n                :ARG2 (f3 / fourth\n                          :ARG0 (ii / impress-01))))", "(f / finish-07\n   :ARG1 (s / strong-02)\n   :purpose (f2 / finish-07\n                :location (g / game\n                             :name (n2 / name\n                                       :op1 \"Masters\"))))", "(p / person\n   :name (n / name\n            :op1 \"McIlroy\"))", "(f2 / finish-07\n    :location (g / game\n                 :name (n2 / name\n                           :op1 \"Masters\")))", "(f2 / finish-07\n    :ARG2 (f3 / fourth\n              :ARG0 (ii / impress-01))\n    :location (g / game\n                 :name (n2 / name\n                           :op1 \"Masters\")))", "(r / read-01\n   :ARG1 (b / before\n            :ARG1 (l / long-03\n                     :ARG2 (h / have-degree-91\n                              :ARG3 (t / too)))))", "(b / before\n   :ARG1 (l / long-03\n            :polarity -))", "(b / before\n   :ARG1 (l / long-03\n            :ARG2 (h / have-degree-91\n                     :ARG3 (t / too))))", "(b / before\n   :op1 (w / win-01\n           :ARG0 (p / person\n                    :name (n / name\n                             :op1 \"McIlroy\")))\n   :ARG1 (l / long-03\n            :polarity -))"], "smus": ["Jamie Dornan faced.", "-Rory McIlroy faced fifty shades of grey.", "Jamie Dornan", "fifty shades of grey", "McIlroy was a participant.", "Dornan was a participant.", "McIlroy was in the Circular Soccer Showdown.", "Dornan was in the Circular Soccer Showdown.", "McIlroy and Dornan.", "Finish strong to finish in the top four.", "Finish strong to finish in the Masters.", "McIlroy", "Finish the Masters.", "Finish fourth in the Masters.", "Read before too long.", "Not long before.", "before too long.", "It won't be long before McIlroy wins."]}, {"instance_id": "realsumm-92", "summary": "<t> Chris Christie appeared on The Tonight Show and called out Jimmy Fallon for Fallon weight jokes about the governor . </t> <t> Later in the program Fallon hoarded a pint of ice cream Fallon brought out for the two to share . </t> <t> When asked if Christie would run for president , Christie said ; ' I \u2019ve got a day job which keeps me busy ' . </t>", "summary_trees": ["# ::snt  Chris Christie appeared on The Tonight Show and called out Jimmy Fallon for Fallon weight jokes about the governor . \n(a / and\n      :op1 (a2 / appear-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Chris\"\n                        :op2 \"Christie\"))\n            :location (b / broadcast-program\n                  :name (n2 / name\n                        :op1 \"The\"\n                        :op2 \"Tonight\"\n                        :op3 \"Show\")))\n      :op2 (c / call-out-15\n            :ARG0 p\n            :ARG1 (p2 / person\n                  :name (n3 / name\n                        :op1 \"Jimmy\"\n                        :op2 \"Fallon\"))\n            :ARG2 (j / joke-01\n                  :ARG0 p2\n                  :ARG2 (p3 / person\n                        :ARG0-of (h / have-org-role-91\n                              :ARG2 (g / governor)))\n                  :topic (w / weight))))", "# ::snt  Later in the program Fallon hoarded a pint of ice cream Fallon brought out for the two to share . \n(h / hoard-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Fallon\"))\n      :ARG1 (ii / ice-cream\n            :quant (p2 / pint)\n            :ARG1-of (b / bring-01\n                  :ARG0 p\n                  :ARG2 (o / out)\n                  :purpose (s / share-01\n                        :ARG0 (p3 / person\n                              :quant 2)\n                        :ARG1 ii)))\n      :time (l / late\n            :part-of (p4 / program)\n            :degree (s2 / somewhat)))", "# ::snt  When asked if Christie would run for president , Christie said ; ' I \u2019ve got a day job which keeps me busy ' . \n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Christie\"))\n      :ARG1 (h / have-03\n            :ARG0 p\n            :ARG1 (j / job\n                  :mod (d / day)\n                  :ARG0-of (k / keep-02\n                        :ARG1 (b / busy-01\n                              :ARG1 p))))\n      :time (a / ask-01\n            :ARG1 (t / truth-value\n                  :polarity-of (r / run-02\n                        :ARG0 p\n                        :ARG1 (p2 / person\n                              :ARG0-of (h2 / have-org-role-91\n                                    :ARG2 (p3 / president)))))\n            :ARG2 p))"], "tree": ["(a / and\n   :op1 (a2 / appear-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Chris\"\n                              :op2 \"Christie\"))))", "(a / and\n   :op1 (a2 / appear-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Chris\"\n                              :op2 \"Christie\")))\n   :op2 (c / call-out-15\n           :ARG0 p))", "(a / and\n   :op1 (a2 / appear-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Chris\"\n                              :op2 \"Christie\")))\n   :op2 (c / call-out-15\n           :ARG1 (p2 / person\n                     :name (n3 / name\n                               :op1 \"Jimmy\"\n                               :op2 \"Fallon\"))))", "(a2 / appear-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Chris\"\n                      :op2 \"Christie\")))", "(a2 / appear-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Chris\"\n                      :op2 \"Christie\"))\n    :location (b / broadcast-program\n                 :name (n2 / name\n                           :op1 \"The\"\n                           :op2 \"Tonight\"\n                           :op3 \"Show\")))", "(h / hoard-01\n   :ARG1 (ii / ice-cream\n             :quant (p2 / pint)))", "(h / hoard-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Fallon\"))\n   :ARG1 (ii / ice-cream\n             :quant (p2 / pint)))", "(h / hoard-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Fallon\"))\n   :ARG1 (ii / ice-cream\n             :quant (p2 / pint))\n   :time (l / late\n            :part (p4 / program)))", "(h / hoard-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Fallon\"))\n   :ARG1 (ii / ice-cream\n             :ARG1 (b / bring-01\n                      :purpose (s / share-01\n                                  :ARG1 ii)))\n   :time (l / late\n            :part (p4 / program)))", "(ii / ice-cream\n    :quant (p2 / pint)\n    :ARG1 (b / bring-01\n             :ARG0 (p / person :name (n / name :op1 \"Fallon\"))))", "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Christie\"))\n   :ARG1 (h / have-03\n            :ARG1 (j / job\n                     :mod (d / day))))", "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Christie\"))\n   :ARG1 (h / have-03\n            :ARG1 (j / job\n                     :ARG0 (k / keep-02\n                              :ARG1 (b / busy-01\n                                       :ARG1 p)))))", "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Christie\"))\n   :time (a / ask-01\n            :ARG2 p))", "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Christie\"))\n   :ARG1 (h / have-03\n            :ARG1 (j / job\n                     :mod (d / day)))\n   :time (a / ask-01\n            :ARG2 p))", "(h / have-03\n   :ARG1 (j / job\n            :mod (d / day)))"], "smus": ["And Chris Christie appeared.", "Chris Christie appeared and called out.", "Chris Christie appeared and called out Jimmy Fallon.", "Chris Christie appeared.", "Chris Christie appeared on The Tonight Show.", "hoarded a pint of ice-cream.", "Fallon hoarded a pint of ice-cream.", "Fallon hoarded a pint of ice-cream late in the program.", "Fallon hoarded ice-cream to share late in the program.", "Fallon brought a pint of ice-cream.", "Christie said \"I have a day job.\"", "Christie said he has a job that keeps him busy.", "Christie said when asked.", "Christie said \"I have a day job\" when asked.", "has a day job."]}, {"instance_id": "realsumm-93", "summary": "<t> Qantas ' on time rating slipped to 75th out of the 80 airlines using Heathrow . </t> <t> The airline could loose airlines eight landing strips at the popular airport . </t> <t> airlines are also facing a fine in excess of $ 38,000 for every flight that 's late . </t> <t> Qantas blamed air congestion at Heathrow and Dubai airports . </t>", "summary_trees": ["# ::snt  Qantas ' on time rating slipped to 75th out of the 80 airlines using Heathrow . \n(s / slip-01\n      :ARG1 (r / rate-01\n            :ARG1 (c / company\n                  :name (n / name\n                        :op1 \"Qantas\"))\n            :ARG3 (o / on-time))\n      :ARG4 (r2 / rank-01\n            :ARG2 75\n            :ARG1 c\n            :ARG5 (a / airline\n                  :quant 80\n                  :ARG0-of (u / use-01\n                        :ARG1 (a2 / airport\n                              :name (n2 / name\n                                    :op1 \"Heathrow\"))))))", "# ::snt  The airline could loose airlines eight landing strips at the popular airport . \n(p / possible-01\n      :ARG1 (l / lose-02\n            :ARG0 (a / airline)\n            :ARG1 (s / strip\n                  :quant 8\n                  :purpose (l2 / land-01)\n                  :location (a2 / airport\n                        :ARG1-of (p2 / popular-02)))\n            :ARG2 (a3 / airline)))", "# ::snt  airlines are also facing a fine in excess of $ 38,000 for every flight that 's late . \n(f / face-01\n      :ARG0 (a / airline)\n      :ARG1 (f2 / fine-01\n            :ARG1 (ii / in-excess-of\n                  :op1 (m / monetary-quantity\n                        :quant 38000\n                        :unit (d / dollar)))\n            :ARG3 (f3 / fly-01\n                  :mod (e / every)\n                  :ARG1-of (l / late-02)))\n      :mod (a2 / also))", "# ::snt  Qantas blamed air congestion at Heathrow and Dubai airports . \n(b / blame-01\n      :ARG0 (c / company\n            :name (n / name\n                  :op1 \"Qantas\"))\n      :ARG1 (c2 / congest-01\n            :ARG1 (a / air)\n            :location (a2 / and\n                  :op1 (a3 / airport\n                        :name (n2 / name\n                              :op1 \"Heathrow\"))\n                  :op2 (a4 / airport\n                        :name (n3 / name\n                              :op1 \"Dubai\")))))"], "tree": ["(s / slip-01\n   :ARG1 (r / rate-01\n            :ARG3 (o / on-time)))", "(s / slip-01\n   :ARG1 (r / rate-01\n            :ARG3 (o / on-time))\n   :ARG4 (r2 / rank-01\n             :ARG2 75))", "(c / company\n   :name (n / name\n            :op1 \"Qantas\"))", "(a / airline\n   :ARG0 (u / use-01\n            :ARG1 (a2 / airport\n                      :name (n2 / name\n                                :op1 \"Heathrow\"))))", "(u / use-01\n   :ARG1 (a2 / airport\n             :name (n2 / name\n                       :op1 \"Heathrow\")))", "(p / possible-01\n   :ARG1 (l / lose-02\n            :ARG0 (a / airline)))", "(p / possible-01\n   :ARG1 (l / lose-02\n            :ARG1 (s / strip\n                     :quant 8)))", "(p / possible-01\n   :ARG1 (l / lose-02\n            :ARG1 (s / strip\n                     :purpose (l2 / land-01))))", "(p / possible-01\n   :ARG1 (l / lose-02\n            :ARG1 (s / strip\n                     :location (a2 / airport\n                                   :ARG1 (p2 / popular-02)))))", "(f / face-01\n   :ARG1 (f2 / fine-01\n             :ARG3 (f3 / fly-01\n                       :ARG1 (l / late-02))))", "(f / face-01\n   :ARG0 (a / airline)\n   :ARG1 (f2 / fine-01\n             :ARG3 (f3 / fly-01\n                       :ARG1 (l / late-02))))", "(f / face-01\n   :ARG0 (a / airline)\n   :mod (a2 / also))", "(f / face-01\n   :ARG1 (f2 / fine-01\n             :ARG3 (f3 / fly-01\n                       :ARG1 (l / late-02)))\n   :mod (a2 / also))", "(f / face-01\n   :ARG0 (a / airline)\n   :ARG1 (f2 / fine-01\n             :ARG3 (f3 / fly-01\n                       :ARG1 (l / late-02)))\n   :mod (a2 / also))", "(b / blame-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Qantas\")))", "(b / blame-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Qantas\"))\n   :ARG1 (c2 / congest-01\n             :ARG1 (a / air)))", "(b / blame-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Qantas\"))\n   :ARG1 (c2 / congest-01\n             :location (a3 / airport\n                           :name (n2 / name\n                                     :op1 \"Heathrow\"))))", "(b / blame-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Qantas\"))\n   :ARG1 (c2 / congest-01\n             :location (a4 / airport\n                           :name (n3 / name\n                                     :op1 \"Dubai\"))))", "(c2 / congest-01\n    :ARG1 (a / air)\n    :location (a3 / airport\n                  :name (n2 / name\n                            :op1 \"Heathrow\")))"], "smus": ["Slipped the on-time rating.", "The on-time rating slipped to #75.", "Qantas", "airlines using Heathrow", "Using Heathrow.", "The airline could lose.", "8 strips could be lost.", "Landing strips could be lost.", "Strips at the popular airport could be lost.", "Faced with a fine for late flight.", "Airlines are facing a fine for late flights.", "The airlines are also facing.", "Also facing a fine for late flight.", "Airlines are also facing a fine for late flights.", "Qantas blamed.", "Qantas blamed air congestion.", "Qantas blamed congestion at Heathrow airport.", "Qantas blamed congest in Dubai.", "There was air congest at Heathrow."]}, {"instance_id": "realsumm-94", "summary": "<t> Christopher Starrs was spared jail in an ' act of mercy ' by judge in January . </t> <t> But senior judge has now said judge colleague took ' judge eye off the ball ' . </t> <t> Nicholas Cooke QC said wheelchair - bound Starrs should have been jailed . </t> <t> But added Starrs should thank QC lucky stars as sentence allowed to stand . </t>", "summary_trees": ["# ::snt  Christopher Starrs was spared jail in an ' act of mercy ' by judge in January . \n(s / spare-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG3 (j / judge-01)))\n      :ARG1 (p2 / person\n            :name (n / name\n                  :op1 \"Christopher\"\n                  :op2 \"Starrs\"))\n      :ARG2 (j2 / jail)\n      :manner (a / act-02\n            :ARG0 p\n            :ARG1 (m / mercy))\n      :time (d / date-entity\n            :month 1))", "# ::snt  But senior judge has now said judge colleague took ' judge eye off the ball ' . \n(c / contrast-01\n      :ARG2 (s / say-01\n            :ARG0 (p / person\n                  :ARG0-of (h / have-org-role-91\n                        :ARG3 (j / judge-01))\n                  :mod (s2 / senior))\n            :ARG1 (t / take-01\n                  :ARG0 (p2 / person\n                        :ARG0-of (h2 / have-org-role-91\n                              :ARG3 (c2 / colleague\n                                    :poss p)))\n                  :ARG1 (e / eye\n                        :part-of (p3 / person\n                              :ARG0-of (h3 / have-org-role-91\n                                    :ARG3 (j2 / judge-01))))\n                  :ARG2 (b / ball))\n            :time (n / now)))", "# ::snt  Nicholas Cooke QC said wheelchair - bound Starrs should have been jailed . \n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Nicholas\"\n                  :op2 \"Cooke\"\n                  :op3 \"Q QC\"))\n      :ARG1 (r / recommend-01\n            :ARG1 (j / jail-01\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Starrs\")\n                        :ARG1-of (b / bind-01\n                              :ARG2 (w / wheelchair))))))", "# ::snt  But added Starrs should thank QC lucky stars as sentence allowed to stand . \n(c / contrast-01\n      :ARG2 (a / add-01\n            :ARG1 (r / recommend-01\n                  :ARG1 (t / thank-01\n                        :ARG0 (p / person\n                              :name (n / name\n                                    :op1 \"Starrs\"))\n                        :ARG1 (p2 / person\n                              :ARG0-of (h / have-org-role-91\n                                    :ARG1 (g / government-organization\n                                          :name (n2 / name\n                                                :op1 \"Queensland\"\n                                                :op2 \"Court\"))\n                                    :ARG2 (a2 / attorney)))\n                        :ARG2 (s / star\n                              :mod (l / lucky)))\n                  :ARG1-of (c2 / cause-01\n                        :ARG0 (a3 / allow-01\n                              :ARG1 (s2 / stand-04\n                                    :ARG1 (s3 / sentence-01)))))))"], "tree": ["(s / spare-01\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Christopher\"\n                      :op2 \"Starrs\"))\n   :ARG2 (j2 / jail))", "(s / spare-01\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Christopher\"\n                      :op2 \"Starrs\"))\n   :ARG2 (j2 / jail)\n   :time (d / date-entity\n            :month 1))", "(s / spare-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG3 (j / judge-01)))\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Christopher\"\n                      :op2 \"Starrs\"))\n   :ARG2 (j2 / jail)\n   :time (d / date-entity\n            :month 1))", "(s / spare-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG3 (j / judge-01)))\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Christopher\"\n                      :op2 \"Starrs\"))\n   :manner (a / act-02\n              :ARG0 p\n              :ARG1 (m / mercy))\n   :time (d / date-entity\n            :month 1))", "(s / spare-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG3 (j / judge-01)))\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Christopher\"\n                      :op2 \"Starrs\"))\n   :ARG2 (j2 / jail)\n   :manner (a / act-02\n              :ARG0 p\n              :ARG1 (m / mercy))\n   :time (d / date-entity\n            :month 1))", "(c / contrast-01\n   :ARG2 (s / say-01\n            :time (n / now)))", "(s / say-01\n   :ARG1 (t / take-01\n            :ARG0 (p2 / person\n                      :ARG0 (h2 / have-org-role-91\n                                :ARG3 (c2 / colleague\n                                          :poss (p / person))))))", "(s / say-01\n   :ARG0 (p / person\n            :mod (s2 / senior))\n   :ARG1 (t / take-01\n            :ARG0 (p2 / person\n                      :ARG0 (h2 / have-org-role-91\n                                :ARG3 (c2 / colleague\n                                          :poss p)))))", "(s / say-01\n   :ARG1 (t / take-01\n            :ARG0 (p2 / person\n                      :ARG0 (h2 / have-org-role-91\n                                :ARG3 (c2 / colleague\n                                          :poss (p / person)))))\n   :time (n / now))", "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG3 (j / judge-01)))\n   :ARG1 (t / take-01\n            :ARG0 (p2 / person\n                      :ARG0 (h2 / have-org-role-91\n                                :ARG3 (c2 / colleague\n                                          :poss p))))\n   :time (n / now))", "(s / say-01\n   :ARG1 (r / recommend-01\n            :ARG1 (j / jail-01\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Starrs\")))))", "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nicholas\"\n                     :op2 \"Cooke\"\n                     :op3 \"Q QC\"))\n   :ARG1 (r / recommend-01\n            :ARG1 (j / jail-01\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Starrs\")))))", "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nicholas\"\n                     :op2 \"Cooke\"\n                     :op3 \"Q QC\"))\n   :ARG1 (r / recommend-01\n            :ARG1 (j / jail-01\n                     :ARG1 (p2 / person\n                               :ARG1 (b / bind-01\n                                        :ARG2 (w / wheelchair))))))", "(r / recommend-01\n   :ARG1 (j / jail-01\n            :ARG1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Starrs\"))))", "(p2 / person\n    :ARG1 (b / bind-01\n             :ARG2 (w / wheelchair)))", "(c / contrast-01\n   :ARG2 (a / add-01\n            :ARG1 (r / recommend-01\n                     :ARG1 (t / thank-01\n                              :ARG0 (p / person\n                                       :name (n / name\n                                                :op1 \"Starrs\"))))))", "(c / contrast-01\n   :ARG2 (a / add-01\n            :ARG1 (r / recommend-01\n                     :ARG1 (t / thank-01\n                              :ARG2 (s / star\n                                       :mod (l / lucky))))))", "(a / add-01\n   :ARG1 (r / recommend-01\n            :ARG1 (t / thank-01\n                     :ARG0 (p / person\n                              :name (n / name\n                                       :op1 \"Starrs\")))))", "(r / recommend-01\n   :ARG1 (t / thank-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Starrs\"))))", "(a3 / allow-01\n    :ARG1 (s2 / stand-04\n              :ARG1 (s3 / sentence-01)))"], "smus": ["Christopher Starrs was spared jail.", "Christopher Starrs was spared jail in January.", "A judge spared Christopher Starrs from jail in January.", "In January, the Judge spared Christopher Starrs in the act of mercy.", "In January, a Judge spared Christopher Starrs from jail in an act of mercy.", "But now said.", "It was said that his colleague took.", "A senior person has said his colleague took.", "Now, it's been said that the person's colleague took.", "Now, Judges have said that his colleague took.", "Starrs should have been jailed, he said.", "Nicholas Cooke Q QC said Starrs should have been jailed.", "Nicholas Cooke Q QC said people bound by a wheelchair should be jailed.", "Starrs should have been jailed.", "Person bound by wheelchair", "But Starrs should thank, it was added.", "But it should be added that the lucky stars should be thanked.", "Starrs should thank, added.", "Starrs should thank.", "The sentence was allowed to stand."]}, {"instance_id": "realsumm-95", "summary": "<t> Real Madrid thrashed Granada 9 - 1 in La Liga at the weekend . </t> <t> Cristiano Ronaldo scored five to take Ronaldo league tally to 36 for the season . </t> <t> Real travel to Rayo Vallecano in a Madrid derby on Wednesday night . </t> <t> Juventus won 3 - 0 at Fiorentina to reach the Coppa Italia final on Tuesday . </t>", "summary_trees": ["# ::snt  Real Madrid thrashed Granada 9 - 1 in La Liga at the weekend . \n(t / thrash-01\n      :ARG0 (t2 / team\n            :name (n / name\n                  :op1 \"Real\"\n                  :op2 \"Madrid\"))\n      :ARG1 (t3 / team\n            :name (n2 / name\n                  :op1 \"Granada\"))\n      :time (w / weekend)\n      :quant (s / score-entity\n            :op1 9\n            :op2 1)\n      :location (l / league\n            :name (n3 / name\n                  :op1 \"La\"\n                  :op2 \"Liga\")))", "# ::snt  Cristiano Ronaldo scored five to take Ronaldo league tally to 36 for the season . \n(s / score-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Cristiano\"\n                  :op2 \"Ronaldo\"))\n      :ARG1 5\n      :ARG0-of (t / take-01\n            :ARG1 (t2 / tally-01\n                  :ARG0 p\n                  :ARG1 (l / league))\n            :ARG3 36\n            :ARG4 (s2 / season)))", "# ::snt  Real travel to Rayo Vallecano in a Madrid derby on Wednesday night . \n(t / travel-01\n      :ARG0 (t2 / team\n            :name (n / name\n                  :op1 \"Real\"))\n      :ARG4 (t3 / team\n            :name (n2 / name\n                  :op1 \"Rayo\"\n                  :op2 \"Vallecano\"))\n      :subevent-of (d / derby\n            :mod (c / city\n                  :name (n3 / name\n                        :op1 \"Madrid\")))\n      :time (d2 / date-entity\n            :weekday (w / wednesday)\n            :dayperiod (n4 / night)))", "# ::snt  Juventus won 3 - 0 at Fiorentina to reach the Coppa Italia final on Tuesday . \n(w / win-01\n      :ARG0 (t / team\n            :name (n / name\n                  :op1 \"Juventus\"))\n      :ARG2 (t2 / team\n            :name (n2 / name\n                  :op1 \"Fiorentina\"))\n      :ARG4 (s / score-entity\n            :op1 3\n            :op2 0)\n      :purpose (r / reach-01\n            :ARG0 t\n            :ARG1 (f / final\n                  :subevent-of (g / game\n                        :name (n3 / name\n                              :op1 \"Coppa\"\n                              :op2 \"Italia\")))\n            :time (d / date-entity\n                  :weekday (t3 / tuesday))))"], "tree": ["(t / thrash-01\n   :time (w / weekend)\n   :location (l / league\n                :name (n3 / name\n                          :op1 \"La\"\n                          :op2 \"Liga\")))", "(t / thrash-01\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Real\"\n                      :op2 \"Madrid\"))\n   :ARG1 (t3 / team\n             :name (n2 / name\n                       :op1 \"Granada\"))\n   :time (w / weekend))", "(t / thrash-01\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Real\"\n                      :op2 \"Madrid\"))\n   :ARG1 (t3 / team\n             :name (n2 / name\n                       :op1 \"Granada\"))\n   :location (l / league\n                :name (n3 / name\n                          :op1 \"La\"\n                          :op2 \"Liga\")))", "(t / thrash-01\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Real\"\n                      :op2 \"Madrid\"))\n   :ARG1 (t3 / team\n             :name (n2 / name\n                       :op1 \"Granada\"))\n   :time (w / weekend)\n   :quant (s / score-entity\n             :op1 9))", "(t / thrash-01\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Real\"\n                      :op2 \"Madrid\"))\n   :ARG1 (t3 / team\n             :name (n2 / name\n                       :op1 \"Granada\"))\n   :time (w / weekend)\n   :location (l / league\n                :name (n3 / name\n                          :op1 \"La\"\n                          :op2 \"Liga\")))", "(s / score-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Cristiano\"\n                     :op2 \"Ronaldo\")))", "(t / take-01\n   :ARG1 (t2 / tally-01\n             :ARG0 (p / person :name (n / name :op1 \"Cristiano\" :op2 \"Ronaldo\"))))", "(t / take-01\n   :ARG1 (t2 / tally-01\n             :ARG1 (l / league)))", "(t / take-01\n   :ARG1 (t2 / tally-01\n             :ARG0 (p / person :name (n / name :op1 \"Cristiano\" :op2 \"Ronaldo\")))\n   :ARG4 (s2 / season))", "(t / take-01\n   :ARG1 (t2 / tally-01\n             :ARG1 (l / league))\n   :ARG4 (s2 / season))", "(t / travel-01\n   :ARG4 (t3 / team\n             :name (n2 / name\n                       :op1 \"Rayo\"\n                       :op2 \"Vallecano\")))", "(t / travel-01\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Real\"))\n   :ARG4 (t3 / team\n             :name (n2 / name\n                       :op1 \"Rayo\"\n                       :op2 \"Vallecano\")))", "(t / travel-01\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Real\"))\n   :ARG4 (t3 / team\n             :name (n2 / name\n                       :op1 \"Rayo\"\n                       :op2 \"Vallecano\"))\n   :subevent (d / derby\n                :mod (c / city\n                        :name (n3 / name\n                                  :op1 \"Madrid\"))))", "(t / travel-01\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Real\"))\n   :ARG4 (t3 / team\n             :name (n2 / name\n                       :op1 \"Rayo\"\n                       :op2 \"Vallecano\"))\n   :time (d2 / date-entity\n             :weekday (w / wednesday)))", "(t / travel-01\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Real\"))\n   :ARG4 (t3 / team\n             :name (n2 / name\n                       :op1 \"Rayo\"\n                       :op2 \"Vallecano\"))\n   :subevent (d / derby\n                :mod (c / city\n                        :name (n3 / name\n                                  :op1 \"Madrid\")))\n   :time (d2 / date-entity\n             :weekday (w / wednesday)))", "(w / win-01\n   :purpose (r / reach-01\n               :time (d / date-entity\n                        :weekday (t3 / tuesday))))", "(w / win-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Juventus\"))\n   :purpose (r / reach-01\n               :ARG1 (f / final\n                        :subevent (g / game\n                                     :name (n3 / name\n                                               :op1 \"Coppa\"\n                                               :op2 \"Italia\")))))", "(t / team\n   :name (n / name\n            :op1 \"Juventus\"))", "(f / final\n   :subevent (g / game\n                :name (n3 / name\n                          :op1 \"Coppa\"\n                          :op2 \"Italia\")))", "(g / game\n   :name (n3 / name\n             :op1 \"Coppa\"\n             :op2 \"Italia\"))"], "smus": ["The weekend thrashing took place in La Liga.", "Real Madrid thrash Granada over the weekend.", "Real Madrid thrashed Granada in La Liga.", "Real Madrid thrashed Granada 9-1 over the weekend.", "Real Madrid thrashed Granada at the weekend in La Liga.", "Cristiano Ronaldo scored.", "Take Cristina Ronaldo's tally.", "Take the league tally.", "Take Cristina Ronaldo's tally for the season.", "Take the league tally to the season.", "Travel to Rayo Vallecano", "Real will travel to Rayo Vallecano.", "Real will travel to Rayo Vallecano in the Madrid derby.", "Real will travel to Rayo Vallecano on Wednesday.", "Real will travel to Rayo Vallecano on Wednesday for the Madrid derby.", "The victory was to reach Tuesday.", "Juventus won to reach the final in Coppa Italia.", "Juventus", "Final of Coppa Italia", "Coppa Italia"]}, {"instance_id": "realsumm-96", "summary": "<t> Kevin Pietersen was sacked by England 14 months ago after Ashes defeat . </t> <t> Batsman scored 170 on Pietersen county cricket return for Surrey last week . </t> <t> Pietersen wants to make a sensational return to the England side this year . </t> <t> But Andrew Flintoff thinks time is running out for Flintoff to resurrect career . </t>", "summary_trees": ["# ::snt  Kevin Pietersen was sacked by England 14 months ago after Ashes defeat . \n(s / sack-01\n      :ARG0 (t / team\n            :name (n / name\n                  :op1 \"England\"))\n      :ARG1 (p / person\n            :name (n2 / name\n                  :op1 \"Kevin\"\n                  :op2 \"Pietersen\"))\n      :time (b / before\n            :op1 (n3 / now)\n            :quant (t2 / temporal-quantity\n                  :quant 14\n                  :unit (m / month)))\n      :time (a / after\n            :op1 (d / defeat-01\n                  :ARG0 t\n                  :ARG2 (g / game\n                        :name (n4 / name\n                              :op1 \"Ashes\")))))", "# ::snt  Batsman scored 170 on Pietersen county cricket return for Surrey last week . \n(s / score-01\n      :ARG0 (b / batsman)\n      :ARG1 170\n      :time (w / week\n            :mod (l / last))\n      :ARG1-of (r / return-01\n            :ARG4 (c / county\n                  :name (n / name\n                        :op1 \"Surrey\"))\n            :mod (c2 / cricket\n                  :mod (c3 / county\n                        :name (n2 / name\n                              :op1 \"Pietersen\")))))", "# ::snt  Pietersen wants to make a sensational return to the England side this year . \n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Pietersen\"))\n      :ARG1 (r / return-01\n            :ARG1 p\n            :ARG4 (s / side\n                  :mod (c / country\n                        :name (n2 / name\n                              :op1 \"England\")))\n            :mod (s2 / sensational)\n            :time (y / year\n                  :mod (t / this))))", "# ::snt  But Andrew Flintoff thinks time is running out for Flintoff to resurrect career . \n(c / contrast-01\n      :ARG2 (t / think-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Andrew\"\n                        :op2 \"Flintoff\"))\n            :ARG1 (r / run-out-05\n                  :ARG1 (t2 / time)\n                  :ARG2 (r2 / resurrect-01\n                        :ARG0 p\n                        :ARG1 (c2 / career\n                              :poss p)))))"], "tree": ["(s / sack-01\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Kevin\"\n                      :op2 \"Pietersen\")))", "(s / sack-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"England\"))\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Kevin\"\n                      :op2 \"Pietersen\")))", "(p / person\n   :name (n2 / name\n             :op1 \"Kevin\"\n             :op2 \"Pietersen\"))", "(b / before\n   :op1 (n3 / now)\n   :quant (t2 / temporal-quantity\n              :unit (m / month)))", "(a / after\n   :op1 (d / defeat-01\n           :ARG2 (g / game\n                    :name (n4 / name\n                              :op1 \"Ashes\"))))", "(s / score-01\n   :time (w / week\n            :mod (l / last)))", "(s / score-01\n   :ARG0 (b / batsman)\n   :time (w / week\n            :mod (l / last)))", "(r / return-01\n   :mod (c2 / cricket\n            :mod (c3 / county\n                     :name (n2 / name\n                               :op1 \"Pietersen\"))))", "(c / county\n   :name (n / name\n            :op1 \"Surrey\"))", "(c2 / cricket\n    :mod (c3 / county\n             :name (n2 / name\n                       :op1 \"Pietersen\")))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Pietersen\")))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Pietersen\"))\n   :ARG1 (r / return-01\n            :ARG1 p))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Pietersen\"))\n   :ARG1 (r / return-01\n            :ARG4 (s / side\n                     :mod (c / country\n                             :name (n2 / name\n                                       :op1 \"England\")))))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Pietersen\"))\n   :ARG1 (r / return-01\n            :mod (s2 / sensational)))", "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Pietersen\"))\n   :ARG1 (r / return-01\n            :time (y / year\n                     :mod (t / this))))", "(c / contrast-01\n   :ARG2 (t / think-01\n            :ARG1 (r / run-out-05\n                     :ARG1 (t2 / time))))", "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Andrew\"\n                     :op2 \"Flintoff\")))", "(t / think-01\n   :ARG1 (r / run-out-05\n            :ARG1 (t2 / time)))", "(t / think-01\n   :ARG1 (r / run-out-05\n            :ARG2 (r2 / resurrect-01\n                      :ARG1 (c2 / career\n                                :poss (p / person :name (n / name :op1 \"Andrew\" :op2 \"Flintoff\"))))))", "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Andrew\"\n                     :op2 \"Flintoff\"))\n   :ARG1 (r / run-out-05\n            :ARG1 (t2 / time)))"], "smus": ["Kevin Pietersen was sacked.", "England have sacked Kevin Pietersen.", "Kevin Pietersen", "Months ago.", "After the Ashes defeat.", "Scored last week.", "The batsman scored last week.", "The return of Pietersen county cricket", "Surrey County", "Pietersen county cricket", "Pietersen wants.", "Pietersen wants to return.", "Pietersen wants a return to the English side.", "Pietersen wants a sensational return.", "Pietersen wants a return this year.", "But thinks time is running out.", "Andrew Flintoff thinks.", "Thinks time is running out.", "thinks it's run out of time to resurrect Andrew Flintoff's career.", "Andrew Flintoff thinks time is running out."]}, {"instance_id": "realsumm-97", "summary": "<t> If Carl Froch does n't fight in 2015 I 'm not sure Froch 'll be back at all . </t> <t> A blockbuster with James DeGale is most likely after Julio Cesar Chavez Jnr defeat - but Anthony Dirrell has made contact . </t> <t> Scott Quigg - Carl Frampton summer fight is dead in the water . </t>", "summary_trees": ["# ::snt  If Carl Froch does n't fight in 2015 I 'm not sure Froch 'll be back at all . \n(s / sure-02\n      :polarity -\n      :ARG0 (ii / i)\n      :ARG1 (r / return-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Carl\"\n                        :op2 \"Froch\"))\n            :mod (a / at-all))\n      :condition (f / fight-01\n            :polarity -\n            :ARG0 p\n            :time (d / date-entity\n                  :year 2015)))", "# ::snt  A blockbuster with James DeGale is most likely after Julio Cesar Chavez Jnr defeat - but Anthony Dirrell has made contact . \n(l / likely-01\n      :ARG1 (b / blockbuster\n            :mod (p / person\n                  :name (n / name\n                        :op1 \"James\"\n                        :op2 \"DeGale\")))\n      :time (a / after\n            :op1 (d / defeat-01\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Julio\"\n                              :op2 \"Cesar\"\n                              :op3 \"Chavez\"\n                              :op4 \"Jr\"))))\n      :concession (c / contact-01\n            :ARG0 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Anthony\"\n                        :op2 \"Dirrell\")))\n      :ARG2-of (h / have-degree-91\n            :ARG1 b\n            :ARG3 (m / most)))", "# ::snt  Scott Quigg - Carl Frampton summer fight is dead in the water . \n(s / say-01\n      :ARG0 (ii / i)\n      :ARG1 (d / die-01\n            :ARG1 (f / fight-01\n                  :ARG0 (p / person\n                        :name (n / name\n                              :op1 \"Scott\"\n                              :op2 \"Quigg\"))\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Carl\"\n                              :op2 \"Frampton\"))\n                  :time (d2 / date-entity\n                        :season (s2 / summer)))\n            :location (w / water))\n      :ARG2 p)"], "tree": ["(s / sure-02\n   :condition (f / fight-01\n                 :polarity -))", "(s / sure-02\n   :condition (f / fight-01\n                 :time (d / date-entity\n                          :year 2015)))", "(s / sure-02\n   :ARG0 (ii / i)\n   :condition (f / fight-01\n                 :polarity -))", "(r / return-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Carl\"\n                     :op2 \"Froch\"))\n   :mod (a / at-all))", "(p / person\n   :name (n / name\n            :op1 \"Carl\"\n            :op2 \"Froch\"))", "(l / likely-01\n   :ARG1 (b / blockbuster\n            :mod (p / person\n                    :name (n / name\n                             :op1 \"James\"\n                             :op2 \"DeGale\")))\n   :time (a / after\n            :op1 (d / defeat-01\n                    :ARG1 (p2 / person\n                              :name (n2 / name\n                                        :op1 \"Julio\"\n                                        :op2 \"Cesar\"\n                                        :op3 \"Chavez\"\n                                        :op4 \"Jr\")))))", "(l / likely-01\n   :ARG1 (b / blockbuster\n            :mod (p / person\n                    :name (n / name\n                             :op1 \"James\"\n                             :op2 \"DeGale\")))\n   :ARG2 (h / have-degree-91\n            :ARG3 (m / most)))", "(l / likely-01\n   :time (a / after\n            :op1 (d / defeat-01\n                    :ARG1 (p2 / person\n                              :name (n2 / name\n                                        :op1 \"Julio\"\n                                        :op2 \"Cesar\"\n                                        :op3 \"Chavez\"\n                                        :op4 \"Jr\"))))\n   :ARG2 (h / have-degree-91\n            :ARG3 (m / most)))", "(l / likely-01\n   :ARG1 (b / blockbuster\n            :mod (p / person\n                    :name (n / name\n                             :op1 \"James\"\n                             :op2 \"DeGale\")))\n   :time (a / after\n            :op1 (d / defeat-01\n                    :ARG1 (p2 / person\n                              :name (n2 / name\n                                        :op1 \"Julio\"\n                                        :op2 \"Cesar\"\n                                        :op3 \"Chavez\"\n                                        :op4 \"Jr\"))))\n   :ARG2 (h / have-degree-91\n            :ARG3 (m / most)))", "(c / contact-01\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Anthony\"\n                       :op2 \"Dirrell\")))", "(s / say-01\n   :ARG1 (d / die-01\n            :ARG1 (f / fight-01\n                     :time (d2 / date-entity\n                               :season (s2 / summer)))))", "(d / die-01\n   :ARG1 (f / fight-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Scott\"\n                              :op2 \"Quigg\")))\n   :location (w / water))", "(d / die-01\n   :ARG1 (f / fight-01\n            :ARG1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Carl\"\n                                :op2 \"Frampton\")))\n   :location (w / water))", "(p / person\n   :name (n / name\n            :op1 \"Scott\"\n            :op2 \"Quigg\"))"], "smus": ["sure condi not fifty", "sure condi on fifti 2015", "I'm sure condi not fifty.", "Carl Froch returns at all.", "Carl Froch", "After Julio Cesar Chavez Jr.'s defeat, James DeGale's blockbuster is likely to happen.", "James DeGale's blockbuster is most likely.", "Most likely after Julio Cesar Chavez Jr. defeats", "James DeGale's blockbuster is most likely after Julio Cesar Chavez Jr.'s defeat.", "Anthony Dirrell is in contact.", "The summer fight is dead.", "Scott Quigg's fight died in the water.", "The fight against Carl Frampton has died in the water.", "Scott Quigg"]}, {"instance_id": "realsumm-98", "summary": "<t> Clip shows mysterious black cloud hanging over the village of Shortandy . </t> <t> The perfect hoop shape sat in the air not moving for more than 15 minutes . </t> <t> Eerie video has been viewed tens of thousands of times on Youtube . </t> <t> While some viewers are suggesting the cloud was an alien spacecraft , experts think cloud could have been caused by nearby factories . </t>", "summary_trees": ["# ::snt  Clip shows mysterious black cloud hanging over the village of Shortandy . \n(s / show-01\n      :ARG0 (c / clip)\n      :ARG1 (c2 / cloud\n            :mod (m / mysterious)\n            :ARG1-of (b / black-04)\n            :ARG1-of (h / hang-01\n                  :ARG2 (o / over\n                        :op1 (v / village\n                              :name (n / name\n                                    :op1 \"Shortandy\"))))))", "# ::snt  The perfect hoop shape sat in the air not moving for more than 15 minutes . \n(s / sit-01\n      :ARG1 (s2 / shape\n            :mod (h / hoop)\n            :ARG1-of (p / perfect-02))\n      :ARG2 (a / air)\n      :manner (m / move-01\n            :polarity -\n            :ARG1 s2\n            :duration (m2 / more-than\n                  :op1 (t / temporal-quantity\n                        :quant 15\n                        :unit (m3 / minute)))))", "# ::snt  Eerie video has been viewed tens of thousands of times on Youtube . \n(v / view-01\n      :ARG1 (v2 / video\n            :mod (e / eerie))\n      :frequency (m / multiple\n            :op1 10000)\n      :medium (p / publication\n            :name (n / name\n                  :op1 \"YouTube\")))", "# ::snt  While some viewers are suggesting the cloud was an alien spacecraft , experts think cloud could have been caused by nearby factories . \n(c / contrast-01\n      :ARG1 (s / suggest-01\n            :ARG0 (p / person\n                  :ARG0-of (v / view-01)\n                  :quant (s2 / some))\n            :ARG1 (s3 / spacecraft\n                  :poss (a / alien-01)\n                  :domain (c2 / cloud)))\n      :ARG2 (t / think-01\n            :ARG0 (p2 / person\n                  :ARG1-of (e / expert-01))\n            :ARG1 (p3 / possible-01\n                  :ARG1 (c3 / cause-01\n                        :ARG0 (f / factory\n                              :location (n / nearby))\n                        :ARG1 (c4 / cloud)))))"], "tree": ["(s / show-01\n   :ARG1 (c2 / cloud\n             :mod (m / mysterious)))", "(s / show-01\n   :ARG1 (c2 / cloud\n             :ARG1 (h / hang-01\n                      :ARG2 (o / over\n                               :op1 (v / village\n                                       :name (n / name\n                                                :op1 \"Shortandy\"))))))", "(s / show-01\n   :ARG0 (c / clip)\n   :ARG1 (c2 / cloud\n             :mod (m / mysterious)))", "(s / show-01\n   :ARG0 (c / clip)\n   :ARG1 (c2 / cloud\n             :ARG1 (b / black-04)))", "(s / show-01\n   :ARG0 (c / clip)\n   :ARG1 (c2 / cloud\n             :ARG1 (h / hang-01\n                      :ARG2 (o / over\n                               :op1 (v / village\n                                       :name (n / name\n                                                :op1 \"Shortandy\"))))))", "(s / sit-01\n   :ARG1 (s2 / shape\n             :mod (h / hoop)))", "(s / sit-01\n   :ARG1 (s2 / shape\n             :mod (h / hoop))\n   :ARG2 (a / air))", "(s / sit-01\n   :ARG1 (s2 / shape\n             :mod (h / hoop))\n   :manner (m / move-01\n              :polarity -\n              :ARG1 s2\n              :duration (m2 / more-than)))", "(s / sit-01\n   :ARG1 (s2 / shape\n             :ARG1 (p / perfect-02))\n   :manner (m / move-01\n              :polarity -\n              :ARG1 s2\n              :duration (m2 / more-than)))", "(s2 / shape\n    :mod (h / hoop)\n    :ARG1 (p / perfect-02))", "(v / view-01\n   :ARG1 (v2 / video\n             :mod (e / eerie)))", "(v / view-01\n   :frequency (m / multiple\n                 :op1 10000))", "(v / view-01\n   :medium (p / publication\n              :name (n / name\n                       :op1 \"YouTube\")))", "(v / view-01\n   :ARG1 (v2 / video\n             :mod (e / eerie))\n   :frequency (m / multiple\n                 :op1 10000))", "(p / publication\n   :name (n / name\n            :op1 \"YouTube\"))", "(s / suggest-01\n   :ARG0 (p / person\n            :quant (s2 / some)))", "(s / suggest-01\n   :ARG0 (p / person\n            :ARG0 (v / view-01))\n   :ARG1 (s3 / spacecraft\n             :poss (a / alien-01)))", "(s / suggest-01\n   :ARG0 (p / person\n            :quant (s2 / some))\n   :ARG1 (s3 / spacecraft\n             :poss (a / alien-01)))", "(s / suggest-01\n   :ARG0 (p / person\n            :quant (s2 / some))\n   :ARG1 (s3 / spacecraft\n             :domain (c2 / cloud)))", "(t / think-01\n   :ARG0 (p2 / person\n             :ARG1 (e / expert-01)))"], "smus": ["Shows mysterious cloud.", "Shows cloud hanging over Shortandy village.", "The clip shows a mysterious cloud.", "The clip shows a black cloud.", "The clip shows a cloud hanging over Shortandy village.", "The hoop shape sat.", "The hoop shape sat in the air.", "The hoop shape sat unmoving for more than a minute.", "The perfect shape sat unmoving for more than a minute.", "Perfect hoop shape.", "The eerie video was viewed.", "Viewed tens of thousands of times.", "View on YouTube", "The eerie video has been viewed thousands of times.", "YouTube", "Some people are suggesting.", "Viewers are suggesting an alien spacecraft.", "Some people are suggesting alien spacecraft.", "Some people are suggesting that the cloud is a spacecraft.", "Experts think."]}, {"instance_id": "realsumm-99", "summary": "<t> Incredible images show handcuffed members from the notorious Barrio 18 gang being marched onto buses . </t> <t> In total 1,177 were transferred to a different jail where members will mix with members arch rivals - Mara Salvatrucha . </t> <t> The gang members will now no longer be classified by gang affiliation , but by how dangerous members are . </t>", "summary_trees": ["# ::snt  Incredible images show handcuffed members from the notorious Barrio 18 gang being marched onto buses . \n(s / show-01\n      :ARG0 (ii / image\n            :ARG0-of (a / awe-01))\n      :ARG1 (m / march-01\n            :ARG1 (p / person\n                  :ARG0-of (h / have-org-role-91\n                        :ARG1 (g / gang\n                              :name (n / name\n                                    :op1 \"Barrio\"\n                                    :op2 18)\n                              :ARG1-of (n2 / notorious-01))\n                        :ARG2 (m2 / member))\n                  :ARG1-of (h2 / handcuff-01))\n            :destination (b / bus)))", "# ::snt  In total 1,177 were transferred to a different jail where members will mix with members arch rivals - Mara Salvatrucha . \n(t / transfer-01\n      :ARG1 (p / person\n            :quant 1741\n            :ARG2-of (t2 / total-01))\n      :ARG2 (j / jail\n            :ARG1-of (d / differ-02)\n            :location-of (m / mix-01\n                  :ARG1 (m2 / member)\n                  :ARG2 (m3 / member\n                        :ARG0-of (h / have-rel-role-91\n                              :ARG1 (c / criminal-organization\n                                    :name (n / name\n                                          :op1 \"Mara\"\n                                          :op2 \"Salvatrucha\")\n                                    :ARG0-of (r / rival-01\n                                          :mod (a / arch))))))))", "# ::snt  The gang members will now no longer be classified by gang affiliation , but by how dangerous members are . \n(c / contrast-01\n      :ARG1 (c2 / classify-01\n            :ARG1 (p / person\n                  :ARG0-of (h / have-org-role-91\n                        :ARG1 (g / gang)\n                        :ARG2 (m / member)))\n            :ARG2 (a / affiliate-01\n                  :ARG1 p\n                  :ARG2 g))\n      :ARG2 (c3 / classify-01\n            :ARG1 p\n            :ARG2 (t / thing\n                  :degree-of (d / dangerous\n                        :domain p)))\n      :time (n / no-longer)\n      :time (n2 / now))"], "tree": ["(s / show-01\n   :ARG1 (m / march-01\n            :ARG1 (p / person\n                     :ARG1 (h2 / handcuff-01))))", "(m / march-01\n   :ARG1 (p / person\n            :ARG1 (h2 / handcuff-01)))", "(m / march-01\n   :ARG1 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (m2 / member))))", "(m / march-01\n   :ARG1 (p / person\n            :ARG1 (h2 / handcuff-01))\n   :destination (b / bus))", "(m / march-01\n   :ARG1 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (m2 / member)))\n   :destination (b / bus))", "(t / transfer-01\n   :ARG2 (j / jail\n            :ARG1 (d / differ-02)))", "(t / transfer-01\n   :ARG2 (j / jail\n            :location (m / mix-01\n                         :ARG1 (m2 / member))))", "(j / jail\n   :ARG1 (d / differ-02)\n   :location (m / mix-01\n                :ARG1 (m2 / member)))", "(j / jail\n   :ARG1 (d / differ-02)\n   :location (m / mix-01\n                :ARG2 (m3 / member\n                          :ARG0 (h / have-rel-role-91\n                                   :ARG1 (c / criminal-organization\n                                            :name (n / name\n                                                     :op1 \"Mara\"\n                                                     :op2 \"Salvatrucha\"))))))", "(m / mix-01\n   :ARG2 (m3 / member\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 (c / criminal-organization\n                               :name (n / name\n                                        :op1 \"Mara\"\n                                        :op2 \"Salvatrucha\")))))", "(c / contrast-01\n   :ARG1 (c2 / classify-01\n             :ARG2 (a / affiliate-01\n                      :ARG2 (g / gang)))\n   :time (n / no-longer))", "(c / contrast-01\n   :ARG1 (c2 / classify-01\n             :ARG2 (a / affiliate-01\n                      :ARG1 (p / person)))\n   :ARG2 (c3 / classify-01\n             :ARG2 (t / thing\n                      :degree (d / dangerous\n                                 :domain p)))\n   :time (n / no-longer))", "(c2 / classify-01\n    :ARG1 (p / person\n             :ARG0 (h / have-org-role-91\n                      :ARG2 (m / member))))", "(h / have-org-role-91\n   :ARG1 (g / gang)\n   :ARG2 (m / member))", "(c3 / classify-01\n    :ARG2 (t / thing\n             :degree (d / dangerous\n                        :domain (p / person))))"], "smus": ["Show that handcuffed people are marching.", "Handcuffed people marched.", "Members marched.", "Handcuffed people marched to buses.", "Members marched to buses.", "Transferred to a different jail.", "Transferred to jail where members mix.", "There is a different jail where members mix.", "There is a different jail where members of the Mara Salvatrucha mix.", "Mix with members of the Mara Salvatrucha.", "But it is no longer classified as gang affiliation.", "People are no longer classified as affiliates, but as dangerous.", "Members are classified.", "The gang is made up of members.", "People are classified as dangerous."]}]