[
  {
    "instance_id": "cnndm_test-56",
    "summary": "Kelly Parsons injected herself twice a day with drugs for painful process . Her eggs have created five kids so far - twin girls, twin boys and a baby boy . 35-year-old also frozen a number of her eggs for future use . Mother-of-two has told her daughters they have brothers and sisters .",
    "summary_trees": [
      "# ::snt Kelly Parsons injected herself twice a day with drugs for painful process .\n(ii / inject-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Kelly\"\n                  :op2 \"Parsons\"))\n      :ARG1 p\n      :ARG2 (d / drug)\n      :frequency (r / rate-entity-91\n            :ARG1 2\n            :ARG2 (t / temporal-quantity\n                  :quant 1\n                  :unit (d2 / day)))\n      :purpose (p2 / process-02\n            :ARG0-of (p3 / pain-01)))",
      "# ::snt Her eggs have created five kids so far - twin girls, twin boys and a baby boy .\n(c / create-01\n      :ARG0 (e / egg\n            :poss (s / she))\n      :ARG1 (k / kid\n            :quant 5\n            :ARG2-of (ii / include-91\n                  :ARG1 (a / and\n                        :op1 (g / girl\n                              :mod (t / twin))\n                        :op2 (b / boy\n                              :mod (t2 / twin)\n                              :op3-of a)\n                        :mod (b2 / baby))))\n      :time (s2 / so-far))",
      "# ::snt 35-year-old also frozen a number of her eggs for future use .\n(f / freeze-01\n      :ARG0 (p / person\n            :age (t / temporal-quantity\n                  :quant 35\n                  :unit (y / year)))\n      :ARG1 (e / egg\n            :quant (n / number)\n            :ARG1-of (ii / include-91\n                  :ARG2 (e2 / egg\n                        :poss p)))\n      :purpose (u / use-01\n            :ARG1 e\n            :time (f2 / future))\n      :mod (a / also))",
      "# ::snt Mother-of-two has told her daughters they have brothers and sisters .\n(t / tell-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (p2 / person\n                        :quant 2)\n                  :ARG2 (m / mother)))\n      :ARG1 (h2 / have-rel-role-91\n            :ARG0 p2\n            :ARG1 (p3 / person\n                  :ARG0-of (h3 / have-rel-role-91\n                        :ARG1 p\n                        :ARG2 (d / daughter)))\n            :ARG2 (a / and\n                  :op1 (b / brother)\n                  :op2 (s / sister)))\n      :ARG2 p3)"
    ],
    "tree": [
      "(ii / inject-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Kelly\"\n                      :op2 \"Parsons\")))",
      "(ii / inject-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Kelly\"\n                      :op2 \"Parsons\"))\n    :ARG1 p)",
      "(ii / inject-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Kelly\"\n                      :op2 \"Parsons\"))\n    :ARG2 (d / drug))",
      "(ii / inject-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Kelly\"\n                      :op2 \"Parsons\"))\n    :ARG2 (d / drug))",
      "(ii / inject-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Kelly\"\n                      :op2 \"Parsons\"))\n    :ARG1 p\n    :ARG2 (d / drug))",
      "(ii / inject-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Kelly\"\n                      :op2 \"Parsons\"))\n    :frequency (r / rate-entity-91\n                  :ARG1 2\n                  :ARG2 (t / temporal-quantity)))",
      "(ii / inject-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Kelly\"\n                      :op2 \"Parsons\"))\n    :purpose (p2 / process-02\n                 :ARG0 (p3 / pain-01)))",
      "(ii / inject-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Kelly\"\n                      :op2 \"Parsons\"))\n    :ARG1 p\n    :frequency (r / rate-entity-91\n                  :ARG1 2\n                  :ARG2 (t / temporal-quantity)))",
      "(ii / inject-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Kelly\"\n                      :op2 \"Parsons\"))\n    :ARG1 p\n    :purpose (p2 / process-02\n                 :ARG0 (p3 / pain-01)))",
      "(ii / inject-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Kelly\"\n                      :op2 \"Parsons\"))\n    :ARG2 (d / drug)\n    :frequency (r / rate-entity-91\n                  :ARG1 2\n                  :ARG2 (t / temporal-quantity)))",
      "(ii / inject-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Kelly\"\n                      :op2 \"Parsons\"))\n    :ARG2 (d / drug)\n    :purpose (p2 / process-02\n                 :ARG0 (p3 / pain-01)))",
      "(c / create-01\n   :ARG1 (k / kid\n            :quant 5)\n   :time (s2 / so-far))",
      "(c / create-01\n   :ARG0 (e / egg\n            :poss (s / she))\n   :ARG1 (k / kid\n            :quant 5))",
      "(c / create-01\n   :ARG1 (k / kid\n            :ARG2 (ii / include-91\n                      :ARG1 (g / girl\n                               :mod (t / twin)))))",
      "(c / create-01\n   :ARG1 (k / kid\n            :ARG2 (ii / include-91\n                      :ARG1 (b / boy\n                               :mod (t2 / twin)))))",
      "(c / create-01\n   :ARG1 (k / kid\n            :ARG2 (ii / include-91\n                      :ARG1 (b / boy\n                               :mod (t2 / twin)))))",
      "(c / create-01\n   :ARG1 (k / kid\n            :ARG2 (ii / include-91\n                      :ARG1 (b2 / baby)))\n   :time (s2 / so-far))",
      "(c / create-01\n   :ARG0 (e / egg\n            :poss (s / she))\n   :ARG1 (k / kid\n            :quant 5)\n   :time (s2 / so-far))",
      "(c / create-01\n   :ARG0 (e / egg\n            :poss (s / she))\n   :ARG1 (k / kid\n            :ARG2 (ii / include-91\n                      :ARG1 (b2 / baby))))",
      "(c / create-01\n   :ARG1 (k / kid\n            :ARG2 (ii / include-91\n                      :ARG1 (g / girl\n                               :mod (t / twin))))\n   :time (s2 / so-far))",
      "(c / create-01\n   :ARG1 (k / kid\n            :ARG2 (ii / include-91\n                      :ARG1 (b / boy\n                               :mod (t2 / twin))))\n   :time (s2 / so-far))",
      "(c / create-01\n   :ARG1 (k / kid\n            :ARG2 (ii / include-91\n                      :ARG1 (b / boy\n                               :mod (t2 / twin))))\n   :time (s2 / so-far))",
      "(c / create-01\n   :ARG0 (e / egg\n            :poss (s / she))\n   :ARG1 (k / kid\n            :ARG2 (ii / include-91\n                      :ARG1 (g / girl\n                               :mod (t / twin)))))",
      "(c / create-01\n   :ARG0 (e / egg\n            :poss (s / she))\n   :ARG1 (k / kid\n            :ARG2 (ii / include-91\n                      :ARG1 (b / boy\n                               :mod (t2 / twin)))))",
      "(c / create-01\n   :ARG0 (e / egg\n            :poss (s / she))\n   :ARG1 (k / kid\n            :ARG2 (ii / include-91\n                      :ARG1 (b / boy\n                               :mod (t2 / twin)))))",
      "(c / create-01\n   :ARG0 (e / egg\n            :poss (s / she))\n   :ARG1 (k / kid\n            :ARG2 (ii / include-91\n                      :ARG1 (b2 / baby)))\n   :time (s2 / so-far))",
      "(c / create-01\n   :ARG0 (e / egg\n            :poss (s / she))\n   :ARG1 (k / kid\n            :ARG2 (ii / include-91\n                      :ARG1 (g / girl\n                               :mod (t / twin))))\n   :time (s2 / so-far))",
      "(c / create-01\n   :ARG0 (e / egg\n            :poss (s / she))\n   :ARG1 (k / kid\n            :ARG2 (ii / include-91\n                      :ARG1 (b / boy\n                               :mod (t2 / twin))))\n   :time (s2 / so-far))",
      "(c / create-01\n   :ARG0 (e / egg\n            :poss (s / she))\n   :ARG1 (k / kid\n            :ARG2 (ii / include-91\n                      :ARG1 (b / boy\n                               :mod (t2 / twin))))\n   :time (s2 / so-far))",
      "(f / freeze-01\n   :ARG1 (e / egg\n            :quant (n / number)))",
      "(f / freeze-01\n   :ARG1 (e / egg\n            :quant (n / number))\n   :mod (a / also))",
      "(f / freeze-01\n   :ARG1 (e / egg\n            :ARG1 (ii / include-91\n                      :ARG2 (e2 / egg\n                                :poss (p / person)))))",
      "(f / freeze-01\n   :ARG1 (e / egg\n            :quant (n / number))\n   :purpose (u / use-01\n               :ARG1 e))",
      "(f / freeze-01\n   :ARG1 (e / egg\n            :quant (n / number))\n   :purpose (u / use-01\n               :time (f2 / future)))",
      "(f / freeze-01\n   :ARG1 (e / egg\n            :ARG1 (ii / include-91\n                      :ARG2 (e2 / egg\n                                :poss (p / person))))\n   :mod (a / also))",
      "(f / freeze-01\n   :ARG1 (e / egg\n            :ARG1 (ii / include-91\n                      :ARG2 (e2 / egg\n                                :poss (p / person))))\n   :purpose (u / use-01\n               :ARG1 e))",
      "(f / freeze-01\n   :ARG1 (e / egg\n            :ARG1 (ii / include-91\n                      :ARG2 (e2 / egg\n                                :poss (p / person))))\n   :purpose (u / use-01\n               :time (f2 / future)))",
      "(t / tell-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :quant 2)))\n   :ARG1 (h2 / have-rel-role-91\n             :ARG0 p2))",
      "(t / tell-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (m / mother)))\n   :ARG1 (h2 / have-rel-role-91\n             :ARG2 (s / sister)))",
      "(t / tell-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (m / mother)))\n   :ARG1 (h2 / have-rel-role-91\n             :ARG0 (p2 / person\n                       :quant 2)))",
      "(t / tell-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :quant 2)))\n   :ARG1 (h2 / have-rel-role-91\n             :ARG1 (p3 / person\n                       :ARG0 (h3 / have-rel-role-91\n                                 :ARG1 p))))",
      "(t / tell-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (m / mother)))\n   :ARG1 (h2 / have-rel-role-91\n             :ARG1 (p3 / person\n                       :ARG0 (h3 / have-rel-role-91\n                                 :ARG2 (d / daughter)))))",
      "(t / tell-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :quant 2)))\n   :ARG1 (h2 / have-rel-role-91\n             :ARG1 (p3 / person\n                       :ARG0 (h3 / have-rel-role-91\n                                 :ARG2 (d / daughter)))))"
    ],
    "smus": [
      "Kelly Parsons was injected.",
      "Kelly Parsons injected herself.",
      "Kelly Parsons was injected with drugs.",
      "Kelly Parsons was injected with drugs.",
      "Kelly Parsons injected herself with drugs.",
      "Kelly Parents was injected twice a day.",
      "Kelly Parsons was injected for the painful process.",
      "Kelly Parsons injected herself twice a day.",
      "Kelly Parsons injected herself for the painful process.",
      "Kelly Parsons injected drugs twice a day.",
      "Kelly Parsons was injected with drugs in a painful process.",
      "5 kids have been created so far.",
      "Her eggs have created 5 kids.",
      "Kids created from twin girls",
      "Kids were created from twin boys.",
      "Kids were created from twin boys.",
      "So far, kids from one to the baby have been created.",
      "So far, five kids have been created from her eggs.",
      "Her eggs have created kids, one of which is a baby.",
      "So far, kids have been created from the twin girls.",
      "So far, kids from the twin boys have been created.",
      "So far, kids from the twin boys have been created.",
      "Her eggs have created kids, including twin girls.",
      "Her eggs have created kids, including twin boys.",
      "Her eggs have created kids, including twin boys.",
      "So far, her eggs have created kids, one of them a baby.",
      "So far, her eggs have created kids, including twin girls.",
      "So far, her eggs have created kids, including twin boys.",
      "So far, her eggs have created kids, including twin boys.",
      "A number of eggs were frozen.",
      "A number of eggs were also frozen.",
      "Some of the people's eggs were frozen.",
      "A number of eggs were frozen for use.",
      "A number of eggs were frozen for future use.",
      "Also, some of the people's eggs were frozen.",
      "Some of the people's eggs were frozen for use.",
      "Some of the people's eggs were frozen for future use.",
      "Two people have told each other that they have.",
      "The mother has told the sisters.",
      "The mother has told the two that they are.",
      "Two people have told their own people.",
      "The mother has told the daughters.",
      "Two people have told their daughters."
    ]
  }
]