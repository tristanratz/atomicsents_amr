[
  {
    "instance_id": "realsumm-0",
    "summary": "<t> Anuradha Koirala and 425 young women and girls have been sleeping outdoors because of aftershocks . </t> <t> Pushpa Basnet and 45 children Koirala cares for were forced to evacuate Basnet and children residence . </t> <t> Seven other CNN Heroes and Heroes and organizations organizations now assisting in relief efforts . </t>",
    "summary_trees": [
      "# ::snt  Anuradha Koirala and 425 young women and girls have been sleeping outdoors because of aftershocks . \n(c / cause-01\n      :ARG0 (a / aftershock)\n      :ARG1 (s / sleep-01\n            :ARG0 (a2 / and\n                  :op1 (p / person\n                        :name (n / name\n                              :op1 \"Anuradha\"\n                              :op2 \"Koirala\"))\n                  :op2 (w / woman)\n                  :op3 (g / girl)\n                  :quant 425\n                  :mod (y / young))\n            :location (o / outdoors)))",
      "# ::snt  Pushpa Basnet and 45 children Koirala cares for were forced to evacuate Basnet and children residence . \n(f / force-01\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Pushpa\"\n                        :op2 \"Basnet\"))\n            :op2 (c / child\n                  :quant 45\n                  :ARG1-of (c2 / care-03\n                        :ARG0 (p2 / person\n                              :name (n2 / name\n                                    :op1 \"Koirala\")))))\n      :ARG2 (e / evacuate-01\n            :ARG1 (a2 / and\n                  :op1 p\n                  :op2 (c3 / child\n                        :ARG0-of (r / reside-01\n                              :ARG1 p)))))",
      "# ::snt  Seven other CNN Heroes and Heroes and organizations organizations now assisting in relief efforts . \n(a / assist-01\n      :ARG0 (o / organization\n            :quant 7\n            :mod (o2 / other)\n            :mod (p / publication\n                  :name (n / name\n                        :op1 \"CNN\"))\n            :mod (o3 / organization\n                  :name n\n                  :op1 \"Heroes\"\n                  :op2 \"and\"\n                  :op3 \"Heroes\"))\n      :mod (o4 / organization)\n      :ARG2 (e / effort-01\n            :ARG1 (r / relieve-01))\n      :time (n2 / now))"
    ],
    "tree": [
      "(c / cause-01\n   :ARG1 (s / sleep-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Anuradha\"\n                              :op2 \"Koirala\"))))",
      "(c / cause-01\n   :ARG1 (s / sleep-01\n            :location (o / outdoors)))",
      "(c / cause-01\n   :ARG1 (s / sleep-01\n            :ARG0 (w / woman)))",
      "(c / cause-01\n   :ARG1 (s / sleep-01\n            :ARG0 (g / girl)))",
      "(c / cause-01\n   :ARG1 (s / sleep-01\n            :ARG0 425))",
      "(f / force-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Pushpa\"\n                     :op2 \"Basnet\")))",
      "(f / force-01\n   :ARG1 (c / child\n            :quant 45))",
      "(f / force-01\n   :ARG1 (c / child\n            :ARG1 (c2 / care-03\n                      :ARG0 (p2 / person\n                                :name (n2 / name\n                                          :op1 \"Koirala\")))))",
      "(f / force-01\n   :ARG2 (e / evacuate-01\n            :ARG1 (p / person :name (n / name :op1 \"Pushpa\" :op2 \"Basnet\"))))",
      "(f / force-01\n   :ARG2 (e / evacuate-01\n            :ARG1 (c3 / child\n                      :ARG0 (r / reside-01\n                               :ARG1 (p / person :name (n / name :op1 \"Pushpa\" :op2 \"Basnet\"))))))",
      "(a / assist-01\n   :ARG0 (o / organization\n            :quant 7))",
      "(a / assist-01\n   :ARG0 (o / organization\n            :mod (o2 / other)))",
      "(a / assist-01\n   :ARG0 (o / organization\n            :mod (p / publication\n                    :name (n / name\n                             :op1 \"CNN\"))))",
      "(a / assist-01\n   :ARG0 (o / organization\n            :mod (o3 / organization\n                     :name (n / name\n                              :op1 \"CNN\"))))",
      "(a / assist-01\n   :ARG0 (o / organization\n            :mod (o3 / organization\n                     :op1 \"Heroes\")))"
    ],
    "smus": [
      "The women were sleeping because of the aftershocks.",
      "Young women and girls.",
      "Anuradha Koirala is sleeping.",
      "Because the women are sleeping.",
      "Anuradha Koirala and the girls",
      "Pushpa Basnet and 45 children",
      "and the children that koirala cares for.",
      "and 45 children.",
      "Children whose care is being forced on Korela to evacuate along with Pushpa Basnet.",
      "Pushpa Basnet was forced to evacuate along with her resident children.",
      "Heroes organizations are now assisting.",
      "Organizations and organizations are assisting in relief efforts.",
      "CNN organizations are now assisting in relief efforts.",
      "Assisting relief efforts",
      "CNN organizations are assisting organizations."
    ]
  },
  {
    "instance_id": "realsumm-1",
    "summary": "<t> Students from the University of Surrey discovered thousands of colonies . </t> <t> Students submerged coins and notes in agar to accelerate growth pf bacteria . </t> <t> Most were harmless on the money , but one caused boils and spots . </t> <t> Previous studies have revealed MRSA bacteria on notes and coins . </t>",
    "summary_trees": [
      "# ::snt  Students from the University of Surrey discovered thousands of colonies . \n(d / discover-01\n      :ARG0 (p / person\n            :ARG0-of (s / study-01)\n            :source (u / university\n                  :name (n / name\n                        :op1 \"University\"\n                        :op2 \"of\"\n                        :op3 \"Surrey\")))\n      :ARG1 (c / colony\n            :quant (m / multiple\n                  :op1 1000)))",
      "# ::snt  Students submerged coins and notes in agar to accelerate growth pf bacteria . \n(s / submerge-01\n      :ARG0 (p / person\n            :ARG0-of (s2 / study-01))\n      :ARG1 (a / and\n            :op1 (c / coin)\n            :op2 (n / note))\n      :ARG2 (a2 / agar)\n      :purpose (a3 / accelerate-01\n            :ARG0 p\n            :ARG1 (g / grow-03\n                  :ARG1 (b / bacterium\n                        :name (n2 / name\n                              :op1 \"Pf\")))))",
      "# ::snt  Most were harmless on the money , but one caused boils and spots . \n(c / contrast-01\n      :ARG1 (h / harmful-02\n            :polarity -\n            :ARG0 (m / most)\n            :mod (o / on-the-money))\n      :ARG2 (c2 / cause-01\n            :ARG0 (o2 / one)\n            :ARG1 (a / and\n                  :op1 (b / boil-01)\n                  :op2 (s / spot))))",
      "# ::snt  Previous studies have revealed MRSA bacteria on notes and coins . \n(r / reveal-01\n      :ARG0 (s / study-01\n            :time (p / previous))\n      :ARG1 (b / bacterium\n            :mod (d / disease\n                  :name (n / name\n                        :op1 \"MRSA\"))\n            :location (a / and\n                  :op1 (n2 / note)\n                  :op2 (c / coin))))"
    ],
    "tree": [
      "(d / discover-01\n   :ARG0 (p / person\n            :ARG0 (s / study-01)))",
      "(d / discover-01\n   :ARG0 (p / person\n            :source (u / university\n                       :name (n / name\n                                :op1 \"University\"\n                                :op2 \"of\"\n                                :op3 \"Surrey\"))))",
      "(d / discover-01\n   :ARG1 (c / colony\n            :quant (m / multiple\n                      :op1 1000)))",
      "(d / discover-01\n   :ARG0 (p / person\n            :ARG0 (s / study-01))\n   :ARG1 (c / colony\n            :quant (m / multiple\n                      :op1 1000)))",
      "(d / discover-01\n   :ARG0 (p / person\n            :source (u / university\n                       :name (n / name\n                                :op1 \"University\"\n                                :op2 \"of\"\n                                :op3 \"Surrey\")))\n   :ARG1 (c / colony\n            :quant (m / multiple\n                      :op1 1000)))",
      "(s / submerge-01\n   :ARG0 (p / person\n            :ARG0 (s2 / study-01)))",
      "(s / submerge-01\n   :purpose (a3 / accelerate-01\n                :ARG0 (p / person)))",
      "(s / submerge-01\n   :purpose (a3 / accelerate-01\n                :ARG1 (g / grow-03\n                         :ARG1 (b / bacterium\n                                  :name (n2 / name\n                                            :op1 \"Pf\")))))",
      "(s / submerge-01\n   :ARG0 (p / person\n            :ARG0 (s2 / study-01))\n   :ARG1 (c / coin))",
      "(s / submerge-01\n   :ARG0 (p / person\n            :ARG0 (s2 / study-01))\n   :ARG1 (n / note))",
      "(c / contrast-01\n   :ARG1 (h / harmful-02\n            :mod (o / on-the-money)))",
      "(c / contrast-01\n   :ARG2 (c2 / cause-01\n             :ARG0 (o2 / one)))",
      "(c / contrast-01\n   :ARG2 (c2 / cause-01\n             :ARG1 (b / boil-01)))",
      "(r / reveal-01\n   :ARG0 (s / study-01\n            :time (p / previous)))",
      "(r / reveal-01\n   :ARG1 (b / bacterium\n            :mod (d / disease\n                    :name (n / name\n                             :op1 \"MRSA\"))))",
      "(r / reveal-01\n   :ARG1 (b / bacterium\n            :location (n2 / note)))",
      "(r / reveal-01\n   :ARG1 (b / bacterium\n            :location (c / coin)))",
      "(r / reveal-01\n   :ARG0 (s / study-01\n            :time (p / previous))\n   :ARG1 (b / bacterium\n            :mod (d / disease\n                    :name (n / name\n                             :op1 \"MRSA\"))))"
    ],
    "smus": [
      "Thousands of colonies were discovered.",
      "University of Surrey",
      "The University of Surrey people discovered --",
      "The University of Surrey discovered thousands of colonies.",
      "Students from the University of Surrey",
      "The notes were submerged in agar to accelerate the growth of the Pf bacteria.",
      "Students submerged notes to accelerate.",
      "Students submerged the coins in the agar.",
      "Pf growth",
      "coins and notes",
      "Boilers and spots.",
      "Not harmful, but one caused.",
      "But it caused spots.",
      "Previous studies have revealed --",
      "The bacteria in the notes have been revealed in previous studies.",
      "MRSA bacteria in coins",
      "Notes and coins",
      "MRSA"
    ]
  },
  {
    "instance_id": "realsumm-2",
    "summary": "<t> Danilo this week agreed to join Real Madrid in the summer for \u00a3 23million . </t> <t> Transfer will take total raised from player sales to \u00a3 440 m since 2004 . </t> <t> James Rodriguez , Pepe and Radamel Falcao among those sold by Porto . </t> <t> CLICK HERE for all the latest Real Madrid news . </t>",
    "summary_trees": [
      "# ::snt  Danilo this week agreed to join Real Madrid in the summer for \u00a3 23million . \n(a / agree-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Danilo\"))\n      :ARG1 (j / join-04\n            :ARG0 p\n            :ARG1 (t / team\n                  :name (n2 / name\n                        :op1 \"Real\"\n                        :op2 \"Madrid\"))\n            :time (d / date-entity\n                  :season (s / summer))\n            :prep-for (m / monetary-quantity\n                  :quant 23000000\n                  :unit (p2 / pound)))\n      :time (w / week\n            :mod (t2 / this)))",
      "# ::snt  Transfer will take total raised from player sales to \u00a3 440 m since 2004 . \n(t / take-01\n      :ARG0 (t2 / transfer-01)\n      :ARG1 (m / monetary-quantity\n            :ARG1-of (t3 / total-01)\n            :ARG1-of (r / raise-01\n                  :ARG3 (s / sell-01\n                        :ARG1 (p / person\n                              :ARG0-of (p2 / play-01)))))\n      :ARG3 (m2 / monetary-quantity\n            :quant 440000000\n            :unit (p3 / pound))\n      :time (s2 / since\n            :op1 (d / date-entity\n                  :year 2004)))",
      "# ::snt  James Rodriguez , Pepe and Radamel Falcao among those sold by Porto . \n(ii / include-91\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"James\"\n                        :op2 \"Roduez\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Pepe\"))\n            :op3 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Radamel\"\n                        :op2 \"Falcao\")))\n      :ARG2 (t / that\n            :ARG1-of (s / sell-01\n                  :ARG0 (t2 / team\n                        :name (n4 / name\n                              :op1 \"Porto\")))))",
      "# ::snt  CLICK HERE for all the latest Real Madrid news . \n(c / CLICK-01\n      :mode imperative\n      :ARG0 (y / you)\n      :location (h / here)\n      :purpose (n / news\n            :mod (a / all)\n            :topic (t / team\n                  :name (n2 / name\n                        :op1 \"Real\"\n                        :op2 \"Madrid\"))\n            :mod (l / last)))"
    ],
    "tree": [
      "(a / agree-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Danilo\")))",
      "(a / agree-01\n   :ARG1 (j / join-04\n            :ARG1 (t / team\n                     :name (n2 / name\n                               :op1 \"Real\"\n                               :op2 \"Madrid\"))))",
      "(a / agree-01\n   :ARG1 (j / join-04\n            :prep-for (m / monetary-quantity\n                         :quant 23000000)))",
      "(t / take-01\n   :ARG1 (m / monetary-quantity\n            :ARG1 (t3 / total-01)))",
      "(t / take-01\n   :ARG3 (m2 / monetary-quantity\n             :unit (p3 / pound)))",
      "(t / take-01\n   :time (s2 / since\n             :op1 (d / date-entity\n                     :year 2004)))",
      "(ii / include-91\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"James\"\n                      :op2 \"Roduez\")))",
      "(ii / include-91\n    :ARG1 (p2 / person\n              :name (n2 / name\n                        :op1 \"Pepe\")))",
      "(ii / include-91\n    :ARG1 (p3 / person\n              :name (n3 / name\n                        :op1 \"Radamel\"\n                        :op2 \"Falcao\")))",
      "(ii / include-91\n    :ARG2 (t / that\n             :ARG1 (s / sell-01\n                      :ARG0 (t2 / team\n                                :name (n4 / name\n                                          :op1 \"Porto\")))))",
      "(ii / include-91\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"James\"\n                      :op2 \"Roduez\"))\n    :ARG2 (t / that\n             :ARG1 (s / sell-01\n                      :ARG0 (t2 / team\n                                :name (n4 / name\n                                          :op1 \"Porto\")))))",
      "(c / CLICK-01\n   :purpose (n / news\n               :mod (a / all)))",
      "(c / CLICK-01\n   :purpose (n / news\n               :topic (t / team\n                         :name (n2 / name\n                                   :op1 \"Real\"\n                                   :op2 \"Madrid\"))))",
      "(c / CLICK-01\n   :purpose (n / news\n               :mod (l / last)))",
      "(c / CLICK-01\n   :ARG0 (y / you)\n   :location (h / here))",
      "(c / CLICK-01\n   :ARG0 (y / you)\n   :purpose (n / news\n               :mod (a / all)))"
    ],
    "smus": [
      "Danilo agreed to join.",
      "agreed to join Real Madrid.",
      "Danilo agreed this week to join in the summer.",
      "Take the total since 2004.",
      "The transfer would take the amount raised from the sale of the player since 2004.",
      "The transfer would take the total to 445 million since 2004.",
      "James Rodriguez is one of them.",
      "And Radamel Falcao.",
      "Porto have sold.",
      "James Rodriguez and Pepe",
      "James Rodriguez was one of those Porto have sold.",
      "For all the news, CLICK HERE.",
      "Real Madrid news",
      "CLICK HERE for Real Madrid news.",
      "CLICK HERE.",
      "CLICKS for all the news."
    ]
  },
  {
    "instance_id": "realsumm-3",
    "summary": "<t> Dominatrix claims Dominatrix shared a ' hot , deep kiss ' with Prince Harry in Vegas . </t> <t> Carrie Reichert said Reichert felt overdressed after seeing Harry ' cute naked a * * ' The 43-year - old made the claim in an excerpt from Reichert upcoming book . </t> <t> Kensington Palace has previously denied Reichert was invited to the hotel suite . </t>",
    "summary_trees": [
      "# ::snt  Dominatrix claims Dominatrix shared a ' hot , deep kiss ' with Prince Harry in Vegas . \n(c / claim-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Dominatrix\"))\n      :ARG1 (s / share-01\n            :ARG0 p\n            :ARG1 (k / kiss-01\n                  :ARG0 p\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Prince\"\n                              :op2 \"Harry\"))\n                  :ARG1-of (h / hot-05)\n                  :ARG1-of (d / deep-03))\n            :ARG2 p2\n            :location (c2 / city\n                  :name (n3 / name\n                        :op1 \"Vegas\"))))",
      "# ::snt  Carrie Reichert said Reichert felt overdressed after seeing Harry ' cute naked a * * ' The 43-year - old made the claim in an excerpt from Reichert upcoming book . \n(c / claim-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Carrie\"\n                  :op2 \"Reichert\")\n            :age (t / temporal-quantity\n                  :quant 43\n                  :unit (y / year)))\n      :ARG1 (f / feel-01\n            :ARG0 p\n            :ARG1 (o / overdress-01\n                  :ARG1 p)\n            :time (a / after\n                  :op1 (s / see-01\n                        :ARG0 p\n                        :ARG1 (a2 / and\n                              :op1 (c2 / cute\n                                    :domain (p2 / person\n                                          :name (n2 / name\n                                                :op1 \"Harry\")))\n                              :op2 (n3 / naked\n                                    :domain p2)))))\n      :medium (t2 / thing\n            :ARG1-of (e / excerpt-01\n                  :ARG2 (b / book\n                        :ARG1-of (c3 / come-up-11)\n                        :poss p))))",
      "# ::snt  Kensington Palace has previously denied Reichert was invited to the hotel suite . \n(d / deny-01\n      :ARG0 (g / government-organization\n            :name (n / name\n                  :op1 \"Kensington\"\n                  :op2 \"Palace\"))\n      :ARG1 (ii / invite-01\n            :ARG1 (p / person\n                  :name (n2 / name\n                        :op1 \"Reichert\"))\n            :ARG2 (s / suite\n                  :location (h / hotel)))\n      :time (p2 / previous))"
    ],
    "tree": [
      "(c / claim-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dominatrix\")))",
      "(c / claim-01\n   :ARG1 (s / share-01\n            :ARG0 (p / person :name (n / name :op1 \"Dominatrix\"))))",
      "(c / claim-01\n   :ARG1 (s / share-01\n            :ARG1 (k / kiss-01\n                     :ARG0 (p / person :name (n / name :op1 \"Dominatrix\")))))",
      "(c / claim-01\n   :ARG1 (s / share-01\n            :ARG2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Prince\"\n                                :op2 \"Harry\"))))",
      "(c / claim-01\n   :ARG1 (s / share-01\n            :location (c2 / city\n                          :name (n3 / name\n                                    :op1 \"Vegas\"))))",
      "(c / claim-01\n   :ARG1 (f / feel-01\n            :ARG0 (p / person :name (n / name :op1 \"Carrie\" :op2 \"Reichert\")))))",
      "(c / claim-01\n   :ARG1 (f / feel-01\n            :ARG1 (o / overdress-01\n                     :ARG1 (p / person :name (n / name :op1 \"Carrie\" :op2 \"Reichert\"))))))",
      "(d / deny-01\n   :ARG0 (g / government-organization\n            :name (n / name\n                     :op1 \"Kensington\"\n                     :op2 \"Palace\")))",
      "(d / deny-01\n   :ARG1 (ii / invite-01\n             :ARG1 (p / person\n                      :name (n2 / name\n                                :op1 \"Reichert\"))))",
      "(d / deny-01\n   :ARG1 (ii / invite-01\n             :ARG2 (s / suite\n                      :location (h / hotel))))",
      "(d / deny-01\n   :ARG0 (g / government-organization\n            :name (n / name\n                     :op1 \"Kensington\"\n                     :op2 \"Palace\"))\n   :ARG1 (ii / invite-01\n             :ARG1 (p / person\n                      :name (n2 / name\n                                :op1 \"Reichert\"))))",
      "(d / deny-01\n   :ARG0 (g / government-organization\n            :name (n / name\n                     :op1 \"Kensington\"\n                     :op2 \"Palace\"))\n   :ARG1 (ii / invite-01\n             :ARG2 (s / suite\n                      :location (h / hotel))))"
    ],
    "smus": [
      "I shared with Prince Harry,'' claims the man.",
      "Shared in Vegas.",
      "claiming dominatrix shared a kiss.",
      "Dominatrix claims she shared a kiss.",
      "Shared a hot kiss.",
      "The claim was made in an excerpt from Carrie Reichert's book that the feeling was after seeing Harry as naked.",
      "Harry is cute.",
      "The Kensington Palace has denied that Reichert was invited.",
      "Reichert was denied invitation.",
      "The Kensington Palace.",
      "invited to the hotel suite.",
      "Invitation to a hotel suite was denied."
    ]
  },
  {
    "instance_id": "realsumm-4",
    "summary": "<t> Eva Chapin , 34 , from West Linn , Oregon , has been accused of harassment . </t> <t> Referred to Linn neighbors as ' n * * * * * ' but insists Linn is not racist . </t> <t> One note said : ' There were no [ expletive ] in W.L until you came ' . </t> <t> Victim has said Linn family may be forced to move as family do n't feel safe . </t>",
    "summary_trees": [
      "# ::snt  Eva Chapin , 34 , from West Linn , Oregon , has been accused of harassment . \n(a / accuse-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Eva\"\n                  :op2 \"Chapin\")\n            :age (t / temporal-quantity\n                  :quant 34\n                  :unit (y / year))\n            :source (c / city\n                  :name (n2 / name\n                        :op1 \"West\"\n                        :op2 \"Linn\")\n                  :location (s / state\n                        :name (n3 / name\n                              :op1 \"Oregon\"))))\n      :ARG2 (h / harass-01\n            :ARG0 p))",
      "# ::snt  Referred to Linn neighbors as ' n * * * * * ' but insists Linn is not racist . \n(c / contrast-01\n      :ARG1 (r / refer-01\n            :ARG1 (p / person\n                  :ARG1-of (n / neighbor-01\n                        :ARG2 (c2 / city\n                              :name (n2 / name\n                                    :op1 \"Linn\"))))\n            :ARG2 (n3 / nigger))\n      :ARG2 (ii / insist-01\n            :ARG1 (r2 / racist\n                  :polarity -\n                  :domain c2)))",
      "# ::snt  One note said : ' There were no [ expletive ] in W.L until you came ' . \n(s / say-01\n      :ARG0 (n / note\n            :quant 1)\n      :ARG1 (b / be-located-at-91\n            :polarity -\n            :ARG1 (e / expletive)\n            :ARG2 (c / city\n                  :name (n2 / name\n                        :op1 \"W.L\"))\n            :time (u / until\n                  :op1 (c2 / come-01\n                        :ARG1 (y / you)))))",
      "# ::snt  Victim has said Linn family may be forced to move as family do n't feel safe . \n(s / say-01\n      :ARG0 (v / victim)\n      :ARG1 (p / possible-01\n            :ARG1 (f / force-01\n                  :ARG1 (f2 / family\n                        :name (n / name\n                              :op1 \"Linn\"))\n                  :ARG2 (m / move-01\n                        :ARG1 f2))\n            :ARG1-of (c / cause-01\n                  :ARG0 (f3 / feel-01\n                        :polarity -\n                        :ARG0 (f4 / family)\n                        :ARG1 (s2 / safe-01\n                              :ARG1 f4)))))"
    ],
    "tree": [
      "(a / accuse-01\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :quant 34)))",
      "(a / accuse-01\n   :ARG1 (p / person\n            :source (c / city\n                       :name (n2 / name\n                                 :op1 \"West\"\n                                 :op2 \"Linn\"))))",
      "(a / accuse-01\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :unit (y / year))))",
      "(a / accuse-01\n   :ARG1 (p / person\n            :source (c / city\n                       :location (s / state\n                                    :name (n3 / name\n                                              :op1 \"Oregon\")))))",
      "(c / contrast-01\n   :ARG1 (r / refer-01\n            :ARG1 (p / person\n                     :ARG1 (n / neighbor-01\n                              :ARG2 (c2 / city\n                                        :name (n2 / name\n                                                  :op1 \"Linn\"))))))",
      "(c / contrast-01\n   :ARG1 (r / refer-01\n            :ARG2 (n3 / nigger)))",
      "(c / contrast-01\n   :ARG2 (ii / insist-01\n             :ARG1 (r2 / racist\n                       :domain (c2 / city\n                                   :name (n2 / name\n                                             :op1 \"Linn\")))))",
      "(c / contrast-01\n   :ARG1 (r / refer-01\n            :ARG1 (p / person\n                     :ARG1 (n / neighbor-01\n                              :ARG2 (c2 / city\n                                        :name (n2 / name\n                                                  :op1 \"Linn\")))))\n   :ARG2 (ii / insist-01\n             :ARG1 (r2 / racist\n                       :polarity -)))",
      "(s / say-01\n   :ARG0 (n / note\n            :quant 1))",
      "(s / say-01\n   :ARG1 (b / be-located-at-91\n            :polarity -))",
      "(s / say-01\n   :ARG1 (b / be-located-at-91\n            :time (u / until\n                     :op1 (c2 / come-01\n                              :ARG1 (y / you)))))",
      "(s / say-01\n   :ARG1 (p / possible-01\n            :ARG1 (f / force-01\n                     :ARG1 (f2 / family\n                               :name (n / name\n                                        :op1 \"Linn\")))))",
      "(s / say-01\n   :ARG1 (p / possible-01\n            :ARG1 (c / cause-01\n                     :ARG0 (f3 / feel-01\n                               :polarity -))))",
      "(s / say-01\n   :ARG1 (p / possible-01\n            :ARG1 (f / force-01\n                     :ARG2 (m / move-01\n                              :ARG1 (f2 / family :name (n / name :op1 \"Linn\"))))))"
    ],
    "smus": [
      "34 - West Linn",
      "The 34-year-old was accused.",
      "OR",
      "Eva Chapin was accused of harassment.",
      "neighbors in Linn are referred to, but insists not to be racist.",
      "Referred to as nigger, but insists not racist.",
      "neighbors of Linn",
      "But neighbors in Linn are referred to.",
      "One note said \"Be there until you come.\"",
      "W.L.",
      "No, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no",
      "Because it doesn't feel.",
      "Victims have said that it may be because the family feels.",
      "It is said that the Linn family could be forced to move."
    ]
  },
  {
    "instance_id": "realsumm-5",
    "summary": "<t> Justin Rose finished joint runner - up at the Masters 2015 on 14-under - par . </t> <t> Rose 's final total has only been bettered six times at the the Masters . </t> <t> Rose hopes to build on Rose display and take some big titles across the year . </t> <t> CLICK HERE for all the latest news and reaction following the Masters . </t>",
    "summary_trees": [
      "# ::snt  Justin Rose finished joint runner - up at the Masters 2015 on 14-under - par . \n(f / finish-07\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Justin\"\n                  :op2 \"Rose\"))\n      :ARG2 (r / runner-up\n            :mod (j / joint))\n      :ARG3 (e / event\n            :name (n2 / name\n                  :op1 \"Masters\")\n            :time (d / date-entity\n                  :year 2015))\n      :manner (s / score-entity\n            :op1 14\n            :op2 (p2 / par)))",
      "# ::snt  Rose 's final total has only been bettered six times at the the Masters . \n(b / best-01\n      :frequency 6\n      :ARG1 (t / total\n            :mod (f / final)\n            :poss (p / person\n                  :name (n / name\n                        :op1 \"Rose\")))\n      :mod (o / only)\n      :time (g / game\n            :name (n2 / name\n                  :op1 \"Masters\")))",
      "# ::snt  Rose hopes to build on Rose display and take some big titles across the year . \n(h / hope-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Rose\"))\n      :ARG1 (a / and\n            :op1 (b / build-01\n                  :ARG0 p\n                  :ARG2 (d / display-01\n                        :ARG0 p))\n            :op2 (t / take-01\n                  :ARG0 p\n                  :ARG1 (t2 / title\n                        :mod (b2 / big)\n                        :quant (s / some))\n                  :time (a2 / across\n                        :op1 (y / year)))))",
      "# ::snt  CLICK HERE for all the latest news and reaction following the Masters . \n(c / CLICK-01\n      :mode imperative\n      :ARG0 (y / you)\n      :location (h / here)\n      :purpose (a / and\n            :op1 (n / news\n                  :mod (l / last))\n            :op2 (r / react-01)\n            :mod (a2 / all)\n            :ARG1-of (f / follow-01\n                  :ARG2 (g / game\n                        :name (n2 / name\n                              :op1 \"Masters\")))))"
    ],
    "tree": [
      "(f / finish-07\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Justin\"\n                     :op2 \"Rose\")))",
      "(f / finish-07\n   :ARG2 (r / runner-up\n            :mod (j / joint)))",
      "(f / finish-07\n   :ARG3 (e / event\n            :name (n2 / name\n                      :op1 \"Masters\")))",
      "(f / finish-07\n   :ARG3 (e / event\n            :time (d / date-entity\n                     :year 2015)))",
      "(f / finish-07\n   :manner (s / score-entity\n              :op1 14\n              :op2 (p2 / par)))",
      "(b / best-01\n   :ARG1 (t / total\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Rose\"))))",
      "(b / best-01\n   :time (g / game\n            :name (n2 / name\n                      :op1 \"Masters\")))",
      "(b / best-01\n   :ARG1 (t / total\n            :mod (f / final))\n   :mod (o / only))",
      "(b / best-01\n   :ARG1 (t / total\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Rose\")))\n   :mod (o / only))",
      "(h / hope-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rose\")))",
      "(h / hope-01\n   :ARG1 (b / build-01\n            :ARG0 (p / person :name (n / name :op1 \"Rose\"))))",
      "(h / hope-01\n   :ARG1 (t / take-01\n            :ARG0 (p / person :name (n / name :op1 \"Rose\"))))",
      "(h / hope-01\n   :ARG1 (b / build-01\n            :ARG2 (d / display-01\n                     :ARG0 (p / person :name (n / name :op1 \"Rose\")))))",
      "(c / CLICK-01\n   :purpose (n / news\n               :mod (l / last)))",
      "(c / CLICK-01\n   :purpose (f / follow-01\n               :ARG2 (g / game\n                        :name (n2 / name\n                                  :op1 \"Masters\"))))",
      "(c / CLICK-01\n   :ARG0 (y / you)\n   :location (h / here))",
      "(c / CLICK-01\n   :ARG0 (y / you)\n   :purpose (n / news\n               :mod (l / last)))",
      "(c / CLICK-01\n   :ARG0 (y / you)\n   :purpose (r / react-01))"
    ],
    "smus": [
      "Joint runner-up finished 14 under par.",
      "Justin Rose finished joint runner up in 2015",
      "Justin Rose",
      "finished the Masters.",
      "Justin Rose finished joint runner up at the Masters with a par of 14th.",
      "Rose's total was only best during the Masters.",
      "Rose",
      "Best final total.",
      "Best total of Rose.",
      "Take the big titles.",
      "Hope Rose takes.",
      "Build Rose's display.",
      "Rose hopes to take some titles.",
      "For the latest news, CLICK HERE.",
      "CLICKS for following the Masters.",
      "CLICK HERE FOR ALL.",
      "Masters",
      "And all the latest news following the Masters."
    ]
  },
  {
    "instance_id": "realsumm-6",
    "summary": "<t> Girl was playing with friend when Zbigniew Huminski forced friend into car . </t> <t> Chloe 's naked body was found in nearby woods an hour - and - a - half later . </t> <t> Prosecutors say there is evidence of ' strangulation and sexual violence ' Polish immigrant , who was heading to England , has admitted to killing . </t>",
    "summary_trees": [
      "# ::snt  Girl was playing with friend when Zbigniew Huminski forced friend into car . \n(p / play-01\n      :ARG0 (g / girl)\n      :ARG3 (p2 / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 g\n                  :ARG2 (f / friend)))\n      :time (f2 / force-01\n            :ARG0 (p3 / person\n                  :name (n / name\n                        :op1 \"Zbigniew\"\n                        :op2 \"Huminski\"))\n            :ARG1 p2\n            :ARG2 (c / car)))",
      "# ::snt  Chloe 's naked body was found in nearby woods an hour - and - a - half later . \n(f / find-01\n      :ARG1 (b / body\n            :poss (p / person\n                  :name (n / name\n                        :op1 \"Chloe\"))\n            :ARG1-of (n2 / naked-02))\n      :location (w / woods\n            :location (n3 / nearby))\n      :time (a / after\n            :quant (t / temporal-quantity\n                  :quant 1.5\n                  :unit (h / hour))))",
      "# ::snt  Prosecutors say there is evidence of ' strangulation and sexual violence ' Polish immigrant , who was heading to England , has admitted to killing . \n(m / multi-sentence\n      :snt1 (s / say-01\n            :ARG0 (p / person\n                  :ARG0-of (p2 / prosecute-01))\n            :ARG1 (e / evidence-01\n                  :ARG1 (a / and\n                        :op1 (s2 / strangulate-01)\n                        :op2 (v / violence\n                              :mod (s3 / sex)))))\n      :snt2 (a2 / admit-01\n            :ARG0 (p3 / person\n                  :ARG0-of (ii / immigrate-01\n                        :ARG2 (c / country\n                              :name (n / name\n                                    :op1 \"Poland\")))\n                  :ARG0-of (h / head-02\n                        :ARG1 (c2 / country\n                              :name (n2 / name\n                                    :op1 \"England\"))))\n            :ARG1 (k / kill-01\n                  :ARG0 p3)))"
    ],
    "tree": [
      "(p / play-01\n   :ARG3 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 (g / girl))))",
      "(p / play-01\n   :ARG3 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG2 (f / friend))))",
      "(p / play-01\n   :time (f2 / force-01\n             :ARG0 (p3 / person\n                       :name (n / name\n                                :op1 \"Zbigniew\"\n                                :op2 \"Huminski\"))))",
      "(p / play-01\n   :time (f2 / force-01\n             :ARG1 (p2 / person)))",
      "(f / find-01\n   :ARG1 (b / body\n            :ARG1 (n2 / naked-02)))",
      "(f / find-01\n   :time (a / after\n            :quant (t / temporal-quantity\n                      :quant 1.5)))",
      "(f / find-01\n   :time (a / after\n            :quant (t / temporal-quantity\n                      :unit (h / hour))))",
      "(m / multi-sentence\n   :snt1 (s / say-01\n            :ARG1 (e / evidence-01\n                     :ARG1 (s2 / strangulate-01))))",
      "(m / multi-sentence\n   :snt2 (a2 / admit-01\n             :ARG0 (p3 / person\n                       :ARG0 (ii / immigrate-01\n                                 :ARG2 (c / country\n                                          :name (n / name\n                                                   :op1 \"Poland\"))))))"
    ],
    "smus": [
      "The Girl was playing when Zbigniew Huminski forced her.",
      "The Girl was playing when people were forced.",
      "Playing with a friend.",
      "The Girl",
      "The naked body was found in the nearby woods an hour later.",
      "Found an hour later.",
      "Found in nearby woods 1.5 hours later.",
      "There is evidence of sexual violence, they say.",
      "and sexual violence."
    ]
  },
  {
    "instance_id": "realsumm-7",
    "summary": "<t> Pair were left homeless after storms and met in Connecticut trailer park . </t> <t> Won lottery last year but only cashed prize in after Easter to mark new start . ' </t> <t> Because of Sandy I met the love of my life ' , said thrilled lottery winner . </t>",
    "summary_trees": [
      "# ::snt  Pair were left homeless after storms and met in Connecticut trailer park . \n(a / and\n      :op1 (l / leave-13\n            :ARG1 (p / pair)\n            :ARG2 (h / homeless\n                  :domain p)\n            :time (a2 / after\n                  :op1 (s / storm)))\n      :op2 (m / meet-03\n            :ARG0 p\n            :location (p2 / park\n                  :mod (t / trailer)\n                  :location (s2 / state\n                        :name (n / name\n                              :op1 \"Connecticut\")))))",
      "# ::snt  Won lottery last year but only cashed prize in after Easter to mark new start . ' \n(c / contrast-01\n      :ARG1 (w / win-01\n            :ARG2 (l / lottery)\n            :time (y / year\n                  :mod (l2 / last)))\n      :ARG2 (c2 / cash-in-03\n            :ARG1 (p / prize)\n            :time (a / after\n                  :op1 (f / festival\n                        :name (n / name\n                              :op1 \"Easter\")))\n            :purpose (m / mark-01\n                  :ARG1 (s / start-01\n                        :ARG1-of (n2 / new-01)))\n            :mod (o / only)))",
      "# ::snt  Because of Sandy I met the love of my life ' , said thrilled lottery winner . \n(s / say-01\n      :ARG0 (p / person\n            :ARG0-of (w / win-01\n                  :ARG1 (l / lottery))\n            :ARG1-of (t / thrill-01))\n      :ARG1 (c / cause-01\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Sandy\"))\n            :ARG1 (m / meet-02\n                  :ARG0 p\n                  :ARG1 (p3 / person\n                        :ARG0-of (l2 / love-01\n                              :ARG1 p)\n                        :ARG0-of (l3 / live-01\n                              :ARG1 p)))))"
    ],
    "tree": [
      "(a / and\n   :op1 (l / leave-13\n           :ARG1 (p / pair)))",
      "(a / and\n   :op1 (l / leave-13\n           :ARG2 (h / homeless\n                    :domain (p / pair))))",
      "(a / and\n   :op1 (l / leave-13\n           :time (a2 / after\n                     :op1 (s / storm))))",
      "(a / and\n   :op2 (m / meet-03\n           :ARG0 (p / pair)))",
      "(a / and\n   :op2 (m / meet-03\n           :location (p2 / park\n                         :mod (t / trailer))))",
      "(c / contrast-01\n   :ARG1 (w / win-01\n            :ARG2 (l / lottery)))",
      "(c / contrast-01\n   :ARG1 (w / win-01\n            :time (y / year\n                     :mod (l2 / last))))",
      "(c / contrast-01\n   :ARG2 (c2 / cash-in-03\n             :ARG1 (p / prize)))",
      "(c / contrast-01\n   :ARG2 (c2 / cash-in-03\n             :time (a / after\n                      :op1 (f / festival\n                              :name (n / name\n                                       :op1 \"Easter\")))))",
      "(c / contrast-01\n   :ARG2 (c2 / cash-in-03\n             :purpose (m / mark-01\n                         :ARG1 (s / start-01\n                                  :ARG1 (n2 / new-01)))))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (w / win-01\n                     :ARG1 (l / lottery))))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG1 (t / thrill-01)))",
      "(s / say-01\n   :ARG1 (c / cause-01\n            :ARG1 (m / meet-02\n                     :ARG0 (p / person))))",
      "(s / say-01\n   :ARG1 (c / cause-01\n            :ARG1 (m / meet-02\n                     :ARG1 (p3 / person\n                               :ARG0 (l2 / love-01\n                                         :ARG1 (p / person))))))"
    ],
    "smus": [
      "The pair left and met.",
      "The pair were left homeless.",
      "and met at a trailer park.",
      "The pair left and met at a Connecticut park.",
      "a park in Connecticut",
      "The prize will only be cashed in after Easter to mark the start of a new year.",
      "The win last year.",
      "Lottery wins, but only cash in.",
      "Only after Easter is cash in.",
      "But cash in to mark the start of a new.",
      "Lottery winners said because they met their own people.",
      "Lottery winner",
      "Because of Sandy.",
      "Because the people met,\" said the man."
    ]
  },
  {
    "instance_id": "realsumm-8",
    "summary": "<t> Cesc Fabregas was caught by trailing arm of Stoke City ace Charlie Adam . </t> <t> Former Barcelona man picked up the injury during Chelsea 's home win . </t> <t> Midfielder Adam scored wonder goal during the game but goal was n't enough . </t> <t> Fabregas took to Instagram to show Adam was all smiles despite the bruises . </t> <t> CLICK HERE for all the latest Chelsea news . </t>",
    "summary_trees": [
      "# ::snt  Cesc Fabregas was caught by trailing arm of Stoke City ace Charlie Adam . \n(c / catch-03\n      :ARG0 (a / arm\n            :part-of (p / person\n                  :name (n / name\n                        :op1 \"Charlie\"\n                        :op2 \"Adam\")\n                  :mod (a2 / ace)\n                  :part-of (t / team\n                        :name (n2 / name\n                              :op1 \"Stoke\"\n                              :op2 \"City\")))\n            :ARG0-of (t2 / trail-01))\n      :ARG1 (p2 / person\n            :name (n3 / name\n                  :op1 \"Cesc\"\n                  :op2 \"Fabregas\")))",
      "# ::snt  Former Barcelona man picked up the injury during Chelsea 's home win . \n(p / pick-up-11\n      :ARG0 (m / man\n            :time (f / former)\n            :part-of (t / team\n                  :name (n / name\n                        :op1 \"Barcelona\")))\n      :ARG1 (ii / injury)\n      :time (w / win-01\n            :ARG0 (t2 / team\n                  :name (n2 / name\n                        :op1 \"Chelsea\"))\n            :location (h / home)))",
      "# ::snt  Midfielder Adam scored wonder goal during the game but goal was n't enough . \n(h / have-concession-91\n      :ARG1 (h2 / have-quant-91\n            :polarity -\n            :ARG1 (g / goal)\n            :ARG3 (e / enough))\n      :ARG2 (s / score-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Adam\")\n                  :ARG0-of (h3 / have-org-role-91\n                        :ARG2 (m / midfielder)))\n            :ARG1 (g2 / goal\n                  :mod (w / wonder))\n            :time (g3 / game)))",
      "# ::snt  Fabregas took to Instagram to show Adam was all smiles despite the bruises . \n(t / take-35\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Fabregas\"))\n      :ARG2 (p2 / publication\n            :name (n2 / name\n                  :op1 \"Instagram\"))\n      :purpose (s / show-01\n            :ARG0 p\n            :ARG1 (s2 / smile-01\n                  :ARG0 (p3 / person\n                        :name (n3 / name\n                              :op1 \"Adam\"))\n                  :mod (a / all)\n                  :concession (b / bruise-01\n                        :ARG1 p3))))",
      "# ::snt  CLICK HERE for all the latest Chelsea news . \n(c / CLICK-01\n      :mode imperative\n      :ARG0 (y / you)\n      :location (h / here)\n      :purpose (n / news\n            :mod (l / last)\n            :mod (a / all)\n            :topic (p / person\n                  :name (n2 / name\n                        :op1 \"Chelsea\"))))"
    ],
    "tree": [
      "(c / catch-03\n   :ARG0 (a / arm\n            :part (p / person\n                     :name (n / name\n                              :op1 \"Charlie\"\n                              :op2 \"Adam\"))))",
      "(c / catch-03\n   :ARG0 (a / arm\n            :ARG0 (t2 / trail-01)))",
      "(c / catch-03\n   :ARG0 (a / arm\n            :part (p / person\n                     :mod (a2 / ace))))",
      "(c / catch-03\n   :ARG0 (a / arm\n            :part (p / person\n                     :part (t / team\n                              :name (n2 / name\n                                        :op1 \"Stoke\"\n                                        :op2 \"City\")))))",
      "(c / catch-03\n   :ARG1 (p2 / person\n             :name (n3 / name\n                       :op1 \"Cesc\"\n                       :op2 \"Fabregas\")))",
      "(p / pick-up-11\n   :ARG0 (m / man\n            :time (f / former)))",
      "(p / pick-up-11\n   :time (w / win-01\n            :location (h / home)))",
      "(p / pick-up-11\n   :ARG0 (m / man\n            :time (f / former))\n   :time (w / win-01\n            :ARG0 (t2 / team\n                      :name (n2 / name\n                                :op1 \"Chelsea\"))))",
      "(h / have-concession-91\n   :ARG1 (h2 / have-quant-91\n             :polarity -))",
      "(h / have-concession-91\n   :ARG1 (h2 / have-quant-91\n             :ARG3 (e / enough)))",
      "(h / have-concession-91\n   :ARG2 (s / score-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Adam\"))))",
      "(h / have-concession-91\n   :ARG2 (s / score-01\n            :ARG1 (g2 / goal\n                      :mod (w / wonder))))",
      "(t / take-35\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Fabregas\")))",
      "(t / take-35\n   :ARG2 (p2 / publication\n             :name (n2 / name\n                       :op1 \"Instagram\")))",
      "(t / take-35\n   :purpose (s / show-01\n               :ARG0 (p / person :name (n / name :op1 \"Fabregas\"))))",
      "(t / take-35\n   :purpose (s / show-01\n               :ARG1 (s2 / smile-01\n                         :ARG0 (p3 / person\n                                   :name (n3 / name\n                                             :op1 \"Adam\")))))",
      "(t / take-35\n   :purpose (s / show-01\n               :ARG1 (s2 / smile-01\n                         :mod (a / all))))",
      "(c / CLICK-01\n   :purpose (n / news\n               :mod (l / last)))",
      "(c / CLICK-01\n   :purpose (n / news\n               :mod (a / all)))",
      "(c / CLICK-01\n   :purpose (n / news\n               :topic (p / person\n                         :name (n2 / name\n                                   :op1 \"Chelsea\"))))",
      "(c / CLICK-01\n   :ARG0 (y / you)\n   :location (h / here))",
      "(c / CLICK-01\n   :ARG0 (y / you)\n   :purpose (n / news\n               :mod (l / last)))"
    ],
    "smus": [
      "Charlie Adam's arm",
      "Charlie Adam's arm caught Cesc Fabregas.",
      "Trailing arm of Stoke City",
      "The ace's arm",
      "Cesc Fabregas was caught.",
      "Barcelona man.",
      "The former man picked up.",
      "The former man picked up with a win at home.",
      "The midfielder scored in the game.",
      "Adam scored a wonder goal.",
      "Adam",
      "Adam scored though.",
      "Fabregas took to Instagram to show all the smiles.",
      "It took to show the smiles despite Adam's bruises.",
      "Adam all smiles.",
      "Fabregas took to show.",
      "Instagram",
      "CLICK HERE for Chelsea news",
      "For all the news, CLICK HERE.",
      "Chelsea",
      "News about Chelsea.",
      "CLICKS for the latest news."
    ]
  },
  {
    "instance_id": "realsumm-9",
    "summary": "<t> The life of 16-year - old Maren Sanchez stabbed to death a year ago on the day of prom was celebrated on Saturday by hundreds of people . ' </t> <t> I do n't think there 's anything sad about this . </t> <t> this 's such a celebration , ' said Darby Hudd , a 17-year - old friend of the slain teen . </t> <t> A classmate , Christopher Plaskon , has been charged with Sanchez 's murder . </t>",
    "summary_trees": [
      "# ::snt  The life of 16-year - old Maren Sanchez stabbed to death a year ago on the day of prom was celebrated on Saturday by hundreds of people . ' \n(m / multi-sentence\n      :snt1 (c / celebrate-01\n            :ARG0 (p / person\n                  :quant (m2 / multiple\n                        :op1 100))\n            :ARG1 (l / life\n                  :poss (p2 / person\n                        :name (n / name\n                              :op1 \"Maren\"\n                              :op2 \"Sanchez\")\n                        :age (t / temporal-quantity\n                              :quant 16\n                              :unit (y / year))\n                        :ARG1-of (s / stab-01\n                              :ARG4 (d / die-01\n                                    :ARG1 p2)\n                              :time (b / before\n                                    :op1 (n2 / now)\n                                    :quant (t2 / temporal-quantity\n                                          :quant 1\n                                          :unit (y2 / year)))\n                              :time (d2 / day\n                                    :time-of (p3 / prom)))))\n            :time (d3 / date-entity\n                  :weekday (s2 / saturday))))",
      "# ::snt  I do n't think there 's anything sad about this . \n(t / think-01\n      :polarity -\n      :ARG0 (ii / i)\n      :ARG1 (s / sad-02\n            :ARG0 (a / anything)\n            :topic (t2 / this)))",
      "# ::snt  this 's such a celebration , ' said Darby Hudd , a 17-year - old friend of the slain teen . \n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Darby\"\n                  :op2 \"Hudd\")\n            :age (t / temporal-quantity\n                  :quant 17\n                  :unit (y / year))\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (t2 / teen\n                        :ARG1-of (s2 / slay-01))\n                  :ARG2 (f / friend)))\n      :ARG1 (c / celebrate-02\n            :ARG1 (t3 / this)\n            :mod (s3 / such)))",
      "# ::snt  A classmate , Christopher Plaskon , has been charged with Sanchez 's murder . \n(m / multi-sentence\n      :snt1 (c / charge-05\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Christopher\"\n                        :op2 \"Plaskon\")\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG2 (c2 / classmate)))\n            :ARG2 (m2 / murder-01\n                  :ARG0 p\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Sanchez\")))))"
    ],
    "tree": [
      "(m / multi-sentence\n   :snt1 (c / celebrate-01\n            :ARG0 (p / person\n                     :quant (m2 / multiple\n                                :op1 100))))",
      "(m / multi-sentence\n   :snt1 (c / celebrate-01\n            :ARG1 (l / life\n                     :poss (p2 / person\n                               :name (n / name\n                                        :op1 \"Maren\"\n                                        :op2 \"Sanchez\")))))",
      "(m / multi-sentence\n   :snt1 (c / celebrate-01\n            :time (d3 / date-entity\n                      :weekday (s2 / saturday))))",
      "(m / multi-sentence\n   :snt1 (c / celebrate-01\n            :ARG1 (l / life\n                     :poss (p2 / person\n                               :age (t / temporal-quantity\n                                       :quant 16)))))",
      "(m / multi-sentence\n   :snt1 (c / celebrate-01\n            :ARG1 (l / life\n                     :poss (p2 / person\n                               :ARG1 (s / stab-01\n                                        :ARG4 (d / die-01\n                                                 :ARG1 p2))))))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Darby\"\n                     :op2 \"Hudd\")))",
      "(s / say-01\n   :ARG0 (p / person\n            :age (t / temporal-quantity\n                    :unit (y / year))))",
      "(m / multi-sentence\n   :snt1 (c / charge-05\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Christopher\"\n                              :op2 \"Plaskon\"))))",
      "(m / multi-sentence\n   :snt1 (c / charge-05\n            :ARG2 (m2 / murder-01\n                      :ARG0 (p / person :name (n / name :op1 \"Christopher\" :op2 \"Plaskon\"))))))",
      "(m / multi-sentence\n   :snt1 (c / charge-05\n            :ARG1 (p / person\n                     :ARG0 (h / have-rel-role-91\n                              :ARG2 (c2 / classmate)))))",
      "(m / multi-sentence\n   :snt1 (c / charge-05\n            :ARG2 (m2 / murder-01\n                      :ARG1 (p2 / person\n                                :name (n2 / name\n                                          :op1 \"Sanchez\")))))"
    ],
    "smus": [
      "The person who was stabbed a year earlier.",
      "The life of the people who were stabbed one before is celebrated.",
      "A year old, Maren Sanchez, was stabbed to death.",
      "The life of the 16-year-old was celebrated Saturday.",
      "Hundreds celebrated Saturday.",
      "friend 17",
      "Darby Husd, 17,",
      "Christopher Plaskon",
      "Christopher Plaskon was charged with murder.",
      "The classmate is charged.",
      "Sanchez"
    ]
  },
  {
    "instance_id": "realsumm-10",
    "summary": "<t> Audrey Alexander wanted Alexander neighbours to chop down neighbours huge hedge . </t> <t> Alexander claims the 40 ft leylandii was blocking sunlight from reaching Alexander home . </t> <t> Feud started in 1980 when Feud blocked light from reaching a vegetable patch . </t> <t> Council finally rules that the hedge can stay - but must be cut back to 20 ft . </t>",
    "summary_trees": [
      "# ::snt  Audrey Alexander wanted Alexander neighbours to chop down neighbours huge hedge . \n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Audrey\"\n                  :op2 \"Alexander\"))\n      :ARG1 (c / chop-down-02\n            :ARG0 (p2 / person\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 p\n                        :ARG2 (n2 / neighbor)))\n            :ARG1 (h2 / hedge\n                  :mod (h3 / huge)\n                  :poss p2))\n      :ARG2 p2)",
      "# ::snt  Alexander claims the 40 ft leylandii was blocking sunlight from reaching Alexander home . \n(c / claim-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Alexander\"))\n      :ARG1 (b / block-01\n            :ARG0 (l / leylandii\n                  :quant (d / distance-quantity\n                        :quant 40\n                        :unit (f / foot)))\n            :ARG1 (s / sunlight)\n            :ARG2 (r / reach-01\n                  :ARG1 (h / home\n                        :poss p))))",
      "# ::snt  Feud started in 1980 when Feud blocked light from reaching a vegetable patch . \n(s / start-01\n      :ARG1 (f / feud-01)\n      :time (d / date-entity\n            :year 1980\n            :time-of (b / block-01\n                  :ARG0 f\n                  :ARG1 (r / reach-01\n                        :ARG0 (l / light)\n                        :ARG1 (p / patch\n                              :mod (v / vegetable))))))",
      "# ::snt  Council finally rules that the hedge can stay - but must be cut back to 20 ft . \n(r / rule-01\n      :ARG0 (c / council)\n      :ARG1 (c2 / contrast-01\n            :ARG1 (p / possible-01\n                  :ARG1 (s / stay-01\n                        :ARG1 (h / hedge)))\n            :ARG2 (o / obligate-01\n                  :ARG2 (c3 / cut-back-05\n                        :ARG1 h\n                        :ARG2 (d / distance-quantity\n                              :quant 20\n                              :unit (f / foot)))))\n      :time (f2 / final))"
    ],
    "tree": [
      "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Audrey\"\n                     :op2 \"Alexander\")))",
      "(w / want-01\n   :ARG1 (c / chop-down-02\n            :ARG0 (p2 / person\n                      :ARG0 (h / have-rel-role-91\n                               :ARG1 (p / person :name (n / name :op1 \"Audrey\" :op2 \"Alexander\"))))))",
      "(w / want-01\n   :ARG1 (c / chop-down-02\n            :ARG1 (h2 / hedge\n                      :poss (p2 / person))))",
      "(c / claim-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Alexander\")))",
      "(c / claim-01\n   :ARG1 (b / block-01\n            :ARG0 (l / leylandii\n                     :quant (d / distance-quantity\n                               :quant 40))))",
      "(c / claim-01\n   :ARG1 (b / block-01\n            :ARG1 (s / sunlight)))",
      "(c / claim-01\n   :ARG1 (b / block-01\n            :ARG2 (r / reach-01\n                     :ARG1 (h / home\n                              :poss (p / person :name (n / name :op1 \"Alexander\"))))))",
      "(c / claim-01\n   :ARG1 (b / block-01\n            :ARG0 (l / leylandii\n                     :quant (d / distance-quantity\n                               :unit (f / foot)))))",
      "(s / start-01\n   :time (d / date-entity\n            :year 1980))",
      "(s / start-01\n   :time (d / date-entity\n            :time (b / block-01\n                     :ARG0 (f / feud-01))))",
      "(s / start-01\n   :time (d / date-entity\n            :time (b / block-01\n                     :ARG1 (r / reach-01\n                              :ARG0 (l / light)))))",
      "(s / start-01\n   :time (d / date-entity\n            :time (b / block-01\n                     :ARG1 (r / reach-01\n                              :ARG1 (p / patch\n                                       :mod (v / vegetable))))))",
      "(s / start-01\n   :ARG1 (f / feud-01)\n   :time (d / date-entity\n            :year 1980))",
      "(r / rule-01\n   :ARG1 (c2 / contrast-01\n             :ARG1 (p / possible-01\n                      :ARG1 (s / stay-01\n                               :ARG1 (h / hedge)))))",
      "(r / rule-01\n   :ARG1 (c2 / contrast-01\n             :ARG2 (o / obligate-01\n                      :ARG2 (c3 / cut-back-05\n                                :ARG1 (h / hedge)))))",
      "(r / rule-01\n   :ARG1 (c2 / contrast-01\n             :ARG2 (o / obligate-01\n                      :ARG2 (c3 / cut-back-05\n                                :ARG2 (d / distance-quantity\n                                         :quant 20)))))",
      "(r / rule-01\n   :ARG1 (c2 / contrast-01\n             :ARG2 (o / obligate-01\n                      :ARG2 (c3 / cut-back-05\n                                :ARG2 (d / distance-quantity\n                                         :unit (f / foot))))))",
      "(r / rule-01\n   :ARG0 (c / council)\n   :ARG1 (c2 / contrast-01\n             :ARG1 (p / possible-01\n                      :ARG1 (s / stay-01\n                               :ARG1 (h / hedge)))))"
    ],
    "smus": [
      "Chopping down a huge hedge.",
      "Audrey Alexander",
      "Audrey Alexander wanted to chop down.",
      "Alexander claims 40 leylandii are blocking.",
      "40 leylandii blocking sunlight from reaching Alexander's home.",
      "Alexander's home claims to be blocked from reaching.",
      "Alexander claims the sunlight is blocking.",
      "Alexander claims.",
      "started when the light blocked its reaching.",
      "Reaching the vegetable patch was blocked.",
      "started when the feud blocked.",
      "started in 1980.",
      "When the Feudal Blocks Happened.",
      "The Council finally rules that hedges must be cut back.",
      "Finally, the rule is that hedges must be cut back.",
      "Cut back by 20.",
      "Cut back on the feet.",
      "The hedge may stay, but it must be cut back."
    ]
  },
  {
    "instance_id": "realsumm-11",
    "summary": "<t> Catherine Nevin was allowed out despite being jailed for life in April 2000 . </t> <t> 62-year - old was seen on the bus , with a pal and walking around in Dublin . </t> <t> Sat next to unsuspecting commuter on bus and went totally unnoticed . </t> <t> Ireland 's most infamous female prisoner murdered husband Tom in 1996 . </t>",
    "summary_trees": [
      "# ::snt  Catherine Nevin was allowed out despite being jailed for life in April 2000 . \n(a / allow-01\n      :ARG1 (o / out-06\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Catherine\"\n                        :op2 \"Nevin\")))\n      :concession (j / jail-01\n            :ARG1 p\n            :ARG2 (l / life)\n            :time (d / date-entity\n                  :year 2000\n                  :month 4)))",
      "# ::snt  62-year - old was seen on the bus , with a pal and walking around in Dublin . \n(s / see-01\n      :ARG1 (p / person\n            :age (t / temporal-quantity\n                  :quant 62\n                  :unit (y / year))\n            :accompanier (p2 / person\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 p\n                        :ARG2 (p3 / pal)))\n            :ARG0-of (w / walk-01\n                  :location (a / around\n                        :op1 (c / city\n                              :name (n / name\n                                    :op1 \"Dublin\")))))\n      :location (b / bus))",
      "# ::snt  Sat next to unsuspecting commuter on bus and went totally unnoticed . \n(a / and\n      :op1 (s / sit-01\n            :ARG1 (ii / i)\n            :ARG2 (n / next-to\n                  :op1 (p / person\n                        :ARG0-of (c / commute-01)\n                        :ARG0-of (s2 / suspect-01\n                              :polarity -))\n                  :location (b / bus)))\n      :op2 (n2 / notice-01\n            :polarity -\n            :ARG1 ii\n            :degree (t / total)))",
      "# ::snt  Ireland 's most infamous female prisoner murdered husband Tom in 1996 . \n(m / murder-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Tom\")\n            :ARG1-of (h / have-rel-role-91\n                  :ARG0 (p2 / person\n                        :ARG1-of (ii / imprison-01)\n                        :mod (f / female)\n                        :ARG1-of (h2 / have-degree-91\n                              :ARG2 (ii2 / infamous)\n                              :ARG3 (m2 / most)\n                              :ARG5 (p3 / person\n                                    :ARG1-of (ii3 / imprison-01)\n                                    :location (c / country\n                                          :name (n2 / name\n                                                :op1 \"Ireland\")))))\n                  :ARG2 (h3 / husband)))\n      :ARG1 p\n      :time (d / date-entity\n            :year 1996))"
    ],
    "tree": [
      "(a / allow-01\n   :ARG1 (o / out-06\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Catherine\"\n                              :op2 \"Nevin\"))))",
      "(a / allow-01\n   :concession (j / jail-01\n                  :ARG1 (p / person\n                           :name (n / name\n                                    :op1 \"Catherine\"\n                                    :op2 \"Nevin\"))))",
      "(a / allow-01\n   :concession (j / jail-01\n                  :ARG2 (l / life)))",
      "(a / allow-01\n   :concession (j / jail-01\n                  :time (d / date-entity\n                           :year 2000)))",
      "(a / allow-01\n   :concession (j / jail-01\n                  :time (d / date-entity\n                           :month 4)))",
      "(s / see-01\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :quant 62)))",
      "(s / see-01\n   :ARG1 (p / person\n            :ARG0 (w / walk-01\n                     :location (a / around\n                                  :op1 (c / city\n                                          :name (n / name\n                                                   :op1 \"Dublin\"))))))",
      "(s / see-01\n   :ARG1 (p / person\n            :accompanier (p2 / person\n                             :ARG0 (h / have-rel-role-91\n                                      :ARG2 (p3 / pal)))))",
      "(a / and\n   :op1 (s / sit-01\n           :ARG1 (ii / i)))",
      "(a / and\n   :op1 (s / sit-01\n           :ARG2 (n / next-to\n                    :op1 (p / person\n                            :ARG0 (c / commute-01)))))",
      "(a / and\n   :op1 (s / sit-01\n           :ARG2 (n / next-to\n                    :op1 (p / person\n                            :ARG0 (s2 / suspect-01\n                                      :polarity -)))))",
      "(m / murder-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tom\")))",
      "(m / murder-01\n   :ARG0 (p / person\n            :ARG1 (h / have-rel-role-91\n                     :ARG2 (h3 / husband))))",
      "(m / murder-01\n   :ARG0 (p / person\n            :ARG1 (h / have-rel-role-91\n                     :ARG0 (p2 / person\n                               :mod (f / female)))))",
      "(m / murder-01\n   :ARG0 (p / person\n            :ARG1 (h / have-rel-role-91\n                     :ARG0 (p2 / person\n                               :ARG1 (h2 / have-degree-91\n                                         :ARG2 (ii2 / infamous))))))"
    ],
    "smus": [
      "Catherine Nevin is out.",
      "Jail in 2000.",
      "In April, he was jailed for life.",
      "Catherine Nevin was allowed out despite being jailed.",
      "allowed, but jailed in April",
      "Seems to be a pal with whom.",
      "62 with pal",
      "Walking around Dublin.",
      "I'm sitting and totally noticeless.",
      "and sitting next to a commuter.",
      "next to commuters.",
      "In 1996 a notorious prisoner murdered him.",
      "Prisoners.",
      "The husband was murdered.",
      "Prisoners murdered them."
    ]
  },
  {
    "instance_id": "realsumm-12",
    "summary": "<t> Didier Drogba given the Barclays Spirit of the Game award . </t> <t> The 37-year - old 's foundation has done impressive work in Africa . </t> <t> Some of Chelsea 's stars attended a charity ball which raised \u00a3 400,000 . </t> <t> CLICK HERE for all the latest Chelsea news . </t>",
    "summary_trees": [
      "# ::snt  Didier Drogba given the Barclays Spirit of the Game award . \n(g / give-01\n      :ARG1 (a / award\n            :name (n / name\n                  :op1 \"Barclays\"\n                  :op2 \"Spirit\"\n                  :op3 \"of\"\n                  :op4 \"the\"\n                  :op5 \"Game\"))\n      :ARG2 (p / person\n            :name (n2 / name\n                  :op1 \"Didier\"\n                  :op2 \"Drogba\")))",
      "# ::snt  The 37-year - old 's foundation has done impressive work in Africa . \n(w / work-01\n      :ARG0 (f / foundation\n            :poss (p / person\n                  :age (t / temporal-quantity\n                        :quant 37\n                        :unit (y / year))))\n      :ARG0-of (ii / impress-01)\n      :location (c / continent\n            :name (n / name\n                  :op1 \"Africa\")))",
      "# ::snt  Some of Chelsea 's stars attended a charity ball which raised \u00a3 400,000 . \n(a / attend-01\n      :ARG0 (s / star\n            :ARG1-of (ii / include-91\n                  :ARG2 (s2 / star\n                        :poss (p / person\n                              :name (n / name\n                                    :op1 \"Chelsea\"))))\n            :quant (s3 / some))\n      :ARG1 (b / ball\n            :purpose (c / charity)\n            :ARG0-of (r / raise-02\n                  :ARG1 (m / monetary-quantity\n                        :quant 400000\n                        :unit (p2 / pound)))))",
      "# ::snt  CLICK HERE for all the latest Chelsea news . \n(c / CLICK-01\n      :mode imperative\n      :ARG0 (y / you)\n      :location (h / here)\n      :purpose (n / news\n            :mod (l / last)\n            :mod (a / all)\n            :topic (p / person\n                  :name (n2 / name\n                        :op1 \"Chelsea\"))))"
    ],
    "tree": [
      "(g / give-01\n   :ARG1 (a / award\n            :name (n / name\n                     :op1 \"Barclays\"\n                     :op2 \"Spirit\"\n                     :op3 \"of\"\n                     :op4 \"the\"\n                     :op5 \"Game\")))",
      "(g / give-01\n   :ARG2 (p / person\n            :name (n2 / name\n                      :op1 \"Didier\"\n                      :op2 \"Drogba\")))",
      "(g / give-01\n   :ARG1 (a / award\n            :name (n / name\n                     :op1 \"Barclays\"\n                     :op2 \"Spirit\"\n                     :op3 \"of\"\n                     :op4 \"the\"\n                     :op5 \"Game\"))\n   :ARG2 (p / person\n            :name (n2 / name\n                      :op1 \"Didier\"\n                      :op2 \"Drogba\")))",
      "(a / award\n   :name (n / name\n            :op1 \"Barclays\"\n            :op2 \"Spirit\"\n            :op3 \"of\"\n            :op4 \"the\"\n            :op5 \"Game\"))",
      "(p / person\n   :name (n2 / name\n             :op1 \"Didier\"\n             :op2 \"Drogba\"))",
      "(w / work-01\n   :ARG0 (f / foundation\n            :poss (p / person\n                     :age (t / temporal-quantity\n                             :quant 37))))",
      "(w / work-01\n   :location (c / continent\n                :name (n / name\n                         :op1 \"Africa\")))",
      "(w / work-01\n   :ARG0 (f / foundation\n            :poss (p / person\n                     :age (t / temporal-quantity\n                             :quant 37)))\n   :location (c / continent\n                :name (n / name\n                         :op1 \"Africa\")))",
      "(w / work-01\n   :ARG0 (f / foundation\n            :poss (p / person\n                     :age (t / temporal-quantity\n                             :unit (y / year))))\n   :location (c / continent\n                :name (n / name\n                         :op1 \"Africa\")))",
      "(a / attend-01\n   :ARG0 (s / star\n            :ARG1 (ii / include-91\n                      :ARG2 (s2 / star\n                                :poss (p / person\n                                         :name (n / name\n                                                  :op1 \"Chelsea\"))))))",
      "(a / attend-01\n   :ARG0 (s / star\n            :quant (s3 / some)))",
      "(a / attend-01\n   :ARG1 (b / ball\n            :ARG0 (r / raise-02\n                     :ARG1 (m / monetary-quantity\n                              :quant 400000))))",
      "(a / attend-01\n   :ARG1 (b / ball\n            :ARG0 (r / raise-02\n                     :ARG1 (m / monetary-quantity\n                              :unit (p2 / pound)))))",
      "(c / CLICK-01\n   :purpose (n / news\n               :mod (l / last)))",
      "(c / CLICK-01\n   :purpose (n / news\n               :mod (a / all)))",
      "(c / CLICK-01\n   :purpose (n / news\n               :topic (p / person\n                         :name (n2 / name\n                                   :op1 \"Chelsea\"))))",
      "(c / CLICK-01\n   :ARG0 (y / you)\n   :location (h / here))",
      "(c / CLICK-01\n   :ARG0 (y / you)\n   :purpose (n / news\n               :mod (l / last)))"
    ],
    "smus": [
      "The Barclays Spirit of the Game award was given",
      "given to Didier Drogba",
      "The Barclays Spirit of the Game award was given to Didier Drogba.",
      "The Barclays Spirit of the Game award",
      "Didier Drogba",
      "The foundation of 37.",
      "The 37-year-old's foundation is at work in Africa.",
      "Work in Africa.",
      "37.",
      "Some stars attended.",
      "The ball attended as the 400k raised.",
      "Some of Chelsea's stars attended a charity ball.",
      "raised 400,000.",
      "CLICKS for the latest news.",
      "For all the news, CLICK HERE.",
      "Chelsea",
      "CLICK HERE for Chelsea news",
      "News about Chelsea."
    ]
  },
  {
    "instance_id": "realsumm-13",
    "summary": "<t> Figures from the Catholic Church show more and more becoming nuns . </t> <t> The number of women taking Holy Vows stood at just seven back in 2004 . </t> <t> But that figure had risen to 15 in 2009 and increased further to 45 last year . </t> <t> One father said a ' gap in the market for meaning ' led people toward religion . </t>",
    "summary_trees": [
      "# ::snt  Figures from the Catholic Church show more and more becoming nuns . \n(s / show-01\n      :ARG0 (f / figure\n            :source (o / organization\n                  :name (n / name\n                        :op1 \"Catholic\"\n                        :op2 \"Church\")))\n      :ARG1 (b / become-01\n            :ARG1 (p / person\n                  :quant (n2 / number\n                        :ARG1-of (ii / increase-01)))\n            :ARG2 (n3 / nun)))",
      "# ::snt  The number of women taking Holy Vows stood at just seven back in 2004 . \n(m / multi-sentence\n      :snt1 (s / stand-04\n            :ARG1 (n / number\n                  :quant-of (w / woman\n                        :ARG0-of (t / take-01\n                              :ARG1 (v / vow-01\n                                    :mod (h / holy)))))\n            :ARG2 (n2 / numerical-quantity\n                  :quant 7\n                  :mod (j / just))\n            :time (d / date-entity\n                  :year 2004)))",
      "# ::snt  But that figure had risen to 15 in 2009 and increased further to 45 last year . \n(c / contrast-01\n      :ARG2 (a / and\n            :op1 (r / rise-01\n                  :ARG1 (f / figure\n                        :mod (t / that))\n                  :ARG4 (n / numerical-quantity\n                        :quant 15)\n                  :time (d / date-entity\n                        :year 2009))\n            :op2 (ii / increase-01\n                  :ARG1 f\n                  :ARG4 (n2 / numerical-quantity\n                        :quant 45)\n                  :degree (f2 / further)\n                  :time (y / year\n                        :mod (l / last)))))",
      "# ::snt  One father said a ' gap in the market for meaning ' led people toward religion . \n(s / say-01\n      :ARG0 (p / person\n            :quant 1\n            :ARG0-of (h / have-rel-role-91\n                  :ARG2 (f / father)))\n      :ARG1 (l / lead-01\n            :ARG0 (g / gap\n                  :location (m / market)\n                  :topic (m2 / mean-01))\n            :ARG1 (p2 / person)\n            :ARG4 (r / religion)))"
    ],
    "tree": [
      "(s / show-01\n   :ARG0 (f / figure\n            :source (o / organization\n                       :name (n / name\n                                :op1 \"Catholic\"\n                                :op2 \"Church\"))))",
      "(s / show-01\n   :ARG1 (b / become-01\n            :ARG1 (p / person\n                     :quant (n2 / number\n                                :ARG1 (ii / increase-01)))))",
      "(s / show-01\n   :ARG1 (b / become-01\n            :ARG2 (n3 / nun)))",
      "(s / show-01\n   :ARG0 (f / figure\n            :source (o / organization\n                       :name (n / name\n                                :op1 \"Catholic\"\n                                :op2 \"Church\")))\n   :ARG1 (b / become-01\n            :ARG1 (p / person\n                     :quant (n2 / number\n                                :ARG1 (ii / increase-01)))))",
      "(s / show-01\n   :ARG0 (f / figure\n            :source (o / organization\n                       :name (n / name\n                                :op1 \"Catholic\"\n                                :op2 \"Church\")))\n   :ARG1 (b / become-01\n            :ARG2 (n3 / nun)))",
      "(m / multi-sentence\n   :snt1 (s / stand-04\n            :ARG1 (n / number\n                     :quant (w / woman\n                               :ARG0 (t / take-01\n                                        :ARG1 (v / vow-01\n                                                 :mod (h / holy)))))))",
      "(m / multi-sentence\n   :snt1 (s / stand-04\n            :ARG2 (n2 / numerical-quantity\n                      :quant 7)))",
      "(m / multi-sentence\n   :snt1 (s / stand-04\n            :time (d / date-entity\n                     :year 2004)))",
      "(m / multi-sentence\n   :snt1 (s / stand-04\n            :ARG2 (n2 / numerical-quantity\n                      :mod (j / just))))",
      "(s / stand-04\n   :ARG1 (n / number\n            :quant (w / woman\n                      :ARG0 (t / take-01\n                               :ARG1 (v / vow-01\n                                        :mod (h / holy))))))",
      "(c / contrast-01\n   :ARG2 (r / rise-01\n            :ARG1 (f / figure\n                     :mod (t / that))))",
      "(c / contrast-01\n   :ARG2 (ii / increase-01\n             :ARG1 (f / figure\n                      :mod (t / that))))",
      "(c / contrast-01\n   :ARG2 (r / rise-01\n            :ARG4 (n / numerical-quantity\n                     :quant 15)))",
      "(c / contrast-01\n   :ARG2 (r / rise-01\n            :time (d / date-entity\n                     :year 2009)))",
      "(c / contrast-01\n   :ARG2 (ii / increase-01\n             :ARG4 (n2 / numerical-quantity\n                       :quant 45)))",
      "(s / say-01\n   :ARG0 (p / person\n            :quant 1))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (f / father))))",
      "(s / say-01\n   :ARG1 (l / lead-01\n            :ARG0 (g / gap\n                     :location (m / market))))",
      "(s / say-01\n   :ARG1 (l / lead-01\n            :ARG1 (p2 / person)))",
      "(s / say-01\n   :ARG1 (l / lead-01\n            :ARG4 (r / religion)))"
    ],
    "smus": [
      "The Catholic Church.",
      "More and more people are becoming.",
      "There are an increasing number of people.",
      "Shows how nuns are becoming.",
      "Figures from the Catholic Church show --",
      "Women taking the Holy Vow.",
      "Stands in 2004.",
      "The number of women taking the holy vow stood at.",
      "In 2004, it stood at 7.",
      "Just stood.",
      "And that figure increased.",
      "That figure has risen to 15.",
      "15 rose and 45 increased.",
      "In 2009, the rise was higher and further increased.",
      "But that figure has risen.",
      "One said the gap in the market had led to it.",
      "One said --",
      "One said religion is led.",
      "The father",
      "The meaning gap has led people to religion."
    ]
  },
  {
    "instance_id": "realsumm-14",
    "summary": "<t> Eduardo Vargas put QPR ahead with a spectacular strike from 25 yards after 15 minutes . </t> <t> Charlie Austin doubled the lead with a header 20 minutes later , Bobby Zamora made it three . </t> <t> Victor Anichebe pulled one back for West Brom before Youssouf Mulumbu was sent off and Joey Barton scored . </t>",
    "summary_trees": [
      "# ::snt  Eduardo Vargas put QPR ahead with a spectacular strike from 25 yards after 15 minutes . \n(p / put-03\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Eduardo\"\n                  :op2 \"Vargas\"))\n      :ARG1 (t / team\n            :name (n2 / name\n                  :op1 \"QPR\"))\n      :ARG2 (a / ahead)\n      :manner (s / strike-01\n            :ARG0 p2\n            :ARG2 (d / distance-quantity\n                  :quant 25\n                  :unit (y / yard))\n            :mod (s2 / spectacle))\n      :time (a2 / after\n            :op1 (t2 / temporal-quantity\n                  :quant 15\n                  :unit (m / minute))))",
      "# ::snt  Charlie Austin doubled the lead with a header 20 minutes later , Bobby Zamora made it three . \n(a / and\n      :op1 (d / double-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Charlie\"\n                        :op2 \"Austin\"))\n            :ARG1 (l / lead-01)\n            :instrument (h / header)\n            :time (a2 / after\n                  :quant (t / temporal-quantity\n                        :quant 20\n                        :unit (m / minute))))\n      :op2 (m2 / make-01\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Bobby\"\n                        :op2 \"Zamora\"))\n            :ARG1 (ii / it\n                  :quant 3)))",
      "# ::snt  Victor Anichebe pulled one back for West Brom before Youssouf Mulumbu was sent off and Joey Barton scored . \n(p / pull-back-09\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Victor\"\n                  :op2 \"Anichebe\"))\n      :ARG1 (o / one)\n      :beneficiary (t / team\n            :name (n2 / name\n                  :op1 \"West\"\n                  :op2 \"Brum\"))\n      :time (b / before\n            :op1 (a / and\n                  :op1 (s / send-off-08\n                        :ARG1 (p3 / person\n                              :name (n3 / name\n                                    :op1 \"Youssouf\"\n                                    :op2 \"Mulumbu\")))\n                  :op2 (s2 / score-01\n                        :ARG0 (p4 / person\n                              :name (n4 / name\n                                    :op1 \"Joey\"\n                                    :op2 \"Barton\"))))))"
    ],
    "tree": [
      "(p / put-03\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Eduardo\"\n                      :op2 \"Vargas\")))",
      "(p / put-03\n   :ARG1 (t / team\n            :name (n2 / name\n                      :op1 \"QPR\")))",
      "(p / put-03\n   :manner (s / strike-01\n              :ARG0 (p2 / person :name (n / name :op1 \"Eduardo\" :op2 \"Vargas\"))\n              :ARG2 (d / distance-quantity)\n              :mod (s2 / spectacle)))",
      "(p / put-03\n   :time (a2 / after\n             :op1 (t2 / temporal-quantity\n                      :quant 15)))",
      "(p / put-03\n   :time (a2 / after\n             :op1 (t2 / temporal-quantity\n                      :unit (m / minute))))",
      "(a / and\n   :op1 (d / double-01\n           :ARG0 (p / person\n                    :name (n / name\n                             :op1 \"Charlie\"\n                             :op2 \"Austin\"))))",
      "(a / and\n   :op1 (d / double-01\n           :ARG1 (l / lead-01)))",
      "(a / and\n   :op1 (d / double-01\n           :instrument (h / header)))",
      "(a / and\n   :op1 (d / double-01\n           :time (a2 / after\n                     :quant (t / temporal-quantity\n                               :quant 20))))",
      "(a / and\n   :op1 (d / double-01\n           :time (a2 / after\n                     :quant (t / temporal-quantity\n                               :unit (m / minute)))))",
      "(p / pull-back-09\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Victor\"\n                      :op2 \"Anichebe\")))",
      "(p / pull-back-09\n   :beneficiary (t / team\n                   :name (n2 / name\n                             :op1 \"West\"\n                             :op2 \"Brum\")))",
      "(p / pull-back-09\n   :time (b / before\n            :op1 (s / send-off-08\n                    :ARG1 (p3 / person\n                              :name (n3 / name\n                                        :op1 \"Youssouf\"\n                                        :op2 \"Mulumbu\")))))",
      "(p / pull-back-09\n   :time (b / before\n            :op1 (s2 / score-01\n                     :ARG0 (p4 / person\n                               :name (n4 / name\n                                         :op1 \"Joey\"\n                                         :op2 \"Barton\")))))",
      "(p / pull-back-09\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Victor\"\n                      :op2 \"Anichebe\"))\n   :ARG1 (o / one))"
    ],
    "smus": [
      "The strike was a yard.",
      "After 15 minutes, Eduardo Vargas put his spectacle strike on a distance.",
      "QPR put ahead after 15 minutes with a spectacle strike from Eduardo Vargas.",
      "After a minute Eduardo Vargas put QPR up.",
      "QPR put ahead after 15 minutes.",
      "Bobby Zamora made.",
      "The lead doubled, Bobby Zamora made.",
      "Charlie Austin doubled the lead with a header minutes later.",
      "It made three.",
      "Doubled after 20.",
      "Victor Anichebe pulled back one before Youssouf Mulumbu was sent off.",
      "Victor Anchebe pulled back one for West Brum before Joey Barton scored.",
      "Before Joey Barton scored.",
      "Victor Anichebe pulled back one.",
      "Pullback for West Brom"
    ]
  },
  {
    "instance_id": "realsumm-15",
    "summary": "<t> Detroit Red Wings ' Drew Miller was caught by a skate in the first period against the Ottawa Senators . </t> <t> The massive cut required 50 to 60 stitches to close , but did not damage Miller 's eye . </t> <t> The Red Wings lost 2 - 1 but remained in third place in the Atlantic division . </t>",
    "summary_trees": [
      "# ::snt  Detroit Red Wings ' Drew Miller was caught by a skate in the first period against the Ottawa Senators . \n(c / catch-02\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Drew\"\n                  :op2 \"Miller\")\n            :part-of (t / team\n                  :name (n2 / name\n                        :op1 \"Detroit\"\n                        :op2 \"Red\"\n                        :op3 \"Wings\")))\n      :ARG2 (s / skate)\n      :time (p2 / period\n            :ord (o / ordinal-entity\n                  :value 1)\n            :subevent-of (o2 / oppose-01\n                  :ARG0 t\n                  :ARG1 (t2 / team\n                        :name (n3 / name\n                              :op1 \"Ottawa\"\n                              :op2 \"Senators\")))))",
      "# ::snt  The massive cut required 50 to 60 stitches to close , but did not damage Miller 's eye . \n(c / contrast-01\n      :ARG1 (r / require-01\n            :ARG0 (c2 / close-01\n                  :ARG1 (c3 / cut-01\n                        :mod (m / massive)))\n            :ARG1 (s / stitch\n                  :quant (b / between\n                        :op1 50\n                        :op2 60)))\n      :ARG2 (d / damage-01\n            :polarity -\n            :ARG0 c3\n            :ARG1 (e / eye\n                  :part-of (p / person\n                        :name (n / name\n                              :op1 \"Miller\")))))",
      "# ::snt  The Red Wings lost 2 - 1 but remained in third place in the Atlantic division . \n(h / have-concession-91\n      :ARG1 (r / remain-01\n            :ARG1 (t / team\n                  :name (n / name\n                        :op1 \"Red\"\n                        :op2 \"Wings\"))\n            :ARG3 (p / place\n                  :ord (o / ordinal-entity\n                        :value 3)\n                  :location (d / division\n                        :mod (o2 / ocean\n                              :name (n2 / name\n                                    :op1 \"Atlantic\")))))\n      :ARG2 (l / lose-03\n            :ARG0 t\n            :quant (s / score-entity\n                  :op1 2\n                  :op2 1)))"
    ],
    "tree": [
      "(c / catch-02\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Drew\"\n                     :op2 \"Miller\")))",
      "(c / catch-02\n   :ARG1 (p / person\n            :part (t / team\n                     :name (n2 / name\n                               :op1 \"Detroit\"\n                               :op2 \"Red\"\n                               :op3 \"Wings\"))))",
      "(c / catch-02\n   :time (p2 / period\n             :ord (o / ordinal-entity\n                     :value 1)))",
      "(c / catch-02\n   :time (p2 / period\n             :subevent (o2 / oppose-01\n                           :ARG0 (t / team :name (n2 / name :op1 \"Detroit\" :op2 \"Red\" :op3 \"Wings\")))))",
      "(c / catch-02\n   :time (p2 / period\n             :subevent (o2 / oppose-01\n                           :ARG1 (t2 / team\n                                     :name (n3 / name\n                                               :op1 \"Ottawa\"\n                                               :op2 \"Senators\")))))",
      "(c / contrast-01\n   :ARG1 (r / require-01\n            :ARG0 (c2 / close-01\n                      :ARG1 (c3 / cut-01\n                                :mod (m / massive)))))",
      "(h / have-concession-91\n   :ARG1 (r / remain-01\n            :ARG1 (t / team\n                     :name (n / name\n                              :op1 \"Red\"\n                              :op2 \"Wings\"))))",
      "(h / have-concession-91\n   :ARG1 (r / remain-01\n            :ARG3 (p / place\n                     :ord (o / ordinal-entity\n                             :value 3))))",
      "(h / have-concession-91\n   :ARG2 (l / lose-03\n            :ARG0 (t / team\n                     :name (n / name\n                              :op1 \"Red\"\n                              :op2 \"Wings\"))))"
    ],
    "smus": [
      "Drew Miller was caught in the period against the Detroit Red Wings.",
      "Detroit Red Wings",
      "Catch the skate in the period against the Detroit Red Wings.",
      "Drew Miller was caught on a skate.",
      "Drew Miller",
      "But required between 60 stitches.",
      "The Red Wings remained in third place.",
      "But the place remained in the Atlantic division.",
      "The third place remained."
    ]
  },
  {
    "instance_id": "realsumm-16",
    "summary": "<t> Jurgen Klopp will leave Borussia Dortmund at the end of the season . </t> <t> German boss has enjoyed success with club during seven - year stint . </t> <t> Klopp has been linked with Manchester City , Manchester United and Arsenal . </t> <t> Per Mertesacker says Klopp would like to see Klopp in the Premier League . </t>",
    "summary_trees": [
      "# ::snt  Jurgen Klopp will leave Borussia Dortmund at the end of the season . \n(l / leave-15\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jurgen\"\n                  :op2 \"Klopp\"))\n      :ARG1 (t / team\n            :name (n2 / name\n                  :op1 \"Borussia\"\n                  :op2 \"Dortmund\"))\n      :time (e / end-01\n            :ARG1 (s / season)))",
      "# ::snt  German boss has enjoyed success with club during seven - year stint . \n(e / enjoy-01\n      :ARG0 (b / boss\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"Germany\")))\n      :ARG1 (s / succeed-01\n            :ARG0 b\n            :ARG1 (c2 / club))\n      :duration (s2 / stint\n            :duration (t / temporal-quantity\n                  :quant 7\n                  :unit (y / year))))",
      "# ::snt  Klopp has been linked with Manchester City , Manchester United and Arsenal . \n(l / link-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Klopp\"))\n      :ARG2 (a / and\n            :op1 (t / team\n                  :name (n2 / name\n                        :op1 \"Manchester\"\n                        :op2 \"City\"))\n            :op2 (t2 / team\n                  :name (n3 / name\n                        :op1 \"Manchester\"\n                        :op2 \"United\"))\n            :op3 (t3 / team\n                  :name (n4 / name\n                        :op1 \"Arsenal\"))))",
      "# ::snt  Per Mertesacker says Klopp would like to see Klopp in the Premier League . \n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Per\"\n                  :op2 \"Mertesacker\"))\n      :ARG1 (l / like-02\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Klopp\"))\n            :ARG1 (s2 / see-01\n                  :ARG0 p2\n                  :ARG1 p2\n                  :location (l2 / league\n                        :name (n3 / name\n                              :op1 \"Premier\"\n                              :op2 \"League\")))))"
    ],
    "tree": [
      "(l / leave-15\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jurgen\"\n                     :op2 \"Klopp\")))",
      "(l / leave-15\n   :ARG1 (t / team\n            :name (n2 / name\n                      :op1 \"Borussia\"\n                      :op2 \"Dortmund\")))",
      "(l / leave-15\n   :time (e / end-01\n            :ARG1 (s / season)))",
      "(l / leave-15\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jurgen\"\n                     :op2 \"Klopp\"))\n   :ARG1 (t / team\n            :name (n2 / name\n                      :op1 \"Borussia\"\n                      :op2 \"Dortmund\")))",
      "(l / leave-15\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jurgen\"\n                     :op2 \"Klopp\"))\n   :time (e / end-01\n            :ARG1 (s / season)))",
      "(e / enjoy-01\n   :ARG0 (b / boss\n            :mod (c / country\n                    :name (n / name\n                             :op1 \"Germany\"))))",
      "(e / enjoy-01\n   :ARG1 (s / succeed-01\n            :ARG0 (b / boss)))",
      "(l / link-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Klopp\")))",
      "(l / link-01\n   :ARG2 (t / team\n            :name (n2 / name\n                      :op1 \"Manchester\"\n                      :op2 \"City\")))",
      "(l / link-01\n   :ARG2 (t2 / team\n             :name (n3 / name\n                       :op1 \"Manchester\"\n                       :op2 \"United\")))",
      "(l / link-01\n   :ARG2 (t3 / team\n             :name (n4 / name\n                       :op1 \"Arsenal\")))",
      "(l / link-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Klopp\"))\n   :ARG2 (t / team\n            :name (n2 / name\n                      :op1 \"Manchester\"\n                      :op2 \"City\")))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Per\"\n                     :op2 \"Mertesacker\")))",
      "(s / say-01\n   :ARG1 (l / like-02\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Klopp\"))))",
      "(s / say-01\n   :ARG1 (l / like-02\n            :ARG1 (s2 / see-01\n                      :ARG0 (p2 / person :name (n2 / name :op1 \"Klopp\")))))",
      "(s / say-01\n   :ARG1 (l / like-02\n            :ARG1 (s2 / see-01\n                      :ARG1 (p2 / person :name (n2 / name :op1 \"Klopp\")))))",
      "(s / say-01\n   :ARG1 (l / like-02\n            :ARG1 (s2 / see-01\n                      :location (l2 / league\n                                    :name (n3 / name\n                                              :op1 \"Premier\"\n                                              :op2 \"League\")))))"
    ],
    "smus": [
      "Kurgen Klopp will leave.",
      "Jurgen Klopp will leave Borussia Dortmund at the end of the season.",
      "-Jurgen Klopp",
      "Leave Borussia Dortmund",
      "Leave at the end of the season.",
      "The German boss has enjoyed.",
      "The German boss has enjoyed success in his seven stints.",
      "Manchester City and Arsenal",
      "and Manchester City",
      "Klopp is linked with Manchester United.",
      "Manchester City are linked.",
      "Klopp",
      "Per Mertesacker.",
      "Klopp would like to see in the Prem.",
      "Per Mertesacker says he'd like to see Klopp.",
      "See in the Premier League.",
      "Would like to see Klopp."
    ]
  },
  {
    "instance_id": "realsumm-17",
    "summary": "<t> AppleInsider spotted nine listings in the past month relating to batteries . </t> <t> These include one for an iOS battery life software engineer and another for iOS software power systems engineer . </t> <t> Apple significantly improved the battery life on Apple iPhone 6 and 6 Plus . </t> <t> But Apple has been criticised for phones and tablets that only do n't last a day . </t>",
    "summary_trees": [
      "# ::snt  AppleInsider spotted nine listings in the past month relating to batteries . \n(s / spot-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"AppleInsider\"))\n      :ARG1 (l / listing\n            :quant 9\n            :ARG1-of (r / relate-01\n                  :ARG2 (b / battery)))\n      :time (m / month\n            :mod (p2 / past)))",
      "# ::snt  These include one for an iOS battery life software engineer and another for iOS software power systems engineer . \n(ii / include-01\n      :ARG1 (a / and\n            :op1 (o / one\n                  :purpose (p / person\n                        :ARG0-of (e / engineer-01\n                              :ARG1 (s / software\n                                    :purpose (l / life\n                                          :mod (b / battery))\n                                    :mod (p2 / product\n                                          :name (n / name\n                                                :op1 \"iOS\"))))))\n            :op2 (a2 / another\n                  :purpose (p3 / person\n                        :ARG0-of (e2 / engineer-01\n                              :ARG1 (s2 / system\n                                    :mod (p4 / power)\n                                    :mod (s3 / software))))))\n      :ARG2 (t / this))",
      "# ::snt  Apple significantly improved the battery life on Apple iPhone 6 and 6 Plus . \n(ii / improve-01\n      :ARG0 (c / company\n            :name (n / name\n                  :op1 \"Apple\"))\n      :ARG1 (l / life\n            :duration-of (b / battery)\n            :poss (a / and\n                  :op1 (p / product\n                        :name (n2 / name\n                              :op1 \"iPhone\"\n                              :op2 6))\n                  :op2 (p2 / product\n                        :name (n3 / name\n                              :op1 \"iPhone\"\n                              :op2 6\n                              :op3 \"Plus\"))\n                  :mod c))\n      :ARG1-of (s / significant-02))",
      "# ::snt  But Apple has been criticised for phones and tablets that only do n't last a day . \n(c / contrast-01\n      :ARG2 (c2 / criticize-01\n            :ARG1 (c3 / company\n                  :name (n / name\n                        :op1 \"Apple\"))\n            :ARG2 (a / and\n                  :op1 (p / phone)\n                  :op2 (t / tablet)\n                  :ARG1-of (l / last-04\n                        :polarity -\n                        :ARG2 (t2 / temporal-quantity\n                              :quant 1\n                              :unit (d / day))\n                        :mod (o / only)))))"
    ],
    "tree": [
      "(s / spot-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"AppleInsider\")))",
      "(s / spot-01\n   :ARG1 (l / listing\n            :quant 9))",
      "(s / spot-01\n   :ARG1 (l / listing\n            :ARG1 (r / relate-01\n                     :ARG2 (b / battery))))",
      "(s / spot-01\n   :time (m / month\n            :mod (p2 / past)))",
      "(s / spot-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"AppleInsider\"))\n   :ARG1 (l / listing\n            :quant 9))",
      "(ii / include-01\n    :ARG1 (o / one\n             :purpose (p / person\n                         :ARG0 (e / engineer-01\n                                  :ARG1 (s / software\n                                           :purpose (l / life\n                                                       :mod (b / battery)))))))",
      "(ii / include-01\n    :ARG1 (a2 / another\n              :purpose (p3 / person\n                           :ARG0 (e2 / engineer-01\n                                     :ARG1 (s2 / system\n                                               :mod (p4 / power))))))",
      "(ii / include-01\n    :ARG1 (o / one\n             :purpose (p / person\n                         :ARG0 (e / engineer-01\n                                  :ARG1 (s / software\n                                           :mod (p2 / product\n                                                    :name (n / name\n                                                             :op1 \"iOS\")))))))",
      "(ii / include-01\n    :ARG1 (a2 / another\n              :purpose (p3 / person\n                           :ARG0 (e2 / engineer-01\n                                     :ARG1 (s2 / system\n                                               :mod (s3 / software))))))",
      "(ii / improve-01\n    :ARG0 (c / company\n             :name (n / name\n                      :op1 \"Apple\")))",
      "(ii / improve-01\n    :ARG1 (l / life\n             :duration (b / battery)))",
      "(ii / improve-01\n    :ARG1 (l / life\n             :poss (p / product\n                      :name (n2 / name\n                                :op1 \"iPhone\"\n                                :op2 6))))",
      "(ii / improve-01\n    :ARG1 (l / life\n             :poss (p2 / product\n                       :name (n3 / name\n                                 :op1 \"iPhone\"\n                                 :op2 6\n                                 :op3 \"Plus\"))))",
      "(ii / improve-01\n    :ARG1 (l / life\n             :poss (c / company :name (n / name :op1 \"Apple\"))))",
      "(c / contrast-01\n   :ARG2 (c2 / criticize-01\n             :ARG2 (p / phone)))",
      "(c / contrast-01\n   :ARG2 (c2 / criticize-01\n             :ARG2 (l / last-04\n                      :polarity -)))"
    ],
    "smus": [
      "AppleInsider spotted listings related to batteries in the past month.",
      "AppleInsider spotted 9 listings.",
      "Spotted in the past month.",
      "AppleInsider",
      "AppleInsider spotted.",
      "Power systems engineering",
      "One for the battery life engineer.",
      "battery life software",
      "This includes another for power systems engineers.",
      "iPhone 6 Plus",
      "Apple improved.",
      "The life of the iPhone 6 Plus improved.",
      "Battery life of the iPhone 6 Plus",
      "Apple",
      "Criticised for 'to last one.",
      "Apple has been criticized for the phones."
    ]
  },
  {
    "instance_id": "realsumm-18",
    "summary": "<t> Tournament performances have restored Andy Murray to World No 3 . </t> <t> But it 's wedding to Kim Sears that takes Murray 's No 1 spot this week . </t> <t> Murray is due to marry fianc\u00e9e Sears in Dunblane this coming Saturday . </t> <t> There are believed to be well over 100 names on down - to - earth guest list . </t>",
    "summary_trees": [
      "# ::snt  Tournament performances have restored Andy Murray to World No 3 . \n(r / restore-01\n      :ARG0 (p / perform-02\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Andy\"\n                        :op2 \"Murray\"))\n            :mod (t / tournament))\n      :ARG1 (h / have-org-role-91\n            :ARG0 p2\n            :ARG1 (w / world)\n            :ARG2 (n2 / no\n                  :ord (o / ordinal-entity\n                        :value 3))))",
      "# ::snt  But it 's wedding to Kim Sears that takes Murray 's No 1 spot this week . \n(c / contrast-01\n      :ARG2 (t / take-01\n            :ARG0 (w / wed-01\n                  :ARG1 (p / person\n                        :name (n / name\n                              :op1 \"Murray\"))\n                  :ARG2 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Kim\"\n                              :op2 \"Sears\")))\n            :ARG1 (s / spot\n                  :ord (o / ordinal-entity\n                        :value 1)\n                  :poss p)\n            :time (w2 / week\n                  :mod (t2 / this))))",
      "# ::snt  Murray is due to marry fianc\u00e9e Sears in Dunblane this coming Saturday . \n(d / due-03\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Murray\"))\n      :ARG2 (m / marry-01\n            :ARG1 p\n            :ARG2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Sears\")\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 p\n                        :ARG2 (f / fiancee)))\n            :location (c / city\n                  :name (n3 / name\n                        :op1 \"Dunblane\")))\n      :time (d2 / date-entity\n            :weekday (s / saturday)\n            :mod (t / this)\n            :ARG1-of (c2 / come-01)))",
      "# ::snt  There are believed to be well over 100 names on down - to - earth guest list . \n(b / believe-01\n      :ARG1 (n / name\n            :quant (o / over\n                  :op1 100\n                  :quant (w / well))\n            :location (l / list-01\n                  :ARG1 (g / guest)\n                  :mod (d / down-to-earth))))"
    ],
    "tree": [
      "(r / restore-01\n   :ARG0 (p / perform-02\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Andy\"\n                               :op2 \"Murray\"))))",
      "(r / restore-01\n   :ARG0 (p / perform-02\n            :mod (t / tournament)))",
      "(r / restore-01\n   :ARG1 (h / have-org-role-91\n            :ARG1 (w / world)))",
      "(c / contrast-01\n   :ARG2 (t / take-01\n            :ARG0 (w / wed-01\n                     :ARG1 (p / person\n                              :name (n / name\n                                       :op1 \"Murray\")))))",
      "(c / contrast-01\n   :ARG2 (t / take-01\n            :ARG1 (s / spot\n                     :ord (o / ordinal-entity\n                             :value 1))))",
      "(c / contrast-01\n   :ARG2 (t / take-01\n            :time (w2 / week\n                      :mod (t2 / this))))",
      "(c / contrast-01\n   :ARG2 (t / take-01\n            :ARG0 (w / wed-01\n                     :ARG2 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Kim\"\n                                         :op2 \"Sears\")))))",
      "(d / due-03\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Murray\")))",
      "(d / due-03\n   :ARG2 (m / marry-01\n            :ARG1 (p / person :name (n / name :op1 \"Murray\"))))",
      "(d / due-03\n   :ARG2 (m / marry-01\n            :ARG2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Sears\"))))",
      "(d / due-03\n   :ARG2 (m / marry-01\n            :location (c / city\n                         :name (n3 / name\n                                   :op1 \"Dunblane\"))))",
      "(d / due-03\n   :ARG2 (m / marry-01\n            :ARG2 (p2 / person\n                      :ARG0 (h / have-rel-role-91\n                               :ARG1 (p / person :name (n / name :op1 \"Murray\"))))))",
      "(b / believe-01\n   :ARG1 (n / name\n            :location (l / list-01\n                         :ARG1 (g / guest))))",
      "(b / believe-01\n   :ARG1 (n / name\n            :quant (o / over\n                      :quant (w / well))))",
      "(b / believe-01\n   :ARG1 (n / name\n            :location (l / list-01\n                         :mod (d / down-to-earth))))",
      "(n / name\n   :quant (o / over\n             :op1 100))"
    ],
    "smus": [
      "Tournament performances have restored.",
      "Andy Murray's performances have restored his position.",
      "Andy Murray's Tournament Performances",
      "Murray's wedding takes his spot.",
      "Kim Sears' wedding takes the first spot this week.",
      "Kim Sears",
      "But it takes the first spot.",
      "Murray is due to marry in Dunblane in the coming months.",
      "Marry in Dunblane.",
      "Marry Sears.",
      "Murray is due Saturday.",
      "Murray is due to marry Saturday.",
      "Over 100 names on the guest list.",
      "Over 100 names on the down-to-earth list.",
      "Over 100 names are believed.",
      "Over 100 names."
    ]
  },
  {
    "instance_id": "realsumm-19",
    "summary": "<t> Paula Dunican paid \u00a3 25 for the baby blue coat at Dunican local branch of Asda . </t> <t> When Dunican took Asda home Dunican noticed a ' seeping ' stain on the back of coat . </t> <t> Dunican then discovered the reptile 's crushed body on the garment 's lining . </t> <t> The supermarket has apologised and offered Dunican a \u00a3 40 voucher and refund . </t>",
    "summary_trees": [
      "# ::snt  Paula Dunican paid \u00a3 25 for the baby blue coat at Dunican local branch of Asda . \n(p / pay-01\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Paula\"\n                  :op2 \"Dunican\"))\n      :ARG1 (m / monetary-quantity\n            :quant 25\n            :unit (p3 / pound))\n      :ARG3 (c / coat\n            :mod (b / blue)\n            :mod (b2 / baby))\n      :location (b3 / branch\n            :mod (l / local)\n            :part-of (c2 / company\n                  :name (n2 / name\n                        :op1 \"Asda\"))\n            :location (c3 / city\n                  :name (n3 / name\n                        :op1 \"Dunican\"))))",
      "# ::snt  When Dunican took Asda home Dunican noticed a ' seeping ' stain on the back of coat . \n(n / notice-01\n      :ARG0 (p / person\n            :name (n2 / name\n                  :op1 \"Dunican\"))\n      :ARG1 (s / stain-01\n            :ARG1-of (s2 / seep-01)\n            :location (b / back\n                  :part-of (c / coat)))\n      :time (t / take-01\n            :ARG0 p\n            :ARG1 (c2 / company\n                  :name (n3 / name\n                        :op1 \"Asda\"))\n            :ARG3 (h / home)))",
      "# ::snt  Dunican then discovered the reptile 's crushed body on the garment 's lining . \n(d / discover-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Dunican\"))\n      :ARG1 (b / body\n            :part-of (r / reptile)\n            :ARG1-of (c / crush-01))\n      :location (l / lining\n            :part-of (g / garment))\n      :time (t / then))",
      "# ::snt  The supermarket has apologised and offered Dunican a \u00a3 40 voucher and refund . \n(a / and\n      :op1 (a2 / apologize-01\n            :ARG0 (s / supermarket))\n      :op2 (o / offer-01\n            :ARG0 s\n            :ARG1 (a3 / and\n                  :op1 (v / voucher\n                        :mod (m / monetary-quantity\n                              :quant 40\n                              :unit (p / pound)))\n                  :op2 (r / refund-01\n                        :ARG0 s\n                        :ARG2 (p2 / person\n                              :name (n / name\n                                    :op1 \"Dunican\"))))\n            :ARG3 p2))"
    ],
    "tree": [
      "(p / pay-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Paula\"\n                      :op2 \"Dunican\")))",
      "(p / pay-01\n   :ARG1 (m / monetary-quantity\n            :quant 25))",
      "(p / pay-01\n   :ARG1 (m / monetary-quantity\n            :unit (p3 / pound)))",
      "(p / pay-01\n   :ARG3 (c / coat\n            :mod (b / blue)))",
      "(p / pay-01\n   :ARG3 (c / coat\n            :mod (b2 / baby)))",
      "(n / notice-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Dunican\")))",
      "(n / notice-01\n   :ARG1 (s / stain-01\n            :ARG1 (s2 / seep-01)))",
      "(n / notice-01\n   :ARG1 (s / stain-01\n            :location (b / back\n                         :part (c / coat))))",
      "(n / notice-01\n   :time (t / take-01\n            :ARG0 (p / person :name (n2 / name :op1 \"Dunican\"))))",
      "(n / notice-01\n   :time (t / take-01\n            :ARG1 (c2 / company\n                      :name (n3 / name\n                                :op1 \"Asda\"))))",
      "(d / discover-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dunican\")))",
      "(d / discover-01\n   :ARG1 (b / body\n            :part (r / reptile)))",
      "(d / discover-01\n   :ARG1 (b / body\n            :ARG1 (c / crush-01)))",
      "(d / discover-01\n   :location (l / lining\n                :part (g / garment)))",
      "(d / discover-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dunican\"))\n   :ARG1 (b / body\n            :part (r / reptile)))",
      "(a / and\n   :op1 (a2 / apologize-01\n            :ARG0 (s / supermarket)))",
      "(a / and\n   :op2 (o / offer-01\n           :ARG0 (s / supermarket)))",
      "(a / and\n   :op2 (o / offer-01\n           :ARG1 (v / voucher\n                    :mod (m / monetary-quantity\n                            :quant 40))))",
      "(a / and\n   :op2 (o / offer-01\n           :ARG3 (p2 / person\n                     :name (n / name\n                              :op1 \"Dunican\"))))"
    ],
    "smus": [
      "25 was paid at the local branch.",
      "Paula dunican paid 25 for the baby coat at the local branch.",
      "The baby coat was paid in pounds.",
      "The baby coat was paid at the local branch.",
      "A local branch in Dunican.",
      "Dunican",
      "Dunican noticed a stain on the back of the coat when Asda took it.",
      "Seeping stain on coat back",
      "Noticed when Dunican took his.",
      "When taken home, noticed a stain of seeping.",
      "The reptile's body was discovered.",
      "Dunican discovered.",
      "Then Dunican discovered the crushed body in the garment lining.",
      "Then the body was discovered, crushed.",
      "Then discovered in the garment lining.",
      "And offered Dunican a refund.",
      "The supermarket apologized and offered a refund.",
      "and the supermarket will refund.",
      "and a 40 voucher"
    ]
  },
  {
    "instance_id": "realsumm-20",
    "summary": "<t> Ronnie Carroll placed fourth in the Eurovision contest in 1962 and 1963 . </t> <t> Carroll died in London two days ago , aged 80 , following a battle with cancer . </t> <t> Mr Carroll was running in the General Election for Hampstead and Kilburn . </t> <t> Carroll remains on the paper and Carroll will be elected if Carroll gets enough votes . </t>",
    "summary_trees": [
      "# ::snt  Ronnie Carroll placed fourth in the Eurovision contest in 1962 and 1963 . \n(p / place-01\n      :ARG1 (p2 / person\n            :name (n / name\n                  :op1 \"Ronnie\"\n                  :op2 \"Carroll\"))\n      :ARG2 (f / fourth)\n      :subevent-of (c / contest-02\n            :ARG3 (e / event\n                  :name (n2 / name\n                        :op1 \"Eurovision\")))\n      :time (a / and\n            :op1 (d / date-entity\n                  :year 1962)\n            :op2 (d2 / date-entity\n                  :year 1963)))",
      "# ::snt  Carroll died in London two days ago , aged 80 , following a battle with cancer . \n(d / die-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Carroll\")\n            :age (t / temporal-quantity\n                  :quant 80\n                  :unit (y / year)))\n      :location (c / city\n            :name (n2 / name\n                  :op1 \"London\"))\n      :time (b / before\n            :op1 (n3 / now)\n            :quant (t2 / temporal-quantity\n                  :quant 2\n                  :unit (d2 / day)))\n      :ARG1-of (f / follow-01\n            :ARG2 (b2 / battle-01\n                  :ARG0 p\n                  :ARG1 (d3 / disease\n                        :name (n4 / name\n                              :op1 \"cancer\")))))",
      "# ::snt  Mr Carroll was running in the General Election for Hampstead and Kilburn . \n(r / run-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Mr\"\n                  :op2 \"Carroll\"))\n      :ARG1 (a / and\n            :op1 (c / city-district\n                  :name (n2 / name\n                        :op1 \"Hampstead\"))\n            :op2 (c2 / city-district\n                  :name (n3 / name\n                        :op1 \"Kilburn\")))\n      :subevent-of (e / elect-01\n            :ARG1-of (g / general-02)))",
      "# ::snt  Carroll remains on the paper and Carroll will be elected if Carroll gets enough votes . \n(a / and\n      :op1 (r / remain-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Carroll\"))\n            :location (p2 / paper))\n      :op2 (e / elect-01\n            :ARG1 p\n            :condition (g / get-01\n                  :ARG0 p\n                  :ARG1 (v / vote-01\n                        :ARG1 p\n                        :ARG1-of (h / have-quant-91\n                              :ARG3 (e2 / enough))))))"
    ],
    "tree": [
      "(p / place-01\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Ronnie\"\n                      :op2 \"Carroll\")))",
      "(p / place-01\n   :subevent (c / contest-02\n                :ARG3 (e / event\n                         :name (n2 / name\n                                   :op1 \"Eurovision\"))))",
      "(p / place-01\n   :time (d / date-entity\n            :year 1962))",
      "(p / place-01\n   :time (d2 / date-entity\n             :year 1963))",
      "(p / place-01\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Ronnie\"\n                      :op2 \"Carroll\"))\n   :ARG2 (f / fourth))",
      "(r / run-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mr\"\n                     :op2 \"Carroll\")))",
      "(r / run-02\n   :ARG1 (c / city-district\n            :name (n2 / name\n                      :op1 \"Hampstead\")))",
      "(r / run-02\n   :subevent (e / elect-01\n                :ARG1 (g / general-02)))",
      "(r / run-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mr\"\n                     :op2 \"Carroll\"))\n   :ARG1 (c / city-district\n            :name (n2 / name\n                      :op1 \"Hampstead\")))",
      "(a / and\n   :op1 (r / remain-01\n           :ARG1 (p / person\n                    :name (n / name\n                             :op1 \"Carroll\"))))",
      "(a / and\n   :op1 (r / remain-01\n           :location (p2 / paper)))",
      "(a / and\n   :op2 (e / elect-01\n           :ARG1 (p / person\n                    :name (n / name\n                             :op1 \"Carroll\"))))",
      "(a / and\n   :op2 (e / elect-01\n           :condition (g / get-01\n                         :ARG0 (p / person :name (n / name :op1 \"Carroll\")))))",
      "(a / and\n   :op2 (e / elect-01\n           :condition (g / get-01\n                         :ARG1 (v / vote-01\n                                  :ARG1 (p / person :name (n / name :op1 \"Carroll\"))))))"
    ],
    "smus": [
      "and 1963.",
      "In the Eurovision contest in 1962, Ronnie Carroll placed fourth.",
      "Ronnie Carroll was placed in 1962.",
      "The Eurovision contest",
      "In 1963, Ronnie Carroll placed fourth.",
      "and Kilburn.",
      "Kilburn is running.",
      "Mr Carroll is running in the General Election.",
      "Mr Carroll",
      "If Carroll gets the votes, he will be elected.",
      "Carroll remains.",
      "And remains in the paper.",
      "If enough votes gets elected, it will be elected.",
      "Gets votes for Carroll."
    ]
  },
  {
    "instance_id": "realsumm-21",
    "summary": "<t> McHenry , 28 , berated single mother Gina Michelle for towing Michelle car . </t> <t> Michelle insulted Michelle looks and social status in footage that went viral . </t> <t> ESPN suspended the sports reporter for a week amid investigation . </t> <t> But despite thousands of calls for Michelle to be fired , Michelle returns this week . </t>",
    "summary_trees": [
      "# ::snt  McHenry , 28 , berated single mother Gina Michelle for towing Michelle car . \n(b / berate-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"McHenry\")\n            :age (t / temporal-quantity\n                  :quant 28\n                  :unit (y / year)))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Gina\"\n                  :op2 \"Michelle\")\n            :ARG0-of (h / have-rel-role-91\n                  :ARG2 (m / mother\n                        :ARG1-of (s / single-03))))\n      :ARG2 (t2 / tow-01\n            :ARG0 p\n            :ARG1 (c / car\n                  :poss p2)))",
      "# ::snt  Michelle insulted Michelle looks and social status in footage that went viral . \n(ii / insult-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Michelle\"))\n      :ARG1 (a / and\n            :op1 (l / look\n                  :mod p)\n            :op2 (s / status\n                  :mod (s2 / social)\n                  :poss p))\n      :medium (f / footage\n            :ARG1-of (g / go-08\n                  :ARG2 (v / viral))))",
      "# ::snt  ESPN suspended the sports reporter for a week amid investigation . \n(s / suspend-01\n      :ARG0 (p / publication\n            :name (n / name\n                  :op1 \"ESPN\"))\n      :ARG1 (p2 / person\n            :ARG0-of (r / report-01\n                  :ARG1 (s2 / sport)))\n      :duration (t / temporal-quantity\n            :quant 1\n            :unit (w / week))\n      :ARG1-of (c / cause-01\n            :ARG0 (ii / investigate-01)))",
      "# ::snt  But despite thousands of calls for Michelle to be fired , Michelle returns this week . \n(c / contrast-01\n      :ARG2 (r / return-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Michelle\"))\n            :time (w / week\n                  :mod (t / this))\n            :concession (c2 / call-03\n                  :ARG1 (f / fire-02\n                        :ARG1 p)\n                  :quant (m / multiple\n                        :op1 1000))))"
    ],
    "tree": [
      "(b / berate-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"McHenry\")))",
      "(b / berate-01\n   :ARG0 (p / person\n            :age (t / temporal-quantity\n                    :unit (y / year))))",
      "(b / berate-01\n   :ARG1 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG2 (m / mother\n                               :ARG1 (s / single-03)))))",
      "(ii / insult-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Michelle\")))",
      "(ii / insult-01\n    :ARG1 (l / look\n             :mod (p / person :name (n / name :op1 \"Michelle\"))))",
      "(ii / insult-01\n    :ARG1 (s / status\n             :mod (s2 / social)))",
      "(ii / insult-01\n    :ARG1 (s / status\n             :poss (p / person :name (n / name :op1 \"Michelle\"))))",
      "(ii / insult-01\n    :medium (f / footage\n               :ARG1 (g / go-08\n                        :ARG2 (v / viral))))",
      "(s / suspend-01\n   :ARG0 (p / publication\n            :name (n / name\n                     :op1 \"ESPN\")))",
      "(s / suspend-01\n   :ARG1 (p2 / person\n             :ARG0 (r / report-01\n                      :ARG1 (s2 / sport))))",
      "(s / suspend-01\n   :duration (t / temporal-quantity\n                :quant 1))",
      "(s / suspend-01\n   :duration (t / temporal-quantity\n                :unit (w / week)))",
      "(s / suspend-01\n   :ARG0 (p / publication\n            :name (n / name\n                     :op1 \"ESPN\"))\n   :ARG1 (p2 / person\n             :ARG0 (r / report-01\n                      :ARG1 (s2 / sport))))",
      "(c / contrast-01\n   :ARG2 (r / return-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Michelle\"))))",
      "(c / contrast-01\n   :ARG2 (r / return-01\n            :concession (c2 / call-03\n                            :ARG1 (f / fire-02\n                                     :ARG1 (p / person :name (n / name :op1 \"Michelle\"))))))",
      "(c / contrast-01\n   :ARG2 (r / return-01\n            :concession (c2 / call-03\n                            :quant (m / multiple\n                                      :op1 1000))))",
      "(r / return-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Michelle\")))"
    ],
    "smus": [
      "The 28-year-old berated Gina Michelle for towing.",
      "Single mother.",
      "The 28-year-old berated for towing.",
      "Michelle insulted social status.",
      "In the footage that went viral, Michelle insulted social status.",
      "Michelle looks and her status.",
      "Michelle insulted her looks.",
      "Michelle",
      "Sports reporting suspended.",
      "The suspension was for a week.",
      "Sports reporting suspended for a week.",
      "Sports reporter",
      "ESPN suspended a sports reporter for one week.",
      "Thousands of calls.",
      "Returns this week.",
      "Michelle returns despite thousands of calls.",
      "Returns despite thousands of calls."
    ]
  },
  {
    "instance_id": "realsumm-22",
    "summary": "<t> Chloe Owens , 27 , from Swanley , designed new app Bump 2 Breast . </t> <t> Came up with idea when pregnant with daughter , Lola , now three months . </t> <t> Says Lola and husband David felt like ' rabbits in headlights ' at first . </t> <t> Also struggled to remember which boob to use when breastfeeding . </t>",
    "summary_trees": [
      "# ::snt  Chloe Owens , 27 , from Swanley , designed new app Bump 2 Breast . \n(d / design-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Chloe\"\n                  :op2 \"Owens\")\n            :age (t / temporal-quantity\n                  :quant 27\n                  :unit (y / year))\n            :source (c / city\n                  :name (n2 / name\n                        :op1 \"Swanley\")))\n      :ARG1 (a / app\n            :name (n3 / name\n                  :op1 \"Bump\"\n                  :op2 2\n                  :op3 \"Breast\")\n            :ARG1-of (n4 / new-01)))",
      "# ::snt  Came up with idea when pregnant with daughter , Lola , now three months . \n(c / come-up-11\n      :ARG1 (ii / idea)\n      :time (ii2 / impregnate-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Lola\")\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG2 (d / daughter))\n                  :age (t / temporal-quantity\n                        :quant 3\n                        :unit (m / month)\n                        :time (n2 / now)))))",
      "# ::snt  Says Lola and husband David felt like ' rabbits in headlights ' at first . \n(s / say-01\n      :ARG1 (f / feel-01\n            :ARG0 (a / and\n                  :op1 (p / person\n                        :name (n / name\n                              :op1 \"Lola\"))\n                  :op2 (p2 / person\n                        :name (n2 / name\n                              :op1 \"David\")\n                        :ARG0-of (h / have-rel-role-91\n                              :ARG1 p\n                              :ARG2 (h2 / husband))))\n            :ARG1 (r / resemble-01\n                  :ARG1 a\n                  :ARG2 (b / bunny\n                        :location (h3 / head\n                              :part-of (h4 / headlights))))\n            :time (a2 / at-first)))",
      "# ::snt  Also struggled to remember which boob to use when breastfeeding . \n(s / struggle-02\n      :ARG0 (ii / i)\n      :ARG1 (r / remember-01\n            :ARG0 ii\n            :ARG1 (b / boob\n                  :ARG1-of (u / use-01\n                        :ARG0 ii\n                        :time (b2 / breastfeed-01\n                              :ARG0 ii))))\n      :mod (a / also))"
    ],
    "tree": [
      "(d / design-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Chloe\"\n                     :op2 \"Owens\")))",
      "(d / design-01\n   :ARG0 (p / person\n            :age (t / temporal-quantity\n                    :quant 27)))",
      "(c / come-up-11\n   :time (ii2 / impregnate-01\n              :ARG1 (p / person\n                       :name (n / name\n                                :op1 \"Lola\"))))",
      "(c / come-up-11\n   :time (ii2 / impregnate-01\n              :ARG1 (p / person\n                       :ARG0 (h / have-rel-role-91\n                                :ARG2 (d / daughter)))))",
      "(c / come-up-11\n   :time (ii2 / impregnate-01\n              :ARG1 (p / person\n                       :age (t / temporal-quantity\n                               :quant 3))))",
      "(c / come-up-11\n   :time (ii2 / impregnate-01\n              :ARG1 (p / person\n                       :age (t / temporal-quantity\n                               :time (n2 / now)))))",
      "(s / say-01\n   :ARG1 (f / feel-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Lola\"))))",
      "(s / say-01\n   :ARG1 (f / feel-01\n            :ARG1 (r / resemble-01\n                     :ARG1 (a / and))))",
      "(s / say-01\n   :ARG1 (f / feel-01\n            :time (a2 / at-first)))",
      "(s / say-01\n   :ARG1 (f / feel-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"David\"))))",
      "(s / say-01\n   :ARG1 (f / feel-01\n            :ARG1 (r / resemble-01\n                     :ARG2 (b / bunny\n                              :location (h3 / head\n                                            :part (h4 / headlights))))))",
      "(s / struggle-02\n   :ARG1 (r / remember-01\n            :ARG0 (ii / i)))",
      "(s / struggle-02\n   :ARG1 (r / remember-01\n            :ARG1 (b / boob\n                     :ARG1 (u / use-01\n                              :ARG0 (ii / i)))))",
      "(s / struggle-02\n   :ARG1 (r / remember-01\n            :ARG1 (b / boob\n                     :ARG1 (u / use-01\n                              :time (b2 / breastfeed-01\n                                        :ARG0 (ii / i))))))",
      "(s / struggle-02\n   :ARG0 (ii / i)\n   :ARG1 (r / remember-01\n            :ARG0 ii))",
      "(s / struggle-02\n   :ARG0 (ii / i)\n   :ARG1 (r / remember-01\n            :ARG1 (b / boob\n                     :ARG1 (u / use-01\n                              :ARG0 ii))))"
    ],
    "smus": [
      "a href=\"http://www.youtube.com/watch?v=cbs_1\">Chloe Owens Designing New App/a>",
      "swanley",
      "The idea came up when the daughter was pregnant.",
      "Lola is a three month old daughter.",
      "Lola",
      "Lola is a daughter now.",
      "David felt like a bunny on his headlights.",
      "At first, the husband felt.",
      "At first, Lola felt like it was like...",
      "Lola felt.",
      "David Lola",
      "struggled to remember the boob to use when I was breast feeding.",
      "I also struggled.",
      "I also struggled to remember.",
      "boob to use.",
      "boob use when I'm breast feeding"
    ]
  },
  {
    "instance_id": "realsumm-23",
    "summary": "<t> Harley Street is a top destination for private cosmetic surgery . </t> <t> Patients pay thousands for treatments Patients hope will change Patients lives . </t> <t> Michael , 33 , spent \u00a3 7,500 on a hair transplant to boost Michael self - esteem . </t> <t> Andrea , 72 , pays for a facelift - but Street husband ca n't tell the difference . </t>",
    "summary_trees": [
      "# ::snt  Harley Street is a top destination for private cosmetic surgery . \n(d / destination\n      :mod (t / top)\n      :domain (s / street\n            :name (n / name\n                  :op1 \"Harley\"\n                  :op2 \"Street\"))\n      :purpose (s2 / surgery-01\n            :ARG2 (c / cosmetic)\n            :ARG1-of (p / private-03)))",
      "# ::snt  Patients pay thousands for treatments Patients hope will change Patients lives . \n(p / pay-01\n      :ARG0 (p2 / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG2 (p3 / patient)))\n      :ARG1 (m / multiple\n            :op1 (m2 / monetary-quantity\n                  :quant 1000\n                  :unit (d / dollar)))\n      :ARG3 (t / treat-03\n            :ARG1 p2\n            :ARG0-of (c / change-01\n                  :ARG1 (l / life\n                        :poss p2)\n                  :ARG1-of (h2 / hope-01\n                        :ARG0 p2))))",
      "# ::snt  Michael , 33 , spent \u00a3 7,500 on a hair transplant to boost Michael self - esteem . \n(s / spend-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Michael\")\n            :age (t / temporal-quantity\n                  :quant 33\n                  :unit (y / year))\n            :part (h / hair))\n      :ARG1 (t2 / transplant-01\n            :ARG1 h)\n      :ARG3 (m / monetary-quantity\n            :quant 7000\n            :unit (p2 / pound))\n      :purpose (b / boost-01\n            :ARG0 t2\n            :ARG1 (e / esteem-01\n                  :ARG0 p\n                  :ARG1 p)))",
      "# ::snt  Andrea , 72 , pays for a facelift - but Street husband ca n't tell the difference . \n(c / contrast-01\n      :ARG1 (p / pay-01\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Andrea\")\n                  :age (t / temporal-quantity\n                        :quant 72\n                        :unit (y / year)))\n            :ARG3 (f / facelift))\n      :ARG2 (p3 / possible-01\n            :polarity -\n            :ARG1 (k / know-04\n                  :ARG0 (p4 / person\n                        :ARG0-of (h / have-rel-role-91\n                              :ARG1 p2\n                              :ARG2 (h2 / husband))\n                        :mod (s / street))\n                  :ARG1 (t2 / thing\n                        :ARG1-of (d / differ-02)))))"
    ],
    "tree": [
      "(d / destination\n   :domain (s / street\n              :name (n / name\n                       :op1 \"Harley\"\n                       :op2 \"Street\")))",
      "(d / destination\n   :purpose (s2 / surgery-01\n                :ARG2 (c / cosmetic)))",
      "(d / destination\n   :purpose (s2 / surgery-01\n                :ARG1 (p / private-03)))",
      "(d / destination\n   :mod (t / top)\n   :domain (s / street\n              :name (n / name\n                       :op1 \"Harley\"\n                       :op2 \"Street\")))",
      "(d / destination\n   :mod (t / top)\n   :purpose (s2 / surgery-01\n                :ARG2 (c / cosmetic)))",
      "(p / pay-01\n   :ARG1 (m / multiple\n            :op1 (m2 / monetary-quantity\n                     :quant 1000)))",
      "(p / pay-01\n   :ARG3 (t / treat-03\n            :ARG1 (p2 / person)))",
      "(p / pay-01\n   :ARG3 (t / treat-03\n            :ARG0 (c / change-01\n                     :ARG1 (l / life\n                              :poss (p2 / person)))))",
      "(s / spend-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Michael\")))",
      "(s / spend-01\n   :ARG0 (p / person\n            :age (t / temporal-quantity\n                    :quant 33)))",
      "(c / contrast-01\n   :ARG1 (p / pay-01\n            :ARG0 (p2 / person\n                      :age (t / temporal-quantity\n                              :unit (y / year)))))"
    ],
    "smus": [
      "Harley Street is a destination.",
      "Top destination for cosmetic surgery.",
      "Harley Street is a destination for cosmetic surgery.",
      "HARLEY STEET",
      "Private cosmetic surgery.",
      "Patients pay for treatments that will change their lives.",
      "pay in the thousands.",
      "Patients pay thousands.",
      "Michael spent.",
      "33-year-old spent 7,000 on a hair transplant to boost self-esteem.",
      "Andrea"
    ]
  },
  {
    "instance_id": "realsumm-24",
    "summary": "<t> General Motors unveiled Motors concept car at an event in Shanghai . </t> <t> Chevrolet - FNR has ' dragonfly ' swing doors and ' crystal laser headlights ' FNR is self - driving , electric , and the front chairs can swivel round . </t> <t> And using iris recognition software you can start software using just your eyes . </t>",
    "summary_trees": [
      "# ::snt  General Motors unveiled Motors concept car at an event in Shanghai . \n(u / unveil-01\n      :ARG0 (c / company\n            :name (n / name\n                  :op1 \"General\"\n                  :op2 \"Motors\"))\n      :ARG1 (c2 / car\n            :name (n2 / name\n                  :op1 \"Motors\"\n                  :op2 \"Concept\"))\n      :time (e / event\n            :location (c3 / city\n                  :name (n3 / name\n                        :op1 \"Shanghai\"))))",
      "# ::snt  Chevrolet - FNR has ' dragonfly ' swing doors and ' crystal laser headlights ' FNR is self - driving , electric , and the front chairs can swivel round . \n(m / multi-sentence\n      :snt1 (h / have-03\n            :ARG0 (c / car-make\n                  :name (n / name\n                        :op1 \"Chevrolet-FNR\"))\n            :ARG1 (a / and\n                  :op1 (d / door\n                        :mod (s / swing)\n                        :mod (d2 / dragonfly))\n                  :op2 (h2 / headlight\n                        :mod (l / laser\n                              :mod (c2 / crystal)))))\n      :snt2 (a2 / and\n            :op1 (d3 / drive-01\n                  :ARG0 (c3 / car-make\n                        :name (n2 / name\n                              :op1 \"FNR\"))\n                  :manner (s2 / self))\n            :op2 (e / electric\n                  :domain c3)\n            :op3 (p / possible-01\n                  :ARG1 (s3 / swivel-01\n                        :ARG1 (c4 / chair\n                              :mod (f / front))\n                        :direction (r / round)))))",
      "# ::snt  And using iris recognition software you can start software using just your eyes . \n(m / multi-sentence\n      :snt1 (a / and\n            :op2 (p / possible-01\n                  :ARG1 (s / start-01\n                        :ARG0 (y / you)\n                        :ARG1 (s2 / software)\n                        :manner (u / use-01\n                              :ARG0 y\n                              :ARG1 (e / eye\n                                    :mod (j / just)\n                                    :part-of (y2 / you))))\n                  :manner (u2 / use-01\n                        :ARG0 y\n                        :ARG1 (s3 / software\n                              :ARG0-of (r / recognize-01\n                                    :ARG1 (ii / iris)))))))"
    ],
    "tree": [
      "(u / unveil-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"General\"\n                     :op2 \"Motors\")))",
      "(u / unveil-01\n   :ARG1 (c2 / car\n             :name (n2 / name\n                       :op1 \"Motors\"\n                       :op2 \"Concept\")))",
      "(u / unveil-01\n   :time (e / event\n            :location (c3 / city\n                          :name (n3 / name\n                                    :op1 \"Shanghai\"))))",
      "(u / unveil-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"General\"\n                     :op2 \"Motors\"))\n   :ARG1 (c2 / car\n             :name (n2 / name\n                       :op1 \"Motors\"\n                       :op2 \"Concept\")))",
      "(u / unveil-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"General\"\n                     :op2 \"Motors\"))\n   :time (e / event\n            :location (c3 / city\n                          :name (n3 / name\n                                    :op1 \"Shanghai\"))))",
      "(m / multi-sentence\n   :snt1 (h / have-03\n            :ARG0 (c / car-make\n                     :name (n / name\n                              :op1 \"Chevrolet-FNR\"))))",
      "(m / multi-sentence\n   :snt1 (h / have-03\n            :ARG1 (d / door\n                     :mod (s / swing))))",
      "(m / multi-sentence\n   :snt1 (h / have-03\n            :ARG1 (h2 / headlight\n                      :mod (l / laser\n                              :mod (c2 / crystal)))))",
      "(m / multi-sentence\n   :snt1 (h / have-03\n            :ARG1 (d / door\n                     :mod (d2 / dragonfly))))",
      "(m / multi-sentence\n   :snt2 (d3 / drive-01\n             :ARG0 (c3 / car-make\n                       :name (n2 / name\n                                 :op1 \"FNR\"))))",
      "(m / multi-sentence\n   :snt1 (p / possible-01\n            :ARG1 (s / start-01\n                     :ARG0 (y / you))))",
      "(m / multi-sentence\n   :snt1 (p / possible-01\n            :manner (u2 / use-01\n                        :ARG0 (y / you))))",
      "(m / multi-sentence\n   :snt1 (p / possible-01\n            :ARG1 (s / start-01\n                     :ARG1 (s2 / software))))",
      "(m / multi-sentence\n   :snt1 (p / possible-01\n            :ARG1 (s / start-01\n                     :manner (u / use-01\n                                :ARG0 (y / you)))))",
      "(m / multi-sentence\n   :snt1 (p / possible-01\n            :manner (u2 / use-01\n                        :ARG1 (s3 / software\n                                  :ARG0 (r / recognize-01\n                                           :ARG1 (ii / iris))))))"
    ],
    "smus": [
      "General Motors unveiled the \" Motors Concept \" car.",
      "General Motors unveiled the \" Motors Concept \" car at the event in Shanghai.",
      "Shanghai",
      "The cars are the Motors Concept.",
      "The event took place in Shanghai.",
      "The FNR is driving and can swivel round.",
      "and crystal laser headlights.",
      "The Chevy-FNR has swing doors.",
      "Self driving and front chairs can swivel.",
      "has swing doors.",
      "The software can start.",
      "You can start by using.",
      "And you can start by using your eyes.",
      "You can start.",
      "using iris recognition software."
    ]
  },
  {
    "instance_id": "realsumm-25",
    "summary": "<t> Candidate Lynne Abraham says Abraham suffered a momentary drop in blood pressure and that drop 's never happened before . </t> <t> While a doctor kept attorney from returning to the debate , the 74-year - old former district attorney says attorney will not let the incident affect attorney campaign . </t>",
    "summary_trees": [
      "# ::snt  Candidate Lynne Abraham says Abraham suffered a momentary drop in blood pressure and that drop 's never happened before . \n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Lynne\"\n                  :op2 \"Abraham\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (c / candidate)))\n      :ARG1 (a / and\n            :op1 (s2 / suffer-01\n                  :ARG0 p\n                  :ARG1 (d / drop-01\n                        :ARG1 (p2 / pressure\n                              :mod (b / blood))\n                        :mod (m / momentary)))\n            :op2 (b2 / be-temporally-at-91\n                  :polarity -\n                  :ARG1 d\n                  :ARG2 (b3 / before))))",
      "# ::snt  While a doctor kept attorney from returning to the debate , the 74-year - old former district attorney says attorney will not let the incident affect attorney campaign . \n(c / contrast-01\n      :ARG1 (s / say-01\n            :ARG0 (a / attorney\n                  :mod (d / district)\n                  :time (f / former)\n                  :age (t / temporal-quantity\n                        :quant 74\n                        :unit (y / year)))\n            :ARG1 (l / let-01\n                  :polarity -\n                  :ARG0 (a2 / attorney)\n                  :ARG1 (a3 / affect-01\n                        :ARG0 (ii / incident)\n                        :ARG1 (c2 / campaign-01\n                              :ARG0 a2))))\n      :ARG2 (k / keep-04\n            :ARG0 (d2 / doctor)\n            :ARG1 a2\n            :ARG2 (r / return-01\n                  :ARG1 a2\n                  :ARG4 (d3 / debate-01))))"
    ],
    "tree": [
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lynne\"\n                     :op2 \"Abraham\")))",
      "(s / say-01\n   :ARG1 (s2 / suffer-01\n             :ARG0 (p / person :name (n / name :op1 \"Lynne\" :op2 \"Abraham\")))))",
      "(s / say-01\n   :ARG1 (b2 / be-temporally-at-91\n             :polarity -))",
      "(s / say-01\n   :ARG1 (s2 / suffer-01\n             :ARG1 (d / drop-01\n                      :ARG1 (p2 / pressure\n                                :mod (b / blood)))))"
    ],
    "smus": [
      "Lynne Abraham suffered and the drop in blood pressure was.",
      "Lynne Abraham suffered, says.",
      "Candidate says --",
      "Candidate says momentary drop suffered."
    ]
  },
  {
    "instance_id": "realsumm-26",
    "summary": "<t> Bundles of notes spilled onto Interstate 20 in Albilene , Texas , on Friday . </t> <t> Passenger door of vehicle flung open - releasing the money onto the road . </t> <t> Motorists pulled over and abandoned Motorists vehicles to pick up the cash . </t> <t> Police have warned anyone caught with the money will be arrested . </t>",
    "summary_trees": [
      "# ::snt  Bundles of notes spilled onto Interstate 20 in Albilene , Texas , on Friday . \n(s / spill-over-02\n      :ARG1 (b / bundle\n            :consist-of (n / note))\n      :ARG2 (r / road\n            :name (n2 / name\n                  :op1 \"Interstate\"\n                  :op2 20)\n            :location (c / city\n                  :name (n3 / name\n                        :op1 \"Alilene\")\n                  :location (s2 / state\n                        :name (n4 / name\n                              :op1 \"Texas\"))))\n      :time (d / date-entity\n            :weekday (f / friday)))",
      "# ::snt  Passenger door of vehicle flung open - releasing the money onto the road . \n(o / open-01\n      :ARG1 (d / door\n            :part-of (v / vehicle)\n            :mod (p / passenger))\n      :ARG0-of (r / release-01\n            :ARG1 (m / money)\n            :ARG2 (r2 / road)))",
      "# ::snt  Motorists pulled over and abandoned Motorists vehicles to pick up the cash . \n(a / and\n      :op1 (p / pull-over-05\n            :ARG1 (p2 / person\n                  :ARG0-of (d / drive-01\n                        :ARG1 (v / vehicle\n                              :poss p2))))\n      :op2 (a2 / abandon-01\n            :ARG0 p2\n            :ARG1 v)\n      :purpose (p3 / pick-up-04\n            :ARG0 p2\n            :ARG1 (c / cash)))",
      "# ::snt  Police have warned anyone caught with the money will be arrested . \n(w / warn-01\n      :ARG0 (p / police)\n      :ARG1 (a / arrest-01\n            :ARG1 (a2 / anyone\n                  :ARG1-of (c / catch-02\n                        :ARG2 (h / have-03\n                              :ARG0 a2\n                              :ARG1 (m / money))))))"
    ],
    "tree": [
      "(s / spill-over-02\n   :ARG1 (b / bundle\n            :consist-of (n / note)))",
      "(s / spill-over-02\n   :ARG2 (r / road\n            :name (n2 / name\n                      :op1 \"Interstate\"\n                      :op2 20)))",
      "(s / spill-over-02\n   :ARG2 (r / road\n            :location (c / city\n                         :name (n3 / name\n                                   :op1 \"Alilene\"))))",
      "(s / spill-over-02\n   :ARG2 (r / road\n            :location (c / city\n                         :location (s2 / state\n                                       :name (n4 / name\n                                                 :op1 \"Texas\")))))",
      "(s / spill-over-02\n   :time (d / date-entity\n            :weekday (f / friday)))",
      "(o / open-01\n   :ARG1 (d / door\n            :mod (p / passenger)))",
      "(o / open-01\n   :ARG0 (r / release-01\n            :ARG1 (m / money)))",
      "(o / open-01\n   :ARG1 (d / door\n            :part (v / vehicle))\n   :ARG0 (r / release-01\n            :ARG1 (m / money)))",
      "(a / and\n   :op1 (p / pull-over-05\n           :ARG1 (p2 / person\n                     :ARG0 (d / drive-01\n                              :ARG1 (v / vehicle\n                                       :poss p2)))))",
      "(a / and\n   :op2 (a2 / abandon-01\n            :ARG0 (p2 / person\n                      :ARG0 (d / drive-01\n                               :ARG1 (v / vehicle\n                                        :poss p2)))))",
      "(a / and\n   :op2 (a2 / abandon-01\n            :ARG1 (v / vehicle\n                     :poss (p2 / person))))",
      "(a / and\n   :purpose (p3 / pick-up-04\n                :ARG0 (p2 / person\n                          :ARG0 (d / drive-01\n                                   :ARG1 (v / vehicle\n                                            :poss p2)))))",
      "(a / and\n   :purpose (p3 / pick-up-04\n                :ARG1 (c / cash)))",
      "(w / warn-01\n   :ARG1 (a / arrest-01\n            :ARG1 (a2 / anyone\n                      :ARG1 (c / catch-02\n                               :ARG2 (h / have-03\n                                        :ARG0 a2)))))",
      "(w / warn-01\n   :ARG0 (p / police)\n   :ARG1 (a / arrest-01\n            :ARG1 (a2 / anyone\n                      :ARG1 (c / catch-02\n                               :ARG2 (h / have-03\n                                        :ARG0 a2)))))",
      "(a / arrest-01\n   :ARG1 (a2 / anyone\n             :ARG1 (c / catch-02\n                      :ARG2 (h / have-03\n                               :ARG0 a2))))"
    ],
    "smus": [
      "spilled over Interstate 20",
      "Bundles of notes spilled over the road in Alilene Friday.",
      "TEXAS",
      "ALILENE, Texas",
      "Friday, the Texas road spilled over.",
      "The vehicle's door opened to releasing money.",
      "passenger door of vehicle",
      "releasing the money is open.",
      "The drivers of their vehicles pulled over and abandoned.",
      "and the drivers of their vehicles abandoned to pick up.",
      "The drivers of their vehicles pulled over and abandoned to pick up cash.",
      "and the drivers of their vehicles abandoned to pick up cash.",
      "and the people's vehicles are abandoned.",
      "Police have warned that anyone caught with them will be arrested.",
      "Anyone caught with it will be arrested.",
      "Catch anyone who has."
    ]
  },
  {
    "instance_id": "realsumm-27",
    "summary": "<t> Godfrey Elfwick recruited via Twitter to appear on World Have Your Say . </t> <t> Came after claims Elfwick had never seen the Star Wars franchise before . </t> <t> On the show Say described the films as both anti - women and anti - gay . </t> <t> Also said that Darth Vader was a black man and a ' really bad racial stereotype ' . </t>",
    "summary_trees": [
      "# ::snt  Godfrey Elfwick recruited via Twitter to appear on World Have Your Say . \n(r / recruit-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Godfrey\"\n                  :op2 \"Elfwick\"))\n      :ARG2 (a / appear-01\n            :ARG1 p\n            :medium (b / broadcast-program\n                  :name (n2 / name\n                        :op1 \"World\"\n                        :op2 \"Have\"\n                        :op3 \"Your\"\n                        :op4 \"Say\")))\n      :medium (p2 / publication\n            :name (n3 / name\n                  :op1 \"Twitter\")))",
      "# ::snt  Came after claims Elfwick had never seen the Star Wars franchise before . \n(b / be-temporally-at-91\n      :ARG1 (e / event)\n      :ARG2 (a / after\n            :op1 (c / claim-01\n                  :ARG1 (s / see-01\n                        :polarity -\n                        :ARG0 (p / person\n                              :name (n / name\n                                    :op1 \"Elfwick\"))\n                        :ARG1 (f / franchise\n                              :name (n2 / name\n                                    :op1 \"Star\"\n                                    :op2 \"Wars\"))\n                        :time (e2 / ever)\n                        :time (b2 / before)))))",
      "# ::snt  On the show Say described the films as both anti - women and anti - gay . \n(d / describe-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Say\"))\n      :ARG1 (f / film)\n      :ARG2 (a / and\n            :op1 (o / oppose-01\n                  :ARG0 f\n                  :ARG1 (w / woman))\n            :op2 (o2 / oppose-01\n                  :ARG0 f\n                  :ARG1 (g / gay-01)))\n      :medium (s / show-04))",
      "# ::snt  Also said that Darth Vader was a black man and a ' really bad racial stereotype ' . \n(s / say-01\n      :ARG1 (a / and\n            :op1 (m / man\n                  :ARG1-of (b / black-05)\n                  :domain (p / person\n                        :name (n / name\n                              :op1 \"Darth\"\n                              :op2 \"Vader\")))\n            :op2 (s2 / stereotype-01\n                  :ARG2 p\n                  :mod (r / race)\n                  :ARG1-of (b2 / bad-07\n                        :degree (r2 / really))))\n      :mod (a2 / also))"
    ],
    "tree": [
      "(r / recruit-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Godfrey\"\n                     :op2 \"Elfwick\")))",
      "(r / recruit-01\n   :ARG2 (a / appear-01\n            :ARG1 (p / person :name (n / name :op1 \"Godfrey\" :op2 \"Elfwick\"))))",
      "(r / recruit-01\n   :ARG2 (a / appear-01\n            :medium (b / broadcast-program\n                       :name (n2 / name\n                                 :op1 \"World\"\n                                 :op2 \"Have\"\n                                 :op3 \"Your\"\n                                 :op4 \"Say\"))))",
      "(r / recruit-01\n   :medium (p2 / publication\n               :name (n3 / name\n                         :op1 \"Twitter\")))",
      "(r / recruit-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Godfrey\"\n                     :op2 \"Elfwick\"))\n   :ARG2 (a / appear-01\n            :ARG1 p))",
      "(b / be-temporally-at-91\n   :ARG2 (a / after\n            :op1 (c / claim-01\n                    :ARG1 (s / see-01\n                             :ARG0 (p / person\n                                      :name (n / name\n                                               :op1 \"Elfwick\"))))))",
      "(b / be-temporally-at-91\n   :ARG2 (a / after\n            :op1 (c / claim-01\n                    :ARG1 (s / see-01\n                             :time (e2 / ever)))))",
      "(d / describe-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Say\")))",
      "(d / describe-01\n   :ARG2 (o / oppose-01\n            :ARG0 (f / film)))",
      "(d / describe-01\n   :ARG2 (o2 / oppose-01\n             :ARG0 (f / film)))",
      "(s / say-01\n   :ARG1 (m / man\n            :ARG1 (b / black-05)))",
      "(s / say-01\n   :ARG1 (s2 / stereotype-01\n             :ARG2 (p / person\n                      :name (n / name\n                               :op1 \"Darth\"\n                               :op2 \"Vader\"))))",
      "(s / say-01\n   :ARG1 (m / man\n            :domain (p / person\n                       :name (n / name\n                                :op1 \"Darth\"\n                                :op2 \"Vader\"))))",
      "(s / say-01\n   :ARG1 (s2 / stereotype-01\n             :ARG1 (b2 / bad-07\n                       :degree (r2 / really))))"
    ],
    "smus": [
      "Godfrey Elfwick was recruited to appear.",
      "appeared on World Have Your Say.",
      "Godfrey Elfwick was recruited to appear on Twitter.",
      "Twitter",
      "Recruited on Twitter.",
      "Star Wars is seen.",
      "After claims that they have never been seen.",
      "Say described the films.",
      "Anti-woman, anti-gay.",
      "Say described the films on the show as anti-gay.",
      "and racial stereotype.",
      "\"Darth Vader is a man.\"",
      "Really bad racial stereotype.",
      "arth Vader is a man and a stereotype."
    ]
  },
  {
    "instance_id": "realsumm-28",
    "summary": "<t> Cuban - born Kathy Ferreiro 's curves have attracted fans on social media . </t> <t> Bikini - loving beach babe says photos of babe booty are all natural . </t> <t> Miami - based party girl is hoping to become next Kim Kardashian . </t> <t> Has a huge following in Colombia and other Latin American countries . </t>",
    "summary_trees": [
      "# ::snt  Cuban - born Kathy Ferreiro 's curves have attracted fans on social media . \n(a / attract-01\n      :ARG0 (c / curve\n            :poss (p / person\n                  :name (n / name\n                        :op1 \"Kathy\"\n                        :op2 \"Ferreiro\")\n                  :ARG1-of (b / bear-02\n                        :location (c2 / country\n                              :name (n2 / name\n                                    :op1 \"Cuba\")))))\n      :ARG1 (f / fan)\n      :medium (m / media\n            :mod (s / social)))",
      "# ::snt  Bikini - loving beach babe says photos of babe booty are all natural . \n(s / say-01\n      :ARG0 (b / babe\n            :ARG0-of (l / love-01\n                  :ARG1 (b2 / beach))\n            :mod (b3 / bikini))\n      :ARG1 (n / natural-03\n            :ARG1 (p / photograph-01\n                  :ARG1 (b4 / booty\n                        :mod (b5 / babe)))\n            :mod (a / all)))",
      "# ::snt  Miami - based party girl is hoping to become next Kim Kardashian . \n(h / hope-01\n      :ARG0 (g / girl\n            :mod (p / party)\n            :ARG1-of (b / base-01\n                  :location (c / city\n                        :name (n / name\n                              :op1 \"Miami\"))))\n      :ARG1 (b2 / become-01\n            :ARG1 g\n            :ARG2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Kim\"\n                        :op2 \"Kardinez\")\n                  :mod (n3 / next))))",
      "# ::snt  Has a huge following in Colombia and other Latin American countries . \n(f / follow-02\n      :ARG1 (ii / it)\n      :mod (h / huge)\n      :location (a / and\n            :op1 (c / country\n                  :name (n / name\n                        :op1 \"Colombia\"))\n            :op2 (c2 / country\n                  :location (w / world-region\n                        :name (n2 / name\n                              :op1 \"Latin\"\n                              :op2 \"America\"))\n                  :mod (o / other))))"
    ],
    "tree": [
      "(a / attract-01\n   :ARG0 (c / curve\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Kathy\"\n                              :op2 \"Ferreiro\"))))",
      "(a / attract-01\n   :ARG0 (c / curve\n            :poss (p / person\n                     :ARG1 (b / bear-02\n                              :location (c2 / country\n                                            :name (n2 / name\n                                                      :op1 \"Cuba\"))))))",
      "(a / attract-01\n   :medium (m / media\n              :mod (s / social)))",
      "(a / attract-01\n   :ARG0 (c / curve\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Kathy\"\n                              :op2 \"Ferreiro\")))\n   :ARG1 (f / fan))",
      "(s / say-01\n   :ARG0 (b / babe\n            :ARG0 (l / love-01\n                     :ARG1 (b2 / beach))))",
      "(s / say-01\n   :ARG0 (b / babe\n            :mod (b3 / bikini)))",
      "(s / say-01\n   :ARG1 (n / natural-03\n            :ARG1 (p / photograph-01\n                     :ARG1 (b4 / booty\n                               :mod (b5 / babe)))))",
      "(s / say-01\n   :ARG1 (n / natural-03\n            :mod (a / all)))",
      "(s / say-01\n   :ARG0 (b / babe\n            :ARG0 (l / love-01\n                     :ARG1 (b2 / beach)))\n   :ARG1 (n / natural-03\n            :ARG1 (p / photograph-01\n                     :ARG1 (b4 / booty\n                               :mod (b5 / babe)))))",
      "(h / hope-01\n   :ARG0 (g / girl\n            :mod (p / party)))",
      "(h / hope-01\n   :ARG1 (b2 / become-01\n             :ARG1 (g / girl)))",
      "(h / hope-01\n   :ARG1 (b2 / become-01\n             :ARG2 (p2 / person\n                       :mod (n3 / next))))",
      "(f / follow-02\n   :ARG1 (ii / it)\n   :mod (h / huge))",
      "(f / follow-02\n   :ARG1 (ii / it)\n   :location (c / country\n                :name (n / name\n                         :op1 \"Colombia\")))"
    ],
    "smus": [
      "Cuban born",
      "Kathy Ferreiro's curves are attracted to social media.",
      "Curves of Cuban-born people have attracted fans.",
      "Kathy Ferreiro",
      "Loving the beach babe.",
      "Bikini babe says photos of the babe booty are natural.",
      "The photos of the babe booty are natural.",
      "All natural says.",
      "\"The photos of the babe booty are natural,\" says the babe babe loving the beach.",
      "Hoping the girl will become.",
      "A party girl based in Miami.",
      "Miami",
      "There is huge follow in Latin American countries.",
      "Other Latin American countries"
    ]
  },
  {
    "instance_id": "realsumm-29",
    "summary": "<t> Thousands of accounts vanished from the social network last week . </t> <t> Twitter said Twitter had received numerous reports about terror - promoting users . </t> <t> Decided to suspend 10,000 accounts for making threats of violence . </t> <t> Suspensions were almost certainly linked to a campaign by ' hacktavist ' collective Anonymous targeting online jihadis . </t>",
    "summary_trees": [
      "# ::snt  Thousands of accounts vanished from the social network last week . \n(v / vanish-01\n      :ARG1 (a / account\n            :quant (m / multiple\n                  :op1 1000))\n      :location (n / network\n            :ARG1-of (s / social-03))\n      :time (w / week\n            :mod (l / last)))",
      "# ::snt  Twitter said Twitter had received numerous reports about terror - promoting users . \n(s / say-01\n      :ARG0 (p / publication\n            :name (n / name\n                  :op1 \"Twitter\"))\n      :ARG1 (r / receive-01\n            :ARG0 p\n            :ARG1 (r2 / report-01\n                  :ARG1 (p2 / person\n                        :ARG0-of (u / use-01)\n                        :ARG0-of (p3 / promote-02\n                              :ARG1 (t / terror)))\n                  :quant (n2 / numerous))))",
      "# ::snt  Decided to suspend 10,000 accounts for making threats of violence . \n(d / decide-01\n      :ARG1 (s / suspend-01\n            :ARG1 (a / account\n                  :quant 10000)\n            :ARG1-of (c / cause-01\n                  :ARG0 (t / threaten-01\n                        :ARG1 (v / violence)))))",
      "# ::snt  Suspensions were almost certainly linked to a campaign by ' hacktavist ' collective Anonymous targeting online jihadis . \n(l / link-01\n      :ARG1 (s / suspend-01)\n      :ARG2 (c / campaign-01\n            :ARG0 (c2 / collective\n                  :name (n / name\n                        :op1 \"Anonymous\")\n                  :mod (h / hacktavist))\n            :ARG0-of (t / target-01\n                  :ARG1 (j / jihadi\n                        :mod (o / online))))\n      :mod (c3 / certain\n            :mod (a / almost)))"
    ],
    "tree": [
      "(v / vanish-01\n   :location (n / network\n                :ARG1 (s / social-03)))",
      "(v / vanish-01\n   :time (w / week\n            :mod (l / last)))",
      "(v / vanish-01\n   :ARG1 (a / account\n            :quant (m / multiple\n                      :op1 1000))\n   :location (n / network\n                :ARG1 (s / social-03)))",
      "(s / say-01\n   :ARG0 (p / publication\n            :name (n / name\n                     :op1 \"Twitter\")))",
      "(s / say-01\n   :ARG1 (r / receive-01\n            :ARG0 (p / publication :name (n / name :op1 \"Twitter\"))))",
      "(s / say-01\n   :ARG1 (r / receive-01\n            :ARG1 (r2 / report-01\n                      :ARG1 (p2 / person\n                                :ARG0 (u / use-01)))))",
      "(s / say-01\n   :ARG1 (r / receive-01\n            :ARG1 (r2 / report-01\n                      :quant (n2 / numerous))))",
      "(s / say-01\n   :ARG1 (r / receive-01\n            :ARG1 (r2 / report-01\n                      :ARG1 (p2 / person\n                                :ARG0 (p3 / promote-02\n                                          :ARG1 (t / terror))))))",
      "(d / decide-01\n   :ARG1 (s / suspend-01\n            :ARG1 (a / account\n                     :quant 10000)))",
      "(d / decide-01\n   :ARG1 (s / suspend-01\n            :ARG1 (c / cause-01\n                     :ARG0 (t / threaten-01\n                              :ARG1 (v / violence)))))",
      "(s / suspend-01\n   :ARG1 (a / account\n            :quant 10000))",
      "(c / cause-01\n   :ARG0 (t / threaten-01\n            :ARG1 (v / violence)))",
      "(l / link-01\n   :ARG2 (c / campaign-01\n            :ARG0 (c2 / collective\n                      :name (n / name\n                               :op1 \"Anonymous\"))))",
      "(l / link-01\n   :ARG2 (c / campaign-01\n            :ARG0 (t / target-01\n                     :ARG1 (j / jihadi\n                              :mod (o / online)))))",
      "(l / link-01\n   :ARG2 (c / campaign-01\n            :ARG0 (c2 / collective\n                      :mod (h / hacktavist))))",
      "(l / link-01\n   :mod (c3 / certain\n            :mod (a / almost)))",
      "(l / link-01\n   :ARG1 (s / suspend-01)\n   :ARG2 (c / campaign-01\n            :ARG0 (c2 / collective\n                      :name (n / name\n                               :op1 \"Anonymous\"))))"
    ],
    "smus": [
      "Thousands of accounts vanished last week.",
      "vanished last week.",
      "Thousands of accounts vanished.",
      "There have been numerous reports of people promoting terror.",
      "Reports of users have been received.",
      "Reports of users have been received, Twitter said.",
      "@twitter,",
      "Reports of terrorists have been received, Twitter said.",
      "Decided to suspend 10,000 accounts.",
      "The decision to suspend was made over threats of violence.",
      "Suspend 10,000 accounts.",
      "Because of threats of violence.",
      "Almost certainly linked.",
      "A hacktavist collective campaign.",
      "The suspensions are almost certainly linked to a campaign targeting online jihadis.",
      "Anonymous collective campaign",
      "The suspensions are almost certainly linked to a hacktavist collective campaign."
    ]
  },
  {
    "instance_id": "realsumm-30",
    "summary": "<t> Locals say power cuts the weekend before raid could be linked to heist . </t> <t> Locals also tell of suspicious ' drilling ' noises on evening of Good Friday . </t> <t> Group seen returning to scene on Saturday - a day after initial break - in . </t> <t> Police admit Police did n't respond after alarm went off early on Friday . </t>",
    "summary_trees": [
      "# ::snt  Locals say power cuts the weekend before raid could be linked to heist . \n(s / say-01\n      :ARG0 (p / person\n            :ARG1-of (l / local-02))\n      :ARG1 (p2 / possible-01\n            :ARG1 (l2 / link-01\n                  :ARG1 (c / cut-02\n                        :ARG1 (p3 / power)\n                        :time (w / weekend)\n                        :time (b / before\n                              :op1 (r / raid-01)))\n                  :ARG2 (h / heist))))",
      "# ::snt  Locals also tell of suspicious ' drilling ' noises on evening of Good Friday . \n(t / tell-01\n      :ARG0 (p / person\n            :ARG1-of (l / local-02))\n      :ARG1 (n / noise\n            :mod (d / drill-01)\n            :ARG1-of (s / suspicious-03)\n            :time (d2 / date-entity\n                  :weekday (f / friday)\n                  :dayperiod (e / evening)))\n      :mod (a / also))",
      "# ::snt  Group seen returning to scene on Saturday - a day after initial break - in . \n(s / see-01\n      :ARG1 (r / return-01\n            :ARG1 (g / group)\n            :ARG4 (s2 / scene)\n            :time (d / date-entity\n                  :weekday (s3 / saturday))\n            :time (a / after\n                  :op1 (b / break-02\n                        :mod (ii / initial))\n                  :quant (t / temporal-quantity\n                        :quant 1\n                        :unit (d2 / day)))))",
      "# ::snt  Police admit Police did n't respond after alarm went off early on Friday . \n(a / admit-01\n      :ARG0 (p / police)\n      :ARG1 (r / respond-01\n            :polarity -\n            :ARG0 p\n            :time (a2 / after\n                  :op1 (g / go-off-16\n                        :ARG1 (a3 / alarm-01)\n                        :time (e / early\n                              :op1 (d / date-entity\n                                    :weekday (f / friday)))))))"
    ],
    "tree": [
      "(s / say-01\n   :ARG0 (p / person\n            :ARG1 (l / local-02)))",
      "(s / say-01\n   :ARG1 (p2 / possible-01\n             :ARG1 (l2 / link-01\n                       :ARG1 (c / cut-02\n                                :ARG1 (p3 / power)))))",
      "(s / say-01\n   :ARG1 (p2 / possible-01\n             :ARG1 (l2 / link-01\n                       :ARG2 (h / heist))))",
      "(s / say-01\n   :ARG1 (p2 / possible-01\n             :ARG1 (l2 / link-01\n                       :ARG1 (c / cut-02\n                                :time (b / before\n                                         :op1 (r / raid-01))))))",
      "(t / tell-01\n   :ARG0 (p / person\n            :ARG1 (l / local-02)))",
      "(t / tell-01\n   :ARG1 (n / noise\n            :mod (d / drill-01)))",
      "(t / tell-01\n   :ARG1 (n / noise\n            :ARG1 (s / suspicious-03)))",
      "(t / tell-01\n   :ARG1 (n / noise\n            :time (d2 / date-entity\n                      :weekday (f / friday))))",
      "(t / tell-01\n   :ARG1 (n / noise\n            :time (d2 / date-entity\n                      :dayperiod (e / evening))))",
      "(s / see-01\n   :ARG1 (r / return-01\n            :ARG1 (g / group)))",
      "(s / see-01\n   :ARG1 (r / return-01\n            :ARG4 (s2 / scene)))",
      "(s / see-01\n   :ARG1 (r / return-01\n            :time (d / date-entity\n                     :weekday (s3 / saturday))))",
      "(s / see-01\n   :ARG1 (r / return-01\n            :time (a / after\n                     :op1 (b / break-02\n                             :mod (ii / initial)))))",
      "(s / see-01\n   :ARG1 (r / return-01\n            :time (a / after\n                     :quant (t / temporal-quantity\n                               :quant 1))))",
      "(a / admit-01\n   :ARG1 (r / respond-01\n            :ARG0 (p / police)))",
      "(a / admit-01\n   :ARG1 (r / respond-01\n            :time (a2 / after\n                      :op1 (g / go-off-16\n                              :time (e / early\n                                       :op1 (d / date-entity\n                                               :weekday (f / friday)))))))",
      "(a / admit-01\n   :ARG0 (p / police)\n   :ARG1 (r / respond-01\n            :polarity -))"
    ],
    "smus": [
      "Cuts over the weekend could be linked.",
      "The cuts could have been linked before the raid, they say.",
      "Cuts made before raid were linked to the heist.",
      "Locals say --",
      "Suspected drill noises in the evening.",
      "Locals also tell of the evening noises.",
      "The evening noises also tell.",
      "Locals also tell.",
      "Drill noises Friday were suspicious.",
      "Seemed to be returning a day later.",
      "After the initial break.",
      "Seemed the scene was returning.",
      "After one.",
      "Group will be returning Saturday.",
      "After going off early Friday.",
      "Admit to not responding.",
      "The go-off was early Friday."
    ]
  },
  {
    "instance_id": "realsumm-31",
    "summary": "<t> Shiraz Nawaz felt lucky to be alive after the flames shot out the manhole . </t> <t> The fire erupted just moments after Nawaz walked over fire in the busy street . </t> <t> Incredibly no - one was hurt in the incident after Nawaz evacuated the area . </t>",
    "summary_trees": [
      "# ::snt  Shiraz Nawaz felt lucky to be alive after the flames shot out the manhole . \n(f / feel-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Shiraz\"\n                  :op2 \"Nawaz\"))\n      :ARG1 (l / lucky\n            :domain p\n            :ARG1-of (c / cause-01\n                  :ARG0 (l2 / live-01\n                        :ARG0 p)))\n      :time (a / after\n            :op1 (s / shoot-02\n                  :ARG0 (f2 / flame)\n                  :ARG3 (m / manhole))))",
      "# ::snt  The fire erupted just moments after Nawaz walked over fire in the busy street . \n(e / erupt-01\n      :ARG1 (f / fire)\n      :time (a / after\n            :op1 (w / walk-01\n                  :ARG0 (p / person\n                        :name (n / name\n                              :op1 \"Nawaz\"))\n                  :ARG2 (o / over\n                        :op1 (f2 / fire))\n                  :location (s / street\n                        :ARG1-of (b / busy-02)))\n            :quant (m / moment\n                  :mod (j / just))))",
      "# ::snt  Incredibly no - one was hurt in the incident after Nawaz evacuated the area . \n(h / hurt-01\n      :ARG1 (n / no-one)\n      :manner (ii / incredible)\n      :time (ii2 / incident)\n      :time (a / after\n            :op1 (e / evacuate-01\n                  :ARG0 (p / person\n                        :name (n2 / name\n                              :op1 \"Nawaz\"))\n                  :ARG1 (a2 / area))))"
    ],
    "tree": [
      "(f / feel-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Shiraz\"\n                     :op2 \"Nawaz\")))",
      "(f / feel-01\n   :ARG1 (l / lucky\n            :domain (p / person :name (n / name :op1 \"Shiraz\" :op2 \"Nawaz\"))))",
      "(f / feel-01\n   :ARG1 (l / lucky\n            :ARG1 (c / cause-01\n                     :ARG0 (l2 / live-01\n                               :ARG0 (p / person :name (n / name :op1 \"Shiraz\" :op2 \"Nawaz\"))))))",
      "(f / feel-01\n   :time (a / after\n            :op1 (s / shoot-02\n                    :ARG0 (f2 / flame))))",
      "(f / feel-01\n   :time (a / after\n            :op1 (s / shoot-02\n                    :ARG3 (m / manhole))))",
      "(e / erupt-01\n   :time (a / after\n            :op1 (w / walk-01\n                    :ARG0 (p / person\n                             :name (n / name\n                                      :op1 \"Nawaz\")))))",
      "(e / erupt-01\n   :time (a / after\n            :quant (m / moment\n                      :mod (j / just))))",
      "(e / erupt-01\n   :time (a / after\n            :op1 (w / walk-01\n                    :ARG2 (o / over\n                             :op1 (f2 / fire)))))",
      "(e / erupt-01\n   :time (a / after\n            :op1 (w / walk-01\n                    :location (s / street\n                                 :ARG1 (b / busy-02)))))",
      "(e / erupt-01\n   :ARG1 (f / fire)\n   :time (a / after\n            :op1 (w / walk-01\n                    :ARG0 (p / person\n                             :name (n / name\n                                      :op1 \"Nawaz\")))))",
      "(h / hurt-01\n   :ARG1 (n / no-one)\n   :manner (ii / incredible))",
      "(h / hurt-01\n   :ARG1 (n / no-one)\n   :time (ii2 / incident))",
      "(h / hurt-01\n   :manner (ii / incredible)\n   :time (ii2 / incident))",
      "(a / after\n   :op1 (e / evacuate-01\n           :ARG0 (p / person\n                    :name (n2 / name\n                              :op1 \"Nawaz\"))))"
    ],
    "smus": [
      "After the flames shot, Shiraz Nawza felt lucky.",
      "Feeled after the manhole was shot.",
      "Shiraz Nawabs felt.",
      "Shiraz Nawabs felt lucky after the flames shot.",
      "Flames shot through the manhole.",
      "After walking over the fire.",
      "After Nawabs walked.",
      "After walking on a busy street.",
      "Just moments later, it erupted.",
      "Nawzaz",
      "Nawabs evacuated.",
      "No one was hurt incredibly during the incident.",
      "Nawzaz",
      "After the area was evacuated."
    ]
  },
  {
    "instance_id": "realsumm-32",
    "summary": "<t> Ao Nang Princess 5 ferry was in Andaman Sea on way from resort of Krabi . </t> <t> Was five miles from the coast travelling to Phuket when engine exploded . </t> <t> 35-metre - long boat caught fire around 3.30pm before sinking around 6 pm . </t> <t> Passengers seen throwing Passengers overboard before being rescued . </t> <t> No injuries reported but search will continue into tomorrow for missing girl . </t>",
    "summary_trees": [
      "# ::snt  Ao Nang Princess 5 ferry was in Andaman Sea on way from resort of Krabi . \n(b / be-located-at-91\n      :ARG1 (f / ferry\n            :name (n / name\n                  :op1 \"Ao\"\n                  :op2 \"Nang\"\n                  :op3 \"Princess\"\n                  :op4 5))\n      :ARG2 (s / sea\n            :name (n2 / name\n                  :op1 \"Andaman\"\n                  :op2 \"Sea\"))\n      :time (w / way\n            :direction (r / resort\n                  :name (n3 / name\n                        :op1 \"Krabi\"))))",
      "# ::snt  Was five miles from the coast travelling to Phuket when engine exploded . \n(t / travel-01\n      :ARG0 (ii / i)\n      :ARG1 (ii2 / island\n            :name (n / name\n                  :op1 \"Phuket\"))\n      :time (e / explode-01\n            :ARG1 (e2 / engine))\n      :extent (d / distance-quantity\n            :quant 5\n            :unit (m / mile)\n            :location (f / from\n                  :op1 (c / coast))))",
      "# ::snt  35-metre - long boat caught fire around 3.30pm before sinking around 6 pm . \n(a / and\n      :op1 (c / catch-on-fire-09\n            :ARG1 (b / boat\n                  :ARG1-of (l / long-03\n                        :ARG2 (d / distance-quantity\n                              :quant 35\n                              :unit (m / meter))))\n            :time (a2 / around\n                  :op1 (d2 / date-entity\n                        :time \"15:30\")))\n      :op2 (s / sink-01\n            :ARG1 b\n            :time (a3 / around\n                  :op1 (d3 / date-entity\n                        :time \"18:00\"))))",
      "# ::snt  Passengers seen throwing Passengers overboard before being rescued . \n(s / see-01\n      :ARG1 (t / throw-01\n            :ARG0 (p / passenger)\n            :ARG1 (p2 / passenger)\n            :ARG2 (o / overboard)\n            :time (b / before\n                  :op1 (r / rescue-01\n                        :ARG1 p2))))",
      "# ::snt  No injuries reported but search will continue into tomorrow for missing girl . \n(h / have-concession-91\n      :ARG1 (c / continue-01\n            :ARG1 (s / search-01\n                  :ARG2 (g / girl\n                        :ARG1-of (m / miss-01)))\n            :time (ii / into\n                  :op1 (t / tomorrow)))\n      :ARG2 (r / report-01\n            :polarity -\n            :ARG1 (ii2 / injure-01)))"
    ],
    "tree": [
      "(b / be-located-at-91\n   :ARG1 (f / ferry\n            :name (n / name\n                     :op1 \"Ao\"\n                     :op2 \"Nang\"\n                     :op3 \"Princess\"\n                     :op4 5)))",
      "(b / be-located-at-91\n   :ARG2 (s / sea\n            :name (n2 / name\n                      :op1 \"Andaman\"\n                      :op2 \"Sea\")))",
      "(b / be-located-at-91\n   :time (w / way\n            :direction (r / resort\n                          :name (n3 / name\n                                    :op1 \"Krabi\"))))",
      "(b / be-located-at-91\n   :ARG1 (f / ferry\n            :name (n / name\n                     :op1 \"Ao\"\n                     :op2 \"Nang\"\n                     :op3 \"Princess\"\n                     :op4 5))\n   :ARG2 (s / sea\n            :name (n2 / name\n                      :op1 \"Andaman\"\n                      :op2 \"Sea\")))",
      "(t / travel-01\n   :ARG1 (ii2 / island\n              :name (n / name\n                       :op1 \"Phuket\")))",
      "(t / travel-01\n   :extent (d / distance-quantity\n              :quant 5))",
      "(t / travel-01\n   :extent (d / distance-quantity\n              :unit (m / mile)))",
      "(a / and\n   :op2 (s / sink-01\n           :time (a3 / around\n                     :op1 (d3 / date-entity\n                              :time \"18:00\"))))",
      "(s / see-01\n   :ARG1 (t / throw-01\n            :ARG0 (p / passenger)))",
      "(s / see-01\n   :ARG1 (t / throw-01\n            :ARG1 (p2 / passenger)))",
      "(s / see-01\n   :ARG1 (t / throw-01\n            :ARG2 (o / overboard)))",
      "(s / see-01\n   :ARG1 (t / throw-01\n            :time (b / before\n                     :op1 (r / rescue-01\n                             :ARG1 (p2 / passenger)))))",
      "(t / throw-01\n   :time (b / before\n            :op1 (r / rescue-01\n                    :ARG1 (p2 / passenger))))",
      "(h / have-concession-91\n   :ARG1 (c / continue-01\n            :ARG1 (s / search-01\n                     :ARG2 (g / girl\n                              :ARG1 (m / miss-01)))))",
      "(h / have-concession-91\n   :ARG2 (r / report-01\n            :ARG1 (ii2 / injure-01)))",
      "(h / have-concession-91\n   :ARG1 (c / continue-01\n            :ARG1 (s / search-01\n                     :ARG2 (g / girl\n                              :ARG1 (m / miss-01))))\n   :ARG2 (r / report-01\n            :polarity -))"
    ],
    "smus": [
      "Ao Nang Princess 5 ferry",
      "On the way to the resort of Rabi, the Ao Nam Princess 5 ferry is on the Andaman Sea.",
      "In the Andaman Sea.",
      "Krabi resort",
      "I was traveling miles when the engine exploded.",
      "I'm traveling miles to Phuket.",
      "Traveling from the coast.",
      "The long boat caught fire.",
      "The passengers were throwing before they were rescued.",
      "Passengers throwing passengers overboard.",
      "Throwing passengers overboard before they were rescued.",
      "Seems like throwing overboard.",
      "The passengers were seen throwing.",
      "Continue into tomorrow.",
      "Search continues for missing girl",
      "Although no injuries were reported."
    ]
  },
  {
    "instance_id": "realsumm-33",
    "summary": "<t> The worker was caught on camera by a member of the public . </t> <t> Field owner TH Clements & Son was alerted and the man was sacked . </t> <t> Passer - by who used mobile phone to snap photo branded act ' disgusting ' Tesco : Vegetables undergo ' extensive assessment ' before hitting shelves . </t>",
    "summary_trees": [
      "# ::snt  The worker was caught on camera by a member of the public . \n(c / catch-03\n      :ARG0 (m / member\n            :part-of (p / public))\n      :ARG1 (p2 / person\n            :ARG0-of (w / work-01))\n      :ARG2 (c2 / camera))",
      "# ::snt  Field owner TH Clements & Son was alerted and the man was sacked . \n(a / and\n      :op1 (a2 / alert-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"TH\"\n                        :op2 \"Clements\"\n                        :op3 \"&\"\n                        :op4 \"Son\")\n                  :ARG0-of (o / own-01\n                        :ARG1 (f / field))))\n      :op2 (s / sack-01\n            :ARG1 (m / man)))",
      "# ::snt  Passer - by who used mobile phone to snap photo branded act ' disgusting ' Tesco : Vegetables undergo ' extensive assessment ' before hitting shelves . \n(m / multi-sentence\n      :snt1 (p / person\n            :ARG0-of (p2 / pass-by-17)\n            :ARG0-of (u / use-01\n                  :ARG1 (p3 / phone\n                        :mod (m2 / mobile))\n                  :ARG2 (s / snap-03\n                        :ARG0 p\n                        :ARG1 (a / act-02\n                              :ARG1-of (b / brand-01\n                                    :ARG2 (d / disgust-01))\n                              :mod (p4 / photo))))\n            :mod (c / company\n                  :name (n / name\n                        :op1 \"Tesco\")))\n      :snt2 (u2 / undergo-28\n            :ARG1 (v / vegetable)\n            :ARG2 (a2 / assess-01\n                  :ARG1 v\n                  :ARG1-of (e / extensive-03))\n            :time (b2 / before\n                  :op1 (h / hit-01\n                        :ARG1 (s2 / shelf)))))"
    ],
    "tree": [
      "(c / catch-03\n   :ARG1 (p2 / person\n             :ARG0 (w / work-01)))",
      "(c / catch-03\n   :ARG0 (m / member\n            :part (p / public))\n   :ARG1 (p2 / person\n             :ARG0 (w / work-01)))",
      "(c / catch-03\n   :ARG0 (m / member\n            :part (p / public))\n   :ARG2 (c2 / camera))",
      "(c / catch-03\n   :ARG1 (p2 / person\n             :ARG0 (w / work-01))\n   :ARG2 (c2 / camera))",
      "(a / and\n   :op1 (a2 / alert-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"TH\"\n                              :op2 \"Clements\"\n                              :op3 \"&\"\n                              :op4 \"Son\"))))",
      "(a / and\n   :op1 (a2 / alert-01\n            :ARG1 (p / person\n                     :ARG0 (o / own-01\n                              :ARG1 (f / field)))))",
      "(a / and\n   :op2 (s / sack-01\n           :ARG1 (m / man)))",
      "(a / and\n   :op1 (a2 / alert-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"TH\"\n                              :op2 \"Clements\"\n                              :op3 \"&\"\n                              :op4 \"Son\")))\n   :op2 (s / sack-01\n           :ARG1 (m / man)))",
      "(a / and\n   :op1 (a2 / alert-01\n            :ARG1 (p / person\n                     :ARG0 (o / own-01\n                              :ARG1 (f / field))))\n   :op2 (s / sack-01\n           :ARG1 (m / man)))",
      "(m / multi-sentence\n   :snt1 (p / person\n            :ARG0 (p2 / pass-by-17)))",
      "(m / multi-sentence\n   :snt1 (p / person\n            :ARG0 (u / use-01\n                     :ARG1 (p3 / phone\n                               :mod (m2 / mobile)))))",
      "(m / multi-sentence\n   :snt1 (p / person\n            :mod (c / company\n                    :name (n / name\n                             :op1 \"Tesco\"))))",
      "(m / multi-sentence\n   :snt1 (p / person\n            :ARG0 (u / use-01\n                     :ARG2 (s / snap-03\n                              :ARG1 (a / act-02\n                                       :ARG1 (b / brand-01\n                                                :ARG2 (d / disgust-01)))))))"
    ],
    "smus": [
      "Work gets caught.",
      "A member of the public has caught the worker.",
      "A member of the public has caught the worker on camera.",
      "The worker was caught on camera.",
      "TH Clements & Son, the owner of the field.",
      "The field owner was alerted and the man was sacked.",
      "TH Clements & Son alerted.",
      "And the field owners were alerted.",
      "The owner of the field.",
      "People who used a mobile phone. Vegetables undergo assessment.",
      "People who used to snap a photo act. Underwent a process before hitting the shelves.",
      "Vegetables undergo an assessment.",
      "People who used to snap an act of being branded disgusting. Vegetables undergo."
    ]
  },
  {
    "instance_id": "realsumm-34",
    "summary": "<t> Tim Stanley : Muhammadu Buhar won Nigeria vote on campaign against corruption . </t> <t> Buhar 's an ex - dictator , but there 's reason for optimism . </t> <t> dictator says Jonathan administration failed to address corruption , poverty and rise of Boko Haram . </t> <t> Buhar may be tonic to years of misrule . </t>",
    "summary_trees": [
      "# ::snt  Tim Stanley : Muhammadu Buhar won Nigeria vote on campaign against corruption . \n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Tim\"\n                  :op2 \"Stanley\"))\n      :ARG1 (w / win-01\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Muhammadu\"\n                        :op2 \"Buhar\"))\n            :ARG1 (v / vote-01)\n            :ARG2 (c / country\n                  :name (n3 / name\n                        :op1 \"Nigeria\"))\n            :ARG1-of (c2 / cause-01\n                  :ARG0 (c3 / campaign-01\n                        :ARG0 p2\n                        :ARG1 (a / against\n                              :op1 (c4 / corrupt-01))))))",
      "# ::snt  Buhar 's an ex - dictator , but there 's reason for optimism . \n(h / have-concession-91\n      :ARG1 (r / reason\n            :ARG0-of (c / cause-01\n                  :ARG1 (o / optimism)))\n      :ARG2 (d / dictator\n            :domain (p / person\n                  :name (n / name\n                        :op1 \"Buhar\"))\n            :time (e / ex)))",
      "# ::snt  dictator says Jonathan administration failed to address corruption , poverty and rise of Boko Haram . \n(s / say-01\n      :ARG0 (d / dictator)\n      :ARG1 (f / fail-01\n            :ARG1 (g / government-organization\n                  :ARG0-of (a / administrate-01)\n                  :mod (p / person\n                        :name (n / name\n                              :op1 \"Jonathan\")))\n            :ARG2 (a2 / address-02\n                  :ARG0 g\n                  :ARG1 (a3 / and\n                        :op1 (c / corruption)\n                        :op2 (p2 / poor)\n                        :op3 (r / rise-01\n                              :ARG1 (c2 / criminal-organization\n                                    :name (n2 / name\n                                          :op1 \"Boko\"\n                                          :op2 \"Hararma\")))))))",
      "# ::snt  Buhar may be tonic to years of misrule . \n(p / possible-01\n      :ARG1 (t / tonic\n            :beneficiary (m / misrule\n                  :duration (m2 / multiple\n                        :op1 (t2 / temporal-quantity\n                              :quant 1\n                              :unit (y / year))))\n            :domain (p2 / person\n                  :name (n / name\n                        :op1 \"Buhar\"))))"
    ],
    "tree": [
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tim\"\n                     :op2 \"Stanley\")))",
      "(s / say-01\n   :ARG1 (w / win-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Muhammadu\"\n                                :op2 \"Buhar\"))))",
      "(s / say-01\n   :ARG1 (w / win-01\n            :ARG1 (v / vote-01)))",
      "(s / say-01\n   :ARG1 (w / win-01\n            :ARG2 (c / country\n                     :name (n3 / name\n                               :op1 \"Nigeria\"))))",
      "(s / say-01\n   :ARG1 (w / win-01\n            :ARG1 (c2 / cause-01\n                      :ARG0 (c3 / campaign-01\n                                :ARG0 (p2 / person :name (n2 / name :op1 \"Muhammadu\" :op2 \"Buhar\"))))))",
      "(h / have-concession-91\n   :ARG1 (r / reason\n            :ARG0 (c / cause-01\n                     :ARG1 (o / optimism))))",
      "(h / have-concession-91\n   :ARG2 (d / dictator\n            :domain (p / person\n                       :name (n / name\n                                :op1 \"Buhar\"))))",
      "(h / have-concession-91\n   :ARG1 (r / reason\n            :ARG0 (c / cause-01\n                     :ARG1 (o / optimism)))\n   :ARG2 (d / dictator\n            :domain (p / person\n                       :name (n / name\n                                :op1 \"Buhar\"))))",
      "(s / say-01\n   :ARG1 (f / fail-01\n            :ARG1 (g / government-organization\n                     :ARG0 (a / administrate-01))))",
      "(s / say-01\n   :ARG1 (f / fail-01\n            :ARG2 (a2 / address-02\n                      :ARG0 (g / government-organization))))",
      "(s / say-01\n   :ARG1 (f / fail-01\n            :ARG1 (g / government-organization\n                     :mod (p / person\n                             :name (n / name\n                                      :op1 \"Jonathan\")))))",
      "(s / say-01\n   :ARG1 (f / fail-01\n            :ARG2 (a2 / address-02\n                      :ARG1 (c / corruption))))",
      "(s / say-01\n   :ARG1 (f / fail-01\n            :ARG2 (a2 / address-02\n                      :ARG1 (p2 / poor))))",
      "(p / possible-01\n   :ARG1 (t / tonic\n            :beneficiary (m / misrule\n                            :duration (m2 / multiple\n                                          :op1 (t2 / temporal-quantity\n                                                   :quant 1)))))",
      "(p / possible-01\n   :ARG1 (t / tonic\n            :domain (p2 / person\n                        :name (n / name\n                                 :op1 \"Buhar\"))))",
      "(p / possible-01\n   :ARG1 (t / tonic\n            :beneficiary (m / misrule\n                            :duration (m2 / multiple\n                                          :op1 (t2 / temporal-quantity\n                                                   :unit (y / year))))))",
      "(t / tonic\n   :beneficiary (m / misrule\n                   :duration (m2 / multiple\n                                 :op1 (t2 / temporal-quantity\n                                          :unit (y / year)))))"
    ],
    "smus": [
      "Muhammadu Buhar won.",
      "Nigeria won.",
      "The campaign against corruption won, said the winner.",
      "Votes won.",
      "@Tim Stanley,",
      "Buhar is an ex-dictator.",
      "There is reason to be optimistic though.",
      "Buhar",
      "Jonathan administration",
      "Corruption and the rise of the Boko Hararma",
      "The dictator says the administration failed.",
      "The administration failed to address corruption.",
      "failed to address poverty.",
      "Misrule for years.",
      "A tonic for years of misrule.",
      "years",
      "Buhar may have been a tonic."
    ]
  },
  {
    "instance_id": "realsumm-35",
    "summary": "<t> Bulgaria 's Black Sea resorts cheaper than hotspots in Italy , Spain and Turkey . </t> <t> Researchers found cheapest destination using ' imaginary shopping basket ' Cheap prices are driven by low exchange rates and country 's high inflation . </t> <t> country most popular resort of Sunny Beach copies those of Spain and Greece . </t>",
    "summary_trees": [
      "# ::snt  Bulgaria 's Black Sea resorts cheaper than hotspots in Italy , Spain and Turkey . \n(h / have-degree-91\n      :ARG1 (r / resort\n            :location (s / sea\n                  :name (n / name\n                        :op1 \"Black\"\n                        :op2 \"Sea\"))\n            :poss (c / country\n                  :name (n2 / name\n                        :op1 \"Bulgaria\")))\n      :ARG2 (c2 / cheap-02\n            :ARG1 r)\n      :ARG3 (m / more)\n      :ARG4 (h2 / hotspot\n            :location (a / and\n                  :op1 (c3 / country\n                        :name (n3 / name\n                              :op1 \"Italy\"))\n                  :op2 (c4 / country\n                        :name (n4 / name\n                              :op1 \"Spain\"))\n                  :op3 (c5 / country\n                        :name (n5 / name\n                              :op1 \"Turkey\")))))",
      "# ::snt  Researchers found cheapest destination using ' imaginary shopping basket ' Cheap prices are driven by low exchange rates and country 's high inflation . \n(m / multi-sentence\n      :snt1 (f / find-01\n            :ARG0 (p / person\n                  :ARG0-of (r / research-01))\n            :ARG1 (d / destination\n                  :ARG1-of (h / have-degree-91\n                        :ARG2 (c / cheap-02\n                              :ARG1 d)\n                        :ARG3 (m2 / most)))\n            :manner (u / use-01\n                  :ARG0 p\n                  :ARG1 (b / basket\n                        :mod (s / shop-01)\n                        :mod (ii / imaginary))))\n      :snt2 (d2 / drive-02\n            :ARG0 (a / and\n                  :op1 (r2 / rate\n                        :ARG1-of (l / low-04)\n                        :mod (e / exchange-01))\n                  :op2 (ii2 / inflate-01\n                        :ARG1 (c2 / country)\n                        :ARG1-of (h2 / high-02)))\n            :ARG1 (p2 / price-01\n                  :ARG1-of (c3 / cheap-02))))",
      "# ::snt  country most popular resort of Sunny Beach copies those of Spain and Greece . \n(c / copy-01\n      :ARG1 (r / resort\n            :poss (b / beach\n                  :name (n / name\n                        :op1 \"Sunny\"\n                        :op2 \"Beach\"))\n            :ARG1-of (h / have-degree-91\n                  :ARG2 (p / popular-02\n                        :ARG1 r)\n                  :ARG3 (m / most)\n                  :ARG5 (r2 / resort\n                        :poss (a / and\n                              :op1 (c2 / country\n                                    :name (n2 / name\n                                          :op1 \"Spain\"))\n                              :op2 (c3 / country\n                                    :name (n3 / name\n                                          :op1 \"Greece\"))))))\n      :ARG2 r2)"
    ],
    "tree": [
      "(h / have-degree-91\n   :ARG2 (c2 / cheap-02\n             :ARG1 (r / resort)))",
      "(h / have-degree-91\n   :ARG4 (h2 / hotspot\n             :location (c3 / country\n                           :name (n3 / name\n                                     :op1 \"Italy\"))))",
      "(m / multi-sentence\n   :snt1 (f / find-01\n            :ARG0 (p / person\n                     :ARG0 (r / research-01))))",
      "(m / multi-sentence\n   :snt1 (f / find-01\n            :ARG1 (d / destination\n                     :ARG1 (h / have-degree-91\n                              :ARG2 (c / cheap-02\n                                       :ARG1 d)))))",
      "(m / multi-sentence\n   :snt1 (f / find-01\n            :manner (u / use-01\n                       :ARG0 (p / person))))",
      "(m / multi-sentence\n   :snt1 (f / find-01\n            :manner (u / use-01\n                       :ARG1 (b / basket\n                                :mod (s / shop-01)))))",
      "(m / multi-sentence\n   :snt1 (f / find-01\n            :ARG1 (d / destination\n                     :ARG1 (h / have-degree-91\n                              :ARG3 (m2 / most)))))",
      "(c / copy-01\n   :ARG1 (r / resort\n            :ARG1 (h / have-degree-91\n                     :ARG2 (p / popular-02\n                              :ARG1 r))))",
      "(c / copy-01\n   :ARG1 (r / resort\n            :ARG1 (h / have-degree-91\n                     :ARG5 (r2 / resort\n                               :poss (c3 / country\n                                         :name (n3 / name\n                                                   :op1 \"Greece\"))))))"
    ],
    "smus": [
      "Bulgaria's Black Sea resorts",
      "Hotspots in Turkey",
      "Using an imaginary basket found. Low rates driven.",
      "Found a cheap destination, driven by low rates.",
      "- Found using shopping baskets * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "Cheap prices are driven by inflation in the country.",
      "The researchers found a cheap destination using a basket.",
      "Spain's resort",
      "Sunny Beach is a popular resort."
    ]
  },
  {
    "instance_id": "realsumm-36",
    "summary": "<t> WARNING : GRAPHIC CONTENT . </t> <t> Series of photos appear to show the beheading of a man in Hama in Syria . </t> <t> Man is handcuffed and blindfolded as man is led from a van to area of land . </t> <t> man is surrounded by men with guns and executioner with a meat cleaver . </t> <t> It is claimed the man was beheaded because man is an alleged ' blasphemer ' </t>",
    "summary_trees": [
      "# ::snt  WARNING : GRAPHIC CONTENT . \n(w / warn-01\n      :ARG1 (c / content\n            :mod (g / graphic)))",
      "# ::snt  Series of photos appear to show the beheading of a man in Hama in Syria . \n(a / appear-02\n      :ARG1 (s / show-01\n            :ARG0 (s2 / series\n                  :consist-of (p / photo))\n            :ARG1 (b / behead-01\n                  :ARG1 (m / man)\n                  :location (c / city\n                        :name (n / name\n                              :op1 \"Hama\")\n                        :location (c2 / country\n                              :name (n2 / name\n                                    :op1 \"Syria\"))))))",
      "# ::snt  Man is handcuffed and blindfolded as man is led from a van to area of land . \n(a / and\n      :op1 (h / handcuff-01\n            :ARG1 (m / man))\n      :op2 (b / blindfold-01\n            :ARG1 m)\n      :time (l / lead-01\n            :ARG1 m\n            :ARG3 (v / van)\n            :ARG4 (a2 / area\n                  :mod (l2 / land))))",
      "# ::snt  man is surrounded by men with guns and executioner with a meat cleaver . \n(s / surround-01\n      :ARG1 (a / and\n            :op1 (m / man\n                  :ARG0-of (h / have-03\n                        :ARG1 (g / gun)))\n            :op2 (p / person\n                  :ARG0-of (e / execute-01)\n                  :ARG0-of (h2 / have-03\n                        :ARG1 (c / cleaver\n                              :purpose (m2 / meat)))))\n      :ARG2 (m3 / man))",
      "# ::snt  It is claimed the man was beheaded because man is an alleged ' blasphemer ' \n(c / claim-01\n      :ARG1 (b / behead-01\n            :ARG1 (m / man)\n            :ARG1-of (c2 / cause-01\n                  :ARG0 (b2 / blaspheme-01\n                        :ARG0 m\n                        :ARG1-of (a / allege-01)))))"
    ],
    "tree": [
      "(w / warn-01\n   :ARG1 (c / content\n            :mod (g / graphic)))",
      "(a / appear-02\n   :ARG1 (s / show-01\n            :ARG1 (b / behead-01\n                     :ARG1 (m / man))))",
      "(a / appear-02\n   :ARG1 (s / show-01\n            :ARG1 (b / behead-01\n                     :location (c / city\n                                  :name (n / name\n                                           :op1 \"Hama\")))))",
      "(a / appear-02\n   :ARG1 (s / show-01\n            :ARG1 (b / behead-01\n                     :location (c / city\n                                  :location (c2 / country\n                                                :name (n2 / name\n                                                          :op1 \"Syria\"))))))",
      "(s / show-01\n   :ARG0 (s2 / series\n             :consist-of (p / photo)))",
      "(a / and\n   :op1 (h / handcuff-01\n           :ARG1 (m / man)))",
      "(a / and\n   :op2 (b / blindfold-01\n           :ARG1 (m / man)))",
      "(a / and\n   :time (l / lead-01\n            :ARG1 (m / man)))",
      "(a / and\n   :time (l / lead-01\n            :ARG3 (v / van)))",
      "(a / and\n   :time (l / lead-01\n            :ARG4 (a2 / area\n                      :mod (l2 / land))))",
      "(s / surround-01\n   :ARG1 (m / man\n            :ARG0 (h / have-03\n                     :ARG1 (g / gun))))",
      "(s / surround-01\n   :ARG1 (p / person\n            :ARG0 (e / execute-01)))",
      "(s / surround-01\n   :ARG1 (p / person\n            :ARG0 (h2 / have-03\n                      :ARG1 (c / cleaver\n                               :purpose (m2 / meat)))))",
      "(s / surround-01\n   :ARG1 (m / man\n            :ARG0 (h / have-03\n                     :ARG1 (g / gun)))\n   :ARG2 (m3 / man))",
      "(s / surround-01\n   :ARG1 (p / person\n            :ARG0 (e / execute-01))\n   :ARG2 (m3 / man))",
      "(c / claim-01\n   :ARG1 (b / behead-01\n            :ARG1 (m / man)))",
      "(c / claim-01\n   :ARG1 (b / behead-01\n            :ARG1 (c2 / cause-01\n                      :ARG0 (b2 / blaspheme-01\n                                :ARG0 (m / man)))))",
      "(c / claim-01\n   :ARG1 (b / behead-01\n            :ARG1 (c2 / cause-01\n                      :ARG0 (b2 / blaspheme-01\n                                :ARG1 (a / allege-01)))))",
      "(c2 / cause-01\n    :ARG0 (b2 / blaspheme-01\n              :ARG0 (m / man)))",
      "(c2 / cause-01\n    :ARG0 (b2 / blaspheme-01\n              :ARG1 (a / allege-01)))"
    ],
    "smus": [
      "Graphic Content Warning:",
      "The photo series will show the beheading in Hama.",
      "The man was beheaded in Hama.",
      "The photos appear to be a series of them.",
      "Hama, Syria",
      "and the man was blindfolded.",
      "And when the land area was led, the man was blindfolded.",
      "When led, the man was handcuffed and blindfolded.",
      "And the man was handcuffed as the van led.",
      "led to a land area.",
      "And men with guns.",
      "People surrounded by meat cleaver.",
      "The executioner was surrounded by men.",
      "The men were surrounded by men with guns.",
      "and the executioner.",
      "The man was claimed to have been beheaded.",
      "It is claimed that the beheadings were done because of the blasphemy of the man.",
      "It is claimed that the beheadings were done because of the alleged blasphemy.",
      "Because of the man's blasphemy.",
      "Because of the alleged blasphemy."
    ]
  },
  {
    "instance_id": "realsumm-37",
    "summary": "<t> Denise and Glen Higgs thought they 'd never have children . </t> <t> Higgs was made infertile due to cancer treatment , but they tried IVF . </t> <t> Couple from of Braunton , Devon , had Mazy , born three years ago . </t> <t> Tried again using the same batch and had twins Carter & Carson last week . </t>",
    "summary_trees": [
      "# ::snt  Denise and Glen Higgs thought they 'd never have children . \n(t / think-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Denise\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Glenn\"\n                        :op2 \"Higgs\")))\n      :ARG1 (h / have-05\n            :polarity -\n            :ARG0 a\n            :ARG1 (c / child)\n            :time (e / ever)))",
      "# ::snt  Higgs was made infertile due to cancer treatment , but they tried IVF . \n(m / make-02\n      :ARG0 (t / treat-03\n            :ARG2 (c / cancer))\n      :ARG1 (ii / infertile\n            :domain (p / person\n                  :name (n / name\n                        :op1 \"Higgs\")))\n      :concession-of (t2 / try-01\n            :ARG0 (t3 / they)\n            :ARG1 (f / fertilize-01\n                  :mod (m2 / multiple))))",
      "# ::snt  Couple from of Braunton , Devon , had Mazy , born three years ago . \n(h / have-05\n      :ARG0 (c / couple\n            :source (c2 / city\n                  :name (n / name\n                        :op1 \"Braunton\")\n                  :location (c3 / county\n                        :name (n2 / name\n                              :op1 \"Devon\"))))\n      :ARG1 (p / person\n            :name (n3 / name\n                  :op1 \"Mazy\")\n            :ARG1-of (b / bear-02\n                  :time (b2 / before\n                        :op1 (n4 / now)\n                        :quant (t / temporal-quantity\n                              :quant 3\n                              :unit (y / year))))))",
      "# ::snt  Tried again using the same batch and had twins Carter & Carson last week . \n(a / and\n      :op1 (t / try-01\n            :ARG0 (ii / i)\n            :mod (a2 / again)\n            :manner (u / use-01\n                  :ARG0 ii\n                  :ARG1 (b / batch\n                        :ARG1-of (s / same-01))))\n      :op2 (h / have-05\n            :ARG0 ii\n            :ARG1 (a3 / and\n                  :op1 (p / person\n                        :name (n / name\n                              :op1 \"Carter\"))\n                  :op2 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Carson\"))\n                  :mod (t2 / twin))\n            :time (w / week\n                  :mod (l / last))))"
    ],
    "tree": [
      "(t / think-01\n   :ARG1 (h / have-05\n            :ARG0 (a / and)))",
      "(t / think-01\n   :ARG1 (h / have-05\n            :ARG1 (c / child)))",
      "(m / make-02\n   :ARG0 (t / treat-03\n            :ARG2 (c / cancer)))",
      "(m / make-02\n   :ARG1 (ii / infertile\n             :domain (p / person\n                        :name (n / name\n                                 :op1 \"Higgs\"))))",
      "(m / make-02\n   :concession (t2 / try-01\n                   :ARG0 (t3 / they)))",
      "(m / make-02\n   :concession (t2 / try-01\n                   :ARG1 (f / fertilize-01\n                            :mod (m2 / multiple))))",
      "(h / have-05\n   :ARG0 (c / couple\n            :source (c2 / city\n                        :name (n / name\n                                 :op1 \"Braunton\"))))",
      "(h / have-05\n   :ARG0 (c / couple\n            :source (c2 / city\n                        :location (c3 / county\n                                      :name (n2 / name\n                                                :op1 \"Devon\")))))",
      "(h / have-05\n   :ARG1 (p / person\n            :name (n3 / name\n                      :op1 \"Mazy\")))",
      "(a / and\n   :op1 (t / try-01\n           :ARG0 (ii / i)))",
      "(a / and\n   :op1 (t / try-01\n           :mod (a2 / again)))",
      "(a / and\n   :op1 (t / try-01\n           :manner (u / use-01\n                      :ARG0 (ii / i))))",
      "(a / and\n   :op1 (t / try-01\n           :manner (u / use-01\n                      :ARG1 (b / batch\n                               :ARG1 (s / same-01)))))",
      "(a / and\n   :op2 (h / have-05\n           :ARG0 (ii / i)))"
    ],
    "smus": [
      "Denise and Glenn Higgs",
      "Denise thought.",
      "Although multiple fertilization was tried, cancer treatment had made Higgs infertile.",
      "Higgs was infertile.",
      "Multiple fertilization tried.",
      "Made, though they tried.",
      "The couple from Braunton had mazy.",
      "The couple from Devon had a child born three years earlier.",
      "Years ago.",
      "tried again and had Carson.",
      "Tryd using the same batch and had Carter.",
      "And had Carson.",
      "And Carter.",
      "I've tried again."
    ]
  },
  {
    "instance_id": "realsumm-38",
    "summary": "<t> Speed camera discovered pointing at house in Handsworth , Birmingham . </t> <t> Fixed cameras switched off across the West Midlands in Spring of 2013 . </t> <t> Site is not going to be part of a new trial using digital technology . </t> <t> Obsolete camera may now be taken down after engineers examine device . </t>",
    "summary_trees": [
      "# ::snt  Speed camera discovered pointing at house in Handsworth , Birmingham . \n(d / discover-01\n      :ARG1 (c / camera\n            :mod (s / speed)\n            :ARG0-of (p / point-01\n                  :ARG2 (h / house\n                        :location (c2 / city-district\n                              :name (n / name\n                                    :op1 \"Handsworth\")\n                              :part-of (c3 / city\n                                    :name (n2 / name\n                                          :op1 \"Birmingham\")))))))",
      "# ::snt  Fixed cameras switched off across the West Midlands in Spring of 2013 . \n(s / switch-off-04\n      :ARG1 (c / camera\n            :ARG1-of (f / fix-03))\n      :location (a / across\n            :op1 (c2 / country-region\n                  :name (n / name\n                        :op1 \"West\"\n                        :op2 \"Midlands\")))\n      :time (d / date-entity\n            :year 2013\n            :season (s2 / spring)))",
      "# ::snt  Site is not going to be part of a new trial using digital technology . \n(h / have-part-91\n      :polarity -\n      :ARG1 (t / try-02\n            :ARG1-of (n / new-01)\n            :ARG0-of (u / use-01\n                  :ARG1 (t2 / technology\n                        :mod (d / digit))))\n      :ARG2 (s / site))",
      "# ::snt  Obsolete camera may now be taken down after engineers examine device . \n(p / possible-01\n      :ARG1 (t / take-down-22\n            :ARG1 (c / camera\n                  :mod (o / obsolete))\n            :time (a / after\n                  :op1 (e / examine-01\n                        :ARG0 (p2 / person\n                              :ARG0-of (e2 / engineer-01))\n                        :ARG1 (d / device))))\n      :time (n / now))"
    ],
    "tree": [
      "(d / discover-01\n   :ARG1 (c / camera\n            :mod (s / speed)))",
      "(d / discover-01\n   :ARG1 (c / camera\n            :ARG0 (p / point-01\n                     :ARG2 (h / house\n                              :location (c2 / city-district\n                                            :name (n / name\n                                                     :op1 \"Handsworth\"))))))",
      "(d / discover-01\n   :ARG1 (c / camera\n            :ARG0 (p / point-01\n                     :ARG2 (h / house\n                              :location (c2 / city-district\n                                            :part (c3 / city\n                                                      :name (n2 / name\n                                                                :op1 \"Birmingham\")))))))",
      "(c / camera\n   :ARG0 (p / point-01\n            :ARG2 (h / house\n                     :location (c2 / city-district\n                                   :name (n / name\n                                            :op1 \"Handsworth\")))))",
      "(c / camera\n   :ARG0 (p / point-01\n            :ARG2 (h / house\n                     :location (c2 / city-district\n                                   :part (c3 / city\n                                             :name (n2 / name\n                                                       :op1 \"Birmingham\"))))))",
      "(s / switch-off-04\n   :ARG1 (c / camera\n            :ARG1 (f / fix-03)))",
      "(s / switch-off-04\n   :location (a / across\n                :op1 (c2 / country-region\n                         :name (n / name\n                                  :op1 \"West\"\n                                  :op2 \"Midlands\"))))",
      "(s / switch-off-04\n   :time (d / date-entity\n            :year 2013))",
      "(s / switch-off-04\n   :time (d / date-entity\n            :season (s2 / spring)))",
      "(s / switch-off-04\n   :ARG1 (c / camera\n            :ARG1 (f / fix-03))\n   :location (a / across\n                :op1 (c2 / country-region\n                         :name (n / name\n                                  :op1 \"West\"\n                                  :op2 \"Midlands\"))))",
      "(h / have-part-91\n   :ARG1 (t / try-02\n            :ARG1 (n / new-01)))",
      "(p / possible-01\n   :ARG1 (t / take-down-22\n            :ARG1 (c / camera\n                     :mod (o / obsolete))))",
      "(p / possible-01\n   :ARG1 (t / take-down-22\n            :time (a / after\n                     :op1 (e / examine-01\n                             :ARG0 (p2 / person\n                                       :ARG0 (e2 / engineer-01))))))",
      "(p / possible-01\n   :ARG1 (t / take-down-22\n            :time (a / after\n                     :op1 (e / examine-01\n                             :ARG1 (d / device)))))",
      "(p / possible-01\n   :ARG1 (t / take-down-22\n            :time (a / after\n                     :op1 (e / examine-01\n                             :ARG0 (p2 / person\n                                       :ARG0 (e2 / engineer-01)))))\n   :time (n / now))"
    ],
    "smus": [
      "The speed camera was discovered.",
      "House in Handsworth.",
      "birmingham",
      "A camera pointing at a house in birmingham.",
      "Point to a house in Birmingham.",
      "The fixed camera switched off in spring.",
      "Fixed cameras switched off across the West Midlands in spring.",
      "Switched off across the West Midlands.",
      "West Midlands (WM)",
      "switched off in 2013.",
      "using digital technology",
      "Engineers examine.",
      "The obsolete camera is taken down after the devices are examined.",
      "Now, after the engineers examine, they can be taken down.",
      "After the devices are examined."
    ]
  },
  {
    "instance_id": "realsumm-39",
    "summary": "<t> Charles Terreni , 18 , was found dead March 18 at a frat house in Columbia . </t> <t> Terreni was a USC freshman and a member of the Pi Kappa Alpha house . </t> <t> Coroner identified cause of death as alcohol poisoning . </t> <t> Toxicology tests showed freshman had a blood alcohol of .375 . </t> <t> Neighbors said there was a large party ; a beer keg was still visible outside . </t>",
    "summary_trees": [
      "# ::snt  Charles Terreni , 18 , was found dead March 18 at a frat house in Columbia . \n(f / find-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Charles\"\n                  :op2 \"Terreni\")\n            :age (t / temporal-quantity\n                  :quant 18\n                  :unit (y / year)))\n      :ARG2 (d / die-01\n            :ARG1 p)\n      :time (d2 / date-entity\n            :day 18\n            :month 3)\n      :location (h / house\n            :mod (f2 / frat)\n            :location (c / city\n                  :name (n2 / name\n                        :op1 \"Columbia\"))))",
      "# ::snt  Terreni was a USC freshman and a member of the Pi Kappa Alpha house . \n(a / and\n      :op1 (f / freshman\n            :domain (p / person\n                  :name (n / name\n                        :op1 \"Terreni\"))\n            :location (u / university\n                  :name (n2 / name\n                        :op1 \"USC\")))\n      :op2 (h / have-org-role-91\n            :ARG0 p\n            :ARG1 (h2 / house\n                  :name (n3 / name\n                        :op1 \"Pi\"\n                        :op2 \"Kappa\"\n                        :op3 \"Alpha\"))\n            :ARG2 (m / member)))",
      "# ::snt  Coroner identified cause of death as alcohol poisoning . \n(ii / identify-01\n      :ARG0 (c / coroner)\n      :ARG1 (c2 / cause-01\n            :ARG1 (d / die-01))\n      :ARG2 (p / poison-02\n            :ARG1 (a / alcohol)))",
      "# ::snt  Toxicology tests showed freshman had a blood alcohol of .375 . \n(s / show-01\n      :ARG0 (t / test-01\n            :mod (t2 / toxicology))\n      :ARG1 (h / have-03\n            :ARG0 (f / freshman)\n            :ARG1 (a / alcohol\n                  :mod (b / blood)\n                  :quant (c / concentration-quantity\n                        :quant.375 (f2 / fluid-ounce)))))",
      "# ::snt  Neighbors said there was a large party ; a beer keg was still visible outside . \n(a / and\n      :op1 (s / say-01\n            :ARG0 (n / neighbor)\n            :ARG1 (p / party-01\n                  :mod (l / large)))\n      :op2 (s2 / see-01\n            :ARG1 (k / keg\n                  :mod (b / beer))\n            :mod (s3 / still)\n            :location (o / outside)))"
    ],
    "tree": [
      "(f / find-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Charles\"\n                     :op2 \"Terreni\")))",
      "(f / find-01\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :quant 18)))",
      "(f / find-01\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :unit (y / year))))",
      "(f / find-01\n   :ARG2 (d / die-01\n            :ARG1 (p / person :name (n / name :op1 \"Charles\" :op2 \"Terreni\")))))",
      "(f / find-01\n   :time (d2 / date-entity\n             :day 18))",
      "(a / and\n   :op1 (f / freshman\n           :domain (p / person\n                      :name (n / name\n                               :op1 \"Terreni\"))))",
      "(a / and\n   :op1 (f / freshman\n           :location (u / university\n                        :name (n2 / name\n                                  :op1 \"USC\"))))",
      "(a / and\n   :op2 (h / have-org-role-91\n           :ARG0 (p / person\n                    :name (n / name\n                             :op1 \"Terreni\"))))",
      "(a / and\n   :op2 (h / have-org-role-91\n           :ARG1 (h2 / house\n                     :name (n3 / name\n                               :op1 \"Pi\"\n                               :op2 \"Kappa\"\n                               :op3 \"Alpha\"))))",
      "(a / and\n   :op2 (h / have-org-role-91\n           :ARG2 (m / member)))",
      "(ii / identify-01\n    :ARG1 (c2 / cause-01\n              :ARG1 (d / die-01)))",
      "(ii / identify-01\n    :ARG2 (p / poison-02\n             :ARG1 (a / alcohol)))",
      "(ii / identify-01\n    :ARG0 (c / coroner)\n    :ARG1 (c2 / cause-01\n              :ARG1 (d / die-01)))",
      "(ii / identify-01\n    :ARG0 (c / coroner)\n    :ARG2 (p / poison-02\n             :ARG1 (a / alcohol)))",
      "(ii / identify-01\n    :ARG1 (c2 / cause-01\n              :ARG1 (d / die-01))\n    :ARG2 (p / poison-02\n             :ARG1 (a / alcohol)))",
      "(s / show-01\n   :ARG0 (t / test-01\n            :mod (t2 / toxicology)))",
      "(s / show-01\n   :ARG1 (h / have-03\n            :ARG1 (a / alcohol\n                     :mod (b / blood))))",
      "(s / show-01\n   :ARG0 (t / test-01\n            :mod (t2 / toxicology))\n   :ARG1 (h / have-03\n            :ARG0 (f / freshman)))",
      "(a / and\n   :op1 (s / say-01\n           :ARG0 (n / neighbor)))",
      "(a / and\n   :op2 (s2 / see-01\n            :ARG1 (k / keg\n                     :mod (b / beer))))",
      "(a / and\n   :op2 (s2 / see-01\n            :location (o / outside)))"
    ],
    "smus": [
      "Charles Terreni was found dead on the 18th in a frat house.",
      "Columbia",
      "The year old was found in March in a frat house.",
      "Charles Terreni was found dead in a Columbia house.",
      "The 18-year-old was found dead in a Columbia house.",
      "Pi Kappa Alpha house",
      "Terreni",
      "Terreni is a freshman.",
      "and a member.",
      "freshman at USC and member.",
      "The alcohol poisoning was identified.",
      "The cause of death was identified as alcohol poisoning.",
      "The cause of death was identified.",
      "The coroner identified the alcohol poisoning.",
      "The Coroner identified the cause of death.",
      "had blood alcohol.",
      "The toxicology tests showed the freshman had.",
      "Showed that the freshman had.",
      "Still seeing a beer keg.",
      "Neighbors said, still seeing.",
      "and seen from the outside."
    ]
  },
  {
    "instance_id": "realsumm-40",
    "summary": "<t> Air strikes were launched by Saudi forces a month ago against rebels . </t> <t> Saudi forces have focused on beating back Shiite Houthi rebels in Yemen . </t> <t> Prince Alwaleed Bin Talal pledged Bentleys for pilots involved in bombings . </t> <t> Talal made pledge on Wednesday after bombing raids appeared to resume , despite an official announcement that raids would be halted last night . </t>",
    "summary_trees": [
      "# ::snt  Air strikes were launched by Saudi forces a month ago against rebels . \n(l / launch-01\n      :ARG0 (f / force\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"Saudi\"\n                        :op2 \"Arabia\")))\n      :ARG1 (s / strike-01\n            :ARG0 f\n            :ARG1 (p / person\n                  :ARG0-of (r / rebel-01))\n            :path (a / air))\n      :time (b / before\n            :op1 (n2 / now)\n            :quant (t / temporal-quantity\n                  :quant 1\n                  :unit (m / month))))",
      "# ::snt  Saudi forces have focused on beating back Shiite Houthi rebels in Yemen . \n(f / focus-01\n      :ARG0 (f2 / force\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"Saudi\"\n                        :op2 \"Arabia\")))\n      :ARG2 (b / beat-back-05\n            :ARG0 f2\n            :ARG1 (p / person\n                  :mod (r / religious-group\n                        :name (n2 / name\n                              :op1 \"Shiite\"\n                              :op2 \"Hathi\"))\n                  :location (c2 / country\n                        :name (n3 / name\n                              :op1 \"Yemen\"))\n                  :ARG0-of (r2 / rebel-01))))",
      "# ::snt  Prince Alwaleed Bin Talal pledged Bentleys for pilots involved in bombings . \n(p / pledge-01\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Alwaleed\"\n                  :op2 \"Bin\"\n                  :op3 \"Talal\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (p3 / prince)))\n      :ARG2 (c / car-make\n            :name (n2 / name\n                  :op1 \"Bentley\"))\n      :beneficiary (p4 / person\n            :ARG0-of (p5 / pilot-01)\n            :ARG1-of (ii / involve-01\n                  :ARG2 (b / bomb-01))))",
      "# ::snt  Talal made pledge on Wednesday after bombing raids appeared to resume , despite an official announcement that raids would be halted last night . \n(p / pledge-01\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Talal\"))\n      :time (d / date-entity\n            :weekday (w / wednesday))\n      :time (a / after\n            :op1 (a2 / appear-02\n                  :ARG1 (r / resume-01\n                        :ARG1 (r2 / raid-01\n                              :manner (b / bomb-01)))))\n      :concession (a3 / announce-01\n            :ARG1 (h / halt-01\n                  :ARG1 r2)\n            :mod (o / official)\n            :time (d2 / date-entity\n                  :dayperiod (n2 / night)\n                  :mod (y / yesterday))))"
    ],
    "tree": [
      "(l / launch-01\n   :ARG1 (s / strike-01\n            :ARG0 (f / force)))",
      "(l / launch-01\n   :time (b / before\n            :op1 (n2 / now)))",
      "(f / focus-01\n   :ARG0 (f2 / force\n             :mod (c / country\n                     :name (n / name\n                              :op1 \"Saudi\"\n                              :op2 \"Arabia\"))))",
      "(f / focus-01\n   :ARG2 (b / beat-back-05\n            :ARG0 (f2 / force)))",
      "(f / focus-01\n   :ARG2 (b / beat-back-05\n            :ARG1 (p / person\n                     :mod (r / religious-group\n                             :name (n2 / name\n                                       :op1 \"Shiite\"\n                                       :op2 \"Hathi\")))))",
      "(f / focus-01\n   :ARG2 (b / beat-back-05\n            :ARG1 (p / person\n                     :location (c2 / country\n                                   :name (n3 / name\n                                             :op1 \"Yemen\")))))",
      "(f / focus-01\n   :ARG2 (b / beat-back-05\n            :ARG1 (p / person\n                     :ARG0 (r2 / rebel-01))))",
      "(p / pledge-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Alwaleed\"\n                      :op2 \"Bin\"\n                      :op3 \"Talal\")))",
      "(p / pledge-01\n   :ARG0 (p2 / person\n             :ARG0 (h / have-org-role-91\n                      :ARG2 (p3 / prince))))",
      "(p / pledge-01\n   :ARG2 (c / car-make\n            :name (n2 / name\n                      :op1 \"Bentley\")))",
      "(p / pledge-01\n   :beneficiary (p4 / person\n                    :ARG0 (p5 / pilot-01)))",
      "(p / pledge-01\n   :beneficiary (p4 / person\n                    :ARG1 (ii / involve-01\n                              :ARG2 (b / bomb-01))))",
      "(p / pledge-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Talal\")))",
      "(p / pledge-01\n   :time (d / date-entity\n            :weekday (w / wednesday)))",
      "(p / pledge-01\n   :concession (a3 / announce-01\n                   :ARG1 (h / halt-01\n                            :ARG1 (r2 / raid-01\n                                      :manner (b / bomb-01)))))",
      "(p / pledge-01\n   :concession (a3 / announce-01\n                   :mod (o / official)))",
      "(p / pledge-01\n   :concession (a3 / announce-01\n                   :time (d2 / date-entity\n                             :dayperiod (n2 / night))))"
    ],
    "smus": [
      "Air strikes were launched one earlier.",
      "Saudi forces launched.",
      "Shiite Hathi in Yemen.",
      "Saudi forces have focused on beating back Yemenis.",
      "Focused on beating back against rebels.",
      "Saudi Arabia (SA)",
      "Shiite Hathi.",
      "The Prince pledged the Bentleys to the pilots.",
      "Alwaleed Bin Talal pledged for the pilots.",
      "Bentleys were pledged for people involved in the bombings.",
      "- Bentleys",
      "Prince.",
      "The bomb raids appeared to resume.",
      "The pledge was made Wednesday night, despite the announcement.",
      "Talal made the pledge Wednesday despite an announcement that bomb raids had been halted.",
      "Official announcement yesterday.",
      "Talal made the pledge Wednesday despite an announcement yesterday."
    ]
  },
  {
    "instance_id": "realsumm-41",
    "summary": "<t> Brawl at Spring Gardens station in Philadelphia was captured on CCTV . </t> <t> Fight involved students from nearby Benjamin Franklin High School . </t> <t> At one point an attacker falls onto the tracks , but manages to get back up . </t> <t> After the confrontation , the victims and attackers walk onto the same train . </t>",
    "summary_trees": [
      "# ::snt  Brawl at Spring Gardens station in Philadelphia was captured on CCTV . \n(c / capture-01\n      :ARG0 (p / publication\n            :name (n / name\n                  :op1 \"CCTV\"))\n      :ARG1 (b / brawl-01\n            :location (s / station\n                  :name (n2 / name\n                        :op1 \"Spring\"\n                        :op2 \"Gardens\")\n                  :location (c2 / city\n                        :name (n3 / name\n                              :op1 \"Philadelphia\")))))",
      "# ::snt  Fight involved students from nearby Benjamin Franklin High School . \n(ii / involve-01\n      :ARG1 (p / person\n            :ARG0-of (s / study-01)\n            :source (h / high-school\n                  :name (n / name\n                        :op1 \"Benjamin\"\n                        :op2 \"Franklin\"\n                        :op3 \"High\"\n                        :op4 \"School\")\n                  :location (n2 / nearby)))\n      :ARG2 (f / fight-01))",
      "# ::snt  At one point an attacker falls onto the tracks , but manages to get back up . \n(c / contrast-01\n      :ARG1 (f / fall-01\n            :ARG1 (p / person\n                  :ARG0-of (a / attack-01))\n            :ARG4 (t / track))\n      :ARG2 (m / manage-01\n            :ARG0 p\n            :ARG1 (g / get-back-10\n                  :ARG1 p\n                  :ARG2 t))\n      :time (p2 / point\n            :quant 1))",
      "# ::snt  After the confrontation , the victims and attackers walk onto the same train . \n(w / walk-01\n      :ARG0 (a / and\n            :op1 (v / victim)\n            :op2 (p / person\n                  :ARG0-of (a2 / attack-01)))\n      :destination (t / train\n            :ARG1-of (s / same-01))\n      :time (a3 / after\n            :op1 (c / confront-01)))"
    ],
    "tree": [
      "(c / capture-01\n   :ARG0 (p / publication\n            :name (n / name\n                     :op1 \"CCTV\")))",
      "(c / capture-01\n   :ARG1 (b / brawl-01\n            :location (s / station\n                         :name (n2 / name\n                                   :op1 \"Spring\"\n                                   :op2 \"Gardens\"))))",
      "(c / capture-01\n   :ARG0 (p / publication\n            :name (n / name\n                     :op1 \"CCTV\"))\n   :ARG1 (b / brawl-01\n            :location (s / station\n                         :name (n2 / name\n                                   :op1 \"Spring\"\n                                   :op2 \"Gardens\"))))",
      "(c / capture-01\n   :ARG0 (p / publication\n            :name (n / name\n                     :op1 \"CCTV\"))\n   :ARG1 (b / brawl-01\n            :location (s / station\n                         :location (c2 / city\n                                       :name (n3 / name\n                                                 :op1 \"Philadelphia\")))))",
      "(ii / involve-01\n    :ARG1 (p / person\n             :ARG0 (s / study-01)))",
      "(ii / involve-01\n    :ARG1 (p / person\n             :source (h / high-school\n                        :name (n / name\n                                 :op1 \"Benjamin\"\n                                 :op2 \"Franklin\"\n                                 :op3 \"High\"\n                                 :op4 \"School\"))))",
      "(ii / involve-01\n    :ARG1 (p / person\n             :source (h / high-school\n                        :location (n2 / nearby))))",
      "(ii / involve-01\n    :ARG1 (p / person\n             :ARG0 (s / study-01))\n    :ARG2 (f / fight-01))",
      "(ii / involve-01\n    :ARG1 (p / person\n             :source (h / high-school\n                        :name (n / name\n                                 :op1 \"Benjamin\"\n                                 :op2 \"Franklin\"\n                                 :op3 \"High\"\n                                 :op4 \"School\")))\n    :ARG2 (f / fight-01))",
      "(c / contrast-01\n   :ARG1 (f / fall-01\n            :ARG4 (t / track)))",
      "(c / contrast-01\n   :ARG2 (m / manage-01\n            :ARG0 (p / person\n                     :ARG0 (a / attack-01))))",
      "(c / contrast-01\n   :ARG2 (m / manage-01\n            :ARG1 (g / get-back-10\n                     :ARG1 (p / person))))",
      "(w / walk-01\n   :ARG0 (p / person\n            :ARG0 (a2 / attack-01)))",
      "(w / walk-01\n   :destination (t / train\n                   :ARG1 (s / same-01)))",
      "(w / walk-01\n   :time (a3 / after\n             :op1 (c / confront-01)))",
      "(w / walk-01\n   :ARG0 (v / victim)\n   :destination (t / train\n                   :ARG1 (s / same-01)))",
      "(w / walk-01\n   :ARG0 (p / person\n            :ARG0 (a2 / attack-01))\n   :destination (t / train\n                   :ARG1 (s / same-01)))"
    ],
    "smus": [
      "Spring Gardens, Philadelphia",
      "Brawl at Spring Gardens station",
      "CCTV has captured.",
      "The brawl at the Philadelphia station was captured by CCTV.",
      "People from nearby High School.",
      "The fight involved people from nearby High School.",
      "Students from Benjamin Franklin High School.",
      "-Benjamin Franklin High School",
      "The students involved.",
      "But manages to get back on track.",
      "At one point the attacker falls but manages to get back.",
      "The attacker falls.",
      "Victims walk to the same train.",
      "The attackers walk after the confrontation.",
      "Walk after the confrontation.",
      "Victims and attackers",
      "The attackers walk."
    ]
  },
  {
    "instance_id": "realsumm-42",
    "summary": "<t> Paul and Laura Elliott met half way round at St Katharine Docks . </t> <t> Ceremony was witnessed by 80 guests . </t> <t> Pair ran across finish line under a shower of confetti . </t> <t> Returned to scene of ceremony for party later on . </t> <t> Raised \u00a3 7,000 for Cancer Research in honour of Paul 's father . </t>",
    "summary_trees": [
      "# ::snt  Paul and Laura Elliott met half way round at St Katharine Docks . \n(m / meet-03\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Paul\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Laura\"\n                        :op2 \"Elliott\")))\n      :location (r / round-03\n            :extent (h / half-way)\n            :location (p3 / port\n                  :name (n3 / name\n                        :op1 \"St\"\n                        :op2 \"Katharine\"\n                        :op3 \"Docks\"))))",
      "# ::snt  Ceremony was witnessed by 80 guests . \n(w / witness-01\n      :ARG0 (g / guest\n            :quant 80)\n      :ARG1 (c / ceremony))",
      "# ::snt  Pair ran across finish line under a shower of confetti . \n(r / run-02\n      :ARG0 (p / pair)\n      :path (a / across\n            :op1 (l / line\n                  :mod (f / finish-01)))\n      :time (s / shower-01\n            :ARG1 (c / confetti)))",
      "# ::snt  Returned to scene of ceremony for party later on . \n(r / return-01\n      :ARG4 (s / scene\n            :location-of (c / ceremony\n                  :purpose (p / party-01)))\n      :time (a / after))",
      "# ::snt  Raised \u00a3 7,000 for Cancer Research in honour of Paul 's father . \n(r / raise-02\n      :ARG1 (m / monetary-quantity\n            :quant 7000\n            :unit (p / pound))\n      :purpose (r2 / research-01\n            :ARG1 (c / cancer))\n      :manner (h / honor-01\n            :ARG1 (p2 / person\n                  :ARG0-of (h2 / have-rel-role-91\n                        :ARG1 (p3 / person\n                              :name (n / name\n                                    :op1 \"Paul\"))\n                        :ARG2 (f / father)))))"
    ],
    "tree": [
      "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Paul\")))",
      "(m / meet-03\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Laura\"\n                       :op2 \"Elliott\")))",
      "(m / meet-03\n   :location (r / round-03\n                :extent (h / half-way)))",
      "(m / meet-03\n   :location (r / round-03\n                :location (p3 / port\n                              :name (n3 / name\n                                        :op1 \"St\"\n                                        :op2 \"Katharine\"\n                                        :op3 \"Docks\"))))",
      "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Paul\"))\n   :location (r / round-03\n                :extent (h / half-way)))",
      "(w / witness-01\n   :ARG0 (g / guest\n            :quant 80))",
      "(w / witness-01\n   :ARG0 (g / guest\n            :quant 80)\n   :ARG1 (c / ceremony))",
      "(r / run-02\n   :path (a / across\n            :op1 (l / line\n                    :mod (f / finish-01))))",
      "(r / run-02\n   :time (s / shower-01\n            :ARG1 (c / confetti)))",
      "(r / run-02\n   :ARG0 (p / pair)\n   :path (a / across\n            :op1 (l / line\n                    :mod (f / finish-01))))",
      "(r / run-02\n   :ARG0 (p / pair)\n   :time (s / shower-01\n            :ARG1 (c / confetti)))",
      "(r / run-02\n   :path (a / across\n            :op1 (l / line\n                    :mod (f / finish-01)))\n   :time (s / shower-01\n            :ARG1 (c / confetti)))",
      "(r / return-01\n   :ARG4 (s / scene\n            :location (c / ceremony\n                         :purpose (p / party-01))))",
      "(r / return-01\n   :ARG4 (s / scene\n            :location (c / ceremony\n                         :purpose (p / party-01)))\n   :time (a / after))",
      "(s / scene\n   :location (c / ceremony\n                :purpose (p / party-01)))",
      "(r / raise-02\n   :purpose (r2 / research-01\n                :ARG1 (c / cancer)))",
      "(r / raise-02\n   :manner (h / honor-01\n              :ARG1 (p2 / person\n                        :ARG0 (h2 / have-rel-role-91\n                                  :ARG1 (p3 / person\n                                            :name (n / name\n                                                     :op1 \"Paul\"))))))",
      "(r / raise-02\n   :manner (h / honor-01\n              :ARG1 (p2 / person\n                        :ARG0 (h2 / have-rel-role-91\n                                  :ARG2 (f / father)))))"
    ],
    "smus": [
      "Paul met.",
      "Round at St Katharine Docks.",
      "and Laura Elliott",
      "Paul met half way round.",
      "Paul met round the St Katharine Docks.",
      "80 guests were witnessed.",
      "The Ceremony was witnessed by 80 guests.",
      "The pair ran across the finish line.",
      "ran across the finish line in a confetti shower.",
      "across the finish line.",
      "The pair ran in the confetti shower.",
      "Run during the confetti shower.",
      "The scene of the party ceremony was returned.",
      "The scene of the party ceremony was later returned.",
      "Scene from the party ceremony",
      "Raised in honor of the father.",
      "Paul.",
      "The father."
    ]
  },
  {
    "instance_id": "realsumm-43",
    "summary": "<t> Nasr Bitar spotted Google Street View car driving around last autumn . </t> <t> Decided it was ' Bitar time to shine ' with car so followed in Bitar car to get a selfie . </t> <t> Sensing the perfect moment , Bitar got out and took the snap in Mississauga . </t> <t> Picture of Nasr 's selfie and the Street View image shared 2.9million times . </t>",
    "summary_trees": [
      "# ::snt  Nasr Bitar spotted Google Street View car driving around last autumn . \n(s / spot-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Nasr\"\n                  :op2 \"Bitar\"))\n      :ARG1 (d / drive-01\n            :ARG0 (c / car-make\n                  :name (n2 / name\n                        :op1 \"Google\"\n                        :op2 \"Street\"\n                        :op3 \"View\"))\n            :ARG1 (a / around))\n      :time (d2 / date-entity\n            :season (a2 / autumn\n                  :mod (l / last))))",
      "# ::snt  Decided it was ' Bitar time to shine ' with car so followed in Bitar car to get a selfie . \n(c / cause-01\n      :ARG0 (d / decide-01\n            :ARG1 (t / time\n                  :time-of (s / shine-01\n                        :location (c2 / city\n                              :name (n / name\n                                    :op1 \"Brisbane\")))\n                  :domain (c3 / car)))\n      :ARG1 (f / follow-01\n            :ARG1 (ii / i)\n            :ARG2 (c4 / car\n                  :mod c2)\n            :purpose (g / get-01\n                  :ARG0 ii\n                  :ARG1 (s2 / selfie))))",
      "# ::snt  Sensing the perfect moment , Bitar got out and took the snap in Mississauga . \n(a / and\n      :op1 (g / get-05\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Bitar\"))\n            :ARG2 (o / out))\n      :op2 (s / snap-03\n            :ARG0 p\n            :location (c / city\n                  :name (n2 / name\n                        :op1 \"Mississauga\")))\n      :manner (s2 / sense-01\n            :ARG0 p\n            :ARG1 (m / moment\n                  :ARG1-of (p2 / perfect-02))))",
      "# ::snt  Picture of Nasr 's selfie and the Street View image shared 2.9million times . \n(a / and\n      :op1 (p / picture\n            :poss (p2 / person\n                  :name (n / name\n                        :op1 \"Nasr\")))\n      :op2 (ii / image\n            :mod (p3 / product\n                  :name (n2 / name\n                        :op1 \"Street\"\n                        :op2 \"View\"))\n            :ARG1-of (s / share-01\n                  :ARG3 (t / times\n                        :quant 2900000))))"
    ],
    "tree": [
      "(s / spot-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nasr\"\n                     :op2 \"Bitar\")))",
      "(s / spot-01\n   :ARG1 (d / drive-01\n            :ARG0 (c / car-make\n                     :name (n2 / name\n                               :op1 \"Google\"\n                               :op2 \"Street\"\n                               :op3 \"View\"))))",
      "(s / spot-01\n   :ARG1 (d / drive-01\n            :ARG1 (a / around)))",
      "(s / spot-01\n   :time (d2 / date-entity\n             :season (a2 / autumn\n                         :mod (l / last))))",
      "(s / spot-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nasr\"\n                     :op2 \"Bitar\"))\n   :ARG1 (d / drive-01\n            :ARG0 (c / car-make\n                     :name (n2 / name\n                               :op1 \"Google\"\n                               :op2 \"Street\"\n                               :op3 \"View\"))))",
      "(c / cause-01\n   :ARG1 (f / follow-01\n            :ARG1 (ii / i)))",
      "(c / cause-01\n   :ARG1 (f / follow-01\n            :ARG2 (c4 / car\n                      :mod (c2 / city\n                               :name (n / name\n                                        :op1 \"Brisbane\")))))",
      "(c / cause-01\n   :ARG1 (f / follow-01\n            :purpose (g / get-01\n                        :ARG0 (ii / i))))",
      "(a / and\n   :manner (s2 / sense-01\n               :ARG0 (p / person :name (n / name :op1 \"Bitar\"))\n               :ARG1 (m / moment)))",
      "(a / and\n   :op2 (ii / image\n            :mod (p3 / product\n                     :name (n2 / name\n                               :op1 \"Street\"\n                               :op2 \"View\"))))",
      "(a / and\n   :op2 (ii / image\n            :ARG1 (s / share-01\n                     :ARG3 (t / times\n                              :quant 2900000))))",
      "(a / and\n   :op1 (p / picture\n           :poss (p2 / person\n                     :name (n / name\n                              :op1 \"Nasr\")))\n   :op2 (ii / image\n            :mod (p3 / product\n                     :name (n2 / name\n                               :op1 \"Street\"\n                               :op2 \"View\"))))"
    ],
    "smus": [
      "A driving around was spotted last autumn.",
      "Google Street View is driving around.",
      "Last autumn Nasr Balitar spotted a Google Street View driver.",
      "Nasr biata spotted.",
      "Nasr tar spotted the driver driving around.",
      "So the car decided it was time.",
      "Followed to get a selfie.",
      "So I followed to get.",
      "Got out and took a snap, senseing the moment.",
      "Nasr's Picture",
      "Street View image",
      "and the Street View image."
    ]
  },
  {
    "instance_id": "realsumm-44",
    "summary": "<t> Rory McIlroy bidding to win McIlroy first Masters title this week at Augusta . </t> <t> The Northern Irishman finished tied for eighth place last year in Irishman best finish in Georgia . </t> <t> McIlroy looking for third straight major victory after winning The Open and USPGA Championship last year . </t> <t> One Direction star Niall Horan caddied for McIlroy in Wednesday 's Par-3 Contest . </t>",
    "summary_trees": [
      "# ::snt  Rory McIlroy bidding to win McIlroy first Masters title this week at Augusta . \n(b / bid-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Rory\"\n                  :op2 \"McIlroy\"))\n      :ARG1 (w / win-01\n            :ARG0 p\n            :ARG1 (t / title\n                  :mod (g / game\n                        :name (n2 / name\n                              :op1 \"Masters\"))\n                  :ord (o / ordinal-entity\n                        :value 1))\n            :time (w2 / week\n                  :mod (t2 / this))\n            :location (f / facility\n                  :name (n3 / name\n                        :op1 \"Augusta\"))))",
      "# ::snt  The Northern Irishman finished tied for eighth place last year in Irishman best finish in Georgia . \n(f / finish-07\n      :ARG0 (p / person\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"Northern\"\n                        :op2 \"Ireland\")))\n      :ARG2 (t / tie-01\n            :ARG1 p\n            :ARG3 (p2 / place\n                  :ord (o / ordinal-entity\n                        :value 8)))\n      :time (y / year\n            :mod (l / last))\n      :subevent-of (f2 / finish-07\n            :ARG0 p\n            :location (c2 / country\n                  :name (n2 / name\n                        :op1 \"Georgia\"))\n            :ARG1-of (h / have-degree-91\n                  :ARG2 (g / good-03\n                        :ARG1 f2)\n                  :ARG3 (m / most))))",
      "# ::snt  McIlroy looking for third straight major victory after winning The Open and USPGA Championship last year . \n(l / look-04\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"McIlroy\"))\n      :ARG1 (w / win-01\n            :ARG0 p\n            :mod (m / major)\n            :ord (o / ordinal-entity\n                  :value 3\n                  :range (s / straight)))\n      :time (a / after\n            :op1 (w2 / win-01\n                  :ARG0 p\n                  :ARG2 (a2 / and\n                        :op1 (e / event\n                              :name (n2 / name\n                                    :op1 \"The\"\n                                    :op2 \"Open\"))\n                        :op2 (e2 / event\n                              :name (n3 / name\n                                    :op1 \"USPGA\"\n                                    :op2 \"Championship\")))\n                  :time (y / year\n                        :mod (l2 / last)))))",
      "# ::snt  One Direction star Niall Horan caddied for McIlroy in Wednesday 's Par-3 Contest . \n(c / caddie-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Niall\"\n                  :op2 \"Horan\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (o / organization\n                        :name (n2 / name\n                              :op1 \"One\"\n                              :op2 \"Direction\"))\n                  :ARG2 (s / star)))\n      :ARG1 (p2 / person\n            :name (n3 / name\n                  :op1 \"McIlroy\"))\n      :subevent-of (c2 / contest-02\n            :name (n4 / name\n                  :op1 \"Par-3\")\n            :time (d / date-entity\n                  :weekday (w / wednesday))))"
    ],
    "tree": [
      "(b / bid-01\n   :ARG1 (w / win-01\n            :ARG1 (t / title\n                     :mod (g / game\n                             :name (n2 / name\n                                       :op1 \"Masters\")))))",
      "(b / bid-01\n   :ARG1 (w / win-01\n            :time (w2 / week\n                      :mod (t2 / this))))",
      "(b / bid-01\n   :ARG1 (w / win-01\n            :location (f / facility\n                         :name (n3 / name\n                                   :op1 \"Augusta\"))))",
      "(f / finish-07\n   :ARG2 (t / tie-01\n            :ARG1 (p / person)))",
      "(f / finish-07\n   :ARG2 (t / tie-01\n            :ARG3 (p2 / place\n                      :ord (o / ordinal-entity\n                              :value 8))))",
      "(f / finish-07\n   :subevent (f2 / finish-07\n                 :ARG0 (p / person)))",
      "(l / look-04\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"McIlroy\")))",
      "(l / look-04\n   :ARG1 (w / win-01\n            :ARG0 (p / person :name (n / name :op1 \"McIlroy\"))))",
      "(l / look-04\n   :ARG1 (w / win-01\n            :mod (m / major)))",
      "(l / look-04\n   :ARG1 (w / win-01\n            :ord (o / ordinal-entity\n                    :value 3)))",
      "(l / look-04\n   :ARG1 (w / win-01\n            :ord (o / ordinal-entity\n                    :range (s / straight))))",
      "(c / caddie-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Niall\"\n                     :op2 \"Horan\")))",
      "(c / caddie-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (o / organization\n                              :name (n2 / name\n                                        :op1 \"One\"\n                                        :op2 \"Direction\")))))",
      "(c / caddie-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (s / star))))",
      "(c / caddie-01\n   :ARG1 (p2 / person\n             :name (n3 / name\n                       :op1 \"McIlroy\")))",
      "(c / caddie-01\n   :subevent (c2 / contest-02\n                 :name (n4 / name\n                           :op1 \"Par-3\")))"
    ],
    "smus": [
      "bid to win the Masters title",
      "Masters",
      "Win this week.",
      "Best finish.",
      "Finish tied for 8th place with Georgia.",
      "The Northern Irish finished last year tied for 8th place.",
      "Looking after McIlroy winning.",
      "Looking to win the third after winning the Open.",
      "After winning last year, McIlroy is looking for a major victory.",
      "Looking like a third victory.",
      "After winning the USPGA Championship.",
      "One Direction",
      "One Direction caddied for McIlroy in the Par-3 Contest.",
      "Niall Horan caddied.",
      "The star caddied for McIlroy.",
      "Star."
    ]
  },
  {
    "instance_id": "realsumm-45",
    "summary": "<t> Danny Higginbotham covers Higginbotham time under Roy Keane in Higginbotham new book . </t> <t> Higginbotham played for Keane 's Sunderland during the 2007 - 08 season . </t> <t> Keane told Higginbotham players ' basically you 're s * * * ' before a game with Aston Villa . </t> <t> Higginbotham also told one player Higginbotham was ' not f * * * * * * good enough ' to play for the club . </t>",
    "summary_trees": [
      "# ::snt  Danny Higginbotham covers Higginbotham time under Roy Keane in Higginbotham new book . \n(c / cover-03\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Danny\"\n                  :op2 \"Higginbotham\"))\n      :ARG1 (t / time\n            :poss (p2 / person\n                  :name (n2 / name\n                        :op1 \"Higginbotham\"))\n            :prep-under (p3 / person\n                  :name (n3 / name\n                        :op1 \"Roy\"\n                        :op2 \"Keane\")))\n      :medium (b / book\n            :ARG1-of (n4 / new-01)))",
      "# ::snt  Higginbotham played for Keane 's Sunderland during the 2007 - 08 season . \n(p / play-01\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Higginbotham\"))\n      :ARG2 (t / team\n            :name (n2 / name\n                  :op1 \"Sunderland\")\n            :ARG1-of (h / have-org-role-91\n                  :ARG0 (p3 / person\n                        :name (n3 / name\n                              :op1 \"Keane\"))))\n      :time (d / date-entity\n            :year 2007\n            :year2 2008\n            :season (s / season)))",
      "# ::snt  Keane told Higginbotham players ' basically you 're s * * * ' before a game with Aston Villa . \n(t / tell-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Keane\"))\n      :ARG1 (s / shit\n            :domain (p2 / person\n                  :ARG0-of (p3 / play-01)\n                  :part-of (t2 / team\n                        :name (n2 / name\n                              :op1 \"Higginbotham\")))\n            :mod (b / basic))\n      :ARG2 p2\n      :time (b2 / before\n            :op1 (g / game\n                  :mod (t3 / team\n                        :name (n3 / name\n                              :op1 \"Aston\"\n                              :op2 \"Villa\")))))",
      "# ::snt  Higginbotham also told one player Higginbotham was ' not f * * * * * * good enough ' to play for the club . \n(t / tell-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Higginbotham\"))\n      :ARG1 (h / have-degree-91\n            :polarity -\n            :ARG1 p\n            :ARG2 (g / good-03\n                  :ARG1 p)\n            :ARG3 (e / enough)\n            :ARG6 (p2 / play-01\n                  :ARG0 p\n                  :ARG3 (c / club)))\n      :ARG2 (p3 / person\n            :quant 1\n            :ARG0-of (p4 / play-01))\n      :mod (a / also))"
    ],
    "tree": [
      "(c / cover-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Danny\"\n                     :op2 \"Higginbotham\")))",
      "(c / cover-03\n   :ARG1 (t / time\n            :poss (p2 / person\n                      :name (n2 / name\n                                :op1 \"Higginbotham\"))))",
      "(c / cover-03\n   :ARG1 (t / time\n            :prep-under (p3 / person\n                            :name (n3 / name\n                                      :op1 \"Roy\"\n                                      :op2 \"Keane\"))))",
      "(c / cover-03\n   :medium (b / book\n              :ARG1 (n4 / new-01)))",
      "(c / cover-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Danny\"\n                     :op2 \"Higginbotham\"))\n   :ARG1 (t / time\n            :poss (p2 / person\n                      :name (n2 / name\n                                :op1 \"Higginbotham\"))))",
      "(p / play-01\n   :ARG2 (t / team\n            :name (n2 / name\n                      :op1 \"Sunderland\")))",
      "(p / play-01\n   :ARG2 (t / team\n            :ARG1 (h / have-org-role-91\n                     :ARG0 (p3 / person\n                               :name (n3 / name\n                                         :op1 \"Keane\")))))",
      "(p / play-01\n   :time (d / date-entity\n            :year 2007))",
      "(p / play-01\n   :time (d / date-entity\n            :year2 2008))",
      "(t / tell-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Keane\")))",
      "(t / tell-01\n   :ARG1 (s / shit\n            :domain (p2 / person\n                        :ARG0 (p3 / play-01))))",
      "(t / tell-01\n   :ARG1 (s / shit\n            :mod (b / basic)))",
      "(t / tell-01\n   :ARG1 (s / shit\n            :domain (p2 / person\n                        :part (t2 / team\n                                  :name (n2 / name\n                                            :op1 \"Higginbotham\")))))",
      "(t / tell-01\n   :time (b2 / before\n             :op1 (g / game\n                     :mod (t3 / team\n                              :name (n3 / name\n                                        :op1 \"Aston\"\n                                        :op2 \"Villa\")))))",
      "(t / tell-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Higginbotham\")))",
      "(t / tell-01\n   :ARG1 (h / have-degree-91\n            :ARG2 (g / good-03\n                     :ARG1 (p / person :name (n / name :op1 \"Higginbotham\")))))"
    ],
    "smus": [
      "Danny Higginbotham covers.",
      "Covers time under Roy Keane.",
      "In the new book, Danny Higginbotham covers Higginbotham's time.",
      "The new book covers the time under Roy Keane.",
      "Roy Keane",
      "Higginbotham played in the season.",
      "In 2008, Higginbotham played for Keane's team.",
      "Kaane played for the 2007 team.",
      "-Sunderland - Keane",
      "Before the Aston Villa game.",
      "Higginbotham's were told to be shit.",
      "Higginbotham",
      "@Keane,",
      "Before the Aston Villa game, Keane told the players were shit.",
      "The player was also told.",
      "Higginbotham told one person that it was not."
    ]
  },
  {
    "instance_id": "realsumm-46",
    "summary": "<t> Four - poster bed dumped in a hotel car park and sold at auction for \u00a3 2,200 . </t> <t> Owner suspected Owner had historic value and experts have been investigating . </t> <t> Historian now claims DNA from the timber proves Historian belonged to Henry VII . </t> <t> Ornate bed , now on display , was made for King and wife Elizabeth of York . </t>",
    "summary_trees": [
      "# ::snt  Four - poster bed dumped in a hotel car park and sold at auction for \u00a3 2,200 . \n(a / and\n      :op1 (d / dump-01\n            :ARG1 (b / bed\n                  :mod (p / poster\n                        :quant 4))\n            :location (p2 / park\n                  :mod (c / car)\n                  :mod (h / hotel)))\n      :op2 (s / sell-01\n            :ARG1 b\n            :ARG3 (m / monetary-quantity\n                  :quant 2100\n                  :unit (p3 / pound))\n            :time (a2 / auction-off-01)))",
      "# ::snt  Owner suspected Owner had historic value and experts have been investigating . \n(a / and\n      :op1 (s / suspect-01\n            :ARG0 (p / person\n                  :ARG0-of (o / own-01\n                        :ARG1 (p2 / person)))\n            :ARG1 (v / value-01\n                  :ARG1 p2\n                  :mod (h / history)))\n      :op2 (ii / investigate-01\n            :ARG0 (p3 / person\n                  :ARG1-of (e / expert-01))))",
      "# ::snt  Historian now claims DNA from the timber proves Historian belonged to Henry VII . \n(c / claim-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (h2 / historian)))\n      :ARG1 (p2 / prove-01\n            :ARG0 (n / nucleic-acid\n                  :name (n2 / name\n                        :op1 \"DNA\")\n                  :source (t / timber))\n            :ARG1 (b / belong-01\n                  :ARG0 p\n                  :ARG1 (p3 / person\n                        :name (n3 / name\n                              :op1 \"Henry\"\n                              :op2 \"VII\"))))\n      :time (n4 / now))",
      "# ::snt  Ornate bed , now on display , was made for King and wife Elizabeth of York . \n(m / make-01\n      :ARG1 (b / bed\n            :mod (o / ornate)\n            :ARG1-of (d / display-01\n                  :time (n / now)))\n      :ARG3 (p / person\n            :name (n2 / name\n                  :op1 \"Elizabeth\"\n                  :op2 \"of\"\n                  :op3 \"York\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (k / king))\n            :ARG0-of (h2 / have-rel-role-91\n                  :ARG2 (w / wife))))"
    ],
    "tree": [
      "(a / and\n   :op1 (d / dump-01\n           :ARG1 (b / bed\n                    :mod (p / poster\n                            :quant 4))))",
      "(a / and\n   :op1 (d / dump-01\n           :location (p2 / park\n                         :mod (c / car))))",
      "(a / and\n   :op1 (s / suspect-01\n           :ARG1 (v / value-01\n                    :ARG1 (p2 / person))))",
      "(a / and\n   :op1 (s / suspect-01\n           :ARG1 (v / value-01\n                    :mod (h / history))))",
      "(a / and\n   :op2 (ii / investigate-01\n            :ARG0 (p3 / person\n                      :ARG1 (e / expert-01))))",
      "(a / and\n   :op1 (s / suspect-01\n           :ARG0 (p / person\n                    :ARG0 (o / own-01\n                             :ARG1 (p2 / person))))\n   :op2 (ii / investigate-01\n            :ARG0 (p3 / person\n                      :ARG1 (e / expert-01))))",
      "(c / claim-01\n   :ARG1 (p2 / prove-01\n             :ARG1 (b / belong-01\n                      :ARG0 (p / person))))",
      "(c / claim-01\n   :ARG1 (p2 / prove-01\n             :ARG0 (n / nucleic-acid\n                      :source (t / timber))))",
      "(c / claim-01\n   :ARG1 (p2 / prove-01\n             :ARG1 (b / belong-01\n                      :ARG1 (p3 / person\n                                :name (n3 / name\n                                          :op1 \"Henry\"\n                                          :op2 \"VII\")))))",
      "(m / make-01\n   :ARG1 (b / bed\n            :mod (o / ornate)))",
      "(m / make-01\n   :ARG1 (b / bed\n            :ARG1 (d / display-01\n                     :time (n / now))))",
      "(m / make-01\n   :ARG3 (p / person\n            :name (n2 / name\n                      :op1 \"Elizabeth\"\n                      :op2 \"of\"\n                      :op3 \"York\")))",
      "(m / make-01\n   :ARG3 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (k / king))))"
    ],
    "smus": [
      "and dumped in hotel park.",
      "Dumped 4 poster bed and sold.",
      "and the experts are investigating.",
      "The owners suspected.",
      "And suspected of historical value.",
      "The owners suspected and experts were investigating.",
      "DNA",
      "Now claims that proves that the person belonged.",
      "Now claims DNA proves it.",
      "Elizabeth of York",
      "The bed for the now-decorated display was made for the wife.",
      "King.",
      "An ornate bed is made for the King."
    ]
  },
  {
    "instance_id": "realsumm-47",
    "summary": "<t> Attorney : Robert Bates assumed the gun was a Taser because Bates saw a laser sight on gun . </t> <t> Harris family lawyers say there are stark differences between the gun and Taser used . </t> <t> In 2009 , an officer in California also said officer mistakenly used officer gun instead of a Taser . </t>",
    "summary_trees": [
      "# ::snt  Attorney : Robert Bates assumed the gun was a Taser because Bates saw a laser sight on gun . \n(a / assume-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Robert\"\n                  :op2 \"Bates\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (a2 / attorney)))\n      :ARG1 (t / taser\n            :domain (g / gun))\n      :ARG1-of (c / cause-01\n            :ARG0 (s / see-01\n                  :ARG0 p\n                  :ARG1 (s2 / sight\n                        :mod (l / laser)\n                        :location g))))",
      "# ::snt  Harris family lawyers say there are stark differences between the gun and Taser used . \n(s / say-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (f / family\n                        :name (n / name\n                              :op1 \"Harris\"))\n                  :ARG2 (l / lawyer)))\n      :ARG1 (d / differ-02\n            :ARG1 (g / gun)\n            :ARG2 (t / taser\n                  :ARG1-of (u / use-01))\n            :mod (s2 / stark)))",
      "# ::snt  In 2009 , an officer in California also said officer mistakenly used officer gun instead of a Taser . \n(s / say-01\n      :ARG0 (o / officer\n            :location (s2 / state\n                  :name (n / name\n                        :op1 \"California\")))\n      :ARG1 (u / use-01\n            :ARG0 (o2 / officer)\n            :ARG1 (g / gun\n                  :mod (o3 / officer)\n                  :ARG1-of (ii / instead-of-91\n                        :ARG2 (t / taser)))\n            :ARG1-of (m / mistake-01\n                  :ARG0 o2))\n      :mod (a / also)\n      :time (d / date-entity\n            :year 2009))"
    ],
    "tree": [
      "(a / assume-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Robert\"\n                     :op2 \"Bates\")))",
      "(a / assume-02\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (a2 / attorney))))",
      "(a / assume-02\n   :ARG1 (t / taser\n            :domain (g / gun)))",
      "(a / assume-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Robert\"\n                     :op2 \"Bates\"))\n   :ARG1 (t / taser\n            :domain (g / gun)))",
      "(a / assume-02\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (a2 / attorney)))\n   :ARG1 (t / taser\n            :domain (g / gun)))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (f / family\n                              :name (n / name\n                                       :op1 \"Harris\")))))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (l / lawyer))))",
      "(s / say-01\n   :ARG1 (d / differ-02\n            :ARG1 (g / gun)))",
      "(s / say-01\n   :ARG1 (d / differ-02\n            :ARG2 (t / taser\n                     :ARG1 (u / use-01))))",
      "(s / say-01\n   :ARG1 (d / differ-02\n            :mod (s2 / stark)))",
      "(s / say-01\n   :ARG0 (o / officer\n            :location (s2 / state\n                          :name (n / name\n                                   :op1 \"California\"))))",
      "(s / say-01\n   :ARG1 (u / use-01\n            :ARG0 (o2 / officer)))",
      "(s / say-01\n   :ARG1 (u / use-01\n            :ARG1 (g / gun\n                     :mod (o3 / officer))))",
      "(s / say-01\n   :ARG1 (u / use-01\n            :ARG1 (m / mistake-01\n                     :ARG0 (o2 / officer))))"
    ],
    "smus": [
      "Robert Bates assumed the gun was a taser.",
      "Robert Bates",
      "The Attorney assumed.",
      "Because the laser sight was seen.",
      "Robert Bates, Attorney",
      "Lawyers say there are stark differences.",
      "There are differences in the Taser used.",
      "There are stark differences in gun.",
      "The Harris family.",
      "The Harris family say --",
      "\"The officer gun used,\" said the man.",
      "In 2009, an officer in California also said the officer's gun was used.",
      "The officer in California also said the officer's gun was used.",
      "Also in 2009, a California officer said --"
    ]
  },
  {
    "instance_id": "realsumm-48",
    "summary": "<t> Singer arrived at artists ' entrance to gain entry to Drake 's gig . </t> <t> Security told Drake area was at full capacity and denied admission . </t> <t> A row erupted and a Coachella staffer tried to get Bieber into the gig . </t> <t> But festival security then intervened and put singer in chokehold and removed staffer from the area . </t>",
    "summary_trees": [
      "# ::snt  Singer arrived at artists ' entrance to gain entry to Drake 's gig . \n(a / arrive-01\n      :ARG1 (p / person\n            :ARG0-of (s / sing-01))\n      :ARG4 (e / entrance\n            :poss (a2 / artist))\n      :purpose (g / gain-02\n            :ARG0 p\n            :ARG1 (e2 / enter-01\n                  :ARG0 p\n                  :ARG1 (g2 / gig\n                        :poss (p2 / person\n                              :name (n / name\n                                    :op1 \"Drake\"))))))",
      "# ::snt  Security told Drake area was at full capacity and denied admission . \n(a / and\n      :op1 (t / tell-01\n            :ARG0 (s / security)\n            :ARG1 (c / capacity\n                  :ARG1-of (f / full-09)\n                  :domain (a2 / area\n                        :poss (p / person\n                              :name (n / name\n                                    :op1 \"Drake\")))))\n      :op2 (d / deny-01\n            :ARG0 s\n            :ARG1 (a3 / admit-02\n                  :ARG1 p)))",
      "# ::snt  A row erupted and a Coachella staffer tried to get Bieber into the gig . \n(a / and\n      :op1 (e / erupt-01\n            :ARG1 (r / row))\n      :op2 (t / try-01\n            :ARG0 (p / person\n                  :ARG0-of (h / have-org-role-91\n                        :ARG1 (o / organization\n                              :name (n / name\n                                    :op1 \"Coachella\"))\n                        :ARG2 (s / staffer)))\n            :ARG1 (g / get-05\n                  :ARG0 p\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Bieber\"))\n                  :ARG2 (g2 / gig))))",
      "# ::snt  But festival security then intervened and put singer in chokehold and removed staffer from the area . \n(c / contrast-01\n      :ARG2 (a / and\n            :op1 (ii / intervene-01\n                  :ARG0 (s / security\n                        :mod (f / festival))\n                  :time (t / then))\n            :op2 (p / put-01\n                  :ARG0 s\n                  :ARG1 (p2 / person\n                        :ARG0-of (s2 / sing-01))\n                  :ARG2 (c2 / chokehold))\n            :op3 (r / remove-01\n                  :ARG0 s\n                  :ARG1 (p3 / person\n                        :ARG2-of (s3 / staff-01))\n                  :ARG2 (a2 / area))))"
    ],
    "tree": [
      "(a / arrive-01\n   :ARG1 (p / person\n            :ARG0 (s / sing-01)))",
      "(a / arrive-01\n   :ARG4 (e / entrance\n            :poss (a2 / artist)))",
      "(a / arrive-01\n   :purpose (g / gain-02\n               :ARG0 (p / person)))",
      "(a / arrive-01\n   :purpose (g / gain-02\n               :ARG1 (e2 / enter-01\n                         :ARG0 (p / person))))",
      "(a / and\n   :op1 (t / tell-01\n           :ARG0 (s / security)))",
      "(a / and\n   :op1 (t / tell-01\n           :ARG1 (c / capacity\n                    :ARG1 (f / full-09))))",
      "(a / and\n   :op1 (t / tell-01\n           :ARG1 (c / capacity\n                    :domain (a2 / area\n                                :poss (p / person\n                                         :name (n / name\n                                                  :op1 \"Drake\"))))))",
      "(a / and\n   :op2 (d / deny-01\n           :ARG0 (s / security)))",
      "(a / and\n   :op2 (d / deny-01\n           :ARG1 (a3 / admit-02\n                     :ARG1 (p / person\n                              :name (n / name\n                                       :op1 \"Drake\")))))",
      "(a / and\n   :op1 (e / erupt-01\n           :ARG1 (r / row)))",
      "(a / and\n   :op2 (t / try-01\n           :ARG0 (p / person\n                    :ARG0 (h / have-org-role-91\n                             :ARG1 (o / organization\n                                      :name (n / name\n                                               :op1 \"Coachella\"))))))",
      "(a / and\n   :op2 (t / try-01\n           :ARG1 (g / get-05\n                    :ARG0 (p / person))))",
      "(a / and\n   :op2 (t / try-01\n           :ARG1 (g / get-05\n                    :ARG1 (p2 / person\n                              :name (n2 / name\n                                        :op1 \"Bieber\")))))",
      "(a / and\n   :op2 (t / try-01\n           :ARG1 (g / get-05\n                    :ARG2 (g2 / gig))))",
      "(c / contrast-01\n   :ARG2 (ii / intervene-01\n             :ARG0 (s / security\n                      :mod (f / festival))))",
      "(c / contrast-01\n   :ARG2 (p / put-01\n            :ARG0 (s / security\n                     :mod (f / festival))))",
      "(c / contrast-01\n   :ARG2 (r / remove-01\n            :ARG0 (s / security\n                     :mod (f / festival))))",
      "(c / contrast-01\n   :ARG2 (ii / intervene-01\n             :time (t / then)))",
      "(c / contrast-01\n   :ARG2 (p / put-01\n            :ARG1 (p2 / person\n                      :ARG0 (s2 / sing-01))))"
    ],
    "smus": [
      "The Singer arrived at the artists entrance to gain.",
      "Arrived to gain entry.",
      "Singers arrived at the artists entrance to gain entry to Drake's gig.",
      "Enter Drake's gig.",
      "Drake",
      "The Drake area was told to be capacity and Security denied.",
      "And full capacity was told.",
      "Rake's area is capacity.",
      "Drake's admission was denied.",
      "Coachella",
      "A staffer tried.",
      "tried to get Bieber.",
      "Bieber",
      "The row erupted and a staffer tried.",
      "And festival security will put in and remove.",
      "Festival security intervened, put in and removed the area.",
      "Then intervened, put the singer in and festival security removed.",
      "And put the singer.",
      "and put in a chokehold and remove staff."
    ]
  },
  {
    "instance_id": "realsumm-49",
    "summary": "<t> Sir Philip Carter died at Carter home on Thursday morning after a short illness . </t> <t> Carter served Everton during three spells after first joining the club in 1977 . </t> <t> Toffees chairman Bill Kenwright pays tribute to a ' great man and leader ' </t>",
    "summary_trees": [
      "# ::snt  Sir Philip Carter died at Carter home on Thursday morning after a short illness . \n(d / die-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Sir\"\n                  :op2 \"Philip\"\n                  :op3 \"Carter\"))\n      :location (h / home\n            :poss p)\n      :time (d2 / date-entity\n            :weekday (t / thursday)\n            :dayperiod (m / morning))\n      :time (a / after\n            :op1 (ii / ill-01\n                  :ARG1 p\n                  :ARG1-of (s / short-07))))",
      "# ::snt  Carter served Everton during three spells after first joining the club in 1977 . \n(s / serve-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Carter\"))\n      :ARG2 (t / team\n            :name (n2 / name\n                  :op1 \"Everton\"))\n      :duration (s2 / spell\n            :quant 3)\n      :time (a / after\n            :op1 (j / join-04\n                  :ARG0 p\n                  :ARG1 t\n                  :time (d / date-entity\n                        :year 1977)\n                  :ord (o / ordinal-entity\n                        :value 1))))",
      "# ::snt  Toffees chairman Bill Kenwright pays tribute to a ' great man and leader ' \n(p / pay\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Bill\"\n                  :op2 \"Kenwright\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (o / organization\n                        :name (n2 / name\n                              :op1 \"Toffees\"))\n                  :ARG2 (c / chairman)))\n      :ARG1 (a / and\n            :op1 (m / man\n                  :mod (g / great))\n            :op2 (p3 / person\n                  :ARG0-of (l / lead-02))))"
    ],
    "tree": [
      "(d / die-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Sir\"\n                     :op2 \"Philip\"\n                     :op3 \"Carter\")))",
      "(d / die-01\n   :location (h / home\n                :poss (p / person :name (n / name :op1 \"Sir\" :op2 \"Philip\" :op3 \"Carter\"))))",
      "(d / die-01\n   :time (d2 / date-entity\n             :weekday (t / thursday)))",
      "(d / die-01\n   :time (d2 / date-entity\n             :dayperiod (m / morning)))",
      "(d / die-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Sir\"\n                     :op2 \"Philip\"\n                     :op3 \"Carter\"))\n   :location (h / home\n                :poss p))",
      "(s / serve-01\n   :ARG2 (t / team\n            :name (n2 / name\n                      :op1 \"Everton\")))",
      "(s / serve-01\n   :duration (s2 / spell\n                 :quant 3))",
      "(s / serve-01\n   :time (a / after\n            :op1 (j / join-04\n                    :ARG0 (p / person :name (n / name :op1 \"Carter\")))))",
      "(s / serve-01\n   :time (a / after\n            :op1 (j / join-04\n                    :ARG1 (t / team :name (n2 / name :op1 \"Everton\")))))",
      "(p / pay\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Bill\"\n                      :op2 \"Kenwright\")))",
      "(p / pay\n   :ARG0 (p2 / person\n             :ARG0 (h / have-org-role-91\n                      :ARG2 (c / chairman))))",
      "(p / pay\n   :ARG1 (m / man\n            :mod (g / great)))",
      "(p / pay\n   :ARG1 (p3 / person\n             :ARG0 (l / lead-02)))"
    ],
    "smus": [
      "Sir Philip Carter",
      "Sir Philip Carter died Thursday at his home.",
      "Died Thursday.",
      "Thursday morning",
      "After a short illness.",
      "After joining Everton, Carter served for three spells.",
      "Carter served after joining first.",
      "After joining first, Carter served for three spells.",
      "After joining first.",
      "Bill Kenwright pays a great man.",
      "The Toffees",
      "Chairman Bill Kenwright",
      "And a great man."
    ]
  },
  {
    "instance_id": "realsumm-50",
    "summary": "<t> Border collies Ace and Holly were caught on camera performing a gravity - defying feat together . </t> <t> The two pooches stood up on pooches hind legs while balancing on pooches owner and trainer Dai Aoki . </t> <t> pooches have appeared in a number of videos showing off pooches tricks . </t>",
    "summary_trees": [
      "# ::snt  Border collies Ace and Holly were caught on camera performing a gravity - defying feat together . \n(c / catch-03\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Ace\")\n                  :mod (b / border-line))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Holly\")\n                  :mod b))\n      :ARG2 (p3 / perform-01\n            :ARG0 a\n            :ARG1 (f / feat\n                  :mod (d / defy-01\n                        :ARG0 a\n                        :ARG1 (g / gravity)))\n            :manner (t / together))\n      :medium (c2 / camera))",
      "# ::snt  The two pooches stood up on pooches hind legs while balancing on pooches owner and trainer Dai Aoki . \n(m / multi-sentence\n      :snt1 (s / stand-up-07\n            :ARG1 (p / poocch\n                  :quant 2\n                  :part (l / leg\n                        :mod (h / hind)\n                        :prep-on-of s)))\n      :snt2 (b / balance-01\n            :ARG1 (p2 / poocch\n                  :part l)\n            :prep-on (p3 / person\n                  :name (n / name\n                        :op1 \"Dai\"\n                        :op2 \"Aoki\")\n                  :ARG0-of (o / own-01\n                        :ARG1 (p4 / poocch))\n                  :ARG0-of (t / train-01\n                        :ARG2 p4))))",
      "# ::snt  pooches have appeared in a number of videos showing off pooches tricks . \n(a / appear-01\n      :ARG1 (p / pooch)\n      :location (v / video\n            :quant (n / number)\n            :ARG0-of (s / show-off-04\n                  :ARG1 (t / trick-01\n                        :ARG0 p))))"
    ],
    "tree": [
      "(c / catch-03\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Holly\")))",
      "(c / catch-03\n   :ARG1 (p / person\n            :mod (b / border-line)))",
      "(c / catch-03\n   :ARG1 (p2 / person\n             :mod (b / border-line)))",
      "(c / catch-03\n   :ARG2 (p3 / perform-01\n             :ARG0 (a / and)))",
      "(m / multi-sentence\n   :snt1 (s / stand-up-07\n            :ARG1 (p / poocch\n                     :quant 2)))",
      "(m / multi-sentence\n   :snt1 (s / stand-up-07\n            :prep-on (l / leg\n                        :mod (h / hind))))",
      "(m / multi-sentence\n   :snt1 (s / stand-up-07\n            :ARG1 (p / poocch\n                     :part (l / leg\n                              :mod (h / hind)))))",
      "(m / multi-sentence\n   :snt2 (b / balance-01\n            :ARG1 (p2 / poocch\n                      :part (l / leg\n                               :mod (h / hind)))))",
      "(m / multi-sentence\n   :snt2 (b / balance-01\n            :prep-on (p3 / person\n                         :name (n / name\n                                  :op1 \"Dai\"\n                                  :op2 \"Aoki\"))))",
      "(a / appear-01\n   :location (v / video\n                :quant (n / number)))",
      "(a / appear-01\n   :location (v / video\n                :ARG0 (s / show-off-04\n                         :ARG1 (t / trick-01\n                                  :ARG0 (p / pooch)))))",
      "(a / appear-01\n   :ARG1 (p / pooch)\n   :location (v / video\n                :quant (n / number)))",
      "(a / appear-01\n   :ARG1 (p / pooch)\n   :location (v / video\n                :ARG0 (s / show-off-04\n                         :ARG1 (t / trick-01\n                                  :ARG0 p))))",
      "(v / video\n   :ARG0 (s / show-off-04\n            :ARG1 (t / trick-01\n                     :ARG0 (p / pooch))))"
    ],
    "smus": [
      "Borderliner caught performing on camera.",
      "Borderliner and Holly.",
      "Ace was caught performing on camera.",
      "Holly was caught performing a feat of defying gravity.",
      "Poocchs on hind legs stood up.",
      "Balancing on Dai Aoki.",
      "Balancing on poocch owners.",
      "Poocch legs balancing on poocch owners.",
      "Stand up on hind legs, poocchs balancing.",
      "Videos showing off pooch tricks.",
      "There are a number of videos showing off pooch tricks.",
      "The pooch has appeared in a number of videos.",
      "A number of videos have appeared.",
      "showing off the tricks of the pooch."
    ]
  },
  {
    "instance_id": "realsumm-51",
    "summary": "<t> Dayna Dobias , 19 , has created a video in which Dobias dances despite having a disability that makes it difficult for Dobias to walk . </t> <t> Dobias loves TV , film and fashion , and says Dobias \u2019s not happy with how people with disabilities are represented . </t> <t> The teen has created several videos during the past year aimed at changing stereotypes . </t>",
    "summary_trees": [
      "# ::snt  Dayna Dobias , 19 , has created a video in which Dobias dances despite having a disability that makes it difficult for Dobias to walk . \n(c / create-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Dayna\"\n                  :op2 \"Dobias\")\n            :age (t / temporal-quantity\n                  :quant 19\n                  :unit (y / year)))\n      :ARG1 (v / video\n            :medium-of (d / dance-01\n                  :ARG0 p\n                  :concession (h / have-03\n                        :ARG0 p\n                        :ARG1 (d2 / disability\n                              :ARG0-of (m / make-02\n                                    :ARG1 (d3 / difficult\n                                          :domain (w / walk-01\n                                                :ARG0 p))))))))",
      "# ::snt  Dobias loves TV , film and fashion , and says Dobias \u2019s not happy with how people with disabilities are represented . \n(a / and\n      :op1 (l / love-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Dobias\"))\n            :ARG1 (a2 / and\n                  :op1 (t / television)\n                  :op2 (f / film)\n                  :op3 (f2 / fashion)))\n      :op2 (s / say-01\n            :ARG0 p\n            :ARG1 (h / happy-01\n                  :polarity -\n                  :ARG0 (t2 / thing\n                        :ARG2-of (r / represent-01\n                              :ARG1 (p2 / person\n                                    :ARG0-of (h2 / have-03\n                                          :ARG1 (d / disability)))))\n                  :ARG1 p)))",
      "# ::snt  The teen has created several videos during the past year aimed at changing stereotypes . \n(c / create-01\n      :ARG0 (t / teen)\n      :ARG1 (v / video\n            :ARG0-of (a / aim-02\n                  :ARG1 (c2 / change-01\n                        :ARG1 (s / stereotype-01)))\n            :quant (s2 / several))\n      :time (y / year\n            :mod (p / past)))"
    ],
    "tree": [
      "(c / create-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dayna\"\n                     :op2 \"Dobias\")))",
      "(c / create-01\n   :ARG0 (p / person\n            :age (t / temporal-quantity\n                    :quant 19)))",
      "(c / create-01\n   :ARG0 (p / person\n            :age (t / temporal-quantity\n                    :unit (y / year))))",
      "(c / create-01\n   :ARG1 (v / video\n            :medium (d / dance-01\n                       :ARG0 (p / person :name (n / name :op1 \"Dayna\" :op2 \"Dobias\"))))))",
      "(c / create-01\n   :ARG1 (v / video\n            :medium (d / dance-01\n                       :concession (h / have-03\n                                      :ARG0 (p / person :name (n / name :op1 \"Dayna\" :op2 \"Dobias\")))))))",
      "(a / and\n   :op1 (l / love-01\n           :ARG1 (t / television)))",
      "(a / and\n   :op1 (l / love-01\n           :ARG1 (f / film)))",
      "(a / and\n   :op1 (l / love-01\n           :ARG1 (f2 / fashion)))",
      "(a / and\n   :op2 (s / say-01\n           :ARG0 (p / person\n                    :name (n / name\n                             :op1 \"Dobias\"))))",
      "(c / create-01\n   :ARG1 (v / video\n            :ARG0 (a / aim-02\n                     :ARG1 (c2 / change-01\n                               :ARG1 (s / stereotype-01)))))",
      "(c / create-01\n   :ARG1 (v / video\n            :quant (s2 / several)))",
      "(c / create-01\n   :time (y / year\n            :mod (p / past)))",
      "(c / create-01\n   :ARG0 (t / teen)\n   :ARG1 (v / video\n            :ARG0 (a / aim-02\n                     :ARG1 (c2 / change-01\n                               :ARG1 (s / stereotype-01)))))",
      "(c / create-01\n   :ARG0 (t / teen)\n   :ARG1 (v / video\n            :quant (s2 / several)))"
    ],
    "smus": [
      "Dances despite the disability that makes Dayna Dobias difficult to walk.",
      "A 19 year old has created a video that dances, though he has.",
      "Dayna Dobias has created a video in which she dances.",
      "Dayna Dobias, 19,",
      "Created by the year old.",
      "Loves TV and says not happy.",
      "Loves TV, says Dobias.",
      "representing people with disabilities.",
      "TV and fashion",
      "The teen has created videos aimed at changing stereotypes.",
      "Created in the past year.",
      "Several videos have been created over the past year.",
      "Videos aimed at changing stereotypes",
      "There are several videos aimed at changing stereotypes."
    ]
  },
  {
    "instance_id": "realsumm-52",
    "summary": "<t> Manchester United take on Manchester City on Sunday . </t> <t> Match will begin at 4 pm local time at United 's Old Trafford home . </t> <t> Police have no objections to kick - off being so late in the afternoon . </t> <t> Last late afternoon weekend kick - off in the Manchester derby saw 34 fans arrested at Wembley in 2011 FA Cup semi - final . </t>",
    "summary_trees": [
      "# ::snt  Manchester United take on Manchester City on Sunday . \n(t / take-on-09\n      :ARG0 (t2 / team\n            :name (n / name\n                  :op1 \"Manchester\"\n                  :op2 \"United\"))\n      :ARG1 (t3 / team\n            :name (n2 / name\n                  :op1 \"Manchester\"\n                  :op2 \"City\"))\n      :time (d / date-entity\n            :weekday (s / sunday)))",
      "# ::snt  Match will begin at 4 pm local time at United 's Old Trafford home . \n(b / begin-01\n      :ARG1 (m / match-03)\n      :location (h / home\n            :poss (t / team\n                  :name (n / name\n                        :op1 \"United\"))\n            :mod (s / sports-facility\n                  :name n\n                  :op1 \"Old\"\n                  :op2 \" Trafford\"))\n      :time (d / date-entity\n            :time \"16:00\"\n            :timezone (l / local-02)))",
      "# ::snt  Police have no objections to kick - off being so late in the afternoon . \n(o / object-01\n      :polarity -\n      :ARG0 (p / police)\n      :ARG1 (k / kick-off-04\n            :time (l / late\n                  :op1 (d / date-entity\n                        :dayperiod (a / afternoon))\n                  :degree (s / so))))",
      "# ::snt  Last late afternoon weekend kick - off in the Manchester derby saw 34 fans arrested at Wembley in 2011 FA Cup semi - final . \n(s / see-01\n      :ARG0 (k / kick-off-04\n            :ARG1 (d / derby\n                  :mod (c / city\n                        :name (n / name\n                              :op1 \"Manchester\")))\n            :time (w / weekend)\n            :time (d2 / date-entity\n                  :dayperiod (a / afternoon)\n                  :mod (l / late))\n            :mod (l2 / last))\n      :ARG1 (a2 / arrest-01\n            :ARG1 (f / fan\n                  :quant 34)\n            :location (s2 / sports-facility\n                  :name (n2 / name\n                        :op1 \"Wembley\"))\n            :time (f2 / final\n                  :mod (s3 / semi)\n                  :subevent-of (g / game\n                        :name (n3 / name\n                              :op1 \"FA\"\n                              :op2 \"Cup\")\n                        :time (d3 / date-entity\n                              :year 2011)))))"
    ],
    "tree": [
      "(t / take-on-09\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Manchester\"\n                      :op2 \"United\")))",
      "(t / take-on-09\n   :ARG1 (t3 / team\n             :name (n2 / name\n                       :op1 \"Manchester\"\n                       :op2 \"City\")))",
      "(t / take-on-09\n   :time (d / date-entity\n            :weekday (s / sunday)))",
      "(t / take-on-09\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Manchester\"\n                      :op2 \"United\"))\n   :ARG1 (t3 / team\n             :name (n2 / name\n                       :op1 \"Manchester\"\n                       :op2 \"City\")))",
      "(t / take-on-09\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Manchester\"\n                      :op2 \"United\"))\n   :time (d / date-entity\n            :weekday (s / sunday)))",
      "(b / begin-01\n   :location (h / home\n                :poss (t / team\n                         :name (n / name\n                                  :op1 \"United\"))))",
      "(b / begin-01\n   :location (h / home\n                :mod (s / sports-facility\n                        :name (n / name\n                                 :op1 \"United\"))))",
      "(b / begin-01\n   :time (d / date-entity\n            :time \"16:00\"))",
      "(o / object-01\n   :ARG1 (k / kick-off-04\n            :time (l / late\n                     :degree (s / so))))",
      "(o / object-01\n   :ARG0 (p / police)\n   :ARG1 (k / kick-off-04\n            :time (l / late\n                     :degree (s / so))))",
      "(k / kick-off-04\n   :time (l / late\n            :op1 (d / date-entity\n                    :dayperiod (a / afternoon))))"
    ],
    "smus": [
      "Manchester United will take on",
      "Manchester City",
      "Take on Sunday.",
      "Take on Manchester City",
      "Manchester United will take on on Sunday.",
      "Beginning at United home at local time.",
      "Begin at Old Home.",
      "United at Trafford home",
      "late afternoon",
      "So late in the afternoon.",
      "Kick off late in the afternoon."
    ]
  },
  {
    "instance_id": "realsumm-53",
    "summary": "<t> Kamal criticised umpires ' decision to award controversial no - ball against Rohit Sharma in India 's World Cup match with Bangladesh . </t> <t> The Bangladeshi president alleged India had used president influence in the ICC . </t> <t> Governing body asked Bangladeshi to withdraw Bangladeshi statement or apologise . </t> <t> But Kamal confirmed Kamal intention to step down . </t>",
    "summary_trees": [
      "# ::snt  Kamal criticised umpires ' decision to award controversial no - ball against Rohit Sharma in India 's World Cup match with Bangladesh . \n(c / criticize-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Kamal\"))\n      :ARG1 (d / decide-01\n            :ARG0 (u / umpire)\n            :ARG1 (a / award-01\n                  :ARG0 u\n                  :ARG1 (b / ball\n                        :mod (c2 / controversy))\n                  :ARG2 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Rohit\"\n                              :op2 \"Sharma\"))\n                  :time (m / match-03\n                        :ARG0 (c3 / country\n                              :name (n3 / name\n                                    :op1 \"India\"))\n                        :ARG1 (c4 / country\n                              :name (n4 / name\n                                    :op1 \"Bangladesh\"))\n                        :subevent-of (g / game\n                              :name (n5 / name\n                                    :op1 \"World\"\n                                    :op2 \"Cup\"))))))",
      "# ::snt  The Bangladeshi president alleged India had used president influence in the ICC . \n(a / allege-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (c / country\n                        :name (n / name\n                              :op1 \"Bangladesh\"))\n                  :ARG2 (p2 / president)))\n      :ARG1 (u / use-01\n            :ARG0 (c2 / country\n                  :name (n2 / name\n                        :op1 \"India\"))\n            :ARG1 (ii / influence-01\n                  :ARG0 (p3 / president)\n                  :ARG1 (o / organization\n                        :name (n3 / name\n                              :op1 \"ICC\")))))",
      "# ::snt  Governing body asked Bangladeshi to withdraw Bangladeshi statement or apologise . \n(a / ask-02\n      :ARG0 (b / body\n            :ARG0-of (g / govern-01))\n      :ARG1 (o / or\n            :op1 (w / withdraw-01\n                  :ARG0 (p / person\n                        :mod (c / country\n                              :name (n / name\n                                    :op1 \"Bangladesh\")))\n                  :ARG1 (t / thing\n                        :ARG1-of (s / state-01\n                              :ARG0 p)))\n            :op2 (a2 / apologize-01\n                  :ARG0 p))\n      :ARG2 p)",
      "# ::snt  But Kamal confirmed Kamal intention to step down . \n(c / contrast-01\n      :ARG2 (c2 / confirm-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Kamal\"))\n            :ARG1 (ii / intend-01\n                  :ARG0 p\n                  :ARG1 (s / step-down-04\n                        :ARG0 p))))"
    ],
    "tree": [
      "(c / criticize-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kamal\")))",
      "(c / criticize-01\n   :ARG1 (d / decide-01\n            :ARG1 (a / award-01\n                     :ARG0 (u / umpire))))",
      "(c / criticize-01\n   :ARG1 (d / decide-01\n            :ARG1 (a / award-01\n                     :ARG1 (b / ball\n                              :mod (c2 / controversy)))))",
      "(c / criticize-01\n   :ARG1 (d / decide-01\n            :ARG1 (a / award-01\n                     :ARG2 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Rohit\"\n                                         :op2 \"Sharma\")))))",
      "(a / allege-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (c / country\n                              :name (n / name\n                                       :op1 \"Bangladesh\")))))",
      "(a / allege-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (p2 / president))))",
      "(a / allege-01\n   :ARG1 (u / use-01\n            :ARG0 (c2 / country\n                      :name (n2 / name\n                                :op1 \"India\"))))",
      "(a / allege-01\n   :ARG1 (u / use-01\n            :ARG1 (ii / influence-01\n                      :ARG0 (p3 / president))))",
      "(a / allege-01\n   :ARG1 (u / use-01\n            :ARG1 (ii / influence-01\n                      :ARG1 (o / organization\n                               :name (n3 / name\n                                         :op1 \"ICC\")))))",
      "(a / ask-02\n   :ARG0 (b / body\n            :ARG0 (g / govern-01)))",
      "(a / ask-02\n   :ARG1 (o / or\n            :op1 (w / withdraw-01\n                    :ARG1 (t / thing\n                             :ARG1 (s / state-01\n                                      :ARG0 (p / person))))))",
      "(a / ask-02\n   :ARG0 (b / body\n            :ARG0 (g / govern-01))\n   :ARG1 (o / or\n            :op1 (w / withdraw-01\n                    :ARG0 (p / person\n                             :mod (c / country\n                                     :name (n / name\n                                              :op1 \"Bangladesh\"))))))",
      "(c / contrast-01\n   :ARG2 (c2 / confirm-01\n             :ARG0 (p / person\n                      :name (n / name\n                               :op1 \"Kamal\"))))",
      "(c / contrast-01\n   :ARG2 (c2 / confirm-01\n             :ARG1 (ii / intend-01\n                       :ARG0 (p / person :name (n / name :op1 \"Kamal\")))))",
      "(c / contrast-01\n   :ARG2 (c2 / confirm-01\n             :ARG1 (ii / intend-01\n                       :ARG1 (s / step-down-04\n                                :ARG0 (p / person :name (n / name :op1 \"Kamal\"))))))",
      "(c2 / confirm-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Kamal\")))",
      "(c2 / confirm-01\n    :ARG1 (ii / intend-01\n              :ARG0 (p / person :name (n / name :op1 \"Kamal\"))))"
    ],
    "smus": [
      "Bangladesh in match",
      "The decision to award Rohit Sharma was made.",
      "India v Bangladesh matchup in World Cup",
      "The umpires' decision to award the controversial ball.",
      "President.",
      "Bangladeshis alleged India had used it.",
      "Bangladesh",
      "The president alleged that influence on the ICC was used.",
      "Influence on the ICC is being used.",
      "withdraw the statement of the person.",
      "asked for an apology from Bangladesh.",
      "Bangladeshis",
      "Kamal confirmed his intention.",
      "But Kamal confirmed --",
      "Kamal confirmed his intention to step down.",
      "Kamal",
      "But Kamal's intention was confirmed."
    ]
  },
  {
    "instance_id": "realsumm-54",
    "summary": "<t> Floyd Mayweather and Manny Pacquiao face off in Las Vegas on May 2 . </t> <t> Joe Calzaghe believes Mayweather 's unbeaten record is a burden . </t> <t> Despite that , the Welshman thinks Mayweather will beat Welshman opponent . </t> <t> READ : Ricky Hatton gives Hatton prediction to Jeff Powell ahead of the fight . </t> <t> READ : Floyd Mayweather vs Manny Pacquiao tickets FINALLY go on sale . </t>",
    "summary_trees": [
      "# ::snt  Floyd Mayweather and Manny Pacquiao face off in Las Vegas on May 2 . \n(f / face-off-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Floyd\"\n                  :op2 \"Mayweather\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Manny\"\n                  :op2 \"Pacquiao\"))\n      :location (c / city\n            :name (n3 / name\n                  :op1 \"Las\"\n                  :op2 \"Vegas\"))\n      :time (d / date-entity\n            :day 2\n            :month 5))",
      "# ::snt  Joe Calzaghe believes Mayweather 's unbeaten record is a burden . \n(b / believe-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Joe\"\n                  :op2 \"Calzaghe\"))\n      :ARG1 (b2 / burden-01\n            :ARG2 (r / record\n                  :poss (p2 / person\n                        :name (n2 / name\n                              :op1 \"Mayweather\"))\n                  :ARG1-of (b3 / beat-03\n                        :polarity -))))",
      "# ::snt  Despite that , the Welshman thinks Mayweather will beat Welshman opponent . \n(t / think-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Walesman\"))\n      :ARG1 (b / beat-03\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Mayweather\"))\n            :ARG1 (p3 / person\n                  :ARG0-of (o / oppose-01\n                        :ARG1 p)))\n      :concession (t2 / that))",
      "# ::snt  READ : Ricky Hatton gives Hatton prediction to Jeff Powell ahead of the fight . \n(r / read-01\n      :mode imperative\n      :ARG0 (y / you)\n      :ARG1 (p / predict-01\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Ricky\"\n                        :op2 \"Hatton\"))\n            :ARG2 (p3 / person\n                  :name (n2 / name\n                        :op1 \"Jeff\"\n                        :op2 \"Powell\"))\n            :time (a / ahead\n                  :op1 (f / fight-01))))",
      "# ::snt  READ : Floyd Mayweather vs Manny Pacquiao tickets FINALLY go on sale . \n(r / read-01\n      :mode imperative\n      :ARG0 (y / you)\n      :ARG1 (s / sell-01\n            :ARG1 (t / ticket\n                  :mod (o / oppose-01\n                        :ARG0 (p / person\n                              :name (n / name\n                                    :op1 \"Floyd\"\n                                    :op2 \"Mayweather\"))\n                        :ARG1 (p2 / person\n                              :name (n2 / name\n                                    :op1 \"Manny\"\n                                    :op2 \"Pacquiao\"))))\n            :time (f / final)))"
    ],
    "tree": [
      "(f / face-off-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Floyd\"\n                     :op2 \"Mayweather\")))",
      "(f / face-off-02\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Manny\"\n                       :op2 \"Pacquiao\")))",
      "(f / face-off-02\n   :location (c / city\n                :name (n3 / name\n                          :op1 \"Las\"\n                          :op2 \"Vegas\")))",
      "(f / face-off-02\n   :time (d / date-entity\n            :day 2))",
      "(f / face-off-02\n   :time (d / date-entity\n            :month 5))",
      "(b / believe-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Joe\"\n                     :op2 \"Calzaghe\")))",
      "(b / believe-01\n   :ARG1 (b2 / burden-01\n             :ARG2 (r / record\n                      :poss (p2 / person\n                                :name (n2 / name\n                                          :op1 \"Mayweather\")))))",
      "(b / believe-01\n   :ARG1 (b2 / burden-01\n             :ARG2 (r / record\n                      :ARG1 (b3 / beat-03\n                                :polarity -))))",
      "(b / believe-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Joe\"\n                     :op2 \"Calzaghe\"))\n   :ARG1 (b2 / burden-01\n             :ARG2 (r / record\n                      :poss (p2 / person\n                                :name (n2 / name\n                                          :op1 \"Mayweather\")))))",
      "(b / believe-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Joe\"\n                     :op2 \"Calzaghe\"))\n   :ARG1 (b2 / burden-01\n             :ARG2 (r / record\n                      :ARG1 (b3 / beat-03\n                                :polarity -))))",
      "(t / think-01\n   :ARG1 (b / beat-03\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Mayweather\"))))",
      "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Walesman\"))\n   :ARG1 (b / beat-03\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Mayweather\"))))",
      "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Walesman\"))\n   :ARG1 (b / beat-03\n            :ARG1 (p3 / person\n                      :ARG0 (o / oppose-01\n                               :ARG1 p))))",
      "(r / read-01\n   :ARG1 (p / predict-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Ricky\"\n                               :op2 \"Hatton\"))))",
      "(r / read-01\n   :ARG1 (p / predict-01\n            :ARG2 (p3 / person\n                      :name (n2 / name\n                                :op1 \"Jeff\"\n                                :op2 \"Powell\"))))",
      "(r / read-01\n   :ARG1 (p / predict-01\n            :time (a / ahead\n                     :op1 (f / fight-01))))",
      "(r / read-01\n   :ARG0 (y / you)\n   :ARG1 (p / predict-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Ricky\"\n                               :op2 \"Hatton\"))))",
      "(r / read-01\n   :ARG0 (y / you)\n   :ARG1 (p / predict-01\n            :ARG2 (p3 / person\n                      :name (n2 / name\n                                :op1 \"Jeff\"\n                                :op2 \"Powell\"))))",
      "(r / read-01\n   :ARG1 (s / sell-01\n            :ARG1 (t / ticket\n                     :mod (o / oppose-01\n                             :ARG0 (p / person\n                                      :name (n / name\n                                               :op1 \"Floyd\"\n                                               :op2 \"Mayweather\"))))))",
      "(r / read-01\n   :ARG1 (s / sell-01\n            :time (f / final)))",
      "(r / read-01\n   :ARG1 (s / sell-01\n            :ARG1 (t / ticket\n                     :mod (o / oppose-01\n                             :ARG1 (p2 / person\n                                       :name (n2 / name\n                                                 :op1 \"Manny\"\n                                                 :op2 \"Pacquiao\"))))))",
      "(r / read-01\n   :ARG0 (y / you)\n   :ARG1 (s / sell-01\n            :ARG1 (t / ticket\n                     :mod (o / oppose-01\n                             :ARG0 (p / person\n                                      :name (n / name\n                                               :op1 \"Floyd\"\n                                               :op2 \"Mayweather\"))))))"
    ],
    "smus": [
      "Floyd Mayweather and Manny Pacquiao face off in Las Vegas on the 2nd.",
      "Las Vegas",
      "In May, Manny Pacquiao and the duo face off in Las Vegas.",
      "Floyd Mayweather and...",
      "On the 2nd, face off in Las Vegas.",
      "Mayweather",
      "The burden is on Mayweather's record.",
      "Joe Calzaghe believes --",
      "The burden of an unbeaten record believes to be on the shoulders of the unbeaten.",
      "A record that hasn't been beat.",
      "Walesman thinks.",
      "That said, Walesman thinks Mayweather will beat him.",
      "Walesman",
      "Ricky Hatton's prediction was read.",
      "Ricky Hatton predicts Jeff Powell ahead of the fight.",
      "The prediction is Jeffrey Powell.",
      "Ricky Hatton",
      "The prediction ahead of the fight.",
      "against Manny Pacquiao.",
      "The tickets against Manny Pacquiao were read to be sold.",
      "Tickets against Floyd Mayweather have been read to be sold.",
      "The final sales are read."
    ]
  },
  {
    "instance_id": "realsumm-55",
    "summary": "<t> Winchester Council in Hampshire claimed annual clean - up hit by new rules . </t> <t> But the Health and Safety Executive denied tightening rules and added that councils were \u2018 over - interpreting \u2019 legislation . </t> <t> Poet Laureate Sir Andrew Motion accused town hall bosses and Highways Agency of ruining the countryside by failing to remove rubbish . </t>",
    "summary_trees": [
      "# ::snt  Winchester Council in Hampshire claimed annual clean - up hit by new rules . \n(c / claim-01\n      :ARG0 (c2 / council\n            :mod (c3 / city\n                  :name (n / name\n                        :op1 \"Winchester\")\n                  :location (c4 / county\n                        :name (n2 / name\n                              :op1 \"Hampshire\"))))\n      :ARG1 (c5 / clean-up-02\n            :ARG1-of (h / hit-01\n                  :ARG0 (r / rule\n                        :ARG1-of (n3 / new-01)))\n            :frequency (r2 / rate-entity-91\n                  :ARG3 (t / temporal-quantity\n                        :quant 1\n                        :unit (y / year)))))",
      "# ::snt  But the Health and Safety Executive denied tightening rules and added that councils were \u2018 over - interpreting \u2019 legislation . \n(c / contrast-01\n      :ARG2 (a / and\n            :op1 (d / deny-01\n                  :ARG0 (g / government-organization\n                        :name (n / name\n                              :op1 \"Health\"\n                              :op2 \"and\"\n                              :op3 \"Safety\"\n                              :op4 \"Executive\"))\n                  :ARG1 (t / tighten-01\n                        :ARG1 (r / rule)))\n            :op2 (a2 / add-01\n                  :ARG0 g\n                  :ARG1 (ii / interpret-01\n                        :ARG0 (c2 / council)\n                        :ARG1 (l / legislate-01)\n                        :ARG1-of (o / over-03)))))",
      "# ::snt  Poet Laureate Sir Andrew Motion accused town hall bosses and Highways Agency of ruining the countryside by failing to remove rubbish . \n(a / accuse-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Sir\"\n                  :op2 \"Andrew\"\n                  :op3 \"Motion\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (l / laureate\n                        :mod (p2 / poet))))\n      :ARG1 (a2 / and\n            :op1 (p3 / person\n                  :ARG0-of h\n                  :ARG1 (h2 / hall\n                        :mod (t / town))\n                  :ARG2 (b / boss)))\n      :op2 (g / government-organization\n            :name (n2 / name\n                  :op1 \"Highways\"\n                  :op2 \"Agency\"))\n      :ARG2 (r / ruin-01\n            :ARG0 a2\n            :ARG1 (c / countryside)\n            :ARG3 (f / fail-01\n                  :ARG0 a2\n                  :ARG1 (r2 / remove-01\n                        :ARG0 a2\n                        :ARG1 (r3 / rubbish)))))"
    ],
    "tree": [
      "(c / claim-01\n   :ARG0 (c2 / council\n             :mod (c3 / city\n                      :name (n / name\n                               :op1 \"Winchester\"))))",
      "(c / claim-01\n   :ARG0 (c2 / council\n             :mod (c3 / city\n                      :location (c4 / county\n                                    :name (n2 / name\n                                              :op1 \"Hampshire\")))))",
      "(c / claim-01\n   :ARG1 (c5 / clean-up-02\n             :ARG1 (h / hit-01\n                      :ARG0 (r / rule\n                               :ARG1 (n3 / new-01)))))",
      "(c / claim-01\n   :ARG1 (c5 / clean-up-02\n             :frequency (r2 / rate-entity-91\n                            :ARG3 (t / temporal-quantity\n                                     :quant 1))))",
      "(c / claim-01\n   :ARG1 (c5 / clean-up-02\n             :frequency (r2 / rate-entity-91\n                            :ARG3 (t / temporal-quantity\n                                     :unit (y / year)))))",
      "(c / contrast-01\n   :ARG2 (d / deny-01\n            :ARG0 (g / government-organization\n                     :name (n / name\n                              :op1 \"Health\"\n                              :op2 \"and\"\n                              :op3 \"Safety\"\n                              :op4 \"Executive\"))))",
      "(c / contrast-01\n   :ARG2 (a2 / add-01\n             :ARG0 (g / government-organization\n                      :name (n / name\n                               :op1 \"Health\"\n                               :op2 \"and\"\n                               :op3 \"Safety\"\n                               :op4 \"Executive\"))))",
      "(c / contrast-01\n   :ARG2 (d / deny-01\n            :ARG1 (t / tighten-01\n                     :ARG1 (r / rule))))",
      "(c / contrast-01\n   :ARG2 (a2 / add-01\n             :ARG1 (ii / interpret-01\n                       :ARG0 (c2 / council))))",
      "(c / contrast-01\n   :ARG2 (a2 / add-01\n             :ARG1 (ii / interpret-01\n                       :ARG1 (l / legislate-01))))",
      "(a / accuse-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sir\"\n                     :op2 \"Andrew\"\n                     :op3 \"Motion\")))",
      "(a / accuse-01\n   :ARG2 (r / ruin-01\n            :ARG0 (a2 / and)))",
      "(a / accuse-01\n   :ARG2 (r / ruin-01\n            :ARG1 (c / countryside)))",
      "(a / accuse-01\n   :ARG2 (r / ruin-01\n            :ARG3 (f / fail-01\n                     :ARG0 (a2 / and))))"
    ],
    "smus": [
      "The Hampshire City Council claimed there was a annual clean-up.",
      "Hampshire",
      "New rules have hit the clean-up.",
      "Every year.",
      "The new rules had been deemed a clean-up, the claim claimed.",
      "The Health and Safety Executive denied.",
      "The rules were denied tightening.",
      "And added the interpretation of the legislation.",
      "And added the over-interpreting.",
      "But the Health and Safety Executive added --",
      "Poetry laureate",
      "Sir Andrew Motion accused the Highway Agency of ruining.",
      "Sir Andrew Motion accused the two of ruining.",
      "accused of ruining failing to remove rubbish."
    ]
  },
  {
    "instance_id": "realsumm-56",
    "summary": "<t> Simon Wood , 38 , from Oldham won Masterchef last Friday . </t> <t> Father - of - four got cooking skills by feeding culinary creations to Wood kids . </t> <t> The award - winning chef says one of chef favourite meals is a plain omelette . </t>",
    "summary_trees": [
      "# ::snt  Simon Wood , 38 , from Oldham won Masterchef last Friday . \n(w / win-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Simon\"\n                  :op2 \"Wood\")\n            :age (t / temporal-quantity\n                  :quant 38\n                  :unit (y / year))\n            :source (c / city\n                  :name (n2 / name\n                        :op1 \"Oldham\")))\n      :ARG1 (a / award\n            :name (n3 / name\n                  :op1 \"Masterchef\"))\n      :time (d / date-entity\n            :weekday (f / friday)\n            :mod (l / last)))",
      "# ::snt  Father - of - four got cooking skills by feeding culinary creations to Wood kids . \n(g / get-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (c / child\n                        :quant 4)\n                  :ARG2 (f / father)))\n      :ARG1 (s / skill\n            :topic (c2 / cook-01))\n      :ARG2 (f2 / feed-01\n            :ARG0 p\n            :ARG1 (t / thing\n                  :ARG1-of (c3 / create-01\n                        :mod (c4 / culinary)))\n            :ARG2 (k / kid\n                  :mod (w / wood))))",
      "# ::snt  The award - winning chef says one of chef favourite meals is a plain omelette . \n(s / say-01\n      :ARG0 (c / chef\n            :ARG0-of (w / win-01\n                  :ARG1 (a / award)))\n      :ARG1 (o / omelette\n            :mod (p / plain)\n            :domain (m / meal\n                  :ARG1-of (ii / include-91\n                        :ARG2 (m2 / meal\n                              :ARG1-of (f / favor-01\n                                    :ARG0 c))))))"
    ],
    "tree": [
      "(w / win-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Simon\"\n                     :op2 \"Wood\")))",
      "(w / win-01\n   :ARG0 (p / person\n            :age (t / temporal-quantity\n                    :quant 38)))",
      "(w / win-01\n   :ARG0 (p / person\n            :source (c / city\n                       :name (n2 / name\n                                 :op1 \"Oldham\"))))",
      "(w / win-01\n   :ARG0 (p / person\n            :age (t / temporal-quantity\n                    :unit (y / year))))",
      "(w / win-01\n   :ARG1 (a / award\n            :name (n3 / name\n                      :op1 \"Masterchef\")))",
      "(g / get-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (f / father))))",
      "(g / get-01\n   :ARG1 (s / skill\n            :topic (c2 / cook-01)))",
      "(g / get-01\n   :ARG2 (f2 / feed-01\n             :ARG0 (p / person)))",
      "(s / say-01\n   :ARG0 (c / chef\n            :ARG0 (w / win-01\n                     :ARG1 (a / award))))",
      "(s / say-01\n   :ARG1 (o / omelette\n            :mod (p / plain)))",
      "(s / say-01\n   :ARG1 (o / omelette\n            :domain (m / meal\n                       :ARG1 (ii / include-91\n                                 :ARG2 (m2 / meal\n                                           :ARG1 (f / favor-01\n                                                    :ARG0 (c / chef)))))))",
      "(s / say-01\n   :ARG0 (c / chef\n            :ARG0 (w / win-01\n                     :ARG1 (a / award)))\n   :ARG1 (o / omelette\n            :mod (p / plain)))",
      "(s / say-01\n   :ARG0 (c / chef\n            :ARG0 (w / win-01\n                     :ARG1 (a / award)))\n   :ARG1 (o / omelette\n            :domain (m / meal\n                       :ARG1 (ii / include-91\n                                 :ARG2 (m2 / meal\n                                           :ARG1 (f / favor-01\n                                                    :ARG0 c))))))"
    ],
    "smus": [
      "The year old won the Masterchef on Friday.",
      "Simon Wood, 38, of Oldham",
      "The 38-year-old won on Friday.",
      "Simon Wood",
      "Simon Wood won.",
      "feeding the culinary creations.",
      "4 children",
      "The Father got.",
      "winning the award is a chef.",
      "\"Meals are one of my favorite meals,\" says the chef who won the award.",
      "Meals that are \"favored\" by the chef are plain omelettes.",
      "Favorite meals for the chef",
      "Meals are one of the chef's favorite meals."
    ]
  },
  {
    "instance_id": "realsumm-57",
    "summary": "<t> Swansea 's Gerhard Tremmel in goal behind the Free Agents ' 4 - 4 - 2 . </t> <t> Glen Johnson , Kolo Toure , Ron Vlaar and Luke Garbutt at the back . </t> <t> James Milner , Mikel Arteta , Tom Cleverley and Jonas Gutierrez in midfield . </t> <t> Burnley 's Danny Ings and Manchester United 's James Wilson up front . </t>",
    "summary_trees": [
      "# ::snt  Swansea 's Gerhard Tremmel in goal behind the Free Agents ' 4 - 4 - 2 . \n(b / be-located-at-91\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Gerhard\"\n                  :op2 \"Tremmel\")\n            :poss (t / team\n                  :name (n2 / name\n                        :op1 \"Swansea\")))\n      :ARG2 (g / goal)\n      :location (b2 / behind\n            :op1 (t2 / team\n                  :ARG1-of (f / free-04)\n                  :quant (s / score-entity\n                        :op1 4\n                        :op2 4\n                        :op3 2))))",
      "# ::snt  Glen Johnson , Kolo Toure , Ron Vlaar and Luke Garbutt at the back . \n(b / be-located-at-91\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Glen\"\n                        :op2 \"Johnson\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Kolo\"\n                        :op2 \"Toure\"))\n            :op3 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Ron\"\n                        :op2 \"Vlaar\"))\n            :op4 (p4 / person\n                  :name (n4 / name\n                        :op1 \"Luke\"\n                        :op2 \"Garbutt\")))\n      :ARG2 (b2 / back))",
      "# ::snt  James Milner , Mikel Arteta , Tom Cleverley and Jonas Gutierrez in midfield . \n(b / be-located-at-91\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"James\"\n                        :op2 \"Milner\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Mikel\"\n                        :op2 \"Arteta\"))\n            :op3 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Tom\"\n                        :op2 \"Cleverley\"))\n            :op4 (p4 / person\n                  :name (n4 / name\n                        :op1 \"Jonas\"\n                        :op2 \"Gutierrez\")))\n      :ARG2 (m / midfield))",
      "# ::snt  Burnley 's Danny Ings and Manchester United 's James Wilson up front . \n(a / and\n      :op1 (p / person\n            :name (n / name\n                  :op1 \"Danny\"\n                  :op2 \"Ingers\")\n            :poss (t / team\n                  :name (n2 / name\n                        :op1 \"Burnley\")))\n      :op2 (p2 / person\n            :name (n3 / name\n                  :op1 \"James\"\n                  :op2 \"Wilson\")\n            :poss (t2 / team\n                  :name (n4 / name\n                        :op1 \"Manchester\"\n                        :op2 \"United\")))\n      :location (u / up-front))"
    ],
    "tree": [
      "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Gerhard\"\n                     :op2 \"Tremmel\")))",
      "(b / be-located-at-91\n   :ARG1 (p / person\n            :poss (t / team\n                     :name (n2 / name\n                               :op1 \"Swansea\"))))",
      "(b / be-located-at-91\n   :location (b2 / behind\n                 :op1 (t2 / team\n                          :ARG1 (f / free-04))))",
      "(b / be-located-at-91\n   :location (b2 / behind\n                 :op1 (t2 / team\n                          :quant (s / score-entity\n                                    :op1 4))))",
      "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Glen\"\n                     :op2 \"Johnson\")))",
      "(b / be-located-at-91\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Kolo\"\n                       :op2 \"Toure\")))",
      "(b / be-located-at-91\n   :ARG1 (p3 / person\n             :name (n3 / name\n                       :op1 \"Ron\"\n                       :op2 \"Vlaar\")))",
      "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Glen\"\n                     :op2 \"Johnson\"))\n   :ARG2 (b2 / back))",
      "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"James\"\n                     :op2 \"Milner\")))",
      "(b / be-located-at-91\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Mikel\"\n                       :op2 \"Arteta\")))",
      "(b / be-located-at-91\n   :ARG1 (p4 / person\n             :name (n4 / name\n                       :op1 \"Jonas\"\n                       :op2 \"Gutierrez\")))",
      "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"James\"\n                     :op2 \"Milner\"))\n   :ARG2 (m / midfield))",
      "(a / and\n   :op1 (p / person\n           :name (n / name\n                    :op1 \"Danny\"\n                    :op2 \"Ingers\")))",
      "(a / and\n   :op1 (p / person\n           :poss (t / team\n                    :name (n2 / name\n                              :op1 \"Burnley\"))))",
      "(a / and\n   :op2 (p2 / person\n            :name (n3 / name\n                      :op1 \"James\"\n                      :op2 \"Wilson\")))",
      "(a / and\n   :op2 (p2 / person\n            :poss (t2 / team\n                      :name (n4 / name\n                                :op1 \"Manchester\"\n                                :op2 \"United\"))))",
      "(a / and\n   :op1 (p / person\n           :name (n / name\n                    :op1 \"Danny\"\n                    :op2 \"Ingers\"))\n   :op2 (p2 / person\n            :name (n3 / name\n                      :op1 \"James\"\n                      :op2 \"Wilson\")))"
    ],
    "smus": [
      "behind 4 teams.",
      "Gerhard Tremmel is behind the Free Team.",
      "Swansea are behind two teams in goal.",
      "Swansea",
      "Glen Johnson and Kolo Toure.",
      "Glen Johnson and Luke Garbutt.",
      "Kolo Toure and Ron Vlaar.",
      "And Glen Johnson.",
      "James Milner, Micel Arteta, Tom Clarke, Jonas Gutierrez...",
      "James Milner and Tom Cleverley",
      "Jonas Gutierrez.",
      "James Milner and Mikel Arteta",
      "Danny Ingers and Manchester United up front.",
      "And James Wilson up front.",
      "Manchester United",
      "And Danny Ingers.",
      "Burnley"
    ]
  },
  {
    "instance_id": "realsumm-58",
    "summary": "<t> Michigan high school students Mikenzy Snell and Matt Pliska who has Down syndrome , made plans to go to plans junior prom together last year . </t> <t> For plans prom picture , the pair held up a sign which read : ' Real friends do n't count chromosomes ' . </t> <t> The sign references the fact that people with Down syndrome have an extra copy of chromosome 21 . </t>",
    "summary_trees": [
      "# ::snt  Michigan high school students Mikenzy Snell and Matt Pliska who has Down syndrome , made plans to go to plans junior prom together last year . \n(p / plan-01\n      :ARG0 (a / and\n            :op1 (p2 / person\n                  :name (n / name\n                        :op1 \"Mikenzy\"\n                        :op2 \"Snell\")\n                  :ARG0-of (s / study-01\n                        :location (h / high-school\n                              :location (s2 / state\n                                    :name (n2 / name\n                                          :op1 \"Michigan\")))))\n            :op2 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Matt\"\n                        :op2 \"Pliska\")\n                  :ARG0-of (h2 / have-03\n                        :ARG1 (m / medical-condition\n                              :name (n4 / name\n                                    :op1 \"Down\"\n                                    :op2 \"Syndrome\")))))\n      :ARG1 (g / go-02\n            :ARG0 a\n            :ARG4 (p4 / prom\n                  :mod (j / junior))\n            :manner (t / together))\n      :time (y / year\n            :mod (l / last)))",
      "# ::snt  For plans prom picture , the pair held up a sign which read : ' Real friends do n't count chromosomes ' . \n(h / hold-up-10\n      :ARG0 (p / pair)\n      :ARG1 (s / sign\n            :ARG0-of (r / read-01\n                  :ARG1 (c / count-01\n                        :polarity -\n                        :ARG0 (p2 / person\n                              :ARG0-of (h2 / have-rel-role-91\n                                    :ARG2 (f / friend\n                                          :ARG1-of (r2 / real-04))))\n                        :ARG1 (c2 / chromosome))))\n      :purpose (p3 / plan-01\n            :ARG1 (p4 / picture-01\n                  :ARG1 (p5 / prom))))",
      "# ::snt  The sign references the fact that people with Down syndrome have an extra copy of chromosome 21 . \n(r / reference-04\n      :ARG0 (s / sign)\n      :ARG1 (h / have-03\n            :ARG0 (p / person\n                  :ARG1 (m / medical-condition\n                        :name (n / name\n                              :op1 \"Down\"\n                              :op2 \"Syndrome\")))\n            :ARG0 p)\n      :ARG1 (c / copy-01\n            :ARG1 (c2 / chromosome\n                  :mod 21)\n            :mod (e / extra)))"
    ],
    "tree": [
      "(p / plan-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Mikenzy\"\n                      :op2 \"Snell\")))",
      "(p / plan-01\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Matt\"\n                       :op2 \"Pliska\")))",
      "(p / plan-01\n   :ARG0 (p2 / person\n             :ARG0 (s / study-01\n                      :location (h / high-school\n                                   :location (s2 / state\n                                                 :name (n2 / name\n                                                           :op1 \"Michigan\"))))))",
      "(p / plan-01\n   :ARG0 (p3 / person\n             :ARG0 (h2 / have-03\n                       :ARG1 (m / medical-condition\n                                :name (n4 / name\n                                          :op1 \"Down\"\n                                          :op2 \"Syndrome\")))))",
      "(p / plan-01\n   :ARG1 (g / go-02\n            :ARG0 (a / and)))",
      "(h / hold-up-10\n   :ARG1 (s / sign\n            :ARG0 (r / read-01\n                     :ARG1 (c / count-01\n                              :ARG0 (p2 / person\n                                        :ARG0 (h2 / have-rel-role-91\n                                                  :ARG2 (f / friend\n                                                           :ARG1 (r2 / real-04))))))))",
      "(h / hold-up-10\n   :purpose (p3 / plan-01\n                :ARG1 (p4 / picture-01\n                          :ARG1 (p5 / prom))))",
      "(r / reference-04\n   :ARG1 (h / have-03\n            :ARG0 (p / person\n                     :ARG1 (m / medical-condition\n                              :name (n / name\n                                       :op1 \"Down\"\n                                       :op2 \"Syndrome\")))))",
      "(r / reference-04\n   :ARG1 (h / have-03\n            :ARG0 (p / person\n                     :ARG1 (m / medical-condition\n                              :name (n / name\n                                       :op1 \"Down\"\n                                       :op2 \"Syndrome\")))))",
      "(r / reference-04\n   :ARG0 (s / sign)\n   :ARG1 (h / have-03\n            :ARG0 (p / person\n                     :ARG1 (m / medical-condition\n                              :name (n / name\n                                       :op1 \"Down\"\n                                       :op2 \"Syndrome\")))))",
      "(r / reference-04\n   :ARG0 (s / sign)\n   :ARG1 (h / have-03\n            :ARG0 (p / person\n                     :ARG1 (m / medical-condition\n                              :name (n / name\n                                       :op1 \"Down\"\n                                       :op2 \"Syndrome\")))))",
      "(h / have-03\n   :ARG0 (p / person\n            :ARG1 (m / medical-condition\n                     :name (n / name\n                              :op1 \"Down\"\n                              :op2 \"Syndrome\"))))"
    ],
    "smus": [
      "People with Down Syndrome.",
      "Students in high school in Michigan made plans last year.",
      "Mikenzy Snell made plans to go together last year.",
      "Mikenzy Snell and Matt Pliska",
      "Last year, people with Down syndrome had plans to go and do so.",
      "Real friends.",
      "Read: \"It doesn't count.\"",
      "People with Down Syndrome have it.",
      "a copy of chromosome 21",
      "Down syndrome.",
      "Refers to people with Down Syndrome.",
      "The sign references people with Down Syndrome."
    ]
  },
  {
    "instance_id": "realsumm-59",
    "summary": "<t> Police say Michael Scott Shemansky came to Police attention after Shemansky failed to appear for a supervised visit with Shemansky son Saturday . </t> <t> That same day mother Sandra Shemansky , 57 , was found dead at the home Police shared in Winter Garden , Florida . </t> <t> Michael Shemansky was going through a difficult divorce and neighbors believe the stress may have caused Shemansky to snap . </t>",
    "summary_trees": [
      "# ::snt  Police say Michael Scott Shemansky came to Police attention after Shemansky failed to appear for a supervised visit with Shemansky son Saturday . \n(s / say-01\n      :ARG0 (p / police)\n      :ARG1 (c / come-01\n            :ARG1 (p2 / person\n                  :name (n / name\n                        :op1 \"Michael\"\n                        :op2 \"Scott\"\n                        :op3 \"Shemansky\"))\n            :ARG4 (a / attend-02\n                  :ARG0 p\n                  :ARG1 p2)\n            :time (a2 / after\n                  :op1 (f / fail-01\n                        :ARG1 p2\n                        :ARG2 (a3 / appear-01\n                              :ARG1 p2\n                              :purpose (v / visit-01\n                                    :ARG0 p2\n                                    :ARG1 (p3 / person\n                                          :ARG0-of (h / have-rel-role-91\n                                                :ARG1 p2\n                                                :ARG2 (s2 / son)))\n                                    :ARG1-of (s3 / supervise-01\n                                          :ARG0 p))\n                              :time (d / date-entity\n                                    :weekday (s4 / saturday)))))))",
      "# ::snt  That same day mother Sandra Shemansky , 57 , was found dead at the home Police shared in Winter Garden , Florida . \n(f / find-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Sandra\"\n                  :op2 \"Shemansky\")\n            :ARG0-of (h / have-rel-role-91\n                  :ARG2 (m / mother))\n            :age (t / temporal-quantity\n                  :quant 57\n                  :unit (y / year)))\n      :ARG2 (d / die-01\n            :ARG1 p)\n      :time (d2 / day\n            :ARG1-of (s / same-01)\n            :mod (t2 / that))\n      :location (h2 / home\n            :ARG1-of (s2 / share-01\n                  :ARG0 (p2 / police)\n                  :location (c / city\n                        :name (n2 / name\n                              :op1 \"Winter\"\n                              :op2 \"Garden\")\n                        :location (s3 / state\n                              :name (n3 / name\n                                    :op1 \"Florida\"))))))",
      "# ::snt  Michael Shemansky was going through a difficult divorce and neighbors believe the stress may have caused Shemansky to snap . \n(a / and\n      :op1 (g / go-through-20\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Michael\"\n                        :op2 \"Shemansky\"))\n            :ARG1 (d / divorce-01\n                  :ARG0 p\n                  :mod (d2 / difficult)))\n      :op2 (b / believe-01\n            :ARG0 (p2 / person\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 p\n                        :ARG2 (n2 / neighbor)))\n            :ARG1 (p3 / possible-01\n                  :ARG1 (c / cause-01\n                        :ARG0 (s / stress-02)\n                        :ARG1 (s2 / snap-04\n                              :ARG1 p)))))"
    ],
    "tree": [
      "(s / say-01\n   :ARG1 (c / come-01\n            :ARG1 (p2 / person\n                      :name (n / name\n                               :op1 \"Michael\"\n                               :op2 \"Scott\"\n                               :op3 \"Shemansky\"))))",
      "(s / say-01\n   :ARG1 (c / come-01\n            :ARG4 (a / attend-02\n                     :ARG0 (p / police))))",
      "(s / say-01\n   :ARG1 (c / come-01\n            :time (a2 / after\n                      :op1 (f / fail-01\n                              :ARG2 (a3 / appear-01\n                                        :ARG1 (p2 / person :name (n / name :op1 \"Michael\" :op2 \"Scott\" :op3 \"Shemansky\")))))))",
      "(f / find-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Sandra\"\n                     :op2 \"Shemansky\")))",
      "(f / find-01\n   :ARG1 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (m / mother))))",
      "(f / find-01\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :quant 57)))",
      "(f / find-01\n   :ARG2 (d / die-01\n            :ARG1 (p / person :name (n / name :op1 \"Sandra\" :op2 \"Shemansky\")))))",
      "(a / and\n   :op1 (g / go-through-20\n           :ARG0 (p / person\n                    :name (n / name\n                             :op1 \"Michael\"\n                             :op2 \"Shemansky\"))))",
      "(a / and\n   :op1 (g / go-through-20\n           :ARG1 (d / divorce-01\n                    :ARG0 (p / person :name (n / name :op1 \"Michael\" :op2 \"Shemansky\")))))",
      "(a / and\n   :op1 (g / go-through-20\n           :ARG1 (d / divorce-01\n                    :mod (d2 / difficult))))",
      "(a / and\n   :op2 (b / believe-01\n           :ARG0 (p2 / person\n                     :ARG0 (h / have-rel-role-91\n                              :ARG1 (p / person :name (n / name :op1 \"Michael\" :op2 \"Shemansky\"))))))",
      "(a / and\n   :op2 (b / believe-01\n           :ARG1 (p3 / possible-01\n                     :ARG1 (c / cause-01\n                              :ARG0 (s / stress-02)))))"
    ],
    "smus": [
      "The police attention came after the person of Michael Scott Shemansky failed to appear for a visit.",
      "failed to appear Saturday.",
      "Michael Scott Shemansky came after he failed to appear for his visit.",
      "Sandra Shemansky is the mother.",
      "Police shared in Florida.",
      "The 57-year-old was found the same day at a home the police shared.",
      "Sandra Shemansky was found dead the same day at the home the police shared.",
      "Some believe stress could have caused.",
      "Michael Shemansky went through a divorce.",
      "Neighbors believe.",
      "Michael Shemansky went through a divorce and believe that stress could have caused it.",
      "Michael Shemansky"
    ]
  },
  {
    "instance_id": "realsumm-60",
    "summary": "<t> Bayern Munich beat Porto 6 - 1 in the Champions League on Tuesday . </t> <t> Pep Guardiola 's side progressed 7 - 4 on aggregate to reach semi - finals . </t> <t> Thomas Muller scored 27th Champions League goal to pass Mario Gomez . </t> <t> Muller is now the leading German scorer in the competition . </t> <t> After game Muller led the celebrations with supporters using a megaphone . </t>",
    "summary_trees": [
      "# ::snt  Bayern Munich beat Porto 6 - 1 in the Champions League on Tuesday . \n(b / beat-03\n      :ARG0 (t / team\n            :name (n / name\n                  :op1 \"Bayern\"\n                  :op2 \"Munich\"))\n      :ARG1 (t2 / team\n            :name (n2 / name\n                  :op1 \"Porto\"))\n      :ARG2 (g / game\n            :name (n3 / name\n                  :op1 \"Champions\"\n                  :op2 \"League\"))\n      :time (d / date-entity\n            :weekday (t3 / tuesday))\n      :quant (s / score-entity\n            :op1 6\n            :op2 1))",
      "# ::snt  Pep Guardiola 's side progressed 7 - 4 on aggregate to reach semi - finals . \n(p / progress-01\n      :ARG1 (s / side\n            :poss (p2 / person\n                  :name (n / name\n                        :op1 \"Pep\"\n                        :op2 \"Guardiola\")))\n      :ARG4 (r / reach-01\n            :ARG0 s\n            :ARG1 (f / final\n                  :mod (s2 / semi)))\n      :manner (s3 / score-entity\n            :op1 7\n            :op2 4)\n      :ARG4-of (a / aggregate-01))",
      "# ::snt  Thomas Muller scored 27th Champions League goal to pass Mario Gomez . \n(s / score-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Thomas\"\n                  :op2 \"Muller\"))\n      :ARG1 (g / goal\n            :ord (o / ordinal-entity\n                  :value 27)\n            :mod (g2 / game\n                  :name (n2 / name\n                        :op1 \"Champions\"\n                        :op2 \"League\")))\n      :ARG2-of (p2 / pass-03\n            :ARG0 p\n            :ARG1 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Mario\"\n                        :op2 \"Gomez\"))))",
      "# ::snt  Muller is now the leading German scorer in the competition . \n(p / person\n      :name (n / name\n            :op1 \"Muller\")\n      :ARG0-of (s / score-01\n            :ARG2 (p2 / person\n                  :ARG0-of (c / compete-01))\n            :ARG3 (l / lead-01\n                  :ARG0 p\n                  :ARG1 p2))\n      :mod (c2 / country\n            :name (n2 / name\n                  :op1 \"Germany\"))\n      :time (n3 / now))",
      "# ::snt  After game Muller led the celebrations with supporters using a megaphone . \n(l / lead-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Muller\"))\n      :ARG1 (c / celebrate-02\n            :accompanier (p2 / person\n                  :ARG0-of (s / support-01)\n                  :ARG0-of (u / use-01\n                        :ARG1 (m / megaphone))))\n      :time (a / after\n            :op1 (g / game)))"
    ],
    "tree": [
      "(b / beat-03\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Bayern\"\n                     :op2 \"Munich\")))",
      "(b / beat-03\n   :ARG1 (t2 / team\n             :name (n2 / name\n                       :op1 \"Porto\")))",
      "(b / beat-03\n   :time (d / date-entity\n            :weekday (t3 / tuesday)))",
      "(b / beat-03\n   :quant (s / score-entity\n             :op1 6))",
      "(p / progress-01\n   :ARG1 (s / side\n            :poss (p2 / person\n                      :name (n / name\n                               :op1 \"Pep\"\n                               :op2 \"Guardiola\"))))",
      "(p / progress-01\n   :ARG4 (r / reach-01\n            :ARG0 (s / side)))",
      "(p / progress-01\n   :ARG4 (r / reach-01\n            :ARG1 (f / final\n                     :mod (s2 / semi))))",
      "(p / progress-01\n   :manner (s3 / score-entity\n               :op1 7\n               :op2 4))",
      "(p / progress-01\n   :ARG1 (s / side\n            :poss (p2 / person\n                      :name (n / name\n                               :op1 \"Pep\"\n                               :op2 \"Guardiola\")))\n   :ARG4 (r / reach-01\n            :ARG0 s))",
      "(s / score-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Thomas\"\n                     :op2 \"Muller\")))",
      "(s / score-01\n   :ARG1 (g / goal\n            :ord (o / ordinal-entity\n                    :value 27)))",
      "(s / score-01\n   :ARG1 (g / goal\n            :mod (g2 / game\n                     :name (n2 / name\n                               :op1 \"Champions\"\n                               :op2 \"League\"))))",
      "(s / score-01\n   :ARG2 (p2 / pass-03\n             :ARG0 (p / person :name (n / name :op1 \"Thomas\" :op2 \"Muller\"))))",
      "(s / score-01\n   :ARG2 (p2 / pass-03\n             :ARG1 (p3 / person\n                       :name (n3 / name\n                                 :op1 \"Mario\"\n                                 :op2 \"Gomez\"))))",
      "(p / person\n   :name (n / name\n            :op1 \"Muller\"))",
      "(p / person\n   :ARG0 (s / score-01\n            :ARG2 (p2 / person\n                      :ARG0 (c / compete-01))))",
      "(p / person\n   :ARG0 (s / score-01\n            :ARG3 (l / lead-01\n                     :ARG0 p)))",
      "(p / person\n   :ARG0 (s / score-01\n            :ARG3 (l / lead-01\n                     :ARG1 (p2 / person))))",
      "(p / person\n   :mod (c2 / country\n            :name (n2 / name\n                      :op1 \"Germany\")))",
      "(l / lead-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Muller\")))",
      "(l / lead-02\n   :ARG1 (c / celebrate-02\n            :accompanier (p2 / person\n                             :ARG0 (s / support-01))))",
      "(l / lead-02\n   :ARG1 (c / celebrate-02\n            :accompanier (p2 / person\n                             :ARG0 (u / use-01\n                                      :ARG1 (m / megaphone)))))",
      "(l / lead-02\n   :time (a / after\n            :op1 (g / game)))",
      "(l / lead-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Muller\"))\n   :ARG1 (c / celebrate-02\n            :accompanier (p2 / person\n                             :ARG0 (s / support-01))))"
    ],
    "smus": [
      "Bayern Munich beat Porto 6-1.",
      "Tuesday beat, by 1",
      "Bayern Munich beat Porto 6-1 on Tuesday.",
      "Bayern Munich",
      "Pep Guardiola's side progressed to reach the semi-finals with 7-4.",
      "Progressed to reach the side.",
      "Pep Guardiola's side progressed.",
      "The side progressed to reach by 7-4.",
      "Progressed to reach semi-finals.",
      "The 27th goal scored.",
      "Thomas Muller scored the 27th goal to pass.",
      "Thomas Muller scored the Champions League goal to pass.",
      "27th goal in the Champions League",
      "Pass Mario Gomez.",
      "Muller now.",
      "The leader's score is now German.",
      "The lead scorer is now.",
      "M\u00fcller is now the German in the competition's score.",
      "Muller: Leading score",
      "Muller led celebrations with people using the megaphone.",
      "Muller led after the game.",
      "led to celebrations with supporters.",
      "Muller led celebrations with supporters after the game.",
      "Muller."
    ]
  },
  {
    "instance_id": "realsumm-61",
    "summary": "<t> Domenico Rancadore given a seven - year sentence by Italian court in 1999 . </t> <t> Rancadore was convicted for role as a ' man of honour ' , taking bribes from builders . </t> <t> In February the Sicilian Mafia fugitive lost battle against extradition to Italy . </t> <t> Today Mafia emerged that the 65-year - old 's case expired in October last year . </t>",
    "summary_trees": [
      "# ::snt  Domenico Rancadore given a seven - year sentence by Italian court in 1999 . \n(s / sentence-01\n      :ARG0 (c / court\n            :mod (c2 / country\n                  :name (n / name\n                        :op1 \"Italy\")))\n      :ARG1 (p / person\n            :name (n2 / name\n                  :op1 \"Domenico\"\n                  :op2 \"Rancadore\"))\n      :ARG2 (t / temporal-quantity\n            :quant 7\n            :unit (y / year))\n      :time (d / date-entity\n            :year 1999))",
      "# ::snt  Rancadore was convicted for role as a ' man of honour ' , taking bribes from builders . \n(c / convict-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Rancadore\"))\n      :ARG2 (a / and\n            :op1 (r / role\n                  :mod (m / man\n                        :mod (h / honor)))\n            :op2 (b / bribe-01\n                  :ARG0 p\n                  :ARG1 (p2 / person\n                        :ARG0-of (b2 / build-01)))))",
      "# ::snt  In February the Sicilian Mafia fugitive lost battle against extradition to Italy . \n(l / lose-03\n      :ARG0 (f / fugitive\n            :mod (c / criminal-organization\n                  :name (n / name\n                        :op1 \"Mafia\"))\n            :mod (ii / island\n                  :name (n2 / name\n                        :op1 \"Sicily\")))\n      :ARG1 (b / battle-01\n            :ARG0 f\n            :ARG1 (e / extradite-01\n                  :ARG1 f\n                  :ARG3 (c2 / country\n                        :name (n3 / name\n                              :op1 \"Italy\"))))\n      :time (d / date-entity\n            :month 2))",
      "# ::snt  Today Mafia emerged that the 65-year - old 's case expired in October last year . \n(e / emerge-02\n      :ARG0 (c / criminal-organization\n            :name (n / name\n                  :op1 \"Mafia\"))\n      :ARG1 (e2 / expire-01\n            :ARG1 (c2 / case-03\n                  :ARG2 (p / person\n                        :age (t / temporal-quantity\n                              :quant 65\n                              :unit (y / year))))\n            :time (d / date-entity\n                  :month 10\n                  :mod (y2 / year\n                        :mod (l / last))))\n      :time (t2 / today))"
    ],
    "tree": [
      "(s / sentence-01\n   :ARG0 (c / court\n            :mod (c2 / country\n                     :name (n / name\n                              :op1 \"Italy\"))))",
      "(s / sentence-01\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Domenico\"\n                      :op2 \"Rancadore\")))",
      "(s / sentence-01\n   :ARG2 (t / temporal-quantity\n            :quant 7))",
      "(s / sentence-01\n   :ARG2 (t / temporal-quantity\n            :unit (y / year)))",
      "(s / sentence-01\n   :time (d / date-entity\n            :year 1999))",
      "(c / convict-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Rancadore\")))",
      "(c / convict-01\n   :ARG2 (r / role\n            :mod (m / man\n                    :mod (h / honor))))",
      "(c / convict-01\n   :ARG2 (b / bribe-01\n            :ARG0 (p / person :name (n / name :op1 \"Rancadore\"))))",
      "(c / convict-01\n   :ARG2 (b / bribe-01\n            :ARG1 (p2 / person\n                      :ARG0 (b2 / build-01))))",
      "(c / convict-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Rancadore\"))\n   :ARG2 (r / role\n            :mod (m / man\n                    :mod (h / honor))))",
      "(l / lose-03\n   :ARG0 (f / fugitive\n            :mod (c / criminal-organization\n                    :name (n / name\n                             :op1 \"Mafia\"))))",
      "(l / lose-03\n   :ARG0 (f / fugitive\n            :mod (ii / island\n                     :name (n2 / name\n                               :op1 \"Sicily\"))))",
      "(l / lose-03\n   :ARG1 (b / battle-01\n            :ARG1 (e / extradite-01\n                     :ARG3 (c2 / country\n                               :name (n3 / name\n                                         :op1 \"Italy\")))))",
      "(e / emerge-02\n   :ARG0 (c / criminal-organization\n            :name (n / name\n                     :op1 \"Mafia\")))",
      "(e / emerge-02\n   :ARG1 (e2 / expire-01\n             :ARG1 (c2 / case-03\n                       :ARG2 (p / person\n                                :age (t / temporal-quantity\n                                        :quant 65)))))",
      "(e / emerge-02\n   :ARG1 (e2 / expire-01\n             :time (d / date-entity\n                      :month 10)))",
      "(e / emerge-02\n   :ARG1 (e2 / expire-01\n             :time (d / date-entity\n                      :mod (y2 / year\n                               :mod (l / last)))))",
      "(e / emerge-02\n   :ARG1 (e2 / expire-01\n             :ARG1 (c2 / case-03\n                       :ARG2 (p / person\n                                :age (t / temporal-quantity\n                                        :unit (y / year))))))"
    ],
    "smus": [
      "A court in Italy sentenced Domenico Rancadore to seven years in prison.",
      "The sentence was given by an Italian court.",
      "Italy (IT)",
      "The Italian court.",
      "The sentence was in 1999.",
      "Convicted for the role of honor man.",
      "Rancadore",
      "The role of honor man.",
      "Rancadore was convicted of bribery.",
      "and bribes to builders.",
      "The Mafia fugitive lost in February.",
      "Extradition to Italy",
      "Mafia fugitive",
      "The Mafia emerged.",
      "The Mafia emerged with an expired last year.",
      "The expiration date for October emerged today.",
      "The case of the 65-year-old emerged to have expired.",
      "It emerged that the expired last year."
    ]
  },
  {
    "instance_id": "realsumm-62",
    "summary": "<t> Baron the German Shepard was filmed as Shepard helped get the dishes done at home in California . </t> <t> The pup was professionally trained at the Hill Country K9 school . </t> <t> To date the clip of Baron dishwashing has been watched over 27,000 times . </t> <t> Many viewers have deemed the dog 's cleaning antics ' cute ' and adorable ' </t>",
    "summary_trees": [
      "# ::snt  Baron the German Shepard was filmed as Shepard helped get the dishes done at home in California . \n(f / film-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Baron\"\n                  :op2 \"the\"\n                  :op3 \"German\"\n                  :op4 \"Shepard\"))\n      :time (h / help-01\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Shepard\"))\n            :ARG1 (g / get-04\n                  :ARG0 p2\n                  :ARG1 (b / be-done-08\n                        :ARG1 (d / dish))\n                  :location (h2 / home\n                        :location (s / state\n                              :name (n3 / name\n                                    :op1 \"California\"))))))",
      "# ::snt  The pup was professionally trained at the Hill Country K9 school . \n(t / train-01\n      :ARG0 (s / school\n            :name (n / name\n                  :op1 \"Hill\"\n                  :op2 \"Country\"\n                  :op3 \"K9\"))\n      :ARG2 (p / pup)\n      :manner (p2 / professional))",
      "# ::snt  To date the clip of Baron dishwashing has been watched over 27,000 times . \n(w / watch-01\n      :ARG1 (c / clip\n            :topic (w2 / wash-01\n                  :ARG0 (p / person\n                        :name (n / name\n                              :op1 \"Baron\"))\n                  :ARG1 (d / dish)))\n      :time (t / to-date)\n      :quant (o / over\n            :op1 27000))",
      "# ::snt  Many viewers have deemed the dog 's cleaning antics ' cute ' and adorable ' \n(d / deem-01\n      :ARG0 (p / person\n            :ARG0-of (v / view-01)\n            :quant (m / many))\n      :ARG1 (a / and\n            :op1 (c / cute)\n            :op2 (a2 / adorable)\n            :domain (a3 / antics\n                  :topic (c2 / clean-01\n                        :ARG0 (d2 / dog)))))"
    ],
    "tree": [
      "(f / film-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Baron\"\n                     :op2 \"the\"\n                     :op3 \"German\"\n                     :op4 \"Shepard\")))",
      "(f / film-01\n   :time (h / help-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Shepard\"))))",
      "(f / film-01\n   :time (h / help-01\n            :ARG1 (g / get-04\n                     :ARG0 (p2 / person :name (n2 / name :op1 \"Shepard\")))))",
      "(f / film-01\n   :time (h / help-01\n            :ARG1 (g / get-04\n                     :ARG1 (b / be-done-08\n                              :ARG1 (d / dish)))))",
      "(t / train-01\n   :ARG0 (s / school\n            :name (n / name\n                     :op1 \"Hill\"\n                     :op2 \"Country\"\n                     :op3 \"K9\")))",
      "(t / train-01\n   :ARG0 (s / school\n            :name (n / name\n                     :op1 \"Hill\"\n                     :op2 \"Country\"\n                     :op3 \"K9\"))\n   :ARG2 (p / pup))",
      "(t / train-01\n   :ARG0 (s / school\n            :name (n / name\n                     :op1 \"Hill\"\n                     :op2 \"Country\"\n                     :op3 \"K9\"))\n   :manner (p2 / professional))",
      "(t / train-01\n   :ARG2 (p / pup)\n   :manner (p2 / professional))",
      "(w / watch-01\n   :ARG1 (c / clip\n            :topic (w2 / wash-01\n                       :ARG0 (p / person\n                                :name (n / name\n                                         :op1 \"Baron\")))))",
      "(w / watch-01\n   :ARG1 (c / clip\n            :topic (w2 / wash-01\n                       :ARG1 (d / dish))))",
      "(w / watch-01\n   :quant (o / over\n             :op1 27000))",
      "(w / watch-01\n   :ARG1 (c / clip\n            :topic (w2 / wash-01\n                       :ARG1 (d / dish)))\n   :time (t / to-date))",
      "(d / deem-01\n   :ARG0 (p / person\n            :ARG0 (v / view-01)))",
      "(d / deem-01\n   :ARG0 (p / person\n            :quant (m / many)))",
      "(d / deem-01\n   :ARG1 (a3 / antics\n             :topic (c2 / clean-01\n                        :ARG0 (d2 / dog))))",
      "(d / deem-01\n   :ARG0 (p / person\n            :ARG0 (v / view-01))\n   :ARG1 (c / cute))",
      "(d / deem-01\n   :ARG0 (p / person\n            :ARG0 (v / view-01))\n   :ARG1 (a2 / adorable))"
    ],
    "smus": [
      "Baron the German Shepard was filmed as shepard helped.",
      "Get the dishes done.",
      "Shepard helped.",
      "home in California",
      "Hill Country K9",
      "The Hill Country K9 school has trained the pup.",
      "The Hill Country K9 school was trained.",
      "The pup is professionally trained.",
      "Baron washed.",
      "To date, over 27,000 people have watched the clip of Baron washing.",
      "Watched the clip of Baron washing.",
      "Over 27,000 watched.",
      "Many have deemed it cute.",
      "And the dog cleaning antics are cute.",
      "Many have deemed the dog cleaning antics.",
      "As deemed by the viewers.",
      "There are many viewers."
    ]
  },
  {
    "instance_id": "realsumm-63",
    "summary": "<t> Jihadis face fines , whipping or even jail time for wearing Nike products . </t> <t> Ban is also partly due to the brand sharing Ban name with a Greek Goddess . </t> <t> Commanders say the name also sounds like sexual slang words in Arabic . </t> <t> Those living under ISIS are already banned from wearing jeans or items of clothing carrying provocative language or swear words . </t>",
    "summary_trees": [
      "# ::snt  Jihadis face fines , whipping or even jail time for wearing Nike products . \n(f / face-01\n      :ARG0 (j / jihadi)\n      :ARG1 (o / or\n            :op1 (f2 / fine-01)\n            :op2 (w / whip-01)\n            :op3 (j2 / jail-01\n                  :mod (e / even)))\n      :ARG1-of (c / cause-01\n            :ARG0 (w2 / wear-01\n                  :ARG0 j\n                  :ARG1 (p / product\n                        :mod (c2 / company\n                              :name (n / name\n                                    :op1 \"Nike\"))))))",
      "# ::snt  Ban is also partly due to the brand sharing Ban name with a Greek Goddess . \n(c / cause-01\n      :ARG0 (s / share-01\n            :ARG0 (b / brand)\n            :ARG1 (n / name\n                  :poss (p / person\n                        :name (n2 / name\n                              :op1 \"Ban\")))\n            :ARG2 p\n            :name (n3 / name\n                  :op1 \"Goddess\")\n            :mod (c2 / country\n                  :name (n4 / name\n                        :op1 \"Greece\")))\n      :ARG1 p\n      :degree (p2 / part)\n      :mod (a / also))",
      "# ::snt  Commanders say the name also sounds like sexual slang words in Arabic . \n(s / say-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (c / commander)))\n      :ARG1 (s2 / sound-01\n            :ARG1 (n / name)\n            :ARG2 (w / word\n                  :mod (s3 / slang\n                        :mod (s4 / sex))\n                  :medium (l / language\n                        :name (n2 / name\n                              :op1 \"Arabic\")))\n            :mod (a / also)))",
      "# ::snt  Those living under ISIS are already banned from wearing jeans or items of clothing carrying provocative language or swear words . \n(b / ban-01\n      :ARG1 (w / wear-01\n            :ARG0 (p / person\n                  :mod (t / that)\n                  :ARG0-of (l / live-01\n                        :location (u / under\n                              :op1 (c / criminal-organization\n                                    :name (n / name\n                                          :op1 \"ISIS\")))))\n            :ARG1 (o / or\n                  :op1 (j / jeans)\n                  :op2 (ii / item\n                        :ARG2-of (c2 / clothe-01))\n                  :ARG0-of (c3 / carry-01\n                        :ARG1 (o2 / or\n                              :op1 (l2 / language\n                                    :ARG0-of (p2 / provoke-01))\n                              :op2 (w2 / word\n                                    :ARG1-of (s / swear-01))))))\n      :ARG2 p\n      :time (a / already))"
    ],
    "tree": [
      "(f / face-01\n   :ARG1 (o / or\n            :op1 (f2 / fine-01)))",
      "(f / face-01\n   :ARG1 (o / or\n            :op2 (w / whip-01)))",
      "(f / face-01\n   :ARG1 (o / or\n            :op3 (j2 / jail-01\n                     :mod (e / even))))",
      "(f / face-01\n   :ARG0 (j / jihadi)\n   :ARG1 (o / or\n            :op1 (f2 / fine-01)))",
      "(f / face-01\n   :ARG0 (j / jihadi)\n   :ARG1 (o / or\n            :op2 (w / whip-01)))",
      "(c / cause-01\n   :ARG0 (s / share-01\n            :ARG0 (b / brand)))",
      "(c / cause-01\n   :ARG0 (s / share-01\n            :ARG2 (p / person\n                     :name (n2 / name\n                               :op1 \"Ban\"))))",
      "(c / cause-01\n   :ARG0 (s / share-01\n            :name (n3 / name\n                      :op1 \"Goddess\")))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (c / commander))))",
      "(s / say-01\n   :ARG1 (s2 / sound-01\n             :ARG1 (n / name)))",
      "(s / say-01\n   :ARG1 (s2 / sound-01\n             :ARG2 (w / word\n                      :mod (s3 / slang\n                               :mod (s4 / sex)))))",
      "(s / say-01\n   :ARG1 (s2 / sound-01\n             :mod (a / also)))",
      "(s / say-01\n   :ARG1 (s2 / sound-01\n             :ARG2 (w / word\n                      :medium (l / language\n                                 :name (n2 / name\n                                           :op1 \"Arabic\")))))",
      "(b / ban-01\n   :ARG1 (w / wear-01\n            :ARG1 (o / or\n                     :op1 (j / jeans))))",
      "(b / ban-01\n   :ARG1 (w / wear-01\n            :ARG0 (p / person\n                     :ARG0 (l / live-01\n                              :location (u / under\n                                           :op1 (c / criminal-organization\n                                                   :name (n / name\n                                                            :op1 \"ISIS\")))))))",
      "(b / ban-01\n   :ARG1 (w / wear-01\n            :ARG1 (o / or\n                     :op2 (ii / item\n                              :ARG2 (c2 / clothe-01)))))",
      "(b / ban-01\n   :ARG1 (w / wear-01\n            :ARG1 (o / or\n                     :ARG0 (c3 / carry-01\n                               :ARG1 (o2 / or\n                                         :op1 (l2 / language\n                                                  :ARG0 (p2 / provoke-01)))))))"
    ],
    "smus": [
      "Faced with jail even.",
      "Fines or even jail.",
      "Because wearing NIKE products.",
      "Jihadis face fines or",
      "Nike products",
      "Ban's name is sharing the Greek name Goddess.",
      "The brand is sharing Ban's name with the Greek name Goddess.",
      "Partly because Ban's name is sharing.",
      "Sounds like sex slang words.",
      "The commanders say the name sounds.",
      "The name also sounds like slang words.",
      "Arabic",
      "Sounds like Arabic words.",
      "Carrying provocative language or clothing items.",
      "Wearing or carrying swearing wors.",
      "Under ISIS.",
      "Wearing or carrying swearing wors has already been banned."
    ]
  },
  {
    "instance_id": "realsumm-64",
    "summary": "<t> Lorraine Bracco was asked by The Sopranos creator to be Carmela . </t> <t> The actress turned Bracco down because actress played a mobster 's wife in Martin Scorsese 's Goodfellas in 1990 . </t> <t> Convinced showrunner David Chase to let actress play the role of Dr. Jennifer Melfi . </t>",
    "summary_trees": [
      "# ::snt  Lorraine Bracco was asked by The Sopranos creator to be Carmela . \n(a / ask-02\n      :ARG0 (p / person\n            :ARG0-of (c / create-01\n                  :ARG1 (b / broadcast-program\n                        :name (n / name\n                              :op1 \"The\"\n                              :op2 \"Sopranos\"))))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Carmela\")\n            :domain (p3 / person\n                  :name (n3 / name\n                        :op1 \"Lorraine\"\n                        :op2 \"Bracco\")))\n      :ARG2 p3)",
      "# ::snt  The actress turned Bracco down because actress played a mobster 's wife in Martin Scorsese 's Goodfellas in 1990 . \n(c / cause-01\n      :ARG0 (p / play-02\n            :ARG0 (p2 / person\n                  :ARG0-of (a / act-01))\n            :ARG1 (p3 / person\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 (m / mobster)\n                        :ARG2 (w / wife)))\n            :time (w2 / work-of-art\n                  :name (n / name\n                        :op1 \"Goodfellas\")\n                  :poss (p4 / person\n                        :name (n2 / name\n                              :op1 \"Martin\"\n                              :op2 \"Scorsese\"))\n                  :time (d / date-entity\n                        :year 1990)))\n      :ARG1 (t / turn-down-05\n            :ARG0 p2\n            :ARG1 (p5 / person\n                  :name (n3 / name\n                        :op1 \"Bracco\"))))",
      "# ::snt  Convinced showrunner David Chase to let actress play the role of Dr. Jennifer Melfi . \n(c / convince-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"David\"\n                  :op2 \"Chase\")\n            :ARG0-of (r / run-01\n                  :ARG1 (s / show)))\n      :ARG2 (l / let-01\n            :ARG0 p\n            :ARG1 (p2 / play-02\n                  :ARG0 (p3 / person\n                        :ARG0-of (a / act-01))\n                  :ARG1 (d / doctor\n                        :name (n2 / name\n                              :op1 \"Jennifer\"\n                              :op2 \"Melfi\")))))"
    ],
    "tree": [
      "(a / ask-02\n   :ARG0 (p / person\n            :ARG0 (c / create-01\n                     :ARG1 (b / broadcast-program\n                              :name (n / name\n                                       :op1 \"The\"\n                                       :op2 \"Sopranos\")))))",
      "(a / ask-02\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Carmela\")))",
      "(a / ask-02\n   :ARG1 (p2 / person\n             :domain (p3 / person\n                         :name (n3 / name\n                                   :op1 \"Lorraine\"\n                                   :op2 \"Bracco\"))))",
      "(a / ask-02\n   :ARG0 (p / person\n            :ARG0 (c / create-01\n                     :ARG1 (b / broadcast-program\n                              :name (n / name\n                                       :op1 \"The\"\n                                       :op2 \"Sopranos\"))))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Carmela\")))",
      "(c / cause-01\n   :ARG0 (p / play-02\n            :ARG1 (p3 / person\n                      :ARG0 (h / have-rel-role-91\n                               :ARG1 (m / mobster)))))",
      "(c / cause-01\n   :ARG0 (p / play-02\n            :time (w2 / work-of-art\n                      :name (n / name\n                               :op1 \"Goodfellas\"))))",
      "(c / cause-01\n   :ARG0 (p / play-02\n            :time (w2 / work-of-art\n                      :poss (p4 / person\n                                :name (n2 / name\n                                          :op1 \"Martin\"\n                                          :op2 \"Scorsese\")))))",
      "(c / cause-01\n   :ARG0 (p / play-02\n            :time (w2 / work-of-art\n                      :time (d / date-entity\n                               :year 1990))))",
      "(c / convince-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"David\"\n                     :op2 \"Chase\")))",
      "(c / convince-01\n   :ARG1 (p / person\n            :ARG0 (r / run-01\n                     :ARG1 (s / show))))",
      "(c / convince-01\n   :ARG2 (l / let-01\n            :ARG0 (p / person :name (n / name :op1 \"David\" :op2 \"Chase\")))))",
      "(c / convince-01\n   :ARG2 (l / let-01\n            :ARG1 (p2 / play-02\n                      :ARG0 (p3 / person\n                                :ARG0 (a / act-01)))))",
      "(c / convince-01\n   :ARG2 (l / let-01\n            :ARG1 (p2 / play-02\n                      :ARG1 (d / doctor\n                               :name (n2 / name\n                                         :op1 \"Jennifer\"\n                                         :op2 \"Melfi\")))))"
    ],
    "smus": [
      "The creators of The Sopranos have asked Carmela.",
      "Lorraine Bracco is a person.",
      "The Sopranos.",
      "Carmela",
      "The wife played in Martin Scorsese's work of art.",
      "In Goodfellas, the wife played.",
      "In the 1990 work of art, the wife played.",
      "The reason that Bracco was turned down was because the wife played.",
      "Convinced to let the actors play.",
      "The show's producers were convinced to let Dr. Jennifer Melfi play.",
      "Show run by David Chase.",
      "David Chase was convinced to let go.",
      "Let Dr. Jennifer Melfi play."
    ]
  },
  {
    "instance_id": "realsumm-65",
    "summary": "<t> Kevin Carr set off on Carr epic journey from Haytor , Dartmoor in July 2013 . </t> <t> Carr is now less than 24 hours away from completing Carr epic trip . </t> <t> Mr Carr ran around the world unsupported - taking Carr own tent with Carr . </t> <t> Carr is set to break the previous record held by an Australian by 24 hours . </t>",
    "summary_trees": [
      "# ::snt  Kevin Carr set off on Carr epic journey from Haytor , Dartmoor in July 2013 . \n(s / set-off-06\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Kevin\"\n                  :op2 \"Carr\"))\n      :ARG1 (j / journey-01\n            :ARG0 p\n            :mod (e / epic))\n      :source (l / location\n            :name (n2 / name\n                  :op1 \"Haytor\")\n            :part-of (ii / island\n                  :name (n3 / name\n                        :op1 \"Dartmoor\")))\n      :time (d / date-entity\n            :month 7\n            :year 2013))",
      "# ::snt  Carr is now less than 24 hours away from completing Carr epic trip . \n(b / be-temporally-at-91\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Carr\"))\n      :ARG2 (a / away\n            :op1 (c / complete-01\n                  :ARG0 p\n                  :ARG1 (t / trip-03\n                        :ARG0 p\n                        :mod (e / epic)))\n            :duration (l / less-than\n                  :op1 (t2 / temporal-quantity\n                        :quant 24\n                        :unit (h / hour))))\n      :time (n2 / now))",
      "# ::snt  Mr Carr ran around the world unsupported - taking Carr own tent with Carr . \n(r / run-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Mr\"\n                  :op2 \"Carr\"))\n      :path (a / around\n            :op1 (w / world))\n      :manner (s / support-01\n            :polarity -\n            :ARG1 p)\n      :manner (t / take-01\n            :ARG0 p\n            :ARG1 (t2 / tent\n                  :poss p)\n            :prep-with p))",
      "# ::snt  Carr is set to break the previous record held by an Australian by 24 hours . \n(s / set-08\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Carr\"))\n      :ARG2 (b / break-02\n            :ARG0 p\n            :ARG1 (r / record\n                  :time (p2 / previous)\n                  :ARG1-of (h / hold-01\n                        :ARG0 (p3 / person\n                              :mod (c / country\n                                    :name (n2 / name\n                                          :op1 \"Australia\")))))\n            :extent (t / temporal-quantity\n                  :quant 24\n                  :unit (h2 / hour))))"
    ],
    "tree": [
      "(s / set-off-06\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kevin\"\n                     :op2 \"Carr\")))",
      "(s / set-off-06\n   :ARG1 (j / journey-01\n            :ARG0 (p / person :name (n / name :op1 \"Kevin\" :op2 \"Carr\"))))",
      "(s / set-off-06\n   :ARG1 (j / journey-01\n            :mod (e / epic)))",
      "(s / set-off-06\n   :source (l / location\n              :name (n2 / name\n                        :op1 \"Haytor\")))",
      "(s / set-off-06\n   :source (l / location\n              :part (ii / island\n                        :name (n3 / name\n                                  :op1 \"Dartmoor\"))))",
      "(b / be-temporally-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Carr\")))",
      "(b / be-temporally-at-91\n   :ARG2 (a / away\n            :op1 (c / complete-01\n                    :ARG0 (p / person :name (n / name :op1 \"Carr\")))))",
      "(b / be-temporally-at-91\n   :ARG2 (a / away\n            :duration (l / less-than\n                         :op1 (t2 / temporal-quantity\n                                  :quant 24))))",
      "(r / run-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mr\"\n                     :op2 \"Carr\")))",
      "(r / run-02\n   :path (a / around\n            :op1 (w / world)))",
      "(r / run-02\n   :manner (s / support-01\n              :polarity -\n              :ARG1 (p / person :name (n / name :op1 \"Mr\" :op2 \"Carr\"))))",
      "(r / run-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mr\"\n                     :op2 \"Carr\"))\n   :path (a / around\n            :op1 (w / world)))",
      "(r / run-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mr\"\n                     :op2 \"Carr\"))\n   :manner (s / support-01\n              :polarity -\n              :ARG1 p))",
      "(s / set-08\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Carr\")))",
      "(s / set-08\n   :ARG2 (b / break-02\n            :ARG0 (p / person :name (n / name :op1 \"Carr\"))))",
      "(s / set-08\n   :ARG2 (b / break-02\n            :ARG1 (r / record\n                     :time (p2 / previous))))"
    ],
    "smus": [
      "Kevin Carr's journey set off from Dartmoor in 2013.",
      "Kevin Carr set off on a journey from Haytor in July.",
      "Kevin Carr set off on an epic journey from Haytor.",
      "Set off from Haytor.",
      "Haytor, Dartmoor",
      "Carr was less than 24 hours away.",
      "less than hours away.",
      "Away from completing Carr's trip.",
      "ran around the world.",
      "ran unsupported for Mr Carr.",
      "Mr Carr ran.",
      "Mr Carr ran around the world unsupported.",
      "Mr Carr's tent was taken.",
      "Australian",
      "Carr is set to break.",
      "Break previous record by hours."
    ]
  },
  {
    "instance_id": "realsumm-66",
    "summary": "<t> David Axelrod masterminded two Obama presidential election victories . </t> <t> Axelrod was hired by Labour leader Ed Miliband amid great fanfare last year . </t> <t> Revealed at a book launch that Axelrod is not resident for tax purposes in UK . </t> <t> Labour confirms Labour pays Mr Axelrod in dollars through consultancy firm . </t>",
    "summary_trees": [
      "# ::snt  David Axelrod masterminded two Obama presidential election victories . \n(m / mastermind-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"David\"\n                  :op2 \"Axelrod\"))\n      :ARG1 (w / win-01\n            :quant 2\n            :ARG1 (e / elect-01\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Obama\"))\n                  :ARG2 (p3 / president))))",
      "# ::snt  Axelrod was hired by Labour leader Ed Miliband amid great fanfare last year . \n(h / hire-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Ed\"\n                  :op2 \"Miliband\")\n            :ARG0-of (l / lead-02\n                  :ARG1 (p2 / political-party\n                        :name (n2 / name\n                              :op1 \"Labour\"))))\n      :ARG1 (p3 / person\n            :name (n3 / name\n                  :op1 \"Axelrod\"))\n      :time (y / year\n            :mod (l2 / last))\n      :manner (f / fanfare\n            :mod (g / great)))",
      "# ::snt  Revealed at a book launch that Axelrod is not resident for tax purposes in UK . \n(r / reveal-01\n      :ARG1 (r2 / reside-01\n            :polarity -\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Axelrod\"))\n            :ARG1 (c / country\n                  :name (n2 / name\n                        :op1 \"UK\"))\n            :purpose (t / tax-01))\n      :location (l / launch-01\n            :ARG1 (b / book)))",
      "# ::snt  Labour confirms Labour pays Mr Axelrod in dollars through consultancy firm . \n(c / confirm-01\n      :ARG0 (p / political-party\n            :name (n / name\n                  :op1 \"Labour\"))\n      :ARG1 (p2 / pay-01\n            :ARG0 p\n            :ARG2 (p3 / person\n                  :name (n2 / name\n                        :op1 \"Mr\"\n                        :op2 \"Axelrod\"))\n            :manner (d / dollar)\n            :instrument (f / firm\n                  :ARG0-of (c2 / consult-01))))"
    ],
    "tree": [
      "(m / mastermind-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"David\"\n                     :op2 \"Axelrod\")))",
      "(m / mastermind-01\n   :ARG1 (w / win-01\n            :quant 2))",
      "(m / mastermind-01\n   :ARG1 (w / win-01\n            :ARG1 (e / elect-01\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Obama\")))))",
      "(m / mastermind-01\n   :ARG1 (w / win-01\n            :ARG1 (e / elect-01\n                     :ARG2 (p3 / president))))",
      "(m / mastermind-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"David\"\n                     :op2 \"Axelrod\"))\n   :ARG1 (w / win-01\n            :quant 2))",
      "(h / hire-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ed\"\n                     :op2 \"Miliband\")))",
      "(h / hire-01\n   :ARG0 (p / person\n            :ARG0 (l / lead-02\n                     :ARG1 (p2 / political-party\n                               :name (n2 / name\n                                         :op1 \"Labour\")))))",
      "(h / hire-01\n   :ARG1 (p3 / person\n             :name (n3 / name\n                       :op1 \"Axelrod\")))",
      "(h / hire-01\n   :time (y / year\n            :mod (l2 / last)))",
      "(h / hire-01\n   :manner (f / fanfare\n              :mod (g / great)))",
      "(r / reveal-01\n   :ARG1 (r2 / reside-01\n             :polarity -))",
      "(r / reveal-01\n   :ARG1 (r2 / reside-01\n             :ARG1 (c / country\n                      :name (n2 / name\n                                :op1 \"UK\"))))",
      "(c / confirm-01\n   :ARG0 (p / political-party\n            :name (n / name\n                     :op1 \"Labour\")))",
      "(c / confirm-01\n   :ARG1 (p2 / pay-01\n             :ARG0 (p / political-party :name (n / name :op1 \"Labour\"))))",
      "(c / confirm-01\n   :ARG1 (p2 / pay-01\n             :ARG2 (p3 / person\n                       :name (n2 / name\n                                 :op1 \"Mr\"\n                                 :op2 \"Axelrod\"))))",
      "(c / confirm-01\n   :ARG1 (p2 / pay-01\n             :manner (d / dollar)))",
      "(c / confirm-01\n   :ARG1 (p2 / pay-01\n             :instrument (f / firm\n                            :ARG0 (c2 / consult-01))))"
    ],
    "smus": [
      "The presidential election is a victory.",
      "David Axelrod masterminded the victory in the Obama election.",
      "David Axelrod masterminded the two victories.",
      "David Axelrod",
      "Obama's election",
      "Last year, the Labour leader hired Axelrod with great fanfare.",
      "Ed Miliband hired Axelrod last year with great fanfare.",
      "Labour leader hired last year.",
      "Axelrod was hired.",
      "Labour leader",
      "It was revealed that the residence was not residing.",
      "Axelrod's residence was revealed at the book's launch.",
      "Labour confirms.",
      "Labour confirms dollars payments.",
      "The consulting firm pays.",
      "confirms payments are made in dollars.",
      "Mr Axelrod pays."
    ]
  },
  {
    "instance_id": "realsumm-67",
    "summary": "<t> HBO is the US network behind Game of Thrones and the Sopranos . </t> <t> Service is available on Apple TV and iOS exclusively for three months . </t> <t> Apple has also cut the price of Apple TV system from $ 99 ( \u00a3 65 ) to $ 69 . </t>",
    "summary_trees": [
      "# ::snt  HBO is the US network behind Game of Thrones and the Sopranos . \n(n / network\n      :domain (b / broadcast-program\n            :name (n2 / name\n                  :op1 \"HBO\"))\n      :mod (c / country\n            :name (n3 / name\n                  :op1 \"US\"))\n      :location (b2 / behind\n            :op1 (a / and\n                  :op1 (b3 / broadcast-program\n                        :name (n4 / name\n                              :op1 \"Game\"\n                              :op2 \"of\"\n                              :op3 \"Thrones\"))\n                  :op2 (b4 / broadcast-program\n                        :name (n5 / name\n                              :op1 \"The\"\n                              :op2 \"Sapranos\")))))",
      "# ::snt  Service is available on Apple TV and iOS exclusively for three months . \n(a / available-02\n      :ARG2 (s / service)\n      :location (a2 / and\n            :op1 (p / product\n                  :name (n / name\n                        :op1 \"Apple\"\n                        :op2 \"TV\"))\n            :op2 (p2 / product\n                  :name (n2 / name\n                        :op1 \"iOS\")))\n      :duration (t / temporal-quantity\n            :quant 3\n            :unit (m / month)\n            :ARG0-of (e / exclusive-02)))",
      "# ::snt  Apple has also cut the price of Apple TV system from $ 99 ( \u00a3 65 ) to $ 69 . \n(c / cut-02\n      :ARG0 (c2 / company\n            :name (n / name\n                  :op1 \"Apple\"))\n      :ARG1 (p / price-01\n            :ARG1 (s / system\n                  :mod (p2 / product\n                        :name (n2 / name\n                              :op1 \"Apple\"\n                              :op2 \"TV\"))))\n      :ARG3 (m / monetary-quantity\n            :quant 99\n            :unit (d / dollar))\n      :ARG4 (m2 / monetary-quantity\n            :quant 69\n            :unit (d2 / dollar))\n      :mod (a / also))"
    ],
    "tree": [
      "(n / network\n   :domain (b / broadcast-program\n              :name (n2 / name\n                        :op1 \"HBO\")))",
      "(n / network\n   :mod (c / country\n           :name (n3 / name\n                     :op1 \"US\")))",
      "(n / network\n   :location (b2 / behind\n                 :op1 (b3 / broadcast-program\n                          :name (n4 / name\n                                    :op1 \"Game\"\n                                    :op2 \"of\"\n                                    :op3 \"Thrones\"))))",
      "(n / network\n   :location (b2 / behind\n                 :op1 (b4 / broadcast-program\n                          :name (n5 / name\n                                    :op1 \"The\"\n                                    :op2 \"Sapranos\"))))",
      "(n / network\n   :domain (b / broadcast-program\n              :name (n2 / name\n                        :op1 \"HBO\"))\n   :mod (c / country\n           :name (n3 / name\n                     :op1 \"US\")))",
      "(a / available-02\n   :location (p / product\n                :name (n / name\n                         :op1 \"Apple\"\n                         :op2 \"TV\")))",
      "(a / available-02\n   :location (p2 / product\n                 :name (n2 / name\n                           :op1 \"iOS\")))",
      "(a / available-02\n   :duration (t / temporal-quantity\n                :quant 3))",
      "(a / available-02\n   :duration (t / temporal-quantity\n                :unit (m / month)))",
      "(a / available-02\n   :duration (t / temporal-quantity\n                :ARG0 (e / exclusive-02)))",
      "(c / cut-02\n   :ARG0 (c2 / company\n             :name (n / name\n                      :op1 \"Apple\")))",
      "(c / cut-02\n   :ARG1 (p / price-01\n            :ARG1 (s / system\n                     :mod (p2 / product\n                              :name (n2 / name\n                                        :op1 \"Apple\"\n                                        :op2 \"TV\")))))",
      "(c / cut-02\n   :ARG3 (m / monetary-quantity\n            :quant 99))",
      "(c / cut-02\n   :ARG3 (m / monetary-quantity\n            :unit (d / dollar)))",
      "(c / cut-02\n   :ARG4 (m2 / monetary-quantity\n             :quant 69))"
    ],
    "smus": [
      "HBO is the US network behind the Game of Thrones.",
      "US",
      "HBO is a US network.",
      "behind The Sapranos.",
      "The Game of Thrones.",
      "And Apple TV.",
      "Service is available on Apple TV for months.",
      "Service is exclusively available on iOS.",
      "Available for months.",
      "and iOS.",
      "Apple has cut 99.",
      "The price of the Apple TV system was cut from 99 to $.",
      "Cuts to dollars.",
      "Apple TV",
      "Apple has cut the price of the Apple TV system to 69 dollars."
    ]
  },
  {
    "instance_id": "realsumm-68",
    "summary": "<t> Huma Abedin came under fire for not tipping at Chipotle in Iowa . </t> <t> Abedin is Hillary Clinton 's most trusted aide for the 2016 campaign . </t> <t> On Saturday , aide and husband Anthony Weiner went for Mexican lunch . </t> <t> It is one of aide and Weiner final weekends before the campaign gets into swing . </t>",
    "summary_trees": [
      "# ::snt  Huma Abedin came under fire for not tipping at Chipotle in Iowa . \n(f / fire-02\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Huma\"\n                  :op2 \"Abedin\"))\n      :ARG2 (t / tip-02\n            :polarity -\n            :ARG0 p\n            :location (c / company\n                  :name (n2 / name\n                        :op1 \"Chipotle\")\n                  :location (s / state\n                        :name (n3 / name\n                              :op1 \"Iowa\")))))",
      "# ::snt  Abedin is Hillary Clinton 's most trusted aide for the 2016 campaign . \n(h / have-degree-91\n      :ARG1 (a / aide\n            :poss (p / person\n                  :name (n / name\n                        :op1 \"Hillary\"\n                        :op2 \"Clinton\"))\n            :domain (p2 / person\n                  :name (n2 / name\n                        :op1 \"Abedin\")))\n      :ARG2 (t / trust-01\n            :ARG0 p\n            :ARG1 a)\n      :ARG3 (m / most)\n      :ARG5 (c / campaign-01\n            :time (d / date-entity\n                  :year 2016)))",
      "# ::snt  On Saturday , aide and husband Anthony Weiner went for Mexican lunch . \n(g / go-02\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Anthony\"\n                        :op2 \"Weiner\")\n                  :ARG0-of (h / have-org-role-91\n                        :ARG2 (a2 / aide)))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Anthony\"\n                        :op2 \"Weiner\")\n                  :ARG0-of (h2 / have-rel-role-91\n                        :ARG2 (h3 / husband))))\n      :ARG4 (l / lunch\n            :mod (c / country\n                  :name (n3 / name\n                        :op1 \"Mexico\")))\n      :time (d / date-entity\n            :weekday (s / saturday)))",
      "# ::snt  It is one of aide and Weiner final weekends before the campaign gets into swing . \n(w / weekend\n      :ARG1-of (ii / include-91\n            :ARG2 (w2 / weekend\n                  :mod (f / final)\n                  :time (b / before\n                        :op1 (s / swing-06\n                              :ARG1 (c / campaign-01)))\n                  :poss (a / and\n                        :op1 (p / person\n                              :ARG0-of (a2 / aid-01))\n                        :op2 (p2 / person\n                              :name (n / name\n                                    :op1 \"Weiner\")))))\n      :domain (ii2 / it))"
    ],
    "tree": [
      "(f / fire-02\n   :ARG2 (t / tip-02\n            :location (c / company\n                         :name (n2 / name\n                                   :op1 \"Chipotle\"))))",
      "(f / fire-02\n   :ARG2 (t / tip-02\n            :location (c / company\n                         :location (s / state\n                                      :name (n3 / name\n                                                :op1 \"Iowa\")))))",
      "(h / have-degree-91\n   :ARG1 (a / aide\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Hillary\"\n                              :op2 \"Clinton\"))))",
      "(h / have-degree-91\n   :ARG1 (a / aide\n            :domain (p2 / person\n                        :name (n2 / name\n                                  :op1 \"Abedin\"))))",
      "(h / have-degree-91\n   :ARG2 (t / trust-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Hillary\"\n                              :op2 \"Clinton\"))))",
      "(h / have-degree-91\n   :ARG2 (t / trust-01\n            :ARG1 (a / aide)))",
      "(h / have-degree-91\n   :ARG5 (c / campaign-01\n            :time (d / date-entity\n                     :year 2016)))",
      "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Anthony\"\n                     :op2 \"Weiner\")))",
      "(g / go-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Anthony\"\n                       :op2 \"Weiner\")))",
      "(g / go-02\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (a2 / aide))))",
      "(g / go-02\n   :ARG0 (p2 / person\n             :ARG0 (h2 / have-rel-role-91\n                       :ARG2 (h3 / husband))))",
      "(g / go-02\n   :ARG4 (l / lunch\n            :mod (c / country\n                    :name (n3 / name\n                              :op1 \"Mexico\"))))",
      "(w / weekend\n   :ARG1 (ii / include-91\n             :ARG2 (w2 / weekend\n                       :mod (f / final))))",
      "(w / weekend\n   :ARG1 (ii / include-91\n             :ARG2 (w2 / weekend\n                       :time (b / before\n                                :op1 (s / swing-06\n                                        :ARG1 (c / campaign-01))))))",
      "(w / weekend\n   :ARG1 (ii / include-91\n             :ARG2 (w2 / weekend\n                       :poss (p / person\n                                :ARG0 (a2 / aid-01)))))",
      "(w / weekend\n   :ARG1 (ii / include-91\n             :ARG2 (w2 / weekend\n                       :poss (p2 / person\n                                 :name (n / name\n                                          :op1 \"Weiner\")))))",
      "(w / weekend\n   :ARG1 (ii / include-91\n             :ARG2 (w2 / weekend\n                       :mod (f / final)))\n   :domain (ii2 / it))"
    ],
    "smus": [
      "Fired not tipped.",
      "Huma Abedin",
      "Hillary Clinton's aide was the most trusted.",
      "Abedin is the most trusted aide.",
      "Hillary Clinton's aide was the most trusted in the 2016 campaign.",
      "The campaign is in 2016.",
      "Hillary Clinton's aide",
      "Anthony Weiner went.",
      "The husband went Saturday.",
      "Anthony Weiner went to a Mexican lunch Saturday.",
      "Anthony Weiner",
      "and husband.",
      "One of the aid workers' weekends",
      "Weekends before the campaign swings.",
      "Weiner's weekends",
      "and Weiner.",
      "It was one of the final weekends."
    ]
  },
  {
    "instance_id": "realsumm-69",
    "summary": "<t> Gary fell from 147th most popular British name in 1996 to 1,001st in 2013 . </t> <t> Reached height of height popularity in 1964 , when height was ranked 16th . </t> <t> Meanwhile , names including Dexter and Jenson are now in the top 100 . </t>",
    "summary_trees": [
      "# ::snt  Gary fell from 147th most popular British name in 1996 to 1,001st in 2013 . \n(f / fall-01\n      :ARG1 (n / name\n            :name (n2 / name\n                  :op1 \"Gary\"))\n      :ARG3 (r / rank-01\n            :ARG2 147\n            :ARG1 n\n            :ARG1-of (h / have-degree-91\n                  :ARG2 (p / popular-02\n                        :ARG1 n)\n                  :ARG3 (m / most)\n                  :ARG5 (n3 / name\n                        :mod (c / country\n                              :name (n4 / name\n                                    :op1 \"Britain\"))))\n            :time (d / date-entity\n                  :year 1996))\n      :ARG4 (r2 / rank-01\n            :ARG2 1091\n            :ARG1 n\n            :time (d2 / date-entity\n                  :year 2013)))",
      "# ::snt  Reached height of height popularity in 1964 , when height was ranked 16th . \n(r / reach-01\n      :ARG1 (h / high-02\n            :ARG1 (p / popularity)\n            :mod-of p)\n      :time (d / date-entity\n            :year 1964\n            :time-of (r2 / rank-01\n                  :ARG1 h\n                  :ARG2 16)))",
      "# ::snt  Meanwhile , names including Dexter and Jenson are now in the top 100 . \n(b / be-located-at-91\n      :ARG1 (n / name\n            :ARG2-of (ii / include-01\n                  :ARG1 (a / and\n                        :op1 (p / person\n                              :name (n2 / name\n                                    :op1 \"Dexter\"))\n                        :op2 (p2 / person\n                              :name (n3 / name\n                                    :op1 \"Jenson\")))))\n      :ARG2 (t / top\n            :ord (o / ordinal-entity\n                  :value 100))\n      :time (n4 / now)\n      :time (m / meanwhile))"
    ],
    "tree": [
      "(f / fall-01\n   :ARG3 (r / rank-01\n            :ARG1 (h / have-degree-91\n                     :ARG2 (p / popular-02\n                              :ARG1 (n / name :name (n2 / name :op1 \"Gary\"))))))",
      "(r / reach-01\n   :ARG1 (h / high-02\n            :ARG1 (p / popularity\n                     :mod h)))",
      "(r / reach-01\n   :time (d / date-entity\n            :year 1964))",
      "(r / reach-01\n   :time (d / date-entity\n            :time (r2 / rank-01\n                      :ARG1 (h / high-02))))",
      "(r / reach-01\n   :time (d / date-entity\n            :time (r2 / rank-01\n                      :ARG2 16)))",
      "(r / reach-01\n   :ARG1 (h / high-02\n            :ARG1 (p / popularity\n                     :mod h))\n   :time (d / date-entity\n            :year 1964))",
      "(b / be-located-at-91\n   :ARG1 (n / name\n            :ARG2 (ii / include-01\n                      :ARG1 (p / person\n                               :name (n2 / name\n                                         :op1 \"Dexter\")))))",
      "(b / be-located-at-91\n   :ARG1 (n / name\n            :ARG2 (ii / include-01\n                      :ARG1 (p2 / person\n                                :name (n3 / name\n                                          :op1 \"Jenson\")))))",
      "(b / be-located-at-91\n   :ARG1 (n / name\n            :ARG2 (ii / include-01\n                      :ARG1 (p2 / person\n                                :name (n3 / name\n                                          :op1 \"Jenson\"))))\n   :ARG2 (t / top\n            :ord (o / ordinal-entity\n                    :value 100)))"
    ],
    "smus": [
      "British name",
      "Reached in 1964.",
      "At the time of its ranking, its popularity reached a high.",
      "16th rank",
      "Reached high popularity.",
      "Reached when high-ranking.",
      "Top 100",
      "Now there are names including Jenson.",
      "In the names including Dexter."
    ]
  },
  {
    "instance_id": "realsumm-70",
    "summary": "<t> Leanne Mitchell has been dropped by Mitchell label and sings at a holiday camp . </t> <t> Andrea Begley and Jermain Jackman are yet to become household names . </t> <t> Will 2015 winner Stevie become a chart success or another Voice flop ? </t> <t> . </t>",
    "summary_trees": [
      "# ::snt  Leanne Mitchell has been dropped by Mitchell label and sings at a holiday camp . \n(a / and\n      :op1 (d / drop-05\n            :ARG0 (l / label\n                  :mod (p / person\n                        :name (n / name\n                              :op1 \"Mitchell\")))\n            :ARG1 p)\n      :op2 (s / sing-01\n            :ARG0 p\n            :location (c / camp\n                  :mod (h / holiday))))",
      "# ::snt  Andrea Begley and Jermain Jackman are yet to become household names . \n(h / have-11\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Andrea\"\n                        :op2 \"Begley\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Jermain\"\n                        :op2 \"Jackman\")))\n      :ARG1 (y / yet)\n      :ARG2 (b / become-01\n            :ARG1 a\n            :ARG2 (n3 / name\n                  :mod (h2 / household))))",
      "# ::snt  Will 2015 winner Stevie become a chart success or another Voice flop ? \n(b / become-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Stevie\")\n            :ARG0-of (w / win-01\n                  :time (d / date-entity\n                        :year 2015)))\n      :ARG2 (a / amr-choice\n            :op1 (s / succeed-01\n                  :ARG0 p\n                  :ARG1 (c / chart-01))\n            :op2 (f / flop-01\n                  :ARG1 p\n                  :mod (v / voice-01)\n                  :mod (a2 / another))))",
      "# ::snt  . \n(a / amr-empty)"
    ],
    "tree": [
      "(a / and\n   :op1 (d / drop-05\n           :ARG1 (p / person\n                    :name (n / name\n                             :op1 \"Mitchell\"))))",
      "(a / and\n   :op2 (s / sing-01\n           :ARG0 (p / person\n                    :name (n / name\n                             :op1 \"Mitchell\"))))",
      "(a / and\n   :op2 (s / sing-01\n           :location (c / camp\n                        :mod (h / holiday))))",
      "(a / and\n   :op1 (d / drop-05\n           :ARG0 (l / label\n                    :mod (p / person\n                            :name (n / name\n                                     :op1 \"Mitchell\"))))\n   :op2 (s / sing-01\n           :ARG0 p))",
      "(h / have-11\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Jermain\"\n                       :op2 \"Jackman\")))",
      "(b / become-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Stevie\")))",
      "(b / become-01\n   :ARG1 (p / person\n            :ARG0 (w / win-01\n                     :time (d / date-entity\n                              :year 2015))))",
      "(b / become-01\n   :ARG2 (a / amr-choice\n            :op1 (s / succeed-01\n                    :ARG0 (p / person :name (n / name :op1 \"Stevie\"))))))",
      "(b / become-01\n   :ARG2 (a / amr-choice\n            :op2 (f / flop-01\n                    :ARG1 (p / person :name (n / name :op1 \"Stevie\"))))))"
    ],
    "smus": [
      "Mitchell dropped and sings at a holiday camp.",
      "And the Mitchell label has dropped.",
      "The Mitchell label.",
      "And Mitchell sings.",
      "Andrea Begley",
      "Steve became a flop or not?",
      "The winner of 2015 became a success or failure?",
      "Chart Success or Voice Flop?",
      "The winner in 2015"
    ]
  },
  {
    "instance_id": "realsumm-71",
    "summary": "<t> Romanian - born Alexandra Harra , 28 , has become an Instagram star . </t> <t> Model , who 's posed for Playboy , posts selfies with inspirational messages . </t> <t> After dyeing locks black , being hailed as a rival to Kim Kardashian . </t>",
    "summary_trees": [
      "# ::snt  Romanian - born Alexandra Harra , 28 , has become an Instagram star . \n(b / become-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Alexandra\"\n                  :op2 \"Harra\")\n            :ARG1-of (b2 / bear-02\n                  :location (c / country\n                        :name (n2 / name\n                              :op1 \"Romania\")))\n            :age (t / temporal-quantity\n                  :quant 28\n                  :unit (y / year)))\n      :ARG2 (s / star\n            :mod (p2 / publication\n                  :name (n3 / name\n                        :op1 \"Instagram\"))))",
      "# ::snt  Model , who 's posed for Playboy , posts selfies with inspirational messages . \n(p / post-01\n      :ARG0 (m / model\n            :ARG0-of (p2 / pose-01\n                  :ARG2 (m2 / magazine\n                        :name (n / name\n                              :op1 \"Playboy\"))))\n      :ARG1 (s / selfie\n            :accompanier (m3 / message-01\n                  :ARG0-of (ii / inspire-01))))",
      "# ::snt  After dyeing locks black , being hailed as a rival to Kim Kardashian . \n(h / hail-02\n      :ARG1 (r / rival-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Kim\"\n                        :op2 \"Kardinez\")))\n      :time (a / after\n            :op1 (d / dye-01\n                  :ARG1 (l / lock)\n                  :ARG2 (b / black-04\n                        :ARG1 l))))"
    ],
    "tree": [
      "(b / become-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Alexandra\"\n                     :op2 \"Harra\")))",
      "(b / become-01\n   :ARG1 (p / person\n            :ARG1 (b2 / bear-02\n                      :location (c / country\n                                   :name (n2 / name\n                                             :op1 \"Romania\")))))",
      "(b / become-01\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :quant 28)))",
      "(b / become-01\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :unit (y / year))))",
      "(b / become-01\n   :ARG2 (s / star\n            :mod (p2 / publication\n                     :name (n3 / name\n                               :op1 \"Instagram\"))))",
      "(p / post-01\n   :ARG0 (m / model\n            :ARG0 (p2 / pose-01\n                      :ARG2 (m2 / magazine\n                                :name (n / name\n                                         :op1 \"Playboy\")))))",
      "(p / post-01\n   :ARG1 (s / selfie\n            :accompanier (m3 / message-01\n                             :ARG0 (ii / inspire-01))))",
      "(p / post-01\n   :ARG0 (m / model\n            :ARG0 (p2 / pose-01\n                      :ARG2 (m2 / magazine\n                                :name (n / name\n                                         :op1 \"Playboy\"))))\n   :ARG1 (s / selfie\n            :accompanier (m3 / message-01\n                             :ARG0 (ii / inspire-01))))",
      "(m / model\n   :ARG0 (p2 / pose-01\n             :ARG2 (m2 / magazine\n                       :name (n / name\n                                :op1 \"Playboy\"))))",
      "(p2 / pose-01\n    :ARG2 (m2 / magazine\n              :name (n / name\n                       :op1 \"Playboy\")))",
      "(h / hail-02\n   :time (a / after\n            :op1 (d / dye-01\n                    :ARG1 (l / lock))))",
      "(h / hail-02\n   :time (a / after\n            :op1 (d / dye-01\n                    :ARG2 (b / black-04\n                             :ARG1 (l / lock)))))",
      "(h / hail-02\n   :ARG1 (r / rival-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Kim\"\n                              :op2 \"Kardinez\")))\n   :time (a / after\n            :op1 (d / dye-01\n                    :ARG1 (l / lock))))",
      "(h / hail-02\n   :ARG1 (r / rival-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Kim\"\n                              :op2 \"Kardinez\")))\n   :time (a / after\n            :op1 (d / dye-01\n                    :ARG2 (b / black-04\n                             :ARG1 (l / lock)))))"
    ],
    "smus": [
      "Romanian born has become an Instagram star.",
      "Alexandra Harra is a Romanian born woman.",
      "Instagram star",
      "Romanian born",
      "Alexandra Harra",
      "Posts selfies with inspiring messages",
      "Model posed for Playboy",
      "Playboy.",
      "Model posed for Playboy posts selfies with inspirational messages",
      "Posing for Playboy.",
      "Hail a day after locks are dyed black.",
      "The locks were dyed black.",
      "Kim Kardinez's rivalry was hailed after the locks were dyed.",
      "After the locks are dyed."
    ]
  },
  {
    "instance_id": "realsumm-72",
    "summary": "<t> Nadir Ciftci celebrated by blowing a kiss at rival goalkeeper Scott Bain . </t> <t> However , Ciftci was left blushing as rivals earned impressive victory . </t> <t> Win gave hosts Dundee rivals first derby win in more than a decade . </t> <t> Goals from Greg Stewart , Jake McPake and Paul Heffernen secured win . </t>",
    "summary_trees": [
      "# ::snt  Nadir Ciftci celebrated by blowing a kiss at rival goalkeeper Scott Bain . \n(c / celebrate-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Nadir\"\n                  :op2 \"Ciftci\"))\n      :manner (b / blow-01\n            :ARG0 p\n            :ARG1 (k / kiss-01\n                  :ARG0 p\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Scott\"\n                              :op2 \"Bain\")\n                        :ARG0-of (g / goalkeeper-01)\n                        :ARG0-of (r / rival-01\n                              :ARG1 p)))))",
      "# ::snt  However , Ciftci was left blushing as rivals earned impressive victory . \n(c / contrast-01\n      :ARG2 (l / leave-13\n            :ARG0 (e / earn-01\n                  :ARG0 (r / rival)\n                  :ARG1 (w / win-01\n                        :ARG0 r\n                        :ARG0-of (ii / impress-01)))\n            :ARG1 (b / blush-01\n                  :ARG1 (p / person\n                        :name (n / name\n                              :op1 \"Ciftci\")))))",
      "# ::snt  Win gave hosts Dundee rivals first derby win in more than a decade . \n(g / give-01\n      :ARG0 (w / win-01)\n      :ARG1 (w2 / win-01\n            :ARG0 (t / team\n                  :ARG0-of (h / host-01))\n            :mod (d / derby)\n            :ord (o / ordinal-entity\n                  :value 1\n                  :range (m / more-than\n                        :op1 (t2 / temporal-quantity\n                              :quant 1\n                              :unit (d2 / decade)))))\n      :ARG2 (t3 / team\n            :name (n / name\n                  :op1 \"Dundee\")\n            :ARG0-of (r / rival-01\n                  :ARG1 t)))",
      "# ::snt  Goals from Greg Stewart , Jake McPake and Paul Heffernen secured win . \n(s / secure-02\n      :ARG0 (g / goal\n            :source (a / and\n                  :op1 (p / person\n                        :name (n / name\n                              :op1 \"Greg\"\n                              :op2 \"Stewart\"))\n                  :op2 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Jake\"\n                              :op2 \"McPake\"))\n                  :op3 (p3 / person\n                        :name (n3 / name\n                              :op1 \"Paul\"\n                              :op2 \"Heffernen\"))))\n      :ARG1 (w / win-01))"
    ],
    "tree": [
      "(c / celebrate-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nadir\"\n                     :op2 \"Ciftci\")))",
      "(c / celebrate-01\n   :manner (b / blow-01\n              :ARG0 (p / person :name (n / name :op1 \"Nadir\" :op2 \"Ciftci\"))\n              :ARG1 (k / kiss-01)))",
      "(c / celebrate-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nadir\"\n                     :op2 \"Ciftci\"))\n   :manner (b / blow-01\n              :ARG0 p\n              :ARG1 (k / kiss-01)))",
      "(p / person\n   :name (n / name\n            :op1 \"Nadir\"\n            :op2 \"Ciftci\"))",
      "(b / blow-01\n   :ARG1 (k / kiss-01\n            :ARG0 (p / person :name (n / name :op1 \"Nadir\" :op2 \"Ciftci\"))))",
      "(c / contrast-01\n   :ARG2 (l / leave-13\n            :ARG0 (e / earn-01\n                     :ARG0 (r / rival))))",
      "(c / contrast-01\n   :ARG2 (l / leave-13\n            :ARG1 (b / blush-01\n                     :ARG1 (p / person\n                              :name (n / name\n                                       :op1 \"Ciftci\")))))",
      "(c / contrast-01\n   :ARG2 (l / leave-13\n            :ARG0 (e / earn-01\n                     :ARG1 (w / win-01\n                              :ARG0 (r / rival)))))",
      "(l / leave-13\n   :ARG0 (e / earn-01\n            :ARG0 (r / rival)))",
      "(g / give-01\n   :ARG1 (w2 / win-01\n             :mod (d / derby)))",
      "(g / give-01\n   :ARG1 (w2 / win-01\n             :ord (o / ordinal-entity\n                     :value 1)))",
      "(g / give-01\n   :ARG1 (w2 / win-01\n             :ord (o / ordinal-entity\n                     :range (m / more-than\n                               :op1 (t2 / temporal-quantity\n                                        :unit (d2 / decade))))))",
      "(s / secure-02\n   :ARG0 (g / goal\n            :source (p / person\n                       :name (n / name\n                                :op1 \"Greg\"\n                                :op2 \"Stewart\"))))",
      "(s / secure-02\n   :ARG0 (g / goal\n            :source (p2 / person\n                        :name (n2 / name\n                                  :op1 \"Jake\"\n                                  :op2 \"McPake\"))))",
      "(s / secure-02\n   :ARG0 (g / goal\n            :source (p3 / person\n                        :name (n3 / name\n                                  :op1 \"Paul\"\n                                  :op2 \"Heffernen\"))))",
      "(s / secure-02\n   :ARG0 (g / goal\n            :source (p / person\n                       :name (n / name\n                                :op1 \"Greg\"\n                                :op2 \"Stewart\")))\n   :ARG1 (w / win-01))",
      "(s / secure-02\n   :ARG0 (g / goal\n            :source (p2 / person\n                        :name (n2 / name\n                                  :op1 \"Jake\"\n                                  :op2 \"McPake\")))\n   :ARG1 (w / win-01))"
    ],
    "smus": [
      "A kiss was blowing between rival Nadir Cifitci and the two.",
      "Scott Bain",
      "Nadir ciftci was celebrated by blowing a kiss.",
      "The goalkeeper got a kiss.",
      "Nadir Ciftci",
      "left blushing to Ciftci.",
      "Left with an impressive win earned.",
      "The fact that rivals earned a victory left Ciftci blushing.",
      "The rivals earned a victory.",
      "The win gave Dundee their first win.",
      "more than one",
      "The win gave the derby victory.",
      "Greg Stewart's goals are secure.",
      "Greg Stewart and Paul Heffernen.",
      "Greg Stewart's goals secured the victory.",
      "Jake McPake",
      "Goals from Paul Heffernen:"
    ]
  },
  {
    "instance_id": "realsumm-73",
    "summary": "<t> Mercedes - Benz Fashion Week Australia 2015 came to a close on Thursday night in Sydney . </t> <t> Stand - out shows included Maticevski , Romance Was Born , Tome , Steven Khalil and Johanna Johnson . </t> <t> Sheer and metallic fabrics and slouchy and voluminous silhouettes were recurring trends . </t>",
    "summary_trees": [
      "# ::snt  Mercedes - Benz Fashion Week Australia 2015 came to a close on Thursday night in Sydney . \n(c / close-01\n      :ARG1 (e / event\n            :name (n / name\n                  :op1 \"Mercedes-Benz\"\n                  :op2 \"Fashion\"\n                  :op3 \"Week\"\n                  :op4 \"Australia\")\n            :time (d / date-entity\n                  :year 2015\n                  :weekday (t / thursday)\n                  :dayperiod (n2 / night))\n            :location (c2 / city\n                  :name (n3 / name\n                        :op1 \"Sydney\"))))",
      "# ::snt  Stand - out shows included Maticevski , Romance Was Born , Tome , Steven Khalil and Johanna Johnson . \n(ii / include-91\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Maticevski\"))\n            :op2 (w / work-of-art\n                  :name (n2 / name\n                        :op1 \"Romance\"\n                        :op2 \"Was\"\n                        :op3 \"Born\"))\n            :op3 (p2 / person\n                  :name (n3 / name\n                        :op1 \"Tome\"))\n            :op4 (p3 / person\n                  :name (n4 / name\n                        :op1 \"Steven\"\n                        :op2 \"Khalil\"))\n            :op5 (p4 / person\n                  :name (n5 / name\n                        :op1 \"Johanna\"\n                        :op2 \"Johnson\")))\n      :ARG2 (s / show-04\n            :ARG1-of (s2 / stand-out-06)))",
      "# ::snt  Sheer and metallic fabrics and slouchy and voluminous silhouettes were recurring trends . \n(t / trend\n      :ARG1-of (r / repeat-01)\n      :domain (a / and\n            :op1 (f / fabric\n                  :mod (s / sheer)\n                  :mod (m / metallic))\n            :op2 (s2 / silhouette\n                  :mod (s3 / slouchy)\n                  :mod (v / voluminous))))"
    ],
    "tree": [
      "(c / close-01\n   :ARG1 (e / event\n            :name (n / name\n                     :op1 \"Mercedes-Benz\"\n                     :op2 \"Fashion\"\n                     :op3 \"Week\"\n                     :op4 \"Australia\")))",
      "(c / close-01\n   :ARG1 (e / event\n            :time (d / date-entity\n                     :year 2015)))",
      "(c / close-01\n   :ARG1 (e / event\n            :location (c2 / city\n                          :name (n3 / name\n                                    :op1 \"Sydney\"))))",
      "(c / close-01\n   :ARG1 (e / event\n            :time (d / date-entity\n                     :weekday (t / thursday))))",
      "(c / close-01\n   :ARG1 (e / event\n            :time (d / date-entity\n                     :dayperiod (n2 / night))))",
      "(ii / include-91\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Maticevski\")))",
      "(ii / include-91\n    :ARG1 (w / work-of-art\n             :name (n2 / name\n                       :op1 \"Romance\"\n                       :op2 \"Was\"\n                       :op3 \"Born\")))",
      "(ii / include-91\n    :ARG1 (p2 / person\n              :name (n3 / name\n                        :op1 \"Tome\")))",
      "(ii / include-91\n    :ARG1 (p3 / person\n              :name (n4 / name\n                        :op1 \"Steven\"\n                        :op2 \"Khalil\")))",
      "(ii / include-91\n    :ARG1 (p4 / person\n              :name (n5 / name\n                        :op1 \"Johanna\"\n                        :op2 \"Johnson\")))",
      "(t / trend\n   :domain (f / fabric\n              :mod (s / sheer)))",
      "(t / trend\n   :domain (s2 / silhouette\n               :mod (s3 / slouchy)))",
      "(t / trend\n   :domain (f / fabric\n              :mod (m / metallic)))",
      "(t / trend\n   :domain (s2 / silhouette\n               :mod (v / voluminous)))",
      "(t / trend\n   :ARG1 (r / repeat-01)\n   :domain (f / fabric\n              :mod (s / sheer)))"
    ],
    "smus": [
      "Thursday in Sydney.",
      "Mercedes-Benz Fashion Week Australia Sydney",
      "Sydney",
      "The 2015 event is close.",
      "It's night.",
      "Steven Khalil was one of the stand out shows.",
      "Including Johanna Johnson.",
      "Mariusevski, Romance Was Born, Steven Halil and Johanna Johnson.",
      "and Steven Khalil.",
      "Mickaevski and Johanna Johnson.",
      "metallic fabrics and slouchy silhouettes",
      "sheer fabrics are trends of repetition.",
      "and voluminous silhouettes.",
      "And sheer fabrics.",
      "Louchy silhouettes are trending."
    ]
  },
  {
    "instance_id": "realsumm-74",
    "summary": "<t> Lindsay Sandiford fears Sandiford will be next to face the firing squad . </t> <t> Andrew Chan and Myuran Sukumaran killed after a final KFC bucket meal . </t> <t> The 58-year - old has been on death row in Bali since 2012 . </t> <t> Bali was convicted of attempting to smuggle \u00a3 1.6million of cocaine in 2012 . </t>",
    "summary_trees": [
      "# ::snt  Lindsay Sandiford fears Sandiford will be next to face the firing squad . \n(f / fear-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Lindsay\"\n                  :op2 \"Sandiford\"))\n      :ARG1 (n2 / next\n            :domain p\n            :prep-to (f2 / face-01\n                  :ARG0 p\n                  :ARG1 (s / squad\n                        :ARG0-of (f3 / fire-01)))))",
      "# ::snt  Andrew Chan and Myuran Sukumaran killed after a final KFC bucket meal . \n(k / kill-01\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Andrew\"\n                        :op2 \"Chan\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Myuran\"\n                        :op2 \"Sukumaran\")))\n      :time (a2 / after\n            :op1 (m / meal\n                  :mod (b / bucket)\n                  :mod (c / company\n                        :name (n3 / name\n                              :op1 \"KFC\"))\n                  :mod (f / final))))",
      "# ::snt  The 58-year - old has been on death row in Bali since 2012 . \n(b / be-located-at-91\n      :ARG1 (p / person\n            :age (t / temporal-quantity\n                  :quant 58\n                  :unit (y / year)))\n      :ARG2 (r / row\n            :mod (d / die-01))\n      :location (ii / island\n            :name (n / name\n                  :op1 \"Bali\"))\n      :time (s / since\n            :op1 (d2 / date-entity\n                  :year 2012)))",
      "# ::snt  Bali was convicted of attempting to smuggle \u00a3 1.6million of cocaine in 2012 . \n(c / convict-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Bali\"))\n      :ARG2 (a / attempt-01\n            :ARG0 p\n            :ARG1 (s / smuggle-01\n                  :ARG0 p\n                  :ARG1 (c2 / cocaine\n                        :quant (m / monetary-quantity\n                              :quant 1600000\n                              :unit (p2 / pound))))\n            :time (d / date-entity\n                  :year 2012)))"
    ],
    "tree": [
      "(f / fear-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lindsay\"\n                     :op2 \"Sandiford\")))",
      "(f / fear-01\n   :ARG1 (n2 / next\n             :prep-to (f2 / face-01\n                          :ARG0 (p / person :name (n / name :op1 \"Lindsay\" :op2 \"Sandiford\")))))",
      "(f / fear-01\n   :ARG1 (n2 / next\n             :prep-to (f2 / face-01\n                          :ARG1 (s / squad\n                                   :ARG0 (f3 / fire-01)))))",
      "(f / fear-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lindsay\"\n                     :op2 \"Sandiford\"))\n   :ARG1 (n2 / next\n             :domain p))",
      "(k / kill-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Andrew\"\n                     :op2 \"Chan\")))",
      "(k / kill-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Myuran\"\n                       :op2 \"Sukumaran\")))",
      "(k / kill-01\n   :time (a2 / after\n             :op1 (m / meal\n                     :mod (b / bucket))))",
      "(k / kill-01\n   :time (a2 / after\n             :op1 (m / meal\n                     :mod (c / company\n                             :name (n3 / name\n                                       :op1 \"KFC\")))))",
      "(k / kill-01\n   :time (a2 / after\n             :op1 (m / meal\n                     :mod (f / final))))",
      "(b / be-located-at-91\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :quant 58)))",
      "(b / be-located-at-91\n   :ARG2 (r / row\n            :mod (d / die-01)))",
      "(b / be-located-at-91\n   :time (s / since\n            :op1 (d2 / date-entity\n                     :year 2012)))",
      "(c / convict-01\n   :ARG2 (a / attempt-01\n            :ARG1 (s / smuggle-01\n                     :ARG0 (p / person :name (n / name :op1 \"Bali\")))))",
      "(c / convict-01\n   :ARG2 (a / attempt-01\n            :ARG1 (s / smuggle-01\n                     :ARG1 (c2 / cocaine\n                               :quant (m / monetary-quantity\n                                         :quant 1600000)))))"
    ],
    "smus": [
      "Next to face the firing squad.",
      "Lindsay Sandiford fears.",
      "Lindsay Sandiford fears the next face.",
      "Lindsay Sandiford fears the firing squad will be next.",
      "and Myuran Susumaran.",
      "Andrew Chan killed after a bucket meal.",
      "Myuran Sukumaran killed after a bucket meal.",
      "Andrew Chan",
      "After a bucket meal.",
      "Bali",
      "There has been a death row on Bali since 2012.",
      "Since 2012",
      "Bali was convicted of attempting.",
      "Attempting in 2012."
    ]
  },
  {
    "instance_id": "realsumm-75",
    "summary": "<t> Abby Bishop took in Bishop two - day - old niece Zala in August 2013 . </t> <t> Now Zala is 20 months old and Zala follows Bishop as Zala travels the world playing for professional basketball teams . </t> <t> Bishop said world was a big decision but Zala would n't change anything . </t> <t> Zala will go with Bishop when Zala starts playing in the U.S. WNBA in May. </t>",
    "summary_trees": [
      "# ::snt  Abby Bishop took in Bishop two - day - old niece Zala in August 2013 . \n(t / take-in-06\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Abby\"\n                  :op2 \"Bishop\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Zala\")\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 p\n                  :ARG2 (n3 / niece))\n            :age (t2 / temporal-quantity\n                  :quant 2\n                  :unit (d / day)))\n      :time (d2 / date-entity\n            :month 8\n            :year 2013))",
      "# ::snt  Now Zala is 20 months old and Zala follows Bishop as Zala travels the world playing for professional basketball teams . \n(a / and\n      :op1 (a2 / age-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Zala\"))\n            :ARG2 (t / temporal-quantity\n                  :quant 20\n                  :unit (m / month))\n            :time (n2 / now))\n      :op2 (f / follow-01\n            :ARG1 p\n            :ARG2 (p2 / person\n                  :name (n3 / name\n                        :op1 \"Bishop\"))\n            :time (t2 / travel-01\n                  :ARG0 p\n                  :ARG1 (w / world)\n                  :manner (p3 / play-01\n                        :ARG0 p\n                        :ARG2 (t3 / team\n                              :mod (b / basketball)\n                              :mod (p4 / professional))))))",
      "# ::snt  Bishop said world was a big decision but Zala would n't change anything . \n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Bishop\"))\n      :ARG1 (c / contrast-01\n            :ARG1 (d / decide-01\n                  :ARG3 (w / world)\n                  :mod (b / big))\n            :ARG2 (c2 / change-01\n                  :polarity -\n                  :ARG0 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Zala\"))\n                  :ARG1 (a / anything))))",
      "# ::snt  Zala will go with Bishop when Zala starts playing in the U.S. WNBA in May. \n(g / go-21\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Zala\"))\n      :ARG2 (p2 / person\n            :name (n2 / name\n                  :op1 \"Bishop\"))\n      :time (s / start-01\n            :ARG0 p\n            :ARG1 (p3 / play-01\n                  :ARG0 p\n                  :ARG3 (l / league\n                        :name (n3 / name\n                              :op1 \"WNBA\")\n                        :mod (c / country\n                              :name (n4 / name\n                                    :op1 \"U.S.\"))))\n            :time (d / date-entity\n                  :month 5)))"
    ],
    "tree": [
      "(t / take-in-06\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Abby\"\n                     :op2 \"Bishop\")))",
      "(t / take-in-06\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Zala\")))",
      "(t / take-in-06\n   :ARG1 (p2 / person\n             :age (t2 / temporal-quantity\n                      :quant 2)))",
      "(a / and\n   :op1 (a2 / age-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Zala\"))))",
      "(a / and\n   :op1 (a2 / age-01\n            :ARG2 (t / temporal-quantity\n                     :quant 20)))",
      "(s / say-01\n   :ARG1 (c / contrast-01\n            :ARG1 (d / decide-01\n                     :ARG3 (w / world))))",
      "(s / say-01\n   :ARG1 (c / contrast-01\n            :ARG2 (c2 / change-01\n                      :polarity -)))",
      "(s / say-01\n   :ARG1 (c / contrast-01\n            :ARG2 (c2 / change-01\n                      :ARG0 (p2 / person\n                                :name (n2 / name\n                                          :op1 \"Zala\")))))",
      "(g / go-21\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Zala\")))",
      "(g / go-21\n   :time (s / start-01\n            :ARG0 (p / person :name (n / name :op1 \"Zala\"))))",
      "(g / go-21\n   :time (s / start-01\n            :ARG1 (p3 / play-01\n                      :ARG0 (p / person :name (n / name :op1 \"Zala\")))))",
      "(g / go-21\n   :time (s / start-01\n            :time (d / date-entity\n                     :month 5)))"
    ],
    "smus": [
      "Abby Bishop took in.",
      "Sala took in August.",
      "Abby Bishop",
      "20 and follows Bishop.",
      "Follows as it travels playing for basketball teams.",
      "But it's a big decision.",
      "But it won't change,\" he said.",
      "Bishop",
      "Sala will go when May starts.",
      "When playing in the WNBA starts, Sala will go to Bishop.",
      "Bishop",
      "U.S. League"
    ]
  },
  {
    "instance_id": "realsumm-76",
    "summary": "<t> ONE Pro Cycling preparing to take on Team Sky and Sir Bradley Wiggins . </t> <t> Tour de Yorkshire runs over three stages starting in Bridlington on May 1 . </t> <t> Prior 's team and Yorkshire race inspired by Tour de France Grand Depart . </t>",
    "summary_trees": [
      "# ::snt  ONE Pro Cycling preparing to take on Team Sky and Sir Bradley Wiggins . \n(p / prepare-02\n      :ARG0 (o / organization\n            :name (n / name\n                  :op1 \"One\"\n                  :op2 \"Pro\"\n                  :op3 \"Cycling\"))\n      :ARG1 (t / take-on-21\n            :ARG0 o\n            :ARG1 (a / and\n                  :op1 (t2 / team\n                        :name (n2 / name\n                              :op1 \"Team\"\n                              :op2 \"Sky\"))\n                  :op2 (p2 / person\n                        :name (n3 / name\n                              :op1 \"Sir\"\n                              :op2 \"Bradley\"\n                              :op3 \"Wiggins\")))))",
      "# ::snt  Tour de Yorkshire runs over three stages starting in Bridlington on May 1 . \n(r / run-over-04\n      :ARG1 (t / tour\n            :name (n / name\n                  :op1 \"Tour\"\n                  :op2 \"de\"\n                  :op3 \"Yorkshire\"))\n      :ARG2 (s / stage\n            :quant 3)\n      :ARG1-of (s2 / start-01\n            :location (c / city\n                  :name (n2 / name\n                        :op1 \"Bridlington\"))\n            :time (d / date-entity\n                  :day 1\n                  :month 5)))",
      "# ::snt  Prior 's team and Yorkshire race inspired by Tour de France Grand Depart . \n(ii / inspire-01\n      :ARG0 (t / tour\n            :name (n / name\n                  :op1 \"Tour\"\n                  :op2 \"de\"\n                  :op3 \"France\"\n                  :op4 \"Grand\"\n                  :op5 \"Depart\"))\n      :ARG1 (a / and\n            :op1 (t2 / team\n                  :poss (p / person\n                        :name (n2 / name\n                              :op1 \"Prior\")))\n            :op2 (r / race-02\n                  :ARG0 p\n                  :location (c / county\n                        :name (n3 / name\n                              :op1 \"Yorkshire\")))))"
    ],
    "tree": [
      "(p / prepare-02\n   :ARG0 (o / organization\n            :name (n / name\n                     :op1 \"One\"\n                     :op2 \"Pro\"\n                     :op3 \"Cycling\")))",
      "(p / prepare-02\n   :ARG1 (t / take-on-21\n            :ARG0 (o / organization :name (n / name :op1 \"One\" :op2 \"Pro\" :op3 \"Cycling\"))))",
      "(p / prepare-02\n   :ARG1 (t / take-on-21\n            :ARG1 (t2 / team\n                      :name (n2 / name\n                                :op1 \"Team\"\n                                :op2 \"Sky\"))))",
      "(p / prepare-02\n   :ARG1 (t / take-on-21\n            :ARG1 (p2 / person\n                      :name (n3 / name\n                                :op1 \"Sir\"\n                                :op2 \"Bradley\"\n                                :op3 \"Wiggins\"))))",
      "(p / prepare-02\n   :ARG0 (o / organization\n            :name (n / name\n                     :op1 \"One\"\n                     :op2 \"Pro\"\n                     :op3 \"Cycling\"))\n   :ARG1 (t / take-on-21\n            :ARG0 o))",
      "(r / run-over-04\n   :ARG1 (t / tour\n            :name (n / name\n                     :op1 \"Tour\"\n                     :op2 \"de\"\n                     :op3 \"Yorkshire\")))",
      "(t / tour\n   :name (n / name\n            :op1 \"Tour\"\n            :op2 \"de\"\n            :op3 \"Yorkshire\"))",
      "(s2 / start-01\n    :location (c / city\n                 :name (n2 / name\n                           :op1 \"Bridlington\")))",
      "(ii / inspire-01\n    :ARG0 (t / tour\n             :name (n / name\n                      :op1 \"Tour\"\n                      :op2 \"de\"\n                      :op3 \"France\"\n                      :op4 \"Grand\"\n                      :op5 \"Depart\")))",
      "(ii / inspire-01\n    :ARG1 (t2 / team\n              :poss (p / person\n                       :name (n2 / name\n                                 :op1 \"Prior\"))))",
      "(ii / inspire-01\n    :ARG1 (r / race-02\n             :ARG0 (p / person\n                      :name (n2 / name\n                                :op1 \"Prior\"))))",
      "(ii / inspire-01\n    :ARG1 (r / race-02\n             :location (c / county\n                          :name (n3 / name\n                                    :op1 \"Yorkshire\"))))",
      "(ii / inspire-01\n    :ARG0 (t / tour\n             :name (n / name\n                      :op1 \"Tour\"\n                      :op2 \"de\"\n                      :op3 \"France\"\n                      :op4 \"Grand\"\n                      :op5 \"Depart\"))\n    :ARG1 (t2 / team\n              :poss (p / person\n                       :name (n2 / name\n                                 :op1 \"Prior\"))))"
    ],
    "smus": [
      "One Pro Cycling is preparing to take on.",
      "and Sir Bradley Wiggins.",
      "preparing to take on Team Sky.",
      "Team Sky",
      "Take on Sir Bradley Wiggins.",
      "Three stages were run over.",
      "Tour de Yorkshire runs over.",
      "Starting on the 1st.",
      "and Prior's team.",
      "The Tour de France Grand D\u00e9part has inspired the team of Prior.",
      "Prior.",
      "and the race in Yorkshire.",
      "The race is in Yorkshire."
    ]
  },
  {
    "instance_id": "realsumm-77",
    "summary": "<t> Woman reported ' someone ' had been run over , but victim was a squirrel . </t> <t> Another man dialled 999 to say man dropped a burger which was ' bleeding ' East of England ambulance service warned hoax calls can cost lives . </t>",
    "summary_trees": [
      "# ::snt  Woman reported ' someone ' had been run over , but victim was a squirrel . \n(c / contrast-01\n      :ARG1 (r / report-01\n            :ARG0 (w / woman)\n            :ARG1 (r2 / run-over-12\n                  :ARG1 (s / someone)))\n      :ARG2 (s2 / squirrel\n            :domain (v / victim)))",
      "# ::snt  Another man dialled 999 to say man dropped a burger which was ' bleeding ' East of England ambulance service warned hoax calls can cost lives . \n(m / multi-sentence\n      :snt1 (d / dial-01\n            :ARG0 (m2 / man\n                  :mod (a / another))\n            :ARG1 (p / phone-number-entity\n                  :value 999)\n            :purpose (s / say-01\n                  :ARG0 m2\n                  :ARG1 (d2 / drop-01\n                        :ARG0 (m3 / man)\n                        :ARG1 (b / burger\n                              :ARG1-of (b2 / bleed-01)))))\n      :snt2 (w / warn-01\n            :ARG0 (s2 / service\n                  :mod (a2 / ambulance)\n                  :mod (c / country-region\n                        :name (n / name\n                              :op1 \"East\"\n                              :op2 \"of\"\n                              :op3 \"England\")))\n            :ARG1 (p2 / possible-01\n                  :ARG1 (c2 / cost-01\n                        :ARG1 (c3 / call-02\n                              :mod (h / hoax-01))\n                        :ARG2 (l / live-01)))))"
    ],
    "tree": [
      "(c / contrast-01\n   :ARG1 (r / report-01\n            :ARG0 (w / woman)))",
      "(c / contrast-01\n   :ARG1 (r / report-01\n            :ARG1 (r2 / run-over-12\n                      :ARG1 (s / someone))))",
      "(c / contrast-01\n   :ARG2 (s2 / squirrel\n             :domain (v / victim)))",
      "(c / contrast-01\n   :ARG1 (r / report-01\n            :ARG0 (w / woman))\n   :ARG2 (s2 / squirrel\n             :domain (v / victim)))",
      "(c / contrast-01\n   :ARG1 (r / report-01\n            :ARG1 (r2 / run-over-12\n                      :ARG1 (s / someone)))\n   :ARG2 (s2 / squirrel\n             :domain (v / victim)))",
      "(m / multi-sentence\n   :snt1 (d / dial-01\n            :ARG0 (m2 / man\n                      :mod (a / another))))",
      "(m / multi-sentence\n   :snt1 (d / dial-01\n            :ARG1 (p / phone-number-entity\n                     :value 999)))",
      "(m / multi-sentence\n   :snt1 (d / dial-01\n            :purpose (s / say-01\n                        :ARG1 (d2 / drop-01\n                                  :ARG0 (m3 / man)))))",
      "(m / multi-sentence\n   :snt1 (d / dial-01\n            :purpose (s / say-01\n                        :ARG1 (d2 / drop-01\n                                  :ARG1 (b / burger\n                                           :ARG1 (b2 / bleed-01))))))"
    ],
    "smus": [
      "But the victim is a squirrel.",
      "But someone was reported run over.",
      "The woman reported, but the victim was a squirrel.",
      "Someone reported run over.",
      "But the woman reported.",
      "The East of England service warned --",
      "dialed to say the bleedin' burger dropped.",
      "Another man dialed 999.",
      "dialed to say the man dropped."
    ]
  },
  {
    "instance_id": "realsumm-78",
    "summary": "<t> Ben Flower returned from Flower six - month ban on Thursday night . </t> <t> Wales forward made first appearance since Flower punched St Helens ' Lance Hohaia in the opening moments of last season 's Grand Final . </t> <t> 27-year - old received a brilliant reception during 's Wigan 's 30 - 20 victory against Warrington . </t>",
    "summary_trees": [
      "# ::snt  Ben Flower returned from Flower six - month ban on Thursday night . \n(r / return-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Ben\"\n                  :op2 \"Flower\"))\n      :ARG3 (b / ban-01\n            :ARG2 p\n            :duration (t / temporal-quantity\n                  :quant 6\n                  :unit (m / month)))\n      :time (d / date-entity\n            :weekday (t2 / thursday)\n            :dayperiod (n2 / night)))",
      "# ::snt  Wales forward made first appearance since Flower punched St Helens ' Lance Hohaia in the opening moments of last season 's Grand Final . \n(a / appear-01\n      :ARG1 (p / person\n            :ARG0-of (f / forward-01)\n            :part-of (t / team\n                  :name (n / name\n                        :op1 \"Wales\")))\n      :ord (o / ordinal-entity\n            :value 1\n            :range (s / since\n                  :op1 (p2 / punch-01\n                        :ARG0 (p3 / person\n                              :name (n2 / name\n                                    :op1 \"Flower\"))\n                        :ARG1 (p4 / person\n                              :name (n3 / name\n                                    :op1 \"Lance\"\n                                    :op2 \"Hohaia\")\n                              :part-of (t2 / team\n                                    :name (n4 / name\n                                          :op1 \"St\"\n                                          :op2 \"Helens\")))\n                        :time (m / moment\n                              :ARG0-of (o2 / open-02\n                                    :ARG1 (g / game\n                                          :name (n5 / name\n                                                :op1 \"Grand\"\n                                                :op2 \"Final\")\n                                          :time (s2 / season\n                                                :mod (l / last)))))))))",
      "# ::snt  27-year - old received a brilliant reception during 's Wigan 's 30 - 20 victory against Warrington . \n(r / receive-01\n      :ARG0 (p / person\n            :age (t / temporal-quantity\n                  :quant 27\n                  :unit (y / year)))\n      :ARG1 (r2 / reception\n            :ARG1-of (b / brilliant-01))\n      :time (w / win-01\n            :ARG0 (t2 / team\n                  :name (n / name\n                        :op1 \"Wigan\"))\n            :ARG4 (t3 / team\n                  :name (n2 / name\n                        :op1 \"Warrington\"))\n            :manner (s / score-entity\n                  :op1 30\n                  :op2 20)))"
    ],
    "tree": [
      "(r / return-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Ben\"\n                     :op2 \"Flower\")))",
      "(r / return-01\n   :ARG3 (b / ban-01\n            :ARG2 (p / person :name (n / name :op1 \"Ben\" :op2 \"Flower\"))))",
      "(r / return-01\n   :ARG3 (b / ban-01\n            :duration (t / temporal-quantity\n                         :quant 6)))",
      "(r / return-01\n   :ARG3 (b / ban-01\n            :duration (t / temporal-quantity\n                         :unit (m / month))))",
      "(a / appear-01\n   :ARG1 (p / person\n            :ARG0 (f / forward-01)))",
      "(a / appear-01\n   :ARG1 (p / person\n            :part (t / team\n                     :name (n / name\n                              :op1 \"Wales\"))))",
      "(a / appear-01\n   :ord (o / ordinal-entity\n           :value 1))",
      "(a / appear-01\n   :ord (o / ordinal-entity\n           :range (s / since\n                     :op1 (p2 / punch-01\n                              :ARG0 (p3 / person\n                                        :name (n2 / name\n                                                  :op1 \"Flower\"))))))",
      "(a / appear-01\n   :ord (o / ordinal-entity\n           :range (s / since\n                     :op1 (p2 / punch-01\n                              :ARG1 (p4 / person\n                                        :name (n3 / name\n                                                  :op1 \"Lance\"\n                                                  :op2 \"Hohaia\"))))))",
      "(r / receive-01\n   :ARG0 (p / person\n            :age (t / temporal-quantity\n                    :quant 27)))",
      "(r / receive-01\n   :ARG0 (p / person\n            :age (t / temporal-quantity\n                    :unit (y / year))))",
      "(r / receive-01\n   :ARG1 (r2 / reception\n             :ARG1 (b / brilliant-01)))",
      "(r / receive-01\n   :time (w / win-01\n            :ARG0 (t2 / team\n                      :name (n / name\n                               :op1 \"Wigan\"))))",
      "(r / receive-01\n   :time (w / win-01\n            :ARG4 (t3 / team\n                      :name (n2 / name\n                                :op1 \"Warrington\"))))"
    ],
    "smus": [
      "Ben Flower returned to his ban Thursday.",
      "Ben Flower returned Thursday.",
      "6 months ban.",
      "Ben Flower returned Thursday from a six-month ban.",
      "since Lance Hohaia was punched.",
      "St Helens players were punched at the opening moments of last season's game.",
      "First appearance.",
      "Wales",
      "Since the punches that came at the opening moments of the Grand Final.",
      "The year old received a brilliant reception in the 30th win.",
      "The year old received a brilliant reception in the Warrington win.",
      "Wigan won by 30-20.",
      "Wigan won",
      "The 27-year-old received."
    ]
  },
  {
    "instance_id": "realsumm-79",
    "summary": "<t> Inspired by the aesthetic of the Belle Epoque era , the Jacques Garcia designed hotel is both opulent and edgy . </t> <t> A mix of Arabian and Napoleon III decor , the Pigalle haunt harkens back to the city 's pleasure houses of yesteryear . </t> <t> Also available for guest use : a charming conservatory , library bar and celestial spa available for private rental . </t>",
    "summary_trees": [
      "# ::snt  Inspired by the aesthetic of the Belle Epoque era , the Jacques Garcia designed hotel is both opulent and edgy . \n(a / and\n      :op1 (o / opulent\n            :domain (h / hotel\n                  :ARG1-of (d / design-01\n                        :ARG0 (p / person\n                              :name (n / name\n                                    :op1 \"Jacques\"\n                                    :op2 \"Garcia\")))))\n      :op2 (e / edgy\n            :domain h)\n      :ARG1-of (ii / inspire-01\n            :ARG0 (a2 / aesthetic\n                  :poss (e2 / era\n                        :name (n2 / name\n                              :op1 \"Belle\"\n                              :op2 \"Epoque\")))))",
      "# ::snt  A mix of Arabian and Napoleon III decor , the Pigalle haunt harkens back to the city 's pleasure houses of yesteryear . \n(h / harken-01\n      :ARG0 (h2 / haunt-01\n            :location (c / city-district\n                  :name (n / name\n                        :op1 \"Pigalle\"))\n            :ARG2-of (m / mix-01\n                  :ARG1 (d / decor\n                        :mod (w / world-region\n                              :name (n2 / name\n                                    :op1 \"Arabia\")))\n                  :ARG3 (d2 / decor\n                        :mod (p / person\n                              :name (n3 / name\n                                    :op1 \"Napoleon\"\n                                    :op2 \"III\")))))\n      :ARG1 (h3 / house\n            :mod (p2 / pleasure)\n            :poss c\n            :time (y / yesteryear))\n      :direction (b / back))",
      "# ::snt  Also available for guest use : a charming conservatory , library bar and celestial spa available for private rental . \n(a / available-02\n      :ARG2 (u / use-01\n            :ARG0 (g / guest)\n            :ARG1 (a2 / and\n                  :op1 (c / conservatory\n                        :ARG0-of (c2 / charm-01))\n                  :op2 (b / bar\n                        :mod (l / library))\n                  :op3 (s / spa\n                        :mod (c3 / celestial))\n                  :ARG2-of (a3 / available-02\n                        :ARG2 (r / rent-01\n                              :ARG1 a2\n                              :ARG1-of (p / private-03)))))\n      :mod (a4 / also))"
    ],
    "tree": [
      "(a / and\n   :op1 (o / opulent\n           :domain (h / hotel\n                      :ARG1 (d / design-01\n                               :ARG0 (p / person\n                                        :name (n / name\n                                                 :op1 \"Jacques\"\n                                                 :op2 \"Garcia\"))))))",
      "(a / and\n   :ARG1 (ii / inspire-01\n             :ARG0 (a2 / aesthetic\n                       :poss (e2 / era\n                                 :name (n2 / name\n                                           :op1 \"Belle\"\n                                           :op2 \"Epoque\")))))",
      "(a / and\n   :op2 (e / edgy\n           :domain (h / hotel\n                      :ARG1 (d / design-01\n                               :ARG0 (p / person\n                                        :name (n / name\n                                                 :op1 \"Jacques\"\n                                                 :op2 \"Garcia\"))))))",
      "(a / and\n   :op1 (o / opulent\n           :domain (h / hotel\n                      :ARG1 (d / design-01\n                               :ARG0 (p / person\n                                        :name (n / name\n                                                 :op1 \"Jacques\"\n                                                 :op2 \"Garcia\")))))\n   :ARG1 (ii / inspire-01\n             :ARG0 (a2 / aesthetic\n                       :poss (e2 / era\n                                 :name (n2 / name\n                                           :op1 \"Belle\"\n                                           :op2 \"Epoque\")))))",
      "(a / and\n   :op1 (o / opulent\n           :domain (h / hotel\n                      :ARG1 (d / design-01\n                               :ARG0 (p / person\n                                        :name (n / name\n                                                 :op1 \"Jacques\"\n                                                 :op2 \"Garcia\")))))\n   :op2 (e / edgy\n           :domain h))",
      "(h / harken-01\n   :ARG0 (h2 / haunt-01\n             :location (c / city-district\n                          :name (n / name\n                                   :op1 \"Pigalle\"))))",
      "(h / harken-01\n   :ARG0 (h2 / haunt-01\n             :ARG2 (m / mix-01\n                      :ARG1 (d / decor\n                               :mod (w / world-region\n                                       :name (n2 / name\n                                                 :op1 \"Arabia\"))))))",
      "(h / harken-01\n   :ARG0 (h2 / haunt-01\n             :ARG2 (m / mix-01\n                      :ARG3 (d2 / decor\n                                :mod (p / person\n                                        :name (n3 / name\n                                                  :op1 \"Napoleon\"\n                                                  :op2 \"III\"))))))",
      "(h / harken-01\n   :ARG1 (h3 / house\n             :mod (p2 / pleasure)))",
      "(h / harken-01\n   :ARG1 (h3 / house\n             :poss (c / city-district\n                      :name (n / name\n                               :op1 \"Pigalle\"))))",
      "(a / available-02\n   :ARG2 (u / use-01\n            :ARG0 (g / guest)))",
      "(a / available-02\n   :ARG2 (u / use-01\n            :ARG1 (c / conservatory\n                     :ARG0 (c2 / charm-01))))",
      "(a / available-02\n   :ARG2 (u / use-01\n            :ARG1 (b / bar\n                     :mod (l / library))))",
      "(a / available-02\n   :ARG2 (u / use-01\n            :ARG1 (s / spa\n                     :mod (c3 / celestial))))",
      "(a / available-02\n   :ARG2 (u / use-01\n            :ARG1 (a3 / available-02\n                      :ARG2 (r / rent-01\n                               :ARG1 (a2 / and)))))"
    ],
    "smus": [
      "The aesthetic of the Belle Epoque era.",
      "And the hotel Jacques Garcia designed was edgy.",
      "The hotel was designed by Jacques Garcia.",
      "Jacques Garcia designed.",
      "The aesthetic of the Belle Epoque era is inspired.",
      "The haunting of the mix of Napoleon III decor harkens back to pleasure houses.",
      "Pigalle Haunted",
      "Napoleon III",
      "Pigalle's haunt harkens back to its houses.",
      "The Pigalle haunt is a mix of Napoleon III decor.",
      "A charming conservatory and a library bar are available for private rent.",
      "The Library bar is available for use.",
      "Charming conservatory, library bar and celestial spa.",
      "Rentals are available for both.",
      "available for use as a private rental"
    ]
  },
  {
    "instance_id": "realsumm-80",
    "summary": "<t> Steven Finn was left out of the England squad for the West Indies tour . </t> <t> The Middlesex quick bowler has regained form after a tough 12 months . </t> <t> Finn said Finn 's back to bowling like Finn was as ' a carefree 21-year - old ' Finn last of 23 Test caps came for England back in 2013 . </t>",
    "summary_trees": [
      "# ::snt  Steven Finn was left out of the England squad for the West Indies tour . \n(l / leave-out-03\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Steven\"\n                  :op2 \"Finn\"))\n      :ARG2 (s / squad\n            :mod (c / country\n                  :name (n2 / name\n                        :op1 \"England\"))\n            :subevent-of (t / tour-01\n                  :ARG0 c\n                  :ARG1 (c2 / country\n                        :name (n3 / name\n                              :op1 \"West\"\n                              :op2 \"Indies\")))))",
      "# ::snt  The Middlesex quick bowler has regained form after a tough 12 months . \n(r / regain-01\n      :ARG0 (b / bowler\n            :ARG1-of (q / quick-02)\n            :mod (t / team\n                  :name (n / name\n                        :op1 \"Middlesex\")))\n      :ARG1 (f / form)\n      :time (a / after\n            :op1 (t2 / temporal-quantity\n                  :quant 12\n                  :unit (m / month)\n                  :ARG1-of (t3 / tough-02))))",
      "# ::snt  Finn said Finn 's back to bowling like Finn was as ' a carefree 21-year - old ' Finn last of 23 Test caps came for England back in 2013 . \n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Finn\"))\n      :ARG1 (b / back-02\n            :ARG1 p\n            :direction (b2 / bowl-01\n                  :ARG0 p)\n            :ARG1-of (r / resemble-01\n                  :ARG2 (b3 / back-02\n                        :ARG1 (p2 / person\n                              :name (n2 / name\n                                    :op1 \"Finn\")\n                              :age (t / temporal-quantity\n                                    :quant 21\n                                    :unit (y / year))\n                              :mod (c / carefree)\n                              :ARG1-of (ii / include-91\n                                    :ARG2 (c2 / cap\n                                          :quant 23\n                                          :mod (t2 / test)\n                                          :ARG1-of (c3 / come-01\n                                                :ARG4 (t3 / team\n                                                      :name (n3 / name\n                                                            :op1 \"England\"))\n                                                :time (d / date-entity\n                                                      :year 2013))\n                                          :mod (l / last))))))))"
    ],
    "tree": [
      "(l / leave-out-03\n   :ARG2 (s / squad\n            :mod (c / country\n                    :name (n2 / name\n                              :op1 \"England\"))))",
      "(l / leave-out-03\n   :ARG2 (s / squad\n            :subevent (t / tour-01\n                         :ARG0 (c / country :name (n2 / name :op1 \"England\")))))",
      "(l / leave-out-03\n   :ARG2 (s / squad\n            :subevent (t / tour-01\n                         :ARG1 (c2 / country\n                                   :name (n3 / name\n                                             :op1 \"West\"\n                                             :op2 \"Indies\")))))",
      "(r / regain-01\n   :ARG0 (b / bowler\n            :ARG1 (q / quick-02)))",
      "(r / regain-01\n   :ARG0 (b / bowler\n            :mod (t / team\n                    :name (n / name\n                             :op1 \"Middlesex\"))))",
      "(r / regain-01\n   :time (a / after\n            :op1 (t2 / temporal-quantity\n                     :quant 12)))",
      "(r / regain-01\n   :time (a / after\n            :op1 (t2 / temporal-quantity\n                     :unit (m / month))))",
      "(r / regain-01\n   :time (a / after\n            :op1 (t2 / temporal-quantity\n                     :ARG1 (t3 / tough-02))))",
      "(s / say-01\n   :ARG1 (b / back-02\n            :direction (b2 / bowl-01\n                           :ARG0 (p / person :name (n / name :op1 \"Finn\")))))",
      "(s / say-01\n   :ARG1 (b / back-02\n            :ARG1 (r / resemble-01\n                     :ARG2 (b3 / back-02\n                               :ARG1 (p2 / person\n                                         :age (t / temporal-quantity\n                                                 :quant 21))))))"
    ],
    "smus": [
      "Steven Finn was left out of the England tour squad.",
      "England squad on tour of West Indies",
      "Steven Finn was left out.",
      "After tough.",
      "The quick bowler has regained form after months.",
      "Middlesex bowler has regained form after months.",
      "The form regained after months.",
      "Middlesex bowler",
      "Back to Finn bowling.",
      "\"It's back like 23 of the caps,\" Finn said."
    ]
  },
  {
    "instance_id": "realsumm-81",
    "summary": "<t> Paul Armstrong flew to Cyprus to celebrate new job as IT project manager . </t> <t> Was stopped at airport with stun gun , baton and knuckle duster in Armstrong bag . </t> <t> Pleaded guilty to possession of a firearm and lost Armstrong job before starting job . </t> <t> 26-year - old was sentenced to eight months in jail , suspended for two years . </t>",
    "summary_trees": [
      "# ::snt  Paul Armstrong flew to Cyprus to celebrate new job as IT project manager . \n(f / fly-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Paul\"\n                  :op2 \"Armstrong\"))\n      :destination (c / country\n            :name (n2 / name\n                  :op1 \"Cyprus\"))\n      :purpose (c2 / celebrate-01\n            :ARG0 p\n            :ARG1 (j / job\n                  :ARG1-of (n3 / new-01)\n                  :topic (p2 / person\n                        :ARG0-of (m / manage-01\n                              :ARG1 (p3 / project\n                                    :mod (t / technology\n                                          :mod (ii / information))))))))",
      "# ::snt  Was stopped at airport with stun gun , baton and knuckle duster in Armstrong bag . \n(s / stop-01\n      :ARG1 (h / have-03\n            :ARG1 (a / and\n                  :op1 (g / gun\n                        :ARG2-of (s2 / stun-01))\n                  :op2 (b / baton)\n                  :op3 (d / duster\n                        :mod (k / knuckle)))\n            :location (b2 / bag\n                  :mod (c / company\n                        :name (n / name\n                              :op1 \"Armstrong\"))))\n      :location (a2 / airport))",
      "# ::snt  Pleaded guilty to possession of a firearm and lost Armstrong job before starting job . \n(a / and\n      :op1 (p / plead-02\n            :ARG2 (g / guilty-01\n                  :ARG1 (p2 / person\n                        :name (n / name\n                              :op1 \"Armstrong\"))\n                  :ARG2 (p3 / possess-01\n                        :ARG1 (f / firearm))))\n      :op2 (l / lose-02\n            :ARG1 (j / job\n                  :poss p2)\n            :time (b / before\n                  :op1 (s / start-01\n                        :ARG1 j))))",
      "# ::snt  26-year - old was sentenced to eight months in jail , suspended for two years . \n(s / sentence-01\n      :ARG1 (p / person\n            :age (t / temporal-quantity\n                  :quant 26\n                  :unit (y / year)))\n      :ARG2 (a / and\n            :op1 (t2 / temporal-quantity\n                  :quant 8\n                  :unit (m / month)\n                  :location (j / jail))\n            :op2 (s2 / suspend-01\n                  :ARG1 t2\n                  :duration (t3 / temporal-quantity\n                        :quant 2\n                        :unit (y2 / year)))))"
    ],
    "tree": [
      "(f / fly-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Paul\"\n                     :op2 \"Armstrong\")))",
      "(f / fly-01\n   :destination (c / country\n                   :name (n2 / name\n                             :op1 \"Cyprus\")))",
      "(f / fly-01\n   :purpose (c2 / celebrate-01\n                :ARG0 (p / person :name (n / name :op1 \"Paul\" :op2 \"Armstrong\"))))",
      "(f / fly-01\n   :purpose (c2 / celebrate-01\n                :ARG1 (j / job\n                         :ARG1 (n3 / new-01))))",
      "(f / fly-01\n   :purpose (c2 / celebrate-01\n                :ARG1 (j / job\n                         :topic (p2 / person\n                                    :ARG0 (m / manage-01\n                                             :ARG1 (p3 / project\n                                                       :mod (t / technology\n                                                               :mod (ii / information))))))))",
      "(s / stop-01\n   :ARG1 (h / have-03\n            :ARG1 (g / gun\n                     :ARG2 (s2 / stun-01))))",
      "(s / stop-01\n   :ARG1 (h / have-03\n            :location (b2 / bag\n                          :mod (c / company\n                                  :name (n / name\n                                           :op1 \"Armstrong\")))))",
      "(s / stop-01\n   :ARG1 (h / have-03\n            :ARG1 (b / baton)))",
      "(s / stop-01\n   :ARG1 (h / have-03\n            :ARG1 (d / duster\n                     :mod (k / knuckle))))",
      "(s / stop-01\n   :ARG1 (h / have-03\n            :ARG1 (g / gun\n                     :ARG2 (s2 / stun-01)))\n   :location (a2 / airport))",
      "(a / and\n   :op1 (p / plead-02\n           :ARG2 (g / guilty-01\n                    :ARG1 (p2 / person\n                              :name (n / name\n                                       :op1 \"Armstrong\")))))",
      "(a / and\n   :op1 (p / plead-02\n           :ARG2 (g / guilty-01\n                    :ARG2 (p3 / possess-01\n                              :ARG1 (f / firearm)))))",
      "(a / and\n   :op2 (l / lose-02\n           :ARG1 (j / job\n                    :poss (p2 / person\n                              :name (n / name\n                                       :op1 \"Armstrong\")))))",
      "(a / and\n   :op2 (l / lose-02\n           :time (b / before\n                    :op1 (s / start-01\n                            :ARG1 (j / job)))))",
      "(a / and\n   :op1 (p / plead-02\n           :ARG2 (g / guilty-01\n                    :ARG1 (p2 / person\n                              :name (n / name\n                                       :op1 \"Armstrong\"))))\n   :op2 (l / lose-02\n           :ARG1 (j / job\n                    :poss p2)))",
      "(s / sentence-01\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :quant 26)))",
      "(s / sentence-01\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :unit (y / year))))",
      "(s / sentence-01\n   :ARG2 (t2 / temporal-quantity\n             :quant 8))"
    ],
    "smus": [
      "Paul Armstrong",
      "Paul Armstrong flew to Cyprus.",
      "Celebrate the job of IT project manager.",
      "Paul Armstrong flew in to celebrate the job of IT project manager.",
      "Cyprus (CY)",
      "had a stun gun.",
      "The baton was in an Armstrong bag.",
      "a knuckle duster.",
      "Armstrong",
      "A stun gun, a baton and a knuckle duster.",
      "The plead guilty to possession of a firearm and Armstrong lost his job.",
      "Armstrong's job was lost.",
      "The plead guilty to possession of a firearm.",
      "Lost before starting a job.",
      "Armstrong pleaded guilty.",
      "Months, suspended.",
      "Jail, suspended for years.",
      "The year old was sentenced to be suspended from the time."
    ]
  },
  {
    "instance_id": "realsumm-82",
    "summary": "<t> Australian fashion designer Alex Perry wo n't show at this year 's MBFWA . </t> <t> The designer is excited to kick back and enjoy the shows from front row . </t> <t> This will be the designer 's second MBFWA designer has missed in two decades . </t> <t> Perry is now focusing on global expansion in Asia and Middle East . </t>",
    "summary_trees": [
      "# ::snt  Australian fashion designer Alex Perry wo n't show at this year 's MBFWA . \n(s / show-01\n      :polarity -\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Alex\"\n                  :op2 \"Perry\")\n            :ARG0-of (d / design-01\n                  :ARG1 (f / fashion))\n            :mod (c / country\n                  :name (n2 / name\n                        :op1 \"Australia\")))\n      :time (e / event\n            :name (n3 / name\n                  :op1 \"MBFWA\")\n            :mod (y / year\n                  :mod (t / this))))",
      "# ::snt  The designer is excited to kick back and enjoy the shows from front row . \n(e / excite-01\n      :ARG0 (a / and\n            :op1 (k / kick-01\n                  :ARG0 (p / person\n                        :ARG0-of (d / design-01))\n                  :direction (b / back))\n            :op2 (e2 / enjoy-01\n                  :ARG0 p\n                  :ARG1 (s / show-04)\n                  :location (r / row\n                        :mod (f / front))))\n      :ARG1 p)",
      "# ::snt  This will be the designer 's second MBFWA designer has missed in two decades . \n(m / miss-02\n      :ARG0 (p / person\n            :ARG0-of (d / design-01)\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (o / organization\n                        :name (n / name\n                              :op1 \"MBFWA\"))\n                  :ARG2 (p2 / person\n                        :ARG0-of (d2 / design-01))))\n      :ARG1 (t / this)\n      :ord (o2 / ordinal-entity\n            :value 2\n            :range (t2 / temporal-quantity\n                  :quant 2\n                  :unit (d3 / decade))))",
      "# ::snt  Perry is now focusing on global expansion in Asia and Middle East . \n(f / focus-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Perry\"))\n      :ARG1 (e / expand-01\n            :ARG1 p\n            :ARG2 (g / globe)\n            :location (a / and\n                  :op1 (c / continent\n                        :name (n2 / name\n                              :op1 \"Asia\"))\n                  :op2 (w / world-region\n                        :name (n3 / name\n                              :op1 \"Middle\"\n                              :op2 \"East\"))))\n      :time (n4 / now))"
    ],
    "tree": [
      "(s / show-01\n   :time (e / event\n            :name (n3 / name\n                      :op1 \"MBFWA\")))",
      "(s / show-01\n   :time (e / event\n            :mod (y / year\n                    :mod (t / this))))",
      "(e / excite-01\n   :ARG0 (k / kick-01\n            :ARG0 (p / person\n                     :ARG0 (d / design-01))))",
      "(e / excite-01\n   :ARG0 (k / kick-01\n            :direction (b / back)))",
      "(e / excite-01\n   :ARG0 (e2 / enjoy-01\n             :ARG1 (s / show-04)))",
      "(e / excite-01\n   :ARG0 (e2 / enjoy-01\n             :location (r / row\n                          :mod (f / front))))",
      "(m / miss-02\n   :ARG0 (p / person\n            :ARG0 (d / design-01)))",
      "(m / miss-02\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (o / organization\n                              :name (n / name\n                                       :op1 \"MBFWA\")))))",
      "(m / miss-02\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (p2 / person\n                               :ARG0 (d2 / design-01)))))",
      "(m / miss-02\n   :ord (o2 / ordinal-entity\n            :value 2))",
      "(m / miss-02\n   :ord (o2 / ordinal-entity\n            :range (t2 / temporal-quantity\n                       :quant 2)))",
      "(f / focus-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Perry\")))",
      "(f / focus-01\n   :ARG1 (e / expand-01\n            :ARG1 (p / person :name (n / name :op1 \"Perry\"))))",
      "(f / focus-01\n   :ARG1 (e / expand-01\n            :ARG2 (g / globe)))",
      "(f / focus-01\n   :ARG1 (e / expand-01\n            :location (c / continent\n                         :name (n2 / name\n                                   :op1 \"Asia\"))))",
      "(f / focus-01\n   :ARG1 (e / expand-01\n            :location (w / world-region\n                         :name (n3 / name\n                                   :op1 \"Middle\"\n                                   :op2 \"East\"))))"
    ],
    "smus": [
      "Australia (AU)",
      "Australian fashion designer Alex Perry",
      "And the designer is going to kick.",
      "and enjoy the shows.",
      "Enjoy in front row.",
      "and kick back.",
      "The designer has been missing for decades.",
      "This is the second time this has been missed.",
      "MBFWA has missed this.",
      "Missed second.",
      "This is the second time the designer has missed this.",
      "and the Middle East.",
      "Perry is now focusing on expansion in Asia.",
      "Focusing on expansion in Asia.",
      "Perry is now focusing on expansion.",
      "Perry is focusing."
    ]
  },
  {
    "instance_id": "realsumm-83",
    "summary": "<t> An Indiana public school performance of American Pie ended in tragedy Wednesday when a riser buckled just as dozens danced on - stage . </t> <t> More than a dozen people were injured at the Westfield High performance and one student was taken to a hospital in critical condition . </t> <t> Students said there had been no issues when Students previously practiced the song on the stage with the same number of people . </t>",
    "summary_trees": [
      "# ::snt  An Indiana public school performance of American Pie ended in tragedy Wednesday when a riser buckled just as dozens danced on - stage . \n(e / end-01\n      :ARG1 (p / perform-01\n            :ARG0 (s / school\n                  :location (s2 / state\n                        :name (n / name\n                              :op1 \"Indiana\"))\n                  :ARG1-of (p2 / public-02))\n            :ARG1 (m / music\n                  :name (n2 / name\n                        :op1 \"American\"\n                        :op2 \"Pie\")))\n      :ARG2 (t / tragedy)\n      :time (d / date-entity\n            :weekday (w / wednesday))\n      :time (b / buckle-01\n            :ARG1 (p3 / person\n                  :ARG0-of (r / rise-01))\n            :time (d2 / dance-01\n                  :ARG0 (p4 / person\n                        :quant (m2 / multiple\n                              :op1 12))\n                  :location (s3 / stage))))",
      "# ::snt  More than a dozen people were injured at the Westfield High performance and one student was taken to a hospital in critical condition . \n(a / and\n      :op1 (ii / injure-01\n            :ARG1 (p / person\n                  :quant (m / more-than\n                        :op1 12))\n            :time (p2 / perform-01\n                  :ARG0 (h / high-school\n                        :name (n / name\n                              :op1 \"Westfield\"\n                              :op2 \"High\"))))\n      :op2 (t / take-01\n            :ARG1 (p3 / person\n                  :quant 1\n                  :ARG0-of (s / study-01))\n            :ARG3 (h2 / hospital)\n            :manner (c / condition\n                  :ARG1-of (c2 / critical-03))))",
      "# ::snt  Students said there had been no issues when Students previously practiced the song on the stage with the same number of people . \n(s / say-01\n      :ARG0 (p / person\n            :ARG0-of (s2 / study-01))\n      :ARG1 (ii / issue-02\n            :polarity -\n            :time (p2 / practice-01\n                  :ARG0 p\n                  :ARG1 (s3 / song)\n                  :location (s4 / stage)\n                  :accompanier (p3 / person\n                        :quant (n / number\n                              :ARG1-of (s5 / same-01)))\n                  :time (p4 / previous))))"
    ],
    "tree": [
      "(e / end-01\n   :ARG1 (p / perform-01\n            :ARG0 (s / school\n                     :location (s2 / state\n                                   :name (n / name\n                                            :op1 \"Indiana\")))))",
      "(e / end-01\n   :ARG1 (p / perform-01\n            :ARG1 (m / music\n                     :name (n2 / name\n                               :op1 \"American\"\n                               :op2 \"Pie\"))))",
      "(e / end-01\n   :ARG1 (p / perform-01\n            :ARG0 (s / school\n                     :ARG1 (p2 / public-02))))",
      "(e / end-01\n   :time (d / date-entity\n            :weekday (w / wednesday)))",
      "(e / end-01\n   :ARG1 (p / perform-01\n            :ARG0 (s / school\n                     :location (s2 / state\n                                   :name (n / name\n                                            :op1 \"Indiana\"))))\n   :ARG2 (t / tragedy))",
      "(a / and\n   :op1 (ii / injure-01\n            :ARG1 (p / person\n                     :quant (m / more-than\n                               :op1 12))))",
      "(a / and\n   :op1 (ii / injure-01\n            :time (p2 / perform-01\n                      :ARG0 (h / high-school\n                               :name (n / name\n                                        :op1 \"Westfield\"\n                                        :op2 \"High\")))))",
      "(a / and\n   :op2 (t / take-01\n           :ARG1 (p3 / person\n                     :quant 1)))",
      "(a / and\n   :op2 (t / take-01\n           :ARG3 (h2 / hospital)))",
      "(a / and\n   :op2 (t / take-01\n           :manner (c / condition\n                      :ARG1 (c2 / critical-03))))",
      "(s / say-01\n   :ARG1 (ii / issue-02\n             :time (p2 / practice-01\n                       :ARG0 (p / person))))",
      "(s / say-01\n   :ARG1 (ii / issue-02\n             :time (p2 / practice-01\n                       :location (s4 / stage))))"
    ],
    "smus": [
      "Public school performance ended.",
      "The riser buckled as dozens danced.",
      "Indian school performs American Pie.",
      "The Indiana school's performance ended in tragedy Wednesday.",
      "Indiana school performance",
      "The student was taken to a hospital in critical condition.",
      "More than one person was injured and one was taken.",
      "Injured in Westfield High's performance.",
      "and taken in critical condition.",
      "The student was taken.",
      "The song has previously been practiced on stage with the same number of people.",
      "No issues, said students."
    ]
  },
  {
    "instance_id": "realsumm-84",
    "summary": "<t> Manchester City have been linked with summer move for Raheem Sterling . </t> <t> Sterling has two years left on Sterling contract and is stalling on a new deal . </t> <t> Brendan Rodgers says a move to City would not be step up for Sterling . </t> <t> Indicating move will take the Manchester club 20 years to eclipse Liverpool . </t>",
    "summary_trees": [
      "# ::snt  Manchester City have been linked with summer move for Raheem Sterling . \n(l / link-01\n      :ARG1 (m / move-03\n            :ARG0 (t / team\n                  :name (n / name\n                        :op1 \"Manchester\"\n                        :op2 \"City\"))\n            :ARG1 (p / person\n                  :name (n2 / name\n                        :op1 \"Raheem\"\n                        :op2 \"Sterling\"))\n            :time (d / date-entity\n                  :season (s / summer))))",
      "# ::snt  Sterling has two years left on Sterling contract and is stalling on a new deal . \n(a / and\n      :op1 (l / leave-17\n            :ARG1 (c / contract\n                  :poss (p / person\n                        :name (n / name\n                              :op1 \"Sterling\")))\n            :ARG2 (t / temporal-quantity\n                  :quant 2\n                  :unit (y / year)))\n      :op2 (s / stall-01\n            :ARG1 p\n            :ARG2 (d / deal\n                  :ARG1-of (n2 / new-01))))",
      "# ::snt  Brendan Rodgers says a move to City would not be step up for Sterling . \n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Brendan\"\n                  :op2 \"Rodgers\"))\n      :ARG1 (s2 / step-01\n            :polarity -\n            :ARG4 (m / move-01\n                  :ARG0 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Sterling\"))\n                  :ARG2 (c / city))\n            :direction (u / up)))",
      "# ::snt  Indicating move will take the Manchester club 20 years to eclipse Liverpool . \n(t / take-10\n      :ARG0 (e / eclipse-01\n            :ARG0 (c / club\n                  :mod (t2 / team\n                        :name (n / name\n                              :op1 \"Manchester\")))\n            :ARG1 (t3 / team\n                  :name (n2 / name\n                        :op1 \"Liverpool\")))\n      :ARG1 (t4 / temporal-quantity\n            :quant 20\n            :unit (y / year))\n      :ARG2 (m / move-02\n            :ARG0-of (ii / indicate-01)))"
    ],
    "tree": [
      "(l / link-01\n   :ARG1 (m / move-03\n            :ARG0 (t / team\n                     :name (n / name\n                              :op1 \"Manchester\"\n                              :op2 \"City\"))))",
      "(l / link-01\n   :ARG1 (m / move-03\n            :time (d / date-entity\n                     :season (s / summer))))",
      "(m / move-03\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Manchester\"\n                     :op2 \"City\")))",
      "(m / move-03\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Raheem\"\n                      :op2 \"Sterling\")))",
      "(a / and\n   :op1 (l / leave-17\n           :ARG2 (t / temporal-quantity\n                    :quant 2)))",
      "(a / and\n   :op2 (s / stall-01\n           :ARG1 (p / person\n                    :name (n / name\n                             :op1 \"Sterling\"))))",
      "(a / and\n   :op2 (s / stall-01\n           :ARG2 (d / deal\n                    :ARG1 (n2 / new-01))))",
      "(t / take-10\n   :ARG0 (e / eclipse-01\n            :ARG0 (c / club\n                     :mod (t2 / team\n                              :name (n / name\n                                       :op1 \"Manchester\")))))",
      "(t / take-10\n   :ARG0 (e / eclipse-01\n            :ARG1 (t3 / team\n                      :name (n2 / name\n                                :op1 \"Liverpool\"))))"
    ],
    "smus": [
      "Manchester City move linked.",
      "The move of Raheem Sternling was linked.",
      "Link to move in summer.",
      "Manchester City",
      "Sternling's contract was left for two years.",
      "and the new deal is stalled.",
      "Sternling's contract.",
      "It will take years to eclipse Liverpool with the indicating move.",
      "eclipse liverpool"
    ]
  },
  {
    "instance_id": "realsumm-85",
    "summary": "<t> Up to one in five Chinese eateries could be selling soup using illegal meat . </t> <t> Charity says meat is often disguised on menu or only offered if requested . </t> <t> Loophole lets people bring 20 kg of meat into UK for personal consumption . </t>",
    "summary_trees": [
      "# ::snt  Up to one in five Chinese eateries could be selling soup using illegal meat . \n(p / possible-01\n      :ARG1 (s / sell-01\n            :ARG0 (r / restaurant\n                  :mod (c / country\n                        :name (n / name\n                              :op1 \"China\"))\n                  :ARG1-of (ii / include-91\n                        :ARG2 (p2 / person\n                              :ARG0-of (e / eat-01))\n                        :ARG3 (u / up-to\n                              :op1 \"1/5\")))\n            :ARG1 (s2 / soup\n                  :ARG1-of (u2 / use-01\n                        :ARG0 r\n                        :ARG2 (m / meat\n                              :ARG1-of (l / legal-02\n                                    :polarity -))))))",
      "# ::snt  Charity says meat is often disguised on menu or only offered if requested . \n(s / say-01\n      :ARG0 (o / organization\n            :name (n / name\n                  :op1 \"Charity\"))\n      :ARG1 (o2 / or\n            :op1 (d / disguise-01\n                  :ARG1 (m / meat)\n                  :location (m2 / menu)\n                  :frequency (o3 / often))\n            :op2 (o4 / offer-01\n                  :ARG1 m\n                  :mod (o5 / only)\n                  :condition (r / request-01\n                        :ARG1 m))))",
      "# ::snt  Loophole lets people bring 20 kg of meat into UK for personal consumption . \n(l / let-01\n      :ARG0 (l2 / loophole)\n      :ARG1 (b / bring-01\n            :ARG0 (p / person)\n            :ARG1 (m / meat\n                  :quant (m2 / mass-quantity\n                        :quant 20\n                        :unit (k / kilogram)))\n            :ARG2 (c / country\n                  :name (n / name\n                        :op1 \"UK\"))\n            :purpose (c2 / consume-01\n                  :ARG0 p\n                  :ARG1 m\n                  :ARG1-of (p2 / personal-02))))"
    ],
    "tree": [
      "(p / possible-01\n   :ARG1 (s / sell-01\n            :ARG1 (s2 / soup\n                      :ARG1 (u2 / use-01\n                                :ARG0 (r / restaurant)))))",
      "(p / possible-01\n   :ARG1 (s / sell-01\n            :ARG0 (r / restaurant\n                     :ARG1 (ii / include-91\n                               :ARG2 (p2 / person\n                                         :ARG0 (e / eat-01))))))",
      "(p / possible-01\n   :ARG1 (s / sell-01\n            :ARG0 (r / restaurant\n                     :ARG1 (ii / include-91\n                               :ARG3 (u / up-to\n                                        :op1 \"1/5\")))))",
      "(p / possible-01\n   :ARG1 (s / sell-01\n            :ARG1 (s2 / soup\n                      :ARG1 (u2 / use-01\n                                :ARG2 (m / meat\n                                         :ARG1 (l / legal-02\n                                                  :polarity -))))))",
      "(s / say-01\n   :ARG0 (o / organization\n            :name (n / name\n                     :op1 \"Charity\")))",
      "(s / say-01\n   :ARG1 (o2 / or\n             :op1 (d / disguise-01\n                     :ARG1 (m / meat))))",
      "(s / say-01\n   :ARG1 (o2 / or\n             :op2 (o4 / offer-01\n                      :ARG1 (m / meat))))",
      "(s / say-01\n   :ARG1 (o2 / or\n             :op1 (d / disguise-01\n                     :location (m2 / menu))))",
      "(s / say-01\n   :ARG1 (o2 / or\n             :op1 (d / disguise-01\n                     :frequency (o3 / often))))",
      "(l / let-01\n   :ARG1 (b / bring-01\n            :purpose (c2 / consume-01\n                         :ARG0 (p / person))))",
      "(l / let-01\n   :ARG1 (b / bring-01\n            :purpose (c2 / consume-01\n                         :ARG1 (m / meat))))"
    ],
    "smus": [
      "Selling soup for using illegal meat.",
      "Up to one fifth of the restaurants are.",
      "up to a fifth",
      "Chinese restaurants selling soup for using.",
      "Charity says the meat will be offered or not.",
      "meat disguised or offered.",
      "\"Or disguised as meat,\" says Charity.",
      "often disguised or offered when meat is requested.",
      "Or only offered, says.",
      "Bring for the consumption of the people.",
      "The Loophole lets the consumer bring."
    ]
  },
  {
    "instance_id": "realsumm-86",
    "summary": "<t> Two types of cereal in an Easter egg with marshmallows and brownies . </t> <t> Served at Black Milk cafe in Manchester 's Northern Quarter . ' </t> <t> Easter is less about what is used to mean , ' cafe owner Olly Taylor said . </t>",
    "summary_trees": [
      "# ::snt  Two types of cereal in an Easter egg with marshmallows and brownies . \n(c / cereal\n      :mod (t / type\n            :quant 2)\n      :location (e / egg\n            :mod (f / festival\n                  :name (n / name\n                        :op1 \"Easter\")))\n      :accompanier (a / and\n            :op1 (m / marshmallow)\n            :op2 (b / brownie)))",
      "# ::snt  Served at Black Milk cafe in Manchester 's Northern Quarter . ' \n(s / serve-01\n      :location (c / cafe\n            :name (n / name\n                  :op1 \"Black\"\n                  :op2 \"Milk\")\n            :location (q / quarter\n                  :name (n2 / name\n                        :op1 \"Northern\"\n                        :op2 \"Quarter\")\n                  :part-of (c2 / city\n                        :name (n3 / name\n                              :op1 \"Manchester\")))))",
      "# ::snt  Easter is less about what is used to mean , ' cafe owner Olly Taylor said . \n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Olly\"\n                  :op2 \"Taylor\")\n            :ARG0-of (o / own-01\n                  :ARG1 (c / cafe)))\n      :ARG1 (c2 / concern-02\n            :ARG0 (f / festival\n                  :name (n2 / name\n                        :op1 \"Easter\"))\n            :ARG1 (t / thing\n                  :ARG2-of (m / mean-01\n                        :ARG1 f\n                        :time (u / use-03)))\n            :mod (l / less)))"
    ],
    "tree": [
      "(c / cereal\n   :mod (t / type\n           :quant 2))",
      "(c / cereal\n   :location (e / egg\n                :mod (f / festival\n                        :name (n / name\n                                 :op1 \"Easter\"))))",
      "(c / cereal\n   :mod (t / type\n           :quant 2)\n   :location (e / egg\n                :mod (f / festival\n                        :name (n / name\n                                 :op1 \"Easter\"))))",
      "(c / cereal\n   :mod (t / type\n           :quant 2)\n   :accompanier (m / marshmallow))",
      "(c / cereal\n   :mod (t / type\n           :quant 2)\n   :accompanier (b / brownie))",
      "(s / serve-01\n   :location (c / cafe\n                :name (n / name\n                         :op1 \"Black\"\n                         :op2 \"Milk\")))",
      "(s / serve-01\n   :location (c / cafe\n                :location (q / quarter\n                             :name (n2 / name\n                                       :op1 \"Northern\"\n                                       :op2 \"Quarter\"))))",
      "(s / serve-01\n   :location (c / cafe\n                :location (q / quarter\n                             :part (c2 / city\n                                       :name (n3 / name\n                                                 :op1 \"Manchester\")))))",
      "(c / cafe\n   :name (n / name\n            :op1 \"Black\"\n            :op2 \"Milk\"))",
      "(c / cafe\n   :location (q / quarter\n                :name (n2 / name\n                          :op1 \"Northern\"\n                          :op2 \"Quarter\")))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Olly\"\n                     :op2 \"Taylor\")))",
      "(s / say-01\n   :ARG1 (c2 / concern-02\n             :ARG0 (f / festival\n                      :name (n2 / name\n                                :op1 \"Easter\"))))",
      "(s / say-01\n   :ARG1 (c2 / concern-02\n             :ARG1 (t / thing\n                      :ARG2 (m / mean-01\n                               :ARG1 (f / festival :name (n2 / name :op1 \"Easter\"))))))",
      "(s / say-01\n   :ARG1 (c2 / concern-02\n             :mod (l / less)))"
    ],
    "smus": [
      "Marshmallows and brownies.",
      "cereal in an Easter egg with brownies",
      "Easter eggs",
      "There are two types of cereal in an Easter egg with brownies.",
      "Two types of cereal with brownies.",
      "North Quarter, Manchester",
      "Black Milk Cafe",
      "Serving in a cafe in Manchester Quarter.",
      "The cafe is in Northern Quarter.",
      "Manchester Quarter",
      "The owner of the cafe said it was about Easter.",
      "As for what Easter does mean less.",
      "As for what used to mean, said.",
      "\"It's about Easter,\" said Olly Taylor."
    ]
  },
  {
    "instance_id": "realsumm-87",
    "summary": "<t> The European Union will accuse Google of illegally abusing Union supremacy . </t> <t> Union could fine Google more than \u00a3 4 billion - 10 per cent of Union annual revenue . </t> <t> Brussels to say Union uses search engine to divert traffic to Union own services . </t> <t> Google boasts a 90 per cent share in Europe 's search engine market . </t>",
    "summary_trees": [
      "# ::snt  The European Union will accuse Google of illegally abusing Union supremacy . \n(a / accuse-01\n      :ARG0 (o / organization\n            :name (n / name\n                  :op1 \"European\"\n                  :op2 \"Union\"))\n      :ARG1 (c / company\n            :name (n2 / name\n                  :op1 \"Google\"))\n      :ARG2 (a2 / abuse-02\n            :ARG0 c\n            :ARG1 (s / supremacy\n                  :poss o)\n            :manner (l / law\n                  :polarity -)))",
      "# ::snt  Union could fine Google more than \u00a3 4 billion - 10 per cent of Union annual revenue . \n(p / possible-01\n      :ARG1 (f / fine-01\n            :ARG0 (c / company\n                  :name (n / name\n                        :op1 \"Union\"))\n            :ARG1 (m / more-than\n                  :op1 (m2 / monetary-quantity\n                        :quant 4000000000\n                        :unit (p2 / pound)\n                        :ARG1-of (m3 / mean-01\n                              :ARG2 (p3 / percentage-entity\n                                    :value 10\n                                    :ARG3-of (ii / include-91\n                                          :ARG2 (r / revenue\n                                                :poss c\n                                                :frequency (r2 / rate-entity-91\n                                                      :ARG3 (t / temporal-quantity\n                                                            :quant 1\n                                                            :unit (y / year)))))))))\n            :ARG2 (c2 / company\n                  :name (n2 / name\n                        :op1 \"Google\"))))",
      "# ::snt  Brussels to say Union uses search engine to divert traffic to Union own services . \n(s / say-01\n      :ARG0 (c / city\n            :name (n / name\n                  :op1 \"Brussels\"))\n      :ARG1 (u / use-01\n            :ARG0 (o / organization\n                  :name (n2 / name\n                        :op1 \"Union\"))\n            :ARG1 (s2 / search-engine)\n            :ARG2 (d / divert-01\n                  :ARG0 o\n                  :ARG1 (t / traffic)\n                  :ARG3 (s3 / service\n                        :poss o))))",
      "# ::snt  Google boasts a 90 per cent share in Europe 's search engine market . \n(b / boast-01\n      :ARG0 (c / company\n            :name (n / name\n                  :op1 \"Google\"))\n      :ARG1 (s / share-01\n            :ARG1 (m / market\n                  :mod (s2 / search-engine)\n                  :location (c2 / continent\n                        :name (n2 / name\n                              :op1 \"Europe\")))\n            :ARG2 c\n            :quant (p / percentage-entity\n                  :value 90)))"
    ],
    "tree": [
      "(a / accuse-01\n   :ARG0 (o / organization\n            :name (n / name\n                     :op1 \"European\"\n                     :op2 \"Union\")))",
      "(a / accuse-01\n   :ARG2 (a2 / abuse-02\n             :ARG0 (c / company :name (n2 / name :op1 \"Google\"))))",
      "(a / accuse-01\n   :ARG2 (a2 / abuse-02\n             :ARG1 (s / supremacy\n                      :poss (o / organization :name (n / name :op1 \"European\" :op2 \"Union\")))))",
      "(a / accuse-01\n   :ARG2 (a2 / abuse-02\n             :manner (l / law\n                        :polarity -)))",
      "(p / possible-01\n   :ARG1 (f / fine-01\n            :ARG0 (c / company\n                     :name (n / name\n                              :op1 \"Union\"))))",
      "(p / possible-01\n   :ARG1 (f / fine-01\n            :ARG1 (m / more-than\n                     :op1 (m2 / monetary-quantity\n                              :unit (p2 / pound)))))",
      "(p / possible-01\n   :ARG1 (f / fine-01\n            :ARG1 (m / more-than\n                     :op1 (m2 / monetary-quantity\n                              :ARG1 (m3 / mean-01\n                                        :ARG2 (p3 / percentage-entity\n                                                  :value 10))))))",
      "(s / say-01\n   :ARG0 (c / city\n            :name (n / name\n                     :op1 \"Brussels\")))",
      "(s / say-01\n   :ARG1 (u / use-01\n            :ARG0 (o / organization\n                     :name (n2 / name\n                               :op1 \"Union\"))))",
      "(s / say-01\n   :ARG1 (u / use-01\n            :ARG1 (s2 / search-engine)))",
      "(s / say-01\n   :ARG1 (u / use-01\n            :ARG2 (d / divert-01\n                     :ARG0 (o / organization :name (n2 / name :op1 \"Union\")))))",
      "(s / say-01\n   :ARG1 (u / use-01\n            :ARG2 (d / divert-01\n                     :ARG1 (t / traffic))))",
      "(b / boast-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Google\")))",
      "(b / boast-01\n   :ARG1 (s / share-01\n            :ARG1 (m / market\n                     :mod (s2 / search-engine))))",
      "(b / boast-01\n   :ARG1 (s / share-01\n            :ARG2 (c / company :name (n / name :op1 \"Google\"))))",
      "(b / boast-01\n   :ARG1 (s / share-01\n            :quant (p / percentage-entity\n                      :value 90)))",
      "(b / boast-01\n   :ARG1 (s / share-01\n            :ARG1 (m / market\n                     :location (c2 / continent\n                                   :name (n2 / name\n                                             :op1 \"Europe\")))))"
    ],
    "smus": [
      "accuse Google of abusing.",
      "The European Union will accuse Google of abusing.",
      "accuse google.",
      "accuse of illegal abuse.",
      "% of annual revenue =",
      "More than 1% of annual revenue will be fined.",
      "10% =",
      "Says uses to divert Union services.",
      "Say the Union uses.",
      "The search engine uses to divert Union services.",
      "Union",
      "Union uses it to divert.",
      "Google boasts.",
      "boasts of a market share in Europe.",
      "90% share",
      "boasts a share of the search engine market.",
      "Google boasts of its share."
    ]
  },
  {
    "instance_id": "realsumm-88",
    "summary": "<t> Phil Smith , 25 , forgot Smith keys and scaled fence to try to get in Smith flat . </t> <t> But teaching assistant fell and hit Smith head while climbing through window . </t> <t> Smith fractured Smith skull and suffered a bleed on the brain and a blood clot . </t> <t> Parents paid tribute to ' lovely son ' who worked at special needs school . </t>",
    "summary_trees": [
      "# ::snt  Phil Smith , 25 , forgot Smith keys and scaled fence to try to get in Smith flat . \n(f / forget-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Phil\"\n                  :op2 \"Smith\")\n            :age (t / temporal-quantity\n                  :quant 25\n                  :unit (y / year)))\n      :ARG1 (a / and\n            :op1 (k / key\n                  :poss p)\n            :op2 (s / scale-01\n                  :ARG0 p\n                  :ARG1 (f2 / fence)\n                  :purpose (t2 / try-01\n                        :ARG0 p\n                        :ARG1 (g / get-05\n                              :ARG1 p\n                              :ARG2 (f3 / flat\n                                    :poss p))))))",
      "# ::snt  But teaching assistant fell and hit Smith head while climbing through window . \n(c / contrast-01\n      :ARG2 (a / and\n            :op1 (f / fall-01\n                  :ARG1 (p / person\n                        :ARG0-of (a2 / assist-01\n                              :ARG1 (t / teach-01))))\n            :op2 (h / hit-01\n                  :ARG0 p\n                  :ARG1 (h2 / head\n                        :part-of (p2 / person\n                              :name (n / name\n                                    :op1 \"Smith\"))))\n            :time (c2 / climb-01\n                  :ARG0 p\n                  :path (t2 / through\n                        :op1 (w / window)))))",
      "# ::snt  Smith fractured Smith skull and suffered a bleed on the brain and a blood clot . \n(a / and\n      :op1 (f / fracture-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Smith\")\n                  :part (s / skull))\n            :ARG1 s)\n      :op2 (s2 / suffer-01\n            :ARG0 p\n            :ARG1 (a2 / and\n                  :op1 (b / bleed-01\n                        :ARG1 s)\n                  :op2 (c / clot\n                        :mod (b2 / blood)))))",
      "# ::snt  Parents paid tribute to ' lovely son ' who worked at special needs school . \n(p / pay-01\n      :ARG0 (p2 / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG2 (p3 / parent)))\n      :ARG1 (t / tribute)\n      :ARG2 (p4 / person\n            :ARG0-of (h2 / have-rel-role-91\n                  :ARG2 (s / son))\n            :mod (l / lovely)\n            :ARG0-of (w / work-01\n                  :ARG2 (s2 / school\n                        :ARG1-of (n / need-01\n                              :ARG1-of (s3 / special-02))))))"
    ],
    "tree": [
      "(f / forget-01\n   :ARG0 (p / person\n            :age (t / temporal-quantity\n                    :quant 25)))",
      "(c / contrast-01\n   :ARG2 (f / fall-01\n            :ARG1 (p / person\n                     :ARG0 (a2 / assist-01\n                               :ARG1 (t / teach-01)))))",
      "(c / contrast-01\n   :ARG2 (h / hit-01\n            :ARG0 (p / person\n                     :ARG0 (a2 / assist-01\n                               :ARG1 (t / teach-01)))))",
      "(c / contrast-01\n   :ARG2 (c2 / climb-01\n             :ARG0 (p / person\n                      :ARG0 (a2 / assist-01\n                                :ARG1 (t / teach-01)))))",
      "(c / contrast-01\n   :ARG2 (h / hit-01\n            :ARG1 (h2 / head\n                      :part (p2 / person\n                                :name (n / name\n                                         :op1 \"Smith\")))))",
      "(c / contrast-01\n   :ARG2 (c2 / climb-01\n             :path (t2 / through\n                       :op1 (w / window))))",
      "(a / and\n   :op1 (f / fracture-01\n           :ARG0 (p / person\n                    :name (n / name\n                             :op1 \"Smith\"))))",
      "(a / and\n   :op1 (f / fracture-01\n           :ARG1 (s / skull)))",
      "(a / and\n   :op1 (f / fracture-01\n           :ARG0 (p / person\n                    :part (s / skull))))",
      "(a / and\n   :op2 (s2 / suffer-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Smith\"))))",
      "(a / and\n   :op2 (s2 / suffer-01\n            :ARG1 (b / bleed-01\n                     :ARG1 (s / skull))))",
      "(p / pay-01\n   :ARG0 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG2 (p3 / parent))))",
      "(p / pay-01\n   :ARG2 (p4 / person\n             :ARG0 (h2 / have-rel-role-91\n                       :ARG2 (s / son))))",
      "(p / pay-01\n   :ARG2 (p4 / person\n             :mod (l / lovely)))",
      "(p / pay-01\n   :ARG2 (p4 / person\n             :ARG0 (w / work-01\n                      :ARG2 (s2 / school\n                                :ARG1 (n / need-01\n                                         :ARG1 (s3 / special-02))))))",
      "(p / pay-01\n   :ARG0 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG2 (p3 / parent)))\n   :ARG2 (p4 / person\n             :ARG0 (h2 / have-rel-role-91\n                       :ARG2 (s / son))))"
    ],
    "smus": [
      "Scaled to try and get Phil Smith flat.",
      "And Smith's head hit.",
      "Teaching assistant fell and hit Smith's head while climbing through the window.",
      "And the teaching assistant fell.",
      "and climbing through the window.",
      "Teaching assistant.",
      "and suffered from a blood clot.",
      "The skull fractured and suffered bleed.",
      "Smith fractured his skull and suffered.",
      "and the skull suffered.",
      "Smith fractured.",
      "Lovely son.",
      "Parents paid the son.",
      "Parents paid the person who worked in a special needs school.",
      "Special needs schools.",
      "Parents paid tribute."
    ]
  },
  {
    "instance_id": "realsumm-89",
    "summary": "<t> Emmanuel Adebayor 's current Tottenham contract runs out in 2016 . </t> <t> The striker is unwilling to take anything less than striker current \u00a3 5.2million salary before accepting a move out of White Hart Lane . </t> <t> Togolese forward has made just nine league starts this season . </t>",
    "summary_trees": [
      "# ::snt  Emmanuel Adebayor 's current Tottenham contract runs out in 2016 . \n(r / run-out-05\n      :ARG1 (c / contract\n            :poss (p / person\n                  :name (n / name\n                        :op1 \"Emmanuel\"\n                        :op2 \"Adebayor\"))\n            :time (c2 / current)\n            :mod (t / team\n                  :name (n2 / name\n                        :op1 \"Tottenham\")))\n      :time (d / date-entity\n            :year 2016))",
      "# ::snt  The striker is unwilling to take anything less than striker current \u00a3 5.2million salary before accepting a move out of White Hart Lane . \n(w / will-02\n      :polarity -\n      :ARG0 (p / person\n            :ARG0-of (s / strike-02))\n      :ARG1 (t / take-01\n            :ARG0 p\n            :ARG1 (a / anything\n                  :ARG1-of (h / have-quant-91\n                        :ARG3 (l / less)\n                        :ARG4 (s2 / salary\n                              :mod (m / monetary-quantity\n                                    :quant 5500000\n                                    :unit (p2 / pound))\n                              :poss p\n                              :time (c / current)))))\n      :time (b / before\n            :op1 (a2 / accept-01\n                  :ARG0 p\n                  :ARG1 (m2 / move-01\n                        :ARG0 p\n                        :ARG2 (r / road\n                              :name (n / name\n                                    :op1 \"White\"\n                                    :op2 \"Hart\"\n                                    :op3 \"Lane\"))))))",
      "# ::snt  Togolese forward has made just nine league starts this season . \n(s / start-01\n      :ARG0 (f / forward\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"Togolese\")))\n      :mod (l / league)\n      :quant (j / just\n            :op1 9)\n      :time (s2 / season\n            :mod (t / this)))"
    ],
    "tree": [
      "(r / run-out-05\n   :ARG1 (c / contract\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Emmanuel\"\n                              :op2 \"Adebayor\"))))",
      "(r / run-out-05\n   :ARG1 (c / contract\n            :time (c2 / current)))",
      "(r / run-out-05\n   :ARG1 (c / contract\n            :mod (t / team\n                    :name (n2 / name\n                              :op1 \"Tottenham\"))))",
      "(r / run-out-05\n   :time (d / date-entity\n            :year 2016))",
      "(r / run-out-05\n   :ARG1 (c / contract\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Emmanuel\"\n                              :op2 \"Adebayor\")))\n   :time (d / date-entity\n            :year 2016))",
      "(s / start-01\n   :ARG0 (f / forward\n            :mod (c / country\n                    :name (n / name\n                             :op1 \"Togolese\"))))",
      "(s / start-01\n   :quant (j / just\n             :op1 9))",
      "(s / start-01\n   :time (s2 / season\n             :mod (t / this)))",
      "(s / start-01\n   :ARG0 (f / forward\n            :mod (c / country\n                    :name (n / name\n                             :op1 \"Togolese\")))\n   :mod (l / league))",
      "(s / start-01\n   :ARG0 (f / forward\n            :mod (c / country\n                    :name (n / name\n                             :op1 \"Togolese\")))\n   :quant (j / just\n             :op1 9))"
    ],
    "smus": [
      "Emmanuel Adebayor's contract",
      "Current Tottenham contract",
      "Current contract runs out in 2016.",
      "Run out in 2016.",
      "The contract at Tottenham is running out.",
      "This season starts.",
      "The Togolese forward just starts with 9.",
      "The Togolese forward starts just 9 league starts this season.",
      "Just 9 league starts.",
      "Togolese"
    ]
  },
  {
    "instance_id": "realsumm-90",
    "summary": "<t> John Helm was commentating on the game the day the fire broke out . </t> <t> Helm gives Helm insight into what cause the blaze 30 years ago . ' </t> <t> From everything I have been told there is n\u2019t a jot of evidence to suggest the blaze was caused deliberately , ' says Helm . </t>",
    "summary_trees": [
      "# ::snt  John Helm was commentating on the game the day the fire broke out . \n(c / commentate-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"John\"\n                  :op2 \"Helm\"))\n      :ARG3 (g / game)\n      :time (b / break-out-30\n            :ARG1 (f / fire)))",
      "# ::snt  Helm gives Helm insight into what cause the blaze 30 years ago . ' \n(g / give-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Helm\"))\n      :ARG1 (ii / insight\n            :topic (t / thing\n                  :ARG0-of (c / cause-01\n                        :ARG1 (b / blaze-01\n                              :time (b2 / before\n                                    :op1 (n2 / now)\n                                    :quant (t2 / temporal-quantity\n                                          :quant 30\n                                          :unit (y / year)))))))\n      :ARG2 p)",
      "# ::snt  From everything I have been told there is n\u2019t a jot of evidence to suggest the blaze was caused deliberately , ' says Helm . \n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Helm\"))\n      :ARG1 (e / evidence-01\n            :polarity -\n            :quant (j / jot)\n            :ARG0-of (s2 / suggest-01\n                  :ARG1 (c / cause-01\n                        :ARG1 (b / blaze-01)\n                        :manner (d / deliberate)))\n            :source (e2 / everything\n                  :ARG1-of (t / tell-01\n                        :ARG2 (ii / i)))))"
    ],
    "tree": [
      "(c / commentate-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\"\n                     :op2 \"Helm\")))",
      "(c / commentate-01\n   :time (b / break-out-30\n            :ARG1 (f / fire)))",
      "(c / commentate-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\"\n                     :op2 \"Helm\"))\n   :ARG3 (g / game))",
      "(c / commentate-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\"\n                     :op2 \"Helm\"))\n   :time (b / break-out-30\n            :ARG1 (f / fire)))",
      "(g / give-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Helm\")))",
      "(g / give-01\n   :ARG1 (ii / insight\n             :topic (t / thing\n                       :ARG0 (c / cause-01\n                                :ARG1 (b / blaze-01\n                                         :time (b2 / before\n                                                   :op1 (n2 / now)))))))",
      "(g / give-01\n   :ARG1 (ii / insight\n             :topic (t / thing\n                       :ARG0 (c / cause-01\n                                :ARG1 (b / blaze-01\n                                         :time (b2 / before\n                                                   :quant (t2 / temporal-quantity\n                                                              :quant 30)))))))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Helm\")))",
      "(s / say-01\n   :ARG1 (e / evidence-01\n            :source (e2 / everything\n                        :ARG1 (t / tell-01\n                                 :ARG2 (ii / i)))))"
    ],
    "smus": [
      "John Helm",
      "John Helm was commentating when the fire broke out.",
      "John Helm commentating on the game.",
      "Commentating as the fire broke out.",
      "The cause of the blaze was years earlier.",
      "gives insight into the cause of the blaze years earlier.",
      "Years ago.",
      "evi from everythiy I've been told.",
      "evi jot, says Helm."
    ]
  },
  {
    "instance_id": "realsumm-91",
    "summary": "<t> Rory McIlroy faced with Fifty Shades of Grey 's Jamie Dornan . </t> <t> McIlroy and Dornan took part in the first Circular Soccer Showdown of 2015 . </t> <t> McIlroy finished strongly to finish an impressive fourth at the Masters . </t> <t> READ : It wo n't be too long before McIlroy wins a Masters . </t>",
    "summary_trees": [
      "# ::snt  Rory McIlroy faced with Fifty Shades of Grey 's Jamie Dornan . \n(f / face-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Rory\"\n                  :op2 \"McIlroy\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Jamie\"\n                  :op2 \"Dornan\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (b / book\n                        :name (n3 / name\n                              :op1 \"Fifty\"\n                              :op2 \" Shades\"\n                              :op3 \"of\"\n                              :op4 \"Grey\")))))",
      "# ::snt  McIlroy and Dornan took part in the first Circular Soccer Showdown of 2015 . \n(p / participate-01\n      :ARG0 (a / and\n            :op1 (p2 / person\n                  :name (n / name\n                        :op1 \"McIlroy\"))\n            :op2 (p3 / person\n                  :name (n2 / name\n                        :op1 \"Dornan\")))\n      :ARG1 (g / game\n            :name (n3 / name\n                  :op1 \"Circular\"\n                  :op2 \"Soccer\"\n                  :op3 \"Showdown\")\n            :ord (o / ordinal-entity\n                  :value 1)\n            :time (d / date-entity\n                  :year 2015)))",
      "# ::snt  McIlroy finished strongly to finish an impressive fourth at the Masters . \n(f / finish-07\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"McIlroy\"))\n      :ARG1-of (s / strong-02)\n      :purpose (f2 / finish-07\n            :ARG0 p\n            :ARG2 (f3 / fourth\n                  :ARG0-of (ii / impress-01))\n            :location (g / game\n                  :name (n2 / name\n                        :op1 \"Masters\"))))",
      "# ::snt  READ : It wo n't be too long before McIlroy wins a Masters . \n(r / read-01\n      :mode imperative\n      :ARG0 (y / you)\n      :ARG1 (b / before\n            :op1 (w / win-01\n                  :ARG0 (p / person\n                        :name (n / name\n                              :op1 \"McIlroy\"))\n                  :ARG1 (g / game\n                        :name (n2 / name\n                              :op1 \"Masters\")))\n            :ARG1-of (l / long-03\n                  :polarity -\n                  :ARG2-of (h / have-degree-91\n                        :ARG1 b\n                        :ARG3 (t / too)))))"
    ],
    "tree": [
      "(f / face-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Jamie\"\n                       :op2 \"Dornan\")))",
      "(f / face-01\n   :ARG1 (p2 / person\n             :ARG0 (h / have-org-role-91\n                      :ARG1 (b / book\n                               :name (n3 / name\n                                         :op1 \"Fifty\"\n                                         :op2 \" Shades\"\n                                         :op3 \"of\"\n                                         :op4 \"Grey\")))))",
      "(f / face-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rory\"\n                     :op2 \"McIlroy\"))\n   :ARG1 (p2 / person\n             :ARG0 (h / have-org-role-91\n                      :ARG1 (b / book\n                               :name (n3 / name\n                                         :op1 \"Fifty\"\n                                         :op2 \" Shades\"\n                                         :op3 \"of\"\n                                         :op4 \"Grey\")))))",
      "(p / participate-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"Dornan\")))",
      "(p / participate-01\n   :ARG1 (g / game\n            :name (n3 / name\n                      :op1 \"Circular\"\n                      :op2 \"Soccer\"\n                      :op3 \"Showdown\")))",
      "(p / participate-01\n   :ARG1 (g / game\n            :ord (o / ordinal-entity\n                    :value 1)))",
      "(p / participate-01\n   :ARG1 (g / game\n            :time (d / date-entity\n                     :year 2015)))",
      "(f / finish-07\n   :purpose (f2 / finish-07\n                :ARG0 (p / person :name (n / name :op1 \"McIlroy\"))))",
      "(f / finish-07\n   :purpose (f2 / finish-07\n                :location (g / game\n                             :name (n2 / name\n                                       :op1 \"Masters\"))))",
      "(f / finish-07\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"McIlroy\"))\n   :ARG1 (s / strong-02))",
      "(r / read-01\n   :ARG1 (b / before\n            :op1 (w / win-01\n                    :ARG1 (g / game\n                             :name (n2 / name\n                                       :op1 \"Masters\")))))"
    ],
    "smus": [
      "fifty shades of grey",
      "Jamie Dornan faced.",
      "Jamie Dornan, fifty shades of grey",
      "Dornan was in the Circular Soccer Showdown.",
      "And McIlroy.",
      "Participation in the first game",
      "Circular Soccer Showdown",
      "Finish strong to finish in the Masters.",
      "Masters",
      "Finish to finish fourth in impressive.",
      "Before McIlroy wins."
    ]
  },
  {
    "instance_id": "realsumm-92",
    "summary": "<t> Chris Christie appeared on The Tonight Show and called out Jimmy Fallon for Fallon weight jokes about the governor . </t> <t> Later in the program Fallon hoarded a pint of ice cream Fallon brought out for the two to share . </t> <t> When asked if Christie would run for president , Christie said ; ' I \u2019ve got a day job which keeps me busy ' . </t>",
    "summary_trees": [
      "# ::snt  Chris Christie appeared on The Tonight Show and called out Jimmy Fallon for Fallon weight jokes about the governor . \n(a / and\n      :op1 (a2 / appear-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Chris\"\n                        :op2 \"Christie\"))\n            :location (b / broadcast-program\n                  :name (n2 / name\n                        :op1 \"The\"\n                        :op2 \"Tonight\"\n                        :op3 \"Show\")))\n      :op2 (c / call-out-15\n            :ARG0 p\n            :ARG1 (p2 / person\n                  :name (n3 / name\n                        :op1 \"Jimmy\"\n                        :op2 \"Fallon\"))\n            :ARG2 (j / joke-01\n                  :ARG0 p2\n                  :ARG2 (p3 / person\n                        :ARG0-of (h / have-org-role-91\n                              :ARG2 (g / governor)))\n                  :topic (w / weight))))",
      "# ::snt  Later in the program Fallon hoarded a pint of ice cream Fallon brought out for the two to share . \n(h / hoard-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Fallon\"))\n      :ARG1 (ii / ice-cream\n            :quant (p2 / pint)\n            :ARG1-of (b / bring-01\n                  :ARG0 p\n                  :ARG2 (o / out)\n                  :purpose (s / share-01\n                        :ARG0 (p3 / person\n                              :quant 2)\n                        :ARG1 ii)))\n      :time (l / late\n            :part-of (p4 / program)\n            :degree (s2 / somewhat)))",
      "# ::snt  When asked if Christie would run for president , Christie said ; ' I \u2019ve got a day job which keeps me busy ' . \n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Christie\"))\n      :ARG1 (h / have-03\n            :ARG0 p\n            :ARG1 (j / job\n                  :mod (d / day)\n                  :ARG0-of (k / keep-02\n                        :ARG1 (b / busy-01\n                              :ARG1 p))))\n      :time (a / ask-01\n            :ARG1 (t / truth-value\n                  :polarity-of (r / run-02\n                        :ARG0 p\n                        :ARG1 (p2 / person\n                              :ARG0-of (h2 / have-org-role-91\n                                    :ARG2 (p3 / president)))))\n            :ARG2 p))"
    ],
    "tree": [
      "(a / and\n   :op1 (a2 / appear-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Chris\"\n                              :op2 \"Christie\"))))",
      "(a / and\n   :op1 (a2 / appear-01\n            :location (b / broadcast-program\n                         :name (n2 / name\n                                   :op1 \"The\"\n                                   :op2 \"Tonight\"\n                                   :op3 \"Show\"))))",
      "(a / and\n   :op2 (c / call-out-15\n           :ARG0 (p / person\n                    :name (n / name\n                             :op1 \"Chris\"\n                             :op2 \"Christie\"))))",
      "(a / and\n   :op2 (c / call-out-15\n           :ARG1 (p2 / person\n                     :name (n3 / name\n                               :op1 \"Jimmy\"\n                               :op2 \"Fallon\"))))",
      "(a / and\n   :op2 (c / call-out-15\n           :ARG2 (j / joke-01\n                    :ARG0 (p2 / person :name (n3 / name :op1 \"Jimmy\" :op2 \"Fallon\")))))",
      "(h / hoard-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Fallon\")))",
      "(h / hoard-01\n   :ARG1 (ii / ice-cream\n             :quant (p2 / pint)))",
      "(h / hoard-01\n   :ARG1 (ii / ice-cream\n             :ARG1 (b / bring-01\n                      :ARG0 (p / person :name (n / name :op1 \"Fallon\")))))",
      "(h / hoard-01\n   :ARG1 (ii / ice-cream\n             :ARG1 (b / bring-01\n                      :ARG2 (o / out))))",
      "(h / hoard-01\n   :ARG1 (ii / ice-cream\n             :ARG1 (b / bring-01\n                      :purpose (s / share-01\n                                  :ARG0 (p3 / person\n                                            :quant 2)))))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Christie\")))",
      "(s / say-01\n   :ARG1 (h / have-03\n            :ARG0 (p / person :name (n / name :op1 \"Christie\"))))",
      "(s / say-01\n   :ARG1 (h / have-03\n            :ARG1 (j / job\n                     :mod (d / day))))",
      "(s / say-01\n   :time (a / ask-01\n            :ARG1 (t / truth-value\n                     :polarity (r / run-02\n                                  :ARG0 (p / person :name (n / name :op1 \"Christie\"))))))"
    ],
    "smus": [
      "appeared on \"The Tonight Show\".",
      "Chris Christie appeared and called out Jimmy Fallon's jokes.",
      "And called out Jimmy Fallon.",
      "Chris Christie appeared.",
      "And called out the jokes about the governor.",
      "Fallon hoarded the ice-cream brought out late in the program.",
      "Fallon hoarded somewhat late.",
      "hoarded a pint of ice-cream.",
      "Quite late, ice-cream brought to share hoarded.",
      "ice-cream brought to share.",
      "Christie said --",
      "Christie said \"I have a day job\" when asked if she didn't run.",
      "Christie said \"I have a day job\" when asked if the president didn't run.",
      "It's a day job that keeps Christie busy."
    ]
  },
  {
    "instance_id": "realsumm-93",
    "summary": "<t> Qantas ' on time rating slipped to 75th out of the 80 airlines using Heathrow . </t> <t> The airline could loose airlines eight landing strips at the popular airport . </t> <t> airlines are also facing a fine in excess of $ 38,000 for every flight that 's late . </t> <t> Qantas blamed air congestion at Heathrow and Dubai airports . </t>",
    "summary_trees": [
      "# ::snt  Qantas ' on time rating slipped to 75th out of the 80 airlines using Heathrow . \n(s / slip-01\n      :ARG1 (r / rate-01\n            :ARG1 (c / company\n                  :name (n / name\n                        :op1 \"Qantas\"))\n            :ARG3 (o / on-time))\n      :ARG4 (r2 / rank-01\n            :ARG2 75\n            :ARG1 c\n            :ARG5 (a / airline\n                  :quant 80\n                  :ARG0-of (u / use-01\n                        :ARG1 (a2 / airport\n                              :name (n2 / name\n                                    :op1 \"Heathrow\"))))))",
      "# ::snt  The airline could loose airlines eight landing strips at the popular airport . \n(p / possible-01\n      :ARG1 (l / lose-02\n            :ARG0 (a / airline)\n            :ARG1 (s / strip\n                  :quant 8\n                  :purpose (l2 / land-01)\n                  :location (a2 / airport\n                        :ARG1-of (p2 / popular-02)))\n            :ARG2 (a3 / airline)))",
      "# ::snt  airlines are also facing a fine in excess of $ 38,000 for every flight that 's late . \n(f / face-01\n      :ARG0 (a / airline)\n      :ARG1 (f2 / fine-01\n            :ARG1 (ii / in-excess-of\n                  :op1 (m / monetary-quantity\n                        :quant 38000\n                        :unit (d / dollar)))\n            :ARG3 (f3 / fly-01\n                  :mod (e / every)\n                  :ARG1-of (l / late-02)))\n      :mod (a2 / also))",
      "# ::snt  Qantas blamed air congestion at Heathrow and Dubai airports . \n(b / blame-01\n      :ARG0 (c / company\n            :name (n / name\n                  :op1 \"Qantas\"))\n      :ARG1 (c2 / congest-01\n            :ARG1 (a / air)\n            :location (a2 / and\n                  :op1 (a3 / airport\n                        :name (n2 / name\n                              :op1 \"Heathrow\"))\n                  :op2 (a4 / airport\n                        :name (n3 / name\n                              :op1 \"Dubai\")))))"
    ],
    "tree": [
      "(s / slip-01\n   :ARG1 (r / rate-01\n            :ARG3 (o / on-time)))",
      "(s / slip-01\n   :ARG4 (r2 / rank-01\n             :ARG2 75))",
      "(s / slip-01\n   :ARG4 (r2 / rank-01\n             :ARG1 (c / company\n                      :name (n / name\n                               :op1 \"Qantas\"))))",
      "(s / slip-01\n   :ARG4 (r2 / rank-01\n             :ARG5 (a / airline\n                      :quant 80)))",
      "(p / possible-01\n   :ARG1 (l / lose-02\n            :ARG0 (a / airline)))",
      "(p / possible-01\n   :ARG1 (l / lose-02\n            :ARG1 (s / strip\n                     :quant 8)))",
      "(p / possible-01\n   :ARG1 (l / lose-02\n            :ARG2 (a3 / airline)))",
      "(p / possible-01\n   :ARG1 (l / lose-02\n            :ARG1 (s / strip\n                     :purpose (l2 / land-01))))",
      "(p / possible-01\n   :ARG1 (l / lose-02\n            :ARG1 (s / strip\n                     :location (a2 / airport\n                                   :ARG1 (p2 / popular-02)))))",
      "(f / face-01\n   :ARG1 (f2 / fine-01\n             :ARG1 (ii / in-excess-of\n                       :op1 (m / monetary-quantity\n                               :quant 38000))))",
      "(f / face-01\n   :ARG1 (f2 / fine-01\n             :ARG3 (f3 / fly-01\n                       :mod (e / every))))",
      "(f / face-01\n   :ARG1 (f2 / fine-01\n             :ARG3 (f3 / fly-01\n                       :ARG1 (l / late-02))))",
      "(f / face-01\n   :ARG1 (f2 / fine-01\n             :ARG1 (ii / in-excess-of\n                       :op1 (m / monetary-quantity\n                               :unit (d / dollar)))))",
      "(f / face-01\n   :ARG0 (a / airline)\n   :ARG1 (f2 / fine-01\n             :ARG1 (ii / in-excess-of\n                       :op1 (m / monetary-quantity\n                               :quant 38000))))",
      "(b / blame-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Qantas\")))",
      "(b / blame-01\n   :ARG1 (c2 / congest-01\n             :ARG1 (a / air)))",
      "(b / blame-01\n   :ARG1 (c2 / congest-01\n             :location (a3 / airport\n                           :name (n2 / name\n                                     :op1 \"Heathrow\"))))",
      "(b / blame-01\n   :ARG1 (c2 / congest-01\n             :location (a4 / airport\n                           :name (n3 / name\n                                     :op1 \"Dubai\"))))",
      "(b / blame-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Qantas\"))\n   :ARG1 (c2 / congest-01\n             :ARG1 (a / air)))"
    ],
    "smus": [
      "airlines using Heathrow",
      "Qantas Ratings",
      "The on-time rating slipped to #75.",
      "Slipped into ranks of airlines using Heathrow.",
      "The airline lost 8 strips.",
      "Airlines Lose Strips at popular airport",
      "The airline could lose.",
      "8 strips could be lost.",
      "Loss of landing strips for the airline.",
      "Airlines are also facing a fine for every flight.",
      "Also facing a fine in excess of $.",
      "Also facing a fine for every flight.",
      "The airlines are also facing.",
      "Also facing a fine in excess of 38K.",
      "Blamed congest at Heathrow airport.",
      "Qantas blamed air congestion.",
      "Heathrow air.",
      "Qantas",
      "Dubai air"
    ]
  },
  {
    "instance_id": "realsumm-94",
    "summary": "<t> Christopher Starrs was spared jail in an ' act of mercy ' by judge in January . </t> <t> But senior judge has now said judge colleague took ' judge eye off the ball ' . </t> <t> Nicholas Cooke QC said wheelchair - bound Starrs should have been jailed . </t> <t> But added Starrs should thank QC lucky stars as sentence allowed to stand . </t>",
    "summary_trees": [
      "# ::snt  Christopher Starrs was spared jail in an ' act of mercy ' by judge in January . \n(s / spare-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG3 (j / judge-01)))\n      :ARG1 (p2 / person\n            :name (n / name\n                  :op1 \"Christopher\"\n                  :op2 \"Starrs\"))\n      :ARG2 (j2 / jail)\n      :manner (a / act-02\n            :ARG0 p\n            :ARG1 (m / mercy))\n      :time (d / date-entity\n            :month 1))",
      "# ::snt  But senior judge has now said judge colleague took ' judge eye off the ball ' . \n(c / contrast-01\n      :ARG2 (s / say-01\n            :ARG0 (p / person\n                  :ARG0-of (h / have-org-role-91\n                        :ARG3 (j / judge-01))\n                  :mod (s2 / senior))\n            :ARG1 (t / take-01\n                  :ARG0 (p2 / person\n                        :ARG0-of (h2 / have-org-role-91\n                              :ARG3 (c2 / colleague\n                                    :poss p)))\n                  :ARG1 (e / eye\n                        :part-of (p3 / person\n                              :ARG0-of (h3 / have-org-role-91\n                                    :ARG3 (j2 / judge-01))))\n                  :ARG2 (b / ball))\n            :time (n / now)))",
      "# ::snt  Nicholas Cooke QC said wheelchair - bound Starrs should have been jailed . \n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Nicholas\"\n                  :op2 \"Cooke\"\n                  :op3 \"Q QC\"))\n      :ARG1 (r / recommend-01\n            :ARG1 (j / jail-01\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Starrs\")\n                        :ARG1-of (b / bind-01\n                              :ARG2 (w / wheelchair))))))",
      "# ::snt  But added Starrs should thank QC lucky stars as sentence allowed to stand . \n(c / contrast-01\n      :ARG2 (a / add-01\n            :ARG1 (r / recommend-01\n                  :ARG1 (t / thank-01\n                        :ARG0 (p / person\n                              :name (n / name\n                                    :op1 \"Starrs\"))\n                        :ARG1 (p2 / person\n                              :ARG0-of (h / have-org-role-91\n                                    :ARG1 (g / government-organization\n                                          :name (n2 / name\n                                                :op1 \"Queensland\"\n                                                :op2 \"Court\"))\n                                    :ARG2 (a2 / attorney)))\n                        :ARG2 (s / star\n                              :mod (l / lucky)))\n                  :ARG1-of (c2 / cause-01\n                        :ARG0 (a3 / allow-01\n                              :ARG1 (s2 / stand-04\n                                    :ARG1 (s3 / sentence-01)))))))"
    ],
    "tree": [
      "(s / spare-01\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Christopher\"\n                      :op2 \"Starrs\")))",
      "(s / spare-01\n   :manner (a / act-02\n              :ARG0 (p / person)\n              :ARG1 (m / mercy)))",
      "(s / spare-01\n   :time (d / date-entity\n            :month 1))",
      "(c / contrast-01\n   :ARG2 (s / say-01\n            :ARG0 (p / person\n                     :ARG0 (h / have-org-role-91\n                              :ARG3 (j / judge-01)))))",
      "(c / contrast-01\n   :ARG2 (s / say-01\n            :ARG1 (t / take-01\n                     :ARG0 (p2 / person\n                               :ARG0 (h2 / have-org-role-91\n                                         :ARG3 (c2 / colleague\n                                                   :poss (p / person)))))))",
      "(c / contrast-01\n   :ARG2 (s / say-01\n            :time (n / now)))",
      "(c / contrast-01\n   :ARG2 (s / say-01\n            :ARG1 (t / take-01\n                     :ARG1 (e / eye\n                              :part (p3 / person\n                                        :ARG0 (h3 / have-org-role-91\n                                                  :ARG3 (j2 / judge-01)))))))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nicholas\"\n                     :op2 \"Cooke\"\n                     :op3 \"Q QC\")))",
      "(s / say-01\n   :ARG1 (r / recommend-01\n            :ARG1 (j / jail-01\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Starrs\")))))",
      "(s / say-01\n   :ARG1 (r / recommend-01\n            :ARG1 (j / jail-01\n                     :ARG1 (p2 / person\n                               :ARG1 (b / bind-01\n                                        :ARG2 (w / wheelchair))))))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nicholas\"\n                     :op2 \"Cooke\"\n                     :op3 \"Q QC\"))\n   :ARG1 (r / recommend-01\n            :ARG1 (j / jail-01\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Starrs\")))))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nicholas\"\n                     :op2 \"Cooke\"\n                     :op3 \"Q QC\"))\n   :ARG1 (r / recommend-01\n            :ARG1 (j / jail-01\n                     :ARG1 (p2 / person\n                               :ARG1 (b / bind-01\n                                        :ARG2 (w / wheelchair))))))",
      "(c / contrast-01\n   :ARG2 (a / add-01\n            :ARG1 (r / recommend-01\n                     :ARG1 (t / thank-01\n                              :ARG0 (p / person\n                                       :name (n / name\n                                                :op1 \"Starrs\"))))))",
      "(c / contrast-01\n   :ARG2 (a / add-01\n            :ARG1 (r / recommend-01\n                     :ARG1 (c2 / cause-01\n                               :ARG0 (a3 / allow-01\n                                         :ARG1 (s2 / stand-04\n                                                   :ARG1 (s3 / sentence-01)))))))"
    ],
    "smus": [
      "Christopher Starrs was spared jail in January.",
      "The Judge has spared Christopher Starrs from jail in an act of mercy.",
      "-Christopher Starrs is spared.",
      "Judges have said his colleague took.",
      "A colleague of the person took the eye of the Judge.",
      "The Judge.",
      "But the Judge has said...",
      "Starrs should have been jailed.",
      "The person bound in a wheelchair should be jailed.",
      "Starrs",
      "Starrs is a wheelchair bound.",
      "Nicholas Cooke Q QC",
      "Thank you, lucky stars.",
      "Starrs should thank."
    ]
  },
  {
    "instance_id": "realsumm-95",
    "summary": "<t> Real Madrid thrashed Granada 9 - 1 in La Liga at the weekend . </t> <t> Cristiano Ronaldo scored five to take Ronaldo league tally to 36 for the season . </t> <t> Real travel to Rayo Vallecano in a Madrid derby on Wednesday night . </t> <t> Juventus won 3 - 0 at Fiorentina to reach the Coppa Italia final on Tuesday . </t>",
    "summary_trees": [
      "# ::snt  Real Madrid thrashed Granada 9 - 1 in La Liga at the weekend . \n(t / thrash-01\n      :ARG0 (t2 / team\n            :name (n / name\n                  :op1 \"Real\"\n                  :op2 \"Madrid\"))\n      :ARG1 (t3 / team\n            :name (n2 / name\n                  :op1 \"Granada\"))\n      :time (w / weekend)\n      :quant (s / score-entity\n            :op1 9\n            :op2 1)\n      :location (l / league\n            :name (n3 / name\n                  :op1 \"La\"\n                  :op2 \"Liga\")))",
      "# ::snt  Cristiano Ronaldo scored five to take Ronaldo league tally to 36 for the season . \n(s / score-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Cristiano\"\n                  :op2 \"Ronaldo\"))\n      :ARG1 5\n      :ARG0-of (t / take-01\n            :ARG1 (t2 / tally-01\n                  :ARG0 p\n                  :ARG1 (l / league))\n            :ARG3 36\n            :ARG4 (s2 / season)))",
      "# ::snt  Real travel to Rayo Vallecano in a Madrid derby on Wednesday night . \n(t / travel-01\n      :ARG0 (t2 / team\n            :name (n / name\n                  :op1 \"Real\"))\n      :ARG4 (t3 / team\n            :name (n2 / name\n                  :op1 \"Rayo\"\n                  :op2 \"Vallecano\"))\n      :subevent-of (d / derby\n            :mod (c / city\n                  :name (n3 / name\n                        :op1 \"Madrid\")))\n      :time (d2 / date-entity\n            :weekday (w / wednesday)\n            :dayperiod (n4 / night)))",
      "# ::snt  Juventus won 3 - 0 at Fiorentina to reach the Coppa Italia final on Tuesday . \n(w / win-01\n      :ARG0 (t / team\n            :name (n / name\n                  :op1 \"Juventus\"))\n      :ARG2 (t2 / team\n            :name (n2 / name\n                  :op1 \"Fiorentina\"))\n      :ARG4 (s / score-entity\n            :op1 3\n            :op2 0)\n      :purpose (r / reach-01\n            :ARG0 t\n            :ARG1 (f / final\n                  :subevent-of (g / game\n                        :name (n3 / name\n                              :op1 \"Coppa\"\n                              :op2 \"Italia\")))\n            :time (d / date-entity\n                  :weekday (t3 / tuesday))))"
    ],
    "tree": [
      "(t / thrash-01\n   :quant (s / score-entity\n             :op1 9))",
      "(t / thrash-01\n   :quant (s / score-entity\n             :op2 1))",
      "(t / take-01\n   :ARG1 (t2 / tally-01\n             :ARG0 (p / person :name (n / name :op1 \"Cristiano\" :op2 \"Ronaldo\"))))",
      "(t / take-01\n   :ARG1 (t2 / tally-01\n             :ARG1 (l / league)))",
      "(t / travel-01\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Real\")))",
      "(t / travel-01\n   :ARG4 (t3 / team\n             :name (n2 / name\n                       :op1 \"Rayo\"\n                       :op2 \"Vallecano\")))",
      "(t / travel-01\n   :subevent (d / derby\n                :mod (c / city\n                        :name (n3 / name\n                                  :op1 \"Madrid\"))))",
      "(t / travel-01\n   :time (d2 / date-entity\n             :weekday (w / wednesday)))",
      "(t / travel-01\n   :time (d2 / date-entity\n             :dayperiod (n4 / night)))",
      "(w / win-01\n   :ARG4 (s / score-entity\n            :op1 3))",
      "(w / win-01\n   :ARG4 (s / score-entity\n            :op2 0))"
    ],
    "smus": [
      "Real Madrid thrash La Liga",
      "La Liga",
      "Take the league tally.",
      "Cristiano Ronaldo scored.",
      "Real will travel to Rayo Vallecano in the Madrid derby on the night of the game.",
      "Travel Wednesday",
      "Rayo Vallecano will travel Wednesday.",
      "Travel to the Madrid derby",
      "Real will travel Wednesday.",
      "To reach Tuesday, the winner won by 0 points.",
      "Final of Coppa Italia"
    ]
  },
  {
    "instance_id": "realsumm-96",
    "summary": "<t> Kevin Pietersen was sacked by England 14 months ago after Ashes defeat . </t> <t> Batsman scored 170 on Pietersen county cricket return for Surrey last week . </t> <t> Pietersen wants to make a sensational return to the England side this year . </t> <t> But Andrew Flintoff thinks time is running out for Flintoff to resurrect career . </t>",
    "summary_trees": [
      "# ::snt  Kevin Pietersen was sacked by England 14 months ago after Ashes defeat . \n(s / sack-01\n      :ARG0 (t / team\n            :name (n / name\n                  :op1 \"England\"))\n      :ARG1 (p / person\n            :name (n2 / name\n                  :op1 \"Kevin\"\n                  :op2 \"Pietersen\"))\n      :time (b / before\n            :op1 (n3 / now)\n            :quant (t2 / temporal-quantity\n                  :quant 14\n                  :unit (m / month)))\n      :time (a / after\n            :op1 (d / defeat-01\n                  :ARG0 t\n                  :ARG2 (g / game\n                        :name (n4 / name\n                              :op1 \"Ashes\")))))",
      "# ::snt  Batsman scored 170 on Pietersen county cricket return for Surrey last week . \n(s / score-01\n      :ARG0 (b / batsman)\n      :ARG1 170\n      :time (w / week\n            :mod (l / last))\n      :ARG1-of (r / return-01\n            :ARG4 (c / county\n                  :name (n / name\n                        :op1 \"Surrey\"))\n            :mod (c2 / cricket\n                  :mod (c3 / county\n                        :name (n2 / name\n                              :op1 \"Pietersen\")))))",
      "# ::snt  Pietersen wants to make a sensational return to the England side this year . \n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Pietersen\"))\n      :ARG1 (r / return-01\n            :ARG1 p\n            :ARG4 (s / side\n                  :mod (c / country\n                        :name (n2 / name\n                              :op1 \"England\")))\n            :mod (s2 / sensational)\n            :time (y / year\n                  :mod (t / this))))",
      "# ::snt  But Andrew Flintoff thinks time is running out for Flintoff to resurrect career . \n(c / contrast-01\n      :ARG2 (t / think-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Andrew\"\n                        :op2 \"Flintoff\"))\n            :ARG1 (r / run-out-05\n                  :ARG1 (t2 / time)\n                  :ARG2 (r2 / resurrect-01\n                        :ARG0 p\n                        :ARG1 (c2 / career\n                              :poss p)))))"
    ],
    "tree": [
      "(s / sack-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"England\")))",
      "(s / sack-01\n   :time (b / before\n            :quant (t2 / temporal-quantity\n                       :quant 14)))",
      "(s / score-01\n   :time (w / week\n            :mod (l / last)))",
      "(s / score-01\n   :ARG0 (b / batsman)\n   :time (w / week\n            :mod (l / last)))",
      "(r / return-01\n   :ARG4 (c / county\n            :name (n / name\n                     :op1 \"Surrey\")))",
      "(r / return-01\n   :mod (c2 / cricket\n            :mod (c3 / county\n                     :name (n2 / name\n                               :op1 \"Pietersen\"))))",
      "(r / return-01\n   :ARG4 (c / county\n            :name (n / name\n                     :op1 \"Surrey\"))\n   :mod (c2 / cricket\n            :mod (c3 / county\n                     :name (n2 / name\n                               :op1 \"Pietersen\"))))",
      "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Pietersen\")))",
      "(w / want-01\n   :ARG1 (r / return-01\n            :ARG1 (p / person :name (n / name :op1 \"Pietersen\"))))",
      "(w / want-01\n   :ARG1 (r / return-01\n            :time (y / year\n                     :mod (t / this))))",
      "(c / contrast-01\n   :ARG2 (t / think-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Andrew\"\n                              :op2 \"Flintoff\"))))",
      "(c / contrast-01\n   :ARG2 (t / think-01\n            :ARG1 (r / run-out-05\n                     :ARG1 (t2 / time))))",
      "(c / contrast-01\n   :ARG2 (t / think-01\n            :ARG1 (r / run-out-05\n                     :ARG2 (r2 / resurrect-01\n                               :ARG0 (p / person :name (n / name :op1 \"Andrew\" :op2 \"Flintoff\"))))))",
      "(c / contrast-01\n   :ARG2 (t / think-01\n            :ARG1 (r / run-out-05\n                     :ARG2 (r2 / resurrect-01\n                               :ARG1 (c2 / career\n                                         :poss (p / person :name (n / name :op1 \"Andrew\" :op2 \"Flintoff\")))))))",
      "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Andrew\"\n                     :op2 \"Flintoff\")))"
    ],
    "smus": [
      "Months earlier.",
      "Kevin Pietersen was sacked months earlier.",
      "Pietersen county",
      "The batsman scored last week.",
      "Return to Surrey",
      "The return of Pietersen county cricket",
      "Scored last week.",
      "Pietersen wants a return this year.",
      "wants a return to the English side.",
      "Pietersen",
      "Resurrect Andrew Flintoff's career",
      "Thinks time is running out.",
      "Time is running out for Andrew Flintoff to resurrect.",
      "Andrew Flintoff thinks.",
      "thinks it's run out of time to resurrect Andrew Flintoff's career."
    ]
  },
  {
    "instance_id": "realsumm-97",
    "summary": "<t> If Carl Froch does n't fight in 2015 I 'm not sure Froch 'll be back at all . </t> <t> A blockbuster with James DeGale is most likely after Julio Cesar Chavez Jnr defeat - but Anthony Dirrell has made contact . </t> <t> Scott Quigg - Carl Frampton summer fight is dead in the water . </t>",
    "summary_trees": [
      "# ::snt  If Carl Froch does n't fight in 2015 I 'm not sure Froch 'll be back at all . \n(s / sure-02\n      :polarity -\n      :ARG0 (ii / i)\n      :ARG1 (r / return-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Carl\"\n                        :op2 \"Froch\"))\n            :mod (a / at-all))\n      :condition (f / fight-01\n            :polarity -\n            :ARG0 p\n            :time (d / date-entity\n                  :year 2015)))",
      "# ::snt  A blockbuster with James DeGale is most likely after Julio Cesar Chavez Jnr defeat - but Anthony Dirrell has made contact . \n(l / likely-01\n      :ARG1 (b / blockbuster\n            :mod (p / person\n                  :name (n / name\n                        :op1 \"James\"\n                        :op2 \"DeGale\")))\n      :time (a / after\n            :op1 (d / defeat-01\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Julio\"\n                              :op2 \"Cesar\"\n                              :op3 \"Chavez\"\n                              :op4 \"Jr\"))))\n      :concession (c / contact-01\n            :ARG0 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Anthony\"\n                        :op2 \"Dirrell\")))\n      :ARG2-of (h / have-degree-91\n            :ARG1 b\n            :ARG3 (m / most)))",
      "# ::snt  Scott Quigg - Carl Frampton summer fight is dead in the water . \n(s / say-01\n      :ARG0 (ii / i)\n      :ARG1 (d / die-01\n            :ARG1 (f / fight-01\n                  :ARG0 (p / person\n                        :name (n / name\n                              :op1 \"Scott\"\n                              :op2 \"Quigg\"))\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Carl\"\n                              :op2 \"Frampton\"))\n                  :time (d2 / date-entity\n                        :season (s2 / summer)))\n            :location (w / water))\n      :ARG2 p)"
    ],
    "tree": [
      "(l / likely-01\n   :ARG1 (b / blockbuster\n            :mod (p / person\n                    :name (n / name\n                             :op1 \"James\"\n                             :op2 \"DeGale\"))))",
      "(l / likely-01\n   :time (a / after\n            :op1 (d / defeat-01\n                    :ARG1 (p2 / person\n                              :name (n2 / name\n                                        :op1 \"Julio\"\n                                        :op2 \"Cesar\"\n                                        :op3 \"Chavez\"\n                                        :op4 \"Jr\")))))",
      "(l / likely-01\n   :concession (c / contact-01\n                  :ARG0 (p3 / person\n                            :name (n3 / name\n                                      :op1 \"Anthony\"\n                                      :op2 \"Dirrell\"))))",
      "(l / likely-01\n   :ARG2 (h / have-degree-91\n            :ARG1 (b / blockbuster)))",
      "(l / likely-01\n   :ARG2 (h / have-degree-91\n            :ARG3 (m / most)))",
      "(s / say-01\n   :ARG1 (d / die-01\n            :ARG1 (f / fight-01\n                     :ARG0 (p / person\n                              :name (n / name\n                                       :op1 \"Scott\"\n                                       :op2 \"Quigg\")))))",
      "(s / say-01\n   :ARG1 (d / die-01\n            :location (w / water)))",
      "(s / say-01\n   :ARG1 (d / die-01\n            :ARG1 (f / fight-01\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Carl\"\n                                         :op2 \"Frampton\")))))",
      "(s / say-01\n   :ARG1 (d / die-01\n            :ARG1 (f / fight-01\n                     :time (d2 / date-entity\n                               :season (s2 / summer)))))",
      "(s / say-01\n   :ARG0 (ii / i)\n   :ARG1 (d / die-01\n            :ARG1 (f / fight-01\n                     :ARG0 (p / person\n                              :name (n / name\n                                       :op1 \"Scott\"\n                                       :op2 \"Quigg\")))))"
    ],
    "smus": [
      "Most likely after Julio Cesar Chavez Jr. defeats",
      "Anthony Dirrell is in contact.",
      "After Julio Cesar Chavez Jr.'s defeat, James DeGale's blockbuster is likely to happen.",
      "James DeGale's blockbuster is likely to be.",
      "James DeGale",
      "Scott Quigg's fight is dead.",
      "Scott Quigg",
      "The summer fight is dead.",
      "Scott Quigg and Carl Frampton had a fight in the summer.",
      "Death in the water."
    ]
  },
  {
    "instance_id": "realsumm-98",
    "summary": "<t> Clip shows mysterious black cloud hanging over the village of Shortandy . </t> <t> The perfect hoop shape sat in the air not moving for more than 15 minutes . </t> <t> Eerie video has been viewed tens of thousands of times on Youtube . </t> <t> While some viewers are suggesting the cloud was an alien spacecraft , experts think cloud could have been caused by nearby factories . </t>",
    "summary_trees": [
      "# ::snt  Clip shows mysterious black cloud hanging over the village of Shortandy . \n(s / show-01\n      :ARG0 (c / clip)\n      :ARG1 (c2 / cloud\n            :mod (m / mysterious)\n            :ARG1-of (b / black-04)\n            :ARG1-of (h / hang-01\n                  :ARG2 (o / over\n                        :op1 (v / village\n                              :name (n / name\n                                    :op1 \"Shortandy\"))))))",
      "# ::snt  The perfect hoop shape sat in the air not moving for more than 15 minutes . \n(s / sit-01\n      :ARG1 (s2 / shape\n            :mod (h / hoop)\n            :ARG1-of (p / perfect-02))\n      :ARG2 (a / air)\n      :manner (m / move-01\n            :polarity -\n            :ARG1 s2\n            :duration (m2 / more-than\n                  :op1 (t / temporal-quantity\n                        :quant 15\n                        :unit (m3 / minute)))))",
      "# ::snt  Eerie video has been viewed tens of thousands of times on Youtube . \n(v / view-01\n      :ARG1 (v2 / video\n            :mod (e / eerie))\n      :frequency (m / multiple\n            :op1 10000)\n      :medium (p / publication\n            :name (n / name\n                  :op1 \"YouTube\")))",
      "# ::snt  While some viewers are suggesting the cloud was an alien spacecraft , experts think cloud could have been caused by nearby factories . \n(c / contrast-01\n      :ARG1 (s / suggest-01\n            :ARG0 (p / person\n                  :ARG0-of (v / view-01)\n                  :quant (s2 / some))\n            :ARG1 (s3 / spacecraft\n                  :poss (a / alien-01)\n                  :domain (c2 / cloud)))\n      :ARG2 (t / think-01\n            :ARG0 (p2 / person\n                  :ARG1-of (e / expert-01))\n            :ARG1 (p3 / possible-01\n                  :ARG1 (c3 / cause-01\n                        :ARG0 (f / factory\n                              :location (n / nearby))\n                        :ARG1 (c4 / cloud)))))"
    ],
    "tree": [
      "(s / show-01\n   :ARG1 (c2 / cloud\n             :mod (m / mysterious)))",
      "(s / show-01\n   :ARG1 (c2 / cloud\n             :ARG1 (b / black-04)))",
      "(s / show-01\n   :ARG1 (c2 / cloud\n             :ARG1 (h / hang-01\n                      :ARG2 (o / over\n                               :op1 (v / village\n                                       :name (n / name\n                                                :op1 \"Shortandy\"))))))",
      "(s / show-01\n   :ARG0 (c / clip)\n   :ARG1 (c2 / cloud\n             :mod (m / mysterious)))",
      "(s / show-01\n   :ARG0 (c / clip)\n   :ARG1 (c2 / cloud\n             :ARG1 (b / black-04)))",
      "(s / sit-01\n   :ARG1 (s2 / shape\n             :mod (h / hoop)))",
      "(s / sit-01\n   :ARG1 (s2 / shape\n             :ARG1 (p / perfect-02)))",
      "(s / sit-01\n   :manner (m / move-01\n              :polarity -\n              :ARG1 (s2 / shape)\n              :duration (m2 / more-than)))",
      "(s / sit-01\n   :ARG1 (s2 / shape\n             :mod (h / hoop))\n   :ARG2 (a / air))",
      "(s / sit-01\n   :ARG1 (s2 / shape\n             :ARG1 (p / perfect-02))\n   :ARG2 (a / air))",
      "(v / view-01\n   :ARG1 (v2 / video\n             :mod (e / eerie)))",
      "(v / view-01\n   :frequency (m / multiple\n                 :op1 10000))",
      "(v / view-01\n   :medium (p / publication\n              :name (n / name\n                       :op1 \"YouTube\")))",
      "(v / view-01\n   :ARG1 (v2 / video\n             :mod (e / eerie))\n   :frequency (m / multiple\n                 :op1 10000))",
      "(v / view-01\n   :ARG1 (v2 / video\n             :mod (e / eerie))\n   :medium (p / publication\n              :name (n / name\n                       :op1 \"YouTube\")))",
      "(c / contrast-01\n   :ARG1 (s / suggest-01\n            :ARG0 (p / person\n                     :ARG0 (v / view-01))))",
      "(c / contrast-01\n   :ARG1 (s / suggest-01\n            :ARG1 (s3 / spacecraft\n                      :poss (a / alien-01))))",
      "(c / contrast-01\n   :ARG1 (s / suggest-01\n            :ARG0 (p / person\n                     :quant (s2 / some))))",
      "(c / contrast-01\n   :ARG1 (s / suggest-01\n            :ARG1 (s3 / spacecraft\n                      :domain (c2 / cloud))))",
      "(c / contrast-01\n   :ARG2 (t / think-01\n            :ARG0 (p2 / person\n                      :ARG1 (e / expert-01))))"
    ],
    "smus": [
      "The clip shows a mysterious cloud.",
      "Over Shortandy village.",
      "A mysterious black cloud.",
      "Shows cloud hanging over Shortandy village.",
      "Shows mysterious cloud.",
      "more than 15",
      "The hoop shape sat in the air.",
      "Sitting without moving in shape for more than a while.",
      "The perfect shape sat unmoving for more than a minute.",
      "sat in perfect shape.",
      "Viewed tens of thousands of times.",
      "a href=\"http://www.youtube.com/watch?v=Eerie\">Eerie Video - YouTube/a>",
      "View on YouTube",
      "The eerie video has been viewed thousands of times.",
      "The eerie video was viewed.",
      "But experts think...",
      "suggesting the cloud is a spacecraft.",
      "Viewers are suggesting, experts think.",
      "Experts think nearby factories may have caused it.",
      "suggesting alien spacecraft."
    ]
  },
  {
    "instance_id": "realsumm-99",
    "summary": "<t> Incredible images show handcuffed members from the notorious Barrio 18 gang being marched onto buses . </t> <t> In total 1,177 were transferred to a different jail where members will mix with members arch rivals - Mara Salvatrucha . </t> <t> The gang members will now no longer be classified by gang affiliation , but by how dangerous members are . </t>",
    "summary_trees": [
      "# ::snt  Incredible images show handcuffed members from the notorious Barrio 18 gang being marched onto buses . \n(s / show-01\n      :ARG0 (ii / image\n            :ARG0-of (a / awe-01))\n      :ARG1 (m / march-01\n            :ARG1 (p / person\n                  :ARG0-of (h / have-org-role-91\n                        :ARG1 (g / gang\n                              :name (n / name\n                                    :op1 \"Barrio\"\n                                    :op2 18)\n                              :ARG1-of (n2 / notorious-01))\n                        :ARG2 (m2 / member))\n                  :ARG1-of (h2 / handcuff-01))\n            :destination (b / bus)))",
      "# ::snt  In total 1,177 were transferred to a different jail where members will mix with members arch rivals - Mara Salvatrucha . \n(t / transfer-01\n      :ARG1 (p / person\n            :quant 1741\n            :ARG2-of (t2 / total-01))\n      :ARG2 (j / jail\n            :ARG1-of (d / differ-02)\n            :location-of (m / mix-01\n                  :ARG1 (m2 / member)\n                  :ARG2 (m3 / member\n                        :ARG0-of (h / have-rel-role-91\n                              :ARG1 (c / criminal-organization\n                                    :name (n / name\n                                          :op1 \"Mara\"\n                                          :op2 \"Salvatrucha\")\n                                    :ARG0-of (r / rival-01\n                                          :mod (a / arch))))))))",
      "# ::snt  The gang members will now no longer be classified by gang affiliation , but by how dangerous members are . \n(c / contrast-01\n      :ARG1 (c2 / classify-01\n            :ARG1 (p / person\n                  :ARG0-of (h / have-org-role-91\n                        :ARG1 (g / gang)\n                        :ARG2 (m / member)))\n            :ARG2 (a / affiliate-01\n                  :ARG1 p\n                  :ARG2 g))\n      :ARG2 (c3 / classify-01\n            :ARG1 p\n            :ARG2 (t / thing\n                  :degree-of (d / dangerous\n                        :domain p)))\n      :time (n / no-longer)\n      :time (n2 / now))"
    ],
    "tree": [
      "(s / show-01\n   :ARG0 (ii / image\n             :ARG0 (a / awe-01)))",
      "(s / show-01\n   :ARG1 (m / march-01\n            :ARG1 (p / person\n                     :ARG0 (h / have-org-role-91\n                              :ARG1 (g / gang\n                                       :name (n / name\n                                                :op1 \"Barrio\"\n                                                :op2 18))))))",
      "(s / show-01\n   :ARG1 (m / march-01\n            :destination (b / bus)))",
      "(s / show-01\n   :ARG1 (m / march-01\n            :ARG1 (p / person\n                     :ARG1 (h2 / handcuff-01))))",
      "(s / show-01\n   :ARG1 (m / march-01\n            :ARG1 (p / person\n                     :ARG0 (h / have-org-role-91\n                              :ARG2 (m2 / member)))))",
      "(t / transfer-01\n   :ARG1 (p / person\n            :quant 1741))",
      "(t / transfer-01\n   :ARG1 (p / person\n            :ARG2 (t2 / total-01)))",
      "(t / transfer-01\n   :ARG2 (j / jail\n            :ARG1 (d / differ-02)))",
      "(t / transfer-01\n   :ARG2 (j / jail\n            :location (m / mix-01\n                         :ARG1 (m2 / member))))",
      "(t / transfer-01\n   :ARG2 (j / jail\n            :location (m / mix-01\n                         :ARG2 (m3 / member\n                                   :ARG0 (h / have-rel-role-91\n                                            :ARG1 (c / criminal-organization\n                                                     :name (n / name\n                                                              :op1 \"Mara\"\n                                                              :op2 \"Salvatrucha\")))))))",
      "(c / contrast-01\n   :ARG1 (c2 / classify-01\n             :ARG1 (p / person\n                      :ARG0 (h / have-org-role-91\n                               :ARG1 (g / gang)))))",
      "(c / contrast-01\n   :ARG1 (c2 / classify-01\n             :ARG1 (p / person\n                      :ARG0 (h / have-org-role-91\n                               :ARG2 (m / member)))))"
    ],
    "smus": [
      "The awe inspiring images show the marching buses.",
      "The notorious gang.",
      "Members show to be marched.",
      "A notorious gang was marched to the buses.",
      "The gang is called Barrio 18.",
      "Transferred to a different jail.",
      "Transferred to jail to mix with members of arch rivals.",
      "There is a different jail where members of arch rivals' criminal organizations mix.",
      "174 people were transferred to jail to mix with members.",
      "Mix members with members of the Mara Salvatrucha.",
      "But people are classified as dangerous.",
      "Members are classified."
    ]
  }
]