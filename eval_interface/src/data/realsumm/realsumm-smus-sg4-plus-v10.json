[
  {
    "instance_id": "realsumm-0",
    "summary": "Anuradha Koirala and 425 young women and girls have been sleeping outdoors because of aftershocks . Pushpa Basnet and 45 children Pushpa Basnet cares for were forced to evacuate Pushpa Basnet and 45 children she cares for residence . Seven other CNN Heroes and Seven other CNN Heroes organizations now assisting in relief efforts .",
    "summary_trees": [
      "# ::snt Anuradha Koirala and 425 young women and girls have been sleeping outdoors because of aftershocks .\n(c / cause-01\n      :ARG0 (a / aftershock)\n      :ARG1 (s / sleep-01\n            :ARG0 (a2 / and\n                  :op1 (p / person\n                        :name (n / name\n                              :op1 \"Anuradha\"\n                              :op2 \"Koirala\"))\n                  :op2 (w / woman)\n                  :op3 (g / girl)\n                  :quant 425\n                  :mod (y / young))\n            :location (o / outdoors)))",
      "# ::snt Pushpa Basnet and 45 children Pushpa Basnet cares for were forced to evacuate Pushpa Basnet and 45 children she cares for residence .\n(f / force-01\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Pushpa\"\n                        :op2 \"Basnet\"))\n            :op2 (c / child\n                  :quant 45\n                  :ARG1-of (c2 / care-03\n                        :ARG0 p)))\n      :ARG2 (e / evacuate-01\n            :ARG2 (a2 / and\n                  :op1 p\n                  :op2 (c3 / child\n                        :quant 45\n                        :ARG1-of (r / reside-01\n                              :ARG0 p)))))",
      "# ::snt Seven other CNN Heroes and Seven other CNN Heroes organizations now assisting in relief efforts .\n(a / assist-01\n      :ARG0 (a2 / and\n            :op1 (o / organization\n                  :name (n / name\n                        :op1 \"CNN\"\n                        :op2 \"Heroes\")\n                  :quant 7\n                  :mod (o2 / other))\n            :op2 (o3 / organization\n                  :name (n2 / name\n                        :op1 \"CNN\"\n                        :op2 \"Heroes\")\n                  :quant 7\n                  :mod (o4 / other)))\n      :ARG2 (e / effort-01\n            :ARG1 (r / relieve-01))\n      :time (n3 / now))"
    ],
    "tree": [
      "(c / cause-01\n   :ARG0 (a / aftershock)\n   :ARG1 (s / sleep-01\n            :location (o / outdoors)))",
      "(c / cause-01\n   :ARG0 (a / aftershock)\n   :ARG1 (s / sleep-01\n            :ARG0 (w / woman)))",
      "(s / sleep-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Anuradha\"\n                     :op2 \"Koirala\"))\n   :location (o / outdoors))",
      "(s / sleep-01\n   :ARG0 (w / woman)\n   :location (o / outdoors))",
      "(a2 / and\n    :op2 (w / woman)\n    :op3 (g / girl))",
      "(f / force-01\n   :ARG2 (e / evacuate-01\n            :ARG2 (p / person :name (n / name :op1 \"Pushpa\" :op2 \"Basnet\"))))",
      "(f / force-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Pushpa\"\n                     :op2 \"Basnet\"))\n   :ARG2 (e / evacuate-01\n            :ARG2 (a2 / and\n                      :op2 (c3 / child\n                               :quant 45))))",
      "(f / force-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Pushpa\"\n                     :op2 \"Basnet\"))\n   :ARG2 (e / evacuate-01\n            :ARG2 (a2 / and\n                      :op2 (c3 / child\n                               :ARG1 (r / reside-01\n                                        :ARG0 p)))))",
      "(c / child\n   :ARG1 (c2 / care-03\n             :ARG0 (p / person :name (n / name :op1 \"Pushpa\" :op2 \"Basnet\"))))",
      "(a / assist-01\n   :ARG0 (o / organization\n            :quant 7)\n   :time (n3 / now))",
      "(a / assist-01\n   :ARG2 (e / effort-01\n            :ARG1 (r / relieve-01))\n   :time (n3 / now))",
      "(a / assist-01\n   :ARG0 (o / organization\n            :quant 7)\n   :ARG2 (e / effort-01\n            :ARG1 (r / relieve-01))\n   :time (n3 / now))"
    ],
    "smus": [
      "Aftershocks cause sleeping outdoors.",
      "The women were sleeping because of the aftershocks.",
      "Anuradha koirala is sleeping outdoors.",
      "Women sleeping outdoors.",
      "Women and girls.",
      "Pushpa Basnet was forced to evacuate.",
      "Pushpa Basnet was forced to evacuate with 45 children.",
      "Pushpa Basnet was forced to evacuate along with her children from her residence.",
      "Pusspa Basnet cares for children.",
      "7 organizations are now assisting.",
      "assisting in relief efforts now.",
      "7 organizations are now assisting in relief efforts."
    ]
  },
  {
    "instance_id": "realsumm-1",
    "summary": "Students from the University of Surrey discovered thousands of colonies . Students from the University of Surrey submerged coins and notes in agar to accelerate growth pf bacteria . Most were harmless on coins , but one caused boils and spots . Previous studies have revealed MRSA bacteria on notes and coins .",
    "summary_trees": [
      "# ::snt Students from the University of Surrey discovered thousands of colonies .\n(d / discover-01\n      :ARG0 (p / person\n            :ARG0-of (s / study-01)\n            :source (u / university\n                  :name (n / name\n                        :op1 \"University\"\n                        :op2 \"of\"\n                        :op3 \"Surrey\")))\n      :ARG1 (c / colony\n            :quant (m / multiple\n                  :op1 1000)))",
      "# ::snt Students from the University of Surrey submerged coins and notes in agar to accelerate growth pf bacteria .\n(s / submerge-01\n      :ARG0 (p / person\n            :ARG0-of (s2 / study-01)\n            :source (u / university\n                  :name (n / name\n                        :op1 \"University\"\n                        :op2 \"of\"\n                        :op3 \"Surrey\")))\n      :ARG1 (a / and\n            :op1 (c / coin)\n            :op2 (n2 / note))\n      :ARG2 (a2 / agar)\n      :purpose (a3 / accelerate-01\n            :ARG0 p\n            :ARG1 (g / grow-03\n                  :ARG1 (b / bacterium\n                        :name (n3 / name\n                              :op1 \"Pf\")))))",
      "# ::snt Most were harmless on coins , but one caused boils and spots .\n(c / contrast-01\n      :ARG1 (h / harmful-02\n            :polarity -\n            :ARG0 (m / most\n                  :location (c2 / coin)))\n      :ARG2 (c3 / cause-01\n            :ARG0 (o / one)\n            :ARG1 (a / and\n                  :op1 (b / boil-01)\n                  :op2 (s / spot))))",
      "# ::snt Previous studies have revealed MRSA bacteria on notes and coins .\n(r / reveal-01\n      :ARG0 (s / study-01\n            :time (p / previous))\n      :ARG1 (b / bacterium\n            :mod (d / disease\n                  :name (n / name\n                        :op1 \"MRSA\"))\n            :location (a / and\n                  :op1 (n2 / note)\n                  :op2 (c / coin))))"
    ],
    "tree": [
      "(d / discover-01\n   :ARG0 (p / person\n            :ARG0 (s / study-01)))",
      "(d / discover-01\n   :ARG1 (c / colony\n            :quant (m / multiple\n                      :op1 1000)))",
      "(d / discover-01\n   :ARG0 (p / person\n            :ARG0 (s / study-01))\n   :ARG1 (c / colony\n            :quant (m / multiple\n                      :op1 1000)))",
      "(p / person\n   :ARG0 (s / study-01)\n   :source (u / university\n              :name (n / name\n                       :op1 \"University\"\n                       :op2 \"of\"\n                       :op3 \"Surrey\")))",
      "(c / colony\n   :quant (m / multiple\n             :op1 1000))",
      "(s / submerge-01\n   :ARG0 (p / person\n            :ARG0 (s2 / study-01)))",
      "(s / submerge-01\n   :ARG0 (p / person\n            :ARG0 (s2 / study-01))\n   :ARG1 (c / coin))",
      "(s / submerge-01\n   :ARG0 (p / person\n            :ARG0 (s2 / study-01))\n   :ARG1 (n2 / note))",
      "(s / submerge-01\n   :ARG1 (c / coin)\n   :ARG2 (a2 / agar))",
      "(s / submerge-01\n   :ARG0 (p / person\n            :ARG0 (s2 / study-01))\n   :ARG1 (c / coin)\n   :ARG2 (a2 / agar)\n   :purpose (a3 / accelerate-01\n                :ARG0 p))",
      "(c / contrast-01\n   :ARG2 (c3 / cause-01\n             :ARG0 (o / one)))",
      "(c / contrast-01\n   :ARG2 (c3 / cause-01\n             :ARG1 (b / boil-01)))",
      "(c / contrast-01\n   :ARG2 (c3 / cause-01\n             :ARG1 (s / spot)))",
      "(c3 / cause-01\n    :ARG0 (o / one)\n    :ARG1 (b / boil-01))",
      "(c3 / cause-01\n    :ARG0 (o / one)\n    :ARG1 (s / spot))",
      "(r / reveal-01\n   :ARG1 (b / bacterium\n            :mod (d / disease\n                    :name (n / name\n                             :op1 \"MRSA\"))))",
      "(r / reveal-01\n   :ARG1 (b / bacterium\n            :location (c / coin)))",
      "(r / reveal-01\n   :ARG0 (s / study-01\n            :time (p / previous))\n   :ARG1 (b / bacterium\n            :mod (d / disease\n                    :name (n / name\n                             :op1 \"MRSA\"))))",
      "(r / reveal-01\n   :ARG0 (s / study-01\n            :time (p / previous))\n   :ARG1 (b / bacterium\n            :location (n2 / note)))",
      "(r / reveal-01\n   :ARG0 (s / study-01\n            :time (p / previous))\n   :ARG1 (b / bacterium\n            :location (c / coin)))"
    ],
    "smus": [
      "The students discovered.",
      "Thousands of colonies were discovered.",
      "The students discovered thousands of colonies.",
      "Students from the University of Surrey",
      "There were thousands of colonies.",
      "Students submerged.",
      "Students submerged the coins.",
      "Students submerged notes.",
      "The coins were submerged in the agar.",
      "Students submerged coins in agar to accelerate.",
      "But one caused.",
      "But it caused boils.",
      "But it caused spots.",
      "One caused boils.",
      "One caused the spots.",
      "MRSA bacteria have been revealed.",
      "Bacteria in coins have been revealed.",
      "Previous studies have revealed MRSA bacteria.",
      "The bacteria in the notes have been revealed in previous studies.",
      "Previous studies have revealed bacteria in coins."
    ]
  },
  {
    "instance_id": "realsumm-2",
    "summary": "Danilo this week agreed to join Real Madrid in the summer for \u00a3 23million . join will take total raised from player sales to \u00a3 440 m since 2004 . James Rodriguez , Pepe and Radamel Falcao among those sold by Porto . CLICK HERE for all the latest Real Madrid news .",
    "summary_trees": [
      "# ::snt Danilo this week agreed to join Real Madrid in the summer for \u00a3 23million .\n(a / agree-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Danilo\"))\n      :ARG1 (j / join-04\n            :ARG0 p\n            :ARG1 (t / team\n                  :name (n2 / name\n                        :op1 \"Real\"\n                        :op2 \"Madrid\"))\n            :time (d / date-entity\n                  :season (s / summer))\n            :prep-for (m / monetary-quantity\n                  :quant 23000000\n                  :unit (p2 / pound)))\n      :time (w / week\n            :mod (t2 / this)))",
      "# ::snt join will take total raised from player sales to \u00a3 440 m since 2004 .\n(t / take-01\n      :ARG0 (j / join-01)\n      :ARG1 (m / monetary-quantity\n            :ARG1-of (r / raise-01\n                  :ARG3 (s / sell-01\n                        :ARG0 (p / person\n                              :ARG0-of (p2 / play-01))))\n            :ARG2-of (t2 / total-01))\n      :ARG3 (m2 / monetary-quantity\n            :quant 440000000\n            :unit (p3 / pound))\n      :time (s2 / since\n            :op1 (d / date-entity\n                  :year 2004)))",
      "# ::snt James Rodriguez , Pepe and Radamel Falcao among those sold by Porto .\n(ii / include-91\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"James\"\n                        :op2 \"Rodriguez\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Pepe\"))\n            :op3 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Radamel\"\n                        :op2 \"Falcao\")))\n      :ARG2 (t / that\n            :ARG1-of (s / sell-01\n                  :ARG0 (t2 / team\n                        :name (n4 / name\n                              :op1 \"Porto\")))))",
      "# ::snt CLICK HERE for all the latest Real Madrid news .\n(c / click-01\n      :location (h / here)\n      :purpose (n / news\n            :mod (a / all)\n            :topic (t / team\n                  :name (n2 / name\n                        :op1 \"Real\"\n                        :op2 \"Madrid\"))\n            :mod (l / last)))"
    ],
    "tree": [
      "(a / agree-01\n   :ARG1 (j / join-04\n            :ARG0 (p / person :name (n / name :op1 \"Danilo\"))))",
      "(a / agree-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Danilo\"))\n   :ARG1 (j / join-04\n            :ARG1 (t / team\n                     :name (n2 / name\n                               :op1 \"Real\"\n                               :op2 \"Madrid\"))))",
      "(a / agree-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Danilo\"))\n   :time (w / week\n            :mod (t2 / this)))",
      "(a / agree-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Danilo\"))\n   :ARG1 (j / join-04\n            :ARG1 (t / team\n                     :name (n2 / name\n                               :op1 \"Real\"\n                               :op2 \"Madrid\")))\n   :time (w / week\n            :mod (t2 / this)))",
      "(t / take-01\n   :ARG0 (j / join-01)\n   :ARG1 (m / monetary-quantity\n            :ARG1 (r / raise-01\n                     :ARG3 (s / sell-01\n                              :ARG0 (p / person\n                                       :ARG0 (p2 / play-01))))))",
      "(t / take-01\n   :ARG0 (j / join-01)\n   :ARG1 (m / monetary-quantity\n            :ARG2 (t2 / total-01)))",
      "(t / take-01\n   :ARG1 (m / monetary-quantity\n            :ARG1 (r / raise-01\n                     :ARG3 (s / sell-01\n                              :ARG0 (p / person\n                                       :ARG0 (p2 / play-01)))))\n   :time (s2 / since\n             :op1 (d / date-entity\n                     :year 2004)))",
      "(m / monetary-quantity\n   :ARG1 (r / raise-01\n            :ARG3 (s / sell-01\n                     :ARG0 (p / person\n                              :ARG0 (p2 / play-01))))\n   :ARG2 (t2 / total-01))",
      "(s2 / since\n    :op1 (d / date-entity\n            :year 2004))",
      "(ii / include-91\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"James\"\n                      :op2 \"Rodriguez\"))\n    :ARG2 (t / that\n             :ARG1 (s / sell-01\n                      :ARG0 (t2 / team\n                                :name (n4 / name\n                                          :op1 \"Porto\")))))",
      "(ii / include-91\n    :ARG1 (p2 / person\n              :name (n2 / name\n                        :op1 \"Pepe\"))\n    :ARG2 (t / that\n             :ARG1 (s / sell-01\n                      :ARG0 (t2 / team\n                                :name (n4 / name\n                                          :op1 \"Porto\")))))",
      "(ii / include-91\n    :ARG1 (p3 / person\n              :name (n3 / name\n                        :op1 \"Radamel\"\n                        :op2 \"Falcao\"))\n    :ARG2 (t / that\n             :ARG1 (s / sell-01\n                      :ARG0 (t2 / team\n                                :name (n4 / name\n                                          :op1 \"Porto\")))))",
      "(a / and\n   :op1 (p / person\n           :name (n / name\n                    :op1 \"James\"\n                    :op2 \"Rodriguez\"))\n   :op2 (p2 / person\n            :name (n2 / name\n                      :op1 \"Pepe\")))",
      "(a / and\n   :op2 (p2 / person\n            :name (n2 / name\n                      :op1 \"Pepe\"))\n   :op3 (p3 / person\n            :name (n3 / name\n                      :op1 \"Radamel\"\n                      :op2 \"Falcao\")))",
      "(c / click-01\n   :purpose (n / news\n               :mod (l / last)))",
      "(c / click-01\n   :location (h / here)\n   :purpose (n / news\n               :mod (a / all)))",
      "(c / click-01\n   :location (h / here)\n   :purpose (n / news\n               :topic (t / team\n                         :name (n2 / name\n                                   :op1 \"Real\"\n                                   :op2 \"Madrid\"))))",
      "(c / click-01\n   :location (h / here)\n   :purpose (n / news\n               :mod (l / last)))",
      "(n / news\n   :topic (t / team\n             :name (n2 / name\n                       :op1 \"Real\"\n                       :op2 \"Madrid\")))"
    ],
    "smus": [
      "Danilo agreed to join.",
      "Danilo agreed to join Real Madrid.",
      "Danilo agreed this week.",
      "Danilo agreed to join Real Madrid this week.",
      "Join will take the amount raised from the player's sales.",
      "Join will take the total.",
      "Take the amount raised from the player's sales since 2004.",
      "The total was raised from the player's sales.",
      "since 2004.",
      "James Rodriguez was one of those sold by Porto.",
      "Pepe was one of those Porto have sold.",
      "Radamel Falcao was one of those sold by Porto.",
      "James Rodriguez and Pepe.",
      "Pepe and Radamel Falcao.",
      "Clicks for the latest news.",
      "Here's a click for all the news.",
      "For Real Madrid news click here.",
      "Click here for the latest news.",
      "Real Madrid news"
    ]
  },
  {
    "instance_id": "realsumm-3",
    "summary": "Dominatrix claims Dominatrix shared a ' hot , deep kiss ' with Prince Harry in Vegas . Dominatrix said Dominatrix felt overdressed after seeing Prince Harry ' cute naked a * * ' Dominatrix made claims in an excerpt from Dominatrix upcoming book . Kensington Palace has previously denied Dominatrix was invited to the hotel suite .",
    "summary_trees": [
      "# ::snt Dominatrix claims Dominatrix shared a ' hot , deep kiss ' with Prince Harry in Vegas .\n(c / claim-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Dominatrix\"))\n      :ARG1 (s / share-01\n            :ARG0 p\n            :ARG1 (k / kiss-01\n                  :ARG0 p\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Prince\"\n                              :op2 \"Harry\"))\n                  :ARG1-of (h / hot-05)\n                  :ARG1-of (d / deep-03))\n            :ARG2 p2\n            :location (c2 / city\n                  :name (n3 / name\n                        :op1 \"Vegas\"))))",
      "# ::snt Dominatrix said Dominatrix felt overdressed after seeing Prince Harry ' cute naked a * * ' Dominatrix made claims in an excerpt from Dominatrix upcoming book .\n(m / multi-sentence\n      :snt1 (s / say-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Dominatrix\"))\n            :ARG1 (f / feel-01\n                  :ARG0 p\n                  :ARG1 (o / overdress-01\n                        :ARG1 p)\n                  :time (a / after\n                        :op1 (s2 / see-01\n                              :ARG0 p\n                              :ARG1 (n2 / naked\n                                    :domain (p2 / person\n                                          :name (n3 / name\n                                                :op1 \"Prince\"\n                                                :op2 \"Harry\"))\n                                    :mod (c / cute))))))\n      :snt2 (c2 / claim-01\n            :ARG0 p\n            :medium (e / excerpt-01\n                  :ARG2 (b / book\n                        :ARG1-of (c3 / come-up-11)\n                        :poss p))))",
      "# ::snt Kensington Palace has previously denied Dominatrix was invited to the hotel suite .\n(d / deny-01\n      :ARG0 (g / government-organization\n            :name (n / name\n                  :op1 \"Kensington\"\n                  :op2 \"Palace\"))\n      :ARG1 (ii / invite-01\n            :ARG1 (p / person\n                  :name (n2 / name\n                        :op1 \"Dominatrix\"))\n            :ARG2 (s / suite\n                  :location (h / hotel)))\n      :time (p2 / previous))"
    ],
    "tree": [
      "(c / claim-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dominatrix\")))",
      "(c / claim-01\n   :ARG1 (s / share-01\n            :ARG1 (k / kiss-01\n                     :ARG0 (p / person :name (n / name :op1 \"Dominatrix\")))))",
      "(c / claim-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dominatrix\"))\n   :ARG1 (s / share-01\n            :ARG1 (k / kiss-01\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Prince\"\n                                         :op2 \"Harry\")))))",
      "(c / claim-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dominatrix\"))\n   :ARG1 (s / share-01\n            :ARG1 (k / kiss-01\n                     :ARG1 (h / hot-05))))",
      "(c / claim-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dominatrix\"))\n   :ARG1 (s / share-01\n            :ARG1 (k / kiss-01\n                     :ARG1 (d / deep-03))))",
      "(m / multi-sentence\n   :snt1 (s / say-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Dominatrix\")))\n   :snt2 (c2 / claim-01\n             :medium (e / excerpt-01\n                        :ARG2 (b / book\n                                 :poss p))))",
      "(m / multi-sentence\n   :snt1 (s / say-01\n            :ARG1 (f / feel-01\n                     :ARG0 (p / person :name (n / name :op1 \"Dominatrix\"))))\n   :snt2 (c2 / claim-01\n             :medium (e / excerpt-01\n                        :ARG2 (b / book\n                                 :poss p))))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dominatrix\"))\n   :ARG1 (f / feel-01\n            :ARG1 (o / overdress-01\n                     :ARG1 p)))",
      "(f / feel-01\n   :ARG1 (o / overdress-01\n            :ARG1 (p / person :name (n / name :op1 \"Dominatrix\")))\n   :time (a / after\n            :op1 (s2 / see-01\n                     :ARG1 (n2 / naked\n                               :domain (p2 / person\n                                           :name (n3 / name\n                                                     :op1 \"Prince\"\n                                                     :op2 \"Harry\"))))))",
      "(f / feel-01\n   :ARG1 (o / overdress-01\n            :ARG1 (p / person :name (n / name :op1 \"Dominatrix\")))\n   :time (a / after\n            :op1 (s2 / see-01\n                     :ARG1 (n2 / naked\n                               :mod (c / cute)))))",
      "(d / deny-01\n   :ARG0 (g / government-organization\n            :name (n / name\n                     :op1 \"Kensington\"\n                     :op2 \"Palace\")))",
      "(d / deny-01\n   :ARG0 (g / government-organization\n            :name (n / name\n                     :op1 \"Kensington\"\n                     :op2 \"Palace\"))\n   :ARG1 (ii / invite-01\n             :ARG1 (p / person\n                      :name (n2 / name\n                                :op1 \"Dominatrix\"))))",
      "(d / deny-01\n   :ARG0 (g / government-organization\n            :name (n / name\n                     :op1 \"Kensington\"\n                     :op2 \"Palace\"))\n   :time (p2 / previous))",
      "(d / deny-01\n   :ARG1 (ii / invite-01\n             :ARG2 (s / suite\n                      :location (h / hotel)))\n   :time (p2 / previous))",
      "(d / deny-01\n   :ARG0 (g / government-organization\n            :name (n / name\n                     :op1 \"Kensington\"\n                     :op2 \"Palace\"))\n   :ARG1 (ii / invite-01\n             :ARG1 (p / person\n                      :name (n2 / name\n                                :op1 \"Dominatrix\")))\n   :time (p2 / previous))"
    ],
    "smus": [
      "Dominatrix claims.",
      "claiming dominatrix shared a kiss.",
      "Dominatrix claims they shared a kiss with Prince Harry.",
      "Dominatrix claims they shared a hot kiss.",
      "Dominatrix claims they shared a deep kiss.",
      "\"Dominatrix said -- claims made in an excerpt from his book.",
      "Dominatrix said he felt. There are claims in an excerpt from his book.",
      "Dominatrix said she felt overdressed.",
      "After seeing Prince Harry as naked, dominatrix felt overdressed.",
      "After seeing cute naked, dominatrix felt overdressed.",
      "The Kensington Palace has denied.",
      "The Kensington Palace has denied that dominatrix was invited.",
      "The Kensington Palace has previously denied.",
      "Previously, the invitation to a hotel suite was denied.",
      "The Kensington Palace had previously denied that dominatrix had been invited."
    ]
  },
  {
    "instance_id": "realsumm-4",
    "summary": "Eva Chapin , 34 , from West Linn , Oregon , has been accused of harassment . Referred to Eva Chapin , 34 , from West Linn , Oregon , neighbors as ' n * * * * * ' but insists Eva Chapin , 34 , from West Linn , Oregon , is not racist . One note said : ' There were no [ expletive ] in West Linn , Oregon until Eva Chapin , 34 , from West Linn , Oregon , came ' . Eva Chapin , 34 , from West Linn , Oregon , has said Eva Chapin , 34 , from West Linn , Oregon , family may be forced to move as her family do n't feel safe .",
    "summary_trees": [
      "# ::snt Eva Chapin , 34 , from West Linn , Oregon , has been accused of harassment .\n(a / accuse-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Eva\"\n                  :op2 \"Chapin\")\n            :age (t / temporal-quantity\n                  :quant 34\n                  :unit (y / year))\n            :source (c / city\n                  :name (n2 / name\n                        :op1 \"West\"\n                        :op2 \"Linn\")\n                  :location (s / state\n                        :name (n3 / name\n                              :op1 \"Oregon\"))))\n      :ARG2 (h / harass-01\n            :ARG0 p))",
      "# ::snt Referred to Eva Chapin , 34 , from West Linn , Oregon , neighbors as ' n *\n(r / refer-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Eva\"\n                  :op2 \"Chapin\")\n            :age (t / temporal-quantity\n                  :quant 34\n                  :unit (y / year))\n            :source (c / city\n                  :name (n2 / name\n                        :op1 \"West\"\n                        :op2 \"Linn\")\n                  :location (s / state\n                        :name (n3 / name\n                              :op1 \"Oregon\")))\n            :ARG1-of (n4 / neighbor-01)))",
      "# ::snt * * * * '\n(a / amr-empty)",
      "# ::snt but insists Eva Chapin , 34 , from West Linn , Oregon , is not racist .\n(c / contrast-01\n      :ARG2 (ii / insist-01\n            :ARG1 (r / racist\n                  :polarity -\n                  :domain (p / person\n                        :name (n / name\n                              :op1 \"Eva\"\n                              :op2 \"Chapin\")\n                        :age (t / temporal-quantity\n                              :quant 34\n                              :unit (y / year))\n                        :source (c2 / city\n                              :name (n2 / name\n                                    :op1 \"West\"\n                                    :op2 \"Linn\")\n                              :location (s / state\n                                    :name (n3 / name\n                                          :op1 \"Oregon\")))))))",
      "# ::snt One note said : ' There were no [ expletive ] in West Linn , Oregon until Eva Chapin , 34 , from West Linn , Oregon , came ' .\n(s / say-01\n      :ARG0 (n / note\n            :quant 1)\n      :ARG1 (b / be-located-at-91\n            :polarity -\n            :ARG1 (e / expletive)\n            :ARG2 (c / city\n                  :name (n2 / name\n                        :op1 \"West\"\n                        :op2 \"Linn\")\n                  :location (s2 / state\n                        :name (n3 / name\n                              :op1 \"Oregon\")))\n            :time (u / until\n                  :op1 (c2 / come-01\n                        :ARG1 (p / person\n                              :name (n4 / name\n                                    :op1 \"Eva\"\n                                    :op2 \"Chapin\")\n                              :age (t / temporal-quantity\n                                    :quant 34\n                                    :unit (y / year))\n                              :source c)))))",
      "# ::snt Eva Chapin , 34 , from West Linn , Oregon , has said Eva Chapin , 34 , from West Linn , Oregon , family may be forced to move as her family do n't feel safe .\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Eva\"\n                  :op2 \"Chapin\")\n            :age (t / temporal-quantity\n                  :quant 34\n                  :unit (y / year))\n            :source (c / city\n                  :name (n2 / name\n                        :op1 \"West\"\n                        :op2 \"Linn\")\n                  :location (s2 / state\n                        :name (n3 / name\n                              :op1 \"Oregon\"))))\n      :ARG1 (p2 / possible-01\n            :ARG1 (f / force-01\n                  :ARG1 (f2 / family)\n                  :ARG2 (m / move-01\n                        :ARG1 f2)\n                  :ARG1-of (c2 / cause-01\n                        :ARG0 (f3 / feel-01\n                              :polarity -\n                              :ARG0 (f4 / family\n                                    :ARG1-of (h / have-org-role-91\n                                          :ARG0 p\n                                          :ARG2 (m2 / member)))\n                              :ARG1 (s3 / safe-01\n                                    :ARG1 f4))))))"
    ],
    "tree": [
      "(a / accuse-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Eva\"\n                     :op2 \"Chapin\")))",
      "(a / accuse-01\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :quant 34)))",
      "(a / accuse-01\n   :ARG2 (h / harass-01\n            :ARG0 (p / person :name (n / name :op1 \"Eva\" :op2 \"Chapin\")))))",
      "(a / accuse-01\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :quant 34))\n   :ARG2 (h / harass-01\n            :ARG0 p))",
      "(r / refer-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Eva\"\n                     :op2 \"Chapin\")))",
      "(r / refer-01\n   :ARG1 (p / person\n            :ARG1 (n4 / neighbor-01)))",
      "(p / person\n   :name (n / name\n            :op1 \"Eva\"\n            :op2 \"Chapin\")\n   :source (c / city\n              :name (n2 / name\n                        :op1 \"West\"\n                        :op2 \"Linn\")))",
      "(p / person\n   :name (n / name\n            :op1 \"Eva\"\n            :op2 \"Chapin\")\n   :age (t / temporal-quantity\n           :quant 34)\n   :source (c / city\n              :name (n2 / name\n                        :op1 \"West\"\n                        :op2 \"Linn\")))",
      "(p / person\n   :name (n / name\n            :op1 \"Eva\"\n            :op2 \"Chapin\")\n   :age (t / temporal-quantity\n           :quant 34)\n   :source (c / city\n              :location (s / state\n                           :name (n3 / name\n                                     :op1 \"Oregon\"))))",
      "(a / amr-empty)",
      "(p / person\n   :name (n / name\n            :op1 \"Eva\"\n            :op2 \"Chapin\")\n   :age (t / temporal-quantity\n           :quant 34))",
      "(p / person\n   :name (n / name\n            :op1 \"Eva\"\n            :op2 \"Chapin\")\n   :source (c2 / city\n               :name (n2 / name\n                         :op1 \"West\"\n                         :op2 \"Linn\")))",
      "(p / person\n   :name (n / name\n            :op1 \"Eva\"\n            :op2 \"Chapin\")\n   :source (c2 / city\n               :location (s / state\n                            :name (n3 / name\n                                      :op1 \"Oregon\"))))",
      "(p / person\n   :name (n / name\n            :op1 \"Eva\"\n            :op2 \"Chapin\")\n   :age (t / temporal-quantity\n           :quant 34)\n   :source (c2 / city\n               :name (n2 / name\n                         :op1 \"West\"\n                         :op2 \"Linn\")))",
      "(p / person\n   :name (n / name\n            :op1 \"Eva\"\n            :op2 \"Chapin\")\n   :age (t / temporal-quantity\n           :quant 34)\n   :source (c2 / city\n               :location (s / state\n                            :name (n3 / name\n                                      :op1 \"Oregon\"))))",
      "(s / say-01\n   :ARG0 (n / note\n            :quant 1)\n   :ARG1 (b / be-located-at-91\n            :ARG2 (c / city\n                     :name (n2 / name\n                               :op1 \"West\"\n                               :op2 \"Linn\"))))",
      "(b / be-located-at-91\n   :ARG2 (c / city\n            :location (s2 / state\n                          :name (n3 / name\n                                    :op1 \"Oregon\"))))",
      "(b / be-located-at-91\n   :time (u / until\n            :op1 (c2 / come-01\n                     :ARG1 (p / person\n                              :name (n4 / name\n                                        :op1 \"Eva\"\n                                        :op2 \"Chapin\")))))",
      "(p / person\n   :name (n4 / name\n             :op1 \"Eva\"\n             :op2 \"Chapin\")\n   :age (t / temporal-quantity\n           :quant 34))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Eva\"\n                     :op2 \"Chapin\"))\n   :ARG1 (p2 / possible-01\n             :ARG1 (f / force-01\n                      :ARG2 (m / move-01\n                               :ARG1 (f2 / family)))))",
      "(s / say-01\n   :ARG0 (p / person\n            :age (t / temporal-quantity\n                    :quant 34))\n   :ARG1 (p2 / possible-01\n             :ARG1 (f / force-01\n                      :ARG2 (m / move-01\n                               :ARG1 (f2 / family)))))",
      "(p / person\n   :name (n / name\n            :op1 \"Eva\"\n            :op2 \"Chapin\")\n   :source (c / city\n              :name (n2 / name\n                        :op1 \"West\"\n                        :op2 \"Linn\")))",
      "(p / person\n   :name (n / name\n            :op1 \"Eva\"\n            :op2 \"Chapin\")\n   :source (c / city\n              :location (s2 / state\n                            :name (n3 / name\n                                      :op1 \"Oregon\"))))",
      "(p / person\n   :name (n / name\n            :op1 \"Eva\"\n            :op2 \"Chapin\")\n   :age (t / temporal-quantity\n           :quant 34)\n   :source (c / city\n              :location (s2 / state\n                            :name (n3 / name\n                                      :op1 \"Oregon\"))))"
    ],
    "smus": [
      "Eva Chapin was accused.",
      "The 34-year-old was accused.",
      "Eva Chapin was accused of harassment.",
      "The 34-year-old was accused of harassment.",
      "Referred to Eva Chapin.",
      "Referred to as neighbors.",
      "Eva Chapin from West Linn.",
      "Eva Chapin, 34, of West Linn",
      "Eva Chapin, 34, of Oregon",
      "SetC-WP-01",
      "Eva Chapin, 34",
      "Eva Chapin from West Linn.",
      "Eva Chapin, of Oregon",
      "Eva Chapin, 34, of West Linn",
      "Eva Chapin, 34, of Oregon",
      "One note said West Linn.",
      "located in Oregon.",
      "Until Eva Chapin comes.",
      "Eva Chapin, 34",
      "Eva Chapin said the family could be forced to move.",
      "The 34-year-old said the family could be forced to move.",
      "Eva Chapin from West Linn.",
      "Eva Chapin, of Oregon",
      "Eva Chapin, 34, of Oregon"
    ]
  },
  {
    "instance_id": "realsumm-5",
    "summary": "Justin Rose finished joint runner - up at the Masters 2015 on 14 - under - par . Justin Rose final total has only been bettered six times at the Masters 2015 . Justin Rose hopes to build on Justin Rose display and take some big titles across the year . CLICK HERE for all the latest news and reaction following the Masters 2015 .",
    "summary_trees": [
      "# ::snt Justin Rose finished joint runner - up at the Masters 2015 on 14 - under - par .\n(f / finish-07\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Justin\"\n                  :op2 \"Rose\"))\n      :ARG2 (r / runner-up\n            :mod (j / joint))\n      :ARG3 (e / event\n            :name (n2 / name\n                  :op1 \"Masters\")\n            :time (d / date-entity\n                  :year 2015))\n      :manner (s / score-entity\n            :op1 14\n            :op2 (u / under\n                  :op1 (p2 / par))))",
      "# ::snt Justin Rose final total has only been bettered six times at the Masters 2015 .\n(b / best-01\n      :frequency 6\n      :ARG1 (t / total\n            :mod (f / final)\n            :poss (p / person\n                  :name (n / name\n                        :op1 \"Justin\"\n                        :op2 \"Rose\")))\n      :mod (o / only)\n      :time (g / game\n            :name (n2 / name\n                  :op1 \"Masters\")\n            :time (d / date-entity\n                  :year 2015)))",
      "# ::snt Justin Rose hopes to build on Justin Rose display and take some big titles across the year .\n(h / hope-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Justin\"\n                  :op2 \"Rose\"))\n      :ARG1 (a / and\n            :op1 (b / build-01\n                  :ARG0 p\n                  :ARG2 (d / display-01\n                        :ARG0 p))\n            :op2 (t / take-01\n                  :ARG0 p\n                  :ARG1 (t2 / title\n                        :mod (b2 / big)\n                        :quant (s / some))\n                  :time (a2 / across\n                        :op1 (y / year)))))",
      "# ::snt CLICK HERE for all the latest news and reaction following the Masters 2015 .\n(c / click-01\n      :location (h / here)\n      :purpose (a / and\n            :op1 (n / news\n                  :mod (l / last))\n            :op2 (r / react-01)\n            :mod (a2 / all)\n            :ARG1-of (f / follow-01\n                  :ARG2 (e / event\n                        :name (n2 / name\n                              :op1 \"Masters\"\n                              :op2 \"Open\")\n                        :time (d / date-entity\n                              :year 2015)))))"
    ],
    "tree": [
      "(f / finish-07\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Justin\"\n                     :op2 \"Rose\")))",
      "(f / finish-07\n   :ARG2 (r / runner-up\n            :mod (j / joint)))",
      "(f / finish-07\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Justin\"\n                     :op2 \"Rose\"))\n   :ARG2 (r / runner-up\n            :mod (j / joint)))",
      "(f / finish-07\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Justin\"\n                     :op2 \"Rose\"))\n   :ARG2 (r / runner-up\n            :mod (j / joint))\n   :ARG3 (e / event\n            :name (n2 / name\n                      :op1 \"Masters\")))",
      "(f / finish-07\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Justin\"\n                     :op2 \"Rose\"))\n   :ARG2 (r / runner-up\n            :mod (j / joint))\n   :ARG3 (e / event\n            :time (d / date-entity\n                     :year 2015)))",
      "(b / best-01\n   :ARG1 (t / total\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Justin\"\n                              :op2 \"Rose\")))\n   :time (g / game\n            :name (n2 / name\n                      :op1 \"Masters\")))",
      "(t / total\n   :poss (p / person\n            :name (n / name\n                     :op1 \"Justin\"\n                     :op2 \"Rose\")))",
      "(p / person\n   :name (n / name\n            :op1 \"Justin\"\n            :op2 \"Rose\"))",
      "(g / game\n   :name (n2 / name\n             :op1 \"Masters\"))",
      "(g / game\n   :name (n2 / name\n             :op1 \"Masters\")\n   :time (d / date-entity\n            :year 2015))",
      "(h / hope-01\n   :ARG1 (t / take-01\n            :time (a2 / across\n                      :op1 (y / year))))",
      "(h / hope-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Justin\"\n                     :op2 \"Rose\"))\n   :ARG1 (b / build-01\n            :ARG0 p))",
      "(h / hope-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Justin\"\n                     :op2 \"Rose\"))\n   :ARG1 (t / take-01\n            :ARG0 p))",
      "(h / hope-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Justin\"\n                     :op2 \"Rose\"))\n   :ARG1 (t / take-01\n            :time (a2 / across\n                      :op1 (y / year))))",
      "(h / hope-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Justin\"\n                     :op2 \"Rose\"))\n   :ARG1 (t / take-01\n            :ARG1 (t2 / title\n                      :quant (s / some))))",
      "(c / click-01\n   :purpose (n / news\n               :mod (l / last)))",
      "(c / click-01\n   :location (h / here)\n   :purpose (n / news\n               :mod (l / last)))",
      "(c / click-01\n   :location (h / here)\n   :purpose (r / react-01))",
      "(a / and\n   :op1 (n / news\n           :mod (l / last))\n   :mod (a2 / all)\n   :ARG1 (f / follow-01\n            :ARG2 (e / event\n                     :time (d / date-entity\n                              :year 2015))))",
      "(a / and\n   :op1 (n / news\n           :mod (l / last))\n   :op2 (r / react-01)\n   :ARG1 (f / follow-01\n            :ARG2 (e / event\n                     :time (d / date-entity\n                              :year 2015))))"
    ],
    "smus": [
      "Justin Rose finished.",
      "finished joint runner up.",
      "Justin Rose finished joint runner up.",
      "Justin Rose finished joint runner up at the Masters.",
      "Justin Rose finished joint runner up in 2015",
      "Justin Rose's total was best during the Masters.",
      "Justin Rose's total.",
      "Justin Rose",
      "Masters",
      "Masters 2015",
      "Hopes to take across the year.",
      "Justin Rose hopes to build.",
      "Justin Rose hopes to take.",
      "Justin Rose hopes to take across the year.",
      "Justin Rose hopes to take some titles.",
      "Clicks for the latest news.",
      "Click here for the latest news.",
      "Clicks here for reaction.",
      "And all the latest news following what happened in 2015.",
      "Following what happened in 2015, there was the latest news and reaction."
    ]
  },
  {
    "instance_id": "realsumm-6",
    "summary": "Girl was playing with friend when Zbigniew Huminski forced Chloe 's into car . Chloe 's naked body was found in nearby woods an hour - and - a - half later . Prosecutors say there is evidence of ' strangulation and sexual violence ' Polish immigrant , who was heading to England , has admitted to killing .",
    "summary_trees": [
      "# ::snt Girl was playing with friend when Zbigniew Huminski forced Chloe 's into car .\n(p / play-01\n      :ARG0 (g / girl)\n      :ARG3 (p2 / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 g\n                  :ARG2 (f / friend)))\n      :time (f2 / force-01\n            :ARG0 (p3 / person\n                  :name (n / name\n                        :op1 \"Zbigniew\"\n                        :op2 \"Huminski\"))\n            :ARG1 (t / thing\n                  :poss (p4 / person\n                        :name (n2 / name\n                              :op1 \"Chloe\")))\n            :ARG2 (c / car)))",
      "# ::snt Chloe 's naked body was found in nearby woods an hour - and - a - half later .\n(f / find-01\n      :ARG1 (b / body\n            :poss (p / person\n                  :name (n / name\n                        :op1 \"Chloe\"))\n            :ARG1-of (n2 / naked-02))\n      :location (w / woods\n            :location (n3 / nearby))\n      :time (a / after\n            :quant (t / temporal-quantity\n                  :quant 1.5\n                  :unit (h / hour))))",
      "# ::snt Prosecutors say there is evidence of ' strangulation and sexual violence ' Polish immigrant , who was heading to England , has admitted to killing .\n(s / say-01\n      :ARG0 (p / person\n            :ARG0-of (p2 / prosecute-01))\n      :ARG1 (e / evidence-01\n            :ARG1 (a / and\n                  :op1 (s2 / strangulate-01)\n                  :op2 (v / violence\n                        :mod (s3 / sex)))\n            :ARG1-of (c / cause-01\n                  :ARG0 (a2 / admit-01\n                        :ARG0 (p3 / person\n                              :ARG0-of (ii / immigrate-01\n                                    :ARG2 (c2 / country\n                                          :name (n / name\n                                                :op1 \"Poland\")))\n                              :ARG0-of (h / head-02\n                                    :ARG1 (c3 / country\n                                          :name (n2 / name\n                                                :op1 \"England\"))))\n                        :ARG1 (k / kill-01\n                              :ARG0 p3)))))"
    ],
    "tree": [
      "(p / play-01\n   :ARG3 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG2 (f / friend))))",
      "(p / play-01\n   :ARG0 (g / girl)\n   :ARG3 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG2 (f / friend))))",
      "(p / play-01\n   :ARG0 (g / girl)\n   :time (f2 / force-01\n             :ARG0 (p3 / person\n                       :name (n / name\n                                :op1 \"Zbigniew\"\n                                :op2 \"Huminski\"))))",
      "(f2 / force-01\n    :ARG0 (p3 / person\n              :name (n / name\n                       :op1 \"Zbigniew\"\n                       :op2 \"Huminski\")))",
      "(f / find-01\n   :ARG1 (b / body\n            :ARG1 (n2 / naked-02)))",
      "(f / find-01\n   :location (w / woods\n                :location (n3 / nearby)))",
      "(f / find-01\n   :ARG1 (b / body\n            :ARG1 (n2 / naked-02))\n   :location (w / woods\n                :location (n3 / nearby)))",
      "(f / find-01\n   :ARG1 (b / body\n            :ARG1 (n2 / naked-02))\n   :time (a / after\n            :quant (t / temporal-quantity\n                      :unit (h / hour))))",
      "(f / find-01\n   :ARG1 (b / body\n            :ARG1 (n2 / naked-02))\n   :location (w / woods\n                :location (n3 / nearby))\n   :time (a / after\n            :quant (t / temporal-quantity\n                      :unit (h / hour))))",
      "(s / say-01\n   :ARG1 (e / evidence-01\n            :ARG1 (s2 / strangulate-01)))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (p2 / prosecute-01))\n   :ARG1 (e / evidence-01\n            :ARG1 (s2 / strangulate-01)))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (p2 / prosecute-01))\n   :ARG1 (e / evidence-01\n            :ARG1 (v / violence\n                     :mod (s3 / sex))))",
      "(e / evidence-01\n   :ARG1 (v / violence\n            :mod (s3 / sex)))",
      "(a2 / admit-01\n    :ARG1 (k / kill-01\n             :ARG0 (p3 / person)))"
    ],
    "smus": [
      "Playing with a friend.",
      "The girl was playing with a friend.",
      "The girl was playing when Zbigniew Huminski forced her.",
      "Zbigniew Huminski forced.",
      "The body was found naked.",
      "Found in nearby woods.",
      "A naked body was found in the nearby woods.",
      "The body was found an hour later, naked.",
      "The naked body was found in the nearby woods an hour later.",
      "There is evidence of strangulation, they say.",
      "Prosecutors say there is evidence of strangulation.",
      "Prosecutors say there is evidence of sexual violence.",
      "There is evidence of sexual violence.",
      "People are admitted to killing."
    ]
  },
  {
    "instance_id": "realsumm-7",
    "summary": "Pair were left homeless after storms and met in Connecticut trailer park . Won lottery last year but only cashed prize in after Easter to mark new start . ' Because of Sandy thrilled lottery winner met the love of thrilled lottery winner life ' , said thrilled lottery winner .",
    "summary_trees": [
      "# ::snt Pair were left homeless after storms and met in Connecticut trailer park .\n(a / and\n      :op1 (l / leave-13\n            :ARG1 (p / person\n                  :quant (p2 / pair))\n            :ARG2 (h / homeless\n                  :domain p)\n            :time (a2 / after\n                  :op1 (s / storm)))\n      :op2 (m / meet-03\n            :ARG0 p\n            :location (p3 / park\n                  :mod (t / trailer)\n                  :location (s2 / state\n                        :name (n / name\n                              :op1 \"Connecticut\")))))",
      "# ::snt Won lottery last year but only cashed prize in after Easter to mark new start . '\n(c / contrast-01\n      :ARG1 (w / win-01\n            :ARG2 (l / lottery)\n            :time (y / year\n                  :mod (l2 / last)))\n      :ARG2 (c2 / cash-in-03\n            :ARG1 (p / prize)\n            :time (a / after\n                  :op1 (f / festival\n                        :name (n / name\n                              :op1 \"Easter\")))\n            :purpose (m / mark-01\n                  :ARG1 (s / start-01\n                        :ARG1-of (n2 / new-01)))\n            :mod (o / only)))",
      "# ::snt Because of Sandy thrilled lottery winner met the love of thrilled lottery winner life ' , said thrilled lottery winner .\n(s / say-01\n      :ARG0 (p / person\n            :ARG0-of (w / win-01\n                  :ARG1 (l / lottery))\n            :ARG1-of (t / thrill-01))\n      :ARG1 (c / cause-01\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Sandy\"))\n            :ARG1 (m / meet-02\n                  :ARG0 (p3 / person\n                        :ARG0-of w\n                        :ARG1-of (t2 / thrill-01))\n                  :ARG1 (l2 / love\n                        :poss (l3 / life\n                              :poss p3)))))"
    ],
    "tree": [
      "(l / leave-13\n   :ARG1 (p / person\n            :quant (p2 / pair))\n   :ARG2 (h / homeless\n            :domain p)\n   :time (a2 / after))",
      "(m / meet-03\n   :ARG0 (p / person)\n   :location (p3 / park\n                 :mod (t / trailer)\n                 :location (s2 / state\n                               :name (n / name))))",
      "(c / contrast-01\n   :ARG1 (w / win-01\n            :ARG2 (l / lottery))\n   :ARG2 (c2 / cash-in-03\n             :time (a / after\n                      :op1 (f / festival\n                              :name (n / name\n                                       :op1 \"Easter\")))))",
      "(c / contrast-01\n   :ARG1 (w / win-01\n            :ARG2 (l / lottery))\n   :ARG2 (c2 / cash-in-03\n             :purpose (m / mark-01\n                         :ARG1 (s / start-01\n                                  :ARG1 (n2 / new-01)))))",
      "(c2 / cash-in-03\n    :time (a / after\n             :op1 (f / festival\n                     :name (n / name\n                              :op1 \"Easter\"))))",
      "(c2 / cash-in-03\n    :time (a / after\n             :op1 (f / festival\n                     :name (n / name\n                              :op1 \"Easter\")))\n    :purpose (m / mark-01\n                :ARG1 (s / start-01\n                         :ARG1 (n2 / new-01))))",
      "(a / after\n   :op1 (f / festival\n           :name (n / name\n                    :op1 \"Easter\")))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (w / win-01)))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (w / win-01))\n   :ARG1 (c / cause-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Sandy\"))))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (w :ARG0 p3))\n   :ARG1 (c / cause-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Sandy\"))))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (w :ARG0 p3))\n   :ARG1 (c / cause-01\n            :ARG1 (m / meet-02\n                     :ARG1 (l2 / love\n                               :poss (l3 / life\n                                         :poss p3)))))",
      "(c / cause-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Sandy\")))"
    ],
    "smus": [
      "The pair were left homeless after.",
      "People met at a trailer park in the state.",
      "Lottery wins, but after Easter, cash in.",
      "Lottery wins, but cash in to mark the start of a new.",
      "Cash in after Easter.",
      "After Easter, cash in to mark the start of a new year.",
      "After Easter.",
      "The winner said.",
      "The winner said, \"because Sandy.\"",
      "\"because of Sandy,\" he said.",
      "Because the love of his life met,\" said the person.",
      "Because of Sandy."
    ]
  },
  {
    "instance_id": "realsumm-8",
    "summary": "Cesc Fabregas was caught by trailing arm of Stoke City ace Charlie Adam . Cesc Fabregas picked up the injury during Chelsea 's home win . Stoke City ace Charlie Adam scored wonder goal during Chelsea 's home win but wonder goal was n't enough . Cesc Fabregas took to Instagram to show Cesc Fabregas was all smiles despite the bruises . CLICK HERE for all the latest Chelsea 's news .",
    "summary_trees": [
      "# ::snt Cesc Fabregas was caught by trailing arm of Stoke City ace Charlie Adam .\n(c / catch-03\n      :ARG0 (a / arm\n            :ARG0-of (t / trail-01)\n            :part-of (p / person\n                  :name (n / name\n                        :op1 \"Charlie\"\n                        :op2 \"Adam\")\n                  :mod (t2 / team\n                        :name (n2 / name\n                              :op1 \"Stoke\"\n                              :op2 \"City\"))\n                  :mod (a2 / ace)))\n      :ARG1 (p2 / person\n            :name (n3 / name\n                  :op1 \"Cesc\"\n                  :op2 \"Fabregas\")))",
      "# ::snt Cesc Fabregas picked up the injury during Chelsea 's home win .\n(p / pick-up-04\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Cesc\"\n                  :op2 \"Fabregas\"))\n      :ARG1 (ii / injury)\n      :time (w / win-01\n            :ARG0 (t / team\n                  :name (n2 / name\n                        :op1 \"Chelsea\"))\n            :location (h / home)))",
      "# ::snt Stoke City ace Charlie Adam scored wonder goal during Chelsea 's home win but wonder goal was n't enough .\n(h / have-concession-91\n      :ARG1 (h2 / have-quant-91\n            :polarity -\n            :ARG1 (g / goal\n                  :ARG1-of (w / wonder-02)\n                  :ARG1-of (s / score-01\n                        :ARG0 (p / person\n                              :name (n / name\n                                    :op1 \"Charlie\"\n                                    :op2 \"Adam\")\n                              :mod (a / ace)\n                              :poss (t / team\n                                    :name (n2 / name\n                                          :op1 \"Stoke\"\n                                          :op2 \"City\")))\n                        :time (w2 / win-01\n                              :ARG0 (t2 / team\n                                    :name (n3 / name\n                                          :op1 \"Chelsea\"))\n                              :location (h3 / home))))\n            :ARG3 (e / enough))\n      :ARG2 g)",
      "# ::snt Cesc Fabregas took to Instagram to show Cesc Fabregas was all smiles despite the bruises .\n(t / take-35\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Cesc\"\n                  :op2 \"Fabregas\"))\n      :ARG2 (p2 / publication\n            :name (n2 / name\n                  :op1 \"Instagram\"))\n      :purpose (s / show-01\n            :ARG0 p\n            :ARG1 (s2 / smile-01\n                  :ARG0 p\n                  :concession (b / bruise-01\n                        :ARG1 p)\n                  :mod (a / all))))",
      "# ::snt CLICK HERE for all the latest Chelsea 's news .\n(c / click-01\n      :location (h / here)\n      :purpose (n / news\n            :mod (l / last)\n            :mod (a / all)\n            :poss (p / person\n                  :name (n2 / name\n                        :op1 \"Chelsea\"))))"
    ],
    "tree": [
      "(c / catch-03\n   :ARG1 (p2 / person\n             :name (n3 / name\n                       :op1 \"Cesc\"\n                       :op2 \"Fabregas\")))",
      "(c / catch-03\n   :ARG0 (a / arm\n            :part (p / person\n                     :name (n / name\n                              :op1 \"Charlie\"\n                              :op2 \"Adam\")))\n   :ARG1 (p2 / person\n             :name (n3 / name\n                       :op1 \"Cesc\"\n                       :op2 \"Fabregas\")))",
      "(c / catch-03\n   :ARG0 (a / arm\n            :part (p / person\n                     :mod (a2 / ace)))\n   :ARG1 (p2 / person\n             :name (n3 / name\n                       :op1 \"Cesc\"\n                       :op2 \"Fabregas\")))",
      "(a / arm\n   :ARG0 (t / trail-01)\n   :part (p / person\n            :name (n / name\n                     :op1 \"Charlie\"\n                     :op2 \"Adam\")))",
      "(a / arm\n   :ARG0 (t / trail-01)\n   :part (p / person\n            :mod (a2 / ace)))",
      "(p / pick-up-04\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Cesc\"\n                      :op2 \"Fabregas\"))\n   :time (w / win-01\n            :ARG0 (t / team\n                     :name (n2 / name\n                               :op1 \"Chelsea\"))))",
      "(p / pick-up-04\n   :ARG1 (ii / injury)\n   :time (w / win-01\n            :ARG0 (t / team\n                     :name (n2 / name\n                               :op1 \"Chelsea\"))))",
      "(p / pick-up-04\n   :ARG1 (ii / injury)\n   :time (w / win-01\n            :location (h / home)))",
      "(p / pick-up-04\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Cesc\"\n                      :op2 \"Fabregas\"))\n   :ARG1 (ii / injury)\n   :time (w / win-01\n            :ARG0 (t / team\n                     :name (n2 / name\n                               :op1 \"Chelsea\"))))",
      "(p / pick-up-04\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Cesc\"\n                      :op2 \"Fabregas\"))\n   :ARG1 (ii / injury)\n   :time (w / win-01\n            :location (h / home)))",
      "(s / score-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Charlie\"\n                     :op2 \"Adam\")))",
      "(s / score-01\n   :ARG0 (p / person\n            :mod (a / ace)))",
      "(s / score-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Charlie\"\n                     :op2 \"Adam\"))\n   :time (w2 / win-01\n             :ARG0 (t2 / team\n                       :name (n3 / name\n                                 :op1 \"Chelsea\"))))",
      "(p / person\n   :name (n / name\n            :op1 \"Charlie\"\n            :op2 \"Adam\")\n   :poss (t / team\n            :name (n2 / name\n                      :op1 \"Stoke\"\n                      :op2 \"City\")))",
      "(p / person\n   :name (n / name\n            :op1 \"Charlie\"\n            :op2 \"Adam\")\n   :mod (a / ace)\n   :poss (t / team\n            :name (n2 / name\n                      :op1 \"Stoke\"\n                      :op2 \"City\")))",
      "(t / take-35\n   :purpose (s / show-01\n               :ARG1 (s2 / smile-01\n                         :concession (b / bruise-01\n                                        :ARG1 (p / person :name (n / name :op1 \"Cesc\" :op2 \"Fabregas\"))))))",
      "(t / take-35\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Cesc\"\n                     :op2 \"Fabregas\"))\n   :purpose (s / show-01\n               :ARG1 (s2 / smile-01\n                         :concession (b / bruise-01\n                                        :ARG1 p))))",
      "(t / take-35\n   :ARG2 (p2 / publication\n             :name (n2 / name\n                       :op1 \"Instagram\"))\n   :purpose (s / show-01\n               :ARG1 (s2 / smile-01\n                         :ARG0 (p / person :name (n / name :op1 \"Cesc\" :op2 \"Fabregas\")))))",
      "(t / take-35\n   :ARG2 (p2 / publication\n             :name (n2 / name\n                       :op1 \"Instagram\"))\n   :purpose (s / show-01\n               :ARG1 (s2 / smile-01\n                         :concession (b / bruise-01\n                                        :ARG1 (p / person :name (n / name :op1 \"Cesc\" :op2 \"Fabregas\"))))))",
      "(s2 / smile-01\n    :concession (b / bruise-01\n                   :ARG1 (p / person :name (n / name :op1 \"Cesc\" :op2 \"Fabregas\"))))",
      "(c / click-01\n   :purpose (n / news\n               :mod (l / last)))",
      "(c / click-01\n   :location (h / here)\n   :purpose (n / news\n               :mod (l / last)))",
      "(c / click-01\n   :location (h / here)\n   :purpose (n / news\n               :mod (a / all)))",
      "(c / click-01\n   :location (h / here)\n   :purpose (n / news\n               :poss (p / person\n                        :name (n2 / name\n                                  :op1 \"Chelsea\"))))",
      "(n / news\n   :poss (p / person\n            :name (n2 / name\n                      :op1 \"Chelsea\")))"
    ],
    "smus": [
      "Cesc Fabregas was caught.",
      "Charlie Adam's arm caught Cesc Fabregas.",
      "The ace's arm caught Cesc Fabregas.",
      "Charlie Adam's trailing arm",
      "Trailing arm of an ace.",
      "During Chelsea's win, Cesc Fabregas picked up.",
      "The injury picked up in Chelsea's win.",
      "The injury picked up with the home win.",
      "During Chelsea's win, Cesc Fabregas picked up an injury.",
      "During the home win, Cesc Fabregas picked up an injury.",
      "Charlie Adam scored.",
      "The ace scored.",
      "Charlie Adam scored in Chelsea's win.",
      "Charlie Adam of Stoke City",
      "Charlie Adam is the ace of Stoke City.",
      "It took to show the smiles despite the bruises on Cesc Fabregas.",
      "It took Cesc Fabregas to show smiles despite bruises.",
      "It took an Instagram to show the smiles of Cesc Fabregas.",
      "It took Instagram to show the smiles despite the bruises on Cesc Fabregas.",
      "Smiles, even with the bruises on CescFabregas.",
      "Clicks for the latest news.",
      "Click here for the latest news.",
      "Here's a click for all the news.",
      "Here's a click for Chelsea's news:",
      "Chelsea's news"
    ]
  },
  {
    "instance_id": "realsumm-9",
    "summary": "The life of 16 - year - old Maren Sanchez stabbed to death a year ago on the day of prom was celebrated on Saturday by hundreds of people . ' Darby Hudd , a 17 - year - old friend of the slain teen do n't think there 's anything sad about celebrated . celebrated 's such a celebration , ' said Darby Hudd , a 17 - year - old friend of 16 - year - old Maren Sanchez stabbed to death a year ago on the day of prom . A classmate , Christopher Plaskon , has been charged with 16 - year - old Maren Sanchez stabbed to death a year ago on the day of prom murder .",
    "summary_trees": [
      "# ::snt The life of 16 - year - old Maren Sanchez stabbed to death a year ago on the day of prom was celebrated on Saturday by hundreds of people . '\n(c / celebrate-02\n      :ARG0 (p / person\n            :quant (m / multiple\n                  :op1 100))\n      :ARG1 (l / life\n            :poss (p2 / person\n                  :name (n / name\n                        :op1 \"Maren\"\n                        :op2 \"Sanchez\")\n                  :age (t / temporal-quantity\n                        :quant 16\n                        :unit (y / year))\n                  :ARG1-of (s / stab-01\n                        :ARG4 (d / die-01\n                              :ARG1 p2)\n                        :time (b / before\n                              :op1 (n2 / now)\n                              :quant (t2 / temporal-quantity\n                                    :quant 1\n                                    :unit (y2 / year)))\n                        :time (d2 / day\n                              :time-of (p3 / prom)))))\n      :time (d3 / date-entity\n            :weekday (s2 / saturday)))",
      "# ::snt Darby Hudd , a 17 - year - old friend of the slain teen do n't think there 's anything sad about celebrated .\n(t / think-01\n      :polarity -\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Darby\"\n                  :op2 \"Hudd\")\n            :age (t2 / temporal-quantity\n                  :quant 17\n                  :unit (y / year))\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (t3 / teen\n                        :ARG1-of (s / slay-01))\n                  :ARG2 (f / friend)))\n      :ARG1 (s2 / sad-02\n            :ARG0 (a / anything)\n            :topic (c / celebrate-02)))",
      "# ::snt celebrated 's such a celebration , ' said Darby Hudd , a 17 - year - old friend of 16 - year - old Maren Sanchez stabbed to death a year ago on the day of prom .\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Darby\"\n                  :op2 \"Hudd\")\n            :age (t / temporal-quantity\n                  :quant 17\n                  :unit (y / year))\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Maren\"\n                              :op2 \"Sanchez\")\n                        :age (t2 / temporal-quantity\n                              :quant 16\n                              :unit (y2 / year))\n                        :ARG1-of (s2 / stab-01\n                              :ARG0-of (c / cause-01\n                                    :ARG1 (d / die-01\n                                          :ARG1 p2))\n                              :time (b / before\n                                    :op1 (n3 / now)\n                                    :quant (t3 / temporal-quantity\n                                          :quant 1\n                                          :unit (y3 / year)))\n                              :time (d2 / day\n                                    :time-of (p3 / prom))))\n                  :ARG2 (f / friend)))\n      :ARG1 (c2 / celebrate-01\n            :mod (s3 / such)))",
      "# ::snt A classmate , Christopher Plaskon , has been charged with 16 - year - old Maren Sanchez stabbed to death a year ago on the day of prom murder .\n(c / charge-05\n      :ARG1 (c2 / classmate\n            :name (n / name\n                  :op1 \"Christopher\"\n                  :op2 \"Plaskon\"))\n      :ARG2 (s / stab-01\n            :ARG1 (p / person\n                  :name (n2 / name\n                        :op1 \"Maren\"\n                        :op2 \"Sanchez\")\n                  :age (t / temporal-quantity\n                        :quant 16\n                        :unit (y / year)))\n            :ARG0-of (c3 / cause-01\n                  :ARG1 (d / die-01\n                        :ARG1 p))\n            :time (b / before\n                  :op1 (n3 / now)\n                  :quant (t2 / temporal-quantity\n                        :quant 1\n                        :unit (y2 / year)))\n            :time (d2 / day\n                  :time-of (m / murder-01\n                        :mod (p2 / prom)))))"
    ],
    "tree": [
      "(c / celebrate-02\n   :ARG1 (l / life\n            :poss (p2 / person\n                      :age (t / temporal-quantity\n                              :quant 16))))",
      "(c / celebrate-02\n   :ARG0 (p / person\n            :quant (m / multiple\n                      :op1 100))\n   :ARG1 (l / life\n            :poss (p2 / person\n                      :name (n / name\n                               :op1 \"Maren\"\n                               :op2 \"Sanchez\")))\n   :time (d3 / date-entity\n             :weekday (s2 / saturday)))",
      "(p2 / person\n    :name (n / name\n             :op1 \"Maren\"\n             :op2 \"Sanchez\")\n    :age (t / temporal-quantity\n            :quant 16)\n    :ARG1 (s / stab-01\n             :ARG4 (d / die-01\n                      :ARG1 p2)))",
      "(p2 / person\n    :name (n / name\n             :op1 \"Maren\"\n             :op2 \"Sanchez\")\n    :age (t / temporal-quantity\n            :quant 16)\n    :ARG1 (s / stab-01\n             :time (b / before\n                      :quant (t2 / temporal-quantity\n                                 :unit (y2 / year)))))",
      "(b / before\n   :op1 (n2 / now)\n   :quant (t2 / temporal-quantity\n              :unit (y2 / year)))",
      "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Darby\"\n                     :op2 \"Hudd\"))\n   :ARG1 (s2 / sad-02\n             :topic (c / celebrate-02)))",
      "(p / person\n   :ARG0 (h / have-rel-role-91\n            :ARG2 (f / friend)))",
      "(p / person\n   :name (n / name\n            :op1 \"Darby\"\n            :op2 \"Hudd\")\n   :age (t2 / temporal-quantity\n            :quant 17))",
      "(p / person\n   :name (n / name\n            :op1 \"Darby\"\n            :op2 \"Hudd\")\n   :age (t2 / temporal-quantity\n            :quant 17)\n   :ARG0 (h / have-rel-role-91\n            :ARG2 (f / friend)))",
      "(h / have-rel-role-91\n   :ARG1 (t3 / teen\n             :ARG1 (s / slay-01)))",
      "(p / person\n   :name (n / name\n            :op1 \"Darby\"\n            :op2 \"Hudd\")\n   :age (t / temporal-quantity\n           :quant 17)\n   :ARG0 (h / have-rel-role-91\n            :ARG1 (p2 / person\n                      :age (t2 / temporal-quantity\n                               :unit (y2 / year)))))",
      "(p2 / person\n    :name (n2 / name\n              :op1 \"Maren\"\n              :op2 \"Sanchez\")\n    :age (t2 / temporal-quantity\n             :quant 16))",
      "(p2 / person\n    :name (n2 / name\n              :op1 \"Maren\"\n              :op2 \"Sanchez\")\n    :ARG1 (s2 / stab-01\n              :time (b / before\n                       :quant (t3 / temporal-quantity\n                                  :unit (y3 / year)))))",
      "(p2 / person\n    :name (n2 / name\n              :op1 \"Maren\"\n              :op2 \"Sanchez\")\n    :age (t2 / temporal-quantity\n             :quant 16)\n    :ARG1 (s2 / stab-01\n              :ARG0 (c / cause-01\n                       :ARG1 (d / die-01\n                                :ARG1 p2))))",
      "(p2 / person\n    :name (n2 / name\n              :op1 \"Maren\"\n              :op2 \"Sanchez\")\n    :age (t2 / temporal-quantity\n             :quant 16)\n    :ARG1 (s2 / stab-01\n              :time (b / before\n                       :quant (t3 / temporal-quantity\n                                  :unit (y3 / year)))))",
      "(c / charge-05\n   :ARG1 (c2 / classmate\n             :name (n / name\n                      :op1 \"Christopher\"\n                      :op2 \"Plaskon\")))",
      "(c / charge-05\n   :ARG1 (c2 / classmate\n             :name (n / name\n                      :op1 \"Christopher\"\n                      :op2 \"Plaskon\"))\n   :ARG2 (s / stab-01\n            :ARG1 (p / person\n                     :name (n2 / name\n                               :op1 \"Maren\"\n                               :op2 \"Sanchez\"))))",
      "(c / charge-05\n   :ARG1 (c2 / classmate\n             :name (n / name\n                      :op1 \"Christopher\"\n                      :op2 \"Plaskon\"))\n   :ARG2 (s / stab-01\n            :ARG0 (c3 / cause-01\n                      :ARG1 (d / die-01\n                               :ARG1 (p / person :name (n2 / name :op1 \"Maren\" :op2 \"Sanchez\")))))))",
      "(s / stab-01\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Maren\"\n                      :op2 \"Sanchez\"))\n   :time (b / before\n            :quant (t2 / temporal-quantity\n                       :unit (y2 / year))))",
      "(b / before\n   :op1 (n3 / now)\n   :quant (t2 / temporal-quantity\n              :unit (y2 / year)))"
    ],
    "smus": [
      "The life of the 16-year-old was celebrated.",
      "On Saturday, hundreds celebrated Maren Sanchez's life.",
      "Maren Sanchez, 16, was stabbed to death.",
      "Maren Sanchez, 16, was stabbed a year earlier.",
      "A year ago.",
      "Don't think it's a sad celebration, Darby Hudd.",
      "friend",
      "Darby Husd, 17,",
      "Darby Hudd is a 17-year-old friend.",
      "The teen was a slain.",
      "Darby Husd is a 17 year old.",
      "Maren Sanchez, 16,",
      "Maren Sanchez, stabbed a year earlier",
      "Maren Sanchez, 16, was stabbed to death.",
      "Maren Sanchez, 16, was stabbed a year earlier.",
      "Christopher Plaskon was charged.",
      "Christopher Plaskon was charged with stabbing Maren Sanchez.",
      "Christopher Plaskon was charged with stabbing Maren Sanchez to death.",
      "Maren Sanchez was stabbed a year earlier.",
      "A year ago."
    ]
  },
  {
    "instance_id": "realsumm-10",
    "summary": "Audrey Alexander wanted Audrey Alexander neighbours to chop down her neighbours huge hedge . Audrey Alexander claims their huge hedge was blocking sunlight from reaching Audrey Alexander home . Feud started in 1980 when their huge hedge blocked light from reaching a vegetable patch . Council finally rules that their huge hedge can stay - but must be cut back to 20 ft .",
    "summary_trees": [
      "# ::snt Audrey Alexander wanted Audrey Alexander neighbours to chop down her neighbours huge hedge .\n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Audrey\"\n                  :op2 \"Alexander\"))\n      :ARG1 (c / chop-down-02\n            :ARG0 (p2 / person\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 p\n                        :ARG2 (n2 / neighbor)))\n            :ARG1 (h2 / hedge\n                  :mod (h3 / huge)\n                  :poss p2)))",
      "# ::snt Audrey Alexander claims their huge hedge was blocking sunlight from reaching Audrey Alexander home .\n(c / claim-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Audrey\"\n                  :op2 \"Alexander\"))\n      :ARG1 (b / block-01\n            :ARG0 (h / hedge\n                  :mod (h2 / huge)\n                  :poss (t / they))\n            :ARG1 (s / sunlight)\n            :ARG2 (r / reach-01\n                  :ARG0 s\n                  :ARG1 (h3 / home\n                        :poss p))))",
      "# ::snt Feud started in 1980 when their huge hedge blocked light from reaching a vegetable patch .\n(s / start-01\n      :ARG1 (f / feud-01)\n      :time (d / date-entity\n            :year 1980)\n      :time (b / block-01\n            :ARG0 (h / hedge\n                  :mod (h2 / huge)\n                  :poss (t / they))\n            :ARG1 (r / reach-01\n                  :ARG0 (l / light)\n                  :ARG1 (p / patch\n                        :mod (v / vegetable)))))",
      "# ::snt Council finally rules that their huge hedge can stay - but must be cut back to 20 ft .\n(r / rule-01\n      :ARG0 (c / council)\n      :ARG3 (c2 / contrast-01\n            :ARG1 (p / possible-01\n                  :ARG1 (s / stay-01\n                        :ARG1 (h / hedge\n                              :mod (h2 / huge)\n                              :poss c)))\n            :ARG2 (o / obligate-01\n                  :ARG2 (c3 / cut-back-05\n                        :ARG1 h\n                        :ARG4 (d / distance-quantity\n                              :quant 20\n                              :unit (f / foot)))))\n      :time (f2 / final))"
    ],
    "tree": [
      "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Audrey\"\n                     :op2 \"Alexander\")))",
      "(w / want-01\n   :ARG1 (c / chop-down-02\n            :ARG1 (h2 / hedge\n                      :mod (h3 / huge))))",
      "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Audrey\"\n                     :op2 \"Alexander\"))\n   :ARG1 (c / chop-down-02\n            :ARG1 (h2 / hedge\n                      :mod (h3 / huge))))",
      "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Audrey\"\n                     :op2 \"Alexander\"))\n   :ARG1 (c / chop-down-02\n            :ARG1 (h2 / hedge\n                      :poss (p2 / person))))",
      "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Audrey\"\n                     :op2 \"Alexander\"))\n   :ARG1 (c / chop-down-02\n            :ARG0 (p2 / person\n                      :ARG0 (h / have-rel-role-91\n                               :ARG2 (n2 / neighbor)))))",
      "(c / claim-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Audrey\"\n                     :op2 \"Alexander\"))\n   :ARG1 (b / block-01\n            :ARG0 (h / hedge\n                     :mod (h2 / huge))))",
      "(b / block-01\n   :ARG0 (h / hedge\n            :mod (h2 / huge))\n   :ARG2 (r / reach-01\n            :ARG0 (s / sunlight)))",
      "(b / block-01\n   :ARG0 (h / hedge\n            :mod (h2 / huge))\n   :ARG1 (s / sunlight)\n   :ARG2 (r / reach-01\n            :ARG1 (h3 / home\n                      :poss (p / person :name (n / name :op1 \"Audrey\" :op2 \"Alexander\")))))",
      "(b / block-01\n   :ARG0 (h / hedge\n            :poss (t / they))\n   :ARG1 (s / sunlight)\n   :ARG2 (r / reach-01\n            :ARG1 (h3 / home\n                      :poss (p / person :name (n / name :op1 \"Audrey\" :op2 \"Alexander\")))))",
      "(s / start-01\n   :time (d / date-entity\n            :year 1980))",
      "(s / start-01\n   :ARG1 (f / feud-01)\n   :time (d / date-entity\n            :year 1980))",
      "(b / block-01\n   :ARG0 (h / hedge\n            :mod (h2 / huge)))",
      "(b / block-01\n   :ARG0 (h / hedge\n            :mod (h2 / huge))\n   :ARG1 (r / reach-01\n            :ARG0 (l / light)))",
      "(b / block-01\n   :ARG0 (h / hedge\n            :poss (t / they))\n   :ARG1 (r / reach-01\n            :ARG0 (l / light)))",
      "(r / rule-01\n   :ARG0 (c / council)\n   :ARG3 (c2 / contrast-01\n             :ARG2 (o / obligate-01\n                      :ARG2 (c3 / cut-back-05\n                                :ARG1 (h / hedge\n                                         :mod (h2 / huge))))))",
      "(r / rule-01\n   :ARG0 (c / council)\n   :time (f2 / final))",
      "(c2 / contrast-01\n    :ARG1 (p / possible-01\n             :ARG1 (s / stay-01\n                      :ARG1 (h / hedge\n                               :mod (h2 / huge))))\n    :ARG2 (o / obligate-01\n             :ARG2 (c3 / cut-back-05\n                       :ARG1 h)))",
      "(c2 / contrast-01\n    :ARG1 (p / possible-01\n             :ARG1 (s / stay-01\n                      :ARG1 (h / hedge\n                               :mod (h2 / huge)\n                               :poss (c / council))))\n    :ARG2 (o / obligate-01\n             :ARG2 (c3 / cut-back-05\n                       :ARG1 h)))"
    ],
    "smus": [
      "Audrey Alexander wanted.",
      "wanted to chop down a huge hedge.",
      "Audrey Alexander wanted to chop down a huge hedge.",
      "Audrey Alexander wanted to chop down people's hedge.",
      "Audrey Alexander wanted his neighbors to chop down.",
      "Audrey Alexander claims a huge hedge is blocking.",
      "A huge hedge blocked sunlight from reaching.",
      "A huge hedge blocked sunlight from reaching Audrey Alexander's home.",
      "Their hedge was blocking sunlight from reaching Audrey Alexander's home.",
      "started in 1980.",
      "Feuds started in 1980.",
      "A huge hedge blocked.",
      "A huge hedge blocked light from reaching.",
      "Their hedge blocked the light from reaching.",
      "The Council rules, but the huge hedge must be cut back.",
      "The Council finally rules.",
      "The huge hedge may stay, but it must be cut back.",
      "The Council's huge hedge may stay, but it will have to be cut back."
    ]
  },
  {
    "instance_id": "realsumm-11",
    "summary": "Catherine Nevin was allowed out despite being jailed for life in April 2000 . Catherine Nevin was seen on the bus , with a pal and walking around in Dublin . Sat next to unsuspecting commuter on bus and went totally unnoticed . Catherine Nevin murdered husband Tom in 1996 .",
    "summary_trees": [
      "# ::snt Catherine Nevin was allowed out despite being jailed for life in April 2000 .\n(a / allow-01\n      :ARG1 (o / out-06\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Catherine\"\n                        :op2 \"Nevin\")))\n      :concession (j / jail-01\n            :ARG1 p\n            :ARG2 (l / life)\n            :time (d / date-entity\n                  :year 2000\n                  :month 4)))",
      "# ::snt Catherine Nevin was seen on the bus , with a pal and walking around in Dublin .\n(s / see-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Catherine\"\n                  :op2 \"Nevin\")\n            :accompanier (p2 / person\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 p\n                        :ARG2 (p3 / pal)))\n            :ARG0-of (w / walk-01\n                  :ARG2 (a / around\n                        :op1 (c / city\n                              :name (n2 / name\n                                    :op1 \"Dublin\")))))\n      :location (b / bus))",
      "# ::snt Sat next to unsuspecting commuter on bus and went totally unnoticed .\n(a / and\n      :op1 (s / sit-01\n            :ARG1 (ii / i)\n            :ARG2 (n / next-to\n                  :op1 (p / person\n                        :ARG0-of (c / commute-01)\n                        :ARG0-of (s2 / suspect-01\n                              :polarity -))\n                  :location (b / bus)))\n      :op2 (n2 / notice-01\n            :polarity -\n            :ARG1 ii\n            :degree (t / total)))",
      "# ::snt Catherine Nevin murdered husband Tom in 1996 .\n(m / murder-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Catherine\"\n                  :op2 \"Nevin\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Tom\")\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 p\n                  :ARG2 (h2 / husband)))\n      :time (d / date-entity\n            :year 1996))"
    ],
    "tree": [
      "(a / allow-01\n   :ARG1 (o / out-06\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Catherine\"\n                              :op2 \"Nevin\"))))",
      "(a / allow-01\n   :concession (j / jail-01\n                  :ARG1 (p / person\n                           :name (n / name\n                                    :op1 \"Catherine\"\n                                    :op2 \"Nevin\"))))",
      "(a / allow-01\n   :ARG1 (o / out-06\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Catherine\"\n                              :op2 \"Nevin\")))\n   :concession (j / jail-01\n                  :ARG1 p))",
      "(a / allow-01\n   :ARG1 (o / out-06\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Catherine\"\n                              :op2 \"Nevin\")))\n   :concession (j / jail-01\n                  :ARG2 (l / life)))",
      "(a / allow-01\n   :ARG1 (o / out-06\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Catherine\"\n                              :op2 \"Nevin\")))\n   :concession (j / jail-01\n                  :time (d / date-entity\n                           :year 2000)))",
      "(s / see-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Catherine\"\n                     :op2 \"Nevin\")))",
      "(s / see-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Catherine\"\n                     :op2 \"Nevin\"))\n   :location (b / bus))",
      "(p / person\n   :name (n / name\n            :op1 \"Catherine\"\n            :op2 \"Nevin\")\n   :accompanier (p2 / person\n                    :ARG0 (h / have-rel-role-91\n                             :ARG2 (p3 / pal))))",
      "(p / person\n   :name (n / name\n            :op1 \"Catherine\"\n            :op2 \"Nevin\")\n   :ARG0 (w / walk-01\n            :ARG2 (a / around\n                     :op1 (c / city\n                             :name (n2 / name\n                                       :op1 \"Dublin\")))))",
      "(p / person\n   :name (n / name\n            :op1 \"Catherine\"\n            :op2 \"Nevin\")\n   :accompanier (p2 / person\n                    :ARG0 (h / have-rel-role-91\n                             :ARG2 (p3 / pal)))\n   :ARG0 (w / walk-01\n            :ARG2 (a / around\n                     :op1 (c / city\n                             :name (n2 / name\n                                       :op1 \"Dublin\")))))",
      "(s / sit-01\n   :ARG1 (ii / i)\n   :ARG2 (n / next-to))",
      "(n2 / notice-01\n    :polarity -\n    :ARG1 (ii / i)\n    :degree (t / total))",
      "(m / murder-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Catherine\"\n                     :op2 \"Nevin\")))",
      "(m / murder-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Catherine\"\n                     :op2 \"Nevin\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Tom\")))",
      "(m / murder-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Tom\"))\n   :time (d / date-entity\n            :year 1996))",
      "(m / murder-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Catherine\"\n                     :op2 \"Nevin\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Tom\"))\n   :time (d / date-entity\n            :year 1996))"
    ],
    "smus": [
      "Catherine Nevin was allowed out.",
      "allowed despite Catherine Nevin being jailed.",
      "Catherine Nevin was allowed out despite being jailed.",
      "Catherine Nevin was allowed out despite being jailed for life.",
      "Catherine Nevin was allowed out despite being jailed in 2000.",
      "Catherine Nevin was seen.",
      "Catherine Nevin was seen on the bus.",
      "Catherine Nevin with a pal.",
      "Catherine Nevin walking around Dublin",
      "Catherine Nevin with a pal walking around Dublin.",
      "I'm sitting next to.",
      "I wasn't totally noticed.",
      "Catherine Nevin murdered.",
      "Catherine Nevin murdered Tom.",
      "Tom was murdered in 1996.",
      "Catherine Nevin murdered Tom in 1996."
    ]
  },
  {
    "instance_id": "realsumm-12",
    "summary": "Didier Drogba given the Barclays Spirit of the Game award . Didier Drogba foundation has done impressive work in Africa . Some of Chelsea 's stars attended a charity ball which raised \u00a3 400,000 . CLICK HERE for all the latest Chelsea 's news .",
    "summary_trees": [
      "# ::snt Didier Drogba given the Barclays Spirit of the Game award .\n(g / give-01\n      :ARG1 (a / award\n            :name (n / name\n                  :op1 \"Barclays\"\n                  :op2 \"Spirit\"\n                  :op3 \"of\"\n                  :op4 \"the\"\n                  :op5 \"Game\"))\n      :ARG2 (p / person\n            :name (n2 / name\n                  :op1 \"Didier\"\n                  :op2 \"Drogba\")))",
      "# ::snt Didier Drogba foundation has done impressive work in Africa .\n(w / work-01\n      :ARG0 (f / foundation\n            :poss (p / person\n                  :name (n / name\n                        :op1 \"Didier\"\n                        :op2 \"Drogba\")))\n      :ARG0-of (ii / impress-01)\n      :location (c / continent\n            :name (n2 / name\n                  :op1 \"Africa\")))",
      "# ::snt Some of Chelsea 's stars attended a charity ball which raised \u00a3 400,000 .\n(a / attend-01\n      :ARG0 (s / star\n            :ARG1-of (ii / include-91\n                  :ARG2 (s2 / star\n                        :poss (p / person\n                              :name (n / name\n                                    :op1 \"Chelsea\"))))\n            :quant (s3 / some))\n      :ARG1 (b / ball\n            :purpose (c / charity)\n            :ARG0-of (r / raise-02\n                  :ARG1 (m / monetary-quantity\n                        :quant 400000\n                        :unit (p2 / pound)))))",
      "# ::snt CLICK HERE for all the latest Chelsea 's news .\n(c / click-01\n      :location (h / here)\n      :purpose (n / news\n            :mod (l / last)\n            :mod (a / all)\n            :poss (p / person\n                  :name (n2 / name\n                        :op1 \"Chelsea\"))))"
    ],
    "tree": [
      "(g / give-01\n   :ARG1 (a / award\n            :name (n / name\n                     :op1 \"Barclays\"\n                     :op2 \"Spirit\"\n                     :op3 \"of\"\n                     :op4 \"the\"\n                     :op5 \"Game\")))",
      "(g / give-01\n   :ARG2 (p / person\n            :name (n2 / name\n                      :op1 \"Didier\"\n                      :op2 \"Drogba\")))",
      "(g / give-01\n   :ARG1 (a / award\n            :name (n / name\n                     :op1 \"Barclays\"\n                     :op2 \"Spirit\"\n                     :op3 \"of\"\n                     :op4 \"the\"\n                     :op5 \"Game\"))\n   :ARG2 (p / person\n            :name (n2 / name\n                      :op1 \"Didier\"\n                      :op2 \"Drogba\")))",
      "(a / award\n   :name (n / name\n            :op1 \"Barclays\"\n            :op2 \"Spirit\"\n            :op3 \"of\"\n            :op4 \"the\"\n            :op5 \"Game\"))",
      "(p / person\n   :name (n2 / name\n             :op1 \"Didier\"\n             :op2 \"Drogba\"))",
      "(w / work-01\n   :ARG0 (f / foundation\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Didier\"\n                              :op2 \"Drogba\"))))",
      "(w / work-01\n   :location (c / continent\n                :name (n2 / name\n                          :op1 \"Africa\")))",
      "(w / work-01\n   :ARG0 (f / foundation\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Didier\"\n                              :op2 \"Drogba\")))\n   :location (c / continent\n                :name (n2 / name\n                          :op1 \"Africa\")))",
      "(f / foundation\n   :poss (p / person\n            :name (n / name\n                     :op1 \"Didier\"\n                     :op2 \"Drogba\")))",
      "(p / person\n   :name (n / name\n            :op1 \"Didier\"\n            :op2 \"Drogba\"))",
      "(a / attend-01\n   :ARG0 (s / star\n            :quant (s3 / some)))",
      "(a / attend-01\n   :ARG1 (b / ball\n            :purpose (c / charity)))",
      "(a / attend-01\n   :ARG0 (s / star\n            :ARG1 (ii / include-91\n                      :ARG2 (s2 / star\n                                :poss (p / person\n                                         :name (n / name\n                                                  :op1 \"Chelsea\")))))\n   :ARG1 (b / ball\n            :purpose (c / charity)))",
      "(a / attend-01\n   :ARG0 (s / star\n            :quant (s3 / some))\n   :ARG1 (b / ball\n            :purpose (c / charity)))",
      "(a / attend-01\n   :ARG0 (s / star\n            :quant (s3 / some))\n   :ARG1 (b / ball\n            :ARG0 (r / raise-02\n                     :ARG1 (m / monetary-quantity\n                              :quant 400000))))",
      "(c / click-01\n   :purpose (n / news\n               :mod (l / last)))",
      "(c / click-01\n   :location (h / here)\n   :purpose (n / news\n               :mod (l / last)))",
      "(c / click-01\n   :location (h / here)\n   :purpose (n / news\n               :mod (a / all)))",
      "(c / click-01\n   :location (h / here)\n   :purpose (n / news\n               :poss (p / person\n                        :name (n2 / name\n                                  :op1 \"Chelsea\"))))",
      "(n / news\n   :poss (p / person\n            :name (n2 / name\n                      :op1 \"Chelsea\")))"
    ],
    "smus": [
      "The Barclays Spirit of the Game award was given",
      "given to Didier Drogba",
      "The Barclays Spirit of the Game award was given to Didier Drogba.",
      "The Barclays Spirit of the Game award",
      "Didier Drogba",
      "The work of Didier Drogba's foundation.",
      "Work in Africa.",
      "The work of Didier Drogba's foundation is in Africa.",
      "The foundation of Didier Drogba.",
      "Didier Drogba",
      "Some stars attended.",
      "attended a charity ball.",
      "Some of Chelsea's stars attended a charity ball.",
      "Some stars attended a charity ball.",
      "Some stars attended the ball that raised 400,000.",
      "Clicks for the latest news.",
      "Click here for the latest news.",
      "Here's a click for all the news.",
      "Here's a click for Chelsea's news:",
      "Chelsea's news"
    ]
  },
  {
    "instance_id": "realsumm-13",
    "summary": "Figures from the Catholic Church show more and more becoming nuns . The number of women taking Holy Vows stood at just seven back in 2004 . But The number of women taking Holy Vows had risen to 15 in 2009 and increased further to 45 last year . One father said a ' gap in the market for meaning ' led people toward religion .",
    "summary_trees": [
      "# ::snt Figures from the Catholic Church show more and more becoming nuns .\n(s / show-01\n      :ARG0 (f / figure\n            :source (o / organization\n                  :name (n / name\n                        :op1 \"Catholic\"\n                        :op2 \"Church\")))\n      :ARG1 (b / become-01\n            :ARG1 (p / person\n                  :quant (n2 / number\n                        :ARG1-of (ii / increase-01)))\n            :ARG2 (n3 / nun)))",
      "# ::snt The number of women taking Holy Vows stood at just seven back in 2004 .\n(s / stand-04\n      :ARG1 (n / number\n            :quant-of (w / woman\n                  :ARG0-of (t / take-01\n                        :ARG1 (t2 / thing\n                              :name (n2 / name\n                                    :op1 \"Holy\"\n                                    :op2 \"Vow\")))))\n      :ARG2 (n3 / numerical-quantity\n            :quant 7\n            :mod (j / just))\n      :time (d / date-entity\n            :year 2004))",
      "# ::snt But The number of women taking Holy Vows had risen to 15 in 2009 and increased further to 45 last year .\n(c / contrast-01\n      :ARG2 (a / and\n            :op1 (r / rise-01\n                  :ARG1 (n / number\n                        :quant-of (w / woman\n                              :ARG0-of (t / take-01\n                                    :ARG1 (v / vow-01\n                                          :mod (h / holy)))))\n                  :ARG4 15\n                  :time (d / date-entity\n                        :year 2009))\n            :op2 (ii / increase-01\n                  :ARG1 n\n                  :ARG4 45\n                  :degree (f / further)\n                  :time (y / year\n                        :mod (l / last)))))",
      "# ::snt One father said a ' gap in the market for meaning ' led people toward religion .\n(s / say-01\n      :ARG0 (p / person\n            :quant 1\n            :ARG0-of (h / have-rel-role-91\n                  :ARG2 (f / father)))\n      :ARG1 (l / lead-01\n            :ARG0 (g / gap\n                  :location (m / market)\n                  :topic (m2 / mean-01))\n            :ARG1 (p2 / person)\n            :ARG4 (r / religion)))"
    ],
    "tree": [
      "(s / show-01\n   :ARG1 (b / become-01\n            :ARG2 (n3 / nun)))",
      "(s / show-01\n   :ARG0 (f / figure\n            :source (o / organization\n                       :name (n / name\n                                :op1 \"Catholic\"\n                                :op2 \"Church\")))\n   :ARG1 (b / become-01\n            :ARG2 (n3 / nun)))",
      "(f / figure\n   :source (o / organization\n              :name (n / name\n                       :op1 \"Catholic\"\n                       :op2 \"Church\")))",
      "(o / organization\n   :name (n / name\n            :op1 \"Catholic\"\n            :op2 \"Church\"))",
      "(b / become-01\n   :ARG1 (p / person\n            :quant (n2 / number\n                       :ARG1 (ii / increase-01)))\n   :ARG2 (n3 / nun))",
      "(s / stand-04\n   :ARG2 (n3 / numerical-quantity\n             :quant 7))",
      "(s / stand-04\n   :ARG1 (n / number\n            :quant (w / woman\n                      :ARG0 (t / take-01\n                               :ARG1 (t2 / thing\n                                         :name (n2 / name\n                                                   :op1 \"Holy\"\n                                                   :op2 \"Vow\")))))\n   :ARG2 (n3 / numerical-quantity\n             :quant 7))",
      "(s / stand-04\n   :ARG2 (n3 / numerical-quantity\n             :quant 7)\n   :time (d / date-entity\n            :year 2004))",
      "(s / stand-04\n   :ARG1 (n / number\n            :quant (w / woman\n                      :ARG0 (t / take-01\n                               :ARG1 (t2 / thing\n                                         :name (n2 / name\n                                                   :op1 \"Holy\"\n                                                   :op2 \"Vow\")))))\n   :ARG2 (n3 / numerical-quantity\n             :quant 7)\n   :time (d / date-entity\n            :year 2004))",
      "(w / woman\n   :ARG0 (t / take-01\n            :ARG1 (t2 / thing\n                      :name (n2 / name\n                                :op1 \"Holy\"\n                                :op2 \"Vow\"))))",
      "(a / and\n   :op2 (ii / increase-01\n            :time (y / year\n                     :mod (l / last))))",
      "(a / and\n   :op1 (r / rise-01\n           :ARG1 (n / number\n                    :quant (w / woman\n                              :ARG0 (t / take-01\n                                       :ARG1 (v / vow-01\n                                                :mod (h / holy))))))\n   :op2 (ii / increase-01\n            :degree (f / further)))",
      "(r / rise-01\n   :ARG1 (n / number\n            :quant (w / woman\n                      :ARG0 (t / take-01\n                               :ARG1 (v / vow-01\n                                        :mod (h / holy)))))\n   :time (d / date-entity\n            :year 2009))",
      "(n / number\n   :quant (w / woman\n             :ARG0 (t / take-01\n                      :ARG1 (v / vow-01\n                               :mod (h / holy)))))",
      "(ii / increase-01\n    :time (y / year\n             :mod (l / last)))",
      "(s / say-01\n   :ARG0 (p / person\n            :quant 1)\n   :ARG1 (l / lead-01\n            :ARG0 (g / gap\n                     :topic (m2 / mean-01))))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (f / father)))\n   :ARG1 (l / lead-01\n            :ARG1 (p2 / person)))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (f / father)))\n   :ARG1 (l / lead-01\n            :ARG4 (r / religion)))",
      "(l / lead-01\n   :ARG0 (g / gap\n            :location (m / market))\n   :ARG1 (p2 / person)\n   :ARG4 (r / religion))",
      "(l / lead-01\n   :ARG0 (g / gap\n            :topic (m2 / mean-01))\n   :ARG1 (p2 / person)\n   :ARG4 (r / religion))"
    ],
    "smus": [
      "Shows how nuns are becoming.",
      "Catholic Church figures show nuns becoming.",
      "Catholic Church figures",
      "The Catholic Church.",
      "More and more people are becoming nuns.",
      "stood at 7.",
      "The number of women taking Holy Vow stood at 7.",
      "In 2004, it stood at 7.",
      "In 2004, the number of women taking Holy Vow stood at 7.",
      "Women taking Holy Voi.",
      "And increased last year.",
      "The number of women taking the Holy Vows rose and increased further.",
      "The number of women taking the holy vows has risen in 2009.",
      "There are a number of women taking the holy vows.",
      "Increased last year.",
      "One said the gap in meaning had led.",
      "The father said the people were led.",
      "The father said that religion is led.",
      "The gap in the market has led people to religion.",
      "The meaning gap has led people to religion."
    ]
  },
  {
    "instance_id": "realsumm-14",
    "summary": "Eduardo Vargas put QPR ahead with a spectacular strike from 25 yards after 15 minutes . Charlie Austin doubled the lead with a header 20 minutes later , Bobby Zamora made it three . Victor Anichebe pulled one back for West Brom before Youssouf Mulumbu was sent off and Joey Barton scored .",
    "summary_trees": [
      "# ::snt Eduardo Vargas put QPR ahead with a spectacular strike from 25 yards after 15 minutes .\n(p / put-03\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Eduardo\"\n                  :op2 \"Vargas\"))\n      :ARG1 (t / team\n            :name (n2 / name\n                  :op1 \"QPR\"))\n      :ARG2 (a / ahead)\n      :manner (s / strike-01\n            :ARG0 p2\n            :ARG2 (d / distance-quantity\n                  :quant 25\n                  :unit (y / yard))\n            :mod (s2 / spectacular))\n      :time (a2 / after\n            :quant (t2 / temporal-quantity\n                  :quant 15\n                  :unit (m / minute))))",
      "# ::snt Charlie Austin doubled the lead with a header 20 minutes later , Bobby Zamora made it three .\n(a / and\n      :op1 (d / double-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Charlie\"\n                        :op2 \"Austin\"))\n            :ARG1 (l / lead-01)\n            :instrument (h / header)\n            :time (a2 / after\n                  :quant (t / temporal-quantity\n                        :quant 20\n                        :unit (m / minute))))\n      :op2 (m2 / make-01\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Bobby\"\n                        :op2 \"Zamora\"))\n            :ARG1 l\n            :quant 3))",
      "# ::snt Victor Anichebe pulled one back for West Brom before Youssouf Mulumbu was sent off and Joey Barton scored .\n(p / pull-back-09\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Victor\"\n                  :op2 \"Anichebe\"))\n      :ARG1 (o / one)\n      :beneficiary (t / team\n            :name (n2 / name\n                  :op1 \"West\"\n                  :op2 \"Brum\"))\n      :time (b / before\n            :op1 (a / and\n                  :op1 (s / send-off-08\n                        :ARG1 (p3 / person\n                              :name (n3 / name\n                                    :op1 \"Youssouf\"\n                                    :op2 \"Mulumbu\")))\n                  :op2 (s2 / score-01\n                        :ARG0 (p4 / person\n                              :name (n4 / name\n                                    :op1 \"Joey\"\n                                    :op2 \"Barton\"))))))"
    ],
    "tree": [
      "(p / put-03\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Eduardo\"\n                      :op2 \"Vargas\"))\n   :ARG1 (t / team\n            :name (n2 / name\n                      :op1 \"QPR\"))\n   :ARG2 (a / ahead))",
      "(p / put-03\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Eduardo\"\n                      :op2 \"Vargas\"))\n   :ARG1 (t / team\n            :name (n2 / name\n                      :op1 \"QPR\"))\n   :time (a2 / after\n             :quant (t2 / temporal-quantity\n                        :quant 15)))",
      "(p / put-03\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Eduardo\"\n                      :op2 \"Vargas\"))\n   :ARG1 (t / team\n            :name (n2 / name\n                      :op1 \"QPR\"))\n   :ARG2 (a / ahead)\n   :time (a2 / after\n             :quant (t2 / temporal-quantity\n                        :quant 15)))",
      "(p / put-03\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Eduardo\"\n                      :op2 \"Vargas\"))\n   :ARG2 (a / ahead)\n   :manner (s / strike-01\n              :ARG0 p2\n              :ARG2 (d / distance-quantity)\n              :mod (s2 / spectacular))\n   :time (a2 / after\n             :quant (t2 / temporal-quantity\n                        :quant 15)))",
      "(p / put-03\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Eduardo\"\n                      :op2 \"Vargas\"))\n   :ARG1 (t / team\n            :name (n2 / name\n                      :op1 \"QPR\"))\n   :ARG2 (a / ahead)\n   :manner (s / strike-01\n              :ARG0 p2\n              :ARG2 (d / distance-quantity)\n              :mod (s2 / spectacular))\n   :time (a2 / after\n             :quant (t2 / temporal-quantity\n                        :quant 15)))",
      "(d / double-01\n   :ARG0 (p / person\n            :name (n / name)))",
      "(m2 / make-01\n    :ARG0 (p2 / person\n              :name (n2 / name)))",
      "(p / pull-back-09\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Victor\"\n                      :op2 \"Anichebe\")))",
      "(p / pull-back-09\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Victor\"\n                      :op2 \"Anichebe\"))\n   :ARG1 (o / one))",
      "(a / and\n   :op1 (s / send-off-08\n           :ARG1 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Youssouf\"\n                               :op2 \"Mulumbu\"))))",
      "(s / send-off-08\n   :ARG1 (p3 / person\n             :name (n3 / name\n                       :op1 \"Youssouf\"\n                       :op2 \"Mulumbu\")))",
      "(s2 / score-01\n    :ARG0 (p4 / person\n              :name (n4 / name\n                        :op1 \"Joey\"\n                        :op2 \"Barton\")))"
    ],
    "smus": [
      "Eduardo Vargas put QPR ahead.",
      "After 15 minutes Eduardo Vargas put QPR up.",
      "Eduardo Vargas put QPR ahead after 15 minutes.",
      "After 15 minutes, Eduardo Vargas put ahead with a spectacular strike.",
      "After 15 minutes, Eduardo Vargas put QPR ahead with a spectacular strike.",
      "The guy doubled.",
      "You made.",
      "Victor Anichebe pulled back.",
      "Victor Anichebe pulled back one.",
      "And Youssouf Mulumbu was sent off.",
      "Youssouf Mulumbu was sent off.",
      "Joey Barton scored."
    ]
  },
  {
    "instance_id": "realsumm-15",
    "summary": "Detroit Red Wings ' Drew Miller was caught by a skate in the first period against the Ottawa Senators . The massive cut required 50 to 60 stitches to close , but did not damage Miller 's eye . Detroit Red Wings ' lost 2 - 1 but remained in third place in the Atlantic division .",
    "summary_trees": [
      "# ::snt Detroit Red Wings ' Drew Miller was caught by a skate in the first period against the Ottawa Senators .\n(c / catch-02\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Drew\"\n                  :op2 \"Miller\")\n            :part-of (t / team\n                  :name (n2 / name\n                        :op1 \"Detroit\"\n                        :op2 \"Red\"\n                        :op3 \"Wings\")))\n      :ARG2 (s / skate)\n      :time (p2 / period\n            :ord (o / ordinal-entity\n                  :value 1)\n            :subevent-of (o2 / oppose-01\n                  :ARG0 t\n                  :ARG1 (t2 / team\n                        :name (n3 / name\n                              :op1 \"Ottawa\"\n                              :op2 \"Senators\")))))",
      "# ::snt The massive cut required 50 to 60 stitches to close , but did not damage Miller 's eye .\n(c / contrast-01\n      :ARG1 (r / require-01\n            :ARG0 (c2 / close-01\n                  :ARG1 (c3 / cut-01\n                        :mod (m / massive)))\n            :ARG1 (s / stitch\n                  :quant (b / between\n                        :op1 50\n                        :op2 60)))\n      :ARG2 (d / damage-01\n            :polarity -\n            :ARG0 c3\n            :ARG1 (e / eye\n                  :part-of (p / person\n                        :name (n / name\n                              :op1 \"Miller\")))))",
      "# ::snt Detroit Red Wings ' lost 2 - 1 but remained in third place in the Atlantic division .\n(l / lose-03\n      :ARG0 (t / team\n            :name (n / name\n                  :op1 \"Detroit\"\n                  :op2 \"Red\"\n                  :op3 \"Wings\"))\n      :ARG2 (s / score-entity\n            :op1 2\n            :op2 1)\n      :concession-of (r / remain-01\n            :ARG1 t\n            :ARG3 (p / place\n                  :ord (o / ordinal-entity\n                        :value 3)\n                  :subevent-of (d / division\n                        :mod (o2 / ocean\n                              :name (n2 / name\n                                    :op1 \"Atlantic\"))))))"
    ],
    "tree": [
      "(c / catch-02\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Drew\"\n                     :op2 \"Miller\")))",
      "(c / catch-02\n   :time (p2 / period\n             :ord (o / ordinal-entity\n                     :value 1)))",
      "(c / catch-02\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Drew\"\n                     :op2 \"Miller\"))\n   :time (p2 / period\n             :ord (o / ordinal-entity\n                     :value 1)))",
      "(p / person\n   :name (n / name\n            :op1 \"Drew\"\n            :op2 \"Miller\")\n   :part (t / team\n            :name (n2 / name\n                      :op1 \"Detroit\"\n                      :op2 \"Red\"\n                      :op3 \"Wings\")))",
      "(p2 / period\n    :ord (o / ordinal-entity\n            :value 1)\n    :subevent (o2 / oppose-01\n                  :ARG1 (t2 / team\n                            :name (n3 / name\n                                      :op1 \"Ottawa\"\n                                      :op2 \"Senators\"))))",
      "(c / contrast-01\n   :ARG1 (r / require-01\n            :ARG0 (c2 / close-01\n                      :ARG1 (c3 / cut-01\n                                :mod (m / massive))))\n   :ARG2 (d / damage-01\n            :polarity -))",
      "(c / contrast-01\n   :ARG1 (r / require-01\n            :ARG1 (s / stitch\n                     :quant (b / between\n                               :op2 60)))\n   :ARG2 (d / damage-01\n            :polarity -))",
      "(c2 / close-01\n    :ARG1 (c3 / cut-01\n              :mod (m / massive)))",
      "(s / stitch\n   :quant (b / between\n             :op1 50))",
      "(e / eye\n   :part (p / person\n            :name (n / name\n                     :op1 \"Miller\")))",
      "(l / lose-03\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Detroit\"\n                     :op2 \"Red\"\n                     :op3 \"Wings\")))",
      "(l / lose-03\n   :concession (r / remain-01\n                  :ARG1 (t / team :name (n / name :op1 \"Detroit\" :op2 \"Red\" :op3 \"Wings\"))))",
      "(l / lose-03\n   :concession (r / remain-01\n                  :ARG3 (p / place\n                           :ord (o / ordinal-entity\n                                   :value 3))))",
      "(l / lose-03\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Detroit\"\n                     :op2 \"Red\"\n                     :op3 \"Wings\"))\n   :concession (r / remain-01\n                  :ARG1 t))",
      "(l / lose-03\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Detroit\"\n                     :op2 \"Red\"\n                     :op3 \"Wings\"))\n   :concession (r / remain-01\n                  :ARG3 (p / place\n                           :ord (o / ordinal-entity\n                                   :value 3))))"
    ],
    "smus": [
      "Drew Miller was caught.",
      "Catched in the first period.",
      "Drew Miller was caught in the first period.",
      "Drew Miller for the Detroit Red Wings",
      "The first period was against the Ottawa Senators.",
      "Massive cuts required to close, but did not cause damage.",
      "60 stitches required, but did not cause damage.",
      "Close the massive cut.",
      "50-plus stitches.",
      "Miller's eye.",
      "Detroit Red Wings have lost",
      "Losed but the Detroit Red Wings remained.",
      "Lost but remained third place.",
      "Detroit Red Wings lost, but remained.",
      "Detroit Red Wings lost, but remained in third place."
    ]
  },
  {
    "instance_id": "realsumm-16",
    "summary": "Jurgen Klopp will leave Borussia Dortmund at the end of the season . Jurgen Klopp has enjoyed success with Borussia Dortmund during seven - year stint . Jurgen Klopp has been linked with Manchester City , Manchester United and Arsenal . Per Mertesacker says Mertesacker would like to see Jurgen Klopp in the Premier League .",
    "summary_trees": [
      "# ::snt Jurgen Klopp will leave Borussia Dortmund at the end of the season .\n(l / leave-15\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jurgen\"\n                  :op2 \"Klopp\"))\n      :ARG1 (t / team\n            :name (n2 / name\n                  :op1 \"Borussia\"\n                  :op2 \"Dortmund\"))\n      :time (e / end-01\n            :ARG1 (s / season)))",
      "# ::snt Jurgen Klopp has enjoyed success with Borussia Dortmund during seven - year stint .\n(e / enjoy-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jurgen\"\n                  :op2 \"Klopp\"))\n      :ARG1 (s / succeed-01\n            :ARG0 p)\n      :prep-with (t / team\n            :name (n2 / name\n                  :op1 \"Borussia\"\n                  :op2 \"Dortmund\"))\n      :duration (s2 / stint\n            :duration (t2 / temporal-quantity\n                  :quant 7\n                  :unit (y / year))))",
      "# ::snt Jurgen Klopp has been linked with Manchester City , Manchester United and Arsenal .\n(l / link-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Jurgen\"\n                  :op2 \"Klopp\"))\n      :ARG2 (a / and\n            :op1 (t / team\n                  :name (n2 / name\n                        :op1 \"Manchester\"\n                        :op2 \"City\"))\n            :op2 (t2 / team\n                  :name (n3 / name\n                        :op1 \"Manchester\"\n                        :op2 \"United\"))\n            :op3 (t3 / team\n                  :name (n4 / name\n                        :op1 \"Arsenal\"))))",
      "# ::snt Per Mertesacker says Mertesacker would like to see Jurgen Klopp in the Premier League .\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Per\"\n                  :op2 \"Mertesacker\"))\n      :ARG1 (l / like-02\n            :ARG0 p\n            :ARG1 (s2 / see-01\n                  :ARG0 p\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Jurgen\"\n                              :op2 \"Klopp\")\n                        :location (l2 / league\n                              :name (n3 / name\n                                    :op1 \"Premier\"\n                                    :op2 \"League\"))))))"
    ],
    "tree": [
      "(l / leave-15\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jurgen\"\n                     :op2 \"Klopp\")))",
      "(l / leave-15\n   :time (e / end-01\n            :ARG1 (s / season)))",
      "(l / leave-15\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jurgen\"\n                     :op2 \"Klopp\"))\n   :ARG1 (t / team\n            :name (n2 / name\n                      :op1 \"Borussia\"\n                      :op2 \"Dortmund\")))",
      "(l / leave-15\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jurgen\"\n                     :op2 \"Klopp\"))\n   :time (e / end-01\n            :ARG1 (s / season)))",
      "(l / leave-15\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jurgen\"\n                     :op2 \"Klopp\"))\n   :ARG1 (t / team\n            :name (n2 / name\n                      :op1 \"Borussia\"\n                      :op2 \"Dortmund\"))\n   :time (e / end-01\n            :ARG1 (s / season)))",
      "(e / enjoy-01\n   :ARG1 (s / succeed-01\n            :ARG0 (p / person :name (n / name :op1 \"Jurgen\" :op2 \"Klopp\"))))",
      "(e / enjoy-01\n   :prep-with (t / team\n                 :name (n2 / name\n                           :op1 \"Borussia\"\n                           :op2 \"Dortmund\")))",
      "(e / enjoy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jurgen\"\n                     :op2 \"Klopp\"))\n   :ARG1 (s / succeed-01\n            :ARG0 p))",
      "(e / enjoy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jurgen\"\n                     :op2 \"Klopp\"))\n   :prep-with (t / team\n                 :name (n2 / name\n                           :op1 \"Borussia\"\n                           :op2 \"Dortmund\")))",
      "(e / enjoy-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jurgen\"\n                     :op2 \"Klopp\"))\n   :ARG1 (s / succeed-01\n            :ARG0 p)\n   :prep-with (t / team\n                 :name (n2 / name\n                           :op1 \"Borussia\"\n                           :op2 \"Dortmund\")))",
      "(l / link-01\n   :ARG2 (t2 / team\n             :name (n3 / name\n                       :op1 \"Manchester\"\n                       :op2 \"United\")))",
      "(l / link-01\n   :ARG2 (t3 / team\n             :name (n4 / name\n                       :op1 \"Arsenal\")))",
      "(l / link-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Jurgen\"\n                     :op2 \"Klopp\"))\n   :ARG2 (t / team\n            :name (n2 / name\n                      :op1 \"Manchester\"\n                      :op2 \"City\")))",
      "(l / link-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Jurgen\"\n                     :op2 \"Klopp\"))\n   :ARG2 (t2 / team\n             :name (n3 / name\n                       :op1 \"Manchester\"\n                       :op2 \"United\")))",
      "(l / link-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Jurgen\"\n                     :op2 \"Klopp\"))\n   :ARG2 (t3 / team\n             :name (n4 / name\n                       :op1 \"Arsenal\")))",
      "(s / say-01\n   :ARG1 (l / like-02\n            :ARG1 (s2 / see-01\n                      :ARG1 (p2 / person\n                                :name (n2 / name\n                                          :op1 \"Jurgen\"\n                                          :op2 \"Klopp\")))))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Per\"\n                     :op2 \"Mertesacker\"))\n   :ARG1 (l / like-02\n            :ARG1 (s2 / see-01\n                      :ARG0 p)))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Per\"\n                     :op2 \"Mertesacker\"))\n   :ARG1 (l / like-02\n            :ARG1 (s2 / see-01\n                      :ARG1 (p2 / person\n                                :name (n2 / name\n                                          :op1 \"Jurgen\"\n                                          :op2 \"Klopp\")))))",
      "(p / person\n   :name (n / name\n            :op1 \"Per\"\n            :op2 \"Mertesacker\"))"
    ],
    "smus": [
      "Kurgen Klopp will leave.",
      "Leave at the end of the season.",
      "Kurgen Klopp will leave Borussia Dortmund.",
      "Kurgen Klopp will leave at the end of the season.",
      "Jurgen Klopp will leave Borussia Dortmund at the end of the season.",
      "Jurgen Klopp's success has been enjoyed.",
      "Enjoyed with Borussia Dortmund.",
      "Jurgen Klopp has enjoyed success.",
      "Kurgen Klopp enjoyed with Borussia Dortmund.",
      "Kurgen Klopp has enjoyed success with Borussia Dortmund.",
      "Manchester United are linked.",
      "Linked to Arsenal.",
      "Jurgen Klopp is linked with Manchester City.",
      "Jurgen Klopp is linked with Manchester United.",
      "Kurgen Klopp is linked with Arsenal.",
      "Would like to see Jurgen Klopp.",
      "Per Mertesacker says he would like to see.",
      "Per Mertesacker says he would like to see Jurgen Klopp.",
      "Per Mertesacker."
    ]
  },
  {
    "instance_id": "realsumm-17",
    "summary": "AppleInsider spotted nine listings in the past month relating to batteries . nine listings include one for an iOS battery life software engineer and another for iOS software power systems engineer . iOS significantly improved the battery life on iOS iPhone 6 and 6 Plus . But iOS has been criticised for phones and tablets that only do n't last a day .",
    "summary_trees": [
      "# ::snt AppleInsider spotted nine listings in the past month relating to batteries .\n(s / spot-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"AppleInsider\"))\n      :ARG1 (l / listing\n            :quant 9\n            :ARG1-of (r / relate-01\n                  :ARG2 (b / battery)))\n      :time (m / month\n            :mod (p2 / past)))",
      "# ::snt nine listings include one for an iOS battery life software engineer and another for iOS software power systems engineer .\n(ii / include-01\n      :ARG1 (a / and\n            :op1 (l / listing\n                  :quant 1\n                  :beneficiary (p / person\n                        :ARG0-of (e / engineer-01\n                              :ARG1 (s / software\n                                    :purpose (l2 / life\n                                          :mod (b / battery))\n                                    :mod (p2 / product\n                                          :name (n / name\n                                                :op1 \"iOS\"))))))\n            :op2 (l3 / listing\n                  :mod (a2 / another)\n                  :beneficiary (p3 / person\n                        :ARG0-of (e2 / engineer-01\n                              :ARG1 (s2 / system\n                                    :mod (p4 / power)\n                                    :mod (s3 / software))))))\n      :ARG2 (l4 / listing\n            :quant 9))",
      "# ::snt iOS significantly improved the battery life on iOS iPhone 6 and 6 Plus .\n(ii / improve-01\n      :ARG0 (p / product\n            :name (n / name\n                  :op1 \"iOS\"))\n      :ARG1 (l / life\n            :duration-of (b / battery)\n            :poss (a / and\n                  :op1 (p2 / product\n                        :name (n2 / name\n                              :op1 \"iPhone\"\n                              :op2 6\n                              :op3 \"Plus\"))\n                  :op2 (p3 / product\n                        :name (n3 / name\n                              :op1 \"iOS\"))))\n      :ARG1-of (s / significant-02))",
      "# ::snt But iOS has been criticised for phones and tablets that only do n't last a day .\n(c / contrast-01\n      :ARG2 (c2 / criticize-01\n            :ARG1 (p / product\n                  :name (n / name\n                        :op1 \"iOS\"))\n            :ARG2 (a / and\n                  :op1 (p2 / phone)\n                  :op2 (t / tablet)\n                  :ARG1-of (l / last-04\n                        :polarity -\n                        :ARG2 (t2 / temporal-quantity\n                              :quant 1\n                              :unit (d / day))\n                        :mod (o / only)))))"
    ],
    "tree": [
      "(s / spot-01\n   :time (m / month\n            :mod (p2 / past)))",
      "(s / spot-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"AppleInsider\"))\n   :ARG1 (l / listing\n            :quant 9))",
      "(s / spot-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"AppleInsider\"))\n   :ARG1 (l / listing\n            :ARG1 (r / relate-01\n                     :ARG2 (b / battery))))",
      "(s / spot-01\n   :ARG1 (l / listing\n            :ARG1 (r / relate-01\n                     :ARG2 (b / battery)))\n   :time (m / month\n            :mod (p2 / past)))",
      "(s / spot-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"AppleInsider\"))\n   :ARG1 (l / listing\n            :ARG1 (r / relate-01\n                     :ARG2 (b / battery)))\n   :time (m / month\n            :mod (p2 / past)))",
      "(a / and\n   :op1 (l / listing\n           :beneficiary (p / person\n                           :ARG0 (e / engineer-01\n                                    :ARG1 (s / software\n                                             :purpose (l2 / life\n                                                          :mod (b / battery)))))))",
      "(a / and\n   :op1 (l / listing\n           :beneficiary (p / person\n                           :ARG0 (e / engineer-01\n                                    :ARG1 (s / software\n                                             :purpose (l2 / life\n                                                          :mod (b / battery))))))\n   :op2 (l3 / listing\n            :mod (a2 / another)))",
      "(a / and\n   :op1 (l / listing\n           :beneficiary (p / person\n                           :ARG0 (e / engineer-01\n                                    :ARG1 (s / software\n                                             :purpose (l2 / life\n                                                          :mod (b / battery))))))\n   :op2 (l3 / listing\n            :beneficiary (p3 / person\n                             :ARG0 (e2 / engineer-01\n                                       :ARG1 (s2 / system\n                                                 :mod (p4 / power))))))",
      "(l / listing\n   :beneficiary (p / person\n                   :ARG0 (e / engineer-01\n                            :ARG1 (s / software\n                                     :purpose (l2 / life\n                                                  :mod (b / battery))))))",
      "(l3 / listing\n    :mod (a2 / another)\n    :beneficiary (p3 / person\n                     :ARG0 (e2 / engineer-01\n                               :ARG1 (s2 / system\n                                         :mod (p4 / power)))))",
      "(ii / improve-01\n    :ARG1 (l / life\n             :duration (b / battery)))",
      "(ii / improve-01\n    :ARG1 (l / life\n             :poss (p2 / product\n                       :name (n2 / name\n                                 :op1 \"iPhone\"\n                                 :op2 6\n                                 :op3 \"Plus\"))))",
      "(ii / improve-01\n    :ARG0 (p / product\n             :name (n / name\n                      :op1 \"iOS\"))\n    :ARG1 (l / life\n             :duration (b / battery)))",
      "(ii / improve-01\n    :ARG0 (p / product\n             :name (n / name\n                      :op1 \"iOS\"))\n    :ARG1 (l / life\n             :poss (p2 / product\n                       :name (n2 / name\n                                 :op1 \"iPhone\"\n                                 :op2 6\n                                 :op3 \"Plus\"))))",
      "(a / and\n   :op1 (p2 / product\n            :name (n2 / name\n                      :op1 \"iPhone\"\n                      :op2 6\n                      :op3 \"Plus\")))",
      "(c / contrast-01\n   :ARG2 (c2 / criticize-01\n             :ARG2 (p2 / phone)))",
      "(c2 / criticize-01\n    :ARG1 (p / product\n             :name (n / name\n                      :op1 \"iOS\")))",
      "(c2 / criticize-01\n    :ARG1 (p / product\n             :name (n / name\n                      :op1 \"iOS\"))\n    :ARG2 (l / last-04\n             :polarity -))",
      "(c2 / criticize-01\n    :ARG1 (p / product\n             :name (n / name\n                      :op1 \"iOS\"))\n    :ARG2 (l / last-04\n             :ARG2 (t2 / temporal-quantity\n                       :quant 1)))",
      "(a / and\n   :op1 (p2 / phone)\n   :op2 (t / tablet))"
    ],
    "smus": [
      "Spotted in the past month.",
      "AppleInsider spotted 9 listings.",
      "AppleInsider spotted listings relating to batteries.",
      "Listings related to batteries were spotted in the past month.",
      "AppleInsider spotted listings related to batteries in the past month.",
      "and listings for battery life software engineer.",
      "There are listings for battery life engineers and another.",
      "Listings for battery life software engineers and power systems engineers.",
      "Listings for battery life engineer.",
      "Another listing for the power systems engineer.",
      "Battery life improved.",
      "The life of the iPhone 6 Plus improved.",
      "IOS improved battery life.",
      "IOS improved the life of the iPhone 6 Plus.",
      "and the iPhone 6 Plus.",
      "But the phones were criticized.",
      "The iOS has been criticized.",
      "IOS has been criticized for not lasting.",
      "The iOS has been criticized for not lasting a day.",
      "phones and tablets"
    ]
  },
  {
    "instance_id": "realsumm-18",
    "summary": "Tournament performances have restored Andy Murray to World No 3 . But it 's wedding to Kim Sears that takes Andy Murray No 1 spot this week . Andy Murray is due to wedding to Kim Sears Kim Sears in Dunblane this coming Saturday . There are believed to be well over 100 names on down - to - earth guest list .",
    "summary_trees": [
      "# ::snt Tournament performances have restored Andy Murray to World\n(r / restore-01\n      :ARG0 (p / perform-01\n            :mod (t / tournament))\n      :ARG1 (p2 / person\n            :name (n / name\n                  :op1 \"Andy\"\n                  :op2 \"Murray\"))\n      :ARG2 (w / world))",
      "# ::snt No 3 .\n(n / no\n      :ord (o / ordinal-entity\n            :value 3))",
      "# ::snt But it 's wedding to Kim Sears that takes Andy Murray\n(c / contrast-01\n      :ARG2 (t / take-01\n            :ARG0 (w / wed-01\n                  :ARG1 (p / person\n                        :name (n / name\n                              :op1 \"Andy\"\n                              :op2 \"Murray\"))\n                  :ARG2 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Kim\"\n                              :op2 \"Sears\")))\n            :ARG1 p))",
      "# ::snt No 1 spot this week .\n(s / spot\n      :polarity -\n      :ord (o / ordinal-entity\n            :value 1)\n      :time (w / week\n            :mod (t / this)))",
      "# ::snt Andy Murray is due to wedding to Kim Sears Kim Sears in Dunblane this coming Saturday .\n(d / due-03\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Andy\"\n                  :op2 \"Murray\"))\n      :ARG2 (w / wed-01\n            :ARG1 p\n            :ARG2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Kim\"\n                        :op2 \"Sears\"))\n            :location (c / city\n                  :name (n3 / name\n                        :op1 \"Dunblane\")))\n      :time (d2 / date-entity\n            :weekday (s / saturday)\n            :mod (t / this)\n            :ARG1-of (c2 / come-01)))",
      "# ::snt There are believed to be well over 100 names on down - to - earth guest list .\n(b / believe-01\n      :ARG1 (n / name\n            :quant (o / over\n                  :op1 100\n                  :quant (w / well))\n            :location (l / list-01\n                  :ARG1 (g / guest)\n                  :mod (d / down-to-earth))))"
    ],
    "tree": [
      "(r / restore-01\n   :ARG0 (p / perform-01\n            :mod (t / tournament)))",
      "(r / restore-01\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Andy\"\n                      :op2 \"Murray\")))",
      "(r / restore-01\n   :ARG0 (p / perform-01\n            :mod (t / tournament))\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Andy\"\n                      :op2 \"Murray\")))",
      "(r / restore-01\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Andy\"\n                      :op2 \"Murray\"))\n   :ARG2 (w / world))",
      "(r / restore-01\n   :ARG0 (p / perform-01\n            :mod (t / tournament))\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Andy\"\n                      :op2 \"Murray\"))\n   :ARG2 (w / world))",
      "(n / no\n   :ord (o / ordinal-entity\n           :value 3))",
      "(c / contrast-01\n   :ARG2 (t / take-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Andy\"\n                              :op2 \"Murray\"))))",
      "(c / contrast-01\n   :ARG2 (t / take-01\n            :ARG0 (w / wed-01\n                     :ARG2 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Kim\"\n                                         :op2 \"Sears\")))))",
      "(t / take-01\n   :ARG0 (w / wed-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Andy\"\n                              :op2 \"Murray\"))))",
      "(t / take-01\n   :ARG0 (w / wed-01\n            :ARG2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Kim\"\n                                :op2 \"Sears\"))))",
      "(w / wed-01\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Kim\"\n                       :op2 \"Sears\")))",
      "(s / spot\n   :ord (o / ordinal-entity\n           :value 1))",
      "(s / spot\n   :time (w / week\n            :mod (t / this)))",
      "(s / spot\n   :ord (o / ordinal-entity\n           :value 1)\n   :time (w / week\n            :mod (t / this)))",
      "(d / due-03\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Andy\"\n                     :op2 \"Murray\"))\n   :ARG2 (w / wed-01\n            :ARG1 p))",
      "(d / due-03\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Andy\"\n                     :op2 \"Murray\"))\n   :ARG2 (w / wed-01\n            :ARG2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Kim\"\n                                :op2 \"Sears\"))))",
      "(d / due-03\n   :ARG2 (w / wed-01\n            :ARG1 (p / person :name (n / name :op1 \"Andy\" :op2 \"Murray\")))\n   :time (d2 / date-entity\n             :weekday (s / saturday)))",
      "(d / due-03\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Andy\"\n                     :op2 \"Murray\"))\n   :ARG2 (w / wed-01\n            :ARG1 p)\n   :time (d2 / date-entity\n             :weekday (s / saturday)))",
      "(d / due-03\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Andy\"\n                     :op2 \"Murray\"))\n   :ARG2 (w / wed-01\n            :location (c / city\n                         :name (n3 / name\n                                   :op1 \"Dunblane\")))\n   :time (d2 / date-entity\n             :weekday (s / saturday)))",
      "(b / believe-01\n   :ARG1 (n / name\n            :quant (o / over\n                      :op1 100)))",
      "(n / name\n   :quant (o / over\n             :op1 100))",
      "(n / name\n   :location (l / list-01\n                :ARG1 (g / guest)))",
      "(n / name\n   :location (l / list-01\n                :mod (d / down-to-earth)))",
      "(n / name\n   :quant (o / over\n             :op1 100)\n   :location (l / list-01\n                :mod (d / down-to-earth)))"
    ],
    "smus": [
      "Tournament performances have restored.",
      "Andy Murray was restored.",
      "Andy Murray was restored by tournament performances.",
      "Andy Murray is being restored to the World.",
      "The tournament performances have restored Andy Murray to the World.",
      "No, no, no, no, no.",
      "But it takes Andy Murray.",
      "But the wedding of Kim Sears takes place.",
      "It takes a wedding to wed Andy Murray.",
      "It takes a wedding to Kim Sears.",
      "Kim Sears got married.",
      "The first spot.",
      "Spot this week.",
      "The first spot this week.",
      "Andy Murray is due to wed.",
      "Andy Murray is due to wed Kim Sears.",
      "Andy Murray's wedding is due Saturday.",
      "Andy Murray is due to wed on Saturday.",
      "Andy Murray is due to wed in Dunblane on Saturday.",
      "Over 100 names are believed.",
      "Over 100 names.",
      "names on guest list",
      "Names on the down-to-earth list.",
      "Over 100 names on the down-to-earth list."
    ]
  },
  {
    "instance_id": "realsumm-19",
    "summary": "Paula Dunican paid \u00a3 25 for the baby blue coat at Paula Dunican local branch of Asda . When Paula Dunican took the baby blue coat home Paula Dunican noticed a ' seeping ' stain on the back of coat . Paula Dunican then discovered the reptile 's crushed body on the baby blue coat lining . Asda has apologised and offered Paula Dunican a \u00a3 40 voucher and refund .",
    "summary_trees": [
      "# ::snt Paula Dunican paid \u00a3 25 for the baby blue coat at Paula Dunican local branch of Asda .\n(p / pay-01\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Paula\"\n                  :op2 \"Dunican\"))\n      :ARG1 (m / monetary-quantity\n            :quant 25\n            :unit (p3 / pound))\n      :ARG3 (c / coat\n            :mod (b / blue)\n            :mod (b2 / baby))\n      :location (b3 / branch\n            :poss (c2 / company\n                  :name (n2 / name\n                        :op1 \"Asda\"))\n            :ARG1-of (l / local-02\n                  :ARG2 p2)))",
      "# ::snt When Paula Dunican took the baby blue coat home Paula Dunican noticed a ' seeping ' stain on the back of coat .\n(n / notice-01\n      :ARG0 (p / person\n            :name (n2 / name\n                  :op1 \"Paula\"\n                  :op2 \"Dunican\"))\n      :ARG1 (s / stain-01\n            :ARG1 (b / back\n                  :part-of (c / coat\n                        :mod (b2 / blue)\n                        :mod (b3 / baby)))\n            :ARG1-of (s2 / seep-01))\n      :time (t / take-01\n            :ARG0 p\n            :ARG1 c\n            :ARG3 (h / home)))",
      "# ::snt Paula Dunican then discovered the reptile 's crushed body on the baby blue coat lining .\n(d / discover-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Paula\"\n                  :op2 \"Dunican\"))\n      :ARG1 (b / body\n            :part-of (r / reptile)\n            :ARG1-of (c / crush-01))\n      :location (l / lining\n            :part-of (c2 / coat\n                  :mod (b2 / blue)\n                  :mod (b3 / baby)))\n      :time (t / then))",
      "# ::snt Asda has apologised and offered Paula Dunican a \u00a3 40 voucher and refund .\n(a / and\n      :op1 (a2 / apologize-01\n            :ARG0 (c / company\n                  :name (n / name\n                        :op1 \"Asda\")))\n      :op2 (o / offer-01\n            :ARG0 c\n            :ARG1 (a3 / and\n                  :op1 (v / voucher\n                        :mod (m / monetary-quantity\n                              :quant 40\n                              :unit (p / pound)))\n                  :op2 (r / refund-01\n                        :ARG0 c\n                        :ARG2 (p2 / person\n                              :name (n2 / name\n                                    :op1 \"Paula\"\n                                    :op2 \"Dunican\"))))\n            :ARG3 p2))"
    ],
    "tree": [
      "(p / pay-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Paula\"\n                      :op2 \"Dunican\")))",
      "(p / pay-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Paula\"\n                      :op2 \"Dunican\"))\n   :ARG1 (m / monetary-quantity\n            :quant 25))",
      "(p / pay-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Paula\"\n                      :op2 \"Dunican\"))\n   :ARG3 (c / coat\n            :mod (b / blue)))",
      "(p / pay-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Paula\"\n                      :op2 \"Dunican\"))\n   :ARG3 (c / coat\n            :mod (b2 / baby)))",
      "(p / pay-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Paula\"\n                      :op2 \"Dunican\"))\n   :ARG1 (m / monetary-quantity\n            :quant 25)\n   :ARG3 (c / coat\n            :mod (b2 / baby)))",
      "(n / notice-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Paula\"\n                      :op2 \"Dunican\")))",
      "(n / notice-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Paula\"\n                      :op2 \"Dunican\"))\n   :ARG1 (s / stain-01\n            :ARG1 (b / back\n                     :part (c / coat\n                              :mod (b2 / blue))))\n   :time (t / take-01\n            :ARG0 p))",
      "(n / notice-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Paula\"\n                      :op2 \"Dunican\"))\n   :ARG1 (s / stain-01\n            :ARG1 (b / back\n                     :part (c / coat\n                              :mod (b2 / blue))))\n   :time (t / take-01\n            :ARG3 (h / home)))",
      "(n / notice-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Paula\"\n                      :op2 \"Dunican\"))\n   :ARG1 (s / stain-01\n            :ARG1 (b / back\n                     :part (c / coat\n                              :mod (b3 / baby))))\n   :time (t / take-01\n            :ARG0 p))",
      "(n / notice-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Paula\"\n                      :op2 \"Dunican\"))\n   :ARG1 (s / stain-01\n            :ARG1 (b / back\n                     :part (c / coat\n                              :mod (b3 / baby))))\n   :time (t / take-01\n            :ARG3 (h / home)))",
      "(d / discover-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Paula\"\n                     :op2 \"Dunican\"))\n   :ARG1 (b / body\n            :part (r / reptile)))",
      "(d / discover-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Paula\"\n                     :op2 \"Dunican\"))\n   :time (t / then))",
      "(d / discover-01\n   :ARG1 (b / body\n            :part (r / reptile))\n   :time (t / then))",
      "(d / discover-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Paula\"\n                     :op2 \"Dunican\"))\n   :ARG1 (b / body\n            :part (r / reptile))\n   :time (t / then))",
      "(b / body\n   :part (r / reptile)\n   :ARG1 (c / crush-01))",
      "(a2 / apologize-01\n    :ARG0 (c / company\n             :name (n / name)))",
      "(o / offer-01\n   :ARG0 (c / company :name (n / name :op1 \"Asda\"))\n   :ARG1 (a3 / and))",
      "(v / voucher\n   :mod (m / monetary-quantity\n           :quant 40\n           :unit (p / pound)))",
      "(r / refund-01\n   :ARG0 (c / company :name (n / name :op1 \"Asda\"))\n   :ARG2 (p2 / person\n             :name (n2 / name)))"
    ],
    "smus": [
      "Paula Dunican paid.",
      "Paula Dunican paid 25.",
      "Paula Dunican paid for the blue coat.",
      "Paula Dunican paid for the baby coat.",
      "Paula Dunican paid 25 for a baby coat.",
      "Paula Dunican noticed.",
      "When she took, Paula Dunican noticed a stain on the back of the blue coat.",
      "When she took home, Paula Dunican noticed a stain on the back of the blue coat.",
      "When she took, Paula Dunican noticed a stain on the back of the baby coat.",
      "When taken home, Paula Dunican noticed a stain on the back of the baby coat.",
      "Paula Dunican discovered the reptile's body.",
      "Then Paula Dunican discovered.",
      "The reptile's body was then discovered.",
      "Then Paula Dunican discovered the reptile's body.",
      "The reptile's body was crushed.",
      "The company has apologized.",
      "Asda offered the latter.",
      "PS40 voucher",
      "Asda will give a refund to the person."
    ]
  },
  {
    "instance_id": "realsumm-20",
    "summary": "Ronnie Carroll placed fourth in the Eurovision contest in 1962 and 1963 . Ronnie Carroll died in London two days ago , aged 80 , following a battle with cancer . Ronnie Carroll was running in the General Election for Hampstead and Kilburn . Ronnie Carroll remains on the paper and Ronnie Carroll will be elected if Ronnie Carroll gets enough votes .",
    "summary_trees": [
      "# ::snt Ronnie Carroll placed fourth in the Eurovision contest in 1962 and 1963 .\n(p / place-01\n      :ARG1 (p2 / person\n            :name (n / name\n                  :op1 \"Ronnie\"\n                  :op2 \"Carroll\"))\n      :ARG2 (f / fourth)\n      :ARG3 (c / contest\n            :name (n2 / name\n                  :op1 \"Eurovision\"))\n      :time (a / and\n            :op1 (d / date-entity\n                  :year 1962)\n            :op2 (d2 / date-entity\n                  :year 1963)))",
      "# ::snt Ronnie Carroll died in London two days ago , aged 80 , following a battle with cancer .\n(d / die-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Ronnie\"\n                  :op2 \"Carroll\")\n            :age (t / temporal-quantity\n                  :quant 80\n                  :unit (y / year)))\n      :location (c / city\n            :name (n2 / name\n                  :op1 \"London\"))\n      :time (b / before\n            :op1 (n3 / now)\n            :quant (t2 / temporal-quantity\n                  :quant 2\n                  :unit (d2 / day)))\n      :ARG1-of (f / follow-01\n            :ARG2 (b2 / battle-01\n                  :ARG0 p\n                  :ARG1 (d3 / disease\n                        :name (n4 / name\n                              :op1 \"cancer\")))))",
      "# ::snt Ronnie Carroll was running in the General Election for Hampstead and Kilburn .\n(r / run-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Ronnie\"\n                  :op2 \"Carroll\"))\n      :ARG1 (a / and\n            :op1 (c / city-district\n                  :name (n2 / name\n                        :op1 \"Hampstead\"))\n            :op2 (c2 / city-district\n                  :name (n3 / name\n                        :op1 \"Kilburn\")))\n      :subevent-of (e / elect-01\n            :ARG1-of (g / general-02)))",
      "# ::snt Ronnie Carroll remains on the paper and Ronnie Carroll will be elected if Ronnie Carroll gets enough votes .\n(a / and\n      :op1 (r / remain-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Ronnie\"\n                        :op2 \"Carroll\"))\n            :location (p2 / paper))\n      :op2 (e / elect-01\n            :ARG1 p\n            :condition (g / get-01\n                  :ARG0 p\n                  :ARG1 (v / vote-01\n                        :ARG1 p\n                        :ARG1-of (h / have-quant-91\n                              :ARG3 (e2 / enough))))))"
    ],
    "tree": [
      "(p / place-01\n   :ARG3 (c / contest\n            :name (n2 / name\n                      :op1 \"Eurovision\")))",
      "(p / place-01\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Ronnie\"\n                      :op2 \"Carroll\"))\n   :ARG2 (f / fourth))",
      "(p / place-01\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Ronnie\"\n                      :op2 \"Carroll\"))\n   :ARG3 (c / contest\n            :name (n2 / name\n                      :op1 \"Eurovision\")))",
      "(p / place-01\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Ronnie\"\n                      :op2 \"Carroll\"))\n   :ARG2 (f / fourth)\n   :time (d / date-entity\n            :year 1962))",
      "(p / place-01\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Ronnie\"\n                      :op2 \"Carroll\"))\n   :ARG2 (f / fourth)\n   :time (d2 / date-entity\n             :year 1963))",
      "(d / die-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Ronnie\"\n                     :op2 \"Carroll\")))",
      "(d / die-01\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :quant 80)))",
      "(d / die-01\n   :location (c / city\n                :name (n2 / name\n                          :op1 \"London\")))",
      "(d / die-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Ronnie\"\n                     :op2 \"Carroll\"))\n   :location (c / city\n                :name (n2 / name\n                          :op1 \"London\")))",
      "(d / die-01\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :quant 80))\n   :location (c / city\n                :name (n2 / name\n                          :op1 \"London\")))",
      "(r / run-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ronnie\"\n                     :op2 \"Carroll\")))",
      "(r / run-02\n   :subevent (e / elect-01\n                :ARG1 (g / general-02)))",
      "(r / run-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ronnie\"\n                     :op2 \"Carroll\"))\n   :ARG1 (c / city-district\n            :name (n2 / name\n                      :op1 \"Hampstead\")))",
      "(r / run-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ronnie\"\n                     :op2 \"Carroll\"))\n   :subevent (e / elect-01\n                :ARG1 (g / general-02)))",
      "(r / run-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ronnie\"\n                     :op2 \"Carroll\"))\n   :ARG1 (c2 / city-district\n             :name (n3 / name\n                       :op1 \"Kilburn\"))\n   :subevent (e / elect-01\n                :ARG1 (g / general-02)))",
      "(r / remain-01\n   :ARG1 (p / person\n            :name (n / name)))",
      "(e / elect-01\n   :ARG1 (p / person :name (n / name :op1 \"Ronnie\" :op2 \"Carroll\"))\n   :condition (g / get-01\n                 :ARG0 p\n                 :ARG1 (v / vote-01\n                          :ARG1 p\n                          :ARG1 (h / have-quant-91\n                                   :ARG3 (e2 / enough)))))"
    ],
    "smus": [
      "Placed in the Eurovision contest.",
      "Ronnie Carroll placed fourth.",
      "Ronie Carroll placed in the Eurovision contest.",
      "In 1962, Ronnie Carroll placed fourth.",
      "In 1963, Ronnie Carroll placed fourth.",
      "Ronnie Carroll died.",
      "The 80-year-old died.",
      "died in London.",
      "Ronnie Carroll died in London.",
      "The 80-year-old died in London.",
      "Ronnie Carroll is running.",
      "Running in the General Election.",
      "- Hampstead: Ronnie Carroll is running.",
      "Ronie Carroll is running in the General Election.",
      "Ronie Carroll is running for Kilburn in the General Election.",
      "remains.",
      "If Ronnie Carroll gets enough votes, he will be elected."
    ]
  },
  {
    "instance_id": "realsumm-21",
    "summary": "McHenry , 28 , berated single mother Gina Michelle for towing single mother Gina Michelle car . McHenry , 28 , insulted single mother Gina Michelle looks and social status in footage that went viral . ESPN suspended McHenry , 28 , for a week amid investigation . But despite thousands of calls for McHenry , 28 , to be fired , McHenry , 28 , returns this week .",
    "summary_trees": [
      "# ::snt McHenry , 28 , berated single mother Gina Michelle for towing single mother Gina Michelle car .\n(b / berate-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"McHenry\")\n            :age (t / temporal-quantity\n                  :quant 28\n                  :unit (y / year)))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Gina\"\n                  :op2 \"Michelle\")\n            :ARG0-of (h / have-rel-role-91\n                  :ARG2 (m / mother\n                        :ARG1-of (s / single-03))))\n      :ARG2 (t2 / tow-01\n            :ARG0 p\n            :ARG1 (c / car\n                  :poss p2)))",
      "# ::snt McHenry , 28 , insulted single mother Gina Michelle looks and social status in footage that went viral .\n(ii / insult-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"McHenry\")\n            :age (t / temporal-quantity\n                  :quant 28\n                  :unit (y / year)))\n      :ARG1 (a / and\n            :op1 (l / look-02\n                  :ARG0 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Gina\"\n                              :op2 \"Michelle\")\n                        :ARG0-of (h / have-rel-role-91\n                              :ARG2 (m / mother\n                                    :ARG1-of (s / single-03)))))\n            :op2 (s2 / status\n                  :mod (s3 / social)))\n      :medium (f / footage\n            :ARG1-of (g / go-08\n                  :ARG2 (v / viral))))",
      "# ::snt ESPN suspended McHenry , 28 , for a week amid investigation .\n(s / suspend-01\n      :ARG0 (p / publication\n            :name (n / name\n                  :op1 \"ESPN\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"McHenry\")\n            :age (t / temporal-quantity\n                  :quant 28\n                  :unit (y / year)))\n      :duration (t2 / temporal-quantity\n            :quant 1\n            :unit (w / week))\n      :ARG1-of (c / cause-01\n            :ARG0 (ii / investigate-01)))",
      "# ::snt But despite thousands of calls for McHenry , 28 , to be fired , McHenry , 28 , returns this week .\n(h / have-concession-91\n      :ARG1 (r / return-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"McHenry\")\n                  :age (t / temporal-quantity\n                        :quant 28\n                        :unit (y / year)))\n            :time (w / week\n                  :mod (t2 / this)))\n      :ARG2 (c / call-03\n            :ARG1 (f / fire-02\n                  :ARG1 p)\n            :quant (m / multiple\n                  :op1 1000)))"
    ],
    "tree": [
      "(b / berate-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"McHenry\")))",
      "(b / berate-01\n   :ARG0 (p / person\n            :age (t / temporal-quantity\n                    :quant 28)))",
      "(b / berate-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"McHenry\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Gina\"\n                       :op2 \"Michelle\")))",
      "(b / berate-01\n   :ARG0 (p / person\n            :age (t / temporal-quantity\n                    :quant 28))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Gina\"\n                       :op2 \"Michelle\")))",
      "(b / berate-01\n   :ARG0 (p / person\n            :age (t / temporal-quantity\n                    :quant 28))\n   :ARG1 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG2 (m / mother\n                               :ARG1 (s / single-03))))\n   :ARG2 (t2 / tow-01\n             :ARG0 p))",
      "(ii / insult-01\n    :ARG1 (l / look-02\n             :ARG0 (p2 / person\n                       :ARG0 (h / have-rel-role-91\n                                :ARG2 (m / mother\n                                         :ARG1 (s / single-03))))))",
      "(ii / insult-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"McHenry\"))\n    :medium (f / footage\n               :ARG1 (g / go-08\n                        :ARG2 (v / viral))))",
      "(ii / insult-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"McHenry\"))\n    :ARG1 (l / look-02\n             :ARG0 (p2 / person\n                       :name (n2 / name\n                                 :op1 \"Gina\"\n                                 :op2 \"Michelle\")))\n    :medium (f / footage\n               :ARG1 (g / go-08\n                        :ARG2 (v / viral))))",
      "(ii / insult-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"McHenry\"))\n    :ARG1 (s2 / status\n              :mod (s3 / social))\n    :medium (f / footage\n               :ARG1 (g / go-08\n                        :ARG2 (v / viral))))",
      "(ii / insult-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"McHenry\"))\n    :ARG1 (l / look-02\n             :ARG0 (p2 / person\n                       :ARG0 (h / have-rel-role-91\n                                :ARG2 (m / mother\n                                         :ARG1 (s / single-03)))))\n    :medium (f / footage\n               :ARG1 (g / go-08\n                        :ARG2 (v / viral))))",
      "(s / suspend-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"McHenry\")))",
      "(s / suspend-01\n   :ARG0 (p / publication\n            :name (n / name\n                     :op1 \"ESPN\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"McHenry\")))",
      "(s / suspend-01\n   :ARG0 (p / publication\n            :name (n / name\n                     :op1 \"ESPN\"))\n   :ARG1 (p2 / person\n             :age (t / temporal-quantity\n                     :quant 28)))",
      "(s / suspend-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"McHenry\"))\n   :duration (t2 / temporal-quantity\n                 :unit (w / week)))",
      "(s / suspend-01\n   :ARG0 (p / publication\n            :name (n / name\n                     :op1 \"ESPN\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"McHenry\"))\n   :duration (t2 / temporal-quantity\n                 :unit (w / week)))",
      "(h / have-concession-91\n   :ARG1 (r / return-01\n            :ARG1 (p / person\n                     :age (t / temporal-quantity\n                             :quant 28))))",
      "(r / return-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"McHenry\")))",
      "(r / return-01\n   :time (w / week\n            :mod (t2 / this)))",
      "(r / return-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"McHenry\"))\n   :time (w / week\n            :mod (t2 / this)))",
      "(r / return-01\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :quant 28))\n   :time (w / week\n            :mod (t2 / this)))"
    ],
    "smus": [
      "McHenry berated.",
      "The 28-year-old berated.",
      "McHenry berated Gina Michelle.",
      "The 28-year-old berated Gina Michelle.",
      "The 28-year-old berated a single mother for towing.",
      "insulted the looks of a single mother",
      "In the footage that went viral, McHenry insulted.",
      "In the footage that went viral, McHenry insulted Gina Michelle's looks.",
      "In the footage that went viral, McHenry insulted social status.",
      "In the footage that went viral, McHenry insulted the looks of a single mother.",
      "McHenry was suspended.",
      "ESPN suspended McHenry.",
      "ESPN suspended the 28-year-old.",
      "McHenry suspended for a week.",
      "ESPN suspended McHenry for a week.",
      "However, the 28-year-old returns.",
      "McHenry returns.",
      "Returns this week.",
      "McHenry returns this week.",
      "The 28-year-old returns this week."
    ]
  },
  {
    "instance_id": "realsumm-22",
    "summary": "Chloe Owens , 27 , from Swanley , designed new app Bump 2 Breast . Came up with idea when pregnant with daughter , Lola , now three months . Says Chloe Owens , 27 , from Swanley and husband David felt like ' rabbits in headlights ' at first . Also struggled to remember which boob to use when breastfeeding .",
    "summary_trees": [
      "# ::snt Chloe Owens , 27 , from Swanley , designed new app Bump 2 Breast .\n(d / design-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Chloe\"\n                  :op2 \"Owens\")\n            :age (t / temporal-quantity\n                  :quant 27\n                  :unit (y / year))\n            :source (c / city\n                  :name (n2 / name\n                        :op1 \"Swanley\")))\n      :ARG1 (a / app\n            :name (n3 / name\n                  :op1 \"Bump\"\n                  :op2 2\n                  :op3 \"Breast\")\n            :ARG1-of (n4 / new-01)))",
      "# ::snt Came up with idea when pregnant with daughter , Lola , now three months .\n(c / come-up-11\n      :ARG0 (ii / i)\n      :ARG1 (ii2 / idea)\n      :time (ii3 / impregnate-01\n            :ARG1 ii\n            :ARG2 (p / person\n                  :name (n / name\n                        :op1 \"Lola\")\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 ii\n                        :ARG2 (d / daughter))\n                  :age (t / temporal-quantity\n                        :quant 3\n                        :unit (m / month)\n                        :time (n2 / now)))))",
      "# ::snt Says Chloe Owens , 27 , from Swanley and husband David felt like ' rabbits in headlights ' at first .\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Chloe\"\n                  :op2 \"Ossins\")\n            :source (c / city\n                  :name (n2 / name\n                        :op1 \"Swanley\"))\n            :age (t / temporal-quantity\n                  :quant 27\n                  :unit (y / year)))\n      :ARG1 (f / feel-01\n            :ARG0 (a / and\n                  :op1 p\n                  :op2 (p2 / person\n                        :name (n3 / name\n                              :op1 \"David\")\n                        :ARG0-of (h / have-rel-role-91\n                              :ARG1 p\n                              :ARG2 (h2 / husband))))\n            :ARG1 (r / resemble-01\n                  :ARG1 a\n                  :ARG2 (b / bunny\n                        :location (h3 / head\n                              :part-of (h4 / headlights))))\n            :time (a2 / at-first)))",
      "# ::snt Also struggled to remember which boob to use when breastfeeding .\n(s / struggle-02\n      :ARG0 (ii / i)\n      :ARG1 (r / remember-01\n            :ARG0 ii\n            :ARG1 (b / boob\n                  :ARG1-of (u / use-01\n                        :ARG0 ii\n                        :time (b2 / breastfeed-01\n                              :ARG0 ii))))\n      :mod (a / also))"
    ],
    "tree": [
      "(d / design-01\n   :ARG1 (a / app\n            :name (n3 / name\n                      :op1 \"Bump\"\n                      :op2 2\n                      :op3 \"Breast\")))",
      "(d / design-01\n   :ARG1 (a / app\n            :ARG1 (n4 / new-01)))",
      "(d / design-01\n   :ARG0 (p / person\n            :age (t / temporal-quantity\n                    :unit (y / year)))\n   :ARG1 (a / app\n            :ARG1 (n4 / new-01)))",
      "(p / person\n   :source (c / city\n              :name (n2 / name\n                        :op1 \"Swanley\")))",
      "(a / app\n   :name (n3 / name\n             :op1 \"Bump\"\n             :op2 2\n             :op3 \"Breast\")\n   :ARG1 (n4 / new-01))",
      "(c / come-up-11\n   :time (ii3 / impregnate-01\n              :ARG2 (p / person\n                       :name (n / name\n                                :op1 \"Lola\"))))",
      "(c / come-up-11\n   :ARG0 (ii / i)\n   :time (ii3 / impregnate-01\n              :ARG2 (p / person\n                       :name (n / name\n                                :op1 \"Lola\"))))",
      "(c / come-up-11\n   :ARG1 (ii2 / idea)\n   :time (ii3 / impregnate-01\n              :ARG2 (p / person\n                       :name (n / name\n                                :op1 \"Lola\"))))",
      "(c / come-up-11\n   :ARG0 (ii / i)\n   :ARG1 (ii2 / idea)\n   :time (ii3 / impregnate-01\n              :ARG2 (p / person\n                       :name (n / name\n                                :op1 \"Lola\"))))",
      "(p / person\n   :name (n / name\n            :op1 \"Lola\")\n   :ARG0 (h / have-rel-role-91\n            :ARG2 (d / daughter))\n   :age (t / temporal-quantity\n           :unit (m / month)))",
      "(s / say-01\n   :ARG1 (f / feel-01\n            :time (a2 / at-first)))",
      "(s / say-01\n   :ARG0 (p / person\n            :age (t / temporal-quantity\n                    :quant 27))\n   :ARG1 (f / feel-01\n            :ARG0 (p2 / person\n                      :name (n3 / name\n                                :op1 \"David\"))))",
      "(s / say-01\n   :ARG0 (p / person\n            :age (t / temporal-quantity\n                    :quant 27))\n   :ARG1 (f / feel-01\n            :ARG0 (p2 / person\n                      :ARG0 (h / have-rel-role-91\n                               :ARG2 (h2 / husband)))))",
      "(p / person\n   :age (t / temporal-quantity\n           :quant 27))",
      "(f / feel-01\n   :ARG0 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG2 (h2 / husband)))\n   :time (a2 / at-first))",
      "(s / struggle-02\n   :ARG0 (ii / i)\n   :ARG1 (r / remember-01\n            :ARG1 (b / boob\n                     :ARG1 (u / use-01\n                              :ARG0 ii))))",
      "(s / struggle-02\n   :ARG1 (r / remember-01\n            :ARG0 (ii / i))\n   :mod (a / also))",
      "(s / struggle-02\n   :ARG0 (ii / i)\n   :ARG1 (r / remember-01\n            :ARG1 (b / boob\n                     :ARG1 (u / use-01\n                              :ARG0 ii)))\n   :mod (a / also))",
      "(s / struggle-02\n   :ARG0 (ii / i)\n   :ARG1 (r / remember-01\n            :ARG1 (b / boob\n                     :ARG1 (u / use-01\n                              :time (b2 / breastfeed-01\n                                        :ARG0 ii))))\n   :mod (a / also))"
    ],
    "smus": [
      "The app was designed as bump 2 breast.",
      "The new app was designed.",
      "The year old designed the new app.",
      "swanley",
      "New bump 2 breast app",
      "came up when Lola was pregnant.",
      "I came up when Lola was pregnant.",
      "The idea came up when Lola was pregnant.",
      "I came up with the idea while Lola was pregnant.",
      "Lola is a three month old daughter.",
      "Says felt at first.",
      "David felt, says the 27-year-old.",
      "The 27-year-old says the husband felt.",
      "27.",
      "At first, the husband felt.",
      "I struggled to remember the boob to use.",
      "I also struggled to remember.",
      "I also struggled to remember the boob to use.",
      "I also struggled to remember the boob to use when breast feeding."
    ]
  },
  {
    "instance_id": "realsumm-23",
    "summary": "Harley Street is a top destination for private cosmetic surgery . Patients pay thousands for treatments Patients hope will change Patients lives . Michael , 33 , spent \u00a3 7,500 on a hair transplant to boost Michael , 33 , self - esteem . Andrea , 72 , pays for a facelift - but Andrea , 72 , husband ca n't tell the difference .",
    "summary_trees": [
      "# ::snt Harley Street is a top destination for private cosmetic surgery .\n(d / destination\n      :mod (t / top)\n      :domain (s / street\n            :name (n / name\n                  :op1 \"Harley\"\n                  :op2 \"Street\"))\n      :purpose (s2 / surgery-01\n            :ARG2 (c / cosmetic)\n            :ARG1-of (p / private-03)))",
      "# ::snt Patients pay thousands for treatments Patients hope will change Patients lives .\n(p / pay-01\n      :ARG0 (p2 / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG2 (p3 / patient)))\n      :ARG1 (m / multiple\n            :op1 (m2 / monetary-quantity\n                  :quant 1000\n                  :unit (d / dollar)))\n      :ARG3 (t / treat-03\n            :ARG1 p2\n            :ARG0-of (c / change-01\n                  :ARG1 (l / life\n                        :poss p2)\n                  :ARG1-of (h2 / hope-01\n                        :ARG0 p2))))",
      "# ::snt Michael , 33 , spent \u00a3 7,500 on a hair transplant to boost Michael , 33 , self - esteem .\n(s / spend-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Michael\")\n            :age (t / temporal-quantity\n                  :quant 33\n                  :unit (y / year))\n            :part (h / hair))\n      :ARG1 (t2 / transplant-01\n            :ARG1 h)\n      :ARG3 (m / monetary-quantity\n            :quant 7000\n            :unit (p2 / pound))\n      :purpose (b / boost-01\n            :ARG0 t2\n            :ARG1 (e / esteem-01\n                  :ARG0 p\n                  :ARG1 p)))",
      "# ::snt Andrea , 72 , pays for a facelift - but Andrea , 72 , husband ca n't tell the difference .\n(c / contrast-01\n      :ARG1 (p / pay-01\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Andrea\")\n                  :age (t / temporal-quantity\n                        :quant 72\n                        :unit (y / year)))\n            :ARG3 (f / facelift))\n      :ARG2 (p3 / possible-01\n            :polarity -\n            :ARG1 (k / know-04\n                  :ARG0 (p4 / person\n                        :ARG0-of (h / have-rel-role-91\n                              :ARG1 p2\n                              :ARG2 (h2 / husband))\n                        :age (t2 / temporal-quantity\n                              :quant 72\n                              :unit (y2 / year)))\n                  :ARG1 (t3 / thing\n                        :ARG1-of (d / differ-02)))))"
    ],
    "tree": [
      "(d / destination\n   :domain (s / street\n              :name (n / name\n                       :op1 \"Harley\"\n                       :op2 \"Street\")))",
      "(d / destination\n   :domain (s / street\n              :name (n / name\n                       :op1 \"Harley\"\n                       :op2 \"Street\"))\n   :purpose (s2 / surgery-01\n                :ARG2 (c / cosmetic)))",
      "(d / destination\n   :domain (s / street\n              :name (n / name\n                       :op1 \"Harley\"\n                       :op2 \"Street\"))\n   :purpose (s2 / surgery-01\n                :ARG1 (p / private-03)))",
      "(d / destination\n   :mod (t / top)\n   :domain (s / street\n              :name (n / name\n                       :op1 \"Harley\"\n                       :op2 \"Street\"))\n   :purpose (s2 / surgery-01\n                :ARG2 (c / cosmetic)))",
      "(d / destination\n   :mod (t / top)\n   :domain (s / street\n              :name (n / name\n                       :op1 \"Harley\"\n                       :op2 \"Street\"))\n   :purpose (s2 / surgery-01\n                :ARG1 (p / private-03)))",
      "(p / pay-01\n   :ARG0 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG2 (p3 / patient))))",
      "(p / pay-01\n   :ARG3 (t / treat-03\n            :ARG1 (p2 / person)))",
      "(p / pay-01\n   :ARG0 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG2 (p3 / patient)))\n   :ARG1 (m / multiple\n            :op1 (m2 / monetary-quantity\n                     :quant 1000)))",
      "(p / pay-01\n   :ARG1 (m / multiple\n            :op1 (m2 / monetary-quantity\n                     :quant 1000))\n   :ARG3 (t / treat-03\n            :ARG1 (p2 / person)))",
      "(p / pay-01\n   :ARG0 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG2 (p3 / patient)))\n   :ARG1 (m / multiple\n            :op1 (m2 / monetary-quantity\n                     :quant 1000))\n   :ARG3 (t / treat-03\n            :ARG1 p2))",
      "(s / spend-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Michael\")))",
      "(s / spend-01\n   :ARG1 (t2 / transplant-01\n             :ARG1 (h / hair)))",
      "(s / spend-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Michael\"))\n   :purpose (b / boost-01\n               :ARG1 (e / esteem-01\n                        :ARG0 p)))",
      "(s / spend-01\n   :ARG1 (t2 / transplant-01\n             :ARG1 (h / hair))\n   :purpose (b / boost-01\n               :ARG1 (e / esteem-01\n                        :ARG1 (p / person :name (n / name :op1 \"Michael\"))))))",
      "(s / spend-01\n   :ARG0 (p / person\n            :age (t / temporal-quantity\n                    :quant 33))\n   :ARG1 (t2 / transplant-01\n             :ARG1 (h / hair))\n   :purpose (b / boost-01\n               :ARG1 (e / esteem-01\n                        :ARG0 p)))",
      "(c / contrast-01\n   :ARG1 (p / pay-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Andrea\"))))",
      "(p / pay-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Andrea\")))",
      "(p / pay-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Andrea\"))\n   :ARG3 (f / facelift))",
      "(p2 / person\n    :name (n / name\n             :op1 \"Andrea\")\n    :age (t / temporal-quantity\n            :quant 72))",
      "(p4 / person\n    :ARG0 (h / have-rel-role-91\n             :ARG1 (p2 / person :name (n / name :op1 \"Andrea\"))))\n    :age (t2 / temporal-quantity\n             :quant 72))"
    ],
    "smus": [
      "Harley Street is a destination.",
      "Harley Street is a destination for cosmetic surgery.",
      "Harley Street is a private surgery destination.",
      "Harley Street is the top destination for cosmetic surgery.",
      "Harley Street is the top destination for private surgery.",
      "Patients pay.",
      "People pay for their treatments.",
      "Patients pay thousands.",
      "People pay thousands for treatments.",
      "Patients pay thousands for their treatments.",
      "Michael spent.",
      "spent on a hair transplant.",
      "Michael spent to boost his self esteem.",
      "The hair transplant was spent to boost Michael's self-esteem.",
      "33-year-old spent on hair transplant to boost self-esteem.",
      "But Andrea pays.",
      "Andrea pays.",
      "Andrea pays for a facelift.",
      "Andrea, 72.",
      "Andrea is 72."
    ]
  },
  {
    "instance_id": "realsumm-24",
    "summary": "General Motors unveiled General Motors concept car at an event in Shanghai . their concept car has ' dragonfly ' swing doors and ' crystal laser headlights ' their concept car is self - driving , electric , and the front chairs can swivel round . And using iris recognition software you can start their concept car using just your eyes .",
    "summary_trees": [
      "# ::snt General Motors unveiled General Motors concept car at an event in Shanghai .\n(u / unveil-01\n      :ARG0 (c / company\n            :name (n / name\n                  :op1 \"General\"\n                  :op2 \"Motors\"))\n      :ARG1 (c2 / car\n            :mod (c3 / concept)\n            :mod c)\n      :location (e / event\n            :location (c4 / city\n                  :name (n2 / name\n                        :op1 \"Shanghai\"))))",
      "# ::snt their concept car has ' dragonfly ' swing doors and ' crystal laser headlights ' their concept car is self - driving , electric , and the front chairs can swivel round .\n(m / multi-sentence\n      :snt1 (h / have-03\n            :ARG0 (c / car\n                  :mod (c2 / concept)\n                  :poss (t / they))\n            :ARG1 (a / and\n                  :op1 (d / door\n                        :mod (s / swing)\n                        :mod (d2 / dragonfly))\n                  :op2 (h2 / headlight\n                        :mod (l / laser\n                              :mod (c3 / crystal)))))\n      :snt2 (a2 / and\n            :op1 (d3 / drive-01\n                  :ARG0 (s2 / self)\n                  :ARG1 (c4 / car\n                        :mod c2\n                        :mod (e / electric)))\n            :op2 (p / possible-01\n                  :ARG1 (s3 / swivel-01\n                        :ARG1 (c5 / chair\n                              :mod (f / front))\n                        :direction (r / round)))))",
      "# ::snt And using iris recognition software you can start their concept car using just your eyes .\n(a / and\n      :op2 (p / possible-01\n            :ARG1 (s / start-01\n                  :ARG0 (y / you\n                        :part (e / eye\n                              :mod (j / just)))\n                  :ARG1 (c / car\n                        :mod (c2 / concept)\n                        :poss (t / they))\n                  :instrument e)\n            :manner (u / use-01\n                  :ARG0 y\n                  :ARG1 (s2 / software\n                        :ARG0-of (r / recognize-02\n                              :ARG1 (ii / iris))))))"
    ],
    "tree": [
      "(u / unveil-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"General\"\n                     :op2 \"Motors\"))\n   :ARG1 (c2 / car\n             :mod (c3 / concept)))",
      "(u / unveil-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"General\"\n                     :op2 \"Motors\"))\n   :ARG1 (c2 / car\n             :mod c))",
      "(u / unveil-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"General\"\n                     :op2 \"Motors\"))\n   :location (e / event\n                :location (c4 / city\n                              :name (n2 / name\n                                        :op1 \"Shanghai\"))))",
      "(u / unveil-01\n   :ARG1 (c2 / car\n             :mod (c3 / concept))\n   :location (e / event\n                :location (c4 / city\n                              :name (n2 / name\n                                        :op1 \"Shanghai\"))))",
      "(e / event\n   :location (c4 / city\n                 :name (n2 / name\n                           :op1 \"Shanghai\")))",
      "(m / multi-sentence\n   :snt2 (p / possible-01\n            :ARG1 (s3 / swivel-01\n                      :ARG1 (c5 / chair\n                                :mod (f / front)))))",
      "(m / multi-sentence\n   :snt1 (h / have-03\n            :ARG1 (d / door\n                     :mod (s / swing)))\n   :snt2 (a2 / and\n             :op2 (p / possible-01\n                     :ARG1 (s3 / swivel-01\n                               :ARG1 (c5 / chair\n                                         :mod (f / front))))))",
      "(h / have-03\n   :ARG0 (c / car\n            :mod (c2 / concept))\n   :ARG1 (d / door\n            :mod (s / swing)))",
      "(a2 / and\n    :op2 (p / possible-01\n            :ARG1 (s3 / swivel-01\n                      :ARG1 (c5 / chair\n                                :mod (f / front)))))",
      "(p / possible-01\n   :ARG1 (s3 / swivel-01\n             :ARG1 (c5 / chair\n                       :mod (f / front))))",
      "(p / possible-01\n   :ARG1 (s / start-01\n            :ARG0 (y / you\n                     :part (e / eye\n                              :mod (j / just)))\n            :ARG1 (c / car\n                     :mod (c2 / concept)\n                     :poss (t / they))\n            :instrument e)\n   :manner (u / use-01\n              :ARG0 y\n              :ARG1 (s2 / software\n                        :ARG0 (r / recognize-02\n                                 :ARG1 (ii / iris)))))"
    ],
    "smus": [
      "General Motors unveiled a concept car.",
      "General Motors unveiled the car.",
      "General Motors unveiled at an event in Shanghai.",
      "The concept car was unveiled at an event in Shanghai.",
      "The event took place in Shanghai.",
      "Front chairs can swivel.",
      "Has swing doors and front chairs can swivel.",
      "The concept car has swing doors.",
      "And the front chairs can swivel.",
      "The front chairs can swivel.",
      "Using iris recognition software, you can start their concept car with just your eyes."
    ]
  },
  {
    "instance_id": "realsumm-25",
    "summary": "Candidate Lynne Abraham says the 74 - year - old former district attorney suffered a momentary drop in blood pressure and that a momentary drop in blood pressure 's never happened before . While a doctor kept the 74 - year - old former district attorney from returning to the debate , the 74 - year - old former district attorney says the 74 - year - old former district attorney will not let a momentary drop in blood pressure affect the 74 - year - old former district attorney campaign .",
    "summary_trees": [
      "# ::snt Candidate Lynne Abraham says the 74 - year - old former district attorney suffered a momentary drop in blood pressure and that a momentary drop in blood pressure 's never happened before .\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Lynne\"\n                  :op2 \"Abraham\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (a / attorney\n                        :mod (d / district))\n                  :time (f / former))\n            :age (t / temporal-quantity\n                  :quant 74\n                  :unit (y / year))\n            :ARG0-of h\n            :ARG2 (c / candidate))\n      :ARG1 (a2 / and\n            :op1 (s2 / suffer-01\n                  :ARG0 (p2 / person)\n                  :ARG1 (d2 / drop-01\n                        :ARG1 (p3 / pressure\n                              :mod (b / blood))\n                        :mod (m / momentary)))\n            :op2 (d3 / drop-01\n                  :polarity -\n                  :ARG1 p3\n                  :mod m\n                  :time (b2 / before))))",
      "# ::snt While a doctor kept the 74 - year - old former district attorney from returning to the debate , the 74 - year - old former district attorney says the 74 - year - old former district attorney will not let a momentary drop in blood pressure affect the 74 - year - old former district attorney campaign .\n(c / contrast-01\n      :ARG1 (s / say-01\n            :ARG0 (a / attorney\n                  :mod (d / district)\n                  :age (t / temporal-quantity\n                        :quant 74\n                        :unit (y / year))\n                  :time (f / former))\n            :ARG1 (l / let-01\n                  :polarity -\n                  :ARG0 a\n                  :ARG1 (a2 / affect-01\n                        :ARG0 (d2 / drop-01\n                              :ARG1 (p / pressure\n                                    :mod (b / blood))\n                              :mod (m / momentary))\n                        :ARG1 (c2 / campaign-01\n                              :ARG0 a))))\n      :ARG2 (k / keep-04\n            :ARG0 (d3 / doctor)\n            :ARG1 a\n            :ARG2 (r / return-01\n                  :ARG1 a\n                  :ARG4 (d4 / debate-01))))"
    ],
    "tree": [
      "(s / say-01\n   :ARG0 (p / person\n            :ARG2 (c / candidate)))",
      "(s / say-01\n   :ARG1 (s2 / suffer-01\n             :ARG1 (d2 / drop-01\n                       :ARG1 (p3 / pressure\n                                 :mod (b / blood)))))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG2 (c / candidate))\n   :ARG1 (s2 / suffer-01\n             :ARG1 (d2 / drop-01\n                       :ARG1 (p3 / pressure\n                                 :mod (b / blood)))))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG2 (c / candidate))\n   :ARG1 (d3 / drop-01\n             :ARG1 (p3 / pressure\n                       :mod (b / blood))))",
      "(p / person\n   :ARG0 (h / have-org-role-91\n            :ARG2 (a / attorney))\n   :age (t / temporal-quantity\n           :quant 74))",
      "(s / say-01\n   :ARG0 (a / attorney\n            :age (t / temporal-quantity\n                    :quant 74))\n   :ARG1 (l / let-01\n            :polarity -))",
      "(s / say-01\n   :ARG0 (a / attorney\n            :time (f / former))\n   :ARG1 (l / let-01\n            :polarity -))",
      "(a / attorney\n   :mod (d / district)\n   :time (f / former))",
      "(a / attorney\n   :mod (d / district)\n   :age (t / temporal-quantity\n           :quant 74)\n   :time (f / former))",
      "(a2 / affect-01\n    :ARG0 (d2 / drop-01\n              :ARG1 (p / pressure\n                       :mod (b / blood))))"
    ],
    "smus": [
      "Candidate says.",
      "Says that suffered a drop in blood pressure.",
      "Candidate says blood pressure dropped.",
      "Candidate says drop in blood pressure.",
      "The attorney is 74.",
      "The 74-year-old attorney says he won't let.",
      "The former attorney says he won't let.",
      "Former district attorney",
      "74 - former district attorney",
      "The effect is a drop in blood pressure."
    ]
  },
  {
    "instance_id": "realsumm-26",
    "summary": "Bundles of notes spilled onto Interstate 20 in Albilene , Texas , on Friday . Passenger door of vehicle flung open - releasing Bundles of notes onto Interstate 20 in Albilene , Texas . Motorists pulled over and abandoned Motorists vehicles to pick up Bundles of notes . Police have warned anyone caught with Bundles of notes will be arrested .",
    "summary_trees": [
      "# ::snt Bundles of notes spilled onto Interstate 20 in Albilene , Texas , on Friday .\n(s / spill-over-02\n      :ARG1 (n / note\n            :quant (b / bundle))\n      :ARG2 (r / road\n            :name (n2 / name\n                  :op1 \"Interstate\"\n                  :op2 20)\n            :location (c / city\n                  :name (n3 / name\n                        :op1 \"Alilene\")\n                  :location (s2 / state\n                        :name (n4 / name\n                              :op1 \"Texas\"))))\n      :time (d / date-entity\n            :weekday (f / friday)))",
      "# ::snt Passenger door of vehicle flung open - releasing Bundles of notes onto Interstate 20 in Albilene , Texas .\n(a / and\n      :op1 (f / flung-01\n            :ARG1 (d / door\n                  :part-of (v / vehicle)\n                  :mod (p / passenger))\n            :ARG2 (o / open-01\n                  :ARG1 d))\n      :op2 (r / release-01\n            :ARG0 d\n            :ARG1 (b / bundle-01\n                  :ARG1 (n / note))\n            :location (r2 / road\n                  :name (n2 / name\n                        :op1 \"Interstate\"\n                        :op2 20)\n                  :location (c / city\n                        :name (n3 / name\n                              :op1 \"Alilene\")\n                        :location (s / state\n                              :name (n4 / name\n                                    :op1 \"Texas\"))))))",
      "# ::snt Motorists pulled over and abandoned Motorists vehicles to pick up Bundles of notes .\n(a / and\n      :op1 (p / pull-over-05\n            :ARG1 (p2 / person\n                  :ARG0-of (d / drive-01\n                        :ARG1 (v / vehicle\n                              :poss p2))))\n      :op2 (a2 / abandon-01\n            :ARG0 p2\n            :ARG1 v)\n      :purpose (p3 / pick-up-04\n            :ARG0 p2\n            :ARG1 (b / bundle\n                  :consist-of (n / note))))",
      "# ::snt Police have warned anyone caught with Bundles of notes will be arrested .\n(w / warn-01\n      :ARG0 (p / police)\n      :ARG1 (a / arrest-01\n            :ARG1 (a2 / anyone\n                  :ARG1-of (c / catch-02\n                        :ARG2 (b / bundle\n                              :consist-of (n / note))))))"
    ],
    "tree": [
      "(s / spill-over-02\n   :ARG1 (n / note\n            :quant (b / bundle)))",
      "(s / spill-over-02\n   :ARG1 (n / note\n            :quant (b / bundle))\n   :ARG2 (r / road\n            :name (n2 / name\n                      :op1 \"Interstate\"\n                      :op2 20)))",
      "(s / spill-over-02\n   :ARG1 (n / note\n            :quant (b / bundle))\n   :time (d / date-entity\n            :weekday (f / friday)))",
      "(s / spill-over-02\n   :ARG1 (n / note\n            :quant (b / bundle))\n   :ARG2 (r / road\n            :name (n2 / name\n                      :op1 \"Interstate\"\n                      :op2 20))\n   :time (d / date-entity\n            :weekday (f / friday)))",
      "(s / spill-over-02\n   :ARG1 (n / note\n            :quant (b / bundle))\n   :ARG2 (r / road\n            :location (c / city\n                         :name (n3 / name\n                                   :op1 \"Alilene\")))\n   :time (d / date-entity\n            :weekday (f / friday)))",
      "(f / flung-01\n   :ARG1 (d / door\n            :part (v / vehicle)\n            :mod (p / passenger))\n   :ARG2 (o / open-01\n            :ARG1 d))",
      "(r / release-01\n   :ARG0 (d / door)\n   :ARG1 (b / bundle-01\n            :ARG1 (n / note))\n   :location (r2 / road\n                 :name (n2 / name)))",
      "(p / pull-over-05\n   :ARG1 (p2 / person\n             :ARG0 (d / drive-01\n                      :ARG1 (v / vehicle\n                               :poss p2))))",
      "(w / warn-01\n   :ARG1 (a / arrest-01\n            :ARG1 (a2 / anyone\n                      :ARG1 (c / catch-02\n                               :ARG2 (b / bundle\n                                        :consist-of (n / note))))))",
      "(w / warn-01\n   :ARG0 (p / police)\n   :ARG1 (a / arrest-01\n            :ARG1 (a2 / anyone\n                      :ARG1 (c / catch-02\n                               :ARG2 (b / bundle\n                                        :consist-of (n / note))))))",
      "(a / arrest-01\n   :ARG1 (a2 / anyone\n             :ARG1 (c / catch-02\n                      :ARG2 (b / bundle\n                               :consist-of (n / note)))))",
      "(a2 / anyone\n    :ARG1 (c / catch-02\n             :ARG2 (b / bundle\n                      :consist-of (n / note))))",
      "(c / catch-02\n   :ARG2 (b / bundle\n            :consist-of (n / note)))"
    ],
    "smus": [
      "Bundles of notes spilled over.",
      "Bundles of notes spilled over Interstate 20.",
      "Bundles of notes spilled over on Friday.",
      "Bundles of notes spilled over Interstate 20 on Friday.",
      "Bundles of notes spilled over the road in Alilene on Friday.",
      "The passenger door of the vehicle flung open.",
      "The door was releasing bundles of notes on the road.",
      "The drivers of their vehicles pulled over.",
      "Anyone caught with bundles of notes is warned to be arrested.",
      "Police have warned that anyone caught with bundles of notes will be arrested.",
      "Anyone caught with bundles of notes will be arrested.",
      "Anyone caught in bundles of notes?",
      "Bundles of notes were caught."
    ]
  },
  {
    "instance_id": "realsumm-27",
    "summary": "Godfrey Elfwick recruited via Twitter to appear on World Have Your Say . Came after claims Godfrey Elfwick had never seen the Star Wars franchise before . On World Have Your Say Godfrey Elfwick described the Star Wars franchise as both anti - women and anti - gay . Also said that Darth Vader was a black man and a ' really bad racial stereotype ' .",
    "summary_trees": [
      "# ::snt Godfrey Elfwick recruited via Twitter to appear on World Have Your Say .\n(r / recruit-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Godfrey\"\n                  :op2 \"Elfwick\"))\n      :ARG3 (a / appear-01\n            :ARG1 p\n            :medium (b / broadcast-program\n                  :name (n2 / name\n                        :op1 \"World\"\n                        :op2 \"Have\"\n                        :op3 \"Your\"\n                        :op4 \"Say\")))\n      :medium (p2 / publication\n            :name (n3 / name\n                  :op1 \"Twitter\")))",
      "# ::snt Came after claims Godfrey Elfwick had never seen the Star Wars franchise before .\n(c / come-01\n      :time (a / after\n            :op1 (c2 / claim-01\n                  :ARG1 (s / see-01\n                        :polarity -\n                        :ARG0 (p / person\n                              :name (n / name\n                                    :op1 \"Godfrey\"\n                                    :op2 \"Elfwick\"))\n                        :ARG1 (f / franchise\n                              :name (n2 / name\n                                    :op1 \"Star\"\n                                    :op2 \"Wars\"))\n                        :time (e / ever)\n                        :time (b / before)))))",
      "# ::snt On World Have Your Say Godfrey Elfwick described the Star Wars franchise as both anti - women and anti - gay .\n(d / describe-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Godfrey\"\n                  :op2 \"Elfwick\"))\n      :ARG1 (f / franchise\n            :name (n2 / name\n                  :op1 \"Star\"\n                  :op2 \"Wars\"))\n      :ARG2 (a / and\n            :op1 (o / oppose-01\n                  :ARG0 f\n                  :ARG1 (w / woman))\n            :op2 (o2 / oppose-01\n                  :ARG0 f\n                  :ARG1 (g / gay-01)))\n      :medium (b / broadcast-program\n            :name (n3 / name\n                  :op1 \"World\"\n                  :op2 \"Have\"\n                  :op3 \"Your\"\n                  :op4 \"Say\")))",
      "# ::snt Also said that Darth Vader was a black man and a ' really bad racial stereotype ' .\n(s / say-01\n      :ARG1 (a / and\n            :op1 (m / man\n                  :ARG1-of (b / black-05)\n                  :domain (p / person\n                        :name (n / name\n                              :op1 \"Darth\"\n                              :op2 \"Vader\")))\n            :op2 (s2 / stereotype-01\n                  :ARG2 p\n                  :ARG3 (r / race)\n                  :ARG1-of (b2 / bad-07\n                        :degree (r2 / really))))\n      :mod (a2 / also))"
    ],
    "tree": [
      "(r / recruit-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Godfrey\"\n                     :op2 \"Elfwick\")))",
      "(r / recruit-01\n   :ARG3 (a / appear-01\n            :ARG1 (p / person :name (n / name :op1 \"Godfrey\" :op2 \"Elfwick\"))))",
      "(r / recruit-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Godfrey\"\n                     :op2 \"Elfwick\"))\n   :ARG3 (a / appear-01\n            :medium (b / broadcast-program\n                       :name (n2 / name\n                                 :op1 \"World\"\n                                 :op2 \"Have\"\n                                 :op3 \"Your\"\n                                 :op4 \"Say\"))))",
      "(r / recruit-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Godfrey\"\n                     :op2 \"Elfwick\"))\n   :medium (p2 / publication\n               :name (n3 / name\n                         :op1 \"Twitter\")))",
      "(a / after\n   :op1 (c2 / claim-01\n            :ARG1 (s / see-01\n                     :time (e / ever))))",
      "(c2 / claim-01\n    :ARG1 (s / see-01\n             :time (e / ever)))",
      "(s / see-01\n   :ARG1 (f / franchise\n            :name (n2 / name\n                      :op1 \"Star\"\n                      :op2 \"Wars\")))",
      "(p / person\n   :name (n / name\n            :op1 \"Godfrey\"\n            :op2 \"Elfwick\"))",
      "(f / franchise\n   :name (n2 / name\n             :op1 \"Star\"\n             :op2 \"Wars\"))",
      "(d / describe-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Godfrey\"\n                     :op2 \"Elfwick\"))\n   :ARG1 (f / franchise\n            :name (n2 / name\n                      :op1 \"Star\"\n                      :op2 \"Wars\")))",
      "(d / describe-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Godfrey\"\n                     :op2 \"Elfwick\"))\n   :ARG1 (f / franchise\n            :name (n2 / name\n                      :op1 \"Star\"\n                      :op2 \"Wars\"))\n   :ARG2 (o / oppose-01\n            :ARG1 (w / woman)))",
      "(d / describe-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Godfrey\"\n                     :op2 \"Elfwick\"))\n   :ARG1 (f / franchise\n            :name (n2 / name\n                      :op1 \"Star\"\n                      :op2 \"Wars\"))\n   :ARG2 (o2 / oppose-01\n             :ARG1 (g / gay-01)))",
      "(d / describe-01\n   :ARG1 (f / franchise\n            :name (n2 / name\n                      :op1 \"Star\"\n                      :op2 \"Wars\"))\n   :ARG2 (o / oppose-01\n            :ARG1 (w / woman))\n   :medium (b / broadcast-program\n              :name (n3 / name\n                        :op1 \"World\"\n                        :op2 \"Have\"\n                        :op3 \"Your\"\n                        :op4 \"Say\")))",
      "(d / describe-01\n   :ARG1 (f / franchise\n            :name (n2 / name\n                      :op1 \"Star\"\n                      :op2 \"Wars\"))\n   :ARG2 (o2 / oppose-01\n             :ARG1 (g / gay-01))\n   :medium (b / broadcast-program\n              :name (n3 / name\n                        :op1 \"World\"\n                        :op2 \"Have\"\n                        :op3 \"Your\"\n                        :op4 \"Say\")))",
      "(s / say-01\n   :ARG1 (s2 / stereotype-01\n             :ARG3 (r / race))\n   :mod (a2 / also))",
      "(a / and\n   :op2 (s2 / stereotype-01\n            :ARG3 (r / race)))",
      "(a / and\n   :op1 (m / man\n           :domain (p / person\n                      :name (n / name\n                               :op1 \"Darth\"\n                               :op2 \"Vader\")))\n   :op2 (s2 / stereotype-01\n            :ARG3 (r / race)))",
      "(a / and\n   :op1 (m / man\n           :domain (p / person\n                      :name (n / name\n                               :op1 \"Darth\"\n                               :op2 \"Vader\")))\n   :op2 (s2 / stereotype-01\n            :ARG1 (b2 / bad-07\n                      :degree (r2 / really))))",
      "(m / man\n   :domain (p / person\n              :name (n / name\n                       :op1 \"Darth\"\n                       :op2 \"Vader\")))"
    ],
    "smus": [
      "Godfrey Elfwick was recruited.",
      "Godfrey Elfwick was recruited to appear.",
      "Godfrey Elfwick was recruited to appear on World Have Your Say.",
      "Godfrey Elfwick was recruited on Twitter.",
      "After claims that they have never been seen.",
      "claims to have never been seen.",
      "Star Wars is seen.",
      "Godfrey Elfwick",
      "Star Wars franchise.",
      "Godfrey Elfwick described the Star Wars franchise.",
      "Godfrey Elfwick described the Star Wars franchise as anti-women.",
      "Godfrey Elfwick described the Star Wars franchise as anti-gay.",
      "On World Have Your Say the Star Wars franchise was described as anti-women.",
      "The Star Wars franchise was described on World Have Your Say as anti-gay.",
      "Also said that there is a racial stereotype.",
      "and a racial stereotype.",
      "arth Vader is a man and there is a racial stereotype.",
      "arth vader is a man and the stereotype is really bad.",
      "arth Vader is a man."
    ]
  },
  {
    "instance_id": "realsumm-28",
    "summary": "Cuban - born Kathy Ferreiro 's curves have attracted fans on social media . Cuban - born Kathy Ferreiro 's says photos of Cuban - born Kathy Ferreiro 's booty are all natural . Cuban - born Kathy Ferreiro 's is hoping to become next Kim Kardashian . Has a huge following in Colombia and other Latin American countries .",
    "summary_trees": [
      "# ::snt Cuban - born Kathy Ferreiro 's curves have attracted fans on social media .\n(a / attract-01\n      :ARG0 (c / curve\n            :poss (p / person\n                  :name (n / name\n                        :op1 \"Kathy\"\n                        :op2 \"Ferreiro\")\n                  :ARG1-of (b / bear-02\n                        :location (c2 / country\n                              :name (n2 / name\n                                    :op1 \"Cuba\")))))\n      :ARG1 (f / fan)\n      :medium (m / media\n            :mod (s / social)))",
      "# ::snt Cuban - born Kathy Ferreiro 's says photos of Cuban - born Kathy Ferreiro 's booty are all natural .\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Kathy\"\n                  :op2 \"Ferreiro\")\n            :ARG1-of (b / bear-02\n                  :location (c / country\n                        :name (n2 / name\n                              :op1 \"Cuba\")))\n            :part (b2 / booty))\n      :ARG1 (n3 / natural-03\n            :ARG1 (p2 / photograph-01\n                  :ARG1 b2\n                  :mod (a / all))))",
      "# ::snt Cuban - born Kathy Ferreiro 's is hoping to become next Kim Kardashian .\n(h / hope-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Kathy\"\n                  :op2 \"Ferreiro\")\n            :ARG1-of (b / bear-02\n                  :location (c / country\n                        :name (n2 / name\n                              :op1 \"Cuba\"))))\n      :ARG1 (b2 / become-01\n            :ARG1 p\n            :ARG2 (p2 / person\n                  :name (n3 / name\n                        :op1 \"Kim\"\n                        :op2 \"Kardinez\")\n                  :mod (n4 / next))))",
      "# ::snt Has a huge following in Colombia and other Latin American countries .\n(f / follow-02\n      :ARG1 (ii / it)\n      :mod (h / huge)\n      :location (a / and\n            :op1 (c / country\n                  :name (n / name\n                        :op1 \"Colombia\"))\n            :op2 (c2 / country\n                  :location (w / world-region\n                        :name (n2 / name\n                              :op1 \"Latin\"\n                              :op2 \"America\"))\n                  :mod (o / other))))"
    ],
    "tree": [
      "(a / attract-01\n   :ARG0 (c / curve\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Kathy\"\n                              :op2 \"Ferreiro\")))\n   :ARG1 (f / fan))",
      "(a / attract-01\n   :ARG0 (c / curve\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Kathy\"\n                              :op2 \"Ferreiro\")))\n   :ARG1 (f / fan)\n   :medium (m / media\n              :mod (s / social)))",
      "(a / attract-01\n   :ARG0 (c / curve\n            :poss (p / person\n                     :ARG1 (b / bear-02\n                              :location (c2 / country\n                                            :name (n2 / name\n                                                      :op1 \"Cuba\")))))\n   :ARG1 (f / fan)\n   :medium (m / media\n              :mod (s / social)))",
      "(p / person\n   :ARG1 (b / bear-02\n            :location (c2 / country\n                          :name (n2 / name\n                                    :op1 \"Cuba\"))))",
      "(p / person\n   :name (n / name\n            :op1 \"Kathy\"\n            :op2 \"Ferreiro\")\n   :ARG1 (b / bear-02\n            :location (c2 / country\n                          :name (n2 / name\n                                    :op1 \"Cuba\"))))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kathy\"\n                     :op2 \"Ferreiro\"))\n   :ARG1 (n3 / natural-03\n             :ARG1 (p2 / photograph-01\n                       :ARG1 (b2 / booty))))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kathy\"\n                     :op2 \"Ferreiro\"))\n   :ARG1 (n3 / natural-03\n             :ARG1 (p2 / photograph-01\n                       :mod (a / all))))",
      "(p / person\n   :name (n / name\n            :op1 \"Kathy\"\n            :op2 \"Ferreiro\"))",
      "(p / person\n   :ARG1 (b / bear-02\n            :location (c / country\n                         :name (n2 / name\n                                   :op1 \"Cuba\"))))",
      "(p / person\n   :name (n / name\n            :op1 \"Kathy\"\n            :op2 \"Ferreiro\")\n   :ARG1 (b / bear-02\n            :location (c / country\n                         :name (n2 / name\n                                   :op1 \"Cuba\"))))",
      "(h / hope-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kathy\"\n                     :op2 \"Ferreiro\")))",
      "(h / hope-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kathy\"\n                     :op2 \"Ferreiro\"))\n   :ARG1 (b2 / become-01\n             :ARG2 (p2 / person\n                       :mod (n4 / next))))",
      "(p / person\n   :name (n / name\n            :op1 \"Kathy\"\n            :op2 \"Ferreiro\"))",
      "(p / person\n   :ARG1 (b / bear-02\n            :location (c / country\n                         :name (n2 / name\n                                   :op1 \"Cuba\"))))",
      "(p / person\n   :name (n / name\n            :op1 \"Kathy\"\n            :op2 \"Ferreiro\")\n   :ARG1 (b / bear-02\n            :location (c / country\n                         :name (n2 / name\n                                   :op1 \"Cuba\"))))",
      "(f / follow-02\n   :location (c2 / country\n                 :location (w / world-region\n                              :name (n2 / name\n                                        :op1 \"Latin\"\n                                        :op2 \"America\"))))",
      "(f / follow-02\n   :ARG1 (ii / it)\n   :location (c / country\n                :name (n / name\n                         :op1 \"Colombia\")))",
      "(f / follow-02\n   :ARG1 (ii / it)\n   :location (c2 / country\n                 :location (w / world-region\n                              :name (n2 / name\n                                        :op1 \"Latin\"\n                                        :op2 \"America\"))))",
      "(f / follow-02\n   :mod (h / huge)\n   :location (c2 / country\n                 :location (w / world-region\n                              :name (n2 / name\n                                        :op1 \"Latin\"\n                                        :op2 \"America\"))))",
      "(f / follow-02\n   :ARG1 (ii / it)\n   :mod (h / huge)\n   :location (c / country\n                :name (n / name\n                         :op1 \"Colombia\")))"
    ],
    "smus": [
      "Kathy Ferreiro's curves have attracted fans.",
      "Kathy Ferreiro's curves have attracted fans on social media.",
      "Cuban-born curves have attracted fans through social media.",
      "Cuban-born",
      "Kathy Ferreiro was born in Cuba.",
      "Kathy Ferreiro says the photos of the booty are natural.",
      "Kathy Ferreiro says all the photos are natural.",
      "Kathy Ferreiro",
      "Cuban-born",
      "Kathy Ferreiro was born in Cuba.",
      "Kathy Ferreiro is hoping.",
      "Kathy Ferreiro is hoping to become the next person.",
      "Kathy Ferreiro",
      "Cuban-born",
      "Kathy Ferreiro was born in Cuba.",
      "Followed in Latin American countries.",
      "It is followed in Colombia.",
      "It is followed in Latin American countries.",
      "There is huge follow in Latin American countries.",
      "It is a huge follower in Colombia."
    ]
  },
  {
    "instance_id": "realsumm-29",
    "summary": "Thousands of accounts vanished from the social network last week . the social network said the social network had received numerous reports about terror - promoting users . Decided to suspend 10,000 accounts for making threats of violence . Suspensions were almost certainly linked to a campaign by ' hacktavist ' collective Anonymous targeting online jihadis .",
    "summary_trees": [
      "# ::snt Thousands of accounts vanished from the social network last week .\n(v / vanish-01\n      :ARG1 (a / account\n            :quant (m / multiple\n                  :op1 1000))\n      :location (n / network\n            :ARG0-of (s / social-03))\n      :time (w / week\n            :mod (l / last)))",
      "# ::snt the social network said the social network had received numerous reports about terror - promoting users .\n(s / say-01\n      :ARG0 (n / network\n            :mod (s2 / social))\n      :ARG1 (r / receive-01\n            :ARG0 n\n            :ARG1 (r2 / report-01\n                  :ARG1 (p / person\n                        :ARG0-of (u / use-01)\n                        :ARG0-of (p2 / promote-02\n                              :ARG1 (t / terror)))\n                  :quant (n2 / numerous))))",
      "# ::snt Decided to suspend 10,000 accounts for making threats of violence .\n(d / decide-01\n      :ARG1 (s / suspend-01\n            :ARG1 (a / account\n                  :quant 10000)\n            :ARG1-of (c / cause-01\n                  :ARG0 (t / threaten-01\n                        :ARG1 (v / violence)))))",
      "# ::snt Suspensions were almost certainly linked to a campaign by ' hacktavist ' collective Anonymous targeting online jihadis .\n(l / link-01\n      :ARG1 (s / suspend-01)\n      :ARG2 (c / campaign-01\n            :ARG0 (c2 / collective\n                  :name (n / name\n                        :op1 \"Anonymous\")\n                  :mod (h / hacktavist))\n            :ARG0-of (t / target-01\n                  :ARG1 (j / jihadi\n                        :mod (o / online))))\n      :mod (c3 / certain\n            :mod (a / almost)))"
    ],
    "tree": [
      "(v / vanish-01\n   :ARG1 (a / account\n            :quant (m / multiple\n                      :op1 1000)))",
      "(v / vanish-01\n   :time (w / week\n            :mod (l / last)))",
      "(v / vanish-01\n   :ARG1 (a / account\n            :quant (m / multiple\n                      :op1 1000))\n   :location (n / network\n                :ARG0 (s / social-03)))",
      "(v / vanish-01\n   :ARG1 (a / account\n            :quant (m / multiple\n                      :op1 1000))\n   :time (w / week\n            :mod (l / last)))",
      "(v / vanish-01\n   :ARG1 (a / account\n            :quant (m / multiple\n                      :op1 1000))\n   :location (n / network\n                :ARG0 (s / social-03))\n   :time (w / week\n            :mod (l / last)))",
      "(s / say-01\n   :ARG1 (r / receive-01\n            :ARG0 (n / network)))",
      "(s / say-01\n   :ARG1 (r / receive-01\n            :ARG1 (r2 / report-01\n                      :ARG1 (p / person\n                               :ARG0 (p2 / promote-02\n                                         :ARG1 (t / terror))))))",
      "(s / say-01\n   :ARG0 (n / network\n            :mod (s2 / social))\n   :ARG1 (r / receive-01\n            :ARG0 n))",
      "(s / say-01\n   :ARG0 (n / network\n            :mod (s2 / social))\n   :ARG1 (r / receive-01\n            :ARG1 (r2 / report-01\n                      :quant (n2 / numerous))))",
      "(s / say-01\n   :ARG0 (n / network\n            :mod (s2 / social))\n   :ARG1 (r / receive-01\n            :ARG1 (r2 / report-01\n                      :ARG1 (p / person\n                               :ARG0 (p2 / promote-02\n                                         :ARG1 (t / terror))))))",
      "(d / decide-01\n   :ARG1 (s / suspend-01\n            :ARG1 (a / account\n                     :quant 10000)))",
      "(d / decide-01\n   :ARG1 (s / suspend-01\n            :ARG1 (c / cause-01\n                     :ARG0 (t / threaten-01\n                              :ARG1 (v / violence)))))",
      "(s / suspend-01\n   :ARG1 (a / account\n            :quant 10000))",
      "(c / cause-01\n   :ARG0 (t / threaten-01\n            :ARG1 (v / violence)))",
      "(l / link-01\n   :ARG1 (s / suspend-01)\n   :ARG2 (c / campaign-01\n            :ARG0 (c2 / collective\n                      :name (n / name\n                               :op1 \"Anonymous\")))\n   :mod (c3 / certain\n            :mod (a / almost)))",
      "(l / link-01\n   :ARG1 (s / suspend-01)\n   :ARG2 (c / campaign-01\n            :ARG0 (t / target-01\n                     :ARG1 (j / jihadi\n                              :mod (o / online))))\n   :mod (c3 / certain\n            :mod (a / almost)))",
      "(l / link-01\n   :ARG1 (s / suspend-01)\n   :ARG2 (c / campaign-01\n            :ARG0 (c2 / collective\n                      :mod (h / hacktavist)))\n   :mod (c3 / certain\n            :mod (a / almost)))",
      "(c2 / collective\n    :name (n / name\n             :op1 \"Anonymous\")\n    :mod (h / hacktavist))",
      "(t / target-01\n   :ARG1 (j / jihadi\n            :mod (o / online)))"
    ],
    "smus": [
      "Thousands of accounts vanished.",
      "vanished last week.",
      "Thousands of accounts vanished from the social network.",
      "Thousands of accounts vanished last week.",
      "Thousands of accounts vanished from social network last week.",
      "The network said it had received.",
      "Reports of terrorists have been received, the statement said.",
      "The social network said it had received.",
      "A social network said it had received numerous reports.",
      "Reports of people promoting terror have been received, according to a social network.",
      "Decided to suspend 10,000 accounts.",
      "The decision to suspend was made over threats of violence.",
      "Suspend 10,000 accounts.",
      "Because of threats of violence.",
      "The suspensions are almost certainly linked to the Anonymous collective campaign.",
      "The suspensions are almost certainly linked to a campaign targeting online jihadis.",
      "The suspensions are almost certainly linked to a hacktavist collective campaign.",
      "Anonymous is a hacktavist collective.",
      "Online jihadis are targeted."
    ]
  },
  {
    "instance_id": "realsumm-30",
    "summary": "Locals say power cuts the weekend before raid could be linked to heist . Locals also tell of suspicious ' drilling ' noises on evening of Good Friday . Group seen returning to scene on Saturday - a day after initial break - in . Police admit Police did n't respond after alarm went off early on Good Friday .",
    "summary_trees": [
      "# ::snt Locals say power cuts the weekend before raid could be linked to heist .\n(s / say-01\n      :ARG0 (p / person\n            :ARG1-of (l / local-02))\n      :ARG1 (p2 / possible-01\n            :ARG1 (l2 / link-01\n                  :ARG1 (c / cut-02\n                        :ARG1 (p3 / power)\n                        :time (w / weekend)\n                        :time (b / before\n                              :op1 (r / raid-01)))\n                  :ARG2 (h / heist))))",
      "# ::snt Locals also tell of suspicious ' drilling ' noises on evening of Good Friday .\n(t / tell-01\n      :ARG0 (p / person\n            :ARG1-of (l / local-02))\n      :ARG1 (n / noise\n            :mod (d / drill-01)\n            :ARG1-of (s / suspicious-03)\n            :time (d2 / date-entity\n                  :weekday (f / friday)\n                  :dayperiod (e / evening)))\n      :mod (a / also))",
      "# ::snt Group seen returning to scene on Saturday - a day after initial break - in .\n(s / see-01\n      :ARG1 (r / return-01\n            :ARG1 (g / group)\n            :ARG4 (s2 / scene)\n            :time (d / date-entity\n                  :weekday (s3 / saturday))\n            :time (a / after\n                  :op1 (b / break-02\n                        :mod (ii / initial))\n                  :quant (t / temporal-quantity\n                        :quant 1\n                        :unit (d2 / day)))))",
      "# ::snt Police admit Police did n't respond after alarm went off early on Good Friday .\n(a / admit-01\n      :ARG0 (p / police)\n      :ARG1 (r / respond-01\n            :polarity -\n            :ARG0 p\n            :time (a2 / after\n                  :op1 (g / go-off-16\n                        :ARG1 (a3 / alarm-01)\n                        :time (e / early\n                              :op1 (f / festival\n                                    :name (n / name\n                                          :op1 \"Good\"\n                                          :op2 \"Friday\")))))))"
    ],
    "tree": [
      "(s / say-01\n   :ARG1 (p2 / possible-01\n             :ARG1 (l2 / link-01\n                       :ARG1 (c / cut-02\n                                :ARG1 (p3 / power)))))",
      "(s / say-01\n   :ARG1 (p2 / possible-01\n             :ARG1 (l2 / link-01\n                       :ARG2 (h / heist))))",
      "(s / say-01\n   :ARG1 (p2 / possible-01\n             :ARG1 (l2 / link-01\n                       :ARG1 (c / cut-02\n                                :time (w / weekend)))))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG1 (l / local-02))\n   :ARG1 (p2 / possible-01\n             :ARG1 (l2 / link-01\n                       :ARG1 (c / cut-02\n                                :ARG1 (p3 / power)))))",
      "(c / cut-02\n   :ARG1 (p3 / power)\n   :time (w / weekend))",
      "(t / tell-01\n   :ARG0 (p / person\n            :ARG1 (l / local-02)))",
      "(t / tell-01\n   :ARG1 (n / noise\n            :ARG1 (s / suspicious-03)))",
      "(t / tell-01\n   :ARG0 (p / person\n            :ARG1 (l / local-02))\n   :ARG1 (n / noise\n            :ARG1 (s / suspicious-03)))",
      "(t / tell-01\n   :ARG0 (p / person\n            :ARG1 (l / local-02))\n   :mod (a / also))",
      "(t / tell-01\n   :ARG0 (p / person\n            :ARG1 (l / local-02))\n   :ARG1 (n / noise\n            :ARG1 (s / suspicious-03))\n   :mod (a / also))",
      "(s / see-01\n   :ARG1 (r / return-01\n            :ARG1 (g / group)))",
      "(s / see-01\n   :ARG1 (r / return-01\n            :time (a / after\n                     :quant (t / temporal-quantity\n                               :unit (d2 / day)))))",
      "(r / return-01\n   :time (d / date-entity\n            :weekday (s3 / saturday)))",
      "(a / after\n   :op1 (b / break-02\n           :mod (ii / initial)))",
      "(a / after\n   :op1 (b / break-02\n           :mod (ii / initial))\n   :quant (t / temporal-quantity\n             :unit (d2 / day)))",
      "(a / admit-01\n   :ARG1 (r / respond-01\n            :polarity -))",
      "(a / admit-01\n   :ARG0 (p / police)\n   :ARG1 (r / respond-01\n            :polarity -))",
      "(a2 / after\n    :op1 (g / go-off-16\n            :ARG1 (a3 / alarm-01)))",
      "(a2 / after\n    :op1 (g / go-off-16\n            :time (e / early\n                     :op1 (f / festival\n                             :name (n / name\n                                      :op1 \"Good\"\n                                      :op2 \"Friday\")))))",
      "(g / go-off-16\n   :ARG1 (a3 / alarm-01)\n   :time (e / early\n            :op1 (f / festival\n                    :name (n / name\n                             :op1 \"Good\"\n                             :op2 \"Friday\"))))"
    ],
    "smus": [
      "Power cuts could be linked, they say.",
      "They say the heist could be linked.",
      "The weekend cuts could be linked, they say.",
      "Locals say power cuts could be linked.",
      "Power cuts over the weekend.",
      "Locals tell.",
      "Tells of suspicious noises.",
      "Locals tell of suspicious noises.",
      "Locals also tell.",
      "Locals also tell of suspicious noises.",
      "The Group saw return.",
      "Seemed to be returning a day later.",
      "Returning Saturday.",
      "After the initial break.",
      "After the initial break, a day later",
      "Admit to not responding.",
      "Police admit they did not respond.",
      "After the alarm went off.",
      "After going off early on Good Friday.",
      "The alarm went off early on Good Friday."
    ]
  },
  {
    "instance_id": "realsumm-31",
    "summary": "Shiraz Nawaz felt lucky to be alive after the flames shot out the manhole . the flames erupted just moments after Shiraz Nawaz walked over the manhole in the busy street . Incredibly no - one was hurt in the incident after Shiraz Nawaz evacuated the area .",
    "summary_trees": [
      "# ::snt Shiraz Nawaz felt lucky to be alive after the flames shot out the manhole .\n(f / feel-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Shiraz\"\n                  :op2 \"Nawaz\"))\n      :ARG1 (l / lucky\n            :domain p\n            :ARG1-of (c / cause-01\n                  :ARG0 (l2 / live-01\n                        :ARG0 p)))\n      :time (a / after\n            :op1 (s / shoot-02\n                  :ARG0 (f2 / flame)\n                  :ARG3 (m / manhole))))",
      "# ::snt the flames erupted just moments after Shiraz Nawaz walked over the manhole in the busy street .\n(e / erupt-01\n      :ARG1 (f / flame)\n      :time (a / after\n            :op1 (w / walk-01\n                  :ARG0 (p / person\n                        :name (n / name\n                              :op1 \"Shiraz\"\n                              :op2 \"Nawaz\"))\n                  :ARG2 (o / over\n                        :op1 (m / manhole\n                              :location (s / street\n                                    :ARG1-of (b / busy-02)))))\n            :quant (m2 / moment\n                  :mod (j / just))))",
      "# ::snt Incredibly no - one was hurt in the incident after Shiraz Nawaz evacuated the area .\n(h / hurt-01\n      :ARG1 (n / no-one)\n      :degree (ii / incredible)\n      :time (ii2 / incident)\n      :time (a / after\n            :op1 (e / evacuate-01\n                  :ARG0 (p / person\n                        :name (n2 / name\n                              :op1 \"Shiraz\"\n                              :op2 \"Nawaz\"))\n                  :ARG1 (a2 / area))))"
    ],
    "tree": [
      "(f / feel-01\n   :time (a / after\n            :op1 (s / shoot-02\n                    :ARG0 (f2 / flame))))",
      "(f / feel-01\n   :ARG1 (l / lucky\n            :domain (p / person :name (n / name :op1 \"Shiraz\" :op2 \"Nawaz\")))\n   :time (a / after\n            :op1 (s / shoot-02\n                    :ARG0 (f2 / flame))))",
      "(l / lucky\n   :ARG1 (c / cause-01\n            :ARG0 (l2 / live-01\n                      :ARG0 (p / person :name (n / name :op1 \"Shiraz\" :op2 \"Nawaz\")))))",
      "(a / after\n   :op1 (s / shoot-02\n           :ARG0 (f2 / flame)))",
      "(s / shoot-02\n   :ARG0 (f2 / flame)\n   :ARG3 (m / manhole))",
      "(e / erupt-01\n   :time (a / after\n            :op1 (w / walk-01\n                    :ARG2 (o / over\n                             :op1 (m / manhole\n                                     :location (s / street\n                                                  :ARG1 (b / busy-02)))))))",
      "(e / erupt-01\n   :ARG1 (f / flame)\n   :time (a / after\n            :op1 (w / walk-01\n                    :ARG0 (p / person\n                             :name (n / name\n                                      :op1 \"Shiraz\"\n                                      :op2 \"Nawaz\")))))",
      "(a / after\n   :op1 (w / walk-01\n           :ARG2 (o / over\n                    :op1 (m / manhole\n                            :location (s / street\n                                         :ARG1 (b / busy-02))))))",
      "(a / after\n   :op1 (w / walk-01\n           :ARG2 (o / over\n                    :op1 (m / manhole\n                            :location (s / street\n                                         :ARG1 (b / busy-02)))))\n   :quant (m2 / moment\n              :mod (j / just)))",
      "(w / walk-01\n   :ARG2 (o / over\n            :op1 (m / manhole\n                    :location (s / street\n                                 :ARG1 (b / busy-02)))))",
      "(h / hurt-01\n   :ARG1 (n / no-one)\n   :degree (ii / incredible))",
      "(h / hurt-01\n   :ARG1 (n / no-one)\n   :time (ii2 / incident))",
      "(h / hurt-01\n   :ARG1 (n / no-one)\n   :degree (ii / incredible)\n   :time (ii2 / incident))",
      "(a / after\n   :op1 (e / evacuate-01\n           :ARG1 (a2 / area)))",
      "(e / evacuate-01\n   :ARG0 (p / person\n            :name (n2 / name\n                      :op1 \"Shiraz\"\n                      :op2 \"Nawaz\")))"
    ],
    "smus": [
      "Feeled after the flames shot.",
      "After the flames shot, Shiraz Nawza felt lucky.",
      "Lucky Shiraz Nawaz lived.",
      "After the flames shot.",
      "Flames shot through the manhole.",
      "Erupted after a walkover over a manhole in a busy street.",
      "The flames erupted after Shiraz Nawzaz walked.",
      "After walking over a manhole in a busy street.",
      "Just moments after walking over a manhole in a busy street.",
      "Walked over a manhole in a busy street.",
      "No one was hurt incredibly.",
      "No one was hurt in the incident.",
      "No one was hurt incredibly during the incident.",
      "After the area was evacuated.",
      "Shiraz Nawabs evacuated."
    ]
  },
  {
    "instance_id": "realsumm-32",
    "summary": "Ao Nang Princess 5 ferry was in Andaman Sea on way from resort of Krabi . Was five miles from the coast travelling to Phuket when engine exploded . Ao Nang Princess 5 ferry caught fire around 3.30pm before sinking around 6 pm . Passengers seen throwing Passengers overboard before being rescued . No injuries reported but search will continue into tomorrow for missing girl .",
    "summary_trees": [
      "# ::snt Ao Nang Princess 5 ferry was in Andaman Sea on way from resort of Krabi .\n(b / be-located-at-91\n      :ARG1 (f / ferry\n            :name (n / name\n                  :op1 \"Ao\"\n                  :op2 \"Nang\"\n                  :op3 \"Princess\"\n                  :op4 5))\n      :ARG2 (s / sea\n            :name (n2 / name\n                  :op1 \"Andaman\"\n                  :op2 \"Sea\"))\n      :time (w / way\n            :direction (r / resort\n                  :name (n3 / name\n                        :op1 \"Krabi\"))))",
      "# ::snt Was five miles from the coast travelling to Phuket when engine exploded .\n(t / travel-01\n      :ARG0 (ii / i)\n      :ARG1 (d / distance-quantity\n            :quant 5\n            :unit (m / mile)\n            :location (f / from\n                  :op1 (c / coast)))\n      :ARG4 (ii2 / island\n            :name (n / name\n                  :op1 \"Phuket\"))\n      :time (e / explode-01\n            :ARG1 (e2 / engine)))",
      "# ::snt Ao Nang Princess 5 ferry caught fire around 3.30pm before sinking around 6 pm .\n(a / and\n      :op1 (c / catch-on-fire-09\n            :ARG1 (f / ferry\n                  :name (n / name\n                        :op1 \"Ao\"\n                        :op2 \"Nang\"\n                        :op3 \"Princess\"\n                        :op4 5))\n            :time (a2 / around\n                  :op1 (d / date-entity\n                        :time \"13:30\")))\n      :op2 (s / sink-01\n            :ARG1 f\n            :time (a3 / around\n                  :op1 (d2 / date-entity\n                        :time \"18:00\"))))",
      "# ::snt Passengers seen throwing Passengers overboard before being rescued .\n(s / see-01\n      :ARG1 (t / throw-01\n            :ARG0 (p / passenger)\n            :ARG1 (p2 / passenger)\n            :ARG2 (o / overboard)\n            :time (b / before\n                  :op1 (r / rescue-01\n                        :ARG1 p2))))",
      "# ::snt No injuries reported but search will continue into tomorrow for missing girl .\n(h / have-concession-91\n      :ARG1 (r / report-01\n            :polarity -\n            :ARG1 (ii / injure-01))\n      :ARG2 (c / continue-01\n            :ARG1 (s / search-01\n                  :ARG2 (g / girl\n                        :ARG1-of (m / miss-01)))\n            :time (ii2 / into\n                  :op1 (t / tomorrow))))"
    ],
    "tree": [
      "(b / be-located-at-91\n   :ARG1 (f / ferry\n            :name (n / name\n                     :op1 \"Ao\"\n                     :op2 \"Nang\"\n                     :op3 \"Princess\"\n                     :op4 5)))",
      "(b / be-located-at-91\n   :ARG2 (s / sea\n            :name (n2 / name\n                      :op1 \"Andaman\"\n                      :op2 \"Sea\")))",
      "(b / be-located-at-91\n   :ARG1 (f / ferry\n            :name (n / name\n                     :op1 \"Ao\"\n                     :op2 \"Nang\"\n                     :op3 \"Princess\"\n                     :op4 5))\n   :ARG2 (s / sea\n            :name (n2 / name\n                      :op1 \"Andaman\"\n                      :op2 \"Sea\")))",
      "(s / sea\n   :name (n2 / name\n             :op1 \"Andaman\"\n             :op2 \"Sea\"))",
      "(t / travel-01\n   :ARG4 (ii2 / island\n              :name (n / name\n                       :op1 \"Phuket\")))",
      "(t / travel-01\n   :time (e / explode-01\n            :ARG1 (e2 / engine)))",
      "(t / travel-01\n   :ARG4 (ii2 / island\n              :name (n / name\n                       :op1 \"Phuket\"))\n   :time (e / explode-01\n            :ARG1 (e2 / engine)))",
      "(t / travel-01\n   :ARG0 (ii / i)\n   :ARG1 (d / distance-quantity\n            :quant 5)\n   :time (e / explode-01\n            :ARG1 (e2 / engine)))",
      "(t / travel-01\n   :ARG0 (ii / i)\n   :ARG1 (d / distance-quantity\n            :quant 5)\n   :ARG4 (ii2 / island\n              :name (n / name\n                       :op1 \"Phuket\"))\n   :time (e / explode-01\n            :ARG1 (e2 / engine)))",
      "(c / catch-on-fire-09\n   :ARG1 (f / ferry\n            :name (n / name)))",
      "(s / sink-01\n   :ARG1 (f / ferry :name (n / name :op1 \"Ao\" :op2 \"Nang\" :op3 \"Princess\" :op4))\n   :time (a3 / around))",
      "(s / see-01\n   :ARG1 (t / throw-01\n            :ARG0 (p / passenger)))",
      "(t / throw-01\n   :ARG0 (p / passenger)\n   :ARG1 (p2 / passenger)\n   :ARG2 (o / overboard))",
      "(t / throw-01\n   :ARG0 (p / passenger)\n   :ARG1 (p2 / passenger)\n   :time (b / before\n            :op1 (r / rescue-01\n                    :ARG1 p2)))",
      "(t / throw-01\n   :ARG1 (p2 / passenger)\n   :ARG2 (o / overboard)\n   :time (b / before\n            :op1 (r / rescue-01\n                    :ARG1 p2)))",
      "(t / throw-01\n   :ARG0 (p / passenger)\n   :ARG1 (p2 / passenger)\n   :ARG2 (o / overboard)\n   :time (b / before\n            :op1 (r / rescue-01\n                    :ARG1 p2)))",
      "(h / have-concession-91\n   :ARG1 (r / report-01\n            :ARG1 (ii / injure-01)))",
      "(h / have-concession-91\n   :ARG2 (c / continue-01\n            :ARG1 (s / search-01\n                     :ARG2 (g / girl\n                              :ARG1 (m / miss-01)))))",
      "(c / continue-01\n   :ARG1 (s / search-01\n            :ARG2 (g / girl\n                     :ARG1 (m / miss-01))))",
      "(c / continue-01\n   :time (ii2 / into\n              :op1 (t / tomorrow)))",
      "(c / continue-01\n   :ARG1 (s / search-01\n            :ARG2 (g / girl\n                     :ARG1 (m / miss-01)))\n   :time (ii2 / into\n              :op1 (t / tomorrow)))"
    ],
    "smus": [
      "Ao Nang Princess 5 ferry",
      "In the Andaman Sea.",
      "The Ao Nang Princess 5 ferry is on the Andaman Sea.",
      "Andaman Sea",
      "Traveling to Phuket.",
      "Traveling when the engine exploded.",
      "Traveling to Phuket when the engine exploded.",
      "I was traveling 5 miles when the engine exploded.",
      "I was traveling 5 miles to Phuket when the engine exploded.",
      "The ferry caught on fire.",
      "The Ao Nang Princess ferry was sinking around.",
      "The passengers were seen throwing.",
      "Passengers throwing passengers overboard.",
      "Passengers throwing passengers before they are rescued.",
      "Throwing passengers overboard before they were rescued.",
      "Passengers throwing passengers overboard before they were rescued.",
      "Although no injuries were reported.",
      "Nevertheless, the search for the missing girl continues.",
      "Search continues for missing girl",
      "Continue into tomorrow.",
      "The search for the missing girl will continue into tomorrow."
    ]
  },
  {
    "instance_id": "realsumm-33",
    "summary": "The worker was caught on camera by a member of the public . Field owner TH Clements & Son was alerted and The worker was sacked . Passer - by who used mobile phone to snap photo branded act ' disgusting ' Tesco : Vegetables undergo ' extensive assessment ' before hitting shelves .",
    "summary_trees": [
      "# ::snt The worker was caught on camera by a member of the public .\n(c / catch-03\n      :ARG0 (m / member\n            :part-of (p / public))\n      :ARG1 (p2 / person\n            :ARG0-of (w / work-01))\n      :ARG2 (c2 / camera))",
      "# ::snt Field owner TH Clements & Son was alerted and The worker was sacked .\n(a / and\n      :op1 (a2 / alert-01\n            :ARG1 (p / person\n                  :ARG0-of (o / own-01\n                        :ARG1 (f / field))\n                  :mod (c / company\n                        :name (n / name\n                              :op1 \"TH\"\n                              :op2 \"Clements\"\n                              :op3 \"&\"\n                              :op4 \"Son\"))))\n      :op2 (s / sack-01\n            :ARG1 (p2 / person\n                  :ARG0-of (w / work-01))))",
      "# ::snt Passer - by who used mobile phone to snap photo branded act ' disgusting ' Tesco : Vegetables undergo ' extensive assessment ' before hitting shelves .\n(m / multi-sentence\n      :snt1 (p / person\n            :ARG0-of (p2 / pass-by-17)\n            :ARG0-of (u / use-01\n                  :ARG1 (p3 / phone\n                        :mod (m2 / mobile))\n                  :ARG2 (s / snap-03\n                        :ARG0 p\n                        :ARG1 (a / act-01\n                              :ARG1-of (b / brand-01\n                                    :ARG2 (d / disgust-01))\n                              :mod (p4 / photo))))\n            :mod (c / company\n                  :name (n / name\n                        :op1 \"Tesco\")))\n      :snt2 (u2 / undergo-28\n            :ARG1 (v / vegetable)\n            :ARG2 (a2 / assess-01\n                  :ARG1 v\n                  :ARG1-of (e / extensive-03))\n            :time (b2 / before\n                  :op1 (h / hit-01\n                        :ARG1 (s2 / shelf)))))"
    ],
    "tree": [
      "(c / catch-03\n   :ARG0 (m / member\n            :part (p / public)))",
      "(c / catch-03\n   :ARG1 (p2 / person\n             :ARG0 (w / work-01)))",
      "(c / catch-03\n   :ARG0 (m / member\n            :part (p / public))\n   :ARG1 (p2 / person\n             :ARG0 (w / work-01)))",
      "(c / catch-03\n   :ARG1 (p2 / person\n             :ARG0 (w / work-01))\n   :ARG2 (c2 / camera))",
      "(c / catch-03\n   :ARG0 (m / member\n            :part (p / public))\n   :ARG1 (p2 / person\n             :ARG0 (w / work-01))\n   :ARG2 (c2 / camera))",
      "(a2 / alert-01\n    :ARG1 (p / person\n             :ARG0 (o / own-01\n                      :ARG1 (f / field))\n             :mod (c / company\n                     :name (n / name))))",
      "(s / sack-01\n   :ARG1 (p2 / person\n             :ARG0 (w / work-01)))",
      "(m / multi-sentence\n   :snt2 (u2 / undergo-28\n             :ARG2 (a2 / assess-01\n                       :ARG1 (v / vegetable))))",
      "(u2 / undergo-28\n    :ARG2 (a2 / assess-01\n              :ARG1 (v / vegetable)))",
      "(u2 / undergo-28\n    :ARG2 (a2 / assess-01\n              :ARG1 (v / vegetable))\n    :time (b2 / before\n              :op1 (h / hit-01\n                      :ARG1 (s2 / shelf))))"
    ],
    "smus": [
      "A member of the public was caught.",
      "Work gets caught.",
      "A member of the public has caught the worker.",
      "The worker was caught on camera.",
      "A member of the public has caught the worker on camera.",
      "Field owners were alerted.",
      "The worker was sacked.",
      "Vegetables undergo assessment.",
      "Vegetables undergo an assessment.",
      "Vegetables undergo assessment before hitting the shelves."
    ]
  },
  {
    "instance_id": "realsumm-34",
    "summary": "Tim Stanley : Muhammadu Buhar won Nigeria vote on campaign against corruption . Muhammadu Buhar 's an ex - dictator , but there 's reason for optimism . Muhammadu Buhar says Jonathan administration failed to address corruption , poverty and rise of Boko Haram . Muhammadu Buhar may be tonic to years of misrule .",
    "summary_trees": [
      "# ::snt Tim Stanley : Muhammadu Buhar won Nigeria vote on campaign against corruption .\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Tim\"\n                  :op2 \"Stanley\"))\n      :ARG1 (w / win-01\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Muhammadu\"\n                        :op2 \"Buhar\"))\n            :ARG1 (v / vote-01)\n            :ARG2 (c / country\n                  :name (n3 / name\n                        :op1 \"Nigeria\"))\n            :ARG1-of (c2 / cause-01\n                  :ARG0 (c3 / campaign-01\n                        :ARG0 p2\n                        :ARG1 (a / against\n                              :op1 (c4 / corrupt-01))))))",
      "# ::snt Muhammadu Buhar 's an ex - dictator ,\n(d / dictator\n      :domain (p / person\n            :name (n / name\n                  :op1 \"Muhammadu\"\n                  :op2 \"Buhar\"))\n      :time (e / ex))",
      "# ::snt but there 's reason for optimism .\n(c / contrast-01\n      :ARG2 (r / reason\n            :ARG0-of (c2 / cause-01\n                  :ARG1 (o / optimism))))",
      "# ::snt Muhammadu Buhar says Jonathan administration failed to address corruption , poverty and rise of Boko Haram .\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Muhammadu\"\n                  :op2 \"Buhar\"))\n      :ARG1 (f / fail-01\n            :ARG1 (g / government-organization\n                  :ARG0-of (a / administrate-01)\n                  :mod (p2 / person\n                        :name (n2 / name\n                              :op1 \"Jonathan\")))\n            :ARG2 (a2 / address-02\n                  :ARG0 g\n                  :ARG1 (a3 / and\n                        :op1 (c / corruption)\n                        :op2 (p3 / poor)\n                        :op3 (r / rise-01\n                              :ARG1 (c2 / criminal-organization\n                                    :name (n3 / name\n                                          :op1 \"Boko\"\n                                          :op2 \"Hararma\")))))))",
      "# ::snt Muhammadu Buhar may be tonic to years of misrule .\n(p / possible-01\n      :ARG1 (t / tonic\n            :beneficiary (m / misrule\n                  :duration (m2 / multiple\n                        :op1 (t2 / temporal-quantity\n                              :quant 1\n                              :unit (y / year))))\n            :domain (p2 / person\n                  :name (n / name\n                        :op1 \"Muhammadu\"\n                        :op2 \"Buhar\"))))"
    ],
    "tree": [
      "(s / say-01\n   :ARG1 (w / win-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Muhammadu\"\n                                :op2 \"Buhar\"))))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tim\"\n                     :op2 \"Stanley\"))\n   :ARG1 (w / win-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Muhammadu\"\n                                :op2 \"Buhar\"))))",
      "(w / win-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Muhammadu\"\n                       :op2 \"Buhar\"))\n   :ARG1 (v / vote-01))",
      "(w / win-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Muhammadu\"\n                       :op2 \"Buhar\"))\n   :ARG2 (c / country\n            :name (n3 / name\n                      :op1 \"Nigeria\")))",
      "(d / dictator\n   :domain (p / person\n              :name (n / name\n                       :op1 \"Muhammadu\"\n                       :op2 \"Buhar\")))",
      "(d / dictator\n   :domain (p / person\n              :name (n / name\n                       :op1 \"Muhammadu\"\n                       :op2 \"Buhar\"))\n   :time (e / ex))",
      "(p / person\n   :name (n / name\n            :op1 \"Muhammadu\"\n            :op2 \"Buhar\"))",
      "(c / contrast-01\n   :ARG2 (r / reason\n            :ARG0 (c2 / cause-01\n                      :ARG1 (o / optimism))))",
      "(r / reason\n   :ARG0 (c2 / cause-01\n             :ARG1 (o / optimism)))",
      "(s / say-01\n   :ARG1 (f / fail-01\n            :ARG1 (g / government-organization\n                     :ARG0 (a / administrate-01))))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Muhammadu\"\n                     :op2 \"Buhar\"))\n   :ARG1 (f / fail-01\n            :ARG1 (g / government-organization\n                     :ARG0 (a / administrate-01))))",
      "(f / fail-01\n   :ARG2 (a2 / address-02\n             :ARG1 (c / corruption)))",
      "(f / fail-01\n   :ARG2 (a2 / address-02\n             :ARG1 (p3 / poor)))",
      "(a3 / and\n    :op1 (c / corruption)\n    :op2 (p3 / poor))",
      "(p / possible-01\n   :ARG1 (t / tonic\n            :domain (p2 / person\n                        :name (n / name\n                                 :op1 \"Muhammadu\"\n                                 :op2 \"Buhar\"))))",
      "(t / tonic\n   :beneficiary (m / misrule\n                   :duration (m2 / multiple\n                                 :op1 (t2 / temporal-quantity\n                                          :unit (y / year)))))",
      "(m / misrule\n   :duration (m2 / multiple\n                 :op1 (t2 / temporal-quantity\n                          :quant 1)))",
      "(m / misrule\n   :duration (m2 / multiple\n                 :op1 (t2 / temporal-quantity\n                          :unit (y / year))))",
      "(p2 / person\n    :name (n / name\n             :op1 \"Muhammadu\"\n             :op2 \"Buhar\"))"
    ],
    "smus": [
      "Muhammadu Buhar won.",
      "Tim Stanley said Muhammadu Buhar won.",
      "Muhammadu Buhar won the vote.",
      "Muhammadu Buhar won Nigeria.",
      "Muhammadu Buhar was a dictator.",
      "Muhammadu Buhar is an ex-dictator.",
      "Muhammadu Buhar",
      "But the reason for optimism is...",
      "The reason for optimism is...",
      "Says the administration failed.",
      "Muhammadu Buhar says the administration failed.",
      "failed to address corruption.",
      "failed to address poverty.",
      "Corruption and poverty.",
      "Muhammadu Buhar may have been a tonic.",
      "A tonic for years of misrule.",
      "Misrule for years.",
      "There has been years of misrule.",
      "Muhammadu Buhar"
    ]
  },
  {
    "instance_id": "realsumm-35",
    "summary": "Bulgaria 's Black Sea resorts cheaper than hotspots in Italy , Spain and Turkey . Researchers found cheapest destination using ' imaginary shopping basket ' Cheap prices are driven by low exchange rates and Bulgaria 's high inflation . Bulgaria 's Black Sea resorts most popular resort of Sunny Beach copies those of Spain and Greece .",
    "summary_trees": [
      "# ::snt Bulgaria 's Black Sea resorts cheaper than hotspots in Italy , Spain and Turkey .\n(h / have-degree-91\n      :ARG1 (r / resort\n            :location (s / sea\n                  :name (n / name\n                        :op1 \"Black\"\n                        :op2 \"Sea\"))\n            :poss (c / country\n                  :name (n2 / name\n                        :op1 \"Bulgaria\")))\n      :ARG2 (c2 / cheap-02\n            :ARG1 r)\n      :ARG3 (m / more)\n      :ARG4 (h2 / hotspot\n            :location (a / and\n                  :op1 (c3 / country\n                        :name (n3 / name\n                              :op1 \"Italy\"))\n                  :op2 (c4 / country\n                        :name (n4 / name\n                              :op1 \"Spain\"))\n                  :op3 (c5 / country\n                        :name (n5 / name\n                              :op1 \"Turkey\")))))",
      "# ::snt Researchers found cheapest destination using ' imaginary shopping basket ' Cheap prices are driven by low exchange rates and Bulgaria 's high inflation .\n(m / multi-sentence\n      :snt1 (f / find-01\n            :ARG0 (p / person\n                  :ARG0-of (r / research-01))\n            :ARG1 (d / destination\n                  :ARG1-of (h / have-degree-91\n                        :ARG2 (c / cheap-02\n                              :ARG1 d)\n                        :ARG3 (m2 / most)))\n            :manner (u / use-01\n                  :ARG0 p\n                  :ARG1 (b / basket\n                        :mod (s / shop-01)\n                        :mod (ii / imaginary))))\n      :snt2 (d2 / drive-02\n            :ARG0 (a / and\n                  :op1 (r2 / rate\n                        :mod (e / exchange-01)\n                        :ARG1-of (l / low-04))\n                  :op2 (ii2 / inflate-01\n                        :ARG1 (c2 / country\n                              :name (n / name\n                                    :op1 \"Bulgaria\"))\n                        :ARG1-of (h2 / high-02)))\n            :ARG1 (p2 / price-01\n                  :ARG1-of (c3 / cheap-02))))",
      "# ::snt Bulgaria 's Black Sea resorts most popular resort of Sunny Beach copies those of Spain and Greece .\n(c / copy-01\n      :ARG1 (r / resort\n            :poss (c2 / country\n                  :name (n / name\n                        :op1 \"Bulgaria\"))\n            :location (s / sea\n                  :name (n2 / name\n                        :op1 \"Black\"\n                        :op2 \"Sea\"))\n            :domain (b / beach\n                  :name (n3 / name\n                        :op1 \"Sunny\"\n                        :op2 \"Beach\")\n                  :ARG1-of (h / have-degree-91\n                        :ARG2 (p / popular-02\n                              :ARG1 b)\n                        :ARG3 (m / most))))\n      :ARG2 (r2 / resort\n            :poss (a / and\n                  :op1 (c3 / country\n                        :name (n4 / name\n                              :op1 \"Spain\"))\n                  :op2 (c4 / country\n                        :name (n5 / name\n                              :op1 \"Greece\")))))"
    ],
    "tree": [
      "(h / have-degree-91\n   :ARG1 (r / resort\n            :location (s / sea\n                         :name (n / name\n                                  :op1 \"Black\"\n                                  :op2 \"Sea\")))\n   :ARG2 (c2 / cheap-02\n             :ARG1 r)\n   :ARG3 (m / more))",
      "(h / have-degree-91\n   :ARG2 (c2 / cheap-02\n             :ARG1 (r / resort))\n   :ARG3 (m / more)\n   :ARG4 (h2 / hotspot\n             :location (c4 / country\n                           :name (n4 / name\n                                     :op1 \"Spain\"))))",
      "(h / have-degree-91\n   :ARG1 (r / resort\n            :location (s / sea\n                         :name (n / name\n                                  :op1 \"Black\"\n                                  :op2 \"Sea\")))\n   :ARG2 (c2 / cheap-02\n             :ARG1 r)\n   :ARG3 (m / more)\n   :ARG4 (h2 / hotspot\n             :location (c3 / country\n                           :name (n3 / name\n                                     :op1 \"Italy\"))))",
      "(h / have-degree-91\n   :ARG1 (r / resort\n            :poss (c / country\n                     :name (n2 / name\n                               :op1 \"Bulgaria\")))\n   :ARG2 (c2 / cheap-02\n             :ARG1 r)\n   :ARG3 (m / more)\n   :ARG4 (h2 / hotspot\n             :location (c3 / country\n                           :name (n3 / name\n                                     :op1 \"Italy\"))))",
      "(h / have-degree-91\n   :ARG1 (r / resort\n            :poss (c / country\n                     :name (n2 / name\n                               :op1 \"Bulgaria\")))\n   :ARG2 (c2 / cheap-02\n             :ARG1 r)\n   :ARG3 (m / more)\n   :ARG4 (h2 / hotspot\n             :location (c4 / country\n                           :name (n4 / name\n                                     :op1 \"Spain\"))))",
      "(f / find-01\n   :ARG0 (p / person\n            :ARG0 (r / research-01))\n   :ARG1 (d / destination\n            :ARG1 (h / have-degree-91\n                     :ARG2 (c / cheap-02\n                              :ARG1 d)))\n   :manner (u / use-01\n              :ARG0 p\n              :ARG1 (b / basket)))",
      "(a / and\n   :op2 (ii2 / inflate-01\n             :ARG1 (h2 / high-02)))",
      "(a / and\n   :op1 (r2 / rate\n            :ARG1 (l / low-04))\n   :op2 (ii2 / inflate-01\n             :ARG1 (c2 / country\n                       :name (n / name\n                                :op1 \"Bulgaria\"))))",
      "(a / and\n   :op1 (r2 / rate\n            :ARG1 (l / low-04))\n   :op2 (ii2 / inflate-01\n             :ARG1 (h2 / high-02)))",
      "(r2 / rate\n    :mod (e / exchange-01)\n    :ARG1 (l / low-04))",
      "(c / copy-01\n   :ARG1 (r / resort\n            :poss (c2 / country\n                      :name (n / name\n                               :op1 \"Bulgaria\")))\n   :ARG2 (r2 / resort\n             :poss (c3 / country\n                       :name (n4 / name\n                                 :op1 \"Spain\"))))",
      "(c / copy-01\n   :ARG1 (r / resort\n            :poss (c2 / country\n                      :name (n / name\n                               :op1 \"Bulgaria\")))\n   :ARG2 (r2 / resort\n             :poss (c4 / country\n                       :name (n5 / name\n                                 :op1 \"Greece\"))))",
      "(c / copy-01\n   :ARG1 (r / resort\n            :location (s / sea\n                         :name (n2 / name\n                                   :op1 \"Black\"\n                                   :op2 \"Sea\")))\n   :ARG2 (r2 / resort\n             :poss (c3 / country\n                       :name (n4 / name\n                                 :op1 \"Spain\"))))",
      "(r / resort\n   :domain (b / beach\n              :name (n3 / name\n                        :op1 \"Sunny\"\n                        :op2 \"Beach\")))",
      "(r / resort\n   :location (s / sea\n                :name (n2 / name\n                          :op1 \"Black\"\n                          :op2 \"Sea\"))\n   :domain (b / beach\n              :name (n3 / name\n                        :op1 \"Sunny\"\n                        :op2 \"Beach\")))"
    ],
    "smus": [
      "Black Sea resorts are cheaper.",
      "The resorts are cheaper than the hotspots in Spain.",
      "Black Sea resorts are cheaper than Italy's hotspots.",
      "Bulgaria's resorts are cheaper than Italy's hotspots.",
      "Bulgaria's resorts are cheaper than Spain's hotspots.",
      "The researchers found a cheap destination using a basket.",
      "and high inflation.",
      "Low rates and Bulgaria's inflation",
      "Low rates and high inflation.",
      "Low exchange rates.",
      "Bulgaria's resort copies Spain's.",
      "Bulgaria's resort copies Greece's.",
      "The Black Sea resort copies Spain's.",
      "Sunny Beach is a resort.",
      "Sunny Beach is a Black Sea resort."
    ]
  },
  {
    "instance_id": "realsumm-36",
    "summary": "WARNING : GRAPHIC CONTENT . Series of photos appear to show the beheading of a man in Hama in Syria . a man is handcuffed and blindfolded as a man is led from a van to area of land . a man is surrounded by men with guns and executioner with a meat cleaver . It is claimed a man was the beheading of a man in Hama in Syria because a man is an alleged ' blasphemer '",
    "summary_trees": [
      "# ::snt WARNING : GRAPHIC CONTENT .\n(a / and\n      :op1 (t / thing\n            :ARG0-of (w / warn-01))\n      :op2 (c / content\n            :mod (g / graphic)))",
      "# ::snt Series of photos appear to show the beheading of a man in Hama in Syria .\n(a / appear-02\n      :ARG1 (s / show-01\n            :ARG0 (s2 / series\n                  :consist-of (p / photo))\n            :ARG1 (b / behead-01\n                  :ARG1 (m / man)\n                  :location (c / city\n                        :name (n / name\n                              :op1 \"Hama\")\n                        :location (c2 / country\n                              :name (n2 / name\n                                    :op1 \"Syria\"))))))",
      "# ::snt a man is handcuffed and blindfolded as a man is led from a van to area of land .\n(a / and\n      :op1 (h / handcuff-01\n            :ARG1 (m / man))\n      :op2 (b / blindfold-01\n            :ARG1 m)\n      :time (l / lead-01\n            :ARG1 (m2 / man)\n            :ARG3 (v / van)\n            :ARG4 (a2 / area\n                  :mod (l2 / land))))",
      "# ::snt a man is surrounded by men with guns and executioner with a meat cleaver .\n(s / surround-01\n      :ARG1 (a / and\n            :op1 (m / man\n                  :ARG0-of (h / have-03\n                        :ARG1 (g / gun)))\n            :op2 (p / person\n                  :ARG0-of (e / execute-01)\n                  :ARG0-of (h2 / have-03\n                        :ARG1 (c / cleaver\n                              :purpose (m2 / meat)))))\n      :ARG2 (m3 / man))",
      "# ::snt It is claimed a man was the beheading of a man in Hama in Syria because a man is an alleged ' blasphemer '\n(c / claim-01\n      :ARG1 (b / behead-01\n            :ARG1 (m / man)\n            :location (c2 / city\n                  :name (n / name\n                        :op1 \"Hama\")\n                  :location (c3 / country\n                        :name (n2 / name\n                              :op1 \"Syria\")))\n            :ARG1-of (c4 / cause-01\n                  :ARG0 (b2 / blaspheme-01\n                        :ARG0 m\n                        :ARG1-of (a / allege-01)))))"
    ],
    "tree": [
      "(a / and\n   :op1 (t / thing\n           :ARG0 (w / warn-01))\n   :op2 (c / content\n           :mod (g / graphic)))",
      "(a / appear-02\n   :ARG1 (s / show-01\n            :ARG0 (s2 / series\n                      :consist-of (p / photo))))",
      "(a / appear-02\n   :ARG1 (s / show-01\n            :ARG1 (b / behead-01\n                     :ARG1 (m / man))))",
      "(s / show-01\n   :ARG1 (b / behead-01\n            :location (c / city\n                         :name (n / name\n                                  :op1 \"Hama\"))))",
      "(b / behead-01\n   :location (c / city\n                :name (n / name\n                         :op1 \"Hama\")))",
      "(b / behead-01\n   :ARG1 (m / man)\n   :location (c / city\n                :name (n / name\n                         :op1 \"Hama\")))",
      "(s / surround-01\n   :ARG1 (m / man\n            :ARG0 (h / have-03\n                     :ARG1 (g / gun))))",
      "(a / and\n   :op1 (m / man\n           :ARG0 (h / have-03\n                    :ARG1 (g / gun)))\n   :op2 (p / person\n           :ARG0 (h2 / have-03\n                     :ARG1 (c / cleaver\n                              :purpose (m2 / meat)))))",
      "(m / man\n   :ARG0 (h / have-03\n            :ARG1 (g / gun)))",
      "(h2 / have-03\n    :ARG1 (c / cleaver\n             :purpose (m2 / meat)))",
      "(c / claim-01\n   :ARG1 (b / behead-01\n            :ARG1 (m / man)))",
      "(c / claim-01\n   :ARG1 (b / behead-01\n            :location (c2 / city\n                          :name (n / name\n                                   :op1 \"Hama\"))))",
      "(c / claim-01\n   :ARG1 (b / behead-01\n            :ARG1 (c4 / cause-01\n                      :ARG0 (b2 / blaspheme-01\n                                :ARG0 (m / man)))))",
      "(c / claim-01\n   :ARG1 (b / behead-01\n            :location (c2 / city\n                          :location (c3 / country\n                                        :name (n2 / name\n                                                  :op1 \"Syria\")))))",
      "(b / behead-01\n   :location (c2 / city\n                 :name (n / name\n                          :op1 \"Hama\")))"
    ],
    "smus": [
      "Warning, Graphic Content.",
      "The series of photos appear to show.",
      "The appear to show a man was beheaded.",
      "Show beheading in Hama.",
      "The beheading took place in Hama.",
      "The man was beheaded in Hama.",
      "The men were surrounded by men with guns.",
      "Men with guns and people with meat cleaver.",
      "men with guns",
      "has a meat cleaver.",
      "The man was claimed to have been beheaded.",
      "The beheading in Hama is claimed.",
      "It is claimed that the beheading was done because of the man's blasphemy.",
      "The beheading in Syria is claimed.",
      "The beheading took place in Hama."
    ]
  },
  {
    "instance_id": "realsumm-37",
    "summary": "Denise and Glen Higgs thought Denise and Glen Higgs 'd never have children . Denise was made infertile due to cancer treatment , but Denise and Glen Higgs tried IVF . Couple from of Braunton , Devon , had Mazy , born three years ago . Tried again using the same batch and had twins Carter & Carson last week .",
    "summary_trees": [
      "# ::snt Denise and Glen Higgs thought Denise and Glen Higgs 'd never have children .\n(t / think-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Denise\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Glenn\"\n                        :op2 \"Higgs\")))\n      :ARG1 (h / have-05\n            :polarity -\n            :ARG0 a\n            :ARG1 (c / child)\n            :time (e / ever)))",
      "# ::snt Denise was made infertile due to cancer treatment , but Denise and Glen Higgs tried IVF .\n(c / contrast-01\n      :ARG1 (m / make-02\n            :ARG0 (t / treat-03\n                  :ARG2 (d / disease\n                        :name (n / name\n                              :op1 \"cancer\")))\n            :ARG1 (ii / infertile\n                  :domain (p / person\n                        :name (n2 / name\n                              :op1 \"Denise\"))))\n      :ARG2 (t2 / try-01\n            :ARG0 (a / and\n                  :op1 p\n                  :op2 (p2 / person\n                        :name (n3 / name\n                              :op1 \"Glenn\"\n                              :op2 \"Higgs\")))\n            :ARG1 (f / fertilize-01\n                  :mod (ii2 / in-vitro))))",
      "# ::snt Couple from of Braunton , Devon , had Mazy , born three years ago .\n(h / have-05\n      :ARG0 (c / couple\n            :source (c2 / city\n                  :name (n / name\n                        :op1 \"Braunton\")\n                  :location (c3 / county\n                        :name (n2 / name\n                              :op1 \"Devon\"))))\n      :ARG1 (p / person\n            :name (n3 / name\n                  :op1 \"Mazy\")\n            :ARG1-of (b / bear-02\n                  :time (b2 / before\n                        :op1 (n4 / now)\n                        :quant (t / temporal-quantity\n                              :quant 3\n                              :unit (y / year))))))",
      "# ::snt Tried again using the same batch and had twins Carter & Carson last week .\n(a / and\n      :op1 (t / try-01\n            :ARG0 (ii / i)\n            :mod (a2 / again)\n            :manner (u / use-01\n                  :ARG0 ii\n                  :ARG1 (b / batch\n                        :ARG1-of (s / same-01))))\n      :op2 (h / have-05\n            :ARG0 ii\n            :ARG1 (a3 / and\n                  :op1 (p / person\n                        :name (n / name\n                              :op1 \"Carter\"))\n                  :op2 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Carson\"))\n                  :mod (t2 / twin))\n            :time (w / week\n                  :mod (l / last))))"
    ],
    "tree": [
      "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Denise\")))",
      "(t / think-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Glenn\"\n                       :op2 \"Higgs\")))",
      "(t / think-01\n   :ARG1 (h / have-05\n            :time (e / ever)))",
      "(a / and\n   :op1 (p / person\n           :name (n / name\n                    :op1 \"Denise\"))\n   :op2 (p2 / person\n            :name (n2 / name\n                      :op1 \"Glenn\"\n                      :op2 \"Higgs\")))",
      "(p / person\n   :name (n / name\n            :op1 \"Denise\"))",
      "(c / contrast-01\n   :ARG1 (m / make-02\n            :ARG1 (ii / infertile\n                      :domain (p / person\n                                 :name (n2 / name\n                                           :op1 \"Denise\")))))",
      "(c / contrast-01\n   :ARG2 (t2 / try-01\n             :ARG0 (p / person\n                      :name (n2 / name\n                                :op1 \"Denise\"))))",
      "(m / make-02\n   :ARG1 (ii / infertile\n             :domain (p / person\n                        :name (n2 / name\n                                  :op1 \"Denise\"))))",
      "(m / make-02\n   :ARG0 (t / treat-03\n            :ARG2 (d / disease\n                     :name (n / name\n                              :op1 \"cancer\")))\n   :ARG1 (ii / infertile\n             :domain (p / person\n                        :name (n2 / name\n                                  :op1 \"Denise\"))))",
      "(t2 / try-01\n    :ARG0 (p2 / person\n              :name (n3 / name\n                        :op1 \"Glenn\"\n                        :op2 \"Higgs\")))",
      "(h / have-05\n   :ARG0 (c / couple\n            :source (c2 / city\n                        :name (n / name\n                                 :op1 \"Braunton\"))))",
      "(h / have-05\n   :ARG0 (c / couple\n            :source (c2 / city\n                        :location (c3 / county\n                                      :name (n2 / name\n                                                :op1 \"Devon\")))))",
      "(h / have-05\n   :ARG1 (p / person\n            :name (n3 / name\n                      :op1 \"Mazy\")))",
      "(h / have-05\n   :ARG0 (c / couple\n            :source (c2 / city\n                        :name (n / name\n                                 :op1 \"Braunton\")))\n   :ARG1 (p / person\n            :name (n3 / name\n                      :op1 \"Mazy\")))",
      "(h / have-05\n   :ARG0 (c / couple\n            :source (c2 / city\n                        :location (c3 / county\n                                      :name (n2 / name\n                                                :op1 \"Devon\"))))\n   :ARG1 (p / person\n            :name (n3 / name\n                      :op1 \"Mazy\")))",
      "(t / try-01\n   :ARG0 (ii / i)\n   :mod (a2 / again)\n   :manner (u / use-01\n              :ARG0 ii\n              :ARG1 (b / batch\n                       :ARG1 (s / same-01))))",
      "(h / have-05\n   :ARG0 (ii / i)\n   :ARG1 (a3 / and))"
    ],
    "smus": [
      "Denise thought.",
      "Glenn Higgs thought.",
      "Thought it would never happen.",
      "Denise and Glenn Higgs",
      "Denise",
      "But Denise was made infertile.",
      "But Denise tried.",
      "Denise was made infertile.",
      "Treatment of cancer has made Denise infertile.",
      "Glenn Higgs tried.",
      "The couple from Braunton had.",
      "The couple from Devon had.",
      "had mazy.",
      "The couple from Braunton had mazy.",
      "The couple from Devon had Mazy.",
      "I've tried again using the same batch.",
      "I had it and."
    ]
  },
  {
    "instance_id": "realsumm-38",
    "summary": "Speed camera discovered pointing at house in Handsworth , Birmingham . Fixed cameras switched off across the West Midlands in Spring of 2013 . Site is not going to be part of a new trial using digital technology . Obsolete camera may now be taken down after engineers examine device .",
    "summary_trees": [
      "# ::snt Speed camera discovered pointing at house in Handsworth , Birmingham .\n(d / discover-01\n      :ARG1 (c / camera\n            :mod (s / speed)\n            :ARG0-of (p / point-01\n                  :ARG2 (h / house\n                        :location (c2 / city-district\n                              :name (n / name\n                                    :op1 \"Handsworth\")\n                              :part-of (c3 / city\n                                    :name (n2 / name\n                                          :op1 \"Birmingham\")))))))",
      "# ::snt Fixed cameras switched off across the West Midlands in Spring of 2013 .\n(s / switch-off-04\n      :ARG1 (c / camera\n            :ARG1-of (f / fix-03))\n      :location (a / across\n            :op1 (c2 / country-region\n                  :name (n / name\n                        :op1 \"West\"\n                        :op2 \"Midlands\")))\n      :time (d / date-entity\n            :year 2013\n            :season (s2 / spring)))",
      "# ::snt Site is not going to be part of a new trial using digital technology .\n(h / have-part-91\n      :polarity -\n      :ARG1 (t / try-02\n            :ARG1-of (n / new-01)\n            :ARG0-of (u / use-01\n                  :ARG1 (t2 / technology\n                        :mod (d / digit))))\n      :ARG2 (s / site))",
      "# ::snt Obsolete camera may now be taken down after engineers examine device .\n(p / possible-01\n      :ARG1 (t / take-down-22\n            :ARG1 (c / camera\n                  :mod (o / obsolete))\n            :time (a / after\n                  :op1 (e / examine-01\n                        :ARG0 (p2 / person\n                              :ARG0-of (e2 / engineer-01))\n                        :ARG1 (d / device))))\n      :time (n / now))"
    ],
    "tree": [
      "(d / discover-01\n   :ARG1 (c / camera\n            :mod (s / speed)))",
      "(d / discover-01\n   :ARG1 (c / camera\n            :ARG0 (p / point-01\n                     :ARG2 (h / house\n                              :location (c2 / city-district\n                                            :name (n / name\n                                                     :op1 \"Handsworth\"))))))",
      "(c / camera\n   :mod (s / speed)\n   :ARG0 (p / point-01\n            :ARG2 (h / house\n                     :location (c2 / city-district\n                                   :name (n / name\n                                            :op1 \"Handsworth\")))))",
      "(c / camera\n   :mod (s / speed)\n   :ARG0 (p / point-01\n            :ARG2 (h / house\n                     :location (c2 / city-district\n                                   :part (c3 / city\n                                             :name (n2 / name\n                                                       :op1 \"Birmingham\"))))))",
      "(p / point-01\n   :ARG2 (h / house\n            :location (c2 / city-district\n                          :part (c3 / city\n                                    :name (n2 / name\n                                              :op1 \"Birmingham\")))))",
      "(s / switch-off-04\n   :time (d / date-entity\n            :year 2013))",
      "(s / switch-off-04\n   :ARG1 (c / camera\n            :ARG1 (f / fix-03))\n   :location (a / across\n                :op1 (c2 / country-region\n                         :name (n / name\n                                  :op1 \"West\"\n                                  :op2 \"Midlands\"))))",
      "(s / switch-off-04\n   :ARG1 (c / camera\n            :ARG1 (f / fix-03))\n   :time (d / date-entity\n            :year 2013))",
      "(s / switch-off-04\n   :ARG1 (c / camera\n            :ARG1 (f / fix-03))\n   :location (a / across\n                :op1 (c2 / country-region\n                         :name (n / name\n                                  :op1 \"West\"\n                                  :op2 \"Midlands\")))\n   :time (d / date-entity\n            :year 2013))",
      "(s / switch-off-04\n   :ARG1 (c / camera\n            :ARG1 (f / fix-03))\n   :location (a / across\n                :op1 (c2 / country-region\n                         :name (n / name\n                                  :op1 \"West\"\n                                  :op2 \"Midlands\")))\n   :time (d / date-entity\n            :season (s2 / spring)))",
      "(h / have-part-91\n   :ARG1 (t / try-02\n            :ARG1 (n / new-01)))",
      "(h / have-part-91\n   :ARG1 (t / try-02\n            :ARG0 (u / use-01\n                     :ARG1 (t2 / technology\n                               :mod (d / digit)))))",
      "(t / try-02\n   :ARG0 (u / use-01\n            :ARG1 (t2 / technology\n                      :mod (d / digit))))",
      "(t / try-02\n   :ARG1 (n / new-01)\n   :ARG0 (u / use-01\n            :ARG1 (t2 / technology\n                      :mod (d / digit))))",
      "(u / use-01\n   :ARG1 (t2 / technology\n             :mod (d / digit)))",
      "(p / possible-01\n   :ARG1 (t / take-down-22\n            :time (a / after\n                     :op1 (e / examine-01\n                             :ARG0 (p2 / person\n                                       :ARG0 (e2 / engineer-01))))))",
      "(p / possible-01\n   :ARG1 (t / take-down-22\n            :time (a / after\n                     :op1 (e / examine-01\n                             :ARG1 (d / device)))))",
      "(p / possible-01\n   :ARG1 (t / take-down-22\n            :ARG1 (c / camera\n                     :mod (o / obsolete)))\n   :time (n / now))",
      "(e / examine-01\n   :ARG0 (p2 / person\n             :ARG0 (e2 / engineer-01)))",
      "(e / examine-01\n   :ARG0 (p2 / person\n             :ARG0 (e2 / engineer-01))\n   :ARG1 (d / device))"
    ],
    "smus": [
      "The speed camera was discovered.",
      "The camera was discovered at a house in Handsworth.",
      "A speed camera pointing at a house in Handsworth.",
      "A speed camera pointing at a house in Birmingham.",
      "Point to a house in Birmingham.",
      "switched off in 2013.",
      "Fixed cameras switched off across the West Midlands.",
      "Fixed cameras switched off in 2013.",
      "Fixed cameras switched off across the West Midlands in 2013.",
      "Fixed cameras switched off across the West Midlands in spring.",
      "Part of trying new.",
      "Part of the try is to use digital technology.",
      "Trying to use digital technology.",
      "Using digital technology is trying to do new things.",
      "using digital technology",
      "It can be taken down after engineers examine.",
      "It can be taken down after the devices are examined.",
      "The obsolete camera can now be taken down.",
      "Engineers examine.",
      "Engineers examine the device."
    ]
  },
  {
    "instance_id": "realsumm-39",
    "summary": "Charles Terreni , 18 , was found dead March 18 at a frat house in Columbia . Charles Terreni , 18 , was a USC freshman and a member of the Pi Kappa Alpha house . Coroner identified cause of death as alcohol poisoning . Toxicology tests showed Charles Terreni , 18 , had a blood alcohol of .375 . Neighbors said there was a large party ; a beer keg was still visible outside .",
    "summary_trees": [
      "# ::snt Charles Terreni , 18 , was found dead March 18 at a frat house in Columbia .\n(f / find-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Charles\"\n                  :op2 \"Terreni\")\n            :age (t / temporal-quantity\n                  :quant 18\n                  :unit (y / year)))\n      :ARG2 (d / die-01\n            :ARG1 p)\n      :time (d2 / date-entity\n            :day 18\n            :month 3)\n      :location (h / house\n            :mod (f2 / frat)\n            :location (c / city\n                  :name (n2 / name\n                        :op1 \"Columbia\"))))",
      "# ::snt Charles Terreni , 18 , was a USC freshman and a member of the Pi Kappa Alpha house .\n(a / and\n      :op1 (f / freshman\n            :domain (p / person\n                  :name (n / name\n                        :op1 \"Charles\"\n                        :op2 \"Terreni\")\n                  :age (t / temporal-quantity\n                        :quant 18\n                        :unit (y / year)))\n            :location (u / university\n                  :name (n2 / name\n                        :op1 \"USC\")))\n      :op2 (h / have-org-role-91\n            :ARG0 p\n            :ARG1 (h2 / house\n                  :name (n3 / name\n                        :op1 \"Pi\"\n                        :op2 \"Kappa\"\n                        :op3 \"Alpha\"))\n            :ARG2 (m / member)))",
      "# ::snt Coroner identified cause of death as alcohol poisoning .\n(ii / identify-01\n      :ARG0 (c / coroner)\n      :ARG1 (c2 / cause-01\n            :ARG1 (d / die-01))\n      :ARG2 (p / poison-02\n            :ARG1 (a / alcohol)))",
      "# ::snt Toxicology tests showed Charles Terreni , 18 , had a blood alcohol of .375 .\n(s / show-01\n      :ARG0 (t / test-01\n            :ARG2 (t2 / toxicology))\n      :ARG1 (h / have-03\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Charles\"\n                        :op2 \"Terreni\")\n                  :age (t3 / temporal-quantity\n                        :quant 18\n                        :unit (y / year)))\n            :ARG1 (a / alcohol\n                  :mod (b / blood)\n                  :quant (c / concentration-quantity\n                        :quant 375\n                        :unit (f / fluid-ounce\n                              :mod (f2 / fluid))))))",
      "# ::snt Neighbors said there was a large party \n(s / say-01\n      :ARG0 (n / neighbor)\n      :ARG1 (p / party-01\n            :mod (l / large)))"
    ],
    "tree": [
      "(f / find-01\n   :ARG2 (d / die-01\n            :ARG1 (p / person :name (n / name :op1 \"Charles\" :op2 \"Terreni\")))))",
      "(f / find-01\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :quant 18))\n   :ARG2 (d / die-01\n            :ARG1 p))",
      "(f / find-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Charles\"\n                     :op2 \"Terreni\"))\n   :ARG2 (d / die-01\n            :ARG1 p)\n   :time (d2 / date-entity\n             :month 3))",
      "(f / find-01\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :quant 18))\n   :ARG2 (d / die-01\n            :ARG1 p)\n   :time (d2 / date-entity\n             :month 3)\n   :location (h / house\n                :mod (f2 / frat)))",
      "(f / freshman\n   :domain (p / person\n              :name (n / name)))",
      "(h / have-org-role-91\n   :ARG0 (p / person :name (n / name :op1 \"Charles\" :op2 \"Terreni\")))\n   :ARG1 (h2 / house\n             :name (n3 / name)))",
      "(ii / identify-01\n    :ARG1 (c2 / cause-01\n              :ARG1 (d / die-01)))",
      "(ii / identify-01\n    :ARG0 (c / coroner)\n    :ARG1 (c2 / cause-01\n              :ARG1 (d / die-01)))",
      "(ii / identify-01\n    :ARG0 (c / coroner)\n    :ARG2 (p / poison-02\n             :ARG1 (a / alcohol)))",
      "(ii / identify-01\n    :ARG1 (c2 / cause-01\n              :ARG1 (d / die-01))\n    :ARG2 (p / poison-02\n             :ARG1 (a / alcohol)))",
      "(ii / identify-01\n    :ARG0 (c / coroner)\n    :ARG1 (c2 / cause-01\n              :ARG1 (d / die-01))\n    :ARG2 (p / poison-02\n             :ARG1 (a / alcohol)))",
      "(s / show-01\n   :ARG1 (h / have-03\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Charles\"\n                              :op2 \"Terreni\"))))",
      "(h / have-03\n   :ARG1 (a / alcohol\n            :mod (b / blood)))",
      "(h / have-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Charles\"\n                     :op2 \"Terreni\"))\n   :ARG1 (a / alcohol\n            :mod (b / blood)))",
      "(h / have-03\n   :ARG0 (p / person\n            :age (t3 / temporal-quantity\n                     :quant 18))\n   :ARG1 (a / alcohol\n            :mod (b / blood)))",
      "(h / have-03\n   :ARG0 (p / person\n            :age (t3 / temporal-quantity\n                     :unit (y / year)))\n   :ARG1 (a / alcohol\n            :mod (b / blood)))",
      "(s / say-01\n   :ARG1 (p / party-01\n            :mod (l / large)))",
      "(s / say-01\n   :ARG0 (n / neighbor)\n   :ARG1 (p / party-01\n            :mod (l / large)))"
    ],
    "smus": [
      "Charles Terreni was found dead.",
      "The 18-year-old was found dead.",
      "Charles Terreni was found dead in March.",
      "In March, an 18-year-old was found dead in a frat house.",
      "The freshman is...",
      "Charles Terreni is the housekeeper.",
      "The cause of death was identified.",
      "The Coroner identified the cause of death.",
      "The coroner identified the alcohol poisoning.",
      "The cause of death was identified as alcohol poisoning.",
      "The coroner identified the cause of death as alcohol poisoning.",
      "It showed that Charles Terreni had.",
      "had blood alcohol.",
      "Charles Terreni had blood alcohol.",
      "The 18 had blood alcohol.",
      "The person had blood alcohol.",
      "It was a large party, said the Times.",
      "The neighbors said it was a large party."
    ]
  },
  {
    "instance_id": "realsumm-40",
    "summary": "Air strikes were launched by Saudi forces a month ago against rebels . Saudi forces have focused on beating back Shiite Houthi rebels in Yemen . Prince Alwaleed Bin Talal pledged Bentleys for pilots involved in bombings . Prince Alwaleed Bin Talal made pledged on Wednesday after bombing raids appeared to resume , despite an official announcement that bombing raids would be halted last night .",
    "summary_trees": [
      "# ::snt Air strikes were launched by Saudi forces a month ago against rebels .\n(l / launch-01\n      :ARG0 (f / force\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"Saudi\"\n                        :op2 \"Arabia\")))\n      :ARG1 (s / strike-01\n            :ARG0 f\n            :ARG1 (p / person\n                  :ARG0-of (r / rebel-01))\n            :path (a / air))\n      :time (b / before\n            :op1 (n2 / now)\n            :quant (t / temporal-quantity\n                  :quant 1\n                  :unit (m / month))))",
      "# ::snt Saudi forces have focused on beating back Shiite Houthi rebels in Yemen .\n(f / focus-01\n      :ARG0 (f2 / force\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"Saudi\"\n                        :op2 \"Arabia\")))\n      :ARG2 (b / beat-back-05\n            :ARG0 f2\n            :ARG1 (p / person\n                  :ARG0-of (r / rebel-01)\n                  :mod (r2 / religious-group\n                        :name (n2 / name\n                              :op1 \"Shiite\"\n                              :op2 \"Hathi\"))\n                  :location (c2 / country\n                        :name (n3 / name\n                              :op1 \"Yemen\")))))",
      "# ::snt Prince Alwaleed Bin Talal pledged Bentleys for pilots involved in bombings .\n(p / pledge-01\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Alwaleed\"\n                  :op2 \"Bin\"\n                  :op3 \"Talal\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (p3 / prince)))\n      :ARG2 (c / car-make\n            :name (n2 / name\n                  :op1 \"Bentley\"))\n      :beneficiary (p4 / person\n            :ARG0-of (p5 / pilot-01)\n            :ARG1-of (ii / involve-01\n                  :ARG2 (b / bomb-01))))",
      "# ::snt Prince Alwaleed Bin Talal made pledged on Wednesday after bombing raids appeared to resume , despite an official announcement that bombing raids would be halted last night .\n(p / pledge-01\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Alwaleed\"\n                  :op2 \"Bin\"\n                  :op3 \"Talal\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (p3 / prince)))\n      :time (d / date-entity\n            :weekday (w / wednesday))\n      :time (a / after\n            :op1 (a2 / appear-02\n                  :ARG1 (r / resume-01\n                        :ARG1 (r2 / raid-01\n                              :ARG2 (b / bomb-01)))))\n      :concession (a3 / announce-01\n            :ARG1 (h2 / halt-01\n                  :ARG1 r2)\n            :mod (o / official)\n            :time (d2 / date-entity\n                  :dayperiod (n2 / night)\n                  :mod (y / yesterday))))"
    ],
    "tree": [
      "(l / launch-01\n   :ARG0 (f / force\n            :mod (c / country\n                    :name (n / name\n                             :op1 \"Saudi\"\n                             :op2 \"Arabia\"))))",
      "(l / launch-01\n   :ARG1 (s / strike-01\n            :path (a / air)))",
      "(l / launch-01\n   :ARG0 (f / force\n            :mod (c / country\n                    :name (n / name\n                             :op1 \"Saudi\"\n                             :op2 \"Arabia\")))\n   :ARG1 (s / strike-01\n            :ARG0 f))",
      "(l / launch-01\n   :ARG0 (f / force\n            :mod (c / country\n                    :name (n / name\n                             :op1 \"Saudi\"\n                             :op2 \"Arabia\")))\n   :ARG1 (s / strike-01\n            :ARG1 (p / person\n                     :ARG0 (r / rebel-01))))",
      "(l / launch-01\n   :ARG0 (f / force\n            :mod (c / country\n                    :name (n / name\n                             :op1 \"Saudi\"\n                             :op2 \"Arabia\")))\n   :ARG1 (s / strike-01\n            :path (a / air)))",
      "(f / focus-01\n   :ARG0 (f2 / force\n             :mod (c / country\n                     :name (n / name\n                              :op1 \"Saudi\"\n                              :op2 \"Arabia\"))))",
      "(f / focus-01\n   :ARG2 (b / beat-back-05\n            :ARG1 (p / person\n                     :ARG0 (r / rebel-01))))",
      "(f / focus-01\n   :ARG0 (f2 / force\n             :mod (c / country\n                     :name (n / name\n                              :op1 \"Saudi\"\n                              :op2 \"Arabia\")))\n   :ARG2 (b / beat-back-05\n            :ARG0 f2))",
      "(f / focus-01\n   :ARG0 (f2 / force\n             :mod (c / country\n                     :name (n / name\n                              :op1 \"Saudi\"\n                              :op2 \"Arabia\")))\n   :ARG2 (b / beat-back-05\n            :ARG1 (p / person\n                     :ARG0 (r / rebel-01))))",
      "(p / person\n   :ARG0 (r / rebel-01)\n   :location (c2 / country\n                 :name (n3 / name\n                           :op1 \"Yemen\")))",
      "(p / pledge-01\n   :beneficiary (p4 / person\n                    :ARG0 (p5 / pilot-01)))",
      "(p / pledge-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Alwaleed\"\n                      :op2 \"Bin\"\n                      :op3 \"Talal\"))\n   :ARG2 (c / car-make\n            :name (n2 / name\n                      :op1 \"Bentley\")))",
      "(p / pledge-01\n   :ARG0 (p2 / person\n             :ARG0 (h / have-org-role-91\n                      :ARG2 (p3 / prince)))\n   :ARG2 (c / car-make\n            :name (n2 / name\n                      :op1 \"Bentley\")))",
      "(p / pledge-01\n   :ARG0 (p2 / person\n             :ARG0 (h / have-org-role-91\n                      :ARG2 (p3 / prince)))\n   :beneficiary (p4 / person\n                    :ARG0 (p5 / pilot-01)))",
      "(p4 / person\n    :ARG0 (p5 / pilot-01)\n    :ARG1 (ii / involve-01\n              :ARG2 (b / bomb-01)))",
      "(p / pledge-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Alwaleed\"\n                      :op2 \"Bin\"\n                      :op3 \"Talal\"))\n   :time (d / date-entity\n            :weekday (w / wednesday)))",
      "(p / pledge-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Alwaleed\"\n                      :op2 \"Bin\"\n                      :op3 \"Talal\"))\n   :concession (a3 / announce-01\n                   :mod (o / official)))",
      "(p / pledge-01\n   :time (d / date-entity\n            :weekday (w / wednesday))\n   :concession (a3 / announce-01\n                   :mod (o / official)))",
      "(p / pledge-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Alwaleed\"\n                      :op2 \"Bin\"\n                      :op3 \"Talal\"))\n   :time (d / date-entity\n            :weekday (w / wednesday))\n   :concession (a3 / announce-01\n                   :mod (o / official)))",
      "(p / pledge-01\n   :ARG0 (p2 / person\n             :ARG0 (h / have-org-role-91\n                      :ARG2 (p3 / prince)))\n   :time (d / date-entity\n            :weekday (w / wednesday))\n   :concession (a3 / announce-01\n                   :mod (o / official)))"
    ],
    "smus": [
      "Saudi forces launched.",
      "Air strikes were launched.",
      "Saudi forces have launched strikes.",
      "Saudi forces have launched strikes on rebels.",
      "Saudi forces have launched air strikes.",
      "Saudi forces have focused.",
      "Focused on beating back against rebels.",
      "Saudi forces have focused on beating back.",
      "Saudi forces have focused on beating back rebels.",
      "Rebels in Yemen",
      "pledged for pilots",
      "Alwaleed Bin Talal pledged the Bentleys.",
      "The Prince pledged the Bentleys.",
      "The Prince pledged for the pilots.",
      "Pilots were involved in the bombings.",
      "Alwaleed Bin Talal pledged Wednesday.",
      "Alwaleed Bin Talal pledged despite the official announcement.",
      "The pledge was made Wednesday despite an official announcement.",
      "Alwaleed Bin Talal pledged Wednesday despite an official announcement.",
      "The Prince pledged Wednesday despite an official announcement."
    ]
  },
  {
    "instance_id": "realsumm-41",
    "summary": "Brawl at Spring Gardens station in Philadelphia was captured on CCTV . Fight involved students from nearby Benjamin Franklin High School . At one point an attacker falls onto the tracks , but manages to get back up . After Fight , the victims and attackers walk onto the same train .",
    "summary_trees": [
      "# ::snt Brawl at Spring Gardens station in Philadelphia was captured on CCTV .\n(c / capture-01\n      :ARG0 (t / television\n            :mod (c2 / circuit\n                  :ARG1-of (c3 / close-01)))\n      :ARG1 (b / brawl-01\n            :location (s / station\n                  :name (n / name\n                        :op1 \"Spring\"\n                        :op2 \"Gardens\")\n                  :location (c4 / city\n                        :name (n2 / name\n                              :op1 \"Philadelphia\")))))",
      "# ::snt Fight involved students from nearby Benjamin Franklin High School .\n(ii / involve-01\n      :ARG1 (p / person\n            :ARG0-of (s / study-01)\n            :source (h / high-school\n                  :name (n / name\n                        :op1 \"Benjamin\"\n                        :op2 \"Franklin\"\n                        :op3 \"High\"\n                        :op4 \"School\")\n                  :location (n2 / nearby)))\n      :ARG2 (f / fight-01))",
      "# ::snt At one point an attacker falls onto the tracks , but manages to get back up .\n(h / have-concession-91\n      :ARG1 (m / manage-01\n            :ARG0 (p / person\n                  :ARG0-of (a / attack-01))\n            :ARG1 (g / get-back-10\n                  :ARG1 p\n                  :ARG2 (t / track)))\n      :ARG2 (f / fall-01\n            :ARG1 p\n            :ARG4 t\n            :time (p2 / point\n                  :quant 1)))",
      "# ::snt After Fight , the victims and attackers walk onto the same train .\n(w / walk-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :ARG1-of (v / victimize-01))\n            :op2 (p2 / person\n                  :ARG0-of (a2 / attack-01)))\n      :destination (t / train\n            :ARG1-of (s / same-01))\n      :time (a3 / after\n            :op1 (f / fight-01)))"
    ],
    "tree": [
      "(c / capture-01\n   :ARG0 (t / television\n            :mod (c2 / circuit\n                     :ARG1 (c3 / close-01))))",
      "(c / capture-01\n   :ARG1 (b / brawl-01\n            :location (s / station\n                         :name (n / name\n                                  :op1 \"Spring\"\n                                  :op2 \"Gardens\"))))",
      "(t / television\n   :mod (c2 / circuit\n            :ARG1 (c3 / close-01)))",
      "(b / brawl-01\n   :location (s / station\n                :name (n / name\n                         :op1 \"Spring\"\n                         :op2 \"Gardens\")))",
      "(s / station\n   :name (n / name\n            :op1 \"Spring\"\n            :op2 \"Gardens\"))",
      "(ii / involve-01\n    :ARG1 (p / person\n             :source (h / high-school\n                        :name (n / name\n                                 :op1 \"Benjamin\"\n                                 :op2 \"Franklin\"\n                                 :op3 \"High\"\n                                 :op4 \"School\"))))",
      "(ii / involve-01\n    :ARG1 (p / person\n             :source (h / high-school\n                        :location (n2 / nearby)))\n    :ARG2 (f / fight-01))",
      "(p / person\n   :source (h / high-school\n              :location (n2 / nearby)))",
      "(p / person\n   :ARG0 (s / study-01)\n   :source (h / high-school\n              :location (n2 / nearby)))",
      "(h / high-school\n   :name (n / name\n            :op1 \"Benjamin\"\n            :op2 \"Franklin\"\n            :op3 \"High\"\n            :op4 \"School\")\n   :location (n2 / nearby))",
      "(h / have-concession-91\n   :ARG1 (m / manage-01\n            :ARG0 (p / person\n                     :ARG0 (a / attack-01))))",
      "(h / have-concession-91\n   :ARG1 (m / manage-01\n            :ARG0 (p / person\n                     :ARG0 (a / attack-01)))\n   :ARG2 (f / fall-01\n            :time (p2 / point\n                      :quant 1)))",
      "(m / manage-01\n   :ARG0 (p / person\n            :ARG0 (a / attack-01)))",
      "(m / manage-01\n   :ARG0 (p / person\n            :ARG0 (a / attack-01))\n   :ARG1 (g / get-back-10\n            :ARG1 p))",
      "(f / fall-01\n   :time (p2 / point\n             :quant 1))",
      "(w / walk-01\n   :ARG0 (p / person\n            :ARG1 (v / victimize-01)))",
      "(w / walk-01\n   :time (a3 / after\n             :op1 (f / fight-01)))",
      "(w / walk-01\n   :ARG0 (p / person\n            :ARG1 (v / victimize-01))\n   :time (a3 / after\n             :op1 (f / fight-01)))",
      "(w / walk-01\n   :destination (t / train\n                   :ARG1 (s / same-01))\n   :time (a3 / after\n             :op1 (f / fight-01)))",
      "(a / and\n   :op1 (p / person\n           :ARG1 (v / victimize-01))\n   :op2 (p2 / person\n            :ARG0 (a2 / attack-01)))"
    ],
    "smus": [
      "CCTV footage captured.",
      "Brawl at Spring Gardens station captured.",
      "CCTV.",
      "Brawl at Spring Gardens station",
      "Spring Gardens station",
      "The involved were people from Benjamin Franklin High School.",
      "nearby High School got involved in the fight.",
      "People from nearby High School.",
      "Students from nearby High School.",
      "There is a nearby Benjamin Franklin High School.",
      "But the attacker manages.",
      "The attacker manages, but falls at one point.",
      "The attacker manages.",
      "The attacker manages to get back.",
      "falls at one point.",
      "Victims walk.",
      "Walk after fight.",
      "Victims walk after fight.",
      "After the fight, walk to the same train.",
      "Victims and attackers"
    ]
  },
  {
    "instance_id": "realsumm-42",
    "summary": "Paul and Laura Elliott met half way round at St Katharine Docks . Ceremony was witnessed by 80 guests . Paul and Laura Elliott ran across finish line under a shower of confetti . Returned to scene of ceremony for party later on . Raised \u00a3 7,000 for Cancer Research in honour of Paul 's father .",
    "summary_trees": [
      "# ::snt Paul and Laura Elliott met half way round at St Katharine Docks .\n(m / meet-03\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Paul\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Laura\"\n                  :op2 \"Elliott\"))\n      :location (p3 / port\n            :name (n3 / name\n                  :op1 \"St\"\n                  :op2 \"Katharine\"\n                  :op3 \"Docks\"))\n      :extent (r / round-03\n            :extent (h / half)))",
      "# ::snt Ceremony was witnessed by 80 guests .\n(w / witness-01\n      :ARG0 (g / guest\n            :quant 80)\n      :ARG1 (c / ceremony))",
      "# ::snt Paul and Laura Elliott ran across finish line under a shower of confetti .\n(r / run-02\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Paul\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Laura\"\n                        :op2 \"Elliott\")))\n      :path (a2 / across\n            :op1 (l / line\n                  :mod (f / finish-01)))\n      :manner (u / under\n            :op1 (s / shower-01\n                  :ARG1 (c / confetti))))",
      "# ::snt Returned to scene of ceremony for party later on .\n(r / return-01\n      :ARG4 (s / scene\n            :location-of (c / ceremony\n                  :purpose (p / party-01)))\n      :time (a / after))",
      "# ::snt Raised \u00a3 7,000 for Cancer Research in honour of Paul 's father .\n(r / raise-02\n      :ARG1 (m / monetary-quantity\n            :quant 7000\n            :unit (p / pound))\n      :purpose (r2 / research-01\n            :ARG1 (c / cancer))\n      :manner (h / honor-01\n            :ARG1 (p2 / person\n                  :ARG0-of (h2 / have-rel-role-91\n                        :ARG1 (p3 / person\n                              :name (n / name\n                                    :op1 \"Paul\"))\n                        :ARG2 (f / father)))))"
    ],
    "tree": [
      "(m / meet-03\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Laura\"\n                       :op2 \"Elliott\")))",
      "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Paul\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Laura\"\n                       :op2 \"Elliott\")))",
      "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Paul\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Laura\"\n                       :op2 \"Elliott\"))\n   :location (p3 / port\n                 :name (n3 / name\n                           :op1 \"St\"\n                           :op2 \"Katharine\"\n                           :op3 \"Docks\")))",
      "(m / meet-03\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Laura\"\n                       :op2 \"Elliott\"))\n   :location (p3 / port\n                 :name (n3 / name\n                           :op1 \"St\"\n                           :op2 \"Katharine\"\n                           :op3 \"Docks\"))\n   :extent (r / round-03\n              :extent (h / half)))",
      "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Paul\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Laura\"\n                       :op2 \"Elliott\"))\n   :location (p3 / port\n                 :name (n3 / name\n                           :op1 \"St\"\n                           :op2 \"Katharine\"\n                           :op3 \"Docks\"))\n   :extent (r / round-03\n              :extent (h / half)))",
      "(w / witness-01\n   :ARG0 (g / guest\n            :quant 80))",
      "(w / witness-01\n   :ARG0 (g / guest\n            :quant 80)\n   :ARG1 (c / ceremony))",
      "(r / run-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Paul\")))",
      "(r / run-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Laura\"\n                       :op2 \"Elliott\")))",
      "(r / run-02\n   :path (a2 / across\n             :op1 (l / line\n                     :mod (f / finish-01))))",
      "(r / run-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Paul\"))\n   :path (a2 / across\n             :op1 (l / line\n                     :mod (f / finish-01))))",
      "(r / run-02\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Laura\"\n                       :op2 \"Elliott\"))\n   :path (a2 / across\n             :op1 (l / line\n                     :mod (f / finish-01))))",
      "(r / return-01\n   :ARG4 (s / scene\n            :location (c / ceremony\n                         :purpose (p / party-01))))",
      "(r / return-01\n   :ARG4 (s / scene\n            :location (c / ceremony\n                         :purpose (p / party-01)))\n   :time (a / after))",
      "(s / scene\n   :location (c / ceremony\n                :purpose (p / party-01)))",
      "(r / raise-02\n   :ARG1 (m / monetary-quantity\n            :quant 7000))",
      "(r / raise-02\n   :purpose (r2 / research-01\n                :ARG1 (c / cancer)))",
      "(r / raise-02\n   :manner (h / honor-01\n              :ARG1 (p2 / person\n                        :ARG0 (h2 / have-rel-role-91\n                                  :ARG2 (f / father)))))",
      "(r / raise-02\n   :ARG1 (m / monetary-quantity\n            :quant 7000)\n   :manner (h / honor-01\n              :ARG1 (p2 / person\n                        :ARG0 (h2 / have-rel-role-91\n                                  :ARG2 (f / father)))))",
      "(h2 / have-rel-role-91\n    :ARG1 (p3 / person\n              :name (n / name\n                       :op1 \"Paul\"))\n    :ARG2 (f / father))"
    ],
    "smus": [
      "Laura Elliott met.",
      "Paul met Laura Elliott.",
      "Paul met Laura Elliott at St Katharine Docks.",
      "Laura Elliot met at St Katharine Docks for half a round.",
      "Paul met Laura Elliott round the half-way through at St Katharine Docks.",
      "80 guests were witnessed.",
      "The Ceremony was witnessed by 80 guests.",
      "Paul ran.",
      "Laura Elliott ran.",
      "ran across the finish line.",
      "Paul ran across the finish line.",
      "Laura Elliott ran across the finish line.",
      "The scene of the party ceremony was returned.",
      "The scene of the party ceremony was later returned.",
      "Scene from the party ceremony",
      "7k raised.",
      "Raised for Cancer Research",
      "Raised in honor of the father.",
      "7000 were raised in honor of the father.",
      "Paul's father."
    ]
  },
  {
    "instance_id": "realsumm-43",
    "summary": "Nasr Bitar spotted Google Street View car driving around last autumn . Decided it was ' Nasr Bitar time to shine ' with Google Street View car so followed in Nasr Bitar car to get a selfie . Sensing the perfect moment , Nasr Bitar got out and took the snap in Mississauga . Picture of a selfie and the Street View image shared 2.9million times .",
    "summary_trees": [
      "# ::snt Nasr Bitar spotted Google Street View car driving around last autumn .\n(s / spot-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Nasr\"\n                  :op2 \"Bitar\"))\n      :ARG1 (d / drive-01\n            :ARG0 (c / car-make\n                  :name (n2 / name\n                        :op1 \"Google\"\n                        :op2 \"Street\"\n                        :op3 \"View\"))\n            :ARG1 (a / around))\n      :time (d2 / date-entity\n            :season (a2 / autumn)\n            :mod (y / year\n                  :mod (l / last))))",
      "# ::snt Decided it was ' Nasr Bitar time to shine ' with Google Street View car so followed in Nasr Bitar car to get a selfie .\n(d / decide-01\n      :ARG1 (s / shine-01\n            :ARG1 (c / city\n                  :name (n / name\n                        :op1 \"Nasr\"\n                        :op2 \"Bitar\"))\n            :instrument (c2 / car\n                  :name (n2 / name\n                        :op1 \"Google\"\n                        :op2 \"Street\"\n                        :op3 \"View\")))\n      :ARG0-of (c3 / cause-01\n            :ARG1 (f / follow-01\n                  :ARG1 (ii / i)\n                  :ARG2 (c4 / car\n                        :mod c)\n                  :purpose (g / get-01\n                        :ARG0 ii\n                        :ARG1 (s2 / selfie)))))",
      "# ::snt Sensing the perfect moment , Nasr Bitar got out and took the snap in Mississauga .\n(a / and\n      :op1 (g / get-05\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Nasr\"\n                        :op2 \"Bitar\"))\n            :ARG2 (o / out))\n      :op2 (s / snap-03\n            :ARG0 p\n            :location (c / city\n                  :name (n2 / name\n                        :op1 \"Mississauga\")))\n      :manner (s2 / sense-01\n            :ARG0 p\n            :ARG1 (m / moment\n                  :ARG1-of (p2 / perfect-02))))",
      "# ::snt Picture of a selfie and the Street View image shared 2.9million times .\n(a / and\n      :op1 (p / picture\n            :mod (s / selfie))\n      :op2 (ii / image\n            :mod (p2 / product\n                  :name (n / name\n                        :op1 \"Street\"\n                        :op2 \"View\"))\n            :ARG1-of (s2 / share-01\n                  :frequency (t / times\n                        :quant 2900000))))"
    ],
    "tree": [
      "(s / spot-01\n   :time (d2 / date-entity\n             :season (a2 / autumn)))",
      "(s / spot-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nasr\"\n                     :op2 \"Bitar\"))\n   :time (d2 / date-entity\n             :season (a2 / autumn)))",
      "(s / spot-01\n   :ARG1 (d / drive-01\n            :ARG1 (a / around))\n   :time (d2 / date-entity\n             :season (a2 / autumn)))",
      "(d / drive-01\n   :ARG0 (c / car-make\n            :name (n2 / name\n                      :op1 \"Google\"\n                      :op2 \"Street\"\n                      :op3 \"View\"))\n   :ARG1 (a / around))",
      "(d2 / date-entity\n    :season (a2 / autumn)\n    :mod (y / year\n            :mod (l / last)))",
      "(d / decide-01\n   :ARG0 (c3 / cause-01\n             :ARG1 (f / follow-01\n                      :purpose (g / get-01\n                                  :ARG1 (s2 / selfie)))))",
      "(c3 / cause-01\n    :ARG1 (f / follow-01\n             :ARG1 (ii / i)))",
      "(c3 / cause-01\n    :ARG1 (f / follow-01\n             :purpose (g / get-01\n                         :ARG1 (s2 / selfie))))",
      "(f / follow-01\n   :purpose (g / get-01\n               :ARG1 (s2 / selfie)))",
      "(f / follow-01\n   :ARG1 (ii / i)\n   :purpose (g / get-01\n               :ARG1 (s2 / selfie)))",
      "(g / get-05\n   :ARG1 (p / person\n            :name (n / name)))",
      "(s / snap-03\n   :ARG0 (p / person :name (n / name :op1 \"Nasr\" :op2 \"Bitar\"))\n   :location (c / city\n                :name (n2 / name)))",
      "(ii / image\n    :mod (p2 / product\n             :name (n / name)))"
    ],
    "smus": [
      "Spotted in the autumn.",
      "Nasr bilat spotted in the autumn.",
      "A driving around was spotted in the autumn.",
      "Google Street View is driving around.",
      "Last autumn",
      "Decided to follow to get a selfie.",
      "So I followed.",
      "So, followed to get a selfie.",
      "Followed to get a selfie.",
      "I followed to get a selfie.",
      "gotcha.",
      "Nasr biraat snaps in a city",
      "Image:"
    ]
  },
  {
    "instance_id": "realsumm-44",
    "summary": "Rory McIlroy bidding to win Rory McIlroy first Masters title this week at Augusta . Rory McIlroy finished tied for eighth place last year in Rory McIlroy best finish in Georgia . Rory McIlroy looking for third straight major victory after winning The Open and USPGA Championship last year . One Direction star Niall Horan caddied for Rory McIlroy in Wednesday 's Par-3 Contest .",
    "summary_trees": [
      "# ::snt Rory McIlroy bidding to win Rory McIlroy first Masters title this week at Augusta .\n(b / bid-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Rory\"\n                  :op2 \"McIlroy\"))\n      :ARG1 (w / win-01\n            :ARG0 p\n            :ARG1 (t / title\n                  :mod (g / game\n                        :name (n2 / name\n                              :op1 \"Masters\"))\n                  :ord (o / ordinal-entity\n                        :value 1))\n            :time (w2 / week\n                  :mod (t2 / this))\n            :location (f / facility\n                  :name (n3 / name\n                        :op1 \"Augusta\"))))",
      "# ::snt Rory McIlroy finished tied for eighth place last year in Rory McIlroy best finish in Georgia .\n(f / finish-07\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Rory\"\n                  :op2 \"McIlroy\"))\n      :ARG2 (t / tie-01\n            :ARG1 p\n            :ARG3 (p2 / place\n                  :ord (o / ordinal-entity\n                        :value 8)))\n      :time (y / year\n            :mod (l / last))\n      :subevent-of (f2 / finish-07\n            :ARG0 p\n            :location (s / state\n                  :name (n2 / name\n                        :op1 \"Georgia\"))\n            :ARG1-of (h / have-degree-91\n                  :ARG2 (g / good-03\n                        :ARG1 f2)\n                  :ARG3 (m / most))))",
      "# ::snt Rory McIlroy looking for third straight major victory after winning The Open and USPGA Championship last year .\n(l / look-04\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Rory\"\n                  :op2 \"McIlroy\"))\n      :ARG1 (w / win-01\n            :ARG0 p\n            :mod (m / major)\n            :ord (o / ordinal-entity\n                  :value 3)\n            :mod (s / straight))\n      :time (a / after\n            :op1 (w2 / win-01\n                  :ARG0 p\n                  :ARG2 (a2 / and\n                        :op1 (e / event\n                              :name (n2 / name\n                                    :op1 \"The\"\n                                    :op2 \"Open\"))\n                        :op2 (e2 / event\n                              :name (n3 / name\n                                    :op1 \"USPGA\"\n                                    :op2 \"Championship\")))\n                  :time (y / year\n                        :mod (l2 / last)))))",
      "# ::snt One Direction star Niall Horan caddied for Rory McIlroy in Wednesday 's Par-3 Contest .\n(c / caddie-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Niall\"\n                  :op2 \"Horan\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (o / organization\n                        :name (n2 / name\n                              :op1 \"One\"\n                              :op2 \"Direction\"))\n                  :ARG2 (s / star)))\n      :ARG1 (p2 / person\n            :name (n3 / name\n                  :op1 \"Rory\"\n                  :op2 \"McIlroy\"))\n      :subevent-of (c2 / contest-02\n            :name (n4 / name\n                  :op1 \"Par-3\")\n            :time (d / date-entity\n                  :weekday (w / wednesday))))"
    ],
    "tree": [
      "(b / bid-01\n   :ARG1 (w / win-01\n            :ARG1 (t / title\n                     :mod (g / game\n                             :name (n2 / name\n                                       :op1 \"Masters\")))))",
      "(b / bid-01\n   :ARG1 (w / win-01\n            :time (w2 / week\n                      :mod (t2 / this))))",
      "(b / bid-01\n   :ARG1 (w / win-01\n            :location (f / facility\n                         :name (n3 / name\n                                   :op1 \"Augusta\"))))",
      "(b / bid-01\n   :ARG1 (w / win-01\n            :ARG1 (t / title\n                     :ord (o / ordinal-entity\n                             :value 1))))",
      "(g / game\n   :name (n2 / name\n             :op1 \"Masters\"))",
      "(f / finish-07\n   :ARG2 (t / tie-01\n            :ARG3 (p2 / place\n                      :ord (o / ordinal-entity\n                              :value 8))))",
      "(f / finish-07\n   :ARG2 (t / tie-01\n            :ARG3 (p2 / place\n                      :ord (o / ordinal-entity\n                              :value 8)))\n   :time (y / year\n            :mod (l / last)))",
      "(p / person\n   :name (n / name\n            :op1 \"Rory\"\n            :op2 \"McIlroy\"))",
      "(t / tie-01\n   :ARG3 (p2 / place\n             :ord (o / ordinal-entity\n                     :value 8)))",
      "(f2 / finish-07\n    :location (s / state\n                 :name (n2 / name\n                           :op1 \"Georgia\")))",
      "(l / look-04\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rory\"\n                     :op2 \"McIlroy\"))\n   :ARG1 (w / win-01\n            :ord (o / ordinal-entity\n                    :value 3))\n   :time (a / after\n            :op1 (w2 / win-01\n                     :time (y / year\n                              :mod (l2 / last)))))",
      "(a / after\n   :op1 (w2 / win-01\n            :time (y / year\n                     :mod (l2 / last))))",
      "(w2 / win-01\n    :time (y / year\n             :mod (l2 / last)))",
      "(w2 / win-01\n    :ARG2 (e2 / event\n              :name (n3 / name\n                        :op1 \"USPGA\"\n                        :op2 \"Championship\"))\n    :time (y / year\n             :mod (l2 / last)))",
      "(a2 / and\n    :op1 (e / event\n            :name (n2 / name\n                      :op1 \"The\"\n                      :op2 \"Open\"))\n    :op2 (e2 / event\n             :name (n3 / name\n                       :op1 \"USPGA\"\n                       :op2 \"Championship\")))",
      "(c / caddie-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Niall\"\n                     :op2 \"Horan\")))",
      "(c / caddie-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (s / star))))",
      "(c / caddie-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Niall\"\n                     :op2 \"Horan\"))\n   :subevent (c2 / contest-02\n                 :name (n4 / name\n                           :op1 \"Par-3\")))",
      "(c / caddie-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Niall\"\n                     :op2 \"Horan\"))\n   :subevent (c2 / contest-02\n                 :time (d / date-entity\n                          :weekday (w / wednesday))))",
      "(h / have-org-role-91\n   :ARG1 (o / organization\n            :name (n2 / name\n                      :op1 \"One\"\n                      :op2 \"Direction\"))\n   :ARG2 (s / star))"
    ],
    "smus": [
      "Bidding to win the Masters title",
      "Bidding to win this week",
      "Bidding to win at Augusta",
      "Bidding to win the title.",
      "Masters",
      "The finish was tied for 8th place.",
      "The finish of last year was tied for eighth place.",
      "Ry McIlroy",
      "tied to eighth place.",
      "Finish in Georgia.",
      "After winning last year, Ryan McIlroy is looking for a third victory.",
      "After winning last year.",
      "Winning last year.",
      "Winning the USPGA Championship last year.",
      "The Open and the USPGA Championship.",
      "Niall Horan caddied.",
      "The star caddied.",
      "Niall Horan caddied in the Par-3 Contest.",
      "Niall Horan caddied in the Wednesday contest.",
      "One Direction star."
    ]
  },
  {
    "instance_id": "realsumm-45",
    "summary": "Danny Higginbotham covers Danny Higginbotham time under Roy Keane in Danny Higginbotham new book . Danny Higginbotham played for Roy Keane Sunderland during the 2007 - 08 season . Roy Keane told Roy Keane players ' basically his players 're s * * * ' before a game with Aston Villa . Roy Keane also told one player one player was ' not f * * * * * * good enough ' to play for Keane 's Sunderland .",
    "summary_trees": [
      "# ::snt Danny Higginbotham covers Danny Higginbotham time under Roy Keane in Danny Higginbotham new book .\n(c / cover-03\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Danny\"\n                  :op2 \"Higginbotham\"))\n      :ARG1 (t / time\n            :poss p\n            :prep-under (p2 / person\n                  :name (n2 / name\n                        :op1 \"Roy\"\n                        :op2 \"Keane\")))\n      :medium (b / book\n            :ARG1-of (n3 / new-01)))",
      "# ::snt Danny Higginbotham played for Roy Keane Sunderland during the 2007 - 08 season .\n(p / play-01\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Danny\"\n                  :op2 \"Higginbotham\"))\n      :ARG3 (t / team\n            :name (n2 / name\n                  :op1 \"Roy\"\n                  :op2 \"Keane\")\n            :part-of t\n            :name (n3 / name\n                  :op1 \"Sunderland\"))\n      :time (d / date-interval\n            :op1 (d2 / date-entity\n                  :year 2007)\n            :op2 (d3 / date-entity\n                  :year 2008)))",
      "# ::snt Roy Keane told Roy Keane players ' basically his players 're s *\n(t / tell-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Roy\"\n                  :op2 \"Keane\"))\n      :ARG1 (t2 / thing\n            :poss (p2 / person\n                  :ARG0-of (p3 / play-01)\n                  :poss p)\n            :mod (b / basic))\n      :ARG2 p2)",
      "# ::snt * * ' before a game with Aston Villa .\n(b / be-temporally-at-91\n      :ARG2 (b2 / before\n            :op1 (g / game\n                  :mod (t / team\n                        :name (n / name\n                              :op1 \"Aston\"\n                              :op2 \"Villa\")))))",
      "# ::snt Roy Keane also told one player one player was ' not f *\n(t / tell-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Roy\"\n                  :op2 \"Keane\"))\n      :ARG1 (f / fuck-01\n            :polarity -\n            :ARG0 (p2 / person\n                  :quant 1\n                  :ARG0-of (p3 / play-01)\n                  :ARG2-of t))\n      :mod (a / also))",
      "# ::snt * *\n(a / amr-empty)",
      "# ::snt *\n(a / amr-empty)",
      "# ::snt * * good enough ' to play for Keane 's Sunderland .\n(h / have-degree-91\n      :ARG2 (g / good-03)\n      :ARG3 (e / enough)\n      :ARG6 (p / play-01\n            :ARG3 (t / team\n                  :name (n / name\n                        :op1 \"Sunderland\")\n                  :poss (p2 / person\n                        :name (n2 / name\n                              :op1 \"Keane\")))))"
    ],
    "tree": [
      "(c / cover-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Danny\"\n                     :op2 \"Higginbotham\")))",
      "(c / cover-03\n   :ARG1 (t / time\n            :prep-under (p2 / person\n                            :name (n2 / name\n                                      :op1 \"Roy\"\n                                      :op2 \"Keane\"))))",
      "(c / cover-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Danny\"\n                     :op2 \"Higginbotham\"))\n   :ARG1 (t / time\n            :prep-under (p2 / person\n                            :name (n2 / name\n                                      :op1 \"Roy\"\n                                      :op2 \"Keane\"))))",
      "(c / cover-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Danny\"\n                     :op2 \"Higginbotham\"))\n   :medium (b / book\n              :ARG1 (n3 / new-01)))",
      "(c / cover-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Danny\"\n                     :op2 \"Higginbotham\"))\n   :ARG1 (t / time\n            :prep-under (p2 / person\n                            :name (n2 / name\n                                      :op1 \"Roy\"\n                                      :op2 \"Keane\")))\n   :medium (b / book\n              :ARG1 (n3 / new-01)))",
      "(p / play-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Danny\"\n                      :op2 \"Higginbotham\")))",
      "(p / play-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Danny\"\n                      :op2 \"Higginbotham\"))\n   :ARG3 (t / team\n            :name (n2 / name\n                      :op1 \"Roy\"\n                      :op2 \"Keane\")))",
      "(p / play-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Danny\"\n                      :op2 \"Higginbotham\"))\n   :time (d / date-interval\n            :op1 (d2 / date-entity\n                     :year 2007)))",
      "(p / play-01\n   :ARG3 (t / team\n            :name (n2 / name\n                      :op1 \"Roy\"\n                      :op2 \"Keane\"))\n   :time (d / date-interval\n            :op1 (d2 / date-entity\n                     :year 2007)))",
      "(p2 / person\n    :name (n / name\n             :op1 \"Danny\"\n             :op2 \"Higginbotham\"))",
      "(t / tell-01\n   :ARG1 (t2 / thing\n             :mod (b / basic)))",
      "(t / tell-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Roy\"\n                     :op2 \"Keane\"))\n   :ARG1 (t2 / thing\n             :mod (b / basic)))",
      "(t / tell-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Roy\"\n                     :op2 \"Keane\"))\n   :ARG1 (t2 / thing\n             :poss (p2 / person\n                       :poss p)))",
      "(p / person\n   :name (n / name\n            :op1 \"Roy\"\n            :op2 \"Keane\"))",
      "(t2 / thing\n    :poss (p2 / person\n              :ARG0 (p3 / play-01))\n    :mod (b / basic))",
      "(b / be-temporally-at-91\n   :ARG2 (b2 / before\n             :op1 (g / game\n                     :mod (t / team\n                             :name (n / name\n                                      :op1 \"Aston\"\n                                      :op2 \"Villa\")))))",
      "(g / game\n   :mod (t / team\n           :name (n / name\n                    :op1 \"Aston\"\n                    :op2 \"Villa\")))",
      "(t / team\n   :name (n / name\n            :op1 \"Aston\"\n            :op2 \"Villa\"))",
      "(t / tell-01\n   :ARG1 (f / fuck-01\n            :polarity -))",
      "(t / tell-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Roy\"\n                     :op2 \"Keane\"))\n   :ARG1 (f / fuck-01\n            :polarity -))",
      "(t / tell-01\n   :ARG1 (f / fuck-01\n            :polarity -)\n   :mod (a / also))",
      "(t / tell-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Roy\"\n                     :op2 \"Keane\"))\n   :ARG1 (f / fuck-01\n            :polarity -)\n   :mod (a / also))",
      "(p / person\n   :name (n / name\n            :op1 \"Roy\"\n            :op2 \"Keane\"))",
      "(a / amr-empty)",
      "(a / amr-empty)",
      "(h / have-degree-91\n   :ARG6 (p / play-01\n            :ARG3 (t / team\n                     :poss (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Keane\")))))",
      "(h / have-degree-91\n   :ARG2 (g / good-03)\n   :ARG3 (e / enough))",
      "(h / have-degree-91\n   :ARG3 (e / enough)\n   :ARG6 (p / play-01\n            :ARG3 (t / team\n                     :poss (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Keane\")))))",
      "(h / have-degree-91\n   :ARG2 (g / good-03)\n   :ARG3 (e / enough)\n   :ARG6 (p / play-01\n            :ARG3 (t / team\n                     :poss (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Keane\")))))",
      "(p / play-01\n   :ARG3 (t / team\n            :poss (p2 / person\n                      :name (n2 / name\n                                :op1 \"Keane\"))))"
    ],
    "smus": [
      "Danny Higginbotham covers.",
      "Covers time under Roy Keane.",
      "Danny Higginbotham covers time under Roy Keane.",
      "Danny Higginbotham covers in the new book.",
      "In the new book, Danny Higginbotham covers the time under Roy Keane.",
      "Danny Higginbotham played.",
      "Danny Higginbotham played for Roy Keane.",
      "Danny Higginbotham played in 2007.",
      "Played for Roy Keane in 2007.",
      "Danny Higginbotham",
      "Basically, it was told.",
      "Basically, Roy Keane told it.",
      "Roy Keane told his people.",
      "Roy Keane",
      "basically the players' things.",
      "Before the Aston Villa game.",
      "The game will be against Aston Villa.",
      "Aston Villa",
      "told not to fuck.",
      "Roy Keane told not to fuck.",
      "Also told not to fuck.",
      "Roy Keane also told not to fuck.",
      "Roy Keane",
      "SetC-WP-01",
      "SetC-WP-01",
      "Play for Keane's team.",
      "Good enough.",
      "enough to play for Keane's team.",
      "Good enough to play for Keane's team.",
      "Play with Keane's team."
    ]
  },
  {
    "instance_id": "realsumm-46",
    "summary": "Four - poster bed dumped in a hotel car park and sold at auction for \u00a3 2,200 . Owner suspected Ornate bed , now on display had historic value and experts have been investigating . Historian now claims DNA from the timber proves Ornate bed , now on display belonged to Henry VII . Ornate bed , now on display , was made for King and wife Elizabeth of York .",
    "summary_trees": [
      "# ::snt Four - poster bed dumped in a hotel car park and sold at auction for \u00a3 2,200 .\n(a / and\n      :op1 (d / dump-01\n            :ARG1 (b / bed\n                  :mod (p / poster\n                        :quant 4))\n            :location (p2 / park\n                  :mod (c / car)\n                  :mod (h / hotel)))\n      :op2 (s / sell-01\n            :ARG1 b\n            :ARG3 (m / monetary-quantity\n                  :quant 2100\n                  :unit (p3 / pound))\n            :time (a2 / auction-off-01)))",
      "# ::snt Owner suspected Ornate bed , now on display had historic value and experts have been investigating .\n(a / and\n      :op1 (s / suspect-01\n            :ARG0 (p / person\n                  :ARG0-of (o / own-01))\n            :ARG1 (v / value-01\n                  :ARG1 (b / bed\n                        :name (n / name\n                              :op1 \"Ornate\")\n                        :ARG1-of (d / display-01\n                              :time (n2 / now)))\n                  :ARG2 (h / history)))\n      :op2 (ii / investigate-01\n            :ARG0 (p2 / person\n                  :ARG1-of (e / expert-01))))",
      "# ::snt Historian now claims DNA from the timber proves Ornate bed , now on display belonged to Henry VII .\n(c / claim-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (h2 / historian)))\n      :ARG1 (p2 / prove-01\n            :ARG0 (n / nucleic-acid\n                  :name (n2 / name\n                        :op1 \"DNA\")\n                  :source (t / timber))\n            :ARG1 (b / belong-01\n                  :ARG0 (b2 / bed\n                        :name (n3 / name\n                              :op1 \"Ornate\")\n                        :ARG1-of (d / display-01\n                              :time (n4 / now)))\n                  :ARG1 (p3 / person\n                        :name (n5 / name\n                              :op1 \"Henry\"\n                              :op2 \"VII\"))))\n      :time (n6 / now))",
      "# ::snt Ornate bed , now on display , was made for King and wife Elizabeth of York .\n(m / make-01\n      :ARG1 (b / bed\n            :mod (o / ornate)\n            :ARG1-of (d / display-01\n                  :time (n / now)))\n      :ARG3 (p / person\n            :name (n2 / name\n                  :op1 \"Elizabeth\"\n                  :op2 \"of\"\n                  :op3 \"York\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (k / king))\n            :ARG0-of (h2 / have-rel-role-91\n                  :ARG2 (w / wife))))"
    ],
    "tree": [
      "(d / dump-01\n   :ARG1 (b / bed\n            :mod (p / poster\n                    :quant 4))\n   :location (p2 / park\n                 :mod (c / car)\n                 :mod (h / hotel)))",
      "(s / sell-01\n   :ARG1 (b / bed)\n   :ARG3 (m / monetary-quantity\n            :quant 2100\n            :unit (p3 / pound))\n   :time (a2 / auction-off-01))",
      "(s / suspect-01\n   :ARG0 (p / person\n            :ARG0 (o / own-01))\n   :ARG1 (v / value-01\n            :ARG1 (b / bed\n                     :name (n / name))))",
      "(ii / investigate-01\n    :ARG0 (p2 / person\n              :ARG1 (e / expert-01)))",
      "(c / claim-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (h2 / historian))))",
      "(c / claim-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (h2 / historian)))\n   :ARG1 (p2 / prove-01\n             :ARG0 (n / nucleic-acid\n                      :name (n2 / name\n                                :op1 \"DNA\"))))",
      "(c / claim-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (h2 / historian)))\n   :time (n6 / now))",
      "(c / claim-01\n   :ARG1 (p2 / prove-01\n             :ARG1 (b / belong-01\n                      :ARG0 (b2 / bed\n                                :ARG1 (d / display-01\n                                         :time (n4 / now)))))\n   :time (n6 / now))",
      "(c / claim-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (h2 / historian)))\n   :ARG1 (p2 / prove-01\n             :ARG0 (n / nucleic-acid\n                      :name (n2 / name\n                                :op1 \"DNA\")))\n   :time (n6 / now))",
      "(m / make-01\n   :ARG3 (p / person\n            :name (n2 / name\n                      :op1 \"Elizabeth\"\n                      :op2 \"of\"\n                      :op3 \"York\")))",
      "(m / make-01\n   :ARG1 (b / bed\n            :mod (o / ornate))\n   :ARG3 (p / person\n            :name (n2 / name\n                      :op1 \"Elizabeth\"\n                      :op2 \"of\"\n                      :op3 \"York\")))",
      "(m / make-01\n   :ARG1 (b / bed\n            :mod (o / ornate))\n   :ARG3 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (k / king))))",
      "(m / make-01\n   :ARG1 (b / bed\n            :ARG1 (d / display-01\n                     :time (n / now)))\n   :ARG3 (p / person\n            :name (n2 / name\n                      :op1 \"Elizabeth\"\n                      :op2 \"of\"\n                      :op3 \"York\")))",
      "(p / person\n   :name (n2 / name\n             :op1 \"Elizabeth\"\n             :op2 \"of\"\n             :op3 \"York\"))"
    ],
    "smus": [
      "4 poster bed dumped in hotel car park.",
      "The bed sold for PS2100 at the auction.",
      "The owner suspected the bed was worthless.",
      "Experts are investigating.",
      "The historian claims.",
      "The historian claims DNA proves it.",
      "Now the historian claims.",
      "Now claims that proves the bed that now is on display belonged.",
      "Now the historian claims DNA proves it.",
      "Made for Elizabeth of York.",
      "An ornate bed was made for Elizabeth of York.",
      "An ornate bed is made for the King.",
      "The bed for now's display was made for Elizabeth of York.",
      "Elizabeth of York"
    ]
  },
  {
    "instance_id": "realsumm-47",
    "summary": "Attorney : Robert Bates assumed the gun was a Taser because Robert Bates saw a laser sight on the gun . Harris family lawyers say there are stark differences between the gun and Taser used . In 2009 , an officer in California also said an officer in California mistakenly used an officer in California gun instead of a Taser .",
    "summary_trees": [
      "# ::snt Attorney : Robert Bates assumed the gun was a Taser because Robert Bates saw a laser sight on the gun .\n(s / say-01\n      :ARG0 (a / attorney)\n      :ARG1 (a2 / assume-02\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Robert\"\n                        :op2 \"Bates\"))\n            :ARG1 (t / taser\n                  :domain (g / gun))\n            :ARG1-of (c / cause-01\n                  :ARG0 (s2 / see-01\n                        :ARG0 p\n                        :ARG1 (s3 / sight-01\n                              :ARG0 (l / laser)\n                              :location g)))))",
      "# ::snt Harris family lawyers say there are stark differences between the gun and Taser used .\n(s / say-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (f / family\n                        :name (n / name\n                              :op1 \"Harris\"))\n                  :ARG2 (l / lawyer)))\n      :ARG1 (d / differ-02\n            :ARG1 (g / gun)\n            :ARG2 (t / taser\n                  :ARG1-of (u / use-01))\n            :mod (s2 / stark)))",
      "# ::snt In 2009 , an officer in California also said an officer in California mistakenly used an officer in California gun instead of a Taser .\n(s / say-01\n      :ARG0 (o / officer\n            :location (s2 / state\n                  :name (n / name\n                        :op1 \"California\")))\n      :ARG1 (u / use-01\n            :ARG0 (o2 / officer\n                  :location s2)\n            :ARG1 (o3 / officer\n                  :location (g / gun\n                        :mod s2\n                        :ARG1-of (ii / instead-of-91\n                              :ARG2 (t / taser))))\n            :ARG2-of (m / mistake-01\n                  :ARG0 o2))\n      :mod (a / also)\n      :time (d / date-entity\n            :year 2009))"
    ],
    "tree": [
      "(s / say-01\n   :ARG1 (a2 / assume-02\n             :ARG1 (t / taser\n                      :domain (g / gun))))",
      "(s / say-01\n   :ARG0 (a / attorney)\n   :ARG1 (a2 / assume-02\n             :ARG0 (p / person\n                      :name (n / name\n                               :op1 \"Robert\"\n                               :op2 \"Bates\"))))",
      "(a2 / assume-02\n    :ARG1 (t / taser\n             :domain (g / gun)))",
      "(a2 / assume-02\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Robert\"\n                      :op2 \"Bates\"))\n    :ARG1 (t / taser\n             :domain (g / gun)))",
      "(c / cause-01\n   :ARG0 (s2 / see-01\n             :ARG0 (p / person :name (n / name :op1 \"Robert\" :op2 \"Bates\"))))",
      "(s / say-01\n   :ARG1 (d / differ-02\n            :mod (s2 / stark)))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (l / lawyer)))\n   :ARG1 (d / differ-02\n            :ARG1 (g / gun)))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (l / lawyer)))\n   :ARG1 (d / differ-02\n            :mod (s2 / stark)))",
      "(d / differ-02\n   :ARG1 (g / gun)\n   :ARG2 (t / taser\n            :ARG1 (u / use-01)))",
      "(d / differ-02\n   :ARG1 (g / gun)\n   :ARG2 (t / taser\n            :ARG1 (u / use-01))\n   :mod (s2 / stark))",
      "(s / say-01\n   :ARG0 (o / officer\n            :location (s2 / state\n                          :name (n / name\n                                   :op1 \"California\")))\n   :ARG1 (u / use-01\n            :ARG1 (o3 / officer\n                      :location (g / gun\n                                   :mod s2))))",
      "(s / say-01\n   :ARG0 (o / officer\n            :location (s2 / state\n                          :name (n / name\n                                   :op1 \"California\")))\n   :ARG1 (u / use-01\n            :ARG1 (o3 / officer\n                      :location (g / gun\n                                   :mod s2)))\n   :mod (a / also))",
      "(s / say-01\n   :ARG0 (o / officer\n            :location (s2 / state\n                          :name (n / name\n                                   :op1 \"California\")))\n   :ARG1 (u / use-01\n            :ARG1 (o3 / officer\n                      :location (g / gun\n                                   :ARG1 (ii / instead-of-91\n                                             :ARG2 (t / taser)))))\n   :time (d / date-entity\n            :year 2009))",
      "(s / say-01\n   :ARG0 (o / officer\n            :location (s2 / state\n                          :name (n / name\n                                   :op1 \"California\")))\n   :ARG1 (u / use-01\n            :ARG1 (o3 / officer\n                      :location (g / gun\n                                   :mod s2)))\n   :mod (a / also)\n   :time (d / date-entity\n            :year 2009))",
      "(u / use-01\n   :ARG0 (o2 / officer\n             :location (s2 / state :name (n / name :op1 \"California\")))\n   :ARG1 (o3 / officer\n             :location (g / gun\n                          :ARG1 (ii / instead-of-91\n                                    :ARG2 (t / taser))))\n   :ARG2 (m / mistake-01\n            :ARG0 o2))"
    ],
    "smus": [
      "Assumed the gun was a Taser.",
      "The attorney said Robert Bates assumed.",
      "assumed the gun was a Taser.",
      "Robert Bates assumed the gun was a taser.",
      "Because Robert Bates saw.",
      "There are stark differences, they say.",
      "Lawyers say there are differences in gun.",
      "Lawyers say there are stark differences.",
      "There are differences between a gun and the Taser used.",
      "There are stark differences between a gun and the Taser used.",
      "An officer in California said the officer used a California gun.",
      "A California officer also said the officer used a California gun.",
      "In 2009, an officer in California said the officer used a gun instead of a Taser.",
      "In 2009, an officer in California also said the officer used a California gun.",
      "A California officer mistakenly used an officer with a gun instead of a Taser."
    ]
  },
  {
    "instance_id": "realsumm-48",
    "summary": "Singer arrived at artists ' entrance to gain entry to Drake 's gig . Security told Bieber area was at full capacity and denied admission . A row erupted and a Coachella staffer tried to get Bieber into Drake 's gig . But festival security then intervened and put Bieber in chokehold and removed Bieber from the area .",
    "summary_trees": [
      "# ::snt Singer arrived at artists ' entrance to gain entry to Drake 's gig .\n(a / arrive-01\n      :ARG1 (p / person\n            :ARG0-of (s / sing-01))\n      :ARG4 (e / entrance\n            :poss (a2 / artist))\n      :purpose (g / gain-02\n            :ARG0 p\n            :ARG1 (e2 / enter-01\n                  :ARG0 p\n                  :ARG1 (g2 / gig\n                        :poss (p2 / person\n                              :name (n / name\n                                    :op1 \"Drake\"))))))",
      "# ::snt Security told Bieber area was at full capacity and denied admission .\n(a / and\n      :op1 (t / tell-01\n            :ARG0 (s / security)\n            :ARG1 (c / capacity\n                  :ARG1-of (f / full-09)\n                  :domain (a2 / area\n                        :poss (p / person\n                              :name (n / name\n                                    :op1 \"Bieber\"))))\n            :ARG2 p)\n      :op2 (d / deny-01\n            :ARG0 s\n            :ARG1 (a3 / admit-02\n                  :ARG1 p)\n            :ARG2 p))",
      "# ::snt A row erupted and a Coachella staffer tried to get Bieber into Drake 's gig .\n(a / and\n      :op1 (e / erupt-01\n            :ARG1 (r / row))\n      :op2 (t / try-01\n            :ARG0 (p / person\n                  :ARG0-of (h / have-org-role-91\n                        :ARG1 (e2 / event\n                              :name (n / name\n                                    :op1 \"Coeachella\"))\n                        :ARG2 (s / staffer)))\n            :ARG1 (g / get-05\n                  :ARG0 p\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Bieber\"))\n                  :ARG2 (g2 / gig\n                        :poss (p3 / person\n                              :name (n3 / name\n                                    :op1 \"Drake\"))))))",
      "# ::snt But festival security then intervened and put Bieber in chokehold and removed Bieber from the area .\n(c / contrast-01\n      :ARG2 (a / and\n            :op1 (ii / intervene-01\n                  :ARG0 (s / security\n                        :mod (f / festival)))\n            :op2 (p / put-01\n                  :ARG0 s\n                  :ARG1 (p2 / person\n                        :name (n / name\n                              :op1 \"Bieber\"))\n                  :ARG2 (c2 / chokehold))\n            :op3 (r / remove-01\n                  :ARG0 s\n                  :ARG1 p2\n                  :ARG2 (a2 / area))\n            :time (t / then)))"
    ],
    "tree": [
      "(a / arrive-01\n   :ARG1 (p / person\n            :ARG0 (s / sing-01)))",
      "(a / arrive-01\n   :purpose (g / gain-02\n               :ARG1 (e2 / enter-01\n                         :ARG1 (g2 / gig\n                                   :poss (p2 / person\n                                             :name (n / name\n                                                      :op1 \"Drake\"))))))",
      "(a / arrive-01\n   :ARG1 (p / person\n            :ARG0 (s / sing-01))\n   :ARG4 (e / entrance\n            :poss (a2 / artist)))",
      "(a / arrive-01\n   :ARG1 (p / person\n            :ARG0 (s / sing-01))\n   :purpose (g / gain-02\n               :ARG1 (e2 / enter-01\n                         :ARG0 p)))",
      "(a / arrive-01\n   :ARG1 (p / person\n            :ARG0 (s / sing-01))\n   :purpose (g / gain-02\n               :ARG1 (e2 / enter-01\n                         :ARG1 (g2 / gig\n                                   :poss (p2 / person\n                                             :name (n / name\n                                                      :op1 \"Drake\"))))))",
      "(t / tell-01\n   :ARG0 (s / security)\n   :ARG1 (c / capacity\n            :ARG1 (f / full-09)\n            :domain (a2 / area\n                        :poss (p / person\n                                 :name (n / name)))))",
      "(d / deny-01\n   :ARG0 (s / security)\n   :ARG1 (a3 / admit-02\n             :ARG1 (p / person :name (n / name :op1 \"Bieber\")))\n   :ARG2 p)",
      "(t / try-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (e2 / event\n                               :name (n / name)))))",
      "(c / contrast-01\n   :ARG2 (ii / intervene-01\n             :ARG0 (s / security\n                      :mod (f / festival))))",
      "(a / and\n   :op1 (ii / intervene-01\n            :ARG0 (s / security\n                     :mod (f / festival))))",
      "(a / and\n   :op1 (ii / intervene-01\n            :ARG0 (s / security\n                     :mod (f / festival)))\n   :op3 (r / remove-01\n           :ARG1 (p2 / person\n                     :name (n / name\n                              :op1 \"Bieber\"))))",
      "(a / and\n   :op1 (ii / intervene-01\n            :ARG0 (s / security\n                     :mod (f / festival)))\n   :time (t / then))",
      "(ii / intervene-01\n    :ARG0 (s / security\n             :mod (f / festival)))"
    ],
    "smus": [
      "The singer arrived.",
      "Arrived to gain entry to Drake's gig.",
      "The singer arrived at the artists' entrance.",
      "The singer arrived to gain entry.",
      "The singer arrived to gain entry to Drake's gig.",
      "Security told reporters that the area was in full capacity.",
      "Security denied Bieber admission.",
      "The people tried.",
      "But festival security intervened.",
      "and festival security intervened.",
      "Festival security intervened and Bieber was removed.",
      "And then festival security intervened.",
      "Festival security intervened."
    ]
  },
  {
    "instance_id": "realsumm-49",
    "summary": "Sir Philip Carter died at Sir Philip Carter home on Thursday morning after a short illness . Sir Philip Carter served Everton during three spells after first joining Everton in 1977 . Everton chairman Bill Kenwright pays tribute to a ' great man and leader '",
    "summary_trees": [
      "# ::snt Sir Philip Carter died at Sir Philip Carter home on Thursday morning after a short illness .\n(d / die-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Sir\"\n                  :op2 \"Philip\"\n                  :op3 \"Carter\"))\n      :location (h / home\n            :poss p)\n      :time (d2 / date-entity\n            :weekday (t / thursday)\n            :dayperiod (m / morning))\n      :time (a / after\n            :op1 (ii / ill-01\n                  :ARG1 p\n                  :ARG1-of (s / short-07))))",
      "# ::snt Sir Philip Carter served Everton during three spells after first joining Everton in 1977 .\n(s / serve-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Sir\"\n                  :op2 \"Philip\"\n                  :op3 \"Carter\"))\n      :ARG2 (t / team\n            :name (n2 / name\n                  :op1 \"Everton\"))\n      :duration (s2 / spell\n            :quant 3)\n      :time (a / after\n            :op1 (j / join-04\n                  :ARG0 p\n                  :ARG1 t\n                  :time (d / date-entity\n                        :year 1977)\n                  :ord (o / ordinal-entity\n                        :value 1))))",
      "# ::snt Everton chairman Bill Kenwright pays tribute to a ' great man and leader '\n(p / pay\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Bill\"\n                  :op2 \"Kenwright\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (t / team\n                        :name (n2 / name\n                              :op1 \"Everton\"))\n                  :ARG2 (c / chairman)))\n      :ARG1 (p3 / person\n            :mod (g / great)\n            :ARG0-of (l / lead-02)))"
    ],
    "tree": [
      "(d / die-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Sir\"\n                     :op2 \"Philip\"\n                     :op3 \"Carter\")))",
      "(d / die-01\n   :location (h / home\n                :poss (p / person :name (n / name :op1 \"Sir\" :op2 \"Philip\" :op3 \"Carter\"))))",
      "(d / die-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Sir\"\n                     :op2 \"Philip\"\n                     :op3 \"Carter\"))\n   :time (d2 / date-entity\n             :weekday (t / thursday)))",
      "(a / after\n   :op1 (ii / ill-01\n            :ARG1 (p / person :name (n / name :op1 \"Sir\" :op2 \"Philip\" :op3 \"Carter\"))))",
      "(a / after\n   :op1 (ii / ill-01\n            :ARG1 (s / short-07)))",
      "(s / serve-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sir\"\n                     :op2 \"Philip\"\n                     :op3 \"Carter\")))",
      "(s / serve-01\n   :duration (s2 / spell\n                 :quant 3))",
      "(s / serve-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sir\"\n                     :op2 \"Philip\"\n                     :op3 \"Carter\"))\n   :ARG2 (t / team\n            :name (n2 / name\n                      :op1 \"Everton\")))",
      "(s / serve-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sir\"\n                     :op2 \"Philip\"\n                     :op3 \"Carter\"))\n   :duration (s2 / spell\n                 :quant 3))",
      "(s / serve-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sir\"\n                     :op2 \"Philip\"\n                     :op3 \"Carter\"))\n   :ARG2 (t / team\n            :name (n2 / name\n                      :op1 \"Everton\"))\n   :duration (s2 / spell\n                 :quant 3))",
      "(p / pay\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Bill\"\n                      :op2 \"Kenwright\")))",
      "(p / pay\n   :ARG0 (p2 / person\n             :ARG0 (h / have-org-role-91\n                      :ARG2 (c / chairman))))",
      "(p2 / person\n    :name (n / name\n             :op1 \"Bill\"\n             :op2 \"Kenwright\")\n    :ARG0 (h / have-org-role-91\n             :ARG1 (t / team\n                      :name (n2 / name\n                                :op1 \"Everton\"))))",
      "(p2 / person\n    :name (n / name\n             :op1 \"Bill\"\n             :op2 \"Kenwright\")\n    :ARG0 (h / have-org-role-91\n             :ARG2 (c / chairman)))",
      "(h / have-org-role-91\n   :ARG1 (t / team\n            :name (n2 / name\n                      :op1 \"Everton\"))\n   :ARG2 (c / chairman))"
    ],
    "smus": [
      "Sir Philip Carter died.",
      "Sir Philip Carter died at his home.",
      "Sir Philip Carter died Thursday.",
      "After Sir Philip Carter was ill.",
      "After a short illness.",
      "Sir Philip Carter served.",
      "served for three spells.",
      "Sir Philip Carter served at Everton.",
      "Sir Philip Carter served three spells.",
      "Sir Philip Carter served for three spells at Everton.",
      "Bill Kenwright pays.",
      "The chairman pays.",
      "Everton's Bill Kenwright",
      "Chairman Bill Kenwright",
      "Everton's chairman"
    ]
  },
  {
    "instance_id": "realsumm-50",
    "summary": "Border collies Ace and Holly were caught on camera performing a gravity - defying feat together . The two pooches stood up on The two pooches hind legs while balancing on The two pooches owner and trainer Dai Aoki . The two pooches have appeared in a number of videos showing off The two pooches tricks .",
    "summary_trees": [
      "# ::snt Border collies Ace and Holly were caught on camera performing a gravity - defying feat together .\n(c / catch-03\n      :ARG1 (a / and\n            :op1 (d / dog\n                  :name (n / name\n                        :op1 \"Ace\"))\n            :op2 (d2 / dog\n                  :name (n2 / name\n                        :op1 \"Holly\"))\n            :mod (b / border))\n      :ARG2 (p / perform-01\n            :ARG0 a\n            :ARG1 (f / feat\n                  :manner-of (d3 / defy-01\n                        :ARG0 a\n                        :ARG1 (g / gravity)))\n            :manner (t / together))\n      :medium (c2 / camera))",
      "# ::snt The two pooches stood up on The two pooches hind legs while balancing on The two pooches owner and trainer Dai Aoki .\n(s / stand-up-07\n      :ARG1 (p / pooches\n            :quant 2\n            :part (l / leg\n                  :mod (h / hind)\n                  :prep-on-of s))\n      :time (b / balance-01\n            :ARG1 p\n            :prep-on (p2 / person\n                  :name (n / name\n                        :op1 \"Dai\"\n                        :op2 \"Aoki\")\n                  :ARG0-of (o / own-01\n                        :ARG1 p)\n                  :ARG0-of (t / train-01))))",
      "# ::snt The two pooches have appeared in a number of videos showing off The two pooches tricks .\n(a / appear-01\n      :ARG1 (p / pooch\n            :quant 2)\n      :medium (v / video\n            :quant (n / number)\n            :ARG0-of (s / show-off-03\n                  :ARG1 (t / trick-01\n                        :ARG0 p))))"
    ],
    "tree": [
      "(c / catch-03\n   :ARG1 (d / dog\n            :name (n / name\n                     :op1 \"Ace\"))\n   :ARG2 (p / perform-01\n            :ARG1 (f / feat\n                     :manner (d3 / defy-01\n                                 :ARG1 (g / gravity)))))",
      "(c / catch-03\n   :ARG1 (d2 / dog\n             :name (n2 / name\n                       :op1 \"Holly\"))\n   :ARG2 (p / perform-01\n            :ARG1 (f / feat\n                     :manner (d3 / defy-01\n                                 :ARG1 (g / gravity)))))",
      "(c / catch-03\n   :ARG2 (p / perform-01\n            :ARG1 (f / feat\n                     :manner (d3 / defy-01\n                                 :ARG1 (g / gravity))))\n   :medium (c2 / camera))",
      "(a / and\n   :op1 (d / dog\n           :name (n / name\n                    :op1 \"Ace\"))\n   :op2 (d2 / dog\n            :name (n2 / name\n                      :op1 \"Holly\")))",
      "(p / perform-01\n   :ARG1 (f / feat\n            :manner (d3 / defy-01\n                        :ARG1 (g / gravity)))\n   :manner (t / together))",
      "(s / stand-up-07\n   :ARG1 (p / pooches\n            :quant 2))",
      "(s / stand-up-07\n   :ARG1 (p / pooches\n            :part (l / leg\n                     :mod (h / hind))))",
      "(s / stand-up-07\n   :ARG1 (p / pooches\n            :quant 2)\n   :time (b / balance-01\n            :ARG1 p))",
      "(s / stand-up-07\n   :ARG1 (p / pooches\n            :quant 2)\n   :time (b / balance-01\n            :prep-on (p2 / person\n                         :name (n / name\n                                  :op1 \"Dai\"\n                                  :op2 \"Aoki\"))))",
      "(s / stand-up-07\n   :ARG1 (p / pooches\n            :part (l / leg\n                     :mod (h / hind)))\n   :time (b / balance-01\n            :prep-on (p2 / person\n                         :name (n / name\n                                  :op1 \"Dai\"\n                                  :op2 \"Aoki\"))))",
      "(a / appear-01\n   :ARG1 (p / pooch\n            :quant 2))",
      "(a / appear-01\n   :medium (v / video\n              :quant (n / number)))",
      "(a / appear-01\n   :medium (v / video\n              :ARG0 (s / show-off-03\n                       :ARG1 (t / trick-01\n                                :ARG0 (p / pooch)))))",
      "(a / appear-01\n   :ARG1 (p / pooch\n            :quant 2)\n   :medium (v / video\n              :quant (n / number)))",
      "(a / appear-01\n   :ARG1 (p / pooch\n            :quant 2)\n   :medium (v / video\n              :ARG0 (s / show-off-03\n                       :ARG1 (t / trick-01\n                                :ARG0 p))))"
    ],
    "smus": [
      "Ace was caught performing a feat of defying gravity.",
      "Holly was caught performing a feat of defying gravity.",
      "Performing a feat of defying gravity was caught on camera.",
      "Ace and Holly.",
      "performing the feat of defying gravity together.",
      "Two pooches stood up.",
      "Pooches on hind legs stood up.",
      "Two pooches stood up while balancing.",
      "Two pooches stood up while balancing on Dai Aoki.",
      "Pooches on hind legs stood up while balancing on Dai Aoki.",
      "Two pooch appeared.",
      "A number of videos have appeared.",
      "Videos showing off pooch tricks have appeared.",
      "Two pooch appeared in a number of videos.",
      "Two pooch appeared in videos showing off their tricks."
    ]
  },
  {
    "instance_id": "realsumm-51",
    "summary": "Dayna Dobias , 19 , has created a video in which Dayna Dobias , 19 dances despite having a disability that makes it difficult for Dayna Dobias , 19 to walk . Dayna Dobias , 19 loves TV , film and fashion , and says Dayna Dobias , 19 \u2019s not happy with how people with disabilities are represented . Dayna Dobias , 19 has created several videos during the past year aimed at changing stereotypes .",
    "summary_trees": [
      "# ::snt Dayna Dobias , 19 , has created a video in which Dayna Dobias , 19 dances despite having a disability that makes it difficult for Dayna Dobias , 19 to walk .\n(c / create-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Dayna\"\n                  :op2 \"Dobias\")\n            :age (t / temporal-quantity\n                  :quant 19\n                  :unit (y / year)))\n      :ARG1 (v / video\n            :medium-of (d / dance-01\n                  :ARG0 p\n                  :concession (h / have-03\n                        :ARG0 p\n                        :ARG1 (d2 / disability\n                              :ARG0-of (m / make-02\n                                    :ARG1 (d3 / difficult\n                                          :domain (w / walk-01\n                                                :ARG0 p))))))))",
      "# ::snt Dayna Dobias , 19 loves TV , film and fashion , and says Dayna Dobias , 19 \u2019s not happy with how people with disabilities are represented .\n(a / and\n      :op1 (l / love-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Dayna\"\n                        :op2 \"Dobias\")\n                  :age (t / temporal-quantity\n                        :quant 19\n                        :unit (y / year)))\n            :ARG1 (a2 / and\n                  :op1 (t2 / television)\n                  :op2 (f / film)\n                  :op3 (f2 / fashion)))\n      :op2 (s / say-01\n            :ARG0 p\n            :ARG1 (h / happy-01\n                  :polarity -\n                  :ARG0 (t3 / thing\n                        :ARG2-of (r / represent-01\n                              :ARG1 (p2 / person\n                                    :ARG0-of (h2 / have-03\n                                          :ARG1 (d / disability)))))\n                  :ARG1 p)))",
      "# ::snt Dayna Dobias , 19 has created several videos during the past year aimed at changing stereotypes .\n(c / create-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Dayna\"\n                  :op2 \"Dobias\")\n            :age (t / temporal-quantity\n                  :quant 19\n                  :unit (y / year)))\n      :ARG1 (v / video\n            :quant (s / several)\n            :ARG1-of (a / aim-02\n                  :ARG2 (c2 / change-01\n                        :ARG1 (s2 / stereotype-01))))\n      :time (b / before\n            :op1 (n2 / now)\n            :duration (t2 / temporal-quantity\n                  :quant 1\n                  :unit (y2 / year))))"
    ],
    "tree": [
      "(c / create-01\n   :ARG0 (p / person\n            :age (t / temporal-quantity\n                    :quant 19))\n   :ARG1 (v / video\n            :medium (d / dance-01\n                       :ARG0 p)))",
      "(d / dance-01\n   :concession (h / have-03\n                  :ARG1 (d2 / disability\n                            :ARG0 (m / make-02\n                                     :ARG1 (d3 / difficult\n                                               :domain (w / walk-01\n                                                          :ARG0 (p / person :name (n / name :op1 \"Dayna\" :op2 \"Dobias\")))))))))",
      "(h / have-03\n   :ARG1 (d2 / disability\n             :ARG0 (m / make-02\n                      :ARG1 (d3 / difficult\n                                :domain (w / walk-01\n                                           :ARG0 (p / person :name (n / name :op1 \"Dayna\" :op2 \"Dobias\"))))))))",
      "(d2 / disability\n    :ARG0 (m / make-02\n             :ARG1 (d3 / difficult\n                       :domain (w / walk-01\n                                  :ARG0 (p / person :name (n / name :op1 \"Dayna\" :op2 \"Dobias\")))))))",
      "(m / make-02\n   :ARG1 (d3 / difficult\n             :domain (w / walk-01\n                        :ARG0 (p / person :name (n / name :op1 \"Dayna\" :op2 \"Dobias\"))))))",
      "(l / love-01\n   :ARG0 (p / person\n            :name (n / name)))",
      "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Dayna\" :op2 \"Dobias\")))\n   :ARG1 (h / happy-01\n            :polarity -\n            :ARG0 (t3 / thing\n                      :ARG2 (r / represent-01\n                               :ARG1 (p2 / person\n                                         :ARG0 (h2 / have-03\n                                                   :ARG1 (d / disability)))))\n            :ARG1 p))",
      "(c / create-01\n   :ARG1 (v / video\n            :quant (s / several)))",
      "(c / create-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dayna\"\n                     :op2 \"Dobias\"))\n   :ARG1 (v / video\n            :ARG1 (a / aim-02\n                     :ARG2 (c2 / change-01\n                               :ARG1 (s2 / stereotype-01)))))",
      "(c / create-01\n   :ARG1 (v / video\n            :ARG1 (a / aim-02\n                     :ARG2 (c2 / change-01\n                               :ARG1 (s2 / stereotype-01))))\n   :time (b / before\n            :duration (t2 / temporal-quantity\n                          :unit (y2 / year))))",
      "(c / create-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dayna\"\n                     :op2 \"Dobias\"))\n   :ARG1 (v / video\n            :quant (s / several))\n   :time (b / before\n            :duration (t2 / temporal-quantity\n                          :unit (y2 / year))))",
      "(c / create-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dayna\"\n                     :op2 \"Dobias\"))\n   :ARG1 (v / video\n            :ARG1 (a / aim-02\n                     :ARG2 (c2 / change-01\n                               :ARG1 (s2 / stereotype-01))))\n   :time (b / before\n            :duration (t2 / temporal-quantity\n                          :unit (y2 / year))))"
    ],
    "smus": [
      "A 19-year-old created a video of her dancing.",
      "Dances despite the disability that makes Dayna Dobias difficult to walk.",
      "has a disability that makes it difficult for Dayna Dobias to walk.",
      "A disability that makes Dayna Dobias difficult to walk.",
      "Makes Dayna Dobias difficult to walk.",
      "Loves.",
      "Dayna Dobias says she is not happy with what people with disabilities are represented to.",
      "Several videos have been created.",
      "Dayna Dobias has created videos aimed at changing stereotypes.",
      "Videos aimed at changing stereotypes were created over the past year.",
      "Several videos were created by Dayna Dobias over the past year.",
      "Dayna Dobias had created videos over the past year aimed at changing stereotypes."
    ]
  },
  {
    "instance_id": "realsumm-52",
    "summary": "Manchester United take on Manchester City on Sunday . Match will begin at 4 pm local time at Manchester United Old Trafford home . Police have no objections to kick - off being so late in the afternoon . Last late afternoon weekend kick - off in the Manchester derby saw 34 fans arrested at Wembley in 2011 FA Cup semi - final .",
    "summary_trees": [
      "# ::snt Manchester United take on Manchester City on Sunday .\n(t / take-on-09\n      :ARG0 (t2 / team\n            :name (n / name\n                  :op1 \"Manchester\"\n                  :op2 \"United\"))\n      :ARG1 (t3 / team\n            :name (n2 / name\n                  :op1 \"Manchester\"\n                  :op2 \"City\"))\n      :time (d / date-entity\n            :weekday (s / sunday)))",
      "# ::snt Match will begin at 4 pm local time at Manchester United Old Trafford home .\n(b / begin-01\n      :ARG1 (m / match-03)\n      :location (h / home\n            :mod (t / team\n                  :name (n / name\n                        :op1 \"Manchester\"\n                        :op2 \"United\"))\n            :mod (s / sports-facility\n                  :name n\n                  :op1 \"Old\"\n                  :op2 \" Trafford\"))\n      :time (d / date-entity\n            :time \"16:00\"\n            :timezone (l / local-02)))",
      "# ::snt Police have no objections to kick - off being so late in the afternoon .\n(o / object-01\n      :polarity -\n      :ARG0 (p / police)\n      :ARG1 (k / kick-off-04\n            :time (l / late\n                  :op1 (d / date-entity\n                        :dayperiod (a / afternoon))\n                  :degree (s / so))))",
      "# ::snt Last late afternoon weekend kick - off in the Manchester derby saw 34 fans arrested at Wembley in 2011 FA Cup semi - final .\n(s / see-01\n      :ARG0 (k / kick-off-04\n            :ARG1 (d / derby\n                  :mod (c / city\n                        :name (n / name\n                              :op1 \"Manchester\")))\n            :time (w / weekend)\n            :time (l / late\n                  :op1 (d2 / date-entity\n                        :dayperiod (a / afternoon)))\n            :mod (l2 / last))\n      :ARG1 (a2 / arrest-01\n            :ARG1 (f / fan\n                  :quant 34)\n            :location (s2 / sports-facility\n                  :name (n2 / name\n                        :op1 \"Wembley\"))\n            :time (f2 / final\n                  :mod (s3 / semi)\n                  :subevent-of (g / game\n                        :name (n3 / name\n                              :op1 \"FA\"\n                              :op2 \"Cup\")\n                        :time (d3 / date-entity\n                              :year 2011)))))"
    ],
    "tree": [
      "(t / take-on-09\n   :ARG1 (t3 / team\n             :name (n2 / name\n                       :op1 \"Manchester\"\n                       :op2 \"City\")))",
      "(t / take-on-09\n   :time (d / date-entity\n            :weekday (s / sunday)))",
      "(t / take-on-09\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Manchester\"\n                      :op2 \"United\"))\n   :ARG1 (t3 / team\n             :name (n2 / name\n                       :op1 \"Manchester\"\n                       :op2 \"City\")))",
      "(t / take-on-09\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Manchester\"\n                      :op2 \"United\"))\n   :time (d / date-entity\n            :weekday (s / sunday)))",
      "(t / take-on-09\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Manchester\"\n                      :op2 \"United\"))\n   :ARG1 (t3 / team\n             :name (n2 / name\n                       :op1 \"Manchester\"\n                       :op2 \"City\"))\n   :time (d / date-entity\n            :weekday (s / sunday)))",
      "(b / begin-01\n   :location (h / home\n                :mod (s / sports-facility\n                        :name (n / name\n                                 :op1 \"Manchester\"\n                                 :op2 \"United\"))))",
      "(b / begin-01\n   :location (h / home\n                :mod (s / sports-facility\n                        :op2 \" Trafford\")))",
      "(b / begin-01\n   :ARG1 (m / match-03)\n   :location (h / home\n                :mod (s / sports-facility\n                        :op2 \" Trafford\")))",
      "(b / begin-01\n   :ARG1 (m / match-03)\n   :time (d / date-entity\n            :timezone (l / local-02)))",
      "(b / begin-01\n   :ARG1 (m / match-03)\n   :location (h / home\n                :mod (s / sports-facility\n                        :op2 \" Trafford\"))\n   :time (d / date-entity\n            :timezone (l / local-02)))",
      "(o / object-01\n   :ARG1 (k / kick-off-04\n            :time (l / late\n                     :degree (s / so))))",
      "(k / kick-off-04\n   :time (l / late\n            :op1 (d / date-entity\n                    :dayperiod (a / afternoon))))",
      "(k / kick-off-04\n   :time (l / late\n            :degree (s / so)))",
      "(l / late\n   :op1 (d / date-entity\n           :dayperiod (a / afternoon)))",
      "(l / late\n   :op1 (d / date-entity\n           :dayperiod (a / afternoon))\n   :degree (s / so))",
      "(s / see-01\n   :ARG0 (k / kick-off-04\n            :time (l / late\n                     :op1 (d2 / date-entity\n                              :dayperiod (a / afternoon))))\n   :ARG1 (a2 / arrest-01\n             :ARG1 (f / fan\n                      :quant 34)))",
      "(s / see-01\n   :ARG0 (k / kick-off-04\n            :mod (l2 / last))\n   :ARG1 (a2 / arrest-01\n             :ARG1 (f / fan\n                      :quant 34)))",
      "(a2 / arrest-01\n    :ARG1 (f / fan\n             :quant 34))",
      "(a2 / arrest-01\n    :ARG1 (f / fan\n             :quant 34)\n    :time (f2 / final\n              :mod (s3 / semi)))",
      "(f2 / final\n    :mod (s3 / semi)\n    :subevent (g / game\n                 :name (n3 / name\n                           :op1 \"FA\"\n                           :op2 \"Cup\")))"
    ],
    "smus": [
      "Take on Manchester City",
      "Take on Sunday.",
      "Manchester United will take on Manchester City.",
      "Manchester United will take on on Sunday.",
      "Manchester United will take on Manchester City on Sunday.",
      "Beginning at Manchester United.",
      "Begin at Trafford home.",
      "The match will begin at Trafford home.",
      "The match will begin at local time.",
      "The match will begin at Trafford home at the local time.",
      "Objection to kick off so late.",
      "Kick off late in the afternoon.",
      "Kick off so late.",
      "late afternoon",
      "So late in the afternoon.",
      "The late afternoon kick off saw 34 fans arrested.",
      "Last kick off saw 34 fans arrested.",
      "34 fans were arrested.",
      "34 fans were arrested in the semi-finals.",
      "Semi-final in the FA Cup"
    ]
  },
  {
    "instance_id": "realsumm-53",
    "summary": "Kamal criticised umpires ' decision to award controversial no - ball against Rohit Sharma in India 's World Cup match with Bangladesh . The Bangladeshi president alleged India 's had used India 's influence in the ICC . Governing body asked The Bangladeshi president to withdraw criticised or apologise . But Kamal confirmed Kamal intention to step down .",
    "summary_trees": [
      "# ::snt Kamal criticised umpires ' decision to award controversial no - ball against Rohit Sharma in India 's World Cup match with Bangladesh .\n(c / criticize-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Kamal\"))\n      :ARG1 (d / decide-01\n            :ARG0 (p2 / person\n                  :ARG0-of (h / have-org-role-91\n                        :ARG3 (u / umpire)))\n            :ARG1 (a / award-01\n                  :ARG0 p2\n                  :ARG1 (b / ball\n                        :mod (c2 / controversy))\n                  :ARG2 (p3 / person\n                        :name (n2 / name\n                              :op1 \"Rohit\"\n                              :op2 \"Sharma\"))\n                  :time (m / match-03\n                        :ARG0 (c3 / country\n                              :name (n3 / name\n                                    :op1 \"India\"))\n                        :ARG1 (c4 / country\n                              :name (n4 / name\n                                    :op1 \"Bangladesh\"))\n                        :subevent-of (g / game\n                              :name (n5 / name\n                                    :op1 \"World\"\n                                    :op2 \"Cup\"))))))",
      "# ::snt The Bangladeshi president alleged India 's had used India 's influence in the ICC .\n(a / allege-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (c / country\n                        :name (n / name\n                              :op1 \"Bangladesh\"))\n                  :ARG2 (p2 / president)))\n      :ARG1 (u / use-01\n            :ARG0 (c2 / country\n                  :name (n2 / name\n                        :op1 \"India\"))\n            :ARG1 (ii / influence-01\n                  :ARG0 c2\n                  :ARG1 (o / organization\n                        :name (n3 / name\n                              :op1 \"ICC\")))))",
      "# ::snt Governing body asked The Bangladeshi president to withdraw criticised or apologise .\n(a / ask-02\n      :ARG0 (b / body\n            :ARG0-of (g / govern-01))\n      :ARG1 (o / or\n            :op1 (w / withdraw-01\n                  :ARG0 (p / person\n                        :ARG0-of (h / have-org-role-91\n                              :ARG1 (c / country\n                                    :name (n / name\n                                          :op1 \"Bangladesh\"))\n                              :ARG2 (p2 / president)))\n                  :ARG1 p\n                  :ARG2 (c2 / criticize-01\n                        :ARG1 p))\n            :op2 (a2 / apologize-01\n                  :ARG0 p))\n      :ARG2 p)",
      "# ::snt But Kamal confirmed Kamal intention to step down .\n(c / contrast-01\n      :ARG2 (c2 / confirm-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Kamal\"))\n            :ARG1 (ii / intend-01\n                  :ARG0 p\n                  :ARG1 (s / step-down-04\n                        :ARG0 p))))"
    ],
    "tree": [
      "(c / criticize-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kamal\")))",
      "(c / criticize-01\n   :ARG1 (d / decide-01\n            :ARG0 (p2 / person\n                      :ARG0 (h / have-org-role-91\n                               :ARG3 (u / umpire)))))",
      "(c / criticize-01\n   :ARG1 (d / decide-01\n            :ARG1 (a / award-01\n                     :time (m / match-03\n                              :subevent (g / game\n                                           :name (n5 / name\n                                                     :op1 \"World\"\n                                                     :op2 \"Cup\"))))))",
      "(c / criticize-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kamal\"))\n   :ARG1 (d / decide-01\n            :ARG0 (p2 / person\n                      :ARG0 (h / have-org-role-91\n                               :ARG3 (u / umpire)))))",
      "(c / criticize-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kamal\"))\n   :ARG1 (d / decide-01\n            :ARG1 (a / award-01\n                     :ARG1 (b / ball\n                              :mod (c2 / controversy)))))",
      "(a / allege-01\n   :ARG1 (u / use-01\n            :ARG1 (ii / influence-01\n                      :ARG0 (c2 / country :name (n2 / name :op1 \"India\")))))",
      "(a / allege-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (p2 / president)))\n   :ARG1 (u / use-01\n            :ARG0 (c2 / country\n                      :name (n2 / name\n                                :op1 \"India\"))))",
      "(a / allege-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (p2 / president)))\n   :ARG1 (u / use-01\n            :ARG1 (ii / influence-01\n                      :ARG0 (c2 / country :name (n2 / name :op1 \"India\")))))",
      "(a / allege-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (p2 / president)))\n   :ARG1 (u / use-01\n            :ARG1 (ii / influence-01\n                      :ARG1 (o / organization\n                               :name (n3 / name\n                                         :op1 \"ICC\")))))",
      "(h / have-org-role-91\n   :ARG1 (c / country\n            :name (n / name\n                     :op1 \"Bangladesh\"))\n   :ARG2 (p2 / president))",
      "(a / ask-02\n   :ARG1 (o / or\n            :op2 (a2 / apologize-01\n                     :ARG0 (p / person\n                              :ARG0 (h / have-org-role-91\n                                       :ARG1 (c / country\n                                                :name (n / name\n                                                         :op1 \"Bangladesh\")))))))",
      "(o / or\n   :op2 (a2 / apologize-01\n            :ARG0 (p / person\n                     :ARG0 (h / have-org-role-91\n                              :ARG1 (c / country\n                                       :name (n / name\n                                                :op1 \"Bangladesh\"))))))",
      "(o / or\n   :op1 (w / withdraw-01\n           :ARG2 (c2 / criticize-01\n                     :ARG1 (p / person\n                              :ARG0 (h / have-org-role-91\n                                       :ARG2 (p2 / president)))))\n   :op2 (a2 / apologize-01\n            :ARG0 p))",
      "(p / person\n   :ARG0 (h / have-org-role-91\n            :ARG2 (p2 / president)))",
      "(h / have-org-role-91\n   :ARG1 (c / country\n            :name (n / name\n                     :op1 \"Bangladesh\"))\n   :ARG2 (p2 / president))",
      "(c / contrast-01\n   :ARG2 (c2 / confirm-01\n             :ARG1 (ii / intend-01\n                       :ARG0 (p / person :name (n / name :op1 \"Kamal\")))))",
      "(c / contrast-01\n   :ARG2 (c2 / confirm-01\n             :ARG1 (ii / intend-01\n                       :ARG1 (s / step-down-04\n                                :ARG0 (p / person :name (n / name :op1 \"Kamal\"))))))",
      "(c2 / confirm-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Kamal\"))\n    :ARG1 (ii / intend-01\n              :ARG0 p))",
      "(c2 / confirm-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Kamal\"))\n    :ARG1 (ii / intend-01\n              :ARG1 (s / step-down-04\n                       :ARG0 p)))",
      "(ii / intend-01\n    :ARG1 (s / step-down-04\n             :ARG0 (p / person :name (n / name :op1 \"Kamal\"))))"
    ],
    "smus": [
      "Kamal criticized.",
      "Criticized the decision by the umpires.",
      "Criticized the decision to award during the World Cup match.",
      "Kamal criticized the decision of the umpires.",
      "Kamal criticized the decision to award the controversial ball.",
      "India's influence was alleged to have been used.",
      "The president alleged India had used it.",
      "The president alleged that Indian influence had been used.",
      "The president alleged that influence on the ICC was used.",
      "Bangladesh's president.",
      "asked Bangladeshis to apologize or",
      "or a bangladeshi apologize.",
      "withdraw criticism of the president or apologize.",
      "the president",
      "Bangladesh's president",
      "But Kamal's intention was confirmed.",
      "But confirmed the intention of Kamal to step down.",
      "Kamal confirmed his intention.",
      "Kamal confirmed his intention to step down.",
      "Kamal's intention was to step down."
    ]
  },
  {
    "instance_id": "realsumm-54",
    "summary": "Floyd Mayweather and Manny Pacquiao face off in Las Vegas on May 2 . Joe Calzaghe believes Floyd Mayweather unbeaten record is a burden . Despite believes , Joe Calzaghe thinks Floyd Mayweather will beat Manny Pacquiao . READ : Ricky Hatton gives Ricky Hatton prediction to Jeff Powell ahead of the fight . READ : Floyd Mayweather vs Manny Pacquiao tickets FINALLY go on sale .",
    "summary_trees": [
      "# ::snt Floyd Mayweather and Manny Pacquiao face off in Las Vegas on May 2 .\n(f / face-off-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Floyd\"\n                  :op2 \"Mayweather\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Manny\"\n                  :op2 \"Pacquiao\"))\n      :location (c / city\n            :name (n3 / name\n                  :op1 \"Las\"\n                  :op2 \"Vegas\"))\n      :time (d / date-entity\n            :day 2\n            :month 5))",
      "# ::snt Joe Calzaghe believes Floyd Mayweather unbeaten record is a burden .\n(b / believe-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Joe\"\n                  :op2 \"Calzaghe\"))\n      :ARG1 (b2 / burden-01\n            :ARG1 (r / record\n                  :poss (p2 / person\n                        :name (n2 / name\n                              :op1 \"Floyd\"\n                              :op2 \"Mayweather\"))\n                  :ARG1-of (b3 / beat-03\n                        :polarity -))))",
      "# ::snt Despite believes , Joe Calzaghe thinks Floyd Mayweather will beat Manny Pacquiao .\n(h / have-concession-91\n      :ARG1 (t / think-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Joe\"\n                        :op2 \"Calzaghe\"))\n            :ARG1 (b / beat-03\n                  :ARG0 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Floyd\"\n                              :op2 \"Mayweather\"))\n                  :ARG1 (p3 / person\n                        :name (n3 / name\n                              :op1 \"Manny\"\n                              :op2 \"Pacquiao\"))))\n      :ARG2 (b2 / believe-01))",
      "# ::snt READ :\n(r / read-01\n      :ARG1 (ii / it))",
      "# ::snt Ricky Hatton gives Ricky Hatton prediction to Jeff Powell ahead of the fight .\n(p / predict-01\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Ricky\"\n                  :op2 \"Hatton\"))\n      :ARG2 (p3 / person\n            :name (n2 / name\n                  :op1 \"Jeff\"\n                  :op2 \"Powell\"))\n      :time (a / ahead\n            :op1 (f / fight-01)))",
      "# ::snt READ :\n(r / read-01\n      :ARG1 (ii / it))",
      "# ::snt Floyd Mayweather vs Manny Pacquiao tickets FINALLY go on sale .\n(s / sell-01\n      :ARG1 (t / ticket\n            :mod (o / oppose-01\n                  :ARG0 (p / person\n                        :name (n / name\n                              :op1 \"Floyd\"\n                              :op2 \"Mayweather\"))\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Manny\"\n                              :op2 \"Pacquiao\"))))\n      :time (f / final))"
    ],
    "tree": [
      "(f / face-off-02\n   :location (c / city\n                :name (n3 / name\n                          :op1 \"Las\"\n                          :op2 \"Vegas\")))",
      "(f / face-off-02\n   :time (d / date-entity\n            :day 2))",
      "(f / face-off-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Floyd\"\n                     :op2 \"Mayweather\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Manny\"\n                       :op2 \"Pacquiao\")))",
      "(f / face-off-02\n   :location (c / city\n                :name (n3 / name\n                          :op1 \"Las\"\n                          :op2 \"Vegas\"))\n   :time (d / date-entity\n            :day 2))",
      "(f / face-off-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Floyd\"\n                     :op2 \"Mayweather\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Manny\"\n                       :op2 \"Pacquiao\"))\n   :location (c / city\n                :name (n3 / name\n                          :op1 \"Las\"\n                          :op2 \"Vegas\")))",
      "(b / believe-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Joe\"\n                     :op2 \"Calzaghe\"))\n   :ARG1 (b2 / burden-01\n             :ARG1 (r / record\n                      :poss (p2 / person\n                                :name (n2 / name\n                                          :op1 \"Floyd\"\n                                          :op2 \"Mayweather\")))))",
      "(p / person\n   :name (n / name\n            :op1 \"Joe\"\n            :op2 \"Calzaghe\"))",
      "(b2 / burden-01\n    :ARG1 (r / record\n             :ARG1 (b3 / beat-03\n                       :polarity -)))",
      "(r / record\n   :ARG1 (b3 / beat-03\n             :polarity -))",
      "(p2 / person\n    :name (n2 / name\n              :op1 \"Floyd\"\n              :op2 \"Mayweather\"))",
      "(h / have-concession-91\n   :ARG1 (t / think-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Joe\"\n                              :op2 \"Calzaghe\"))))",
      "(h / have-concession-91\n   :ARG1 (t / think-01\n            :ARG1 (b / beat-03\n                     :ARG0 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Floyd\"\n                                         :op2 \"Mayweather\")))))",
      "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Joe\"\n                     :op2 \"Calzaghe\")))",
      "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Joe\"\n                     :op2 \"Calzaghe\"))\n   :ARG1 (b / beat-03\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Floyd\"\n                                :op2 \"Mayweather\"))))",
      "(p / person\n   :name (n / name\n            :op1 \"Joe\"\n            :op2 \"Calzaghe\"))",
      "(r / read-01\n   :ARG1 (ii / it))",
      "(p / predict-01\n   :time (a / ahead\n            :op1 (f / fight-01)))",
      "(p / predict-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Ricky\"\n                      :op2 \"Hatton\"))\n   :ARG2 (p3 / person\n             :name (n2 / name\n                       :op1 \"Jeff\"\n                       :op2 \"Powell\")))",
      "(p / predict-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Ricky\"\n                      :op2 \"Hatton\"))\n   :ARG2 (p3 / person\n             :name (n2 / name\n                       :op1 \"Jeff\"\n                       :op2 \"Powell\"))\n   :time (a / ahead\n            :op1 (f / fight-01)))",
      "(p2 / person\n    :name (n / name\n             :op1 \"Ricky\"\n             :op2 \"Hatton\"))",
      "(p3 / person\n    :name (n2 / name\n              :op1 \"Jeff\"\n              :op2 \"Powell\"))",
      "(r / read-01\n   :ARG1 (ii / it))",
      "(t / ticket\n   :mod (o / oppose-01\n           :ARG0 (p / person\n                    :name (n / name\n                             :op1 \"Floyd\"\n                             :op2 \"Mayweather\"))))",
      "(t / ticket\n   :mod (o / oppose-01\n           :ARG1 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Manny\"\n                               :op2 \"Pacquiao\"))))",
      "(o / oppose-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Manny\"\n                       :op2 \"Pacquiao\")))",
      "(o / oppose-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Floyd\"\n                     :op2 \"Mayweather\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Manny\"\n                       :op2 \"Pacquiao\")))",
      "(p / person\n   :name (n / name\n            :op1 \"Floyd\"\n            :op2 \"Mayweather\"))"
    ],
    "smus": [
      "Face off in Las Vegas.",
      "Face off on the 2nd.",
      "Floyd Mayweather and Manny Pacquiao face off.",
      "On the 2nd, face off in Las Vegas.",
      "Floyd Mayweather and Manny Pacquiao face off in Las Vegas.",
      "Joe Calzaghe believes Floyd Mayweather's record is a burden.",
      "Joe Calzaghe",
      "The burden is on a unbeaten record.",
      "A record that hasn't been beat.",
      "Floyd Mayweather",
      "But Joe Calzaghe thinks...",
      "Though thinks Floyd Mayweather will beat.",
      "Joe Calzaghe thinks.",
      "Joe Calzaghe thinks Floyd Mayweather will beat him.",
      "Joe Calzaghe",
      "It was read.",
      "The prediction ahead of the fight.",
      "Ricky Hatton's prediction for Jeff Powell:",
      "Ricky Hatton predicts Jeff Powell ahead of the fight.",
      "Ricky Hatton",
      "Jeff Powell",
      "It was read.",
      "There are tickets against Floyd Mayweather.",
      "There are tickets against Manny Pacquiao.",
      "against Manny Pacquiao.",
      "Floyd Mayweather is against Manny Pacquiao.",
      "Floyd Mayweather"
    ]
  },
  {
    "instance_id": "realsumm-55",
    "summary": "Winchester Council in Hampshire claimed annual clean - up hit by new rules . But the Health and Safety Executive denied tightening rules and added that councils were \u2018 over - interpreting \u2019 legislation . Poet Laureate Sir Andrew Motion accused town hall bosses and Highways Agency of ruining the countryside by failing to remove rubbish .",
    "summary_trees": [
      "# ::snt Winchester Council in Hampshire claimed annual clean - up hit by new rules .\n(c / claim-01\n      :ARG0 (c2 / council\n            :mod (c3 / city\n                  :name (n / name\n                        :op1 \"Winchester\")\n                  :location (c4 / county\n                        :name (n2 / name\n                              :op1 \"Hampshire\"))))\n      :ARG1 (h / hit-01\n            :ARG0 (r / rule\n                  :ARG1-of (n3 / new-01))\n            :ARG1 c2\n            :ARG2 (c5 / clean-up-02\n                  :frequency (r2 / rate-entity-91\n                        :ARG3 (t / temporal-quantity\n                              :quant 1\n                              :unit (y / year))))))",
      "# ::snt But the Health and Safety Executive denied tightening rules and added that councils were \u2018 over - interpreting \u2019 legislation .\n(c / contrast-01\n      :ARG2 (a / and\n            :op1 (d / deny-01\n                  :ARG0 (g / government-organization\n                        :name (n / name\n                              :op1 \"Health\"\n                              :op2 \"and\"\n                              :op3 \"Safety\"\n                              :op4 \"Executive\"))\n                  :ARG1 (t / tighten-01\n                        :ARG0 g\n                        :ARG1 (r / rule)))\n            :op2 (a2 / add-01\n                  :ARG0 g\n                  :ARG1 (ii / interpret-01\n                        :ARG0 (c2 / council)\n                        :ARG1 (l / legislate-01)\n                        :ARG1-of (o / over-03)))))",
      "# ::snt Poet Laureate Sir Andrew Motion accused town hall bosses and Highways Agency of ruining the countryside by failing to remove rubbish .\n(a / accuse-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Sir\"\n                  :op2 \"Andrew\"\n                  :op3 \"Motion\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (l / laureate\n                        :mod (p2 / poet))))\n      :ARG1 (a2 / and\n            :op1 (p3 / person\n                  :ARG0-of h\n                  :ARG1 (h2 / hall\n                        :mod (t / town))\n                  :ARG2 (b / boss)))\n      :op2 (g / government-organization\n            :name (n2 / name\n                  :op1 \"Highways\"\n                  :op2 \"Agency\"))\n      :ARG2 (r / ruin-01\n            :ARG0 a2\n            :ARG1 (c / countryside)\n            :ARG3 (f / fail-01\n                  :ARG0 a2\n                  :ARG1 (r2 / remove-01\n                        :ARG0 a2\n                        :ARG1 (r3 / rubbish)))))"
    ],
    "tree": [
      "(c / claim-01\n   :ARG0 (c2 / council\n             :mod (c3 / city\n                      :name (n / name\n                               :op1 \"Winchester\"))))",
      "(c / claim-01\n   :ARG1 (h / hit-01\n            :ARG2 (c5 / clean-up-02\n                      :frequency (r2 / rate-entity-91\n                                     :ARG3 (t / temporal-quantity\n                                              :unit (y / year))))))",
      "(c / claim-01\n   :ARG0 (c2 / council\n             :mod (c3 / city\n                      :name (n / name\n                               :op1 \"Winchester\")))\n   :ARG1 (h / hit-01\n            :ARG0 (r / rule\n                     :ARG1 (n3 / new-01))))",
      "(c / claim-01\n   :ARG0 (c2 / council\n             :mod (c3 / city\n                      :name (n / name\n                               :op1 \"Winchester\")))\n   :ARG1 (h / hit-01\n            :ARG1 c2))",
      "(c / claim-01\n   :ARG0 (c2 / council\n             :mod (c3 / city\n                      :name (n / name\n                               :op1 \"Winchester\")))\n   :ARG1 (h / hit-01\n            :ARG2 (c5 / clean-up-02\n                      :frequency (r2 / rate-entity-91\n                                     :ARG3 (t / temporal-quantity\n                                              :unit (y / year))))))",
      "(c / contrast-01\n   :ARG2 (d / deny-01\n            :ARG0 (g / government-organization\n                     :name (n / name\n                              :op1 \"Health\"\n                              :op2 \"and\"\n                              :op3 \"Safety\"\n                              :op4 \"Executive\"))))",
      "(c / contrast-01\n   :ARG2 (d / deny-01\n            :ARG1 (t / tighten-01\n                     :ARG0 (g / government-organization :name (n / name :op1 \"Health\" :op2 \"and\" :op3 \"Safety\" :op4 \"Executive\")))))",
      "(d / deny-01\n   :ARG0 (g / government-organization\n            :name (n / name\n                     :op1 \"Health\"\n                     :op2 \"and\"\n                     :op3 \"Safety\"\n                     :op4 \"Executive\")))",
      "(d / deny-01\n   :ARG0 (g / government-organization\n            :name (n / name\n                     :op1 \"Health\"\n                     :op2 \"and\"\n                     :op3 \"Safety\"\n                     :op4 \"Executive\"))\n   :ARG1 (t / tighten-01\n            :ARG0 g))",
      "(d / deny-01\n   :ARG0 (g / government-organization\n            :name (n / name\n                     :op1 \"Health\"\n                     :op2 \"and\"\n                     :op3 \"Safety\"\n                     :op4 \"Executive\"))\n   :ARG1 (t / tighten-01\n            :ARG1 (r / rule)))",
      "(a / accuse-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sir\"\n                     :op2 \"Andrew\"\n                     :op3 \"Motion\")))",
      "(a / accuse-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sir\"\n                     :op2 \"Andrew\"\n                     :op3 \"Motion\"))\n   :op2 (g / government-organization\n           :name (n2 / name\n                     :op1 \"Highways\"\n                     :op2 \"Agency\")))",
      "(a / accuse-01\n   :ARG0 (p / person :name (n / name :op1 \"Sir\" :op2 \"Andrew\" :op3 \"Motion\")))\n   :op2 (g / government-organization\n           :name (n2 / name\n                     :op1 \"Highways\"\n                     :op2 \"Agency\")))",
      "(a / accuse-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sir\"\n                     :op2 \"Andrew\"\n                     :op3 \"Motion\"))\n   :ARG1 (p3 / person\n             :ARG2 (b / boss)))"
    ],
    "smus": [
      "The Winchester Council claimed.",
      "The claim was made that annual clean-ups have hit.",
      "The Winchester Council claimed the new rules had hit.",
      "The Winchester Council claimed to have been hit.",
      "The Winchester Council claimed the annual clean-up had hit.",
      "But the Health and Safety Executive denied.",
      "But the Health and Safety Executive denied tightening.",
      "The Health and Safety Executive denied.",
      "The Health and Safety Executive denied tightening.",
      "The Health and Safety Executive denied tightening the rules.",
      "Sir Andrew Motion accused.",
      "Sir Andrew Motion accused the Highways Agency.",
      "Sir Andrew Motion accused the Highway Agency.",
      "Sir Andrew Motion accused the bosses."
    ]
  },
  {
    "instance_id": "realsumm-56",
    "summary": "Simon Wood , 38 , from Oldham won Masterchef last Friday . Simon Wood , 38 , from Oldham got cooking skills by feeding culinary creations to Simon Wood , 38 , from Oldham kids . Simon Wood , 38 , from Oldham says one of Simon Wood , 38 , from Oldham favourite meals is a plain omelette .",
    "summary_trees": [
      "# ::snt Simon Wood , 38 , from Oldham won Masterchef last Friday .\n(w / win-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Simon\"\n                  :op2 \"Wood\")\n            :age (t / temporal-quantity\n                  :quant 38\n                  :unit (y / year))\n            :source (c / city\n                  :name (n2 / name\n                        :op1 \"Oldham\")))\n      :ARG1 (a / award\n            :name (n3 / name\n                  :op1 \"Masterchef\"))\n      :time (d / date-entity\n            :weekday (f / friday)\n            :mod (l / last)))",
      "# ::snt Simon Wood , 38 , from Oldham got cooking skills by feeding culinary creations to Simon Wood , 38 , from Oldham kids .\n(g / get-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Simon\"\n                  :op2 \"Wood\")\n            :age (t / temporal-quantity\n                  :quant 38\n                  :unit (y / year))\n            :source (c / city\n                  :name (n2 / name\n                        :op1 \"Oldham\")))\n      :ARG1 (s / skill\n            :topic (c2 / cook-01))\n      :manner (f / feed-01\n            :ARG0 p\n            :ARG1 (t2 / thing\n                  :ARG1-of (c3 / create-01\n                        :ARG0 (p2 / person\n                              :name (n3 / name\n                                    :op1 \"Simon\"\n                                    :op2 \"Wood\")\n                              :age (t3 / temporal-quantity\n                                    :quant 38\n                                    :unit (y2 / year))\n                              :source (k / kid\n                                    :mod c)))\n                  :mod (c4 / culinary))\n            :ARG2 p2))",
      "# ::snt Simon Wood , 38 , from Oldham says one of Simon Wood , 38 , from Oldham favourite meals is a plain omelette .\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Simon\"\n                  :op2 \"Wood\")\n            :age (t / temporal-quantity\n                  :quant 38\n                  :unit (y / year))\n            :source (c / city\n                  :name (n2 / name\n                        :op1 \"Oldham\")))\n      :ARG1 (m / meal\n            :quant 1\n            :ARG1-of (ii / include-91\n                  :ARG2 (m2 / meal\n                        :ARG1-of (f / favor-01\n                              :ARG0 (p2 / person\n                                    :name (n3 / name\n                                          :op1 \"Simon\"\n                                          :op2 \"Wood\")\n                                    :age (t2 / temporal-quantity\n                                          :quant 38\n                                          :unit (y2 / year))\n                                    :source c))))\n            :domain (o / omelette\n                  :mod (p3 / plain))))"
    ],
    "tree": [
      "(w / win-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Simon\"\n                     :op2 \"Wood\")))",
      "(w / win-01\n   :ARG0 (p / person\n            :age (t / temporal-quantity\n                    :quant 38)))",
      "(w / win-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Simon\"\n                     :op2 \"Wood\"))\n   :ARG1 (a / award\n            :name (n3 / name\n                      :op1 \"Masterchef\")))",
      "(w / win-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Simon\"\n                     :op2 \"Wood\"))\n   :time (d / date-entity\n            :weekday (f / friday)))",
      "(p / person\n   :name (n / name\n            :op1 \"Simon\"\n            :op2 \"Wood\")\n   :age (t / temporal-quantity\n           :quant 38))",
      "(g / get-01\n   :ARG1 (s / skill\n            :topic (c2 / cook-01)))",
      "(p / person\n   :age (t / temporal-quantity\n           :quant 38))",
      "(p / person\n   :name (n / name\n            :op1 \"Simon\"\n            :op2 \"Wood\")\n   :source (c / city\n              :name (n2 / name\n                        :op1 \"Oldham\")))",
      "(p / person\n   :name (n / name\n            :op1 \"Simon\"\n            :op2 \"Wood\")\n   :age (t / temporal-quantity\n           :quant 38)\n   :source (c / city\n              :name (n2 / name\n                        :op1 \"Oldham\")))",
      "(p2 / person\n    :age (t3 / temporal-quantity\n             :quant 38)\n    :source (k / kid\n               :mod (c / city :name (n2 / name :op1 \"Oldham\"))))",
      "(p / person\n   :name (n / name\n            :op1 \"Simon\"\n            :op2 \"Wood\")\n   :age (t / temporal-quantity\n           :quant 38))",
      "(p / person\n   :name (n / name\n            :op1 \"Simon\"\n            :op2 \"Wood\")\n   :source (c / city\n              :name (n2 / name\n                        :op1 \"Oldham\")))",
      "(p / person\n   :name (n / name\n            :op1 \"Simon\"\n            :op2 \"Wood\")\n   :age (t / temporal-quantity\n           :quant 38)\n   :source (c / city\n              :name (n2 / name\n                        :op1 \"Oldham\")))",
      "(m / meal\n   :domain (o / omelette\n              :mod (p3 / plain)))"
    ],
    "smus": [
      "Simon Wood won.",
      "The 38-year-old won.",
      "Simon Wood won the Masterchef.",
      "Simon Wood won on Friday.",
      "Simon Wood, 38.",
      "got cooking skills.",
      "38.",
      "Simon Wood, of Oldham",
      "Simon Wood, 38, of Oldham",
      "38-year-old from Oldham kids",
      "Simon Wood, 38.",
      "Simon Wood, of Oldham",
      "Simon Wood, 38, of Oldham",
      "Plain omelettes are meals."
    ]
  },
  {
    "instance_id": "realsumm-57",
    "summary": "Swansea 's Gerhard Tremmel in goal behind the Free Agents ' 4 - 4 - 2 . Glen Johnson , Kolo Toure , Ron Vlaar and Luke Garbutt at the back . James Milner , Mikel Arteta , Tom Cleverley and Jonas Gutierrez in midfield . Burnley 's Danny Ings and Manchester United 's James Wilson up front .",
    "summary_trees": [
      "# ::snt Swansea 's Gerhard Tremmel in goal behind the Free Agents ' 4 - 4 - 2 .\n(b / be-located-at-91\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Gerhard\"\n                  :op2 \"Tremmel\")\n            :poss (t / team\n                  :name (n2 / name\n                        :op1 \"Swansea\")))\n      :ARG2 (g / goal)\n      :location (b2 / behind\n            :op1 (t2 / team\n                  :name (n3 / name\n                        :op1 \"Free\"\n                        :op2 \"Agent\")\n                  :subevent (s / score-entity\n                        :op1 4\n                        :op2 4\n                        :op3 2))))",
      "# ::snt Glen Johnson , Kolo Toure , Ron Vlaar and Luke Garbutt at the back .\n(b / be-located-at-91\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Glen\"\n                        :op2 \"Johnson\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Kolo\"\n                        :op2 \"Toure\"))\n            :op3 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Ron\"\n                        :op2 \"Vlaar\"))\n            :op4 (p4 / person\n                  :name (n4 / name\n                        :op1 \"Luke\"\n                        :op2 \"Garbutt\")))\n      :ARG2 (b2 / back))",
      "# ::snt James Milner , Mikel Arteta , Tom Cleverley and Jonas Gutierrez in midfield .\n(a / and\n      :op1 (p / person\n            :name (n / name\n                  :op1 \"James\"\n                  :op2 \"Milner\"))\n      :op2 (p2 / person\n            :name (n2 / name\n                  :op1 \"Mikel\"\n                  :op2 \"Arteta\"))\n      :op3 (p3 / person\n            :name (n3 / name\n                  :op1 \"Tom\"\n                  :op2 \"Cleverley\"))\n      :op4 (p4 / person\n            :name (n4 / name\n                  :op1 \"Jonas\"\n                  :op2 \"Gutierrez\"))\n      :location (m / midfield))",
      "# ::snt Burnley 's Danny Ings and Manchester United 's James Wilson up front .\n(a / and\n      :op1 (p / person\n            :name (n / name\n                  :op1 \"Danny\"\n                  :op2 \"Ingers\")\n            :poss (t / team\n                  :name (n2 / name\n                        :op1 \"Burnley\")))\n      :op2 (p2 / person\n            :name (n3 / name\n                  :op1 \"James\"\n                  :op2 \"Wilson\")\n            :poss (t2 / team\n                  :name (n4 / name\n                        :op1 \"Manchester\"\n                        :op2 \"United\")))\n      :location (u / up-front))"
    ],
    "tree": [
      "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Gerhard\"\n                     :op2 \"Tremmel\")))",
      "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Gerhard\"\n                     :op2 \"Tremmel\"))\n   :ARG2 (g / goal))",
      "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Gerhard\"\n                     :op2 \"Tremmel\"))\n   :location (b2 / behind\n                 :op1 (t2 / team\n                          :name (n3 / name\n                                    :op1 \"Free\"\n                                    :op2 \"Agent\"))))",
      "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Gerhard\"\n                     :op2 \"Tremmel\"))\n   :ARG2 (g / goal)\n   :location (b2 / behind\n                 :op1 (t2 / team\n                          :name (n3 / name\n                                    :op1 \"Free\"\n                                    :op2 \"Agent\"))))",
      "(p / person\n   :name (n / name\n            :op1 \"Gerhard\"\n            :op2 \"Tremmel\")\n   :poss (t / team\n            :name (n2 / name\n                      :op1 \"Swansea\")))",
      "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Glen\"\n                     :op2 \"Johnson\")))",
      "(a / and\n   :op2 (p2 / person\n            :name (n2 / name\n                      :op1 \"Kolo\"\n                      :op2 \"Toure\")))",
      "(a / and\n   :op3 (p3 / person\n            :name (n3 / name\n                      :op1 \"Ron\"\n                      :op2 \"Vlaar\")))",
      "(a / and\n   :op1 (p / person\n           :name (n / name\n                    :op1 \"Glen\"\n                    :op2 \"Johnson\"))\n   :op2 (p2 / person\n            :name (n2 / name\n                      :op1 \"Kolo\"\n                      :op2 \"Toure\")))",
      "(a / and\n   :op2 (p2 / person\n            :name (n2 / name\n                      :op1 \"Kolo\"\n                      :op2 \"Toure\"))\n   :op3 (p3 / person\n            :name (n3 / name\n                      :op1 \"Ron\"\n                      :op2 \"Vlaar\"))\n   :op4 (p4 / person\n            :name (n4 / name\n                      :op1 \"Luke\"\n                      :op2 \"Garbutt\")))",
      "(a / and\n   :op1 (p / person\n           :name (n / name\n                    :op1 \"James\"\n                    :op2 \"Milner\"))\n   :op2 (p2 / person\n            :name (n2 / name\n                      :op1 \"Mikel\"\n                      :op2 \"Arteta\"))\n   :op3 (p3 / person\n            :name (n3 / name\n                      :op1 \"Tom\"\n                      :op2 \"Cleverley\"))\n   :op4 (p4 / person\n            :name (n4 / name\n                      :op1 \"Jonas\"\n                      :op2 \"Gutierrez\"))\n   :location (m / midfield))"
    ],
    "smus": [
      "Gerhard Tremmel.",
      "Gerhard Tremmel is at the goal.",
      "Gerhard Tremmel is behind the Free Agents.",
      "Gerhard Tremmel is in goal behind the Free Agents.",
      "Swansea's Gerhard Tremmel",
      "Glen Johnson.",
      "And Kolo Toure.",
      "And Ron Vlaar.",
      "Glen Johnson and Kolo Toure.",
      "Kolo Toure, Ron Vlaar and Luke Garbutt.",
      "James Milner, Micel Arteta, Tom Cleverley and Jonathan Gutierrez in midfield."
    ]
  },
  {
    "instance_id": "realsumm-58",
    "summary": "Michigan high school students Mikenzy Snell and Matt Pliska who has Down syndrome , made plans to go to Michigan high school students Mikenzy Snell and Matt Pliska who has Down syndrome junior prom together last year . For Michigan high school students Mikenzy Snell and Matt Pliska who has Down syndrome prom picture , Michigan high school students Mikenzy Snell and Matt Pliska who has Down syndrome held up a sign which read : ' Real friends do n't count chromosomes ' . a sign which read : ' Real friends do n't count chromosomes ' references the fact that people with Down syndrome have an extra copy of chromosome 21 .",
    "summary_trees": [
      "# ::snt Michigan high school students Mikenzy Snell and Matt Pliska who has Down syndrome , made plans to go to Michigan high school students Mikenzy Snell and Matt Pliska who has Down syndrome junior prom together last year .\n(p / plan-01\n      :ARG0 (a / and\n            :op1 (p2 / person\n                  :name (n / name\n                        :op1 \"Mikenzy\"\n                        :op2 \"Sell\")\n                  :ARG0-of (s / study-01\n                        :location (h / high-school\n                              :location (s2 / state\n                                    :name (n2 / name\n                                          :op1 \"Michigan\")))))\n            :op2 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Matt\"\n                        :op2 \"Pliska\")\n                  :ARG0-of (s3 / study-01\n                        :location h)\n                  :ARG0-of (h2 / have-03\n                        :ARG1 (m / medical-condition\n                              :name (n4 / name\n                                    :op1 \"Down\"\n                                    :op2 \"Syndrome\")))))\n      :ARG1 (g / go-02\n            :ARG0 a\n            :ARG4 (p4 / prom\n                  :mod (j / junior)\n                  :mod (p5 / person\n                        :ARG0-of (s4 / study-01\n                              :location h)))\n            :time (y / year\n                  :mod (l / last))\n            :manner (t / together)))",
      "# ::snt For Michigan high school students Mikenzy Snell and Matt Pliska who has Down syndrome prom picture , Michigan high school students Mikenzy Snell and Matt Pliska who has Down syndrome held up a sign which read : ' Real friends do n't count chromosomes ' .\n(h / hold-up-10\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Mikenzy\"\n                        :op2 \"Sell\")\n                  :ARG0-of (s / study-01\n                        :location (h2 / high-school\n                              :location (s2 / state\n                                    :name (n2 / name\n                                          :op1 \"Michigan\")))))\n            :op2 (p2 / person\n                  :name (n3 / name\n                        :op1 \"Matt\"\n                        :op2 \"Pliska\")\n                  :ARG0-of (s3 / study-01\n                        :location (h3 / high-school\n                              :location s2))\n                  :ARG0-of (h4 / have-03\n                        :ARG1 (p3 / picture\n                              :mod (p4 / prom)\n                              :mod (m / medical-condition\n                                    :name (n4 / name\n                                          :op1 \"Down\"\n                                          :op2 \"Syndrome\"))))))\n      :ARG1 (s4 / sign\n            :ARG0-of (r / read-01\n                  :ARG1 (c / count-01\n                        :polarity -\n                        :ARG0 (f / friend\n                              :ARG1-of (r2 / real-04))\n                        :ARG1 (c2 / chromosome)))))",
      "# ::snt a sign which read : ' Real friends do n't count chromosomes ' references the fact that people with Down syndrome have an extra copy of chromosome 21 .\n(r / reference-04\n      :ARG0 (s / sign\n            :ARG1-of (r2 / read-01\n                  :ARG3 (c / count-01\n                        :polarity -\n                        :ARG0 (f / friend\n                              :ARG1-of (r3 / real-04))\n                        :ARG1 (c2 / chromosome))))\n      :ARG1 (h / have-03\n            :ARG0 (p / person\n                  :ARG1 (m / medical-condition\n                        :name (n / name\n                              :op1 \"Down\"\n                              :op2 \"Syndrome\")))\n            :ARG0 p)\n      :ARG1 (c3 / copy-01\n            :ARG1 (c4 / chromosome\n                  :mod 21)\n            :mod (e / extra)))"
    ],
    "tree": [
      "(p / plan-01\n   :ARG1 (g / go-02\n            :ARG4 (p4 / prom\n                      :mod (j / junior))))",
      "(p / plan-01\n   :ARG1 (g / go-02\n            :time (y / year\n                     :mod (l / last))))",
      "(p2 / person\n    :ARG0 (s / study-01\n             :location (h / high-school\n                          :location (s2 / state\n                                        :name (n2 / name\n                                                  :op1 \"Michigan\")))))",
      "(p2 / person\n    :name (n / name\n             :op1 \"Mikenzy\"\n             :op2 \"Sell\")\n    :ARG0 (s / study-01\n             :location (h / high-school\n                          :location (s2 / state\n                                        :name (n2 / name\n                                                  :op1 \"Michigan\")))))",
      "(h2 / have-03\n    :ARG1 (m / medical-condition\n             :name (n4 / name\n                       :op1 \"Down\"\n                       :op2 \"Syndrome\")))",
      "(a / and\n   :op1 (p / person\n           :ARG0 (s / study-01\n                    :location (h2 / high-school\n                                  :location (s2 / state\n                                                :name (n2 / name\n                                                          :op1 \"Michigan\"))))))",
      "(p / person\n   :ARG0 (s / study-01\n            :location (h2 / high-school\n                          :location (s2 / state\n                                        :name (n2 / name\n                                                  :op1 \"Michigan\")))))",
      "(p / person\n   :name (n / name\n            :op1 \"Mikenzy\"\n            :op2 \"Sell\")\n   :ARG0 (s / study-01\n            :location (h2 / high-school\n                          :location (s2 / state\n                                        :name (n2 / name\n                                                  :op1 \"Michigan\")))))",
      "(p2 / person\n    :name (n3 / name\n              :op1 \"Matt\"\n              :op2 \"Pliska\")\n    :ARG0 (s3 / study-01\n              :location (h3 / high-school\n                            :location (s2 / state :name (n2 / name :op1 \"Michigan\")))))",
      "(h / have-03\n   :ARG0 (p / person\n            :ARG1 (m / medical-condition\n                     :name (n / name\n                              :op1 \"Down\"\n                              :op2 \"Syndrome\"))))",
      "(p / person\n   :ARG1 (m / medical-condition\n            :name (n / name\n                     :op1 \"Down\"\n                     :op2 \"Syndrome\")))",
      "(c3 / copy-01\n    :ARG1 (c4 / chromosome\n              :mod 21))",
      "(c3 / copy-01\n    :ARG1 (c4 / chromosome\n              :mod 21)\n    :mod (e / extra))"
    ],
    "smus": [
      "Plans to go to junior prom.",
      "Plans to go last year.",
      "Students in high school in Michigan",
      "Mikenzy Sell is a Michigan high school student.",
      "has Down syndrome.",
      "And the students were in high school in Michigan.",
      "Students in high school in Michigan",
      "Mikenzy Sell is a Michigan high school student.",
      "Matt Pliska is a Michigan high school student.",
      "People with Down Syndrome have it.",
      "Down syndrome.",
      "a copy of chromosome 21",
      "Extra copy of chromosome 21"
    ]
  },
  {
    "instance_id": "realsumm-59",
    "summary": "Police say Michael Scott Shemansky came to Police attention after Michael Scott Shemansky failed to appear for a supervised visit with Michael Scott Shemansky son Saturday . Saturday was found dead at the home they shared in Winter Garden , Florida . Michael Scott Shemansky was going through a difficult divorce and neighbors believe the stress may have caused Michael Scott Shemansky to snap .",
    "summary_trees": [
      "# ::snt Police say Michael Scott Shemansky came to Police attention after Michael Scott Shemansky failed to appear for a supervised visit with Michael Scott Shemansky son Saturday .\n(s / say-01\n      :ARG0 (p / police)\n      :ARG1 (c / come-01\n            :ARG1 (p2 / person\n                  :name (n / name\n                        :op1 \"Michael\"\n                        :op2 \"Scott\"\n                        :op3 \"Shemansky\"))\n            :ARG4 (a / attend-02\n                  :ARG0 p\n                  :ARG1 p2)\n            :time (a2 / after\n                  :op1 (f / fail-01\n                        :ARG1 p2\n                        :ARG2 (a3 / appear-01\n                              :ARG1 p2\n                              :purpose (v / visit-01\n                                    :ARG0 p2\n                                    :ARG1 (p3 / person\n                                          :ARG0-of (h / have-rel-role-91\n                                                :ARG1 p2\n                                                :ARG2 (s2 / son)))\n                                    :ARG1-of (s3 / supervise-01\n                                          :ARG0 p))\n                              :time (d / date-entity\n                                    :weekday (s4 / saturday)))))))",
      "# ::snt Saturday was found dead at the home they shared in Winter Garden , Florida .\n(f / find-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Saturday\")\n            :ARG1-of (d / die-01))\n      :location (h / home\n            :ARG1-of (s / share-01\n                  :ARG0 (t / they))\n            :location (c / city\n                  :name (n2 / name\n                        :op1 \"Winter\"\n                        :op2 \"Garden\")\n                  :location (s2 / state\n                        :name (n3 / name\n                              :op1 \"Florida\")))))",
      "# ::snt Michael Scott Shemansky was going through a difficult divorce and neighbors believe the stress may have caused Michael Scott Shemansky to snap .\n(a / and\n      :op1 (g / go-through-20\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Michael\"\n                        :op2 \"Scott\"\n                        :op3 \"Shemansky\"))\n            :ARG1 (d / divorce-01\n                  :ARG1 p\n                  :mod (d2 / difficult)))\n      :op2 (b / believe-01\n            :ARG0 (p2 / person\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 p\n                        :ARG2 (n2 / neighbor)))\n            :ARG1 (p3 / possible-01\n                  :ARG1 (c / cause-01\n                        :ARG0 (s / stress-02)\n                        :ARG1 (s2 / snap-04\n                              :ARG1 p)))))"
    ],
    "tree": [
      "(c / come-01\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Michael\"\n                      :op2 \"Scott\"\n                      :op3 \"Shemansky\"))\n   :ARG4 (a / attend-02\n            :ARG0 (p / police)))",
      "(c / come-01\n   :ARG4 (a / attend-02\n            :ARG0 (p / police))\n   :time (a2 / after\n             :op1 (f / fail-01\n                     :ARG2 (a3 / appear-01\n                               :purpose (v / visit-01\n                                           :ARG1 (p3 / person\n                                                     :ARG0 (h / have-rel-role-91\n                                                              :ARG1 (p2 / person :name (n / name :op1 \"Michael\" :op2 \"Scott\" :op3 \"Shemansky\")))))))))",
      "(a2 / after\n    :op1 (f / fail-01\n            :ARG2 (a3 / appear-01\n                      :ARG1 (p2 / person :name (n / name :op1 \"Michael\" :op2 \"Scott\" :op3 \"Shemansky\")))))",
      "(f / fail-01\n   :ARG2 (a3 / appear-01\n             :time (d / date-entity\n                      :weekday (s4 / saturday))))",
      "(p3 / person\n    :ARG0 (h / have-rel-role-91\n             :ARG1 (p2 / person :name (n / name :op1 \"Michael\" :op2 \"Scott\" :op3 \"Shemansky\"))))",
      "(f / find-01\n   :location (h / home\n                :ARG1 (s / share-01\n                         :ARG0 (t / they))))",
      "(f / find-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Saturday\"))\n   :location (h / home\n                :ARG1 (s / share-01\n                         :ARG0 (t / they))))",
      "(f / find-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Saturday\"))\n   :location (h / home\n                :location (c / city\n                             :name (n2 / name\n                                       :op1 \"Winter\"\n                                       :op2 \"Garden\"))))",
      "(h / home\n   :ARG1 (s / share-01\n            :ARG0 (t / they))\n   :location (c / city\n                :name (n2 / name\n                          :op1 \"Winter\"\n                          :op2 \"Garden\")))",
      "(h / home\n   :ARG1 (s / share-01\n            :ARG0 (t / they))\n   :location (c / city\n                :location (s2 / state\n                              :name (n3 / name\n                                        :op1 \"Florida\"))))",
      "(g / go-through-20\n   :ARG0 (p / person\n            :name (n / name)))",
      "(b / believe-01\n   :ARG0 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 (p / person :name (n / name :op1 \"Michael\" :op2 \"Scott\" :op3 \"Shemansky\"))\n                      :ARG2 (n2 / neighbor)))\n   :ARG1 (p3 / possible-01\n             :ARG1 (c / cause-01\n                      :ARG0 (s / stress-02)\n                      :ARG1 (s2 / snap-04\n                                :ARG1 p))))"
    ],
    "smus": [
      "Michael Scott Shemansky came under police attention.",
      "The police attention came after the person of Michael Scott Shemansky failed to appear for a visit.",
      "After Michael Scott Shemansky failed to appear.",
      "failed to appear Saturday.",
      "Michael Scott Shemansky is a person.",
      "Found in the home they shared.",
      "Saturday was found in the home they shared.",
      "Saturday was found in a home in the Winter Garden.",
      "The home they shared is in the Winter Garden.",
      "They shared a home in Florida.",
      "The person who went through.",
      "Michael Scott Shemansky's neighbors believe stress may have caused him to snap."
    ]
  },
  {
    "instance_id": "realsumm-60",
    "summary": "Bayern Munich beat Porto 6 - 1 in the Champions League on Tuesday . Bayern Munich progressed 7 - 4 on aggregate to reach semi - finals . Thomas Muller scored 27th the Champions League goal to pass Mario Gomez . Thomas Muller is now the leading German scorer in the Champions League . After game Thomas Muller led the celebrations with supporters using a megaphone .",
    "summary_trees": [
      "# ::snt Bayern Munich beat Porto 6 - 1 in the Champions League on Tuesday .\n(b / beat-03\n      :ARG0 (t / team\n            :name (n / name\n                  :op1 \"Bayern\"\n                  :op2 \"Munich\"))\n      :ARG1 (t2 / team\n            :name (n2 / name\n                  :op1 \"Porto\"))\n      :ARG2 (g / game\n            :name (n3 / name\n                  :op1 \"Champions\"\n                  :op2 \"League\"))\n      :time (d / date-entity\n            :weekday (t3 / tuesday))\n      :quant (s / score-entity\n            :op1 6\n            :op2 1))",
      "# ::snt Bayern Munich progressed 7 - 4 on aggregate to reach semi - finals .\n(p / progress-01\n      :ARG1 (t / team\n            :name (n / name\n                  :op1 \"Bayern\"\n                  :op2 \"Munich\"))\n      :ARG4 (r / reach-01\n            :ARG0 t\n            :ARG1 (f / final\n                  :mod (s / semi)))\n      :manner (s2 / score-entity\n            :op1 7\n            :op2 4\n            :ARG4-of (a / aggregate-01)))",
      "# ::snt Thomas Muller scored 27th the Champions League goal to pass Mario Gomez .\n(s / score-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Thomas\"\n                  :op2 \"Muller\"))\n      :ARG1 (g / goal\n            :ord (o / ordinal-entity\n                  :value 27)\n            :mod (g2 / game\n                  :name (n2 / name\n                        :op1 \"Champions\"\n                        :op2 \"League\")))\n      :ARG2 (p2 / pass-03\n            :ARG0 p\n            :ARG1 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Mario\"\n                        :op2 \"Gomez\"))))",
      "# ::snt Thomas Muller is now the leading German scorer in the Champions League .\n(h / have-03\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Thomas\"\n                  :op2 \"Muller\"))\n      :ARG1 (p2 / person\n            :ARG0-of (s / score-01\n                  :ARG3 (g / game\n                        :name (n2 / name\n                              :op1 \"Champions\"\n                              :op2 \"League\")))\n            :mod (c / country\n                  :name (n3 / name\n                        :op1 \"Germany\"))\n            :ARG0-of (l / lead-01\n                  :ARG1 g))\n      :time (n4 / now))",
      "# ::snt After game Thomas Muller led the celebrations with supporters using a megaphone .\n(l / lead-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Thomas\"\n                  :op2 \"Muller\"))\n      :ARG1 (c / celebrate-02\n            :accompanier (p2 / person\n                  :ARG0-of (s / support-01)\n                  :ARG0-of (u / use-01\n                        :ARG1 (m / megaphone))))\n      :time (a / after\n            :op1 (g / game)))"
    ],
    "tree": [
      "(b / beat-03\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Bayern\"\n                     :op2 \"Munich\")))",
      "(b / beat-03\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Bayern\"\n                     :op2 \"Munich\"))\n   :ARG1 (t2 / team\n             :name (n2 / name\n                       :op1 \"Porto\"))\n   :quant (s / score-entity\n             :op1 6))",
      "(b / beat-03\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Bayern\"\n                     :op2 \"Munich\"))\n   :ARG1 (t2 / team\n             :name (n2 / name\n                       :op1 \"Porto\"))\n   :time (d / date-entity\n            :weekday (t3 / tuesday))\n   :quant (s / score-entity\n             :op1 6))",
      "(b / beat-03\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Bayern\"\n                     :op2 \"Munich\"))\n   :ARG1 (t2 / team\n             :name (n2 / name\n                       :op1 \"Porto\"))\n   :ARG2 (g / game\n            :name (n3 / name\n                      :op1 \"Champions\"\n                      :op2 \"League\"))\n   :time (d / date-entity\n            :weekday (t3 / tuesday))\n   :quant (s / score-entity\n             :op1 6))",
      "(t / team\n   :name (n / name\n            :op1 \"Bayern\"\n            :op2 \"Munich\"))",
      "(p / progress-01\n   :ARG1 (t / team\n            :name (n / name\n                     :op1 \"Bayern\"\n                     :op2 \"Munich\")))",
      "(p / progress-01\n   :ARG4 (r / reach-01\n            :ARG0 (t / team :name (n / name :op1 \"Bayern\" :op2 \"Munich\"))))",
      "(p / progress-01\n   :manner (s2 / score-entity\n               :op1 7\n               :op2 4\n               :ARG4 (a / aggregate-01)))",
      "(p / progress-01\n   :ARG1 (t / team\n            :name (n / name\n                     :op1 \"Bayern\"\n                     :op2 \"Munich\"))\n   :ARG4 (r / reach-01\n            :ARG1 (f / final\n                     :mod (s / semi))))",
      "(s / score-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Thomas\"\n                     :op2 \"Muller\")))",
      "(s / score-01\n   :ARG2 (p2 / pass-03\n             :ARG1 (p3 / person\n                       :name (n3 / name\n                                 :op1 \"Mario\"\n                                 :op2 \"Gomez\"))))",
      "(s / score-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Thomas\"\n                     :op2 \"Muller\"))\n   :ARG1 (g / goal\n            :ord (o / ordinal-entity\n                    :value 27)))",
      "(s / score-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Thomas\"\n                     :op2 \"Muller\"))\n   :ARG2 (p2 / pass-03\n             :ARG1 (p3 / person\n                       :name (n3 / name\n                                 :op1 \"Mario\"\n                                 :op2 \"Gomez\"))))",
      "(s / score-01\n   :ARG1 (g / goal\n            :ord (o / ordinal-entity\n                    :value 27))\n   :ARG2 (p2 / pass-03\n             :ARG0 (p / person :name (n / name :op1 \"Thomas\" :op2 \"Muller\"))))",
      "(h / have-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Thomas\"\n                     :op2 \"Muller\"))\n   :time (n4 / now))",
      "(h / have-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Thomas\"\n                     :op2 \"Muller\"))\n   :ARG1 (p2 / person\n             :ARG0 (s / score-01\n                      :ARG3 (g / game\n                               :name (n2 / name\n                                         :op1 \"Champions\"\n                                         :op2 \"League\"))))\n   :time (n4 / now))",
      "(p / person\n   :name (n / name\n            :op1 \"Thomas\"\n            :op2 \"Muller\"))",
      "(p2 / person\n    :ARG0 (s / score-01\n             :ARG3 (g / game\n                      :name (n2 / name\n                                :op1 \"Champions\"\n                                :op2 \"League\")))\n    :mod (c / country\n            :name (n3 / name\n                      :op1 \"Germany\")))",
      "(g / game\n   :name (n2 / name\n             :op1 \"Champions\"\n             :op2 \"League\"))",
      "(l / lead-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Thomas\"\n                     :op2 \"Muller\")))",
      "(l / lead-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Thomas\"\n                     :op2 \"Muller\"))\n   :ARG1 (c / celebrate-02\n            :accompanier (p2 / person\n                             :ARG0 (s / support-01))))",
      "(l / lead-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Thomas\"\n                     :op2 \"Muller\"))\n   :time (a / after\n            :op1 (g / game)))",
      "(l / lead-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Thomas\"\n                     :op2 \"Muller\"))\n   :ARG1 (c / celebrate-02\n            :accompanier (p2 / person\n                             :ARG0 (s / support-01)))\n   :time (a / after\n            :op1 (g / game)))",
      "(l / lead-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Thomas\"\n                     :op2 \"Muller\"))\n   :ARG1 (c / celebrate-02\n            :accompanier (p2 / person\n                             :ARG0 (u / use-01\n                                      :ARG1 (m / megaphone))))\n   :time (a / after\n            :op1 (g / game)))"
    ],
    "smus": [
      "Bayern Munich beat",
      "Bayern Munich beat Porto 6-1.",
      "Bayern Munich beat Porto 6-1 on Tuesday.",
      "Bayern M\u00fcnchen beat Porto 6-1 in the Champions League game Tuesday.",
      "Bayern Munich",
      "Bayern Munich progressed.",
      "Bayern Munich progressed to reach.",
      "Progressed 7-4 on aggregate.",
      "Bayern Munich progressed to the semi-finals.",
      "Thomas Muller scored.",
      "Scored to pass Mario Gomez",
      "Thomas Muller scored the 27th goal.",
      "Thomas Muller scored to pass Mario Gomez.",
      "The 27th goal was scored by Thomas Muller.",
      "Thomas Muller has now.",
      "Thomas Muller now has a Champions League score.",
      "Thomas Muller",
      "The Champions League scorer is a German.",
      "The Champions League",
      "Thomas Muller led.",
      "Thomas Muller led celebrations with supporters.",
      "Thomas Muller led after the game.",
      "Thomas Muller led celebrations with supporters after the game.",
      "After the game Thomas Muller led celebrations with people using the megaphone."
    ]
  },
  {
    "instance_id": "realsumm-61",
    "summary": "Domenico Rancadore given a seven - year sentence by Italian court in 1999 . Domenico Rancadore was convicted for role as a ' man of honour ' , taking bribes from builders . In February Domenico Rancadore lost battle against extradition to Italy . Today it emerged that Domenico Rancadore case expired in October last year .",
    "summary_trees": [
      "# ::snt Domenico Rancadore given a seven - year sentence by Italian court in 1999 .\n(s / sentence-01\n      :ARG0 (c / court\n            :mod (c2 / country\n                  :name (n / name\n                        :op1 \"Italy\")))\n      :ARG1 (p / person\n            :name (n2 / name\n                  :op1 \"Domenico\"\n                  :op2 \"Rancadore\"))\n      :ARG2 (t / temporal-quantity\n            :quant 7\n            :unit (y / year))\n      :time (d / date-entity\n            :year 1999))",
      "# ::snt Domenico Rancadore was convicted for role as a ' man of honour ' , taking bribes from builders .\n(c / convict-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Domenico\"\n                  :op2 \"Rancadore\"))\n      :ARG2 (a / and\n            :op1 (r / role\n                  :mod (m / man\n                        :mod (h / honor)))\n            :op2 (b / bribe-01\n                  :ARG0 p\n                  :ARG1 (p2 / person\n                        :ARG0-of (b2 / build-01)))))",
      "# ::snt In February Domenico Rancadore lost battle against extradition to Italy .\n(l / lose-03\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Domenico\"\n                  :op2 \"Rancadore\"))\n      :ARG1 (b / battle-01\n            :ARG0 p\n            :ARG1 (e / extradite-01\n                  :ARG1 p\n                  :ARG3 (c / country\n                        :name (n2 / name\n                              :op1 \"Italy\"))))\n      :time (d / date-entity\n            :month 2))",
      "# ::snt Today it emerged that Domenico Rancadore case expired in October last year .\n(e / emerge-02\n      :ARG1 (e2 / expire-01\n            :ARG1 (c / case-03\n                  :ARG2 (p / person\n                        :name (n / name\n                              :op1 \"Domenico\"\n                              :op2 \"Rancadore\")))\n            :time (d / date-entity\n                  :month 10\n                  :mod (y / year\n                        :mod (l / last))))\n      :time (t / today))"
    ],
    "tree": [
      "(s / sentence-01\n   :ARG0 (c / court\n            :mod (c2 / country\n                     :name (n / name\n                              :op1 \"Italy\")))\n   :time (d / date-entity\n            :year 1999))",
      "(s / sentence-01\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Domenico\"\n                      :op2 \"Rancadore\"))\n   :ARG2 (t / temporal-quantity\n            :quant 7))",
      "(s / sentence-01\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Domenico\"\n                      :op2 \"Rancadore\"))\n   :time (d / date-entity\n            :year 1999))",
      "(s / sentence-01\n   :ARG0 (c / court\n            :mod (c2 / country\n                     :name (n / name\n                              :op1 \"Italy\")))\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Domenico\"\n                      :op2 \"Rancadore\"))\n   :time (d / date-entity\n            :year 1999))",
      "(s / sentence-01\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Domenico\"\n                      :op2 \"Rancadore\"))\n   :ARG2 (t / temporal-quantity\n            :quant 7)\n   :time (d / date-entity\n            :year 1999))",
      "(c / convict-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Domenico\"\n                     :op2 \"Rancadore\")))",
      "(c / convict-01\n   :ARG2 (r / role\n            :mod (m / man\n                    :mod (h / honor))))",
      "(c / convict-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Domenico\"\n                     :op2 \"Rancadore\"))\n   :ARG2 (b / bribe-01\n            :ARG0 p))",
      "(c / convict-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Domenico\"\n                     :op2 \"Rancadore\"))\n   :ARG2 (b / bribe-01\n            :ARG1 (p2 / person\n                      :ARG0 (b2 / build-01))))",
      "(p / person\n   :name (n / name\n            :op1 \"Domenico\"\n            :op2 \"Rancadore\"))",
      "(l / lose-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Domenico\"\n                     :op2 \"Rancadore\"))\n   :ARG1 (b / battle-01\n            :ARG1 (e / extradite-01\n                     :ARG3 (c / country\n                              :name (n2 / name\n                                        :op1 \"Italy\")))))",
      "(l / lose-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Domenico\"\n                     :op2 \"Rancadore\"))\n   :time (d / date-entity\n            :month 2))",
      "(l / lose-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Domenico\"\n                     :op2 \"Rancadore\"))\n   :ARG1 (b / battle-01\n            :ARG0 p)\n   :time (d / date-entity\n            :month 2))",
      "(l / lose-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Domenico\"\n                     :op2 \"Rancadore\"))\n   :ARG1 (b / battle-01\n            :ARG1 (e / extradite-01\n                     :ARG1 p))\n   :time (d / date-entity\n            :month 2))",
      "(l / lose-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Domenico\"\n                     :op2 \"Rancadore\"))\n   :ARG1 (b / battle-01\n            :ARG1 (e / extradite-01\n                     :ARG3 (c / country\n                              :name (n2 / name\n                                        :op1 \"Italy\"))))\n   :time (d / date-entity\n            :month 2))",
      "(e / emerge-02\n   :ARG1 (e2 / expire-01\n             :ARG1 (c / case-03\n                      :ARG2 (p / person\n                               :name (n / name\n                                        :op1 \"Domenico\"\n                                        :op2 \"Rancadore\")))))",
      "(e2 / expire-01\n    :time (d / date-entity\n             :month 10))",
      "(e2 / expire-01\n    :time (d / date-entity\n             :mod (y / year\n                     :mod (l / last))))",
      "(e2 / expire-01\n    :ARG1 (c / case-03\n             :ARG2 (p / person\n                      :name (n / name\n                               :op1 \"Domenico\"\n                               :op2 \"Rancadore\")))\n    :time (d / date-entity\n             :month 10))",
      "(e2 / expire-01\n    :ARG1 (c / case-03\n             :ARG2 (p / person\n                      :name (n / name\n                               :op1 \"Domenico\"\n                               :op2 \"Rancadore\")))\n    :time (d / date-entity\n             :mod (y / year\n                     :mod (l / last))))"
    ],
    "smus": [
      "The sentence was given by an Italian court in 1999.",
      "Domenico Rancadore received a 7-year sentence.",
      "Domenico Rancadore was sentenced in 1999.",
      "A court in Italy sentenced Domenico Rancadore in 1999.",
      "Domenico Rancadore received a seven-year sentence in 1999.",
      "Domenico Rancadore was convicted.",
      "Convicted for the role of honor man.",
      "Domenico Rancadore was convicted of bribery.",
      "Domenico Rancadore was convicted of bribing builders.",
      "Domenico Rancadore",
      "Domenico Rancadore lost the battle over extradition to Italy.",
      "Domenico Rancadore lost in February.",
      "In February, Domenico Rancadore lost the battle.",
      "Domenico Rancadore lost the extradition battle in February.",
      "Domenico Rancadore lost the battle over extradition to Italy in February.",
      "The case against Domenico Rancadore emerged to have expired.",
      "expired in October.",
      "expired last year.",
      "The case against Domenico Rancadore expired in October.",
      "The case against Domenico Rancadore expired last year."
    ]
  },
  {
    "instance_id": "realsumm-62",
    "summary": "Baron the German Shepard was filmed as Baron the German Shepard helped get the dishes done at home in California . Baron the German Shepard was professionally trained at the Hill Country K9 school . To date filmed has been watched over 27,000 times . Many viewers have deemed Baron the German Shepard cleaning antics ' cute ' and adorable '",
    "summary_trees": [
      "# ::snt Baron the German Shepard was filmed as Baron the German Shepard helped get the dishes done at home in California .\n(f / film-01\n      :ARG1 (w / work-of-art\n            :name (n / name\n                  :op1 \"Baron\"\n                  :op2 \"the\"\n                  :op3 \"German\"\n                  :op4 \"Shepard\"))\n      :prep-as (h / help-01\n            :ARG0 w\n            :ARG1 (d / do-02\n                  :ARG1 (d2 / dish)\n                  :location (h2 / home\n                        :location (s / state\n                              :name (n2 / name\n                                    :op1 \"California\"))))))",
      "# ::snt Baron the German Shepard was professionally trained at the Hill Country K9 school .\n(t / train-01\n      :ARG0 (s / school\n            :name (n / name\n                  :op1 \"Hill\"\n                  :op2 \"Country\"\n                  :op3 \"K9\"))\n      :ARG2 (a / animal\n            :name (n2 / name\n                  :op1 \"Baron\"\n                  :op2 \"the\"\n                  :op3 \"German\"\n                  :op4 \"Shepard\"))\n      :manner (p / professional))",
      "# ::snt To date filmed has been watched over 27,000 times .\n(w / watch-01\n      :ARG1 (t / thing\n            :ARG1-of (f / film-01))\n      :time (t2 / to-date)\n      :quant (o / over\n            :op1 27000))",
      "# ::snt Many viewers have deemed Baron the German Shepard cleaning antics ' cute ' and adorable '\n(d / deem-01\n      :ARG0 (p / person\n            :ARG0-of (v / view-01)\n            :quant (m / many))\n      :ARG1 (a / and\n            :op1 (c / cute)\n            :op2 (a2 / adorable)\n            :domain (a3 / antics\n                  :topic (c2 / clean-01\n                        :ARG0 (a4 / animal\n                              :name (n / name\n                                    :op1 \"Baron\")\n                              :mod (b / breed\n                                    :name n\n                                    :op1 \"German\"\n                                    :op2 \"Shepard\"))))))"
    ],
    "tree": [
      "(f / film-01\n   :prep-as (h / help-01\n               :ARG0 (w / work-of-art :name (n / name :op1 \"Baron\" :op2 \"the\" :op3 \"German\" :op4 \"Shepard\"))))",
      "(f / film-01\n   :prep-as (h / help-01\n               :ARG1 (d / do-02\n                        :ARG1 (d2 / dish))))",
      "(f / film-01\n   :ARG1 (w / work-of-art\n            :name (n / name\n                     :op1 \"Baron\"\n                     :op2 \"the\"\n                     :op3 \"German\"\n                     :op4 \"Shepard\"))\n   :prep-as (h / help-01\n               :ARG1 (d / do-02\n                        :ARG1 (d2 / dish))))",
      "(h / help-01\n   :ARG1 (d / do-02\n            :ARG1 (d2 / dish)))",
      "(d / do-02\n   :ARG1 (d2 / dish)\n   :location (h2 / home\n                 :location (s / state\n                              :name (n2 / name\n                                        :op1 \"California\"))))",
      "(t / train-01\n   :ARG2 (a / animal\n            :name (n2 / name\n                      :op1 \"Baron\"\n                      :op2 \"the\"\n                      :op3 \"German\"\n                      :op4 \"Shepard\")))",
      "(t / train-01\n   :ARG0 (s / school\n            :name (n / name\n                     :op1 \"Hill\"\n                     :op2 \"Country\"\n                     :op3 \"K9\"))\n   :ARG2 (a / animal\n            :name (n2 / name\n                      :op1 \"Baron\"\n                      :op2 \"the\"\n                      :op3 \"German\"\n                      :op4 \"Shepard\")))",
      "(t / train-01\n   :ARG2 (a / animal\n            :name (n2 / name\n                      :op1 \"Baron\"\n                      :op2 \"the\"\n                      :op3 \"German\"\n                      :op4 \"Shepard\"))\n   :manner (p / professional))",
      "(t / train-01\n   :ARG0 (s / school\n            :name (n / name\n                     :op1 \"Hill\"\n                     :op2 \"Country\"\n                     :op3 \"K9\"))\n   :ARG2 (a / animal\n            :name (n2 / name\n                      :op1 \"Baron\"\n                      :op2 \"the\"\n                      :op3 \"German\"\n                      :op4 \"Shepard\"))\n   :manner (p / professional))",
      "(a / animal\n   :name (n2 / name\n             :op1 \"Baron\"\n             :op2 \"the\"\n             :op3 \"German\"\n             :op4 \"Shepard\"))",
      "(w / watch-01\n   :ARG1 (t / thing\n            :ARG1 (f / film-01)))",
      "(w / watch-01\n   :ARG1 (t / thing\n            :ARG1 (f / film-01))\n   :time (t2 / to-date))",
      "(w / watch-01\n   :ARG1 (t / thing\n            :ARG1 (f / film-01))\n   :quant (o / over\n             :op1 27000))",
      "(w / watch-01\n   :time (t2 / to-date)\n   :quant (o / over\n             :op1 27000))",
      "(w / watch-01\n   :ARG1 (t / thing\n            :ARG1 (f / film-01))\n   :time (t2 / to-date)\n   :quant (o / over\n             :op1 27000))",
      "(d / deem-01\n   :ARG0 (p / person\n            :quant (m / many)))",
      "(d / deem-01\n   :ARG0 (p / person\n            :ARG0 (v / view-01))\n   :ARG1 (c / cute))",
      "(d / deem-01\n   :ARG0 (p / person\n            :ARG0 (v / view-01))\n   :ARG1 (a2 / adorable))",
      "(d / deem-01\n   :ARG0 (p / person\n            :quant (m / many))\n   :ARG1 (c / cute))",
      "(d / deem-01\n   :ARG0 (p / person\n            :quant (m / many))\n   :ARG1 (a2 / adorable))"
    ],
    "smus": [
      "Filmed as Baron the German Shepard helped.",
      "Filmed as helping to get the dishes done.",
      "Baron the German Shepard was filmed as helping to do the dishes.",
      "Helped get the dishes done.",
      "The dishes are done in a home in California.",
      "Baron the German Shepard was trained.",
      "Hill Country K9 school has trained the German Shepherd, Baron the German Shepherd.",
      "Baron the German Shepard was professionally trained.",
      "The Hill Country K9 school has professionally trained the Baron the German Shepard.",
      "Baron the German Shepard.",
      "The film was watched.",
      "The film has been watched to date.",
      "The film has been watched over 27,000 times.",
      "Over 27,000 watched to date.",
      "The film has been watched over 27,000 times to date.",
      "As many have deemed.",
      "Viewers have deemed it cute.",
      "Viewers have deemed it adorable.",
      "Many have deemed it cute.",
      "Many have deemed it adorable."
    ]
  },
  {
    "instance_id": "realsumm-63",
    "summary": "Jihadis face fines , whipping or even jail time for wearing Nike products . Ban is also partly due to Nike sharing Nike name with a Greek Goddess . Commanders say its name also sounds like sexual slang words in Arabic . Those living under ISIS are already banned from wearing jeans or items of clothing carrying provocative language or swear words .",
    "summary_trees": [
      "# ::snt Jihadis face fines , whipping or even jail time for wearing Nike products .\n(f / face-01\n      :ARG0 (j / jihadi)\n      :ARG1 (o / or\n            :op1 (f2 / fine-01)\n            :op2 (w / whip-01)\n            :op3 (t / time\n                  :mod (j2 / jail)\n                  :mod (e / even)))\n      :ARG1-of (c / cause-01\n            :ARG0 (w2 / wear-01\n                  :ARG0 j\n                  :ARG1 (p / product\n                        :mod (c2 / company\n                              :name (n / name\n                                    :op1 \"Nike\"))))))",
      "# ::snt Ban is also partly due to Nike sharing Nike name with a Greek Goddess .\n(c / cause-01\n      :ARG0 (s / share-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Nike\"))\n            :ARG1 (n2 / name\n                  :poss p)\n            :ARG2 (p2 / person\n                  :name (n3 / name\n                        :op1 \"Goddess\")\n                  :mod (c2 / country\n                        :name (n4 / name\n                              :op1 \"Greece\"))))\n      :ARG1 (b / ban-01)\n      :degree (p3 / part)\n      :mod (a / also))",
      "# ::snt Commanders say its name also sounds like sexual slang words in Arabic .\n(s / say-01\n      :ARG0 (p / person\n            :ARG0-of (c / command-02))\n      :ARG1 (s2 / sound-01\n            :ARG1 (n / name\n                  :poss (ii / it))\n            :ARG2 (w / word\n                  :mod (s3 / slang\n                        :mod (s4 / sex))\n                  :medium (l / language\n                        :name (n2 / name\n                              :op1 \"Arabic\")))\n            :mod (a / also)))",
      "# ::snt Those living under ISIS are already banned from wearing jeans or items of clothing carrying provocative language or swear words .\n(b / ban-01\n      :ARG1 (w / wear-01\n            :ARG0 (p / person\n                  :mod (t / that)\n                  :ARG0-of (l / live-01\n                        :location (u / under\n                              :op1 (c / criminal-organization\n                                    :name (n / name\n                                          :op1 \"ISIS\")))))\n            :ARG1 (o / or\n                  :op1 (j / jeans)\n                  :op2 (ii / item\n                        :ARG2-of (c2 / clothe-01)\n                        :ARG0-of (c3 / carry-01\n                              :ARG1 (o2 / or\n                                    :op1 (l2 / language\n                                          :ARG0-of (p2 / provoke-01))\n                                    :op2 (w2 / word\n                                          :ARG1-of (s / swear-01)))))))\n      :ARG2 p\n      :time (a / already))"
    ],
    "tree": [
      "(f / face-01\n   :ARG0 (j / jihadi)\n   :ARG1 (o / or\n            :op2 (w / whip-01)))",
      "(o / or\n   :op3 (t / time\n           :mod (e / even)))",
      "(o / or\n   :op1 (f2 / fine-01)\n   :op2 (w / whip-01))",
      "(o / or\n   :op1 (f2 / fine-01)\n   :op2 (w / whip-01)\n   :op3 (t / time\n           :mod (j2 / jail)))",
      "(o / or\n   :op1 (f2 / fine-01)\n   :op2 (w / whip-01)\n   :op3 (t / time\n           :mod (e / even)))",
      "(c / cause-01\n   :ARG0 (s / share-01\n            :ARG2 (p2 / person\n                      :name (n3 / name\n                                :op1 \"Goddess\")))\n   :ARG1 (b / ban-01)\n   :mod (a / also))",
      "(c / cause-01\n   :ARG0 (s / share-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Nike\")))\n   :ARG1 (b / ban-01)\n   :degree (p3 / part))",
      "(c / cause-01\n   :ARG0 (s / share-01\n            :ARG1 (n2 / name\n                      :poss (p / person :name (n / name :op1 \"Nike\"))))\n   :ARG1 (b / ban-01)\n   :degree (p3 / part))",
      "(c / cause-01\n   :ARG0 (s / share-01\n            :ARG2 (p2 / person\n                      :name (n3 / name\n                                :op1 \"Goddess\")))\n   :ARG1 (b / ban-01)\n   :degree (p3 / part))",
      "(s / share-01\n   :ARG1 (n2 / name\n             :poss (p / person :name (n / name :op1 \"Nike\")))\n   :ARG2 (p2 / person\n             :name (n3 / name\n                       :op1 \"Goddess\")))",
      "(s / say-01\n   :ARG1 (s2 / sound-01\n             :ARG2 (w / word\n                      :mod (s3 / slang\n                               :mod (s4 / sex)))))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (c / command-02))\n   :ARG1 (s2 / sound-01\n             :mod (a / also)))",
      "(s2 / sound-01\n    :ARG1 (n / name\n             :poss (ii / it))\n    :ARG2 (w / word\n             :mod (s3 / slang\n                      :mod (s4 / sex))))",
      "(s2 / sound-01\n    :ARG1 (n / name\n             :poss (ii / it))\n    :mod (a / also))",
      "(s2 / sound-01\n    :ARG1 (n / name\n             :poss (ii / it))\n    :ARG2 (w / word\n             :mod (s3 / slang\n                      :mod (s4 / sex)))\n    :mod (a / also))",
      "(b / ban-01\n   :ARG1 (w / wear-01\n            :ARG0 (p / person\n                     :ARG0 (l / live-01\n                              :location (u / under\n                                           :op1 (c / criminal-organization\n                                                   :name (n / name\n                                                            :op1 \"ISIS\")))))))",
      "(b / ban-01\n   :ARG1 (w / wear-01\n            :ARG0 (p / person\n                     :mod (t / that)))\n   :time (a / already))",
      "(b / ban-01\n   :ARG1 (w / wear-01\n            :ARG1 (o / or\n                     :op1 (j / jeans)))\n   :time (a / already))",
      "(b / ban-01\n   :ARG1 (w / wear-01\n            :ARG0 (p / person\n                     :ARG0 (l / live-01\n                              :location (u / under\n                                           :op1 (c / criminal-organization\n                                                   :name (n / name\n                                                            :op1 \"ISIS\"))))))\n   :time (a / already))",
      "(b / ban-01\n   :ARG1 (w / wear-01\n            :ARG1 (o / or\n                     :op2 (ii / item\n                              :ARG0 (c3 / carry-01\n                                        :ARG1 (o2 / or\n                                                  :op1 (l2 / language\n                                                           :ARG0 (p2 / provoke-01)))))))\n   :time (a / already))"
    ],
    "smus": [
      "Jihadis face whipping.",
      "Or even time.",
      "Fines or whipping.",
      "Fines, whipping or jail time.",
      "Fines, whipping, or even time.",
      "The ban was also due to sharing with the Goddess.",
      "Part of the ban was due to Nike sharing.",
      "Part of the ban is because of Nike's name sharing.",
      "The ban was partly due to sharing with Goddess.",
      "Sharing Nike's name with the Goddess.",
      "Sound like slang words, say.",
      "Commands say it also sounds.",
      "Its name sounds like slang words.",
      "Its name also sounds.",
      "Its name also sounds like slang words.",
      "People living under ISIS are banned from wearing.",
      "Those people are already banned from wearing.",
      "Wearing jeans is already banned.",
      "People living under ISIS are already banned from wearing clothing.",
      "Wearing or carrying items that are in provocative language is already banned."
    ]
  },
  {
    "instance_id": "realsumm-64",
    "summary": "Lorraine Bracco was asked by The Sopranos creator to be Carmela . Lorraine Bracco turned The Sopranos creator down because Lorraine Bracco played a mobster 's wife in Martin Scorsese 's Goodfellas in 1990 . Convinced showrunner David Chase to let Lorraine Bracco play the role of Dr. Jennifer Melfi .",
    "summary_trees": [
      "# ::snt Lorraine Bracco was asked by The Sopranos creator to be Carmela .\n(a / ask-02\n      :ARG0 (p / person\n            :ARG0-of (c / create-01\n                  :ARG1 (b / broadcast-program\n                        :name (n / name\n                              :op1 \"The\"\n                              :op2 \"Sopranos\"))))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Carmela\")\n            :domain (p3 / person\n                  :name (n3 / name\n                        :op1 \"Lorraine\"\n                        :op2 \"Bracco\")))\n      :ARG2 p3)",
      "# ::snt Lorraine Bracco turned The Sopranos creator down because Lorraine Bracco played a mobster 's wife in Martin Scorsese 's Goodfellas in 1990 .\n(t / turn-down-05\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Lorraine\"\n                  :op2 \"Bracco\"))\n      :ARG1 (p2 / person\n            :ARG0-of (c / create-01\n                  :ARG1 (b / broadcast-program\n                        :name (n2 / name\n                              :op1 \"The\"\n                              :op2 \"Sopranos\"))))\n      :ARG1-of (c2 / cause-01\n            :ARG0 (p3 / play-02\n                  :ARG0 p\n                  :ARG1 (p4 / person\n                        :ARG0-of (h / have-rel-role-91\n                              :ARG1 (m / mobster)\n                              :ARG2 (w / wife)))\n                  :time (d / date-entity\n                        :year 1990)\n                  :subevent-of (w2 / work-of-art\n                        :name (n3 / name\n                              :op1 \"Goodfellas\")\n                        :poss (p5 / person\n                              :name (n4 / name\n                                    :op1 \"Martin\"\n                                    :op2 \"Scorsese\"))))))",
      "# ::snt Convinced showrunner David Chase to let Lorraine Bracco play the role of Dr. Jennifer Melfi .\n(c / convince-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"David\"\n                  :op2 \"Chase\")\n            :ARG0-of (r / run-01\n                  :ARG1 (s / show)))\n      :ARG2 (l / let-01\n            :ARG0 p\n            :ARG1 (p2 / play-02\n                  :ARG0 (p3 / person\n                        :name (n2 / name\n                              :op1 \"Lorraine\"\n                              :op2 \"Bracco\"))\n                  :ARG1 (d / doctor\n                        :name (n3 / name\n                              :op1 \"Jennifer\"\n                              :op2 \"Melfi\")))))"
    ],
    "tree": [
      "(a / ask-02\n   :ARG0 (p / person\n            :ARG0 (c / create-01\n                     :ARG1 (b / broadcast-program\n                              :name (n / name\n                                       :op1 \"The\"\n                                       :op2 \"Sopranos\"))))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Carmela\")))",
      "(c / create-01\n   :ARG1 (b / broadcast-program\n            :name (n / name\n                     :op1 \"The\"\n                     :op2 \"Sopranos\")))",
      "(b / broadcast-program\n   :name (n / name\n            :op1 \"The\"\n            :op2 \"Sopranos\"))",
      "(p2 / person\n    :domain (p3 / person\n                :name (n3 / name\n                          :op1 \"Lorraine\"\n                          :op2 \"Bracco\")))",
      "(p3 / person\n    :name (n3 / name\n              :op1 \"Lorraine\"\n              :op2 \"Bracco\"))",
      "(t / turn-down-05\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lorraine\"\n                     :op2 \"Bracco\")))",
      "(t / turn-down-05\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lorraine\"\n                     :op2 \"Bracco\"))\n   :ARG1 (p2 / person\n             :ARG0 (c / create-01\n                      :ARG1 (b / broadcast-program\n                               :name (n2 / name\n                                         :op1 \"The\"\n                                         :op2 \"Sopranos\")))))",
      "(c2 / cause-01\n    :ARG0 (p3 / play-02\n              :ARG0 (p / person :name (n / name :op1 \"Lorraine\" :op2 \"Bracco\"))))",
      "(p3 / play-02\n    :subevent (w2 / work-of-art\n                  :name (n3 / name\n                            :op1 \"Goodfellas\")))",
      "(p3 / play-02\n    :time (d / date-entity\n             :year 1990)\n    :subevent (w2 / work-of-art\n                  :name (n3 / name\n                            :op1 \"Goodfellas\")))",
      "(c / convince-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"David\"\n                     :op2 \"Chase\"))\n   :ARG2 (l / let-01\n            :ARG1 (p2 / play-02\n                      :ARG0 (p3 / person\n                                :name (n2 / name\n                                          :op1 \"Lorraine\"\n                                          :op2 \"Bracco\")))))",
      "(p / person\n   :name (n / name\n            :op1 \"David\"\n            :op2 \"Chase\")\n   :ARG0 (r / run-01\n            :ARG1 (s / show)))",
      "(l / let-01\n   :ARG1 (p2 / play-02\n             :ARG0 (p3 / person\n                       :name (n2 / name\n                                 :op1 \"Lorraine\"\n                                 :op2 \"Bracco\"))))",
      "(p2 / play-02\n    :ARG1 (d / doctor\n             :name (n3 / name\n                       :op1 \"Jennifer\"\n                       :op2 \"Melfi\")))",
      "(p3 / person\n    :name (n2 / name\n              :op1 \"Lorraine\"\n              :op2 \"Bracco\"))"
    ],
    "smus": [
      "The creators of The Sopranos have asked Carmela.",
      "The Sopranos was a creation.",
      "The Sopranos.",
      "Lorraine Bracco is a person.",
      "Lorraine Bracco",
      "Lorraine Bracco turned down.",
      "Lorraine Bracco turned down the creator of \"The Sopranos\".",
      "Because Lorraine Bracco played.",
      "Played in Goodfellas.",
      "Played in 1990 in Goodfellas.",
      "David Chase was convinced to let Lorraine Bracco play.",
      "Show run by David Chase.",
      "Let Lorraine Bracco play.",
      "Play Doctor Jennifer Melfi.",
      "Lorraine Bracco"
    ]
  },
  {
    "instance_id": "realsumm-65",
    "summary": "Kevin Carr set off on Kevin Carr epic journey from Haytor , Dartmoor in July 2013 . Kevin Carr is now less than 24 hours away from completing his epic journey . Kevin Carr ran around the world unsupported - taking Kevin Carr own tent with Kevin Carr . Kevin Carr is set to break the previous record held by an Australian by 24 hours .",
    "summary_trees": [
      "# ::snt Kevin Carr set off on Kevin Carr epic journey from Haytor , Dartmoor in July 2013 .\n(s / set-off-33\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Kevin\"\n                  :op2 \"Carr\"))\n      :ARG1 (j / journey-01\n            :ARG0 p\n            :mod (e / epic))\n      :source (l / location\n            :name (n2 / name\n                  :op1 \"Haytor\")\n            :part-of (ii / island\n                  :name (n3 / name\n                        :op1 \"Dartmoor\")))\n      :time (d / date-entity\n            :month 7\n            :year 2013))",
      "# ::snt Kevin Carr is now less than 24 hours away from completing his epic journey .\n(b / be-temporally-at-91\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Kevin\"\n                  :op2 \"Carr\"))\n      :ARG2 (a / away\n            :op1 (c / complete-01\n                  :ARG0 p\n                  :ARG1 (j / journey-01\n                        :ARG0 p\n                        :mod (e / epic)))\n            :duration (l / less-than\n                  :op1 (t / temporal-quantity\n                        :quant 24\n                        :unit (h / hour))))\n      :time (n2 / now))",
      "# ::snt Kevin Carr ran around the world unsupported - taking Kevin Carr own tent with Kevin Carr .\n(r / run-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Kevin\"\n                  :op2 \"Carr\"))\n      :path (a / around\n            :op1 (w / world))\n      :manner (s / support-01\n            :polarity -\n            :ARG1 p)\n      :manner (t / take-01\n            :ARG0 p\n            :ARG1 (t2 / tent\n                  :poss p)\n            :prep-with p))",
      "# ::snt Kevin Carr is set to break the previous record held by an Australian by 24 hours .\n(s / set-08\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Kevin\"\n                  :op2 \"Carr\"))\n      :ARG2 (b / break-02\n            :ARG0 p\n            :ARG1 (r / record\n                  :time (p2 / previous)\n                  :ARG1-of (h / hold-01\n                        :ARG0 (p3 / person\n                              :mod (c / country\n                                    :name (n2 / name\n                                          :op1 \"Australia\")))))\n            :extent (t / temporal-quantity\n                  :quant 24\n                  :unit (h2 / hour))))"
    ],
    "tree": [
      "(s / set-off-33\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kevin\"\n                     :op2 \"Carr\")))",
      "(s / set-off-33\n   :time (d / date-entity\n            :year 2013))",
      "(s / set-off-33\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kevin\"\n                     :op2 \"Carr\"))\n   :time (d / date-entity\n            :month 7))",
      "(s / set-off-33\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kevin\"\n                     :op2 \"Carr\"))\n   :time (d / date-entity\n            :year 2013))",
      "(s / set-off-33\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kevin\"\n                     :op2 \"Carr\"))\n   :ARG1 (j / journey-01\n            :ARG0 p)\n   :source (l / location\n              :name (n2 / name\n                        :op1 \"Haytor\"))\n   :time (d / date-entity\n            :year 2013))",
      "(b / be-temporally-at-91\n   :ARG2 (a / away\n            :duration (l / less-than\n                         :op1 (t / temporal-quantity\n                                 :quant 24))))",
      "(b / be-temporally-at-91\n   :ARG2 (a / away\n            :duration (l / less-than\n                         :op1 (t / temporal-quantity\n                                 :quant 24)))\n   :time (n2 / now))",
      "(b / be-temporally-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Kevin\"\n                     :op2 \"Carr\"))\n   :ARG2 (a / away\n            :duration (l / less-than\n                         :op1 (t / temporal-quantity\n                                 :quant 24)))\n   :time (n2 / now))",
      "(a / away\n   :op1 (c / complete-01\n           :ARG1 (j / journey-01\n                    :mod (e / epic)))\n   :duration (l / less-than\n                :op1 (t / temporal-quantity\n                        :quant 24)))",
      "(r / run-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kevin\"\n                     :op2 \"Carr\")))",
      "(r / run-02\n   :path (a / around\n            :op1 (w / world)))",
      "(r / run-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kevin\"\n                     :op2 \"Carr\"))\n   :path (a / around\n            :op1 (w / world)))",
      "(r / run-02\n   :path (a / around\n            :op1 (w / world))\n   :manner (s / support-01\n              :polarity -\n              :ARG1 (p / person :name (n / name :op1 \"Kevin\" :op2 \"Carr\"))))",
      "(s / set-08\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Kevin\"\n                     :op2 \"Carr\")))",
      "(s / set-08\n   :ARG2 (b / break-02\n            :ARG0 (p / person :name (n / name :op1 \"Kevin\" :op2 \"Carr\"))))",
      "(s / set-08\n   :ARG2 (b / break-02\n            :ARG1 (r / record\n                     :time (p2 / previous))))",
      "(s / set-08\n   :ARG2 (b / break-02\n            :extent (t / temporal-quantity\n                       :quant 24)))"
    ],
    "smus": [
      "Kevin Carr set off.",
      "Set off in 2013.",
      "Kevin Carr set off in July.",
      "Kevin Carr set off in 2013.",
      "Kevin Carr set off on a journey from Haytor in 2013.",
      "less than 24 hours away.",
      "less than 24 hours away now.",
      "Kevin Carr is less than 24 hours away now.",
      "It's less than 24 hours away from completing the epic journey.",
      "Kevin Carr ran.",
      "ran around the world.",
      "Kevin Carr ran around the world.",
      "Kevin Carr ran around the world unsupported.",
      "Kevin Carr is set.",
      "Kevin Carr is set to break.",
      "Set to break previous record.",
      "Set to break in 24 hours."
    ]
  },
  {
    "instance_id": "realsumm-66",
    "summary": "David Axelrod masterminded two Obama presidential election victories . David Axelrod was hired by Labour leader Ed Miliband amid great fanfare last year . Revealed at a book launch that David Axelrod is not resident for tax purposes in UK . Labour confirms Labour pays David Axelrod in dollars through consultancy firm .",
    "summary_trees": [
      "# ::snt David Axelrod masterminded two Obama presidential election victories .\n(m / mastermind-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"David\"\n                  :op2 \"Axelrod\"))\n      :ARG1 (w / win-01\n            :quant 2\n            :ARG1 (e / elect-01\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Obama\"))\n                  :ARG2 (p3 / president))))",
      "# ::snt David Axelrod was hired by Labour leader Ed Miliband amid great fanfare last year .\n(h / hire-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Ed\"\n                  :op2 \"Miliband\")\n            :ARG0-of (l / lead-02\n                  :ARG1 (p2 / political-party\n                        :name (n2 / name\n                              :op1 \"Labour\"))))\n      :ARG1 (p3 / person\n            :name (n3 / name\n                  :op1 \"David\"\n                  :op2 \"Axelrod\"))\n      :time (y / year\n            :mod (l2 / last))\n      :manner (f / fanfare\n            :mod (g / great)))",
      "# ::snt Revealed at a book launch that David Axelrod is not resident for tax purposes in UK .\n(r / reveal-01\n      :ARG1 (r2 / reside-01\n            :polarity -\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"David\"\n                        :op2 \"Axelrod\"))\n            :ARG1 (c / country\n                  :name (n2 / name\n                        :op1 \"UK\"))\n            :purpose (t / tax-01))\n      :location (l / launch-01\n            :ARG1 (b / book)))",
      "# ::snt Labour confirms Labour pays David Axelrod in dollars through consultancy firm .\n(c / confirm-01\n      :ARG0 (p / political-party\n            :name (n / name\n                  :op1 \"Labour\"))\n      :ARG1 (p2 / pay-01\n            :ARG0 p\n            :ARG2 (p3 / person\n                  :name (n2 / name\n                        :op1 \"David\"\n                        :op2 \"Axelrod\"))\n            :manner (d / dollar)\n            :instrument (f / firm\n                  :ARG0-of (c2 / consult-01))))"
    ],
    "tree": [
      "(m / mastermind-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"David\"\n                     :op2 \"Axelrod\")))",
      "(m / mastermind-01\n   :ARG1 (w / win-01\n            :quant 2))",
      "(m / mastermind-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"David\"\n                     :op2 \"Axelrod\"))\n   :ARG1 (w / win-01\n            :quant 2))",
      "(m / mastermind-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"David\"\n                     :op2 \"Axelrod\"))\n   :ARG1 (w / win-01\n            :ARG1 (e / elect-01\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Obama\")))))",
      "(p / person\n   :name (n / name\n            :op1 \"David\"\n            :op2 \"Axelrod\"))",
      "(h / hire-01\n   :ARG1 (p3 / person\n             :name (n3 / name\n                       :op1 \"David\"\n                       :op2 \"Axelrod\")))",
      "(h / hire-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ed\"\n                     :op2 \"Miliband\"))\n   :ARG1 (p3 / person\n             :name (n3 / name\n                       :op1 \"David\"\n                       :op2 \"Axelrod\")))",
      "(h / hire-01\n   :ARG1 (p3 / person\n             :name (n3 / name\n                       :op1 \"David\"\n                       :op2 \"Axelrod\"))\n   :time (y / year\n            :mod (l2 / last)))",
      "(h / hire-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ed\"\n                     :op2 \"Miliband\"))\n   :ARG1 (p3 / person\n             :name (n3 / name\n                       :op1 \"David\"\n                       :op2 \"Axelrod\"))\n   :time (y / year\n            :mod (l2 / last)))",
      "(h / hire-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ed\"\n                     :op2 \"Miliband\"))\n   :ARG1 (p3 / person\n             :name (n3 / name\n                       :op1 \"David\"\n                       :op2 \"Axelrod\"))\n   :time (y / year\n            :mod (l2 / last))\n   :manner (f / fanfare\n              :mod (g / great)))",
      "(r / reveal-01\n   :ARG1 (r2 / reside-01\n             :polarity -))",
      "(r / reveal-01\n   :location (l / launch-01\n                :ARG1 (b / book)))",
      "(r / reveal-01\n   :ARG1 (r2 / reside-01\n             :polarity -)\n   :location (l / launch-01\n                :ARG1 (b / book)))",
      "(r / reveal-01\n   :ARG1 (r2 / reside-01\n             :purpose (t / tax-01))\n   :location (l / launch-01\n                :ARG1 (b / book)))",
      "(p / person\n   :name (n / name\n            :op1 \"David\"\n            :op2 \"Axelrod\"))",
      "(c / confirm-01\n   :ARG0 (p / political-party\n            :name (n / name\n                     :op1 \"Labour\")))",
      "(c / confirm-01\n   :ARG1 (p2 / pay-01\n             :manner (d / dollar)))",
      "(c / confirm-01\n   :ARG0 (p / political-party\n            :name (n / name\n                     :op1 \"Labour\"))\n   :ARG1 (p2 / pay-01\n             :ARG0 p))",
      "(c / confirm-01\n   :ARG0 (p / political-party\n            :name (n / name\n                     :op1 \"Labour\"))\n   :ARG1 (p2 / pay-01\n             :manner (d / dollar)))",
      "(p / political-party\n   :name (n / name\n            :op1 \"Labour\"))"
    ],
    "smus": [
      "David Axelrod masterminded.",
      "Masterminded two victories.",
      "David Axelrod masterminded the two victories.",
      "David Axelrod masterminded the victory in the Obama election.",
      "David Axelrod",
      "David Axelrod was hired.",
      "Ed Miliband has hired David Axelrod.",
      "David Axelrod was hired last year.",
      "Ed Miliband hired David Axelrod last year.",
      "Ed Miliband hired David Axelrod last year with great fanfare.",
      "It was revealed that the residence was not residing.",
      "revealed at book launch",
      "Not residing was revealed at the book's launch.",
      "The residency for tax purposes was revealed at the book's launch.",
      "David Axelrod",
      "Labour confirms.",
      "confirms payments are made in dollars.",
      "Labour confirms it pays.",
      "Labour confirms dollars payments.",
      "Labour."
    ]
  },
  {
    "instance_id": "realsumm-67",
    "summary": "HBO is the US network behind Game of Thrones and the Sopranos . Service is available on Apple TV and iOS exclusively for three months . Apple TV has also cut the price of Apple TV system from $ 99 ( \u00a3 65 ) to $ 69 .",
    "summary_trees": [
      "# ::snt HBO is the US network behind Game of Thrones and the Sopranos .\n(n / network\n      :mod (c / country\n            :name (n2 / name\n                  :op1 \"US\"))\n      :domain (c2 / company\n            :name (n3 / name\n                  :op1 \"HBO\"))\n      :location (b / behind\n            :op1 (a / and\n                  :op1 (b2 / broadcast-program\n                        :name (n4 / name\n                              :op1 \"Game\"\n                              :op2 \"of\"\n                              :op3 \"Thrones\"))\n                  :op2 (b3 / broadcast-program\n                        :name (n5 / name\n                              :op1 \"The\"\n                              :op2 \"Sopranos\")))))",
      "# ::snt Service is available on Apple TV and iOS exclusively for three months .\n(a / available-02\n      :ARG2 (s / service)\n      :location (a2 / and\n            :op1 (p / product\n                  :name (n / name\n                        :op1 \"Apple\"\n                        :op2 \"TV\"))\n            :op2 (p2 / product\n                  :name (n2 / name\n                        :op1 \"iOS\")))\n      :duration (t / temporal-quantity\n            :quant 3\n            :unit (m / month)\n            :ARG0-of (e / exclusive-02)))",
      "# ::snt Apple TV has also cut the price of Apple TV system from $ 99 ( \u00a3 65 ) to $ 69 .\n(c / cut-02\n      :ARG0 (p / product\n            :name (n / name\n                  :op1 \"Apple\"\n                  :op2 \"TV\"))\n      :ARG1 (p2 / price-01\n            :ARG1 p)\n      :ARG3 (m / monetary-quantity\n            :quant 99\n            :unit (d / dollar))\n      :ARG4 (m2 / monetary-quantity\n            :quant 69\n            :unit (d2 / dollar))\n      :mod (a / also))"
    ],
    "tree": [
      "(n / network\n   :domain (c2 / company\n               :name (n3 / name\n                         :op1 \"HBO\")))",
      "(n / network\n   :mod (c / country\n           :name (n2 / name\n                     :op1 \"US\"))\n   :domain (c2 / company\n               :name (n3 / name\n                         :op1 \"HBO\")))",
      "(n / network\n   :domain (c2 / company\n               :name (n3 / name\n                         :op1 \"HBO\"))\n   :location (b / behind\n                :op1 (b2 / broadcast-program\n                         :name (n4 / name\n                                   :op1 \"Game\"\n                                   :op2 \"of\"\n                                   :op3 \"Thrones\"))))",
      "(n / network\n   :mod (c / country\n           :name (n2 / name\n                     :op1 \"US\"))\n   :domain (c2 / company\n               :name (n3 / name\n                         :op1 \"HBO\"))\n   :location (b / behind\n                :op1 (b2 / broadcast-program\n                         :name (n4 / name\n                                   :op1 \"Game\"\n                                   :op2 \"of\"\n                                   :op3 \"Thrones\"))))",
      "(n / network\n   :mod (c / country\n           :name (n2 / name\n                     :op1 \"US\"))\n   :domain (c2 / company\n               :name (n3 / name\n                         :op1 \"HBO\"))\n   :location (b / behind\n                :op1 (b3 / broadcast-program\n                         :name (n5 / name\n                                   :op1 \"The\"\n                                   :op2 \"Sopranos\"))))",
      "(a / available-02\n   :location (p / product\n                :name (n / name\n                         :op1 \"Apple\"\n                         :op2 \"TV\")))",
      "(a / available-02\n   :ARG2 (s / service)\n   :location (p / product\n                :name (n / name\n                         :op1 \"Apple\"\n                         :op2 \"TV\")))",
      "(a / available-02\n   :ARG2 (s / service)\n   :location (p2 / product\n                 :name (n2 / name\n                           :op1 \"iOS\")))",
      "(a2 / and\n    :op2 (p2 / product\n             :name (n2 / name\n                       :op1 \"iOS\")))",
      "(a2 / and\n    :op1 (p / product\n            :name (n / name\n                     :op1 \"Apple\"\n                     :op2 \"TV\"))\n    :op2 (p2 / product\n             :name (n2 / name\n                       :op1 \"iOS\")))",
      "(c / cut-02\n   :ARG1 (p2 / price-01\n             :ARG1 (p / product :name (n / name :op1 \"Apple\" :op2 \"TV\")))\n   :ARG4 (m2 / monetary-quantity\n             :quant 69))",
      "(c / cut-02\n   :ARG1 (p2 / price-01\n             :ARG1 (p / product :name (n / name :op1 \"Apple\" :op2 \"TV\")))\n   :mod (a / also))",
      "(c / cut-02\n   :ARG1 (p2 / price-01\n             :ARG1 (p / product :name (n / name :op1 \"Apple\" :op2 \"TV\")))\n   :ARG3 (m / monetary-quantity\n            :quant 99)\n   :ARG4 (m2 / monetary-quantity\n             :quant 69))",
      "(c / cut-02\n   :ARG1 (p2 / price-01\n             :ARG1 (p / product :name (n / name :op1 \"Apple\" :op2 \"TV\")))\n   :ARG4 (m2 / monetary-quantity\n             :quant 69)\n   :mod (a / also))",
      "(c / cut-02\n   :ARG1 (p2 / price-01\n             :ARG1 (p / product :name (n / name :op1 \"Apple\" :op2 \"TV\")))\n   :ARG3 (m / monetary-quantity\n            :quant 99)\n   :ARG4 (m2 / monetary-quantity\n             :quant 69)\n   :mod (a / also))"
    ],
    "smus": [
      "HBO is a network.",
      "HBO is a US network.",
      "HBO is the network behind Game of Thrones.",
      "HBO is the US network behind Game of Thrones.",
      "HBO is the US network behind The Sopranos.",
      "available on Apple TV.",
      "Service is available on Apple TV.",
      "Service is available on iOS.",
      "and iOS.",
      "Apple TV and iOS.",
      "Apple TV price cut to 69.",
      "Apple TV's price was also cut.",
      "Apple TV price cut from 99 to 69.",
      "Apple TV's price was also cut to 69.",
      "Apple TV's price was also cut from 99 to 69."
    ]
  },
  {
    "instance_id": "realsumm-68",
    "summary": "Huma Abedin came under fire for not tipping at Chipotle in Iowa . Huma Abedin is Hillary Clinton 's most trusted aide for the 2016 campaign . On Saturday , Huma Abedin and husband Anthony Weiner went for Mexican lunch . It is one of she and husband Anthony Weiner final weekends before the 2016 campaign gets into swing .",
    "summary_trees": [
      "# ::snt Huma Abedin came under fire for not tipping at Chipotle in Iowa .\n(f / fire-02\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Huma\"\n                  :op2 \"Amin\"))\n      :ARG2 (t / tip-02\n            :polarity -\n            :ARG0 p\n            :ARG2 (c / company\n                  :name (n2 / name\n                        :op1 \"Chipotle\")\n                  :location (s / state\n                        :name (n3 / name\n                              :op1 \"Iowa\")))))",
      "# ::snt Huma Abedin is Hillary Clinton 's most trusted aide for the 2016 campaign .\n(h / have-rel-role-91\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Huma\"\n                  :op2 \"Abedin\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Hillary\"\n                  :op2 \"Clinton\"))\n      :ARG2 (a / aide\n            :ARG1-of (t / trust-02\n                  :ARG2-of (h2 / have-degree-91\n                        :ARG1 a\n                        :ARG3 (m / most))))\n      :time (c / campaign-01\n            :time (d / date-entity\n                  :year 2016)))",
      "# ::snt On Saturday , Huma Abedin and husband Anthony Weiner went for Mexican lunch .\n(g / go-02\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Huma\"\n                        :op2 \"Abedin\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Anthony\"\n                        :op2 \"Weiner\")\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 p\n                        :ARG2 (h2 / husband))))\n      :ARG4 (l / lunch\n            :mod (c / country\n                  :name (n3 / name\n                        :op1 \"Mexico\")))\n      :time (d / date-entity\n            :weekday (s / saturday)))",
      "# ::snt It is one of she and husband Anthony Weiner final weekends before the 2016 campaign gets into swing .\n(w / weekend\n      :ARG1-of (ii / include-91\n            :ARG2 (w2 / weekend\n                  :mod (f / final)\n                  :time (b / before\n                        :op1 (s / swing-06\n                              :ARG1 (c / campaign-01\n                                    :time (d / date-entity\n                                          :year 2016))))\n                  :poss (a / and\n                        :op1 (s2 / she)\n                        :op2 (p / person\n                              :name (n / name\n                                    :op1 \"Anthony\"\n                                    :op2 \"Weiner\")\n                              :ARG0-of (h / have-rel-role-91\n                                    :ARG1 s2\n                                    :ARG2 (h2 / husband))))))\n      :domain (ii2 / it))"
    ],
    "tree": [
      "(f / fire-02\n   :ARG2 (t / tip-02\n            :polarity -))",
      "(c / company\n   :name (n2 / name\n             :op1 \"Chipotle\"))",
      "(c / company\n   :location (s / state\n                :name (n3 / name\n                          :op1 \"Iowa\")))",
      "(c / company\n   :name (n2 / name\n             :op1 \"Chipotle\")\n   :location (s / state\n                :name (n3 / name\n                          :op1 \"Iowa\")))",
      "(s / state\n   :name (n3 / name\n             :op1 \"Iowa\"))",
      "(h / have-rel-role-91\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Huma\"\n                     :op2 \"Abedin\"))\n   :ARG2 (a / aide\n            :ARG1 (t / trust-02\n                     :ARG2 (h2 / have-degree-91\n                               :ARG1 a))))",
      "(h / have-rel-role-91\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Huma\"\n                     :op2 \"Abedin\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Hillary\"\n                       :op2 \"Clinton\"))\n   :ARG2 (a / aide\n            :ARG1 (t / trust-02\n                     :ARG2 (h2 / have-degree-91\n                               :ARG1 a))))",
      "(h / have-rel-role-91\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Huma\"\n                     :op2 \"Abedin\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Hillary\"\n                       :op2 \"Clinton\"))\n   :ARG2 (a / aide\n            :ARG1 (t / trust-02\n                     :ARG2 (h2 / have-degree-91\n                               :ARG3 (m / most)))))",
      "(h / have-rel-role-91\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Huma\"\n                     :op2 \"Abedin\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Hillary\"\n                       :op2 \"Clinton\"))\n   :ARG2 (a / aide\n            :ARG1 (t / trust-02\n                     :ARG2 (h2 / have-degree-91\n                               :ARG1 a)))\n   :time (c / campaign-01\n            :time (d / date-entity\n                     :year 2016)))",
      "(h / have-rel-role-91\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Huma\"\n                     :op2 \"Abedin\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Hillary\"\n                       :op2 \"Clinton\"))\n   :ARG2 (a / aide\n            :ARG1 (t / trust-02\n                     :ARG2 (h2 / have-degree-91\n                               :ARG3 (m / most))))\n   :time (c / campaign-01\n            :time (d / date-entity\n                     :year 2016)))",
      "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Huma\"\n                     :op2 \"Abedin\"))\n   :ARG4 (l / lunch\n            :mod (c / country\n                    :name (n3 / name\n                              :op1 \"Mexico\"))))",
      "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Huma\"\n                     :op2 \"Abedin\"))\n   :time (d / date-entity\n            :weekday (s / saturday)))",
      "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Huma\"\n                     :op2 \"Abedin\"))\n   :ARG4 (l / lunch\n            :mod (c / country\n                    :name (n3 / name\n                              :op1 \"Mexico\")))\n   :time (d / date-entity\n            :weekday (s / saturday)))",
      "(w / weekend\n   :ARG1 (ii / include-91\n             :ARG2 (w2 / weekend\n                       :time (b / before\n                                :op1 (s / swing-06\n                                        :ARG1 (c / campaign-01\n                                                 :time (d / date-entity\n                                                          :year 2016)))))))",
      "(w / weekend\n   :ARG1 (ii / include-91\n             :ARG2 (w2 / weekend\n                       :mod (f / final)))\n   :domain (ii2 / it))",
      "(w2 / weekend\n    :time (b / before\n             :op1 (s / swing-06\n                     :ARG1 (c / campaign-01\n                              :time (d / date-entity\n                                       :year 2016)))))",
      "(b / before\n   :op1 (s / swing-06\n           :ARG1 (c / campaign-01\n                    :time (d / date-entity\n                             :year 2016))))",
      "(a / and\n   :op1 (s2 / she)\n   :op2 (p / person\n           :name (n / name\n                    :op1 \"Anthony\"\n                    :op2 \"Weiner\")))"
    ],
    "smus": [
      "Fired not tipped.",
      "Chipotle.",
      "Iowa company",
      "Chipotle, Iowa",
      "Iowa",
      "Huma Abedin is an aide who is trusted.",
      "Huma Abedin is Hillary Clinton's trusted aide.",
      "Huma Abedin is Hillary Clinton's most trusted aide.",
      "Huma Abedin was Hillary Clinton's trusted aide during the 2016 campaign.",
      "Huma Abedin was Hillary Clinton's most trusted aide during the 2016 campaign.",
      "Huma Abedin went to a Mexican lunch.",
      "Huma Abedin went Saturday.",
      "Huma Abedin went to a Mexican lunch Saturday.",
      "Weekends before the swing of the 2016 campaign.",
      "It was one of the final weekends.",
      "Weekends before the 2016 campaign is in swing.",
      "before the 2016 campaign takes a swing.",
      "She and Anthony Weiner."
    ]
  },
  {
    "instance_id": "realsumm-69",
    "summary": "Gary fell from 147th most popular British name in 1996 to 1,001st in 2013 . Reached height of Gary popularity in 1964 , when Gary was ranked 16th . Meanwhile , names including Dexter and Jenson are now in the top 100 .",
    "summary_trees": [
      "# ::snt Gary fell from 147th most popular British name in 1996 to 1,001st in 2013 .\n(f / fall-01\n      :ARG1 (n / name\n            :name (n2 / name\n                  :op1 \"Gary\"))\n      :ARG3 (r / rank-01\n            :ARG2 147\n            :ARG1 n\n            :ARG1-of (h / have-degree-91\n                  :ARG2 (p / popular-02\n                        :ARG1 n)\n                  :ARG3 (m / most)\n                  :ARG5 (n3 / name\n                        :mod (c / country\n                              :name (n4 / name\n                                    :op1 \"Britain\"))))\n            :time (d / date-entity\n                  :year 1996))\n      :ARG4 (r2 / rank-01\n            :ARG2 1091\n            :ARG1 n\n            :time (d2 / date-entity\n                  :year 2013)))",
      "# ::snt Reached height of Gary popularity in 1964 , when Gary was ranked 16th .\n(r / reach-01\n      :ARG1 (h / high-02\n            :ARG1 (p / popularity\n                  :poss (p2 / person\n                        :name (n / name\n                              :op1 \"Gary\"))))\n      :time (d / date-entity\n            :year 1964\n            :time-of (r2 / rank-01\n                  :ARG1 p2\n                  :ARG2 16)))",
      "# ::snt Meanwhile , names including Dexter and Jenson are now in the top 100 .\n(t / top-01\n      :ARG1 (n / name\n            :ARG2-of (ii / include-01\n                  :ARG1 (a / and\n                        :op1 (n2 / name\n                              :name (n3 / name\n                                    :op1 \"Dexter\"))\n                        :op2 (n4 / name\n                              :name (n5 / name\n                                    :op1 \"Jenson\")))))\n      :ARG2 100\n      :time (n6 / now)\n      :time (m / meanwhile))"
    ],
    "tree": [
      "(f / fall-01\n   :ARG1 (n / name\n            :name (n2 / name\n                      :op1 \"Gary\")))",
      "(f / fall-01\n   :ARG3 (r / rank-01\n            :ARG1 (n / name :name (n2 / name :op1 \"Gary\")))\n   :ARG4 (r2 / rank-01\n             :time (d2 / date-entity\n                       :year 2013)))",
      "(f / fall-01\n   :ARG3 (r / rank-01\n            :time (d / date-entity\n                     :year 1996))\n   :ARG4 (r2 / rank-01\n             :time (d2 / date-entity\n                       :year 2013)))",
      "(f / fall-01\n   :ARG1 (n / name\n            :name (n2 / name\n                      :op1 \"Gary\"))\n   :ARG3 (r / rank-01\n            :time (d / date-entity\n                     :year 1996))\n   :ARG4 (r2 / rank-01\n             :time (d2 / date-entity\n                       :year 2013)))",
      "(n / name\n   :name (n2 / name\n             :op1 \"Gary\"))",
      "(r / reach-01\n   :time (d / date-entity\n            :year 1964))",
      "(r / reach-01\n   :time (d / date-entity\n            :time (r2 / rank-01\n                      :ARG1 (p2 / person\n                                :name (n / name\n                                         :op1 \"Gary\")))))",
      "(r / reach-01\n   :ARG1 (h / high-02\n            :ARG1 (p / popularity\n                     :poss (p2 / person\n                               :name (n / name\n                                        :op1 \"Gary\"))))\n   :time (d / date-entity\n            :year 1964))",
      "(r / reach-01\n   :ARG1 (h / high-02\n            :ARG1 (p / popularity\n                     :poss (p2 / person\n                               :name (n / name\n                                        :op1 \"Gary\"))))\n   :time (d / date-entity\n            :time (r2 / rank-01\n                      :ARG2 16)))",
      "(d / date-entity\n   :time (r2 / rank-01\n             :ARG1 (p2 / person :name (n / name :op1 \"Gary\"))))",
      "(t / top-01\n   :ARG1 (n / name\n            :ARG2 (ii / include-01\n                      :ARG1 (n4 / name\n                                :name (n5 / name\n                                          :op1 \"Jenson\")))))",
      "(n / name\n   :ARG2 (ii / include-01\n             :ARG1 (n2 / name\n                       :name (n3 / name\n                                 :op1 \"Dexter\"))))",
      "(ii / include-01\n    :ARG1 (n2 / name\n              :name (n3 / name\n                        :op1 \"Dexter\")))",
      "(ii / include-01\n    :ARG1 (n4 / name\n              :name (n5 / name\n                        :op1 \"Jenson\")))",
      "(n2 / name\n    :name (n3 / name\n              :op1 \"Dexter\"))"
    ],
    "smus": [
      "The name Gary fell.",
      "Gary fell to 2013",
      "The rank fell from 1996 to 2013.",
      "Gary fell from 1996 to 2013.",
      "Gary",
      "Reached in 1964.",
      "Reached when Gary was ranked.",
      "Gary's popularity reached a high in 1964.",
      "Gary's popularity has reached a high at number 16 in the ranking.",
      "When Gary was ranked.",
      "Top names including Jenson",
      "names including the name Dexter",
      "including the names Dexter.",
      "including the names of Jenson.",
      "- names like Dexter."
    ]
  },
  {
    "instance_id": "realsumm-70",
    "summary": "Leanne Mitchell has been dropped by Leanne Mitchell label and sings at a holiday camp . Andrea Begley and Jermain Jackman are yet to become household names . Will 2015 winner Stevie become a chart success or another Voice flop ? .",
    "summary_trees": [
      "# ::snt Leanne Mitchell has been dropped by Leanne Mitchell label and sings at a holiday camp .\n(a / and\n      :op1 (d / drop-05\n            :ARG0 (l / label-01\n                  :ARG2 (p / person\n                        :name (n / name\n                              :op1 \"Leanne\"\n                              :op2 \"Mitchell\")))\n            :ARG1 p)\n      :op2 (s / sing-01\n            :ARG0 p\n            :location (c / camp\n                  :mod (h / holiday))))",
      "# ::snt Andrea Begley and Jermain Jackman are yet to become household names .\n(h / have-11\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Andrea\"\n                        :op2 \"Begley\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Jermain\"\n                        :op2 \"Jackman\")))\n      :ARG1 (y / yet)\n      :ARG2 (b / become-01\n            :ARG1 a\n            :ARG2 (n3 / name\n                  :mod (h2 / household))))",
      "# ::snt Will 2015 winner Stevie become a chart success or another Voice flop ? .\n(b / become-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Stevie\")\n            :ARG0-of (w / win-01\n                  :time (d / date-entity\n                        :year 2015)))\n      :ARG2 (a / amr-choice\n            :op1 (s / succeed-01\n                  :ARG0 p\n                  :ARG1 (c / chart-01))\n            :op2 (f / flop-01\n                  :ARG1 (v / voice-01)\n                  :mod (a2 / another))))"
    ],
    "tree": [
      "(d / drop-05\n   :ARG0 (l / label-01\n            :ARG2 (p / person\n                     :name (n / name))))",
      "(s / sing-01\n   :ARG0 (p / person :name (n / name :op1 \"Leanne\" :op2 \"Mitchell\"))\n   :location (c / camp\n                :mod (h / holiday)))",
      "(h / have-11\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Andrea\"\n                     :op2 \"Begley\"))\n   :ARG1 (y / yet))",
      "(h / have-11\n   :ARG1 (y / yet)\n   :ARG2 (b / become-01\n            :ARG2 (n3 / name\n                      :mod (h2 / household))))",
      "(h / have-11\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Andrea\"\n                     :op2 \"Begley\"))\n   :ARG1 (y / yet)\n   :ARG2 (b / become-01\n            :ARG2 (n3 / name\n                      :mod (h2 / household))))",
      "(a / and\n   :op1 (p / person\n           :name (n / name\n                    :op1 \"Andrea\"\n                    :op2 \"Begley\")))",
      "(b / become-01\n   :ARG2 (a / amr-choice\n            :op1 (s / succeed-01\n                    :ARG1 (c / chart-01))))",
      "(p / person\n   :ARG0 (w / win-01\n            :time (d / date-entity\n                     :year 2015)))",
      "(a / amr-choice\n   :op1 (s / succeed-01\n           :ARG0 (p / person :name (n / name :op1 \"Stevie\"))))\n   :op2 (f / flop-01\n           :mod (a2 / another)))",
      "(a / amr-choice\n   :op1 (s / succeed-01\n           :ARG1 (c / chart-01))\n   :op2 (f / flop-01\n           :ARG1 (v / voice-01)))",
      "(a / amr-choice\n   :op1 (s / succeed-01\n           :ARG1 (c / chart-01))\n   :op2 (f / flop-01\n           :mod (a2 / another)))"
    ],
    "smus": [
      "The label of \"name\" has dropped.",
      "Leanne Mitchell sings at a holiday camp.",
      "Andrea Begley has yet to.",
      "Yet to become a household name.",
      "Andrea Begley has yet to become a household name.",
      "Andrea Begley",
      "became chart success?",
      "The winner in 2015",
      "Steve's success or another flop?",
      "Chart Success or Voice Flop?",
      "Chart success or another flop?"
    ]
  },
  {
    "instance_id": "realsumm-71",
    "summary": "Romanian - born Alexandra Harra , 28 , has become an Instagram star . Model , who 's posed for Playboy , posts selfies with inspirational messages . After dyeing locks black , being hailed as a rival to Kim Kardashian .",
    "summary_trees": [
      "# ::snt Romanian - born Alexandra Harra , 28 , has become an Instagram star .\n(b / become-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Alexandra\"\n                  :op2 \"Harra\")\n            :ARG1-of (b2 / bear-02\n                  :location (c / country\n                        :name (n2 / name\n                              :op1 \"Romania\")))\n            :age (t / temporal-quantity\n                  :quant 28\n                  :unit (y / year)))\n      :ARG2 (s / star\n            :mod (p2 / publication\n                  :name (n3 / name\n                        :op1 \"Instagram\"))))",
      "# ::snt Model , who 's posed for Playboy , posts selfies with inspirational messages .\n(p / post-01\n      :ARG0 (m / model\n            :ARG0-of (p2 / pose-01\n                  :ARG2 (m2 / magazine\n                        :name (n / name\n                              :op1 \"Playboy\"))))\n      :ARG1 (s / selfie\n            :accompanier (m3 / message-01\n                  :ARG0-of (ii / inspire-01))))",
      "# ::snt After dyeing locks black , being hailed as a rival to Kim Kardashian .\n(h / hail-02\n      :ARG2 (r / rival-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Kim\"\n                        :op2 \"Kardinez\")))\n      :time (a / after\n            :op1 (d / dye-01\n                  :ARG1 (l / lock)\n                  :ARG2 (b / black-04\n                        :ARG1 l))))"
    ],
    "tree": [
      "(b / become-01\n   :ARG2 (s / star\n            :mod (p2 / publication\n                     :name (n3 / name\n                               :op1 \"Instagram\"))))",
      "(b / become-01\n   :ARG1 (p / person\n            :ARG1 (b2 / bear-02\n                      :location (c / country\n                                   :name (n2 / name\n                                             :op1 \"Romania\"))))\n   :ARG2 (s / star\n            :mod (p2 / publication\n                     :name (n3 / name\n                               :op1 \"Instagram\"))))",
      "(b / become-01\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :quant 28))\n   :ARG2 (s / star\n            :mod (p2 / publication\n                     :name (n3 / name\n                               :op1 \"Instagram\"))))",
      "(p / person\n   :ARG1 (b2 / bear-02\n             :location (c / country\n                          :name (n2 / name\n                                    :op1 \"Romania\"))))",
      "(p / person\n   :name (n / name\n            :op1 \"Alexandra\"\n            :op2 \"Harra\")\n   :ARG1 (b2 / bear-02\n             :location (c / country\n                          :name (n2 / name\n                                    :op1 \"Romania\")))\n   :age (t / temporal-quantity\n           :quant 28))",
      "(p / post-01\n   :ARG1 (s / selfie\n            :accompanier (m3 / message-01\n                             :ARG0 (ii / inspire-01))))",
      "(p / post-01\n   :ARG0 (m / model\n            :ARG0 (p2 / pose-01\n                      :ARG2 (m2 / magazine\n                                :name (n / name\n                                         :op1 \"Playboy\"))))\n   :ARG1 (s / selfie\n            :accompanier (m3 / message-01\n                             :ARG0 (ii / inspire-01))))",
      "(m / model\n   :ARG0 (p2 / pose-01\n             :ARG2 (m2 / magazine\n                       :name (n / name\n                                :op1 \"Playboy\"))))",
      "(p2 / pose-01\n    :ARG2 (m2 / magazine\n              :name (n / name\n                       :op1 \"Playboy\")))",
      "(s / selfie\n   :accompanier (m3 / message-01\n                    :ARG0 (ii / inspire-01)))",
      "(h / hail-02\n   :ARG2 (r / rival-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Kim\"\n                              :op2 \"Kardinez\")))\n   :time (a / after\n            :op1 (d / dye-01\n                    :ARG2 (b / black-04\n                             :ARG1 (l / lock)))))",
      "(a / after\n   :op1 (d / dye-01\n           :ARG1 (l / lock)))",
      "(a / after\n   :op1 (d / dye-01\n           :ARG2 (b / black-04\n                    :ARG1 (l / lock))))",
      "(d / dye-01\n   :ARG2 (b / black-04\n            :ARG1 (l / lock)))",
      "(d / dye-01\n   :ARG1 (l / lock)\n   :ARG2 (b / black-04\n            :ARG1 l))"
    ],
    "smus": [
      "Has become an Instagram star.",
      "Romanian born has become an Instagram star.",
      "The 28-year-old has become an Instagram star.",
      "Romanian born",
      "Alexandra Harra is a Romanian born.",
      "Posts selfies with inspiring messages",
      "Model posed for Playboy posts selfies with inspirational messages",
      "Model posed for Playboy",
      "Posing for Playboy.",
      "selfies with inspiring messages",
      "Kim Kardinez was hailed as a rival after the locks were dyed black.",
      "After the locks are dyed.",
      "After the locks are dyed black.",
      "The locks are dyed black.",
      "The locks were dyed black."
    ]
  },
  {
    "instance_id": "realsumm-72",
    "summary": "Nadir Ciftci celebrated by blowing a kiss at rival goalkeeper Scott Bain . However , Nadir Ciftci was left blushing as rivals earned impressive victory . impressive victory gave rivals rivals first derby win in more than a decade . Goals from Greg Stewart , Jake McPake and Paul Heffernen secured impressive victory .",
    "summary_trees": [
      "# ::snt Nadir Ciftci celebrated by blowing a kiss at rival goalkeeper Scott Bain .\n(c / celebrate-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Nadir\"\n                  :op2 \"Ciftci\"))\n      :manner (b / blow-01\n            :ARG0 p\n            :ARG1 (k / kiss-01\n                  :ARG0 p\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Scott\"\n                              :op2 \"Bain\")\n                        :ARG0-of (g / goalkeeper-01)\n                        :ARG0-of (r / rival-01\n                              :ARG1 p)))))",
      "# ::snt However , Nadir Ciftci was left blushing as rivals earned impressive victory .\n(c / contrast-01\n      :ARG2 (l / leave-13\n            :ARG0 (e / earn-01\n                  :ARG0 (r / rival)\n                  :ARG1 (w / win-01\n                        :ARG0 r\n                        :ARG0-of (ii / impress-01)))\n            :ARG1 (b / blush-01\n                  :ARG1 (p / person\n                        :name (n / name\n                              :op1 \"Nadia\"\n                              :op2 \"Ciftci\")))))",
      "# ::snt impressive victory gave rivals rivals first derby win in more than a decade .\n(g / give-01\n      :ARG0 (w / win-01\n            :ARG1-of (ii / impress-01))\n      :ARG1 (w2 / win-01\n            :ARG0 (r / rival\n                  :ARG0-of (r2 / rival-01))\n            :ord (o / ordinal-entity\n                  :value 1\n                  :range (m / more-than\n                        :op1 (t / temporal-quantity\n                              :quant 1\n                              :unit (d / decade))))\n            :mod (d2 / derby))\n      :ARG2 r)",
      "# ::snt Goals from Greg Stewart , Jake McPake and Paul Heffernen secured impressive victory .\n(s / secure-02\n      :ARG0 (g / goal\n            :source (a / and\n                  :op1 (p / person\n                        :name (n / name\n                              :op1 \"Greg\"\n                              :op2 \"Stewart\"))\n                  :op2 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Jake\"\n                              :op2 \"McPake\"))\n                  :op3 (p3 / person\n                        :name (n3 / name\n                              :op1 \"Paul\"\n                              :op2 \"Heffernen\"))))\n      :ARG1 (w / win-01\n            :ARG0-of (ii / impress-01)))"
    ],
    "tree": [
      "(c / celebrate-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nadir\"\n                     :op2 \"Ciftci\")))",
      "(c / celebrate-01\n   :manner (b / blow-01\n              :ARG0 (p / person :name (n / name :op1 \"Nadir\" :op2 \"Ciftci\"))\n              :ARG1 (k / kiss-01)))",
      "(p / person\n   :name (n / name\n            :op1 \"Nadir\"\n            :op2 \"Ciftci\"))",
      "(b / blow-01\n   :ARG1 (k / kiss-01\n            :ARG1 (p2 / person\n                      :ARG0 (g / goalkeeper-01))))",
      "(l / leave-13\n   :ARG1 (b / blush-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Nadia\"\n                              :op2 \"Ciftci\"))))",
      "(e / earn-01\n   :ARG1 (w / win-01\n            :ARG0 (r / rival)))",
      "(e / earn-01\n   :ARG1 (w / win-01\n            :ARG0 (ii / impress-01)))",
      "(e / earn-01\n   :ARG0 (r / rival)\n   :ARG1 (w / win-01\n            :ARG0 r))",
      "(e / earn-01\n   :ARG0 (r / rival)\n   :ARG1 (w / win-01\n            :ARG0 (ii / impress-01)))",
      "(g / give-01\n   :ARG1 (w2 / win-01\n             :ARG0 (r / rival\n                      :ARG0 (r2 / rival-01))))",
      "(g / give-01\n   :ARG1 (w2 / win-01\n             :mod (d2 / derby)))",
      "(g / give-01\n   :ARG0 (w / win-01\n            :ARG1 (ii / impress-01))\n   :ARG1 (w2 / win-01\n             :ARG0 (r / rival\n                      :ARG0 (r2 / rival-01))))",
      "(o / ordinal-entity\n   :range (m / more-than\n             :op1 (t / temporal-quantity\n                     :unit (d / decade))))",
      "(s / secure-02\n   :ARG0 (g / goal\n            :source (p / person\n                       :name (n / name\n                                :op1 \"Greg\"\n                                :op2 \"Stewart\")))\n   :ARG1 (w / win-01\n            :ARG0 (ii / impress-01)))",
      "(s / secure-02\n   :ARG0 (g / goal\n            :source (p2 / person\n                        :name (n2 / name\n                                  :op1 \"Jake\"\n                                  :op2 \"McPake\")))\n   :ARG1 (w / win-01\n            :ARG0 (ii / impress-01)))",
      "(s / secure-02\n   :ARG0 (g / goal\n            :source (p3 / person\n                        :name (n3 / name\n                                  :op1 \"Paul\"\n                                  :op2 \"Heffernen\")))\n   :ARG1 (w / win-01\n            :ARG0 (ii / impress-01)))",
      "(g / goal\n   :source (p / person\n              :name (n / name\n                       :op1 \"Greg\"\n                       :op2 \"Stewart\")))",
      "(a / and\n   :op1 (p / person\n           :name (n / name\n                    :op1 \"Greg\"\n                    :op2 \"Stewart\"))\n   :op2 (p2 / person\n            :name (n2 / name\n                      :op1 \"Jake\"\n                      :op2 \"McPake\")))"
    ],
    "smus": [
      "Nadir Ciftci was celebrated.",
      "Nadir ciftci was celebrated by blowing a kiss.",
      "Nadir Ciftci",
      "blowing a kiss to the goalkeeper.",
      "Nadia Ciftci was left blushing.",
      "Earned the rivals a victory.",
      "Earned an impressive win.",
      "The rivals earned a victory.",
      "The rivals earned an impressive victory.",
      "gave the rivals a victory.",
      "gave a derby win.",
      "The impressive win gave rivals a victory.",
      "more than a decade",
      "Greg Stewart's goals secured an impressive victory.",
      "The goals of Jake McPake secured an impressive victory.",
      "Paul Heffernen's goals secured an impressive victory.",
      "Goals from Greg Stewart",
      "Greg Stewart and Jake McPake."
    ]
  },
  {
    "instance_id": "realsumm-73",
    "summary": "Mercedes - Benz Fashion Week Australia 2015 came to a close on Thursday night in Sydney . Stand - out shows included Maticevski , Romance Was Born , Tome , Steven Khalil and Johanna Johnson . Sheer and metallic fabrics and slouchy and voluminous silhouettes were recurring trends .",
    "summary_trees": [
      "# ::snt Mercedes - Benz Fashion Week Australia 2015 came to a close on Thursday night in Sydney .\n(c / close-01\n      :ARG1 (e / event\n            :name (n / name\n                  :op1 \"Mercedes-Benz\"\n                  :op2 \"Fashion\"\n                  :op3 \"Week\"\n                  :op4 \"Australia\")\n            :time (d / date-entity\n                  :year 2015))\n      :time (d2 / date-entity\n            :weekday (t / thursday)\n            :dayperiod (n2 / night))\n      :location (c2 / city\n            :name (n3 / name\n                  :op1 \"Sydney\")))",
      "# ::snt Stand - out shows included Maticevski , Romance Was Born , Tome , Steven Khalil and Johanna Johnson .\n(ii / include-91\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Maticevski\"))\n            :op2 (b / broadcast-program\n                  :name (n2 / name\n                        :op1 \"Romance\"\n                        :op2 \"Was\"\n                        :op3 \"Born\"))\n            :op3 (p2 / person\n                  :name (n3 / name\n                        :op1 \"Tome\"))\n            :op4 (p3 / person\n                  :name (n4 / name\n                        :op1 \"Steven\"\n                        :op2 \"Khalil\"))\n            :op5 (p4 / person\n                  :name (n5 / name\n                        :op1 \"Johanna\"\n                        :op2 \"Johnson\")))\n      :ARG2 (s / show-04\n            :ARG1-of (s2 / stand-out-06)))",
      "# ::snt Sheer and metallic fabrics and slouchy and voluminous silhouettes were recurring trends .\n(t / trend\n      :ARG1-of (r / repeat-01)\n      :domain (a / and\n            :op1 (f / fabric\n                  :mod (s / sheer)\n                  :mod (m / metallic))\n            :op2 (s2 / silhouette\n                  :mod (s3 / slouchy)\n                  :mod (v / voluminous))))"
    ],
    "tree": [
      "(c / close-01\n   :ARG1 (e / event\n            :name (n / name\n                     :op1 \"Mercedes-Benz\"\n                     :op2 \"Fashion\"\n                     :op3 \"Week\"\n                     :op4 \"Australia\"))\n   :time (d2 / date-entity\n             :weekday (t / thursday)))",
      "(c / close-01\n   :ARG1 (e / event\n            :name (n / name\n                     :op1 \"Mercedes-Benz\"\n                     :op2 \"Fashion\"\n                     :op3 \"Week\"\n                     :op4 \"Australia\"))\n   :location (c2 / city\n                 :name (n3 / name\n                           :op1 \"Sydney\")))",
      "(c / close-01\n   :ARG1 (e / event\n            :name (n / name\n                     :op1 \"Mercedes-Benz\"\n                     :op2 \"Fashion\"\n                     :op3 \"Week\"\n                     :op4 \"Australia\"))\n   :time (d2 / date-entity\n             :weekday (t / thursday))\n   :location (c2 / city\n                 :name (n3 / name\n                           :op1 \"Sydney\")))",
      "(e / event\n   :name (n / name\n            :op1 \"Mercedes-Benz\"\n            :op2 \"Fashion\"\n            :op3 \"Week\"\n            :op4 \"Australia\"))",
      "(d2 / date-entity\n    :weekday (t / thursday)\n    :dayperiod (n2 / night))",
      "(ii / include-91\n    :ARG1 (p2 / person\n              :name (n3 / name\n                        :op1 \"Tome\"))\n    :ARG2 (s / show-04\n             :ARG1 (s2 / stand-out-06)))",
      "(ii / include-91\n    :ARG1 (p3 / person\n              :name (n4 / name\n                        :op1 \"Steven\"\n                        :op2 \"Khalil\"))\n    :ARG2 (s / show-04\n             :ARG1 (s2 / stand-out-06)))",
      "(a / and\n   :op2 (b / broadcast-program\n           :name (n2 / name\n                     :op1 \"Romance\"\n                     :op2 \"Was\"\n                     :op3 \"Born\")))",
      "(a / and\n   :op2 (b / broadcast-program\n           :name (n2 / name\n                     :op1 \"Romance\"\n                     :op2 \"Was\"\n                     :op3 \"Born\"))\n   :op3 (p2 / person\n            :name (n3 / name\n                      :op1 \"Tome\"))\n   :op5 (p4 / person\n            :name (n5 / name\n                      :op1 \"Johanna\"\n                      :op2 \"Johnson\")))",
      "(a / and\n   :op3 (p2 / person\n            :name (n3 / name\n                      :op1 \"Tome\"))\n   :op4 (p3 / person\n            :name (n4 / name\n                      :op1 \"Steven\"\n                      :op2 \"Khalil\"))\n   :op5 (p4 / person\n            :name (n5 / name\n                      :op1 \"Johanna\"\n                      :op2 \"Johnson\")))",
      "(t / trend\n   :domain (f / fabric\n              :mod (s / sheer)))",
      "(t / trend\n   :domain (f / fabric\n              :mod (m / metallic)))",
      "(a / and\n   :op2 (s2 / silhouette\n            :mod (s3 / slouchy)))",
      "(a / and\n   :op1 (f / fabric\n           :mod (s / sheer))\n   :op2 (s2 / silhouette\n            :mod (s3 / slouchy)))",
      "(a / and\n   :op1 (f / fabric\n           :mod (m / metallic))\n   :op2 (s2 / silhouette\n            :mod (s3 / slouchy)))"
    ],
    "smus": [
      "Mercedes-Benz Fashion Week Australia closes Thursday",
      "Mercedes-Benz Fashion Week Australia closes in Sydney",
      "Mercedes-Benz Fashion Week Australia closes Thursday in Sydney",
      "Mercedes-Benz Fashion Week Australia",
      "Thursday night",
      "Tome was one of the stand out shows.",
      "Steven Khalil was one of the stand out shows.",
      "And Romance Was Born.",
      "Romance Was Born, Tome, and Johanna Johnson.",
      "Tome, Steven Khalil, and Johanna Johnson.",
      "sheer fabrics are trends.",
      "Metallic fabrics are trends.",
      "and slouchy silhouettes.",
      "sheer fabrics and slouchy silhouettes.",
      "metallic fabrics and slouchy silhouettes"
    ]
  },
  {
    "instance_id": "realsumm-74",
    "summary": "Lindsay Sandiford fears Lindsay Sandiford will be next to face the firing squad . Andrew Chan and Myuran Sukumaran killed after a final KFC bucket meal . Lindsay Sandiford has been on death row in Bali since 2012 . Lindsay Sandiford was convicted of attempting to smuggle \u00a3 1.6million of cocaine in 2012 .",
    "summary_trees": [
      "# ::snt Lindsay Sandiford fears Lindsay Sandiford will be next to face the firing squad .\n(f / fear-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Lindsay\"\n                  :op2 \"Sandiford\"))\n      :ARG1 (n2 / next\n            :domain p\n            :purpose (f2 / face-01\n                  :ARG0 p\n                  :ARG1 (s / squad\n                        :ARG0-of (f3 / fire-01)))))",
      "# ::snt Andrew Chan and Myuran Sukumaran killed after a final KFC bucket meal .\n(k / kill-01\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Andrew\"\n                        :op2 \"Chan\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Myuran\"\n                        :op2 \"Sukumaran\")))\n      :time (a2 / after\n            :op1 (m / meal\n                  :mod (b / bucket)\n                  :mod (c / company\n                        :name (n3 / name\n                              :op1 \"KFC\"))\n                  :mod (f / final))))",
      "# ::snt Lindsay Sandiford has been on death row in Bali since 2012 .\n(b / be-located-at-91\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Lindsay\"\n                  :op2 \"Sandiford\"))\n      :ARG2 (r / row\n            :mod (d / die-01))\n      :location (ii / island\n            :name (n2 / name\n                  :op1 \"Bali\"))\n      :time (s / since\n            :op1 (d2 / date-entity\n                  :year 2012)))",
      "# ::snt Lindsay Sandiford was convicted of attempting to smuggle \u00a3 1.6million of cocaine in 2012 .\n(c / convict-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Lindsay\"\n                  :op2 \"Sandiford\"))\n      :ARG2 (a / attempt-01\n            :ARG0 p\n            :ARG1 (s / smuggle-01\n                  :ARG0 p\n                  :ARG1 (c2 / cocaine\n                        :quant (m / monetary-quantity\n                              :quant 1600000\n                              :unit (p2 / pound))))\n            :time (d / date-entity\n                  :year 2012)))"
    ],
    "tree": [
      "(f / fear-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lindsay\"\n                     :op2 \"Sandiford\")))",
      "(f / fear-01\n   :ARG1 (n2 / next\n             :purpose (f2 / face-01\n                          :ARG0 (p / person :name (n / name :op1 \"Lindsay\" :op2 \"Sandiford\")))))",
      "(f / fear-01\n   :ARG1 (n2 / next\n             :purpose (f2 / face-01\n                          :ARG1 (s / squad\n                                   :ARG0 (f3 / fire-01)))))",
      "(f / fear-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lindsay\"\n                     :op2 \"Sandiford\"))\n   :ARG1 (n2 / next\n             :purpose (f2 / face-01\n                          :ARG1 (s / squad\n                                   :ARG0 (f3 / fire-01)))))",
      "(p / person\n   :name (n / name\n            :op1 \"Lindsay\"\n            :op2 \"Sandiford\"))",
      "(k / kill-01\n   :time (a2 / after\n             :op1 (m / meal\n                     :mod (c / company\n                             :name (n3 / name\n                                       :op1 \"KFC\")))))",
      "(k / kill-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Andrew\"\n                     :op2 \"Chan\"))\n   :time (a2 / after\n             :op1 (m / meal\n                     :mod (b / bucket))))",
      "(k / kill-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Andrew\"\n                     :op2 \"Chan\"))\n   :time (a2 / after\n             :op1 (m / meal\n                     :mod (c / company\n                             :name (n3 / name\n                                       :op1 \"KFC\")))))",
      "(k / kill-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Myuran\"\n                       :op2 \"Sukumaran\"))\n   :time (a2 / after\n             :op1 (m / meal\n                     :mod (b / bucket))))",
      "(k / kill-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Myuran\"\n                       :op2 \"Sukumaran\"))\n   :time (a2 / after\n             :op1 (m / meal\n                     :mod (c / company\n                             :name (n3 / name\n                                       :op1 \"KFC\")))))",
      "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Lindsay\"\n                     :op2 \"Sandiford\"))\n   :ARG2 (r / row\n            :mod (d / die-01)))",
      "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Lindsay\"\n                     :op2 \"Sandiford\"))\n   :ARG2 (r / row\n            :mod (d / die-01))\n   :location (ii / island\n                 :name (n2 / name\n                           :op1 \"Bali\")))",
      "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Lindsay\"\n                     :op2 \"Sandiford\"))\n   :ARG2 (r / row\n            :mod (d / die-01))\n   :time (s / since\n            :op1 (d2 / date-entity\n                     :year 2012)))",
      "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Lindsay\"\n                     :op2 \"Sandiford\"))\n   :location (ii / island\n                 :name (n2 / name\n                           :op1 \"Bali\"))\n   :time (s / since\n            :op1 (d2 / date-entity\n                     :year 2012)))",
      "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Lindsay\"\n                     :op2 \"Sandiford\"))\n   :ARG2 (r / row\n            :mod (d / die-01))\n   :location (ii / island\n                 :name (n2 / name\n                           :op1 \"Bali\"))\n   :time (s / since\n            :op1 (d2 / date-entity\n                     :year 2012)))",
      "(c / convict-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Lindsay\"\n                     :op2 \"Sandiford\")))",
      "(c / convict-01\n   :ARG2 (a / attempt-01\n            :ARG0 (p / person :name (n / name :op1 \"Lindsay\" :op2 \"Sandiford\"))))",
      "(c / convict-01\n   :ARG2 (a / attempt-01\n            :ARG1 (s / smuggle-01\n                     :ARG0 (p / person :name (n / name :op1 \"Lindsay\" :op2 \"Sandiford\")))))",
      "(a / attempt-01\n   :ARG1 (s / smuggle-01\n            :ARG0 (p / person :name (n / name :op1 \"Lindsay\" :op2 \"Sandiford\")))\n   :time (d / date-entity\n            :year 2012))"
    ],
    "smus": [
      "Lindsay Sandiford fears.",
      "Fears what's next for Lindsay Sandiford to face.",
      "Fears the next to face the firing squad.",
      "Lindsay Sandiford fears the next step will be to face a firing squad.",
      "Lindsay Sandiford",
      "Killed after a KFC meal.",
      "Andrew Chan killed after a bucket meal.",
      "Andrew Chan killed after a KFC meal.",
      "Myuran Sukumaran killed after a bucket meal.",
      "Myuran Sukumaran killed after a KFC meal.",
      "Lindsay Sandiford is on death row.",
      "Lindsay Sandiford is on death row on Bali.",
      "Lindsay Sandiford has been on death row since 2012.",
      "Lindsay Sandiford has been in Bali since 2012.",
      "Lindsay Sandiford has been on death row on Bali since 2012.",
      "Lindsay Sandiford was convicted.",
      "Lindsay Sandiford was convicted of attempting.",
      "Lindsay Sandiford was convicted of attempting to smuggle.",
      "Lindsay Sandiford was attempting to smuggle in 2012"
    ]
  },
  {
    "instance_id": "realsumm-75",
    "summary": "Abby Bishop took in Abby Bishop two - day - old niece Zala in August 2013 . Now her two - day - old niece Zala is 20 months old and her two - day - old niece Zala follows Abby Bishop as Abby Bishop travels the world playing for professional basketball teams . Abby Bishop said took was a big decision but Abby Bishop would n't change anything . her two - day - old niece Zala will go with Abby Bishop when Abby Bishop starts playing in the U.S. WNBA in May.",
    "summary_trees": [
      "# ::snt Abby Bishop took in Abby Bishop two - day - old niece Zala in August 2013 .\n(t / take-in-06\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Abby\"\n                  :op2 \"Bishop\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Zala\")\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 p\n                  :ARG2 (n3 / niece))\n            :age (t2 / temporal-quantity\n                  :quant 2\n                  :unit (d / day)))\n      :time (d2 / date-entity\n            :month 8\n            :year 2013))",
      "# ::snt Now her two - day - old niece Zala is 20 months old and her two - day - old niece Zala follows Abby Bishop as Abby Bishop travels the world playing for professional basketball teams .\n(a / and\n      :op1 (a2 / age-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Zala\")\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 (p2 / person\n                              :name (n2 / name\n                                    :op1 \"Abby\"\n                                    :op2 \"Bishop\"))\n                        :ARG2 (n3 / niece)))\n            :ARG2 (t / temporal-quantity\n                  :quant 20\n                  :unit (m / month)))\n      :op2 (f / follow-01\n            :ARG1 p\n            :ARG2 (t2 / travel-01\n                  :ARG0 p2\n                  :ARG1 (w / world)\n                  :manner (p3 / play-01\n                        :ARG0 p2\n                        :ARG1 (t3 / team\n                              :mod (b / basketball)\n                              :mod (p4 / professional)))))\n      :time (n4 / now))",
      "# ::snt Abby Bishop said took was a big decision but Abby Bishop would n't change anything .\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Abby\"\n                  :op2 \"Bishop\"))\n      :ARG1 (c / contrast-01\n            :ARG1 (d / decide-01\n                  :mod (b / big)\n                  :domain (t / take-01))\n            :ARG2 (c2 / change-01\n                  :polarity -\n                  :ARG0 p\n                  :ARG1 (a / anything))))",
      "# ::snt her two - day - old niece Zala will go with Abby Bishop when Abby Bishop starts playing in the U.S. WNBA in May.\n(g / go-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Zala\")\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Abby\"\n                              :op2 \"Bishop\"))\n                  :ARG2 (n3 / niece))\n            :age (t / temporal-quantity\n                  :quant 2\n                  :unit (d / day)))\n      :accompanier p2\n      :time (s / start-01\n            :ARG0 p2\n            :ARG1 (p3 / play-01\n                  :ARG0 p2\n                  :ARG3 (l / league\n                        :name (n4 / name\n                              :op1 \"WNBA\")\n                        :mod (c / country\n                              :name (n5 / name\n                                    :op1 \"U.S.\"))))\n            :time (d2 / date-entity\n                  :month 5)))"
    ],
    "tree": [
      "(t / take-in-06\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Abby\"\n                     :op2 \"Bishop\")))",
      "(t / take-in-06\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Abby\"\n                     :op2 \"Bishop\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Zala\")))",
      "(t / take-in-06\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Abby\"\n                     :op2 \"Bishop\"))\n   :time (d2 / date-entity\n             :month 8))",
      "(t / take-in-06\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Abby\"\n                     :op2 \"Bishop\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Zala\"))\n   :time (d2 / date-entity\n             :month 8))",
      "(a2 / age-01\n    :ARG1 (p / person\n             :name (n / name)))",
      "(s / say-01\n   :ARG1 (c / contrast-01\n            :ARG1 (d / decide-01\n                     :mod (b / big))))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Abby\"\n                     :op2 \"Bishop\"))\n   :ARG1 (c / contrast-01\n            :ARG1 (d / decide-01\n                     :mod (b / big))))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Abby\"\n                     :op2 \"Bishop\"))\n   :ARG1 (c / contrast-01\n            :ARG2 (c2 / change-01\n                      :polarity -)))",
      "(c / contrast-01\n   :ARG1 (d / decide-01\n            :mod (b / big))\n   :ARG2 (c2 / change-01\n             :polarity -))",
      "(c / contrast-01\n   :ARG1 (d / decide-01\n            :mod (b / big))\n   :ARG2 (c2 / change-01\n             :ARG1 (a / anything)))",
      "(g / go-02\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (n3 / niece)))\n   :time (s / start-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Abby\"\n                                :op2 \"Bishop\"))))",
      "(g / go-02\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (n3 / niece)))\n   :time (s / start-01\n            :ARG1 (p3 / play-01\n                      :ARG0 (p2 / person\n                                :name (n2 / name\n                                          :op1 \"Abby\"\n                                          :op2 \"Bishop\")))))",
      "(p / person\n   :name (n / name\n            :op1 \"Zala\")\n   :ARG0 (h / have-rel-role-91\n            :ARG2 (n3 / niece)))",
      "(s / start-01\n   :time (d2 / date-entity\n             :month 5))",
      "(s / start-01\n   :ARG1 (p3 / play-01\n             :ARG0 (p2 / person :name (n2 / name :op1 \"Abby\" :op2 \"Bishop\")))\n   :time (d2 / date-entity\n             :month 5))"
    ],
    "smus": [
      "Abby Bishop took in.",
      "Abby Bishop took in Zala.",
      "In August, Abby Bishop took in.",
      "In August, Abby Bishop took in Zala.",
      "The age of the person is.",
      "But it's a big decision,\" she said.",
      "But it was a big decision, Abby Bishop said.",
      "But it won't change,\" Abby Bishop said.",
      "It's a big decision, but it won't change.",
      "It's a big decision, but it doesn't change anything.",
      "When Abby Bishop starts, her niece will go.",
      "When Abby Bishop starts playing, her niece will go.",
      "Zala is a niece.",
      "Starts May.",
      "Abby Bishop starts playing in May."
    ]
  },
  {
    "instance_id": "realsumm-76",
    "summary": "ONE Pro Cycling preparing to take on Team Sky and Sir Bradley Wiggins . Tour de Yorkshire runs over three stages starting in Bridlington on May 1 . Prior 's team and Yorkshire race inspired by Tour de France Grand Depart .",
    "summary_trees": [
      "# ::snt ONE Pro Cycling preparing to take on Team Sky and Sir Bradley Wiggins .\n(p / prepare-02\n      :ARG0 (o / organization\n            :quant 1\n            :name (n / name\n                  :op1 \"Pro\"\n                  :op2 \"Cycling\"))\n      :ARG1 (t / take-on-21\n            :ARG0 o\n            :ARG1 (a / and\n                  :op1 (t2 / team\n                        :name (n2 / name\n                              :op1 \"Team\"\n                              :op2 \"Sky\"))\n                  :op2 (p2 / person\n                        :name (n3 / name\n                              :op1 \"Sir\"\n                              :op2 \"Bradley\"\n                              :op3 \"Wiggins\")))))",
      "# ::snt Tour de Yorkshire runs over three stages starting in Bridlington on May 1 .\n(r / run-over-04\n      :ARG1 (e / event\n            :name (n / name\n                  :op1 \"Tour\"\n                  :op2 \"de\"\n                  :op3 \"Yorkshire\"))\n      :ARG2 (s / stage\n            :quant 3)\n      :ARG1-of (s2 / start-01\n            :location (c / city\n                  :name (n2 / name\n                        :op1 \"Bridlington\"))\n            :time (d / date-entity\n                  :day 1\n                  :month 5)))",
      "# ::snt Prior 's team and Yorkshire race inspired by Tour de France Grand Depart .\n(ii / inspire-01\n      :ARG0 (t / tour\n            :name (n / name\n                  :op1 \"Tour\"\n                  :op2 \"de\"\n                  :op3 \"France\"\n                  :op4 \"Grand\"\n                  :op5 \"Depart\"))\n      :ARG1 (a / and\n            :op1 (t2 / team\n                  :poss (p / person\n                        :name (n2 / name\n                              :op1 \"Prior\")))\n            :op2 (r / race-02\n                  :ARG0 p\n                  :location (c / county\n                        :name (n3 / name\n                              :op1 \"Yorkshire\")))))"
    ],
    "tree": [
      "(p / prepare-02\n   :ARG0 (o / organization\n            :name (n / name\n                     :op1 \"Pro\"\n                     :op2 \"Cycling\")))",
      "(p / prepare-02\n   :ARG1 (t / take-on-21\n            :ARG1 (t2 / team\n                      :name (n2 / name\n                                :op1 \"Team\"\n                                :op2 \"Sky\"))))",
      "(p / prepare-02\n   :ARG1 (t / take-on-21\n            :ARG1 (p2 / person\n                      :name (n3 / name\n                                :op1 \"Sir\"\n                                :op2 \"Bradley\"\n                                :op3 \"Wiggins\"))))",
      "(p / prepare-02\n   :ARG0 (o / organization\n            :name (n / name\n                     :op1 \"Pro\"\n                     :op2 \"Cycling\"))\n   :ARG1 (t / take-on-21\n            :ARG1 (t2 / team\n                      :name (n2 / name\n                                :op1 \"Team\"\n                                :op2 \"Sky\"))))",
      "(p / prepare-02\n   :ARG0 (o / organization\n            :name (n / name\n                     :op1 \"Pro\"\n                     :op2 \"Cycling\"))\n   :ARG1 (t / take-on-21\n            :ARG1 (p2 / person\n                      :name (n3 / name\n                                :op1 \"Sir\"\n                                :op2 \"Bradley\"\n                                :op3 \"Wiggins\"))))",
      "(r / run-over-04\n   :ARG2 (s / stage\n            :quant 3))",
      "(r / run-over-04\n   :ARG1 (e / event\n            :name (n / name\n                     :op1 \"Tour\"\n                     :op2 \"de\"\n                     :op3 \"Yorkshire\"))\n   :ARG2 (s / stage\n            :quant 3))",
      "(e / event\n   :name (n / name\n            :op1 \"Tour\"\n            :op2 \"de\"\n            :op3 \"Yorkshire\"))",
      "(s2 / start-01\n    :time (d / date-entity\n             :day 1))",
      "(s2 / start-01\n    :time (d / date-entity\n             :month 5))",
      "(ii / inspire-01\n    :ARG0 (t / tour\n             :name (n / name\n                      :op1 \"Tour\"\n                      :op2 \"de\"\n                      :op3 \"France\"\n                      :op4 \"Grand\"\n                      :op5 \"Depart\")))",
      "(ii / inspire-01\n    :ARG0 (t / tour\n             :name (n / name\n                      :op1 \"Tour\"\n                      :op2 \"de\"\n                      :op3 \"France\"\n                      :op4 \"Grand\"\n                      :op5 \"Depart\"))\n    :ARG1 (t2 / team\n              :poss (p / person\n                       :name (n2 / name\n                                 :op1 \"Prior\"))))",
      "(ii / inspire-01\n    :ARG0 (t / tour\n             :name (n / name\n                      :op1 \"Tour\"\n                      :op2 \"de\"\n                      :op3 \"France\"\n                      :op4 \"Grand\"\n                      :op5 \"Depart\"))\n    :ARG1 (r / race-02\n             :location (c / county\n                          :name (n3 / name\n                                    :op1 \"Yorkshire\"))))",
      "(a / and\n   :op1 (t2 / team\n            :poss (p / person\n                     :name (n2 / name\n                               :op1 \"Prior\")))\n   :op2 (r / race-02\n           :location (c / county\n                        :name (n3 / name\n                                  :op1 \"Yorkshire\"))))",
      "(t2 / team\n    :poss (p / person\n             :name (n2 / name\n                       :op1 \"Prior\")))"
    ],
    "smus": [
      "Pro Cycling is preparing.",
      "preparing to take on Team Sky",
      "preparing to take on Sir Bradley Wiggins.",
      "Pro Cycling is preparing to take on Team Sky.",
      "Pro Cycling is preparing to take on Sir Bradley Wiggins.",
      "Three stages were run over.",
      "Tour de Yorkshire has been run over three stages.",
      "Tour de Yorkshire",
      "Starting on the 1st.",
      "Starting in May.",
      "Inspired by Tour de France Grand D\u00e9part.",
      "The Tour de France Grand D\u00e9part has inspired the team of Prior.",
      "The Tour de France Grand Depart has inspired the race in Yorkshire.",
      "Prior's team and the race in Yorkshire.",
      "Prior's team"
    ]
  },
  {
    "instance_id": "realsumm-77",
    "summary": "Woman reported ' someone ' had been run over , but victim was a squirrel . Another man dialled 999 to say Another man dropped a burger which was ' bleeding ' East of England ambulance service warned hoax calls can cost lives .",
    "summary_trees": [
      "# ::snt Woman reported ' someone ' had been run over , but victim was a squirrel .\n(c / contrast-01\n      :ARG1 (r / report-01\n            :ARG0 (w / woman)\n            :ARG1 (r2 / run-over-12\n                  :ARG1 (s / someone)))\n      :ARG2 (s2 / squirrel\n            :domain (v / victim)))",
      "# ::snt Another man dialled 999 to say Another man dropped a burger which was ' bleeding ' East of England ambulance service warned hoax calls can cost lives .\n(a / and\n      :op1 (d / dial-01\n            :ARG0 (m / man\n                  :mod (a2 / another))\n            :ARG1 (p / phone-number-entity\n                  :value 999)\n            :purpose (s / say-01\n                  :ARG0 m\n                  :ARG1 (d2 / drop-01\n                        :ARG0 (m2 / man\n                              :mod (a3 / another))\n                        :ARG1 (b / burger\n                              :ARG1-of (b2 / bleed-01)))))\n      :op2 (w / warn-01\n            :ARG0 (s2 / service\n                  :mod (a4 / ambulance)\n                  :mod (c / country-region\n                        :name (n / name\n                              :op1 \"East\"\n                              :op2 \"of\"\n                              :op3 \"England\")))\n            :ARG1 (p2 / possible-01\n                  :ARG1 (c2 / cost-01\n                        :ARG1 (c3 / call-02\n                              :mod (h / hoax-01))\n                        :ARG2 (l / live-01)))))"
    ],
    "tree": [
      "(c / contrast-01\n   :ARG1 (r / report-01\n            :ARG1 (r2 / run-over-12\n                      :ARG1 (s / someone))))",
      "(c / contrast-01\n   :ARG2 (s2 / squirrel\n             :domain (v / victim)))",
      "(c / contrast-01\n   :ARG1 (r / report-01\n            :ARG0 (w / woman))\n   :ARG2 (s2 / squirrel\n             :domain (v / victim)))",
      "(c / contrast-01\n   :ARG1 (r / report-01\n            :ARG1 (r2 / run-over-12\n                      :ARG1 (s / someone)))\n   :ARG2 (s2 / squirrel\n             :domain (v / victim)))",
      "(r / report-01\n   :ARG0 (w / woman)\n   :ARG1 (r2 / run-over-12\n             :ARG1 (s / someone)))",
      "(d / dial-01\n   :ARG0 (m / man\n            :mod (a2 / another))\n   :ARG1 (p / phone-number-entity\n            :value 999)\n   :purpose (s / say-01\n               :ARG0 m\n               :ARG1 (d2 / drop-01\n                         :ARG0 (m2 / man\n                                   :mod (a3 / another))\n                         :ARG1 (b / burger\n                                  :ARG1 (b2 / bleed-01)))))",
      "(w / warn-01\n   :ARG0 (s2 / service\n             :mod (a4 / ambulance)\n             :mod (c / country-region\n                     :name (n / name))))"
    ],
    "smus": [
      "But someone was reported run over.",
      "But the victim is a squirrel.",
      "The woman reported, but the victim was a squirrel.",
      "Someone was reported run over but the victim was a squirrel.",
      "A woman reported someone being run over.",
      "Another man dialed 999 to say another man dropped a bleeding burger.",
      "The regional ambulance service warned --"
    ]
  },
  {
    "instance_id": "realsumm-78",
    "summary": "Ben Flower returned from Ben Flower six - month ban on Thursday night . Ben Flower made first appearance since Ben Flower punched St Helens ' Lance Hohaia in the opening moments of last season 's Grand Final . Ben Flower received a brilliant reception during 's Wigan 's 30 - 20 victory against Warrington .",
    "summary_trees": [
      "# ::snt Ben Flower returned from Ben Flower six - month ban on Thursday night .\n(r / return-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Ben\"\n                  :op2 \"Flower\"))\n      :ARG3 (b / ban-01\n            :ARG2 p\n            :duration (t / temporal-quantity\n                  :quant 6\n                  :unit (m / month)))\n      :time (d / date-entity\n            :weekday (t2 / thursday)\n            :dayperiod (n2 / night)))",
      "# ::snt Ben Flower made first appearance since Ben Flower punched St Helens ' Lance Hohaia in the opening moments of last season 's Grand Final .\n(a / appear-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Ben\"\n                  :op2 \"Flower\"))\n      :ord (o / ordinal-entity\n            :value 1\n            :range (s / since\n                  :op1 (p2 / punch-01\n                        :ARG0 p\n                        :ARG1 (p3 / person\n                              :name (n2 / name\n                                    :op1 \"Lance\"\n                                    :op2 \"Hohaia\")\n                              :poss (t / team\n                                    :name (n3 / name\n                                          :op1 \"St\"\n                                          :op2 \"Helens\")))\n                        :time (m / moment\n                              :ARG0-of (o2 / open-02\n                                    :ARG1 (g / game\n                                          :name (n4 / name\n                                                :op1 \"Grand\"\n                                                :op2 \"Final\")\n                                          :time (s2 / season\n                                                :mod (l / last)))))))))",
      "# ::snt Ben Flower received a brilliant reception during 's Wigan 's 30 - 20 victory against Warrington .\n(r / receive-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Ben\"\n                  :op2 \"Flower\"))\n      :ARG1 (r2 / reception\n            :ARG1-of (b / brilliant-01))\n      :time (w / win-01\n            :ARG0 (t / team\n                  :name (n2 / name\n                        :op1 \"Wigan\"))\n            :ARG4 (t2 / team\n                  :name (n3 / name\n                        :op1 \"Warrington\"))\n            :manner (s / score-entity\n                  :op1 30\n                  :op2 20)))"
    ],
    "tree": [
      "(r / return-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Ben\"\n                     :op2 \"Flower\")))",
      "(r / return-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Ben\"\n                     :op2 \"Flower\"))\n   :ARG3 (b / ban-01\n            :duration (t / temporal-quantity\n                         :quant 6)))",
      "(r / return-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Ben\"\n                     :op2 \"Flower\"))\n   :time (d / date-entity\n            :weekday (t2 / thursday)))",
      "(r / return-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Ben\"\n                     :op2 \"Flower\"))\n   :ARG3 (b / ban-01\n            :duration (t / temporal-quantity\n                         :quant 6))\n   :time (d / date-entity\n            :weekday (t2 / thursday)))",
      "(d / date-entity\n   :weekday (t2 / thursday)\n   :dayperiod (n2 / night))",
      "(a / appear-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Ben\"\n                     :op2 \"Flower\"))\n   :ord (o / ordinal-entity\n           :range (s / since\n                     :op1 (p2 / punch-01\n                              :ARG0 p))))",
      "(o / ordinal-entity\n   :range (s / since\n             :op1 (p2 / punch-01\n                      :ARG0 (p / person :name (n / name :op1 \"Ben\" :op2 \"Flower\")))))",
      "(s / since\n   :op1 (p2 / punch-01\n            :ARG0 (p / person :name (n / name :op1 \"Ben\" :op2 \"Flower\"))))",
      "(p2 / punch-01\n    :ARG1 (p3 / person\n              :name (n2 / name\n                        :op1 \"Lance\"\n                        :op2 \"Hohaia\")))",
      "(p2 / punch-01\n    :ARG1 (p3 / person\n              :name (n2 / name\n                        :op1 \"Lance\"\n                        :op2 \"Hohaia\"))\n    :time (m / moment\n             :ARG0 (o2 / open-02\n                       :ARG1 (g / game\n                                :time (s2 / season\n                                          :mod (l / last))))))",
      "(r / receive-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ben\"\n                     :op2 \"Flower\")))",
      "(r / receive-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ben\"\n                     :op2 \"Flower\"))\n   :ARG1 (r2 / reception\n             :ARG1 (b / brilliant-01)))",
      "(w / win-01\n   :ARG0 (t / team\n            :name (n2 / name\n                      :op1 \"Wigan\")))",
      "(w / win-01\n   :ARG0 (t / team\n            :name (n2 / name\n                      :op1 \"Wigan\"))\n   :manner (s / score-entity\n              :op1 30\n              :op2 20))",
      "(w / win-01\n   :ARG0 (t / team\n            :name (n2 / name\n                      :op1 \"Wigan\"))\n   :ARG4 (t2 / team\n             :name (n3 / name\n                       :op1 \"Warrington\"))\n   :manner (s / score-entity\n              :op1 30\n              :op2 20))"
    ],
    "smus": [
      "Ben Flower returned.",
      "Ben Flower returned from six-month ban.",
      "Ben Flower returned Thursday.",
      "Ben Flower returned Thursday from a six-month ban.",
      "Thursday night",
      "Ben Flower has made his first appearance since punching.",
      "since Ben Flower punched.",
      "Since Ben Flower punched.",
      "Lance Hohaia was punched.",
      "Lance Hohaia was punched at the opening moments of last season's game.",
      "Ben Flower received.",
      "Ben Flower received a brilliant reception.",
      "Wigan won",
      "Wigan won by 30-20.",
      "Wigan beat Warrington 30-20"
    ]
  },
  {
    "instance_id": "realsumm-79",
    "summary": "Inspired by the aesthetic of the Belle Epoque era , the Jacques Garcia designed hotel is both opulent and edgy . A mix of Arabian and Napoleon III decor , the Jacques Garcia designed hotel harkens back to the city 's pleasure houses of yesteryear . Also available for guest use : a charming conservatory , library bar and celestial spa available for private rental .",
    "summary_trees": [
      "# ::snt Inspired by the aesthetic of the Belle Epoque era , the Jacques Garcia designed hotel is both opulent and edgy .\n(a / and\n      :op1 (o / opulent\n            :domain (h / hotel\n                  :ARG1-of (d / design-01\n                        :ARG0 (p / person\n                              :name (n / name\n                                    :op1 \"Jacques\"\n                                    :op2 \"Garcia\")))))\n      :op2 (e / edgy\n            :domain h)\n      :ARG1-of (ii / inspire-01\n            :ARG0 (a2 / aesthetic\n                  :poss (e2 / era\n                        :name (n2 / name\n                              :op1 \"Belle\"\n                              :op2 \"Epoque\")))))",
      "# ::snt A mix of Arabian and Napoleon III decor , the Jacques Garcia designed hotel harkens back to the city 's pleasure houses of yesteryear .\n(h / harken-01\n      :ARG0 (h2 / hotel\n            :ARG1-of (d / design-01\n                  :ARG0 (p / person\n                        :name (n / name\n                              :op1 \"Jacques\"\n                              :op2 \"Garcia\")))\n            :ARG2-of (m / mix-01\n                  :ARG1 (d2 / decor\n                        :mod (w / world-region\n                              :name (n2 / name\n                                    :op1 \"Arabia\")))\n                  :ARG3 (d3 / decor\n                        :mod (p2 / person\n                              :name (n3 / name\n                                    :op1 \"Napoleon\"\n                                    :op2 \"III\")))))\n      :ARG1 (h3 / house\n            :mod (p3 / pleasure)\n            :poss (c / city)\n            :time (y / yesteryear))\n      :direction (b / back))",
      "# ::snt Also available for guest use : a charming conservatory , library bar and celestial spa available for private rental .\n(a / available-02\n      :ARG2 (u / use-01\n            :ARG0 (g / guest)\n            :ARG1 (a2 / and\n                  :op1 (c / conservatory\n                        :ARG0-of (c2 / charm-01))\n                  :op2 (b / bar\n                        :mod (l / library))\n                  :op3 (s / spa\n                        :mod (m / moon))\n                  :ARG2-of (a3 / available-02\n                        :ARG2 (r / rent-01\n                              :ARG1 a2\n                              :ARG1-of (p / private-03)))))\n      :mod (a4 / also))"
    ],
    "tree": [
      "(o / opulent\n   :domain (h / hotel\n              :ARG1 (d / design-01\n                       :ARG0 (p / person\n                                :name (n / name)))))",
      "(h / harken-01\n   :ARG0 (h2 / hotel\n             :ARG2 (m / mix-01\n                      :ARG3 (d3 / decor\n                                :mod (p2 / person\n                                         :name (n3 / name\n                                                   :op1 \"Napoleon\"\n                                                   :op2 \"III\")))))\n   :ARG1 (h3 / house\n             :mod (p3 / pleasure)))",
      "(h / harken-01\n   :ARG0 (h2 / hotel\n             :ARG1 (d / design-01\n                      :ARG0 (p / person\n                               :name (n / name\n                                        :op1 \"Jacques\"\n                                        :op2 \"Garcia\"))))\n   :ARG1 (h3 / house\n             :mod (p3 / pleasure))\n   :direction (b / back))",
      "(h2 / hotel\n    :ARG1 (d / design-01\n             :ARG0 (p / person\n                      :name (n / name\n                               :op1 \"Jacques\"\n                               :op2 \"Garcia\"))))",
      "(h2 / hotel\n    :ARG1 (d / design-01\n             :ARG0 (p / person\n                      :name (n / name\n                               :op1 \"Jacques\"\n                               :op2 \"Garcia\")))\n    :ARG2 (m / mix-01\n             :ARG3 (d3 / decor\n                       :mod (p2 / person\n                                :name (n3 / name\n                                          :op1 \"Napoleon\"\n                                          :op2 \"III\")))))",
      "(d / design-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jacques\"\n                     :op2 \"Garcia\")))",
      "(a2 / and\n    :op1 (c / conservatory\n            :ARG0 (c2 / charm-01)))",
      "(a2 / and\n    :op2 (b / bar\n            :mod (l / library))\n    :ARG2 (a3 / available-02\n              :ARG2 (r / rent-01\n                       :ARG1 a2)))",
      "(a2 / and\n    :op2 (b / bar\n            :mod (l / library))\n    :ARG2 (a3 / available-02\n              :ARG2 (r / rent-01\n                       :ARG1 (p / private-03))))",
      "(a2 / and\n    :op1 (c / conservatory\n            :ARG0 (c2 / charm-01))\n    :op2 (b / bar\n            :mod (l / library))\n    :ARG2 (a3 / available-02\n              :ARG2 (r / rent-01\n                       :ARG1 a2)))",
      "(a2 / and\n    :op1 (c / conservatory\n            :ARG0 (c2 / charm-01))\n    :op2 (b / bar\n            :mod (l / library))\n    :ARG2 (a3 / available-02\n              :ARG2 (r / rent-01\n                       :ARG1 (p / private-03))))"
    ],
    "smus": [
      "The hotel the designer designed was opulent.",
      "The hotel, a mix of Napoleon III decor, harkens back to pleasure houses.",
      "The hotel Jacques Garcia designed harkens back to pleasure houses.",
      "The hotel was designed by Jacques Garcia.",
      "The hotel Jacques Garcia designed is a mix of Napoleon III decor.",
      "Jacques Garcia designed.",
      "and a charming conservatory.",
      "and a Library bar is available for rent.",
      "and a Library bar is available for private rent.",
      "Charming conservatory and library bar available for rent.",
      "A charming conservatory and a library bar are available for private rent."
    ]
  },
  {
    "instance_id": "realsumm-80",
    "summary": "Steven Finn was left out of the England squad for the West Indies tour . Steven Finn has regained form after a tough 12 months . Steven Finn said Steven Finn 's back to bowling like Steven Finn was as ' a carefree 21 - year - old ' Steven Finn last of 23 Test caps came for England back in 2013 .",
    "summary_trees": [
      "# ::snt Steven Finn was left out of the England squad for the West Indies tour .\n(l / leave-out-03\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Steven\"\n                  :op2 \"Finn\"))\n      :ARG2 (s / squad\n            :mod (c / country\n                  :name (n2 / name\n                        :op1 \"England\"))\n            :purpose (t / tour-01\n                  :ARG0 c\n                  :ARG1 (c2 / country\n                        :name (n3 / name\n                              :op1 \"West\"\n                              :op2 \"Indies\")))))",
      "# ::snt Steven Finn has regained form after a tough 12 months .\n(r / regain-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Steven\"\n                  :op2 \"Finn\"))\n      :ARG1 (f / form)\n      :time (a / after\n            :op1 (t / temporal-quantity\n                  :quant 12\n                  :unit (m / month)\n                  :ARG1-of (t2 / tough-02))))",
      "# ::snt Steven Finn said Steven Finn 's back to bowling like Steven Finn was as ' a carefree 21 - year - old ' Steven Finn last of 23 Test caps came for England back in 2013 .\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Steven\"\n                  :op2 \"Finn\"))\n      :ARG1 (b / back-02\n            :ARG1 p\n            :ARG2 (b2 / bowl-01\n                  :ARG0 p)\n            :ARG1-of (r / resemble-01\n                  :ARG2 (b3 / back-02\n                        :ARG1 (p2 / person\n                              :name (n2 / name\n                                    :op1 \"Steven\"\n                                    :op2 \"Finn\")\n                              :age (t / temporal-quantity\n                                    :quant 21\n                                    :unit (y / year))\n                              :mod (c / carefree)))))\n      :ARG1-of (c2 / cause-01\n            :ARG0 (c3 / come-04\n                  :ARG1 (c4 / cap\n                        :ord (o / ordinal-entity\n                              :value -1)\n                        :ARG1-of (ii / include-91\n                              :ARG2 (c5 / cap\n                                    :quant 23\n                                    :mod (t2 / test)))\n                        :poss (c6 / country\n                              :name (n3 / name\n                                    :op1 \"England\")))\n                  :time (d / date-entity\n                        :year 2013))))"
    ],
    "tree": [
      "(l / leave-out-03\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Steven\"\n                     :op2 \"Finn\")))",
      "(l / leave-out-03\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Steven\"\n                     :op2 \"Finn\"))\n   :ARG2 (s / squad\n            :mod (c / country\n                    :name (n2 / name\n                              :op1 \"England\"))))",
      "(l / leave-out-03\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Steven\"\n                     :op2 \"Finn\"))\n   :ARG2 (s / squad\n            :purpose (t / tour-01\n                        :ARG1 (c2 / country\n                                  :name (n3 / name\n                                            :op1 \"West\"\n                                            :op2 \"Indies\")))))",
      "(p / person\n   :name (n / name\n            :op1 \"Steven\"\n            :op2 \"Finn\"))",
      "(s / squad\n   :mod (c / country\n           :name (n2 / name\n                     :op1 \"England\"))\n   :purpose (t / tour-01\n               :ARG1 (c2 / country\n                         :name (n3 / name\n                                   :op1 \"West\"\n                                   :op2 \"Indies\"))))",
      "(r / regain-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Steven\"\n                     :op2 \"Finn\")))",
      "(r / regain-01\n   :time (a / after\n            :op1 (t / temporal-quantity\n                    :quant 12)))",
      "(r / regain-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Steven\"\n                     :op2 \"Finn\"))\n   :ARG1 (f / form))",
      "(r / regain-01\n   :ARG1 (f / form)\n   :time (a / after\n            :op1 (t / temporal-quantity\n                    :ARG1 (t2 / tough-02))))",
      "(r / regain-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Steven\"\n                     :op2 \"Finn\"))\n   :ARG1 (f / form)\n   :time (a / after\n            :op1 (t / temporal-quantity\n                    :unit (m / month))))",
      "(s / say-01\n   :ARG1 (b / back-02\n            :ARG2 (b2 / bowl-01\n                      :ARG0 (p / person :name (n / name :op1 \"Steven\" :op2 \"Finn\")))))",
      "(s / say-01\n   :ARG1 (b / back-02\n            :ARG1 (r / resemble-01\n                     :ARG2 (b3 / back-02\n                               :ARG1 (p2 / person\n                                         :name (n2 / name\n                                                   :op1 \"Steven\"\n                                                   :op2 \"Finn\"))))))",
      "(s / say-01\n   :ARG1 (b / back-02\n            :ARG1 (r / resemble-01\n                     :ARG2 (b3 / back-02\n                               :ARG1 (p2 / person\n                                         :age (t / temporal-quantity\n                                                 :quant 21))))))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Steven\"\n                     :op2 \"Finn\"))\n   :ARG1 (b / back-02\n            :ARG2 (b2 / bowl-01\n                      :ARG0 p)))",
      "(c3 / come-04\n    :time (d / date-entity\n             :year 2013))"
    ],
    "smus": [
      "Steven Finn was left out.",
      "Steven Finn was left out of the English squad.",
      "Steven Finn was left out of the squad for the West Indies tour.",
      "Steven Finn",
      "England squad for West Indies tour",
      "Steven Finn has regained.",
      "Recovered after 12 months.",
      "Steven Finn has regained form.",
      "After toughness, form has regained.",
      "Steven Finn has regained form after months.",
      "Back to Steven Finn bowling, he said.",
      "Back like Steve Finn, said.",
      "Back like a 21 year old, said.",
      "\"I'm back to bowling,\" Steven Finn said.",
      "It came in 2013."
    ]
  },
  {
    "instance_id": "realsumm-81",
    "summary": "Paul Armstrong flew to Cyprus to celebrate new job as IT project manager . Was stopped at airport with stun gun , baton and knuckle duster in Paul Armstrong bag . Pleaded guilty to possession of a firearm and lost new job as IT project manager before starting new job as IT project manager . Paul Armstrong was sentenced to eight months in jail , suspended for two years .",
    "summary_trees": [
      "# ::snt Paul Armstrong flew to Cyprus to celebrate new job as IT project manager .\n(f / fly-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Paul\"\n                  :op2 \"Armstrong\"))\n      :destination (c / country\n            :name (n2 / name\n                  :op1 \"Cyprus\"))\n      :purpose (c2 / celebrate-01\n            :ARG0 p\n            :ARG1 (j / job\n                  :ARG1-of (n3 / new-01)\n                  :topic (p2 / person\n                        :ARG0-of (m / manage-01\n                              :ARG1 (p3 / project\n                                    :topic (t / technology\n                                          :mod (ii / information))))))))",
      "# ::snt Was stopped at airport with stun gun , baton and knuckle duster in Paul Armstrong bag .\n(s / stop-01\n      :ARG1 (b / be-located-at-91\n            :ARG1 (a / and\n                  :op1 (g / gun\n                        :ARG2-of (s2 / stun-01))\n                  :op2 (b2 / baton)\n                  :op3 (d / dust-01\n                        :ARG1 (k / knuckle)))\n            :ARG2 (b3 / bag\n                  :poss (p / person\n                        :name (n / name\n                              :op1 \"Paul\"\n                              :op2 \"Armstrong\"))))\n      :location (a2 / airport))",
      "# ::snt Pleaded guilty to possession of a firearm and lost new job as IT project manager before starting new job as IT project manager .\n(a / and\n      :op1 (p / plead-02\n            :ARG2 (g / guilty-01\n                  :ARG1 (p2 / person)\n                  :ARG2 (p3 / possess-01\n                        :ARG1 (f / firearm))))\n      :op2 (l / lose-02\n            :ARG1 (j / job\n                  :ARG1-of (n / new-01)\n                  :topic (p4 / person\n                        :ARG0-of (m / manage-01\n                              :ARG1 (p5 / project\n                                    :mod (t / technology\n                                          :mod (ii / information)))))))\n      :time (b / before\n            :op1 (s / start-01\n                  :ARG1 j)))",
      "# ::snt Paul Armstrong was sentenced to eight months in jail , suspended for two years .\n(s / sentence-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Paul\"\n                  :op2 \"Armstrong\"))\n      :ARG2 (a / and\n            :op1 (t / temporal-quantity\n                  :quant 8\n                  :unit (m / month)\n                  :location (j / jail))\n            :op2 (s2 / suspend-01\n                  :ARG1 t\n                  :duration (t2 / temporal-quantity\n                        :quant 2\n                        :unit (y / year)))))"
    ],
    "tree": [
      "(f / fly-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Paul\"\n                     :op2 \"Armstrong\")))",
      "(f / fly-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Paul\"\n                     :op2 \"Armstrong\"))\n   :destination (c / country\n                   :name (n2 / name\n                             :op1 \"Cyprus\")))",
      "(f / fly-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Paul\"\n                     :op2 \"Armstrong\"))\n   :purpose (c2 / celebrate-01\n                :ARG0 p))",
      "(f / fly-01\n   :destination (c / country\n                   :name (n2 / name\n                             :op1 \"Cyprus\"))\n   :purpose (c2 / celebrate-01\n                :ARG0 (p / person :name (n / name :op1 \"Paul\" :op2 \"Armstrong\"))))",
      "(f / fly-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Paul\"\n                     :op2 \"Armstrong\"))\n   :destination (c / country\n                   :name (n2 / name\n                             :op1 \"Cyprus\"))\n   :purpose (c2 / celebrate-01\n                :ARG1 (j / job\n                         :ARG1 (n3 / new-01))))",
      "(s / stop-01\n   :ARG1 (b / be-located-at-91\n            :ARG2 (b3 / bag\n                      :poss (p / person\n                               :name (n / name\n                                        :op1 \"Paul\"\n                                        :op2 \"Armstrong\"))))\n   :location (a2 / airport))",
      "(b / be-located-at-91\n   :ARG1 (g / gun\n            :ARG2 (s2 / stun-01)))",
      "(a / and\n   :op1 (g / gun\n           :ARG2 (s2 / stun-01)))",
      "(a / and\n   :op1 (g / gun\n           :ARG2 (s2 / stun-01))\n   :op2 (b2 / baton))",
      "(a / and\n   :op1 (g / gun\n           :ARG2 (s2 / stun-01))\n   :op2 (b2 / baton)\n   :op3 (d / dust-01\n           :ARG1 (k / knuckle)))",
      "(p / plead-02\n   :ARG2 (g / guilty-01\n            :ARG1 (p2 / person)\n            :ARG2 (p3 / possess-01\n                      :ARG1 (f / firearm))))",
      "(l / lose-02\n   :ARG1 (j / job\n            :ARG1 (n / new-01)))",
      "(s / sentence-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Paul\"\n                     :op2 \"Armstrong\")))",
      "(s / sentence-01\n   :ARG2 (t / temporal-quantity\n            :location (j / jail)))",
      "(s / sentence-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Paul\"\n                     :op2 \"Armstrong\"))\n   :ARG2 (t / temporal-quantity\n            :location (j / jail)))",
      "(s / sentence-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Paul\"\n                     :op2 \"Armstrong\"))\n   :ARG2 (s2 / suspend-01\n             :duration (t2 / temporal-quantity\n                           :quant 2)))",
      "(s / sentence-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Paul\"\n                     :op2 \"Armstrong\"))\n   :ARG2 (s2 / suspend-01\n             :duration (t2 / temporal-quantity\n                           :unit (y / year))))"
    ],
    "smus": [
      "Paul Armstrong flew.",
      "Paul Armstrong flew to Cyprus.",
      "Paul Armstrong flew to celebrate.",
      "Paul Armstrong flew to Cyprus to celebrate.",
      "Paul Armstrong flew to Cyprus to celebrate the new job.",
      "Paul Armstrong's bag was stopped at the airport.",
      "There's a stun gun.",
      "and a stun gun.",
      "a stun gun and a baton",
      "A stun gun, a baton and a knuckle dusting.",
      "The person was pleaded guilty to possession of a firearm.",
      "New job lost.",
      "Paul Armstrong was sentenced.",
      "sentenced to jail.",
      "Paul Armstrong was sentenced to jail.",
      "Paul Armstrong was sentenced to 2 years suspended.",
      "Paul Armstrong was sentenced to a two-year suspension."
    ]
  },
  {
    "instance_id": "realsumm-82",
    "summary": "Australian fashion designer Alex Perry wo n't show at this year 's MBFWA . Australian fashion designer Alex Perry is excited to kick back and enjoy the shows from front row . this year 's MBFWA will be Australian fashion designer Alex Perry second MBFWA Australian fashion designer Alex Perry has missed in two decades . Australian fashion designer Alex Perry is now focusing on global expansion in Asia and Middle East .",
    "summary_trees": [
      "# ::snt Australian fashion designer Alex Perry wo n't show at this year 's MBFWA .\n(s / show-01\n      :polarity -\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Alex\"\n                  :op2 \"Perry\")\n            :ARG0-of (d / design-01\n                  :ARG1 (f / fashion))\n            :mod (c / country\n                  :name (n2 / name\n                        :op1 \"Australia\")))\n      :time (e / event\n            :name (n3 / name\n                  :op1 \"MBFWA\")\n            :mod (y / year\n                  :mod (t / this))))",
      "# ::snt Australian fashion designer Alex Perry is excited to kick back and enjoy the shows from front row .\n(e / excite-01\n      :ARG0 (a / and\n            :op1 (k / kick-01\n                  :ARG0 (p / person\n                        :name (n / name\n                              :op1 \"Alex\"\n                              :op2 \"Perry\")\n                        :ARG0-of (d / design-01\n                              :ARG1 (f / fashion))\n                        :mod (c / country\n                              :name (n2 / name\n                                    :op1 \"Australia\")))\n                  :direction (b / back))\n            :op2 (e2 / enjoy-01\n                  :ARG0 p\n                  :ARG1 (s / show-04)\n                  :manner (r / row\n                        :mod (f2 / front))))\n      :ARG1 p)",
      "# ::snt this year 's MBFWA will be Australian fashion designer Alex Perry second MBFWA Australian fashion designer Alex Perry has missed in two decades .\n(m / miss-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Alex\"\n                  :op2 \"Perry\")\n            :ARG0-of (d / design-01\n                  :ARG1 (f / fashion))\n            :mod (c / country\n                  :name (n2 / name\n                        :op1 \"Australia\")))\n      :ARG1 (p2 / publication\n            :name (n3 / name\n                  :op1 \"MBFWA\"))\n      :time (b / before\n            :op1 (n4 / now)\n            :duration (t / temporal-quantity\n                  :quant 2\n                  :unit (d2 / decade)))\n      :ord (o / ordinal-entity\n            :value 2)\n      :time (y / year\n            :mod (t2 / this)))",
      "# ::snt Australian fashion designer Alex Perry is now focusing on global expansion in Asia and Middle East .\n(f / focus-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Alex\"\n                  :op2 \"Perry\")\n            :ARG0-of (d / design-01\n                  :ARG1 (f2 / fashion))\n            :mod (c / country\n                  :name (n2 / name\n                        :op1 \"Australia\")))\n      :ARG1 (e / expand-01\n            :ARG1 (g / globe)\n            :location (a / and\n                  :op1 (c2 / continent\n                        :name (n3 / name\n                              :op1 \"Asia\"))\n                  :op2 (w / world-region\n                        :name (n4 / name\n                              :op1 \"Middle\"\n                              :op2 \"East\"))))\n      :time (n5 / now))"
    ],
    "tree": [
      "(p / person\n   :ARG0 (d / design-01\n            :ARG1 (f / fashion)))",
      "(p / person\n   :name (n / name\n            :op1 \"Alex\"\n            :op2 \"Perry\")\n   :ARG0 (d / design-01\n            :ARG1 (f / fashion)))",
      "(p / person\n   :ARG0 (d / design-01\n            :ARG1 (f / fashion))\n   :mod (c / country\n           :name (n2 / name\n                     :op1 \"Australia\")))",
      "(p / person\n   :name (n / name\n            :op1 \"Alex\"\n            :op2 \"Perry\")\n   :ARG0 (d / design-01\n            :ARG1 (f / fashion))\n   :mod (c / country\n           :name (n2 / name\n                     :op1 \"Australia\")))",
      "(e / event\n   :name (n3 / name\n             :op1 \"MBFWA\")\n   :mod (y / year\n           :mod (t / this)))",
      "(a / and\n   :op2 (e2 / enjoy-01\n            :manner (r / row\n                       :mod (f2 / front))))",
      "(p / person\n   :ARG0 (d / design-01\n            :ARG1 (f / fashion)))",
      "(p / person\n   :name (n / name\n            :op1 \"Alex\"\n            :op2 \"Perry\")\n   :ARG0 (d / design-01\n            :ARG1 (f / fashion)))",
      "(p / person\n   :ARG0 (d / design-01\n            :ARG1 (f / fashion))\n   :mod (c / country\n           :name (n2 / name\n                     :op1 \"Australia\")))",
      "(p / person\n   :name (n / name\n            :op1 \"Alex\"\n            :op2 \"Perry\")\n   :ARG0 (d / design-01\n            :ARG1 (f / fashion))\n   :mod (c / country\n           :name (n2 / name\n                     :op1 \"Australia\")))",
      "(m / miss-02\n   :ARG0 (p / person\n            :ARG0 (d / design-01\n                     :ARG1 (f / fashion)))\n   :ARG1 (p2 / publication\n             :name (n3 / name\n                       :op1 \"MBFWA\"))\n   :ord (o / ordinal-entity\n           :value 2))",
      "(p / person\n   :ARG0 (d / design-01\n            :ARG1 (f / fashion)))",
      "(p / person\n   :name (n / name\n            :op1 \"Alex\"\n            :op2 \"Perry\")\n   :ARG0 (d / design-01\n            :ARG1 (f / fashion)))",
      "(p / person\n   :ARG0 (d / design-01\n            :ARG1 (f / fashion))\n   :mod (c / country\n           :name (n2 / name\n                     :op1 \"Australia\")))",
      "(p / person\n   :name (n / name\n            :op1 \"Alex\"\n            :op2 \"Perry\")\n   :ARG0 (d / design-01\n            :ARG1 (f / fashion))\n   :mod (c / country\n           :name (n2 / name\n                     :op1 \"Australia\")))",
      "(f / focus-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Alex\"\n                     :op2 \"Perry\"))\n   :ARG1 (e / expand-01\n            :ARG1 (g / globe)))",
      "(f / focus-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Alex\"\n                     :op2 \"Perry\"))\n   :ARG1 (e / expand-01\n            :location (c2 / continent\n                          :name (n3 / name\n                                    :op1 \"Asia\"))))",
      "(f / focus-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Alex\"\n                     :op2 \"Perry\"))\n   :ARG1 (e / expand-01\n            :ARG1 (g / globe))\n   :time (n5 / now))",
      "(f / focus-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Alex\"\n                     :op2 \"Perry\"))\n   :ARG1 (e / expand-01\n            :location (c2 / continent\n                          :name (n3 / name\n                                    :op1 \"Asia\")))\n   :time (n5 / now))",
      "(p / person\n   :ARG0 (d / design-01\n            :ARG1 (f2 / fashion)))"
    ],
    "smus": [
      "Fashion designer.",
      "Fashion designer Alex Perry",
      "Australian fashion designer",
      "Australian fashion designer Alex Perry",
      "This year's MBFWA",
      "and enjoy from the front row.",
      "Fashion designer.",
      "Fashion designer Alex Perry",
      "Australian fashion designer",
      "Australian fashion designer Alex Perry",
      "Fashion designer missed MBFWA for the second time.",
      "Fashion designer.",
      "Fashion designer Alex Perry",
      "Australian fashion designer",
      "Australian fashion designer Alex Perry",
      "Alex Perry is focusing on global expansion.",
      "Alex Perry is focusing on expansion in Asia.",
      "Alex Perry is now focusing on global expansion.",
      "Alex Perry is now focusing on expansion in Asia.",
      "Fashion designer."
    ]
  },
  {
    "instance_id": "realsumm-83",
    "summary": "An Indiana public school performance of American Pie ended in tragedy Wednesday when a riser buckled just as dozens danced on - stage . More than a dozen people were injured at An Indiana public school performance of American Pie and one student was taken to a hospital in critical condition . Students said there had been no issues when Students previously practiced American Pie on the stage with the same number of people .",
    "summary_trees": [
      "# ::snt An Indiana public school performance of American Pie ended in tragedy Wednesday when a riser buckled just as dozens danced on - stage .\n(e / end-01\n      :ARG1 (p / perform-01\n            :ARG0 (s / school\n                  :location (s2 / state\n                        :name (n / name\n                              :op1 \"Indiana\"))\n                  :ARG1-of (p2 / public-02))\n            :ARG1 (m / music\n                  :name (n2 / name\n                        :op1 \"American\"\n                        :op2 \"Pie\")))\n      :ARG2 (t / tragedy)\n      :time (d / date-entity\n            :weekday (w / wednesday))\n      :time (b / buckle-01\n            :ARG1 (p3 / person\n                  :ARG0-of (r / rise-01))\n            :time (d2 / dance-01\n                  :ARG0 (p4 / person\n                        :quant (m2 / multiple\n                              :op1 12))\n                  :location (s3 / stage))))",
      "# ::snt More than a dozen people were injured at An Indiana public school performance of American Pie and one student was taken to a hospital in critical condition .\n(a / and\n      :op1 (ii / injure-01\n            :ARG1 (p / person\n                  :quant (m / more-than\n                        :op1 12))\n            :time (p2 / perform-01\n                  :ARG1 (m2 / music\n                        :name (n / name\n                              :op1 \"American\"\n                              :op2 \"Pie\"))\n                  :location (s / school\n                        :ARG1-of (p3 / public-02)\n                        :location (s2 / state\n                              :name (n2 / name\n                                    :op1 \"Indiana\")))))\n      :op2 (t / take-01\n            :ARG1 (p4 / person\n                  :quant 1\n                  :ARG0-of (s3 / study-01))\n            :ARG3 (h / hospital)\n            :manner (c / condition\n                  :ARG1-of (c2 / critical-03))))",
      "# ::snt Students said there had been no issues when Students previously practiced American Pie on the stage with the same number of people .\n(s / say-01\n      :ARG0 (p / person\n            :ARG0-of (s2 / study-01))\n      :ARG1 (ii / issue-02\n            :polarity -\n            :time (p2 / practice-01\n                  :ARG0 p\n                  :ARG1 (m / music\n                        :name (n / name\n                              :op1 \"American\"\n                              :op2 \"Pie\"))\n                  :location (s3 / stage)\n                  :accompanier (p3 / person\n                        :quant (n2 / number\n                              :ARG1-of (s4 / same-01)))\n                  :time (p4 / previous))))"
    ],
    "tree": [
      "(e / end-01\n   :ARG1 (p / perform-01\n            :ARG1 (m / music\n                     :name (n2 / name\n                               :op1 \"American\"\n                               :op2 \"Pie\")))\n   :ARG2 (t / tragedy))",
      "(e / end-01\n   :ARG1 (p / perform-01\n            :ARG1 (m / music\n                     :name (n2 / name\n                               :op1 \"American\"\n                               :op2 \"Pie\")))\n   :ARG2 (t / tragedy)\n   :time (d / date-entity\n            :weekday (w / wednesday)))",
      "(b / buckle-01\n   :ARG1 (p3 / person\n             :ARG0 (r / rise-01))\n   :time (d2 / dance-01\n             :ARG0 (p4 / person\n                       :quant (m2 / multiple\n                                  :op1 12))))",
      "(d2 / dance-01\n    :ARG0 (p4 / person\n              :quant (m2 / multiple\n                         :op1 12)))",
      "(d2 / dance-01\n    :ARG0 (p4 / person\n              :quant (m2 / multiple\n                         :op1 12))\n    :location (s3 / stage))",
      "(ii / injure-01\n    :ARG1 (p / person\n             :quant (m / more-than)))",
      "(t / take-01\n   :ARG1 (p4 / person\n             :quant 1\n             :ARG0 (s3 / study-01))\n   :ARG3 (h / hospital)\n   :manner (c / condition\n              :ARG1 (c2 / critical-03)))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (s2 / study-01)))",
      "(s / say-01\n   :ARG1 (ii / issue-02\n             :polarity -))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (s2 / study-01))\n   :ARG1 (ii / issue-02\n             :polarity -))",
      "(p2 / practice-01\n    :location (s3 / stage)\n    :accompanier (p3 / person\n                     :quant (n2 / number\n                                :ARG1 (s4 / same-01)))\n    :time (p4 / previous))",
      "(p2 / practice-01\n    :ARG1 (m / music\n             :name (n / name\n                      :op1 \"American\"\n                      :op2 \"Pie\"))\n    :location (s3 / stage)\n    :accompanier (p3 / person\n                     :quant (n2 / number\n                                :ARG1 (s4 / same-01)))\n    :time (p4 / previous))"
    ],
    "smus": [
      "The performance of American Pie ended in tragedy.",
      "The performance of American Pie ended in tragedy Wednesday.",
      "The riser buckled as dozens danced.",
      "Dozens danced.",
      "Dozens danced on stage.",
      "More than 100 people were injured.",
      "One student was taken to a hospital in critical condition.",
      "Students said.",
      "No issues, said.",
      "No issues, said students.",
      "There has previously been practice on stage with the same number of people.",
      "American Pie has previously been practiced on stage with the same number of people."
    ]
  },
  {
    "instance_id": "realsumm-84",
    "summary": "Manchester City have been linked with summer move for Raheem Sterling . Raheem Sterling has two years left on Raheem Sterling contract and is stalling on a new deal . Brendan Rodgers says a move to Manchester City would not be step up for Raheem Sterling . Indicating it will take Manchester City 20 years to eclipse Liverpool .",
    "summary_trees": [
      "# ::snt Manchester City have been linked with summer move for Raheem Sterling .\n(l / link-01\n      :ARG1 (t / team\n            :name (n / name\n                  :op1 \"Manchester\"\n                  :op2 \"City\"))\n      :ARG2 (m / move-03\n            :ARG0 t\n            :ARG1 (p / person\n                  :name (n2 / name\n                        :op1 \"Raheem\"\n                        :op2 \"Sterling\"))\n            :time (d / date-entity\n                  :season (s / summer))))",
      "# ::snt Raheem Sterling has two years left on Raheem Sterling contract and is stalling on a new deal .\n(a / and\n      :op1 (l / leave-17\n            :ARG0 (c / contract\n                  :poss (p / person\n                        :name (n / name\n                              :op1 \"Raheem\"\n                              :op2 \"Sterl\")))\n            :ARG1 (t / temporal-quantity\n                  :quant 2\n                  :unit (y / year)))\n      :op2 (s / stall-01\n            :ARG0 p\n            :ARG1 (d / deal\n                  :ARG1-of (n2 / new-01))))",
      "# ::snt Brendan Rodgers says a move to Manchester City would not be step up for Raheem Sterling .\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Brendan\"\n                  :op2 \"Rodgers\"))\n      :ARG1 (s2 / step-01\n            :polarity -\n            :ARG4 (m / move-01\n                  :ARG2 (c / city\n                        :name (n2 / name\n                              :op1 \"Manchester\"\n                              :op2 \"City\")))\n            :beneficiary (p2 / person\n                  :name (n3 / name\n                        :op1 \"Raheem\"\n                        :op2 \"Sterling\"))\n            :direction (u / up)))",
      "# ::snt Indicating it will take Manchester City 20 years to eclipse Liverpool .\n(ii / indicate-01\n      :ARG1 (t / take-10\n            :ARG0 (e / eclipse-01\n                  :ARG1 (t2 / team\n                        :name (n / name\n                              :op1 \"Liverpool\")))\n            :ARG1 (t3 / temporal-quantity\n                  :quant 20\n                  :unit (y / year))\n            :ARG2 (t4 / team\n                  :name (n2 / name\n                        :op1 \"Manchester\"\n                        :op2 \"City\"))))"
    ],
    "tree": [
      "(l / link-01\n   :ARG1 (t / team\n            :name (n / name\n                     :op1 \"Manchester\"\n                     :op2 \"City\")))",
      "(l / link-01\n   :ARG2 (m / move-03\n            :ARG0 (t / team :name (n / name :op1 \"Manchester\" :op2 \"City\"))))",
      "(l / link-01\n   :ARG1 (t / team\n            :name (n / name\n                     :op1 \"Manchester\"\n                     :op2 \"City\"))\n   :ARG2 (m / move-03\n            :ARG0 t))",
      "(l / link-01\n   :ARG1 (t / team\n            :name (n / name\n                     :op1 \"Manchester\"\n                     :op2 \"City\"))\n   :ARG2 (m / move-03\n            :ARG1 (p / person\n                     :name (n2 / name\n                               :op1 \"Raheem\"\n                               :op2 \"Sterling\"))))",
      "(l / link-01\n   :ARG1 (t / team\n            :name (n / name\n                     :op1 \"Manchester\"\n                     :op2 \"City\"))\n   :ARG2 (m / move-03\n            :time (d / date-entity\n                     :season (s / summer))))",
      "(l / leave-17\n   :ARG0 (c / contract\n            :poss (p / person\n                     :name (n / name))))",
      "(s / stall-01\n   :ARG0 (p / person :name (n / name :op1 \"Raheem\" :op2 \"Sterl\"))\n   :ARG1 (d / deal\n            :ARG1 (n2 / new-01)))",
      "(s / say-01\n   :ARG1 (s2 / step-01\n             :polarity -))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Brendan\"\n                     :op2 \"Rodgers\"))\n   :ARG1 (s2 / step-01\n             :polarity -))",
      "(p / person\n   :name (n / name\n            :op1 \"Brendan\"\n            :op2 \"Rodgers\"))",
      "(c / city\n   :name (n2 / name\n             :op1 \"Manchester\"\n             :op2 \"City\"))",
      "(p2 / person\n    :name (n3 / name\n              :op1 \"Raheem\"\n              :op2 \"Sterling\"))",
      "(ii / indicate-01\n    :ARG1 (t / take-10\n             :ARG1 (t3 / temporal-quantity\n                       :quant 20)))",
      "(ii / indicate-01\n    :ARG1 (t / take-10\n             :ARG2 (t4 / team\n                       :name (n2 / name\n                                 :op1 \"Manchester\"\n                                 :op2 \"City\"))))",
      "(ii / indicate-01\n    :ARG1 (t / take-10\n             :ARG1 (t3 / temporal-quantity\n                       :unit (y / year))))",
      "(t / take-10\n   :ARG0 (e / eclipse-01\n            :ARG1 (t2 / team\n                      :name (n / name\n                               :op1 \"Liverpool\")))\n   :ARG1 (t3 / temporal-quantity\n             :quant 20))",
      "(t / take-10\n   :ARG0 (e / eclipse-01\n            :ARG1 (t2 / team\n                      :name (n / name\n                               :op1 \"Liverpool\")))\n   :ARG1 (t3 / temporal-quantity\n             :unit (y / year)))"
    ],
    "smus": [
      "Manchester City are linked.",
      "Linked with Manchester City move.",
      "Manchester City are linked with a move.",
      "Manchester City are linked with the move for Raheem Sterling.",
      "Manchester City are linked with a move in the summer.",
      "The contract of the person was left.",
      "Raheem Sterl is stalling the new deal.",
      "Says not a step.",
      "Brendan Rodgers says it's not a step.",
      "Brendan Rodgers",
      "Manchester City",
      "Raheem Sternling",
      "indicating it would take 20.",
      "indicating it will take Manchester City.",
      "indicating it will take years.",
      "It will take 20 years to eclipse Liverpool.",
      "It will take years to eclipse Liverpool."
    ]
  },
  {
    "instance_id": "realsumm-85",
    "summary": "Up to one in five Chinese eateries could be selling soup using illegal meat . Charity says soup using illegal meat is often disguised on menu or only offered if requested . Loophole lets people bring 20 kg of meat into UK for personal consumption .",
    "summary_trees": [
      "# ::snt Up to one in five Chinese eateries could be selling soup using illegal meat .\n(p / possible-01\n      :ARG1 (s / sell-01\n            :ARG0 (r / restaurant\n                  :mod (c / country\n                        :name (n / name\n                              :op1 \"China\"))\n                  :ARG1-of (ii / include-91\n                        :ARG2 (p2 / person\n                              :ARG0-of (e / eat-01))\n                        :ARG3 (u / up-to\n                              :op1 \"1/5\")))\n            :ARG1 (s2 / soup\n                  :ARG1-of (u2 / use-01\n                        :ARG0 r\n                        :ARG2 (m / meat\n                              :ARG1-of (l / legal-02\n                                    :polarity -))))))",
      "# ::snt Charity says soup using illegal meat is often disguised on menu or only offered if requested .\n(s / say-01\n      :ARG0 (c / charity)\n      :ARG1 (o / or\n            :op1 (d / disguise-01\n                  :ARG1 (s2 / soup\n                        :ARG0-of (u / use-01\n                              :ARG1 (m / meat\n                                    :ARG1-of (l / legal-02\n                                          :polarity -))))\n                  :location (m2 / menu)\n                  :frequency (o2 / often))\n            :op2 (o3 / offer-01\n                  :ARG1 s2\n                  :mod (o4 / only)\n                  :condition (r / request-01\n                        :ARG1 s2))))",
      "# ::snt Loophole lets people bring 20 kg of meat into UK for personal consumption .\n(l / let-01\n      :ARG0 (l2 / loophole)\n      :ARG1 (b / bring-01\n            :ARG0 (p / person)\n            :ARG1 (m / meat\n                  :quant (m2 / mass-quantity\n                        :quant 20\n                        :unit (k / kilogram)))\n            :ARG2 (c / country\n                  :name (n / name\n                        :op1 \"UK\"))\n            :purpose (c2 / consume-01\n                  :ARG0 p\n                  :ARG1 m\n                  :ARG1-of (p2 / personal-02))))"
    ],
    "tree": [
      "(p / possible-01\n   :ARG1 (s / sell-01\n            :ARG0 (r / restaurant\n                     :mod (c / country\n                             :name (n / name\n                                      :op1 \"China\")))))",
      "(p / possible-01\n   :ARG1 (s / sell-01\n            :ARG0 (r / restaurant\n                     :ARG1 (ii / include-91\n                               :ARG3 (u / up-to\n                                        :op1 \"1/5\")))))",
      "(p / possible-01\n   :ARG1 (s / sell-01\n            :ARG1 (s2 / soup\n                      :ARG1 (u2 / use-01\n                                :ARG2 (m / meat\n                                         :ARG1 (l / legal-02\n                                                  :polarity -))))))",
      "(ii / include-91\n    :ARG3 (u / up-to\n             :op1 \"1/5\"))",
      "(u2 / use-01\n    :ARG2 (m / meat\n             :ARG1 (l / legal-02\n                      :polarity -)))",
      "(s / say-01\n   :ARG0 (c / charity)\n   :ARG1 (o / or\n            :op1 (d / disguise-01\n                    :ARG1 (s2 / soup\n                              :ARG0 (u / use-01\n                                       :ARG1 (m / meat\n                                                :ARG1 (l / legal-02\n                                                         :polarity -)))))))",
      "(o / or\n   :op1 (d / disguise-01\n           :ARG1 (s2 / soup\n                     :ARG0 (u / use-01\n                              :ARG1 (m / meat\n                                       :ARG1 (l / legal-02\n                                                :polarity -)))))\n   :op2 (o3 / offer-01\n            :condition (r / request-01\n                          :ARG1 s2)))",
      "(o / or\n   :op1 (d / disguise-01\n           :frequency (o2 / often))\n   :op2 (o3 / offer-01\n            :condition (r / request-01\n                          :ARG1 (s2 / soup))))",
      "(d / disguise-01\n   :ARG1 (s2 / soup\n             :ARG0 (u / use-01\n                      :ARG1 (m / meat\n                               :ARG1 (l / legal-02\n                                        :polarity -))))\n   :frequency (o2 / often))",
      "(d / disguise-01\n   :ARG1 (s2 / soup\n             :ARG0 (u / use-01\n                      :ARG1 (m / meat\n                               :ARG1 (l / legal-02\n                                        :polarity -))))\n   :location (m2 / menu)\n   :frequency (o2 / often))",
      "(l / let-01\n   :ARG0 (l2 / loophole)\n   :ARG1 (b / bring-01\n            :ARG0 (p / person)))",
      "(l / let-01\n   :ARG0 (l2 / loophole)\n   :ARG1 (b / bring-01\n            :purpose (c2 / consume-01\n                         :ARG0 (p / person))))",
      "(l / let-01\n   :ARG0 (l2 / loophole)\n   :ARG1 (b / bring-01\n            :purpose (c2 / consume-01\n                         :ARG1 (m / meat))))",
      "(b / bring-01\n   :purpose (c2 / consume-01\n                :ARG1 (p2 / personal-02)))",
      "(b / bring-01\n   :ARG1 (m / meat\n            :quant (m2 / mass-quantity\n                       :quant 20))\n   :ARG2 (c / country\n            :name (n / name\n                     :op1 \"UK\"))\n   :purpose (c2 / consume-01\n                :ARG0 (p / person)))"
    ],
    "smus": [
      "Chinese restaurants can be selling.",
      "Up to one fifth of the restaurants could be selling.",
      "soup selling using illegal meat could",
      "up to a fifth",
      "using illegal meat.",
      "The charity says the soup is disguised by using illegal meat.",
      "Using illegal meat is disguised as soup or offered if requested.",
      "often disguised or offered when soup is requested.",
      "Often, the soup, by using illegal meat, is disguised.",
      "Using illegal meat is often disguised as soup on the menu.",
      "The loophole lets the person bring.",
      "The loophole lets people bring for consumption.",
      "The loophole lets the meat be brought in for consumption.",
      "Bring for personal consumption.",
      "20kg of meat to be brought to the UK for personal consumption."
    ]
  },
  {
    "instance_id": "realsumm-86",
    "summary": "Two types of cereal in an Easter egg with marshmallows and brownies . Served at Black Milk cafe in Manchester 's Northern Quarter . ' Easter is less about what is used to mean , ' cafe owner Olly Taylor said .",
    "summary_trees": [
      "# ::snt Two types of cereal in an Easter egg with marshmallows and brownies .\n(c / cereal\n      :mod (t / type\n            :quant 2)\n      :location (e / egg\n            :mod (f / festival\n                  :name (n / name\n                        :op1 \"Easter\")))\n      :accompanier (a / and\n            :op1 (m / marshmallow)\n            :op2 (b / brownie)))",
      "# ::snt Served at Black Milk cafe in Manchester 's Northern Quarter . '\n(s / serve-01\n      :location (c / cafe\n            :name (n / name\n                  :op1 \"Black\"\n                  :op2 \"Milk\")\n            :location (q / quarter\n                  :name (n2 / name\n                        :op1 \"Northern\"\n                        :op2 \"Quarter\")\n                  :part-of (c2 / city\n                        :name (n3 / name\n                              :op1 \"Manchester\")))))",
      "# ::snt Easter is less about what is used to mean , ' cafe owner Olly Taylor said .\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Olly\"\n                  :op2 \"Taylor\")\n            :ARG0-of (o / own-01\n                  :ARG1 (c / cafe)))\n      :ARG1 (h / have-degree-91\n            :ARG1 (f / festival\n                  :name (n2 / name\n                        :op1 \"Easter\"))\n            :ARG2 (c2 / concern-02\n                  :ARG0 f\n                  :ARG1 (t / thing\n                        :ARG2-of (m / mean-01\n                              :ARG1 f\n                              :time (u / use-03))))\n            :ARG3 (l / less)))"
    ],
    "tree": [
      "(c / cereal\n   :mod (t / type\n           :quant 2))",
      "(c / cereal\n   :mod (t / type\n           :quant 2)\n   :location (e / egg\n                :mod (f / festival\n                        :name (n / name\n                                 :op1 \"Easter\"))))",
      "(c / cereal\n   :mod (t / type\n           :quant 2)\n   :location (e / egg\n                :mod (f / festival\n                        :name (n / name\n                                 :op1 \"Easter\")))\n   :accompanier (m / marshmallow))",
      "(c / cereal\n   :mod (t / type\n           :quant 2)\n   :location (e / egg\n                :mod (f / festival\n                        :name (n / name\n                                 :op1 \"Easter\")))\n   :accompanier (b / brownie))",
      "(a / and\n   :op1 (m / marshmallow)\n   :op2 (b / brownie))",
      "(s / serve-01\n   :location (c / cafe\n                :name (n / name\n                         :op1 \"Black\"\n                         :op2 \"Milk\")))",
      "(s / serve-01\n   :location (c / cafe\n                :location (q / quarter\n                             :name (n2 / name\n                                       :op1 \"Northern\"\n                                       :op2 \"Quarter\"))))",
      "(s / serve-01\n   :location (c / cafe\n                :location (q / quarter\n                             :part (c2 / city\n                                       :name (n3 / name\n                                                 :op1 \"Manchester\")))))",
      "(c / cafe\n   :location (q / quarter\n                :name (n2 / name\n                          :op1 \"Northern\"\n                          :op2 \"Quarter\")))",
      "(c / cafe\n   :location (q / quarter\n                :part (c2 / city\n                          :name (n3 / name\n                                    :op1 \"Manchester\"))))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Olly\"\n                     :op2 \"Taylor\"))\n   :ARG1 (h / have-degree-91\n            :ARG3 (l / less)))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (o / own-01\n                     :ARG1 (c / cafe)))\n   :ARG1 (h / have-degree-91\n            :ARG3 (l / less)))",
      "(p / person\n   :name (n / name\n            :op1 \"Olly\"\n            :op2 \"Taylor\")\n   :ARG0 (o / own-01\n            :ARG1 (c / cafe)))",
      "(h / have-degree-91\n   :ARG2 (c2 / concern-02\n             :ARG1 (t / thing\n                      :ARG2 (m / mean-01\n                               :time (u / use-03))))\n   :ARG3 (l / less))",
      "(h / have-degree-91\n   :ARG1 (f / festival\n            :name (n2 / name\n                      :op1 \"Easter\"))\n   :ARG2 (c2 / concern-02\n             :ARG1 (t / thing\n                      :ARG2 (m / mean-01\n                               :time (u / use-03))))\n   :ARG3 (l / less))"
    ],
    "smus": [
      "Two types of cereal.",
      "There are two types of cereal in an Easter egg.",
      "There are two types of cereal in an Easter egg with marshmallows.",
      "There are two types of cereal in an Easter egg with brownies.",
      "Marshmallows and brownies.",
      "served in the Black Milk cafe.",
      "served in a cafe in Northern Quarter.",
      "Serving in a cafe in Manchester Quarter.",
      "The cafe is in Northern Quarter.",
      "a cafe in the Manchester quarter.",
      "Less, said Olly Taylor.",
      "The owner of the cafe said it was less.",
      "Owner of the cafe, Ollie Taylor.",
      "Less about what used to mean.",
      "Easter is less about what used to mean."
    ]
  },
  {
    "instance_id": "realsumm-87",
    "summary": "The European Union will accuse Google of illegally abusing The European Union supremacy . The European Union could fine Google more than \u00a3 4 billion - 10 per cent of Google annual revenue . Google to say Google uses search engine to divert traffic to Google own services . Google boasts a 90 per cent share in Europe 's search engine market .",
    "summary_trees": [
      "# ::snt The European Union will accuse Google of illegally abusing The European Union supremacy .\n(a / accuse-01\n      :ARG0 (o / organization\n            :name (n / name\n                  :op1 \"European\"\n                  :op2 \"Union\"))\n      :ARG1 (c / company\n            :name (n2 / name\n                  :op1 \"Google\"))\n      :ARG2 (a2 / abuse-02\n            :ARG0 c\n            :ARG1 (s / supremacy\n                  :poss o)\n            :manner (l / law\n                  :polarity -)))",
      "# ::snt The European Union could fine Google more than \u00a3 4 billion - 10 per cent of Google annual revenue .\n(p / possible-01\n      :ARG1 (f / fine-01\n            :ARG0 (o / organization\n                  :name (n / name\n                        :op1 \"European\"\n                        :op2 \"Union\"))\n            :ARG1 (m / more-than\n                  :op1 (m2 / monetary-quantity\n                        :quant 4000000000\n                        :unit (p2 / pound)\n                        :ARG1-of (m3 / mean-01\n                              :ARG2 (p3 / percentage-entity\n                                    :value 10\n                                    :ARG3-of (ii / include-91\n                                          :ARG2 (r / revenue\n                                                :poss (c / company\n                                                      :name (n2 / name\n                                                            :op1 \"Google\"))\n                                                :frequency (r2 / rate-entity-91\n                                                      :ARG3 (t / temporal-quantity\n                                                            :quant 1\n                                                            :unit (y / year)))))))))\n            :ARG2 c))",
      "# ::snt Google to say Google uses search engine to divert traffic to Google own services .\n(s / say-01\n      :ARG0 (c / company\n            :name (n / name\n                  :op1 \"Google\"))\n      :ARG1 (u / use-01\n            :ARG0 c\n            :ARG1 (s2 / search-engine)\n            :ARG2 (d / divert-01\n                  :ARG0 c\n                  :ARG1 (t / traffic)\n                  :ARG3 (s3 / service\n                        :poss c))))",
      "# ::snt Google boasts a 90 per cent share in Europe 's search engine market .\n(b / boast-01\n      :ARG0 (c / company\n            :name (n / name\n                  :op1 \"Google\"))\n      :ARG1 (s / share-01\n            :ARG1 (m / market\n                  :mod (s2 / search-engine)\n                  :location (c2 / continent\n                        :name (n2 / name\n                              :op1 \"Europe\")))\n            :ARG2 c\n            :quant (p / percentage-entity\n                  :value 90)))"
    ],
    "tree": [
      "(a / accuse-01\n   :ARG0 (o / organization\n            :name (n / name\n                     :op1 \"European\"\n                     :op2 \"Union\")))",
      "(a / accuse-01\n   :ARG0 (o / organization\n            :name (n / name\n                     :op1 \"European\"\n                     :op2 \"Union\"))\n   :ARG1 (c / company\n            :name (n2 / name\n                      :op1 \"Google\")))",
      "(a / accuse-01\n   :ARG0 (o / organization\n            :name (n / name\n                     :op1 \"European\"\n                     :op2 \"Union\"))\n   :ARG2 (a2 / abuse-02\n             :ARG0 (c / company :name (n2 / name :op1 \"Google\"))))",
      "(a / accuse-01\n   :ARG1 (c / company\n            :name (n2 / name\n                      :op1 \"Google\"))\n   :ARG2 (a2 / abuse-02\n             :manner (l / law\n                        :polarity -)))",
      "(a / accuse-01\n   :ARG0 (o / organization\n            :name (n / name\n                     :op1 \"European\"\n                     :op2 \"Union\"))\n   :ARG1 (c / company\n            :name (n2 / name\n                      :op1 \"Google\"))\n   :ARG2 (a2 / abuse-02\n             :manner (l / law\n                        :polarity -)))",
      "(p / possible-01\n   :ARG1 (f / fine-01\n            :ARG0 (o / organization\n                     :name (n / name\n                              :op1 \"European\"\n                              :op2 \"Union\"))))",
      "(p / possible-01\n   :ARG1 (f / fine-01\n            :ARG1 (m / more-than\n                     :op1 (m2 / monetary-quantity\n                              :quant 4000000000))))",
      "(p / possible-01\n   :ARG1 (f / fine-01\n            :ARG1 (m / more-than\n                     :op1 (m2 / monetary-quantity\n                              :ARG1 (m3 / mean-01\n                                        :ARG2 (p3 / percentage-entity\n                                                  :ARG3 (ii / include-91\n                                                            :ARG2 (r / revenue\n                                                                     :poss (c / company\n                                                                              :name (n2 / name\n                                                                                        :op1 \"Google\"))))))))))",
      "(p / possible-01\n   :ARG1 (f / fine-01\n            :ARG1 (m / more-than\n                     :op1 (m2 / monetary-quantity\n                              :ARG1 (m3 / mean-01\n                                        :ARG2 (p3 / percentage-entity\n                                                  :ARG3 (ii / include-91\n                                                            :ARG2 (r / revenue\n                                                                     :frequency (r2 / rate-entity-91\n                                                                                    :ARG3 (t / temporal-quantity\n                                                                                             :unit (y / year)))))))))))",
      "(r / revenue\n   :frequency (r2 / rate-entity-91\n                  :ARG3 (t / temporal-quantity\n                           :unit (y / year))))",
      "(s / say-01\n   :ARG1 (u / use-01\n            :ARG0 (c / company :name (n / name :op1 \"Google\"))))",
      "(s / say-01\n   :ARG1 (u / use-01\n            :ARG2 (d / divert-01\n                     :ARG0 (c / company :name (n / name :op1 \"Google\")))))",
      "(s / say-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Google\"))\n   :ARG1 (u / use-01\n            :ARG0 c))",
      "(s / say-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Google\"))\n   :ARG1 (u / use-01\n            :ARG1 (s2 / search-engine)))",
      "(u / use-01\n   :ARG1 (s2 / search-engine)\n   :ARG2 (d / divert-01\n            :ARG0 (c / company :name (n / name :op1 \"Google\"))))",
      "(b / boast-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Google\")))",
      "(b / boast-01\n   :ARG1 (s / share-01\n            :quant (p / percentage-entity\n                      :value 90)))",
      "(b / boast-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Google\"))\n   :ARG1 (s / share-01\n            :ARG1 (m / market\n                     :mod (s2 / search-engine))))",
      "(b / boast-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Google\"))\n   :ARG1 (s / share-01\n            :quant (p / percentage-entity\n                      :value 90)))",
      "(b / boast-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Google\"))\n   :ARG1 (s / share-01\n            :ARG1 (m / market\n                     :location (c2 / continent\n                                   :name (n2 / name\n                                             :op1 \"Europe\")))))"
    ],
    "smus": [
      "The European Union will accuse.",
      "The European Union will accuse Google.",
      "The European Union will accuse Google of abusing.",
      "accuse Google of illegally abusing.",
      "The European Union will accuse Google of illegally abusing.",
      "The European Union can fine.",
      "More than 4 billion could be fined.",
      "More than a percent of Google's revenue could be fined.",
      "More than a percent of annual revenue can be fined.",
      "Revenue per year.",
      "Say Google uses.",
      "Says Google uses to divert.",
      "Google will say it uses.",
      "Google says it uses a search engine.",
      "Google uses the search engine to divert.",
      "Google boasts.",
      "boasts a share of 90 percent.",
      "Google boasts a share of the search engine market.",
      "Google boasts a 90 percent share.",
      "Google boasts a market share in Europe."
    ]
  },
  {
    "instance_id": "realsumm-88",
    "summary": "Phil Smith , 25 , forgot teaching assistant keys and scaled fence to try to get in teaching assistant flat . But teaching assistant fell and hit teaching assistant head while climbing through window . teaching assistant fractured teaching assistant skull and suffered a bleed on the brain and a blood clot . Parents paid tribute to teaching assistant .",
    "summary_trees": [
      "# ::snt Phil Smith , 25 , forgot teaching assistant keys and scaled fence to try to get in teaching assistant flat .\n(a / and\n      :op1 (f / forget-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Phil\"\n                        :op2 \"Smith\")\n                  :age (t / temporal-quantity\n                        :quant 25\n                        :unit (y / year)))\n            :ARG1 (k / key\n                  :mod (p2 / person\n                        :ARG0-of (a2 / assist-01\n                              :ARG1 (t2 / teach-01)))))\n      :op2 (s / scale-01\n            :ARG0 p\n            :ARG1 (f2 / fence)\n            :purpose (t3 / try-01\n                  :ARG0 p\n                  :ARG1 (g / get-05\n                        :ARG1 p\n                        :ARG2 (f3 / flat)))))",
      "# ::snt But teaching assistant fell and hit teaching assistant head while climbing through window .\n(c / contrast-01\n      :ARG2 (a / and\n            :op1 (f / fall-01\n                  :ARG1 (p / person\n                        :ARG0-of (a2 / assist-01\n                              :ARG1 (t / teach-01))\n                        :part (h / head)))\n            :op2 (h2 / hit-01\n                  :ARG1 h)\n            :time (c2 / climb-01\n                  :ARG0 p\n                  :path (t2 / through\n                        :op1 (w / window)))))",
      "# ::snt teaching assistant fractured teaching assistant skull and suffered a bleed on the brain and a blood clot .\n(a / and\n      :op1 (f / fracture-01\n            :ARG0 (p / person\n                  :ARG0-of (a2 / assist-01\n                        :ARG1 (t / teach-01\n                              :ARG0 (p2 / person\n                                    :part (s / skull)))))\n            :ARG1 s)\n      :op2 (s2 / suffer-01\n            :ARG0 p2\n            :ARG1 (a3 / and\n                  :op1 (b / bleed-01\n                        :ARG1 (b2 / brain)\n                        :op2 (c / clot\n                              :mod (b3 / blood))))))",
      "# ::snt Parents paid tribute to teaching assistant .\n(p / pay-01\n      :ARG0 (p2 / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG2 (p3 / parent)))\n      :ARG1 (t / tribute)\n      :ARG2 (p4 / person\n            :ARG0-of (a / assist-01\n                  :ARG1 (t2 / teach-01))))"
    ],
    "tree": [
      "(f / forget-01\n   :ARG0 (p / person\n            :name (n / name)))",
      "(s / scale-01\n   :ARG0 (p / person :name (n / name :op1 \"Phil\" :op2 \"Smith\")))\n   :ARG1 (f2 / fence)\n   :purpose (t3 / try-01\n                :ARG0 p\n                :ARG1 (g / get-05\n                         :ARG1 p\n                         :ARG2 (f3 / flat))))",
      "(c / contrast-01\n   :ARG2 (f / fall-01\n            :ARG1 (p / person\n                     :ARG0 (a2 / assist-01\n                               :ARG1 (t / teach-01)))))",
      "(a / and\n   :op1 (f / fall-01\n           :ARG1 (p / person\n                    :ARG0 (a2 / assist-01\n                              :ARG1 (t / teach-01)))))",
      "(a / and\n   :op1 (f / fall-01\n           :ARG1 (p / person\n                    :ARG0 (a2 / assist-01\n                              :ARG1 (t / teach-01))))\n   :op2 (h2 / hit-01\n            :ARG1 (h / head)))",
      "(a / and\n   :op1 (f / fall-01\n           :ARG1 (p / person\n                    :ARG0 (a2 / assist-01\n                              :ARG1 (t / teach-01))))\n   :time (c2 / climb-01\n             :path (t2 / through\n                       :op1 (w / window))))",
      "(f / fall-01\n   :ARG1 (p / person\n            :ARG0 (a2 / assist-01\n                      :ARG1 (t / teach-01))))",
      "(f / fracture-01\n   :ARG0 (p / person\n            :ARG0 (a2 / assist-01\n                      :ARG1 (t / teach-01\n                               :ARG0 (p2 / person\n                                         :part (s / skull\n                                                  :ARG1-of f))))))",
      "(s2 / suffer-01\n    :ARG0 (p2 / person)\n    :ARG1 (a3 / and))",
      "(p / pay-01\n   :ARG0 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG2 (p3 / parent))))",
      "(p / pay-01\n   :ARG0 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG2 (p3 / parent)))\n   :ARG2 (p4 / person\n             :ARG0 (a / assist-01\n                      :ARG1 (t2 / teach-01))))",
      "(p / pay-01\n   :ARG0 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG2 (p3 / parent)))\n   :ARG1 (t / tribute))",
      "(p2 / person\n    :ARG0 (h / have-rel-role-91\n             :ARG2 (p3 / parent)))",
      "(p4 / person\n    :ARG0 (a / assist-01\n             :ARG1 (t2 / teach-01)))"
    ],
    "smus": [
      "You forgot.",
      "Phil Smith has scaled the fence to try and get flat.",
      "But the teaching assistant fell.",
      "And the teaching assistant fell.",
      "The teaching assistant fell and hit the head.",
      "And the teaching assistant fell while climbing through the window.",
      "The teaching assistant fell.",
      "The person assisting with the teaching of the fractured skull was fractured.",
      "People suffered and suffered.",
      "Parents paid.",
      "Parents paid the teaching assistant.",
      "Parents paid tribute.",
      "Parents",
      "Teaching assistant."
    ]
  },
  {
    "instance_id": "realsumm-89",
    "summary": "Emmanuel Adebayor 's current Tottenham contract runs out in 2016 . Emmanuel Adebayor 's is unwilling to take anything less than Emmanuel Adebayor 's current \u00a3 5.2million salary before accepting a move out of White Hart Lane . Emmanuel Adebayor 's has made just nine league starts this season .",
    "summary_trees": [
      "# ::snt Emmanuel Adebayor 's current Tottenham contract runs out in 2016 .\n(r / run-out-05\n      :ARG1 (c / contract\n            :poss (p / person\n                  :name (n / name\n                        :op1 \"Emmanuel\"\n                        :op2 \"Adebayor\"))\n            :time (c2 / current)\n            :mod (t / team\n                  :name (n2 / name\n                        :op1 \"Tottenham\")))\n      :time (d / date-entity\n            :year 2016))",
      "# ::snt Emmanuel Adebayor 's is unwilling to take anything less than Emmanuel Adebayor 's current \u00a3 5.2million salary before accepting a move out of White Hart Lane .\n(w / will-02\n      :polarity -\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Emmanuel\"\n                  :op2 \"Adebayor\"))\n      :ARG1 (t / take-01\n            :ARG0 p\n            :ARG1 (a / anything\n                  :ARG1-of (h / have-quant-91\n                        :ARG3 (l / less)\n                        :ARG4 (s / salary\n                              :poss p\n                              :time (c / current)\n                              :quant (m / monetary-quantity\n                                    :quant 5500000\n                                    :unit (p2 / pound)))))\n            :time (b / before\n                  :op1 (a2 / accept-01\n                        :ARG0 p\n                        :ARG1 (m2 / move-01\n                              :ARG0 p\n                              :ARG2 (r / road\n                                    :name (n2 / name\n                                          :op1 \"White\"\n                                          :op2 \"Hart\"\n                                          :op3 \"Lane\")))))))",
      "# ::snt Emmanuel Adebayor 's has made just nine league starts this season .\n(s / start-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Emmanuel\"\n                  :op2 \"Adebayor\"))\n      :mod (l / league)\n      :quant (j / just\n            :op1 9)\n      :time (s2 / season\n            :mod (t / this)))"
    ],
    "tree": [
      "(r / run-out-05\n   :ARG1 (c / contract\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Emmanuel\"\n                              :op2 \"Adebayor\"))))",
      "(r / run-out-05\n   :ARG1 (c / contract\n            :time (c2 / current)))",
      "(r / run-out-05\n   :ARG1 (c / contract\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Emmanuel\"\n                              :op2 \"Adebayor\")))\n   :time (d / date-entity\n            :year 2016))",
      "(r / run-out-05\n   :ARG1 (c / contract\n            :time (c2 / current))\n   :time (d / date-entity\n            :year 2016))",
      "(c / contract\n   :poss (p / person\n            :name (n / name\n                     :op1 \"Emmanuel\"\n                     :op2 \"Adebayor\"))\n   :time (c2 / current)\n   :mod (t / team\n           :name (n2 / name\n                     :op1 \"Tottenham\")))",
      "(p / person\n   :name (n / name\n            :op1 \"Emmanuel\"\n            :op2 \"Adebayor\"))",
      "(h / have-quant-91\n   :ARG3 (l / less)\n   :ARG4 (s / salary\n            :poss (p / person :name (n / name :op1 \"Emmanuel\" :op2 \"Adebayor\"))))",
      "(h / have-quant-91\n   :ARG3 (l / less)\n   :ARG4 (s / salary\n            :quant (m / monetary-quantity\n                      :quant 5500000)))",
      "(b / before\n   :op1 (a2 / accept-01\n            :ARG0 (p / person :name (n / name :op1 \"Emmanuel\" :op2 \"Adebayor\"))))",
      "(r / road\n   :name (n2 / name\n             :op1 \"White\"\n             :op2 \"Hart\"\n             :op3 \"Lane\"))",
      "(s / start-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Emmanuel\"\n                     :op2 \"Adebayor\")))",
      "(s / start-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Emmanuel\"\n                     :op2 \"Adebayor\"))\n   :time (s2 / season\n             :mod (t / this)))",
      "(s / start-01\n   :quant (j / just\n             :op1 9)\n   :time (s2 / season\n             :mod (t / this)))",
      "(s / start-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Emmanuel\"\n                     :op2 \"Adebayor\"))\n   :quant (j / just\n             :op1 9)\n   :time (s2 / season\n             :mod (t / this)))",
      "(s / start-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Emmanuel\"\n                     :op2 \"Adebayor\"))\n   :mod (l / league)\n   :quant (j / just\n             :op1 9)\n   :time (s2 / season\n             :mod (t / this)))"
    ],
    "smus": [
      "Emmanuel Adebayor's contract is running out.",
      "Current contract runs out.",
      "Emmanuel Adebayor's contract runs out in 2016.",
      "Current contract runs out in 2016.",
      "Emmanuel Adebayor's current contract is with Tottenham.",
      "Emmanuel Adebayor",
      "less than Emmanuel Adebayor's salary.",
      "less than a salary of 5. million.",
      "Before Emmanuel Adebayor accepted.",
      "White Hart Lane",
      "Emmanuel Adebayor starts.",
      "Emmanuel Adebayor starts this season.",
      "Just 9 starts this season.",
      "Emmanuel Adebayor just starts 9 this season.",
      "Emmanuel Adebayor just starts 9 league starts this season."
    ]
  },
  {
    "instance_id": "realsumm-90",
    "summary": "John Helm was commentating on the game the day the fire broke out . John Helm gives John Helm insight into what cause the blaze 30 years ago . ' From everything John Helm have been told there is n\u2019t a jot of evidence to suggest the fire was caused deliberately , ' says John Helm .",
    "summary_trees": [
      "# ::snt John Helm was commentating on the game the day the fire broke out .\n(c / commentate-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"John\"\n                  :op2 \"Helm\"))\n      :ARG3 (g / game)\n      :time (b / break-out-30\n            :ARG1 (f / fire)))",
      "# ::snt John Helm gives John Helm insight into what cause the blaze 30 years ago . '\n(g / give-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"John\"\n                  :op2 \"Helm\"))\n      :ARG1 (ii / insight\n            :topic (t / thing\n                  :ARG0-of (c / cause-01\n                        :ARG1 (b / blaze-01\n                              :time (b2 / before\n                                    :op1 (n2 / now)\n                                    :quant (t2 / temporal-quantity\n                                          :quant 30\n                                          :unit (y / year)))))))\n      :ARG2 p)",
      "# ::snt From everything John Helm have been told there is n\u2019t a jot of evidence to suggest the fire was caused deliberately , ' says John Helm .\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"John\"\n                  :op2 \"Helm\"))\n      :ARG1 (e / evidence-01\n            :polarity -\n            :quant (j / jot)\n            :ARG0-of (s2 / suggest-01\n                  :ARG1 (c / cause-01\n                        :ARG1 (f / fire)\n                        :ARG1-of (d / deliberate-01)))\n            :source (e2 / everything\n                  :ARG1-of (t / tell-01\n                        :ARG2 p))))"
    ],
    "tree": [
      "(c / commentate-01\n   :time (b / break-out-30\n            :ARG1 (f / fire)))",
      "(c / commentate-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\"\n                     :op2 \"Helm\"))\n   :ARG3 (g / game))",
      "(c / commentate-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\"\n                     :op2 \"Helm\"))\n   :time (b / break-out-30\n            :ARG1 (f / fire)))",
      "(c / commentate-01\n   :ARG3 (g / game)\n   :time (b / break-out-30\n            :ARG1 (f / fire)))",
      "(p / person\n   :name (n / name\n            :op1 \"John\"\n            :op2 \"Helm\"))",
      "(g / give-01\n   :ARG1 (ii / insight\n             :topic (t / thing\n                       :ARG0 (c / cause-01\n                                :ARG1 (b / blaze-01\n                                         :time (b2 / before\n                                                   :quant (t2 / temporal-quantity\n                                                              :unit (y / year))))))))",
      "(g / give-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\"\n                     :op2 \"Helm\"))\n   :ARG1 (ii / insight\n             :topic (t / thing\n                       :ARG0 (c / cause-01\n                                :ARG1 (b / blaze-01\n                                         :time (b2 / before\n                                                   :quant (t2 / temporal-quantity\n                                                              :unit (y / year))))))))",
      "(g / give-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\"\n                     :op2 \"Helm\"))\n   :ARG1 (ii / insight\n             :topic (t / thing\n                       :ARG0 (c / cause-01\n                                :ARG1 (b / blaze-01\n                                         :time (b2 / before\n                                                   :quant (t2 / temporal-quantity\n                                                              :unit (y / year)))))))\n   :ARG2 p)",
      "(ii / insight\n    :topic (t / thing\n              :ARG0 (c / cause-01\n                       :ARG1 (b / blaze-01\n                                :time (b2 / before\n                                          :quant (t2 / temporal-quantity\n                                                     :quant 30))))))",
      "(b / blaze-01\n   :time (b2 / before\n             :quant (t2 / temporal-quantity\n                        :quant 30)))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\"\n                     :op2 \"Helm\")))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\"\n                     :op2 \"Helm\"))\n   :ARG1 (e / evidence-01\n            :polarity -))",
      "(p / person\n   :name (n / name\n            :op1 \"John\"\n            :op2 \"Helm\"))",
      "(s2 / suggest-01\n    :ARG1 (c / cause-01\n             :ARG1 (f / fire)))",
      "(e2 / everything\n    :ARG1 (t / tell-01\n             :ARG2 (p / person :name (n / name :op1 \"John\" :op2 \"Helm\"))))"
    ],
    "smus": [
      "Commentating as the fire broke out.",
      "John Helm commentating on the game.",
      "John Helm was commentating when the fire broke out.",
      "Commentating on the game as the fire broke out.",
      "John Helm",
      "gives insight into the cause of the blaze years earlier.",
      "John Helm gives insight into the cause of the blaze of the past.",
      "John Helm gives him insight into the cause of the blaze of the past.",
      "An insight into the cause of the blaze that occurred 30 years earlier.",
      "The blaze occurred 30 years earlier.",
      "\"... says John Helm.",
      "There is no evidence, says John Helm.",
      "John Helm",
      "Suggestion that the fire was caused.",
      "Everything that was told to John Helm."
    ]
  },
  {
    "instance_id": "realsumm-91",
    "summary": "Rory McIlroy faced with Fifty Shades of Grey 's Jamie Dornan . Rory McIlroy and Fifty Shades of Grey 's Jamie Dornan took part in the first Circular Soccer Showdown of 2015 . Rory McIlroy finished strongly to finish an impressive fourth at the Masters . READ : It wo n't be too long before Rory McIlroy wins a Masters .",
    "summary_trees": [
      "# ::snt Rory McIlroy faced with Fifty Shades of Grey 's Jamie Dornan .\n(f / face-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Rory\"\n                  :op2 \"McIlroy\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Jamie\"\n                  :op2 \"Dornan\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (b / book\n                        :name (n3 / name\n                              :op1 \"Fifty\"\n                              :op2 \" Shades\"\n                              :op3 \"of\"\n                              :op4 \"Grey\")))))",
      "# ::snt Rory McIlroy and Fifty Shades of Grey 's Jamie Dornan took part in the first Circular Soccer Showdown of 2015 .\n(p / participate-01\n      :ARG0 (a / and\n            :op1 (p2 / person\n                  :name (n / name\n                        :op1 \"Rory\"\n                        :op2 \"McIlroy\"))\n            :op2 (p3 / person\n                  :name (n2 / name\n                        :op1 \"Jamie\"\n                        :op2 \"Dornan\")\n                  :poss (b / book\n                        :name (n3 / name\n                              :op1 \"Fifty\"\n                              :op2 \"Shadows\"\n                              :op3 \"of\"\n                              :op4 \"Grey\"))))\n      :ARG1 (g / game\n            :name (n4 / name\n                  :op1 \"Circular\"\n                  :op2 \"Soccer\"\n                  :op3 \"Showdown\")\n            :ord (o / ordinal-entity\n                  :value 1)\n            :time (d / date-entity\n                  :year 2015)))",
      "# ::snt Rory McIlroy finished strongly to finish an impressive fourth at the Masters .\n(f / finish-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Rory\"\n                  :op2 \"McIlroy\"))\n      :ARG1-of (s / strong-02)\n      :ARG0-of (c / cause-01\n            :ARG1 (f2 / finish-01\n                  :ARG0 p\n                  :ARG2 (f3 / fourth\n                        :ARG0-of (ii / impress-01))\n                  :location (g / game\n                        :name (n2 / name\n                              :op1 \"Masters\")))))",
      "# ::snt READ :\n(r / read-01\n      :ARG1 (ii / it))",
      "# ::snt It wo n't be too long before Rory McIlroy wins a Masters .\n(b / be-temporally-at-91\n      :ARG1 (w / win-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Rory\"\n                        :op2 \"McIlroy\"))\n            :ARG1 (g / game\n                  :name (n2 / name\n                        :op1 \"Masters\")))\n      :ARG2 (b2 / before\n            :op1 (l / long-03\n                  :polarity -\n                  :ARG2-of (h / have-degree-91\n                        :ARG1 w\n                        :ARG3 (t / too)))))"
    ],
    "tree": [
      "(f / face-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Jamie\"\n                       :op2 \"Dornan\")))",
      "(f / face-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rory\"\n                     :op2 \"McIlroy\"))\n   :ARG1 (p2 / person\n             :ARG0 (h / have-org-role-91\n                      :ARG1 (b / book\n                               :name (n3 / name\n                                         :op1 \"Fifty\"\n                                         :op2 \" Shades\"\n                                         :op3 \"of\"\n                                         :op4 \"Grey\")))))",
      "(p2 / person\n    :name (n2 / name\n              :op1 \"Jamie\"\n              :op2 \"Dornan\"))",
      "(p2 / person\n    :ARG0 (h / have-org-role-91\n             :ARG1 (b / book\n                      :name (n3 / name\n                                :op1 \"Fifty\"\n                                :op2 \" Shades\"\n                                :op3 \"of\"\n                                :op4 \"Grey\"))))",
      "(p / participate-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Rory\"\n                      :op2 \"McIlroy\")))",
      "(p / participate-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"Jamie\"\n                       :op2 \"Dornan\")))",
      "(p / participate-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"Jamie\"\n                       :op2 \"Dornan\"))\n   :ARG1 (g / game\n            :name (n4 / name\n                      :op1 \"Circular\"\n                      :op2 \"Soccer\"\n                      :op3 \"Showdown\")))",
      "(p3 / person\n    :name (n2 / name\n              :op1 \"Jamie\"\n              :op2 \"Dornan\"))",
      "(p3 / person\n    :name (n2 / name\n              :op1 \"Jamie\"\n              :op2 \"Dornan\")\n    :poss (b / book\n             :name (n3 / name\n                       :op1 \"Fifty\"\n                       :op2 \"Shadows\"\n                       :op3 \"of\"\n                       :op4 \"Grey\")))",
      "(p / person\n   :name (n / name\n            :op1 \"Rory\"\n            :op2 \"McIlroy\"))",
      "(c / cause-01\n   :ARG1 (f2 / finish-01\n             :ARG2 (f3 / fourth\n                       :ARG0 (ii / impress-01))))",
      "(f2 / finish-01\n    :location (g / game\n                 :name (n2 / name\n                           :op1 \"Masters\")))",
      "(f2 / finish-01\n    :ARG2 (f3 / fourth\n              :ARG0 (ii / impress-01))\n    :location (g / game\n                 :name (n2 / name\n                           :op1 \"Masters\")))",
      "(g / game\n   :name (n2 / name\n             :op1 \"Masters\"))",
      "(r / read-01\n   :ARG1 (ii / it))",
      "(b / be-temporally-at-91\n   :ARG2 (b2 / before\n             :op1 (l / long-03\n                     :ARG2 (h / have-degree-91\n                              :ARG3 (t / too)))))",
      "(b / be-temporally-at-91\n   :ARG1 (w / win-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Rory\"\n                              :op2 \"McIlroy\")))\n   :ARG2 (b2 / before\n             :op1 (l / long-03\n                     :polarity -)))",
      "(b / be-temporally-at-91\n   :ARG1 (w / win-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Rory\"\n                              :op2 \"McIlroy\")))\n   :ARG2 (b2 / before\n             :op1 (l / long-03\n                     :ARG2 (h / have-degree-91\n                              :ARG3 (t / too)))))",
      "(b2 / before\n    :op1 (l / long-03\n            :ARG2 (h / have-degree-91\n                     :ARG3 (t / too))))"
    ],
    "smus": [
      "Jamie Dornan faced.",
      "-Rory McIlroy faced fifty shades of grey.",
      "Jamie Dornan",
      "fifty shades of grey",
      "Ry McIlroy was a participant.",
      "Jamie Dornan was a participant.",
      "Jamie Dornan was a participant in the Circular Soccer Showdown.",
      "Jamie Dornan",
      "Jamie Dornan of fifty shades of grey",
      "Ry McIlroy",
      "So finish fourth in the impressive.",
      "Finish the Masters.",
      "Finish fourth in the Masters.",
      "Masters",
      "It was read.",
      "before too long.",
      "Before long, when Rory McIlroy wins.",
      "Before too long, when Rory McIlroy wins.",
      "Before too long."
    ]
  },
  {
    "instance_id": "realsumm-92",
    "summary": "Chris Christie appeared on The Tonight Show and called out Jimmy Fallon for Jimmy Fallon weight jokes about the governor . Later in The Tonight Show Chris Christie hoarded a pint of ice cream Jimmy Fallon brought out for the two to share . When asked if Chris Christie would run for president , Chris Christie said ; ' Chris Christie \u2019 ve got a day job which keeps Chris Christie busy ' .",
    "summary_trees": [
      "# ::snt Chris Christie appeared on The Tonight Show and called out Jimmy Fallon for Jimmy Fallon weight jokes about the governor .\n(a / and\n      :op1 (a2 / appear-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Chris\"\n                        :op2 \"Christie\"))\n            :location (b / broadcast-program\n                  :name (n2 / name\n                        :op1 \"The\"\n                        :op2 \"Tonight\"\n                        :op3 \"Show\")))\n      :op2 (c / call-out-15\n            :ARG0 p\n            :ARG1 (p2 / person\n                  :name (n3 / name\n                        :op1 \"Jimmy\"\n                        :op2 \"Fallon\"))\n            :ARG2 (j / joke-01\n                  :ARG0 p2\n                  :ARG2 (p3 / person\n                        :ARG0-of (h / have-org-role-91\n                              :ARG2 (g / governor)))\n                  :topic (w / weight))))",
      "# ::snt Later in The Tonight Show Chris Christie hoarded a pint of ice cream Jimmy Fallon brought out for the two to share .\n(h / hoard-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Chris\"\n                  :op2 \"Christie\"))\n      :ARG1 (ii / ice-cream\n            :quant (p2 / pint)\n            :ARG1-of (b / bring-01\n                  :ARG0 (p3 / person\n                        :name (n2 / name\n                              :op1 \"Jimmy\"\n                              :op2 \"Fallon\"))\n                  :ARG2 (o / out)\n                  :purpose (s / share-01\n                        :ARG0 (a / and\n                              :op1 p\n                              :op2 p3)\n                        :ARG1 ii)))\n      :time (a2 / after\n            :op1 (s2 / show\n                  :name (n3 / name\n                        :op1 \"The\"\n                        :op2 \"Tonight\"\n                        :op3 \"Show\"))))",
      "# ::snt When asked if Chris Christie would run for president , Chris Christie said \n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Chris\"\n                  :op2 \"Christie\"))\n      :time (a / ask-01\n            :ARG1 (r / run-02\n                  :ARG0 p\n                  :ARG1 (p2 / person\n                        :ARG0-of (h / have-org-role-91\n                              :ARG2 (p3 / president))))\n            :ARG2 p))"
    ],
    "tree": [
      "(a2 / appear-01\n    :ARG1 (p / person\n             :name (n / name)))",
      "(c / call-out-15\n   :ARG0 (p / person :name (n / name :op1 \"Chris\" :op2 \"Christie\"))\n   :ARG1 (p2 / person\n             :name (n3 / name)))",
      "(h / hoard-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Chris\"\n                     :op2 \"Christie\"))\n   :ARG1 (ii / ice-cream\n             :quant (p2 / pint)))",
      "(ii / ice-cream\n    :quant (p2 / pint)\n    :ARG1 (b / bring-01\n             :ARG0 (p3 / person\n                       :name (n2 / name\n                                 :op1 \"Jimmy\"\n                                 :op2 \"Fallon\"))))",
      "(ii / ice-cream\n    :quant (p2 / pint)\n    :ARG1 (b / bring-01\n             :ARG2 (o / out)))",
      "(ii / ice-cream\n    :quant (p2 / pint)\n    :ARG1 (b / bring-01\n             :purpose (s / share-01\n                         :ARG0 (p3 / person :name (n2 / name :op1 \"Jimmy\" :op2 \"Fallon\")))))",
      "(b / bring-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"Jimmy\"\n                       :op2 \"Fallon\"))\n   :purpose (s / share-01\n               :ARG1 (ii / ice-cream)))",
      "(s / say-01\n   :time (a / ask-01\n            :ARG2 (p / person :name (n / name :op1 \"Chris\" :op2 \"Christie\"))))",
      "(s / say-01\n   :time (a / ask-01\n            :ARG1 (r / run-02\n                     :ARG1 (p2 / person\n                               :ARG0 (h / have-org-role-91\n                                        :ARG2 (p3 / president))))))",
      "(p / person\n   :name (n / name\n            :op1 \"Chris\"\n            :op2 \"Christie\"))",
      "(a / ask-01\n   :ARG1 (r / run-02\n            :ARG0 (p / person :name (n / name :op1 \"Chris\" :op2 \"Christie\"))))",
      "(a / ask-01\n   :ARG1 (r / run-02\n            :ARG1 (p2 / person\n                      :ARG0 (h / have-org-role-91\n                               :ARG2 (p3 / president)))))"
    ],
    "smus": [
      "The person appeared.",
      "Chris Christie called out to the people.",
      "Chris Christie hoarded a pint of ice-cream.",
      "Jimmy Fallon brought a pint of ice-cream.",
      "A pint of ice-cream was brought out.",
      "A pint of ice-cream was brought in to share by Jimmy Fallon.",
      "Jimmy Fallon brought ice-cream to share.",
      "\"It was Chris Christie who was asked,\" said said.",
      "When asked to run for president, he said --",
      "Chris Christie",
      "Chris Christie was asked to run.",
      "asked to run for president"
    ]
  },
  {
    "instance_id": "realsumm-93",
    "summary": "Qantas ' on time rating slipped to 75th out of the 80 airlines using Heathrow . Qantas ' could loose Qantas ' eight landing strips at Heathrow . Qantas ' are also facing a fine in excess of $ 38,000 for every flight that 's late . Qantas ' blamed air congestion at Heathrow and Dubai airports .",
    "summary_trees": [
      "# ::snt Qantas ' on time rating slipped to 75th out of the 80 airlines using Heathrow .\n(s / slip-01\n      :ARG1 (r / rate-01\n            :ARG1 (c / company\n                  :name (n / name\n                        :op1 \"Qantas\"))\n            :ARG3 (o / on-time))\n      :ARG4 (r2 / rank-01\n            :ARG2 75\n            :ARG1 c\n            :ARG5 (a / airline\n                  :quant 80\n                  :ARG0-of (u / use-01\n                        :ARG1 (a2 / airport\n                              :name (n2 / name\n                                    :op1 \"Heathrow\"))))))",
      "# ::snt Qantas ' could loose Qantas ' eight landing strips at Heathrow .\n(p / possible-01\n      :ARG1 (l / loose-01\n            :ARG0 (c / company\n                  :name (n / name\n                        :op1 \"Qantas\"))\n            :ARG1 (s / strip\n                  :quant 8\n                  :purpose (l2 / land-01)\n                  :poss c\n                  :location (a / airport\n                        :name (n2 / name\n                              :op1 \"Heathrow\")))))",
      "# ::snt Qantas ' are also facing a fine in excess of $ 38,000 for every flight that 's late .\n(f / face-01\n      :ARG0 (c / company\n            :name (n / name\n                  :op1 \"Qantas\"))\n      :ARG1 (f2 / fine-01\n            :ARG1 (ii / in-excess-of\n                  :op1 (m / monetary-quantity\n                        :quant 38000\n                        :unit (d / dollar)))\n            :ARG3 (f3 / fly-01\n                  :mod (e / every)\n                  :ARG1-of (l / late-02)))\n      :mod (a / also))",
      "# ::snt Qantas ' blamed air congestion at Heathrow and Dubai airports .\n(b / blame-01\n      :ARG0 (c / company\n            :name (n / name\n                  :op1 \"Qantas\"))\n      :ARG1 (c2 / congest-01\n            :ARG1 (a / air)\n            :location (a2 / and\n                  :op1 (a3 / airport\n                        :name (n2 / name\n                              :op1 \"Heathrow\"))\n                  :op2 (a4 / airport\n                        :name (n3 / name\n                              :op1 \"Dubai\")))))"
    ],
    "tree": [
      "(s / slip-01\n   :ARG1 (r / rate-01\n            :ARG3 (o / on-time)))",
      "(s / slip-01\n   :ARG1 (r / rate-01\n            :ARG1 (c / company\n                     :name (n / name\n                              :op1 \"Qantas\")))\n   :ARG4 (r2 / rank-01\n             :ARG2 75))",
      "(s / slip-01\n   :ARG1 (r / rate-01\n            :ARG3 (o / on-time))\n   :ARG4 (r2 / rank-01\n             :ARG2 75))",
      "(a / airline\n   :ARG0 (u / use-01\n            :ARG1 (a2 / airport\n                      :name (n2 / name\n                                :op1 \"Heathrow\"))))",
      "(u / use-01\n   :ARG1 (a2 / airport\n             :name (n2 / name\n                       :op1 \"Heathrow\")))",
      "(p / possible-01\n   :ARG1 (l / loose-01\n            :ARG0 (c / company\n                     :name (n / name\n                              :op1 \"Qantas\"))))",
      "(p / possible-01\n   :ARG1 (l / loose-01\n            :ARG1 (s / strip\n                     :quant 8)))",
      "(p / possible-01\n   :ARG1 (l / loose-01\n            :ARG1 (s / strip\n                     :purpose (l2 / land-01))))",
      "(p / possible-01\n   :ARG1 (l / loose-01\n            :ARG1 (s / strip\n                     :poss (c / company :name (n / name :op1 \"Qantas\")))))",
      "(s / strip\n   :purpose (l2 / land-01)\n   :location (a / airport\n                :name (n2 / name\n                          :op1 \"Heathrow\")))",
      "(f / face-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Qantas\")))",
      "(f / face-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Qantas\"))\n   :ARG1 (f2 / fine-01\n             :ARG3 (f3 / fly-01\n                       :ARG1 (l / late-02))))",
      "(f / face-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Qantas\"))\n   :mod (a / also))",
      "(f / face-01\n   :ARG1 (f2 / fine-01\n             :ARG3 (f3 / fly-01\n                       :ARG1 (l / late-02)))\n   :mod (a / also))",
      "(f / face-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Qantas\"))\n   :ARG1 (f2 / fine-01\n             :ARG3 (f3 / fly-01\n                       :ARG1 (l / late-02)))\n   :mod (a / also))",
      "(b / blame-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Qantas\")))",
      "(b / blame-01\n   :ARG1 (c2 / congest-01\n             :location (a3 / airport\n                           :name (n2 / name\n                                     :op1 \"Heathrow\"))))",
      "(b / blame-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Qantas\"))\n   :ARG1 (c2 / congest-01\n             :ARG1 (a / air)))",
      "(b / blame-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Qantas\"))\n   :ARG1 (c2 / congest-01\n             :location (a3 / airport\n                           :name (n2 / name\n                                     :op1 \"Heathrow\"))))",
      "(b / blame-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Qantas\"))\n   :ARG1 (c2 / congest-01\n             :location (a4 / airport\n                           :name (n3 / name\n                                     :op1 \"Dubai\"))))"
    ],
    "smus": [
      "Slipped the on-time rating.",
      "Qantas' ratings slipped to 75th.",
      "The on-time rating slipped to #75.",
      "airlines using Heathrow",
      "Using Heathrow.",
      "Qantas could loose.",
      "8 strips could loose.",
      "The landing strips could loose.",
      "Qantas strips may loose.",
      "There are landing strips at Heathrow.",
      "Qantas is facing.",
      "Qantas is facing a fine for late flight.",
      "Qantas is also facing.",
      "Also facing a fine for late flight.",
      "Qantas is also facing a fine for late flight.",
      "Qantas blamed.",
      "Blamed congest at Heathrow airport.",
      "Qantas blamed air congestion.",
      "Qantas blamed congestion at Heathrow airport.",
      "Qantas blamed congest in Dubai."
    ]
  },
  {
    "instance_id": "realsumm-94",
    "summary": "Christopher Starrs was spared jail in an ' act of mercy ' by judge in January . But senior judge has now said Christopher Starrs took ' Christopher Starrs eye off the ball ' . Nicholas Cooke QC said Christopher Starrs should have been jailed . But added Christopher Starrs should thank Christopher Starrs lucky stars as sentence allowed to stand .",
    "summary_trees": [
      "# ::snt Christopher Starrs was spared jail in an ' act of mercy ' by judge in January .\n(s / spare-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG3 (j / judge-01)))\n      :ARG1 (p2 / person\n            :name (n / name\n                  :op1 \"Christopher\"\n                  :op2 \"Starrs\"))\n      :ARG2 (j2 / jail)\n      :manner (a / act-02\n            :ARG0 p2\n            :ARG1 (m / mercy))\n      :time (d / date-entity\n            :month 1))",
      "# ::snt But senior judge has now said Christopher Starrs took ' Christopher Starrs eye off the ball ' .\n(c / contrast-01\n      :ARG2 (s / say-01\n            :ARG0 (p / person\n                  :ARG0-of (h / have-org-role-91\n                        :ARG3 (j / judge-01)\n                        :mod (s2 / senior)))\n            :ARG1 (t / take-off-07\n                  :ARG0 (p2 / person\n                        :name (n / name\n                              :op1 \"Christopher\"\n                              :op2 \"Starrs\"))\n                  :ARG1 (e / eye\n                        :part-of p2)\n                  :source (b / ball))\n            :time (n2 / now)))",
      "# ::snt Nicholas Cooke QC said Christopher Starrs should have been jailed .\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Nicholas\"\n                  :op2 \"Cooke\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (l / lawyer\n                        :mod (g / general))))\n      :ARG1 (r / recommend-01\n            :ARG1 (j / jail-01\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Christopher\"\n                              :op2 \"Starrs\")))))",
      "# ::snt But added Christopher Starrs should thank Christopher Starrs lucky stars as sentence allowed to stand .\n(c / contrast-01\n      :ARG2 (a / add-01\n            :ARG1 (r / recommend-01\n                  :ARG1 (t / thank-01\n                        :ARG0 (p / person\n                              :name (n / name\n                                    :op1 \"Christopher\"\n                                    :op2 \"Starrs\"))\n                        :ARG1 (s / star\n                              :mod (l / lucky)\n                              :poss p)\n                        :ARG2 (a2 / allow-01\n                              :ARG1 (s2 / stand-04\n                                    :ARG1 (s3 / sentence-01\n                                          :ARG1 p))))\n                  :ARG2 p)))"
    ],
    "tree": [
      "(s / spare-01\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Christopher\"\n                      :op2 \"Starrs\"))\n   :ARG2 (j2 / jail))",
      "(s / spare-01\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Christopher\"\n                      :op2 \"Starrs\"))\n   :ARG2 (j2 / jail)\n   :manner (a / act-02\n              :ARG0 p2\n              :ARG1 (m / mercy)))",
      "(s / spare-01\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Christopher\"\n                      :op2 \"Starrs\"))\n   :ARG2 (j2 / jail)\n   :time (d / date-entity\n            :month 1))",
      "(s / spare-01\n   :ARG2 (j2 / jail)\n   :manner (a / act-02\n              :ARG0 (p2 / person :name (n / name :op1 \"Christopher\" :op2 \"Starrs\"))\n              :ARG1 (m / mercy))\n   :time (d / date-entity\n            :month 1))",
      "(c / contrast-01\n   :ARG2 (s / say-01\n            :ARG1 (t / take-off-07\n                     :ARG0 (p2 / person\n                               :name (n / name\n                                        :op1 \"Christopher\"\n                                        :op2 \"Starrs\")\n                               :part (e / eye)))))",
      "(c / contrast-01\n   :ARG2 (s / say-01\n            :time (n2 / now)))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG3 (j / judge-01)))\n   :ARG1 (t / take-off-07\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Christopher\"\n                               :op2 \"Starrs\")\n                      :part (e / eye))))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG3 (j / judge-01)))\n   :ARG1 (t / take-off-07\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Christopher\"\n                               :op2 \"Starrs\")\n                      :part (e / eye)))\n   :time (n2 / now))",
      "(h / have-org-role-91\n   :ARG3 (j / judge-01)\n   :mod (s2 / senior))",
      "(s / say-01\n   :ARG1 (r / recommend-01\n            :ARG1 (j / jail-01\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Christopher\"\n                                         :op2 \"Starrs\")))))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nicholas\"\n                     :op2 \"Cooke\"))\n   :ARG1 (r / recommend-01\n            :ARG1 (j / jail-01\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Christopher\"\n                                         :op2 \"Starrs\")))))",
      "(p / person\n   :name (n / name\n            :op1 \"Nicholas\"\n            :op2 \"Cooke\"))",
      "(r / recommend-01\n   :ARG1 (j / jail-01\n            :ARG1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Christopher\"\n                                :op2 \"Starrs\"))))",
      "(p2 / person\n    :name (n2 / name\n              :op1 \"Christopher\"\n              :op2 \"Starrs\"))",
      "(c / contrast-01\n   :ARG2 (a / add-01\n            :ARG1 (r / recommend-01\n                     :ARG1 (t / thank-01\n                              :ARG1 (s / star\n                                       :mod (l / lucky))))))",
      "(c / contrast-01\n   :ARG2 (a / add-01\n            :ARG1 (r / recommend-01\n                     :ARG1 (t / thank-01\n                              :ARG1 (s / star\n                                       :poss (p / person :name (n / name :op1 \"Christopher\" :op2 \"Starrs\")))))))",
      "(a / add-01\n   :ARG1 (r / recommend-01\n            :ARG1 (t / thank-01\n                     :ARG1 (s / star\n                              :poss (p / person :name (n / name :op1 \"Christopher\" :op2 \"Starrs\"))))))",
      "(r / recommend-01\n   :ARG1 (t / thank-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Christopher\"\n                              :op2 \"Starrs\"))))",
      "(a2 / allow-01\n    :ARG1 (s2 / stand-04\n              :ARG1 (s3 / sentence-01\n                        :ARG1 (p / person :name (n / name :op1 \"Christopher\" :op2 \"Starrs\")))))"
    ],
    "smus": [
      "Christopher Starrs was spared jail.",
      "Christopher Starrs was spared jail in an act of mercy.",
      "Christopher Starrs was spared jail in January.",
      "In January, Christopher Starrs was spared jail in an act of mercy.",
      "But it's been said that Christopher Starrs took an eye off.",
      "But now said.",
      "The judge has said that Christopher Starrs took an eye off.",
      "Now, the judge has said, Christopher Starrs took an eye off.",
      "Senior judge",
      "Christopher Starrs should have been jailed, he said.",
      "Christopher Starrs should be jailed,'' Nicholas Cooke said.",
      "Nicholas Cooke",
      "Christopher Starrs should have been jailed.",
      "Christopher Starrs",
      "But it should be added that the lucky stars should be thanked.",
      "But it was added that Christopher Starrs' stars should be thanked.",
      "Added: \"Christopher Starrs' stars should be thanked.",
      "Christopher Starrs should thank.",
      "Christopher Starrs' sentence was allowed to stand."
    ]
  },
  {
    "instance_id": "realsumm-95",
    "summary": "Real Madrid thrashed Granada 9 - 1 in La Liga at the weekend . Cristiano Ronaldo scored five to take Cristiano Ronaldo league tally to 36 for the season . Real Madrid travel to Rayo Vallecano in a Madrid derby on Wednesday night . Juventus won 3 - 0 at Fiorentina to reach the Coppa Italia final on Tuesday .",
    "summary_trees": [
      "# ::snt Real Madrid thrashed Granada 9 - 1 in La Liga at the weekend .\n(t / thrash-01\n      :ARG0 (t2 / team\n            :name (n / name\n                  :op1 \"Real\"\n                  :op2 \"Madrid\"))\n      :ARG1 (t3 / team\n            :name (n2 / name\n                  :op1 \"Granada\"))\n      :time (w / weekend)\n      :quant (s / score-entity\n            :op1 9\n            :op2 1)\n      :location (l / league\n            :name (n3 / name\n                  :op1 \"La\"\n                  :op2 \"Liga\")))",
      "# ::snt Cristiano Ronaldo scored five to take Cristiano Ronaldo league tally to 36 for the season .\n(s / score-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Cristiano\"\n                  :op2 \"Ronaldo\"))\n      :ARG1 5\n      :ARG0-of (t / take-01\n            :ARG1 (t2 / tally-01\n                  :ARG1 p\n                  :mod (l / league))\n            :ARG3 36\n            :time (s2 / season)))",
      "# ::snt Real Madrid travel to Rayo Vallecano in a Madrid derby on Wednesday night .\n(t / travel-01\n      :ARG0 (t2 / team\n            :name (n / name\n                  :op1 \"Real\"\n                  :op2 \"Madrid\"))\n      :ARG4 (t3 / team\n            :name (n2 / name\n                  :op1 \"Rayo\"\n                  :op2 \"Vallecano\"))\n      :subevent-of (d / derby\n            :mod t2\n            :mod (c / city\n                  :name (n3 / name\n                        :op1 \"Madrid\")))\n      :time (d2 / date-entity\n            :weekday (w / wednesday)\n            :dayperiod (n4 / night)))",
      "# ::snt Juventus won 3 - 0 at Fiorentina to reach the Coppa Italia final on Tuesday .\n(w / win-01\n      :ARG0 (t / team\n            :name (n / name\n                  :op1 \"Juventus\"))\n      :ARG2 (t2 / team\n            :name (n2 / name\n                  :op1 \"Fiorentina\"))\n      :ARG4 (r / reach-01\n            :ARG0 t\n            :ARG1 (f / final\n                  :subevent-of (g / game\n                        :name (n3 / name\n                              :op1 \"Coppa\"\n                              :op2 \"Italia\"))\n                  :time (d / date-entity\n                        :weekday (t3 / tuesday))))\n      :quant (s / score-entity\n            :op1 3\n            :op2 0))"
    ],
    "tree": [
      "(t / thrash-01\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Real\"\n                      :op2 \"Madrid\"))\n   :time (w / weekend))",
      "(t / thrash-01\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Real\"\n                      :op2 \"Madrid\"))\n   :ARG1 (t3 / team\n             :name (n2 / name\n                       :op1 \"Granada\"))\n   :time (w / weekend))",
      "(t / thrash-01\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Real\"\n                      :op2 \"Madrid\"))\n   :ARG1 (t3 / team\n             :name (n2 / name\n                       :op1 \"Granada\"))\n   :location (l / league\n                :name (n3 / name\n                          :op1 \"La\"\n                          :op2 \"Liga\")))",
      "(t / thrash-01\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Real\"\n                      :op2 \"Madrid\"))\n   :ARG1 (t3 / team\n             :name (n2 / name\n                       :op1 \"Granada\"))\n   :time (w / weekend)\n   :quant (s / score-entity\n             :op1 9))",
      "(t / thrash-01\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Real\"\n                      :op2 \"Madrid\"))\n   :ARG1 (t3 / team\n             :name (n2 / name\n                       :op1 \"Granada\"))\n   :time (w / weekend)\n   :location (l / league\n                :name (n3 / name\n                          :op1 \"La\"\n                          :op2 \"Liga\")))",
      "(s / score-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Cristiano\"\n                     :op2 \"Ronaldo\")))",
      "(t / take-01\n   :ARG1 (t2 / tally-01\n             :ARG1 (p / person :name (n / name :op1 \"Cristiano\" :op2 \"Ronaldo\"))))",
      "(t / take-01\n   :ARG1 (t2 / tally-01\n             :mod (l / league)))",
      "(t / take-01\n   :ARG1 (t2 / tally-01\n             :ARG1 (p / person :name (n / name :op1 \"Cristiano\" :op2 \"Ronaldo\")))\n   :time (s2 / season))",
      "(t / take-01\n   :ARG1 (t2 / tally-01\n             :mod (l / league))\n   :time (s2 / season))",
      "(t / travel-01\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Real\"\n                      :op2 \"Madrid\"))\n   :ARG4 (t3 / team\n             :name (n2 / name\n                       :op1 \"Rayo\"\n                       :op2 \"Vallecano\")))",
      "(t / travel-01\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Real\"\n                      :op2 \"Madrid\"))\n   :ARG4 (t3 / team\n             :name (n2 / name\n                       :op1 \"Rayo\"\n                       :op2 \"Vallecano\"))\n   :subevent (d / derby\n                :mod t2))",
      "(t / travel-01\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Real\"\n                      :op2 \"Madrid\"))\n   :ARG4 (t3 / team\n             :name (n2 / name\n                       :op1 \"Rayo\"\n                       :op2 \"Vallecano\"))\n   :time (d2 / date-entity\n             :weekday (w / wednesday)))",
      "(t / travel-01\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Real\"\n                      :op2 \"Madrid\"))\n   :ARG4 (t3 / team\n             :name (n2 / name\n                       :op1 \"Rayo\"\n                       :op2 \"Vallecano\"))\n   :subevent (d / derby\n                :mod t2)\n   :time (d2 / date-entity\n             :weekday (w / wednesday)))",
      "(t / travel-01\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Real\"\n                      :op2 \"Madrid\"))\n   :ARG4 (t3 / team\n             :name (n2 / name\n                       :op1 \"Rayo\"\n                       :op2 \"Vallecano\"))\n   :subevent (d / derby\n                :mod (c / city\n                        :name (n3 / name\n                                  :op1 \"Madrid\")))\n   :time (d2 / date-entity\n             :weekday (w / wednesday)))",
      "(w / win-01\n   :ARG4 (r / reach-01\n            :ARG1 (f / final\n                     :subevent (g / game\n                                  :name (n3 / name\n                                            :op1 \"Coppa\"\n                                            :op2 \"Italia\")))))",
      "(w / win-01\n   :ARG4 (r / reach-01\n            :ARG1 (f / final\n                     :time (d / date-entity\n                              :weekday (t3 / tuesday)))))",
      "(w / win-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Juventus\"))\n   :ARG4 (r / reach-01\n            :ARG1 (f / final\n                     :subevent (g / game\n                                  :name (n3 / name\n                                            :op1 \"Coppa\"\n                                            :op2 \"Italia\")))))",
      "(w / win-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Juventus\"))\n   :ARG4 (r / reach-01\n            :ARG1 (f / final\n                     :time (d / date-entity\n                              :weekday (t3 / tuesday)))))",
      "(r / reach-01\n   :ARG1 (f / final\n            :subevent (g / game\n                         :name (n3 / name\n                                   :op1 \"Coppa\"\n                                   :op2 \"Italia\"))))"
    ],
    "smus": [
      "Real Madrid thrashed at the weekend.",
      "Real Madrid thrash Granada over the weekend.",
      "Real Madrid thrashed Granada in La Liga.",
      "Real Madrid thrashed Granada 9-1 over the weekend.",
      "Real Madrid thrashed Granada at the weekend in La Liga.",
      "Cristiano Ronaldo scored.",
      "Take a tally of Cristiano Ronaldo.",
      "Take the league tally.",
      "Take a tally of Cristina Ronaldo this season.",
      "Take the league tally this season.",
      "Real Madrid travel to Rayo Vallecano",
      "Real Madrid will travel to Rayo Vallecano in the derby.",
      "Real Madrid will travel to Rayo Vallecano on Wednesday.",
      "Real Madrid travel to Rayo Vallecano in the derby on Wednesday.",
      "Real Madrid travel to Rayo Vallecano in the Madrid derby on Wednesday.",
      "The victory was to reach the final of Coppa Italia.",
      "The victory was to reach the final on Tuesday.",
      "Juventus won to reach the final in Coppa Italia.",
      "Juventus won to reach the final on Tuesday.",
      "Reach the final in Coppa Italia"
    ]
  },
  {
    "instance_id": "realsumm-96",
    "summary": "Kevin Pietersen was sacked by England 14 months ago after Ashes defeat . Kevin Pietersen scored 170 on Kevin Pietersen county cricket return for Surrey last week . Kevin Pietersen wants to make a sensational return to the England side this year . But Andrew Flintoff thinks time is running out for Kevin Pietersen to resurrect career .",
    "summary_trees": [
      "# ::snt Kevin Pietersen was sacked by England 14 months ago after Ashes defeat .\n(s / sack-01\n      :ARG0 (t / team\n            :name (n / name\n                  :op1 \"England\"))\n      :ARG1 (p / person\n            :name (n2 / name\n                  :op1 \"Kevin\"\n                  :op2 \"Pietersen\"))\n      :time (b / before\n            :op1 (n3 / now)\n            :quant (t2 / temporal-quantity\n                  :quant 14\n                  :unit (m / month)))\n      :time (a / after\n            :op1 (d / defeat-01\n                  :ARG0 t\n                  :ARG2 (g / game\n                        :name (n4 / name\n                              :op1 \"Ashes\")))))",
      "# ::snt Kevin Pietersen scored 170 on Kevin Pietersen county cricket return for Surrey last week .\n(s / score-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Kevin\"\n                  :op2 \"Pietersen\"))\n      :ARG1 s\n      :ARG2 170\n      :time (w / week\n            :mod (l / last))\n      :time (r / return-01\n            :ARG1 p\n            :ARG4 (c / county\n                  :name (n2 / name\n                        :op1 \"Surrey\"))\n            :mod (c2 / cricket)))",
      "# ::snt Kevin Pietersen wants to make a sensational return to the England side this year .\n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Kevin\"\n                  :op2 \"Pietersen\"))\n      :ARG1 (r / return-01\n            :ARG1 p\n            :ARG4 (s / side\n                  :mod (c / country\n                        :name (n2 / name\n                              :op1 \"England\")))\n            :mod (s2 / sensational)\n            :time (y / year\n                  :mod (t / this))))",
      "# ::snt But Andrew Flintoff thinks time is running out for Kevin Pietersen to resurrect career .\n(c / contrast-01\n      :ARG2 (t / think-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Andrew\"\n                        :op2 \"Flintoff\"))\n            :ARG1 (r / run-out-05\n                  :ARG1 (t2 / time)\n                  :ARG2 (r2 / resurrect-01\n                        :ARG0 (p2 / person\n                              :name (n2 / name\n                                    :op1 \"Kevin\"\n                                    :op2 \"Pietersen\"))\n                        :ARG1 (c2 / career)))))"
    ],
    "tree": [
      "(s / sack-01\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Kevin\"\n                      :op2 \"Pietersen\")))",
      "(s / sack-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"England\"))\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Kevin\"\n                      :op2 \"Pietersen\")))",
      "(p / person\n   :name (n2 / name\n             :op1 \"Kevin\"\n             :op2 \"Pietersen\"))",
      "(b / before\n   :op1 (n3 / now)\n   :quant (t2 / temporal-quantity\n              :unit (m / month)))",
      "(a / after\n   :op1 (d / defeat-01\n           :ARG2 (g / game\n                    :name (n4 / name\n                              :op1 \"Ashes\"))))",
      "(s / score-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kevin\"\n                     :op2 \"Pietersen\")))",
      "(s / score-01\n   :time (w / week\n            :mod (l / last)))",
      "(s / score-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kevin\"\n                     :op2 \"Pietersen\"))\n   :time (w / week\n            :mod (l / last)))",
      "(p / person\n   :name (n / name\n            :op1 \"Kevin\"\n            :op2 \"Pietersen\"))",
      "(r / return-01\n   :ARG4 (c / county\n            :name (n2 / name\n                      :op1 \"Surrey\")))",
      "(w / want-01\n   :ARG1 (r / return-01\n            :ARG1 (p / person :name (n / name :op1 \"Kevin\" :op2 \"Pietersen\"))))",
      "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kevin\"\n                     :op2 \"Pietersen\"))\n   :ARG1 (r / return-01\n            :ARG1 p))",
      "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kevin\"\n                     :op2 \"Pietersen\"))\n   :ARG1 (r / return-01\n            :ARG4 (s / side\n                     :mod (c / country\n                             :name (n2 / name\n                                       :op1 \"England\")))))",
      "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kevin\"\n                     :op2 \"Pietersen\"))\n   :ARG1 (r / return-01\n            :mod (s2 / sensational)))",
      "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kevin\"\n                     :op2 \"Pietersen\"))\n   :ARG1 (r / return-01\n            :time (y / year\n                     :mod (t / this))))",
      "(c / contrast-01\n   :ARG2 (t / think-01\n            :ARG1 (r / run-out-05\n                     :ARG1 (t2 / time))))",
      "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Andrew\"\n                     :op2 \"Flintoff\")))",
      "(t / think-01\n   :ARG1 (r / run-out-05\n            :ARG2 (r2 / resurrect-01\n                      :ARG1 (c2 / career))))",
      "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Andrew\"\n                     :op2 \"Flintoff\"))\n   :ARG1 (r / run-out-05\n            :ARG1 (t2 / time)))",
      "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Andrew\"\n                     :op2 \"Flintoff\"))\n   :ARG1 (r / run-out-05\n            :ARG2 (r2 / resurrect-01\n                      :ARG0 (p2 / person\n                                :name (n2 / name\n                                          :op1 \"Kevin\"\n                                          :op2 \"Pietersen\")))))"
    ],
    "smus": [
      "Kevin Pietersen was sacked.",
      "England have sacked Kevin Pietersen.",
      "Kevin Pietersen",
      "Months ago.",
      "After the Ashes defeat.",
      "Kevin Pietersen scored.",
      "Scored last week.",
      "Kevin Pietersen scored last week.",
      "Kevin Pietersen",
      "Return to Surrey",
      "Kevin Pietersen wants a return.",
      "Kevin Pietersen wants to return.",
      "Kevin Pietersen wants a return to the English side.",
      "Kevin Pietersen wants a sensational return.",
      "Kevin Pietersen wants a return this year.",
      "But thinks time is running out.",
      "Andrew Flintoff thinks.",
      "Thinks time is running out to resurrect a career.",
      "Andrew Flintoff thinks time is running out.",
      "Andrew Flintoff thinks that Kevin Pietersen is running out of time to resurrect."
    ]
  },
  {
    "instance_id": "realsumm-97",
    "summary": "If Carl Froch does n't fight in 2015 I ' m not sure Carl Froch 'll be back at all . A blockbuster with James DeGale is most likely after Julio Cesar Chavez Jnr defeat - but Anthony Dirrell has made contact . Scott Quigg - Carl Froch summer fight is dead in the water .",
    "summary_trees": [
      "# ::snt If Carl Froch does n't fight in 2015 I ' m not sure Carl Froch 'll be back at all .\n(s / sure-02\n      :polarity -\n      :ARG0 (ii / i)\n      :ARG1 (r / return-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Carl\"\n                        :op2 \"Froch\"))\n            :mod (a / at-all))\n      :condition (f / fight-01\n            :polarity -\n            :ARG0 p\n            :time (d / date-entity\n                  :year 2015)))",
      "# ::snt A blockbuster with James DeGale is most likely after Julio Cesar Chavez Jnr defeat - but Anthony Dirrell has made contact .\n(l / likely-01\n      :ARG1 (b / blockbuster\n            :mod (p / person\n                  :name (n / name\n                        :op1 \"James\"\n                        :op2 \"DeGale\")))\n      :time (a / after\n            :op1 (d / defeat-01\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Julio\"\n                              :op2 \"Cesar\"\n                              :op3 \"Chavez\"\n                              :op4 \"Jr\"))))\n      :concession (c / contact-01\n            :ARG0 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Anthony\"\n                        :op2 \"Dirrell\")))\n      :ARG2-of (h / have-degree-91\n            :ARG1 b\n            :ARG3 (m / most)))",
      "# ::snt Scott Quigg - Carl Froch summer fight is dead in the water .\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Scott\"\n                  :op2 \"Quigg\"))\n      :ARG1 (d / die-01\n            :ARG1 (f / fight-01\n                  :ARG0 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Carl\"\n                              :op2 \"Froch\"))\n                  :time (d2 / date-entity\n                        :season (s2 / summer)))\n            :location (w / water)))"
    ],
    "tree": [
      "(s / sure-02\n   :condition (f / fight-01\n                 :polarity -))",
      "(s / sure-02\n   :ARG0 (ii / i)\n   :condition (f / fight-01\n                 :polarity -))",
      "(r / return-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Carl\"\n                     :op2 \"Froch\")))",
      "(r / return-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Carl\"\n                     :op2 \"Froch\"))\n   :mod (a / at-all))",
      "(p / person\n   :name (n / name\n            :op1 \"Carl\"\n            :op2 \"Froch\"))",
      "(l / likely-01\n   :ARG1 (b / blockbuster\n            :mod (p / person\n                    :name (n / name\n                             :op1 \"James\"\n                             :op2 \"DeGale\")))\n   :ARG2 (h / have-degree-91\n            :ARG3 (m / most)))",
      "(l / likely-01\n   :time (a / after\n            :op1 (d / defeat-01\n                    :ARG1 (p2 / person\n                              :name (n2 / name\n                                        :op1 \"Julio\"\n                                        :op2 \"Cesar\"\n                                        :op3 \"Chavez\"\n                                        :op4 \"Jr\"))))\n   :ARG2 (h / have-degree-91\n            :ARG3 (m / most)))",
      "(l / likely-01\n   :ARG1 (b / blockbuster\n            :mod (p / person\n                    :name (n / name\n                             :op1 \"James\"\n                             :op2 \"DeGale\")))\n   :time (a / after\n            :op1 (d / defeat-01\n                    :ARG1 (p2 / person\n                              :name (n2 / name\n                                        :op1 \"Julio\"\n                                        :op2 \"Cesar\"\n                                        :op3 \"Chavez\"\n                                        :op4 \"Jr\"))))\n   :ARG2 (h / have-degree-91\n            :ARG3 (m / most)))",
      "(l / likely-01\n   :ARG1 (b / blockbuster\n            :mod (p / person\n                    :name (n / name\n                             :op1 \"James\"\n                             :op2 \"DeGale\")))\n   :time (a / after\n            :op1 (d / defeat-01\n                    :ARG1 (p2 / person\n                              :name (n2 / name\n                                        :op1 \"Julio\"\n                                        :op2 \"Cesar\"\n                                        :op3 \"Chavez\"\n                                        :op4 \"Jr\"))))\n   :concession (c / contact-01\n                  :ARG0 (p3 / person\n                            :name (n3 / name\n                                      :op1 \"Anthony\"\n                                      :op2 \"Dirrell\")))\n   :ARG2 (h / have-degree-91\n            :ARG3 (m / most)))",
      "(c / contact-01\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Anthony\"\n                       :op2 \"Dirrell\")))",
      "(s / say-01\n   :ARG1 (d / die-01\n            :ARG1 (f / fight-01\n                     :ARG0 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Carl\"\n                                         :op2 \"Froch\")))))",
      "(s / say-01\n   :ARG1 (d / die-01\n            :ARG1 (f / fight-01\n                     :time (d2 / date-entity\n                               :season (s2 / summer)))))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Scott\"\n                     :op2 \"Quigg\"))\n   :ARG1 (d / die-01\n            :ARG1 (f / fight-01\n                     :ARG0 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Carl\"\n                                         :op2 \"Froch\")))))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Scott\"\n                     :op2 \"Quigg\"))\n   :ARG1 (d / die-01\n            :ARG1 (f / fight-01\n                     :time (d2 / date-entity\n                               :season (s2 / summer)))))",
      "(d / die-01\n   :ARG1 (f / fight-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Carl\"\n                                :op2 \"Froch\")))\n   :location (w / water))"
    ],
    "smus": [
      "sure condi not fifty",
      "I'm sure condi not fifty.",
      "Carl Froch returned.",
      "Carl Froch returns at all.",
      "Carl Froch",
      "James DeGale's blockbuster is most likely.",
      "Most likely after Julio Cesar Chavez Jr. defeats",
      "James DeGale's blockbuster is most likely after Julio Cesar Chavez Jr.'s defeat.",
      "Despite Anthony Dirrell's contact, James DeGale's most likely blockbuster after Julio Cesar Chavez Jr.'s defeat.",
      "Anthony Dirrell is in contact.",
      "Carl Froch's fight is dead.",
      "The summer fight is dead.",
      "Scott Quigg: Carl Froch fight dead.",
      "The summer fight was dead, says Scott Quigg.",
      "The fight with Carl Froch has died in the water."
    ]
  },
  {
    "instance_id": "realsumm-98",
    "summary": "Clip shows mysterious black cloud hanging over the village of Shortandy . mysterious black cloud hanging over the village of Shortandy sat in the air not moving for more than 15 minutes . mysterious black cloud hanging over the village of Shortandy has been viewed tens of thousands of times on Youtube . While some viewers are suggesting mysterious black cloud hanging over the village of Shortandy was an alien spacecraft , experts think mysterious black cloud hanging over the village of Shortandy could have been caused by nearby factories .",
    "summary_trees": [
      "# ::snt Clip shows mysterious black cloud hanging over the village of Shortandy .\n(s / show-01\n      :ARG0 (c / clip)\n      :ARG1 (c2 / cloud\n            :mod (m / mysterious)\n            :ARG1-of (b / black-04)\n            :ARG1-of (h / hang-01\n                  :ARG2 (o / over\n                        :op1 (v / village\n                              :name (n / name\n                                    :op1 \"Shortandy\"))))))",
      "# ::snt mysterious black cloud hanging over the village of Shortandy sat in the air not moving for more than 15 minutes .\n(s / sit-01\n      :ARG1 (c / cloud\n            :ARG1-of (b / black-04)\n            :mod (m / mysterious)\n            :ARG1-of (h / hang-01\n                  :ARG2 (o / over\n                        :op1 (v / village\n                              :name (n / name\n                                    :op1 \"Shortandy\")))))\n      :ARG2 (a / air)\n      :duration (m2 / more-than\n            :op1 (t / temporal-quantity\n                  :quant 15\n                  :unit (m3 / minute)))\n      :manner (m4 / move-01\n            :polarity -\n            :ARG1 c))",
      "# ::snt mysterious black cloud hanging over the village of Shortandy has been viewed tens of thousands of times on Youtube .\n(v / view-01\n      :ARG1 (c / cloud\n            :ARG1-of (b / black-04)\n            :mod (m / mysterious)\n            :ARG1-of (h / hang-01\n                  :ARG2 (o / over\n                        :op1 (v2 / village\n                              :name (n / name\n                                    :op1 \"Shortandy\")))))\n      :medium (p / publication\n            :name (n2 / name\n                  :op1 \"Youtube\"))\n      :frequency (m2 / multiple\n            :op1 10000))",
      "# ::snt While some viewers are suggesting mysterious black cloud hanging over the village of Shortandy was an alien spacecraft , experts think mysterious black cloud hanging over the village of Shortandy could have been caused by nearby factories .\n(c / contrast-01\n      :ARG1 (s / suggest-01\n            :ARG0 (p / person\n                  :ARG0-of (v / view-01)\n                  :quant (s2 / some))\n            :ARG1 (s3 / spacecraft\n                  :mod (a / alien)\n                  :domain (c2 / cloud\n                        :ARG1-of (b / black-04)\n                        :mod (m / mystery)\n                        :ARG1-of (h / hang-01\n                              :ARG2 (o / over\n                                    :op1 (v2 / village\n                                          :name (n / name\n                                                :op1 \"Shortandy\")))))))\n      :ARG2 (t / think-01\n            :ARG0 (p2 / person\n                  :ARG1-of (e / expert-01))\n            :ARG1 (p3 / possible-01\n                  :ARG1 (c3 / cause-01\n                        :ARG0 (f / factory\n                              :location (n2 / nearby))\n                        :ARG1 c2))))"
    ],
    "tree": [
      "(s / show-01\n   :ARG1 (c2 / cloud\n             :mod (m / mysterious)))",
      "(s / show-01\n   :ARG1 (c2 / cloud\n             :ARG1 (h / hang-01\n                      :ARG2 (o / over\n                               :op1 (v / village\n                                       :name (n / name\n                                                :op1 \"Shortandy\"))))))",
      "(s / show-01\n   :ARG0 (c / clip)\n   :ARG1 (c2 / cloud\n             :mod (m / mysterious)))",
      "(s / show-01\n   :ARG0 (c / clip)\n   :ARG1 (c2 / cloud\n             :ARG1 (b / black-04)))",
      "(s / show-01\n   :ARG0 (c / clip)\n   :ARG1 (c2 / cloud\n             :ARG1 (h / hang-01\n                      :ARG2 (o / over\n                               :op1 (v / village\n                                       :name (n / name\n                                                :op1 \"Shortandy\"))))))",
      "(s / sit-01\n   :ARG1 (c / cloud\n            :ARG1 (b / black-04))\n   :ARG2 (a / air))",
      "(s / sit-01\n   :ARG1 (c / cloud\n            :mod (m / mysterious))\n   :ARG2 (a / air))",
      "(s / sit-01\n   :ARG1 (c / cloud\n            :mod (m / mysterious))\n   :ARG2 (a / air)\n   :duration (m2 / more-than\n                 :op1 (t / temporal-quantity\n                         :quant 15)))",
      "(s / sit-01\n   :ARG1 (c / cloud\n            :mod (m / mysterious))\n   :ARG2 (a / air)\n   :manner (m4 / move-01\n               :polarity -\n               :ARG1 c))",
      "(s / sit-01\n   :ARG1 (c / cloud\n            :mod (m / mysterious))\n   :ARG2 (a / air)\n   :duration (m2 / more-than\n                 :op1 (t / temporal-quantity\n                         :quant 15))\n   :manner (m4 / move-01\n               :polarity -\n               :ARG1 c))",
      "(v / view-01\n   :ARG1 (c / cloud\n            :mod (m / mysterious)))",
      "(v / view-01\n   :ARG1 (c / cloud\n            :ARG1 (h / hang-01\n                     :ARG2 (o / over\n                              :op1 (v2 / village\n                                       :name (n / name\n                                                :op1 \"Shortandy\"))))))",
      "(v / view-01\n   :medium (p / publication\n              :name (n2 / name\n                        :op1 \"Youtube\")))",
      "(v / view-01\n   :ARG1 (c / cloud\n            :mod (m / mysterious))\n   :medium (p / publication\n              :name (n2 / name\n                        :op1 \"Youtube\")))",
      "(v / view-01\n   :ARG1 (c / cloud\n            :ARG1 (h / hang-01\n                     :ARG2 (o / over\n                              :op1 (v2 / village\n                                       :name (n / name\n                                                :op1 \"Shortandy\")))))\n   :medium (p / publication\n              :name (n2 / name\n                        :op1 \"Youtube\")))",
      "(c / contrast-01\n   :ARG1 (s / suggest-01\n            :ARG0 (p / person\n                     :quant (s2 / some)))\n   :ARG2 (t / think-01\n            :ARG1 (p3 / possible-01\n                      :ARG1 (c3 / cause-01\n                                :ARG0 (f / factory\n                                         :location (n2 / nearby))))))",
      "(s / suggest-01\n   :ARG0 (p / person\n            :quant (s2 / some)))",
      "(s / suggest-01\n   :ARG0 (p / person\n            :ARG0 (v / view-01))\n   :ARG1 (s3 / spacecraft\n             :mod (a / alien)))",
      "(s / suggest-01\n   :ARG0 (p / person\n            :quant (s2 / some))\n   :ARG1 (s3 / spacecraft\n             :mod (a / alien)))",
      "(t / think-01\n   :ARG0 (p2 / person\n             :ARG1 (e / expert-01)))"
    ],
    "smus": [
      "Shows mysterious cloud.",
      "Shows cloud hanging over Shortandy village.",
      "The clip shows a mysterious cloud.",
      "The clip shows a black cloud.",
      "The clip shows a cloud hanging over Shortandy village.",
      "A black cloud sat in the air.",
      "A mysterious cloud sat in the air.",
      "A mysterious cloud sat in the air for more than 15 minutes.",
      "A mysterious cloud sat in the air, not moving.",
      "The mysterious cloud sat in the air for more than 15 minutes, not moving.",
      "A mysterious cloud was viewed.",
      "A cloud hung over Shortandy village was viewed.",
      "Viewed on YouTube.",
      "A mysterious cloud was viewed on youtube.",
      "A cloud hung over Shortandy village was viewed on YouTube.",
      "Some people are suggesting, others think nearby factories may have caused it.",
      "Some people are suggesting.",
      "Viewers are suggesting alien spacecraft.",
      "Some people are suggesting alien spacecraft.",
      "Experts think."
    ]
  },
  {
    "instance_id": "realsumm-99",
    "summary": "Incredible images show handcuffed members from the notorious Barrio 18 gang being marched onto buses . In total 1,177 were transferred to a different jail where 1,177 will mix with 1,177 arch rivals - Mara Salvatrucha . handcuffed members from the notorious Barrio 18 gang will now no longer be classified by gang affiliation , but by how dangerous handcuffed members from the notorious Barrio 18 gang are .",
    "summary_trees": [
      "# ::snt Incredible images show handcuffed members from the notorious Barrio 18 gang being marched onto buses .\n(s / show-01\n      :ARG0 (ii / image\n            :mod (ii2 / incredible))\n      :ARG1 (m / march-01\n            :ARG1 (p / person\n                  :ARG0-of (h / have-org-role-91\n                        :ARG1 (g / gang\n                              :name (n / name\n                                    :op1 \"Barrio\"\n                                    :op2 18)\n                              :ARG1-of (n2 / notorious-01))\n                        :ARG2 (m2 / member))\n                  :ARG1-of (h2 / handcuff-01))\n            :destination (b / bus)))",
      "# ::snt In total 1,177 were transferred to a different jail where 1,177 will mix with 1,177 arch rivals - Mara Salvatrucha .\n(t / transfer-01\n      :ARG1 (p / person\n            :quant 1741\n            :ARG2-of (t2 / total-01))\n      :ARG2 (j / jail\n            :ARG1-of (d / differ-02)\n            :location-of (m / mix-01\n                  :ARG1 p\n                  :ARG2 (p2 / person\n                        :quant 1741\n                        :ARG0-of (h / have-rel-role-91\n                              :ARG1 (c / criminal-organization\n                                    :name (n / name\n                                          :op1 \"Mara\"\n                                          :op2 \"Salvatrucha\")\n                                    :ARG0-of (r / rival-01\n                                          :mod (a / arch)))\n                              :ARG2 (m2 / member))))))",
      "# ::snt handcuffed members from the notorious Barrio 18 gang will now no longer be classified by gang affiliation , but by how dangerous handcuffed members from the notorious Barrio 18 gang are .\n(c / contrast-01\n      :ARG1 (c2 / classify-01\n            :ARG1 (p / person\n                  :ARG0-of (h / have-org-role-91\n                        :ARG1 (g / gang\n                              :name (n / name\n                                    :op1 \"Barrio\"\n                                    :op2 18)\n                              :ARG1-of (n2 / notorious-01))\n                        :ARG2 (m / member\n                              :ARG1-of (h2 / handcuff-01))))\n            :ARG2 (a / affiliate-01\n                  :ARG1 g))\n      :ARG2 (c3 / classify-01\n            :ARG1 p\n            :ARG2 (t / thing\n                  :degree-of (d / dangerous\n                        :domain p)))\n      :time (n3 / no-longer)\n      :time (n4 / now))"
    ],
    "tree": [
      "(s / show-01\n   :ARG1 (m / march-01\n            :ARG1 (p / person\n                     :ARG1 (h2 / handcuff-01))))",
      "(m / march-01\n   :ARG1 (p / person\n            :ARG1 (h2 / handcuff-01)))",
      "(m / march-01\n   :ARG1 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (m2 / member))))",
      "(m / march-01\n   :ARG1 (p / person\n            :ARG1 (h2 / handcuff-01))\n   :destination (b / bus))",
      "(m / march-01\n   :ARG1 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (m2 / member)))\n   :destination (b / bus))",
      "(t / transfer-01\n   :ARG2 (j / jail\n            :ARG1 (d / differ-02)))",
      "(t / transfer-01\n   :ARG2 (j / jail\n            :location (m / mix-01\n                         :ARG2 (p2 / person\n                                   :ARG0 (h / have-rel-role-91\n                                            :ARG1 (c / criminal-organization\n                                                     :ARG0 (r / rival-01\n                                                              :mod (a / arch))))))))",
      "(t / transfer-01\n   :ARG1 (p / person\n            :ARG2 (t2 / total-01))\n   :ARG2 (j / jail\n            :location (m / mix-01\n                         :ARG2 (p2 / person\n                                   :ARG0 (h / have-rel-role-91\n                                            :ARG1 (c / criminal-organization\n                                                     :ARG0 (r / rival-01\n                                                              :mod (a / arch))))))))",
      "(j / jail\n   :ARG1 (d / differ-02)\n   :location (m / mix-01\n                :ARG1 (p / person)))",
      "(m / mix-01\n   :ARG2 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 (c / criminal-organization\n                               :ARG0 (r / rival-01\n                                        :mod (a / arch))))))",
      "(p / person\n   :ARG0 (h / have-org-role-91\n            :ARG1 (g / gang\n                     :name (n / name\n                              :op1 \"Barrio\"\n                              :op2 18))))",
      "(h / have-org-role-91\n   :ARG1 (g / gang\n            :ARG1 (n2 / notorious-01))\n   :ARG2 (m / member\n            :ARG1 (h2 / handcuff-01)))",
      "(c3 / classify-01\n    :ARG2 (t / thing\n             :degree (d / dangerous\n                        :domain (p / person))))"
    ],
    "smus": [
      "Show that handcuffed people are marching.",
      "Handcuffed people marched.",
      "Members marched.",
      "Handcuffed people marched to buses.",
      "Members marched to buses.",
      "Transferred to a different jail.",
      "Transferred to jail where arch rivals will mix.",
      "Total transferred to jail where arch rivals would mix.",
      "There is a different jail where people mix.",
      "Mix with arch rivals.",
      "The gang is called Barrio 18.",
      "The notorious gang is a group of handcuffed members.",
      "People are classified as dangerous."
    ]
  }
]