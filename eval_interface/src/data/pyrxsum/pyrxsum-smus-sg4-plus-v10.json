[
  {
    "instance_id": "pyrxsum-0",
    "summary": "Netherlands midfielder Wesley Sneijder has joined French Ligue 1 side Nice on a free transfer .",
    "summary_trees": [
      "# ::snt Netherlands midfielder Wesley Sneijder has joined French Ligue 1 side Nice on a free transfer .\n(j / join-04\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Wesley\"\n                  :op2 \"Sneijder\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (t / team\n                        :name (n2 / name\n                              :op1 \"Netherlands\"))\n                  :ARG3 (m / midfielder)))\n      :ARG1 (t2 / team\n            :name (n3 / name\n                  :op1 \"Nice\")\n            :mod (l / league\n                  :name (n4 / name\n                        :op1 \"Ligue\"\n                        :op2 1)\n                  :mod (c / country\n                        :name (n5 / name\n                              :op1 \"France\"))))\n      :manner (t3 / transfer-01\n            :ARG1 p\n            :ARG1-of (f / free-03)))"
    ],
    "tree": [
      "(j / join-04\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Wesley\"\n                     :op2 \"Sneijder\")))",
      "(j / join-04\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG3 (m / midfielder))))",
      "(j / join-04\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Wesley\"\n                     :op2 \"Sneijder\"))\n   :ARG1 (t2 / team\n             :name (n3 / name\n                       :op1 \"Nice\")))",
      "(j / join-04\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG3 (m / midfielder)))\n   :ARG1 (t2 / team\n             :name (n3 / name\n                       :op1 \"Nice\")))",
      "(j / join-04\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Wesley\"\n                     :op2 \"Sneijder\"))\n   :ARG1 (t2 / team\n             :name (n3 / name\n                       :op1 \"Nice\"))\n   :manner (t3 / transfer-01\n               :ARG1 p\n               :ARG1 (f / free-03)))"
    ],
    "smus": [
      "Wesley Sneijder has joined.",
      "The midfielder has joined.",
      "Wesley Sneijder has joined Nice.",
      "The midfielder has joined Nice.",
      "Wesley Sneijder has joined Nice on a free transfer."
    ]
  },
  {
    "instance_id": "pyrxsum-1",
    "summary": "A State Department official \" pressured \" the FBI to change the classification of a Hillary Clinton email in a \" quid pro quo \" , according to the FBI documents .",
    "summary_trees": [
      "# ::snt A State Department official \" pressured \" the FBI to change the classification of a Hillary Clinton email in a \" quid pro quo \" , according to the FBI documents .\n(s / say-01\n      :ARG0 (d / document\n            :source (g / government-organization\n                  :name (n / name\n                        :op1 \"FBI\")))\n      :ARG1 (p / pressure-01\n            :ARG0 (p2 / person\n                  :ARG0-of (h / have-org-role-91\n                        :ARG1 (g2 / government-organization\n                              :name (n2 / name\n                                    :op1 \"State\"\n                                    :op2 \"Department\"))\n                        :ARG2 (o / official)))\n            :ARG1 g\n            :ARG2 (c / change-01\n                  :ARG0 g\n                  :ARG1 (c2 / classify-01\n                        :ARG1 (e / email-01\n                              :ARG0 (p3 / person\n                                    :name (n3 / name\n                                          :op1 \"Hillary\"\n                                          :op2 \"Clinton\")))))\n            :subevent-of (q / quid-pro-quo)))"
    ],
    "tree": [
      "(s / say-01\n   :ARG0 (d / document\n            :source (g / government-organization\n                       :name (n / name\n                                :op1 \"FBI\")))\n   :ARG1 (p / pressure-01\n            :ARG0 (p2 / person\n                      :ARG0 (h / have-org-role-91\n                               :ARG1 (g2 / government-organization\n                                         :name (n2 / name\n                                                   :op1 \"State\"\n                                                   :op2 \"Department\"))))))",
      "(s / say-01\n   :ARG0 (d / document\n            :source (g / government-organization\n                       :name (n / name\n                                :op1 \"FBI\")))\n   :ARG1 (p / pressure-01\n            :ARG0 (p2 / person\n                      :ARG0 (h / have-org-role-91\n                               :ARG2 (o / official)))))",
      "(p / pressure-01\n   :ARG2 (c / change-01\n            :ARG0 (g / government-organization :name (n / name :op1 \"FBI\"))))",
      "(p / pressure-01\n   :ARG0 (p2 / person\n             :ARG0 (h / have-org-role-91\n                      :ARG2 (o / official)))\n   :ARG2 (c / change-01\n            :ARG0 (g / government-organization :name (n / name :op1 \"FBI\"))))",
      "(p3 / person\n    :name (n3 / name\n              :op1 \"Hillary\"\n              :op2 \"Clinton\"))"
    ],
    "smus": [
      "According to the FBI documents, the State Department pressured.",
      "According to FBI documents, the official exerted pressure.",
      "Pressure was put on the FBI to change.",
      "The official pressured the FBI to change.",
      "Hillary Clinton"
    ]
  },
  {
    "instance_id": "pyrxsum-2",
    "summary": "American Jason Dufner will take a five - shot lead into the third round of the Memorial Tournament after carding an eagle on the 18th hole on Friday .",
    "summary_trees": [
      "# ::snt American Jason Dufner will take a five - shot lead into the third round of the Memorial Tournament after carding an eagle on the 18th hole on Friday .\n(t / take-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jason\"\n                  :op2 \"Dufner\")\n            :mod (c / country\n                  :name (n2 / name\n                        :op1 \"America\")))\n      :ARG1 (l / lead-01\n            :ARG0 p\n            :ARG2 (s / shot\n                  :quant 5))\n      :ARG2 (r / round\n            :ord (o / ordinal-entity\n                  :value 3)\n            :subevent-of (g / game\n                  :name (n3 / name\n                        :op1 \"Memorial\"\n                        :op2 \"Tournament\")))\n      :time (a / after\n            :op1 (c2 / card-01\n                  :ARG0 p\n                  :ARG1 (e / eagle)\n                  :time (h / hole\n                        :ord (o2 / ordinal-entity\n                              :value 18))\n                  :time (d / date-entity\n                        :weekday (f / friday)))))"
    ],
    "tree": [
      "(t / take-01\n   :ARG1 (l / lead-01\n            :ARG0 (p / person :name (n / name :op1 \"Jason\" :op2 \"Dufner\"))))\n   :time (a / after\n            :op1 (c2 / card-01\n                     :ARG0 p)))",
      "(t / take-01\n   :ARG1 (l / lead-01\n            :ARG0 (p / person :name (n / name :op1 \"Jason\" :op2 \"Dufner\"))))\n   :time (a / after\n            :op1 (c2 / card-01\n                     :time (d / date-entity\n                              :weekday (f / friday)))))",
      "(t / take-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jason\"\n                     :op2 \"Dufner\"))\n   :ARG1 (l / lead-01\n            :ARG0 p)\n   :time (a / after\n            :op1 (c2 / card-01\n                     :ARG0 p)))",
      "(t / take-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jason\"\n                     :op2 \"Dufner\"))\n   :ARG1 (l / lead-01\n            :ARG0 p)\n   :time (a / after\n            :op1 (c2 / card-01\n                     :time (d / date-entity\n                              :weekday (f / friday)))))",
      "(p / person\n   :name (n / name\n            :op1 \"Jason\"\n            :op2 \"Dufner\")\n   :mod (c / country\n           :name (n2 / name\n                     :op1 \"America\")))"
    ],
    "smus": [
      "After carding Jason Dufner will take the lead.",
      "After carding on Friday, Jason Dufner will take the lead.",
      "Jason Dufner will take the lead after carding.",
      "Jason Dufner will take the lead after carding on Friday.",
      "American Jason Dufner"
    ]
  },
  {
    "instance_id": "pyrxsum-3",
    "summary": "A British man has been been questioned in Peru after posing naked at the Machu Picchu ruins , local police have said .",
    "summary_trees": [
      "# ::snt A British man has been been questioned in Peru after posing naked at the Machu Picchu ruins , local police have said .\n(s / say-01\n      :ARG0 (p / police\n            :ARG1-of (l / local-02))\n      :ARG1 (q / question-01\n            :ARG1 (m / man\n                  :mod (c / country\n                        :name (n / name\n                              :op1 \"Britain\")))\n            :location (c2 / country\n                  :name (n2 / name\n                        :op1 \"Peru\"))\n            :time (a / after\n                  :op1 (p2 / pose-01\n                        :ARG0 m\n                        :manner (n3 / naked)\n                        :location (r / ruin\n                              :name (n4 / name\n                                    :op1 \"Machu\"\n                                    :op2 \"Picchu\"))))))"
    ],
    "tree": [
      "(s / say-01\n   :ARG1 (q / question-01\n            :ARG1 (m / man\n                     :mod (c / country\n                             :name (n / name\n                                      :op1 \"Britain\")))))",
      "(s / say-01\n   :ARG0 (p / police\n            :ARG1 (l / local-02))\n   :ARG1 (q / question-01\n            :ARG1 (m / man\n                     :mod (c / country\n                             :name (n / name\n                                      :op1 \"Britain\")))))",
      "(q / question-01\n   :ARG1 (m / man\n            :mod (c / country\n                    :name (n / name\n                             :op1 \"Britain\"))))",
      "(q / question-01\n   :ARG1 (m / man\n            :mod (c / country\n                    :name (n / name\n                             :op1 \"Britain\")))\n   :location (c2 / country\n                 :name (n2 / name\n                           :op1 \"Peru\")))",
      "(q / question-01\n   :ARG1 (m / man\n            :mod (c / country\n                    :name (n / name\n                             :op1 \"Britain\")))\n   :location (c2 / country\n                 :name (n2 / name\n                           :op1 \"Peru\"))\n   :time (a / after\n            :op1 (p2 / pose-01\n                     :ARG0 m)))"
    ],
    "smus": [
      "The British man was said to be questioned.",
      "Local police said the British man was questioned.",
      "The British man was questioned.",
      "The British man was questioned in Peru.",
      "The British man was questioned in Peru after posing."
    ]
  },
  {
    "instance_id": "pyrxsum-4",
    "summary": "Great Britain skeleton racer David Swift has retired from the sport .",
    "summary_trees": [
      "# ::snt Great Britain skeleton racer David Swift has retired from the sport .\n(r / retire-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"David\"\n                  :op2 \"Swift\")\n            :ARG0-of (r2 / race-02\n                  :ARG3 (s / skeleton))\n            :mod (t / team\n                  :name (n2 / name\n                        :op1 \"Great\"\n                        :op2 \"Britain\")))\n      :ARG1 (s2 / sport))"
    ],
    "tree": [
      "(r / retire-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"David\"\n                     :op2 \"Swift\")))",
      "(r / retire-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"David\"\n                     :op2 \"Swift\"))\n   :ARG1 (s2 / sport))",
      "(r / retire-01\n   :ARG0 (p / person\n            :ARG0 (r2 / race-02\n                      :ARG3 (s / skeleton)))\n   :ARG1 (s2 / sport))",
      "(p / person\n   :name (n / name\n            :op1 \"David\"\n            :op2 \"Swift\"))",
      "(p / person\n   :name (n / name\n            :op1 \"David\"\n            :op2 \"Swift\")\n   :mod (t / team\n           :name (n2 / name\n                     :op1 \"Great\"\n                     :op2 \"Britain\")))"
    ],
    "smus": [
      "David Swift retired.",
      "David Swift has retired from the sport.",
      "Skeletal racers have retired from sport.",
      "David Swift",
      "David Swift of Great Britain"
    ]
  },
  {
    "instance_id": "pyrxsum-5",
    "summary": "Michael Dunlop set the fastest times for the Ulster Grand Prix Superbike and Superstock classes in Thursday 's delayed practice sessions at Dundrod .",
    "summary_trees": [
      "# ::snt Michael Dunlop set the fastest times for the Ulster Grand Prix Superbike and Superstock classes in Thursday 's delayed practice sessions at Dundrod .\n(s / set-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Michael\"\n                  :op2 \"Dunlop\"))\n      :ARG1 (t / time\n            :ARG1-of (h / have-degree-91\n                  :ARG2 (f / fast-02)\n                  :ARG3 (m / most)))\n      :beneficiary (a / and\n            :op1 (c / class\n                  :name (n2 / name\n                        :op1 \"Ulster\"\n                        :op2 \"Grand\"\n                        :op3 \"Prix\"\n                        :op4 \"Superbike\"))\n            :op2 (c2 / class\n                  :name (n3 / name\n                        :op1 \"Superstock\")))\n      :time (s2 / session\n            :time-of (p2 / practice-01)\n            :ARG1-of (d / delay-01)\n            :location (c3 / city\n                  :name (n4 / name\n                        :op1 \"Dundrod\"))\n            :time (d2 / date-entity\n                  :weekday (t2 / thursday))))"
    ],
    "tree": [
      "(s / set-02\n   :ARG1 (t / time\n            :ARG1 (h / have-degree-91\n                     :ARG2 (f / fast-02)))\n   :beneficiary (c / class\n                   :name (n2 / name\n                             :op1 \"Ulster\"\n                             :op2 \"Grand\"\n                             :op3 \"Prix\"\n                             :op4 \"Superbike\")))",
      "(s / set-02\n   :ARG1 (t / time\n            :ARG1 (h / have-degree-91\n                     :ARG2 (f / fast-02)))\n   :beneficiary (c2 / class\n                    :name (n3 / name\n                              :op1 \"Superstock\")))",
      "(s / set-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Michael\"\n                     :op2 \"Dunlop\"))\n   :ARG1 (t / time\n            :ARG1 (h / have-degree-91\n                     :ARG2 (f / fast-02)))\n   :beneficiary (c2 / class\n                    :name (n3 / name\n                              :op1 \"Superstock\")))",
      "(s / set-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Michael\"\n                     :op2 \"Dunlop\"))\n   :ARG1 (t / time\n            :ARG1 (h / have-degree-91\n                     :ARG3 (m / most)))\n   :beneficiary (c2 / class\n                    :name (n3 / name\n                              :op1 \"Superstock\")))",
      "(s / set-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Michael\"\n                     :op2 \"Dunlop\"))\n   :ARG1 (t / time\n            :ARG1 (h / have-degree-91\n                     :ARG2 (f / fast-02)))\n   :beneficiary (c2 / class\n                    :name (n3 / name\n                              :op1 \"Superstock\"))\n   :time (s2 / session\n             :time (d2 / date-entity\n                       :weekday (t2 / thursday))))"
    ],
    "smus": [
      "Fast times were set for the Ulster Grand Prix Superbike classes.",
      "Fast times were set for the Superstock classes.",
      "Michael Dunlop set fast times for the Superstock classes.",
      "Michael Dunlop set the fastest times for the Superstock classes.",
      "Michael Dunlop set fast times for Superstock classes during sessions Thursday."
    ]
  },
  {
    "instance_id": "pyrxsum-6",
    "summary": "Argentine club Newell 's Old Boys have re - signed Sunderland striker Ignacio Scocco on a five - year contract .",
    "summary_trees": [
      "# ::snt Argentine club Newell 's Old Boys have re - signed Sunderland striker Ignacio Scocco on a five - year contract .\n(s / sign-02\n      :ARG0 (c / club\n            :name (n / name\n                  :op1 \"Old\"\n                  :op2 \"Boys\")\n            :mod (c2 / country\n                  :name (n2 / name\n                        :op1 \"Argentina\"))\n            :poss (t / team\n                  :name (n3 / name\n                        :op1 \"Newell\")))\n      :ARG1 (p / person\n            :name (n4 / name\n                  :op1 \"Ignacio\"\n                  :op2 \"Scocco\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (t2 / team\n                        :name (n5 / name\n                              :op1 \"Sunderland\"))\n                  :ARG3 (s2 / striker)))\n      :mod (a / again)\n      :prep-on (c3 / contract\n            :duration (t3 / temporal-quantity\n                  :quant 5\n                  :unit (y / year))))"
    ],
    "tree": [
      "(s / sign-02\n   :ARG0 (c / club\n            :name (n / name\n                     :op1 \"Old\"\n                     :op2 \"Boys\"))\n   :ARG1 (p / person\n            :name (n4 / name\n                      :op1 \"Ignacio\"\n                      :op2 \"Scocco\")))",
      "(s / sign-02\n   :ARG0 (c / club\n            :name (n / name\n                     :op1 \"Old\"\n                     :op2 \"Boys\"))\n   :ARG1 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG3 (s2 / striker))))",
      "(s / sign-02\n   :ARG0 (c / club\n            :name (n / name\n                     :op1 \"Old\"\n                     :op2 \"Boys\"))\n   :ARG1 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG3 (s2 / striker)))\n   :prep-on (c3 / contract\n                :duration (t3 / temporal-quantity\n                              :quant 5)))",
      "(c / club\n   :name (n / name\n            :op1 \"Old\"\n            :op2 \"Boys\")\n   :mod (c2 / country\n            :name (n2 / name\n                      :op1 \"Argentina\"))\n   :poss (t / team\n            :name (n3 / name\n                      :op1 \"Newell\")))",
      "(p / person\n   :name (n4 / name\n             :op1 \"Ignacio\"\n             :op2 \"Scocco\")\n   :ARG0 (h / have-org-role-91\n            :ARG3 (s2 / striker)))"
    ],
    "smus": [
      "The Old Boys have signed Ignacio Scocco.",
      "Old Boys have signed a striker.",
      "Old Boys have signed a striker on a five-year contract.",
      "Newell's Old Boys are an Argentinian club.",
      "Ignacio Scocco is a striker."
    ]
  },
  {
    "instance_id": "pyrxsum-7",
    "summary": "West Ham say they are \" disappointed \" with a ruling that the terms of their rental of the Olympic Stadium from next season should be made public .",
    "summary_trees": [
      "# ::snt West Ham say they are \" disappointed \" with a ruling that the terms of their rental of the Olympic Stadium from next season should be made public .\n(s / say-01\n      :ARG0 (t / team\n            :name (n / name\n                  :op1 \"West\"\n                  :op2 \"Ham\"))\n      :ARG1 (d / disappoint-01\n            :ARG0 (r / rule-01\n                  :ARG1 (r2 / recommend-01\n                        :ARG1 (p / public-02\n                              :ARG1 (t2 / term\n                                    :mod (r3 / rent-01\n                                          :ARG0 t\n                                          :ARG1 (s2 / stadium\n                                                :name (n2 / name\n                                                      :op1 \"Olympic\"\n                                                      :op2 \"Stadium\"))\n                                          :time (s3 / season\n                                                :mod (n3 / next)))))))\n            :ARG1 t))"
    ],
    "tree": [
      "(s / say-01\n   :ARG1 (d / disappoint-01\n            :ARG1 (t / team :name (n / name :op1 \"West\" :op2 \"Ham\"))))",
      "(s / say-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"West\"\n                     :op2 \"Ham\"))\n   :ARG1 (d / disappoint-01\n            :ARG0 (r / rule-01\n                     :ARG1 (r2 / recommend-01\n                               :ARG1 (p / public-02\n                                        :ARG1 (t2 / term\n                                                  :mod (r3 / rent-01\n                                                           :ARG0 t)))))))",
      "(s / say-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"West\"\n                     :op2 \"Ham\"))\n   :ARG1 (d / disappoint-01\n            :ARG1 t))",
      "(s / say-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"West\"\n                     :op2 \"Ham\"))\n   :ARG1 (d / disappoint-01\n            :ARG0 (r / rule-01\n                     :ARG1 (r2 / recommend-01\n                               :ARG1 (p / public-02\n                                        :ARG1 (t2 / term\n                                                  :mod (r3 / rent-01\n                                                           :ARG1 (s2 / stadium\n                                                                     :name (n2 / name\n                                                                               :op1 \"Olympic\"\n                                                                               :op2 \"Stadium\")))))))))",
      "(s / say-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"West\"\n                     :op2 \"Ham\"))\n   :ARG1 (d / disappoint-01\n            :ARG0 (r / rule-01\n                     :ARG1 (r2 / recommend-01\n                               :ARG1 (p / public-02\n                                        :ARG1 (t2 / term\n                                                  :mod (r3 / rent-01\n                                                           :time (s3 / season\n                                                                     :mod (n3 / next)))))))))"
    ],
    "smus": [
      "West Ham are disappointed, say",
      "West Ham say the ruling that their rental terms should be public is disappointing.",
      "West Ham say they are disappointed.",
      "West Ham say the ruling that the terms of the Olympic stadium's rental should be public was disappointing.",
      "West Ham say the ruling that the terms of the next season's rent should be public was disappointing."
    ]
  },
  {
    "instance_id": "pyrxsum-8",
    "summary": "Ex - army chief Abdul Fattah al - Sisi has vowed to to tackle \" terrorism \" and bring security , after being sworn in as Egypt 's new president .",
    "summary_trees": [
      "# ::snt Ex - army chief Abdul Fattah al - Sisi has vowed to to tackle \" terrorism \" and bring security , after being sworn in as Egypt 's new president .\n(v / vow-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Abdul\"\n                  :op2 \"Fattah\"\n                  :op3 \"al-Sisi\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (a / army)\n                  :ARG2 (c / chief)\n                  :time (e / ex)))\n      :ARG1 (a2 / and\n            :op1 (t / tackle-01\n                  :ARG0 p\n                  :ARG1 (t2 / terrorism))\n            :op2 (b / bring-01\n                  :ARG0 p\n                  :ARG1 (s / security)))\n      :time (a3 / after\n            :op1 (s2 / swear-in-06\n                  :ARG1 p\n                  :ARG2 (p2 / person\n                        :ARG0-of (h2 / have-org-role-91\n                              :ARG1 (c2 / country\n                                    :name (n2 / name\n                                          :op1 \"Egypt\"))\n                              :ARG2 (p3 / president\n                                    :ARG1-of (n3 / new-01)))))))"
    ],
    "tree": [
      "(v / vow-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Abdul\"\n                     :op2 \"Fattah\"\n                     :op3 \"al-Sisi\"))\n   :ARG1 (t / tackle-01\n            :ARG1 (t2 / terrorism)))",
      "(v / vow-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Abdul\"\n                     :op2 \"Fattah\"\n                     :op3 \"al-Sisi\"))\n   :time (a3 / after\n             :op1 (s2 / swear-in-06\n                      :ARG1 p)))",
      "(v / vow-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Abdul\"\n                     :op2 \"Fattah\"\n                     :op3 \"al-Sisi\"))\n   :ARG1 (t / tackle-01\n            :ARG0 p)\n   :time (a3 / after\n             :op1 (s2 / swear-in-06\n                      :ARG1 p)))",
      "(v / vow-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Abdul\"\n                     :op2 \"Fattah\"\n                     :op3 \"al-Sisi\"))\n   :ARG1 (b / bring-01\n            :ARG1 (s / security))\n   :time (a3 / after\n             :op1 (s2 / swear-in-06\n                      :ARG1 p)))",
      "(h2 / have-org-role-91\n    :ARG1 (c2 / country\n              :name (n2 / name\n                        :op1 \"Egypt\"))\n    :ARG2 (p3 / president\n              :ARG1 (n3 / new-01)))"
    ],
    "smus": [
      "Abdul Fattah al-Sisi vowed to tackle terrorism.",
      "Abdul Fattah al-Sisi vowed after being sworn in.",
      "Abdul Fattah al-Sisi vowed to tackle after being sworn in.",
      "Abdul Fattah al-Sisi vowed to bring security after being sworn in.",
      "Egypt has a new president."
    ]
  },
  {
    "instance_id": "pyrxsum-9",
    "summary": "Twenty - times champion jump jockey Sir Anthony McCoy has described having a statue put up in Twenty - times champion jump jockey Sir Anthony McCoy honour at Cheltenham as ' flattering . '",
    "summary_trees": [
      "# ::snt Twenty - times champion jump jockey Sir Anthony McCoy has described having a statue put up in Twenty - times champion jump jockey Sir Anthony McCoy honour at Cheltenham as ' flattering . '\n(d / describe-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Sir\"\n                  :op2 \"Anthony\"\n                  :op3 \"McCoy\")\n            :ARG0-of (r / ride-01\n                  :ARG1 (j / jump-03))\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (c / champion\n                        :frequency 20)))\n      :ARG1 (h2 / have-04\n            :ARG1 (p2 / put-up-13\n                  :ARG1 (s / statue\n                        :topic (h3 / honor-01\n                              :ARG1 p\n                              :location (s2 / sports-facility\n                                    :name (n2 / name\n                                          :op1 \"Cheltenham\"))))))\n      :ARG2 (f / flatter-01))"
    ],
    "tree": [
      "(d / describe-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sir\"\n                     :op2 \"Anthony\"\n                     :op3 \"McCoy\"))\n   :ARG2 (f / flatter-01))",
      "(d / describe-01\n   :ARG1 (h2 / have-04\n             :ARG1 (p2 / put-up-13\n                       :ARG1 (s / statue\n                                :topic (h3 / honor-01\n                                           :ARG1 (p / person :name (n / name :op1 \"Sir\" :op2 \"Anthony\" :op3 \"McCoy\")))))))\n   :ARG2 (f / flatter-01))",
      "(d / describe-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sir\"\n                     :op2 \"Anthony\"\n                     :op3 \"McCoy\"))\n   :ARG1 (h2 / have-04\n             :ARG1 (p2 / put-up-13\n                       :ARG1 (s / statue\n                                :topic (h3 / honor-01\n                                           :ARG1 p))))\n   :ARG2 (f / flatter-01))",
      "(d / describe-01\n   :ARG0 (p / person\n            :ARG0 (r / ride-01\n                     :ARG1 (j / jump-03)))\n   :ARG1 (h2 / have-04\n             :ARG1 (p2 / put-up-13\n                       :ARG1 (s / statue\n                                :topic (h3 / honor-01\n                                           :ARG1 p))))\n   :ARG2 (f / flatter-01))",
      "(s / statue\n   :topic (h3 / honor-01\n              :ARG1 (p / person :name (n / name :op1 \"Sir\" :op2 \"Anthony\" :op3 \"McCoy\")))))"
    ],
    "smus": [
      "Sir Anthony McCoy has described it as flattering.",
      "Having a statue put up in honor of Sir Anthony McCoy was described as flattering.",
      "Sir Anthony McCoy has described having an honor statue put up as flattering.",
      "A jumper has described having an honor statue put up as flattering.",
      "a statue in honor of Sir Anthony McCoy"
    ]
  },
  {
    "instance_id": "pyrxsum-10",
    "summary": "A cafe owner has defended a sign urging people to eat cake to avoid being kidnapped in the town where April Jones was abducted and murdered in 2012 .",
    "summary_trees": [
      "# ::snt A cafe owner has defended a sign urging people to eat cake to avoid being kidnapped in the town where April Jones was abducted and murdered in 2012 .\n(d / defend-01\n      :ARG0 (p / person\n            :ARG0-of (o / own-01\n                  :ARG1 (c / cafe)))\n      :ARG1 (s / sign\n            :ARG0-of (u / urge-01\n                  :ARG1 (p2 / person)\n                  :ARG2 (e / eat-01\n                        :ARG0 p2\n                        :ARG1 (c2 / cake)\n                        :purpose (a / avoid-01\n                              :ARG0 p2\n                              :ARG1 (k / kidnap-01\n                                    :ARG1 p2\n                                    :location (t / town\n                                          :location-of (a2 / and\n                                                :op1 (a3 / abduct-01\n                                                      :ARG1 (p3 / person\n                                                            :name (n / name\n                                                                  :op1 \"April\"\n                                                                  :op2 \"Jones\")))\n                                                :op2 (m / murder-01\n                                                      :ARG1 p3)\n                                                :time (d2 / date-entity\n                                                      :year 2012)))))))))"
    ],
    "tree": [
      "(d / defend-01\n   :ARG0 (p / person\n            :ARG0 (o / own-01\n                     :ARG1 (c / cafe)))\n   :ARG1 (s / sign\n            :ARG0 (u / urge-01\n                     :ARG1 (p2 / person))))",
      "(a2 / and\n    :op1 (a3 / abduct-01\n             :ARG1 (p3 / person\n                       :name (n / name\n                                :op1 \"April\"\n                                :op2 \"Jones\")))\n    :op2 (m / murder-01\n            :ARG1 p3))",
      "(a2 / and\n    :op1 (a3 / abduct-01\n             :ARG1 (p3 / person\n                       :name (n / name\n                                :op1 \"April\"\n                                :op2 \"Jones\")))\n    :time (d2 / date-entity\n              :year 2012))",
      "(a2 / and\n    :op1 (a3 / abduct-01\n             :ARG1 (p3 / person\n                       :name (n / name\n                                :op1 \"April\"\n                                :op2 \"Jones\")))\n    :op2 (m / murder-01\n            :ARG1 p3)\n    :time (d2 / date-entity\n              :year 2012))",
      "(a3 / abduct-01\n    :ARG1 (p3 / person\n              :name (n / name\n                       :op1 \"April\"\n                       :op2 \"Jones\")))"
    ],
    "smus": [
      "The cafe owner has defended the urging sign.",
      "April Jones was abducted and murdered.",
      "And April Jones was abducted in 2012.",
      "April Jones was abducted and murdered in 2012.",
      "April Jones was abducted."
    ]
  },
  {
    "instance_id": "pyrxsum-11",
    "summary": "Three people have been killed and at least 62 others wounded in two explosions on passenger buses in the Kenyan capital Nairobi , officials say .",
    "summary_trees": [
      "# ::snt Three people have been killed and at least 62 others wounded in two explosions on passenger buses in the Kenyan capital Nairobi , officials say .\n(s / say-01\n      :ARG0 (o / official)\n      :ARG1 (a / and\n            :op1 (k / kill-01\n                  :ARG0 (e / explode-01\n                        :quant 2\n                        :ARG1 (b / bus\n                              :mod (p / passenger))\n                        :location (c / city\n                              :name (n / name\n                                    :op1 \"Nairobi\")\n                              :ARG0-of (h / have-org-role-91\n                                    :ARG1 (c2 / country\n                                          :name (n2 / name\n                                                :op1 \"Kenya\"))\n                                    :ARG2 (c3 / capital))))\n                  :ARG1 (p2 / person\n                        :quant 3))\n            :op2 (w / wound-01\n                  :ARG0 e\n                  :ARG1 (p3 / person\n                        :quant (a2 / at-least\n                              :op1 62)\n                        :mod (o2 / other)))))"
    ],
    "tree": [
      "(s / say-01\n   :ARG1 (k / kill-01\n            :ARG1 (p2 / person\n                      :quant 3)))",
      "(k / kill-01\n   :ARG1 (p2 / person\n             :quant 3))",
      "(e / explode-01\n   :ARG1 (b / bus\n            :mod (p / passenger)))",
      "(e / explode-01\n   :location (c / city\n                :name (n / name\n                         :op1 \"Nairobi\")))",
      "(e / explode-01\n   :ARG1 (b / bus\n            :mod (p / passenger))\n   :location (c / city\n                :name (n / name\n                         :op1 \"Nairobi\")))"
    ],
    "smus": [
      "Three people are said to have been killed.",
      "Three people were killed.",
      "Passenger buses explode.",
      "Explosions in Nairobi",
      "Passenger buses explode in Nairobi"
    ]
  },
  {
    "instance_id": "pyrxsum-12",
    "summary": "Thirty homes had to be evacuated after a gas pipe was damaged in a fire that was started deliberately .",
    "summary_trees": [
      "# ::snt Thirty homes had to be evacuated after a gas pipe was damaged in a fire that was started deliberately .\n(o / obligate-01\n      :ARG2 (e / evacuate-01\n            :ARG1 (h / home\n                  :quant 30))\n      :time (a / after\n            :op1 (d / damage-01\n                  :ARG0 (f / fire\n                        :ARG1-of (s / start-01\n                              :manner (d2 / deliberate)))\n                  :ARG1 (p / pipe\n                        :mod (g / gas)))))"
    ],
    "tree": [
      "(o / obligate-01\n   :ARG2 (e / evacuate-01\n            :ARG1 (h / home\n                     :quant 30)))",
      "(o / obligate-01\n   :ARG2 (e / evacuate-01\n            :ARG1 (h / home\n                     :quant 30))\n   :time (a / after\n            :op1 (d / damage-01\n                    :ARG1 (p / pipe\n                             :mod (g / gas)))))",
      "(e / evacuate-01\n   :ARG1 (h / home\n            :quant 30))",
      "(d / damage-01\n   :ARG0 (f / fire\n            :ARG1 (s / start-01\n                     :manner (d2 / deliberate)))\n   :ARG1 (p / pipe\n            :mod (g / gas)))",
      "(f / fire\n   :ARG1 (s / start-01\n            :manner (d2 / deliberate)))"
    ],
    "smus": [
      "30 homes had to be evacuated.",
      "30 homes had to be evacuated after gas pipe was damaged.",
      "30 homes were evacuated.",
      "A fire deliberately started damaged the gas pipe.",
      "The fire was deliberately started."
    ]
  },
  {
    "instance_id": "pyrxsum-13",
    "summary": "Friends of Keith Harris have joined Keith Harris family at Keith Harris funeral in Blackpool .",
    "summary_trees": [
      "# ::snt Friends of Keith Harris have joined Keith Harris family at Keith Harris funeral in Blackpool .\n(j / join-04\n      :ARG0 (p / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (p2 / person\n                        :name (n / name\n                              :op1 \"Keith\"\n                              :op2 \"Harris\"))\n                  :ARG2 (f / friend)))\n      :ARG1 (f2 / family\n            :poss p2)\n      :location (f3 / funeral\n            :location (c / city\n                  :name (n2 / name\n                        :op1 \"Blackpool\"))))"
    ],
    "tree": [
      "(j / join-04\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (f / friend))))",
      "(j / join-04\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (f / friend)))\n   :ARG1 (f2 / family\n             :poss (p2 / person\n                       :name (n / name\n                                :op1 \"Keith\"\n                                :op2 \"Harris\"))))",
      "(j / join-04\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (f / friend)))\n   :location (f3 / funeral\n                 :location (c / city\n                              :name (n2 / name\n                                        :op1 \"Blackpool\"))))",
      "(j / join-04\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (f / friend)))\n   :ARG1 (f2 / family\n             :poss (p2 / person\n                       :name (n / name\n                                :op1 \"Keith\"\n                                :op2 \"Harris\")))\n   :location (f3 / funeral\n                 :location (c / city\n                              :name (n2 / name\n                                        :op1 \"Blackpool\"))))",
      "(f3 / funeral\n    :location (c / city\n                 :name (n2 / name\n                           :op1 \"Blackpool\")))"
    ],
    "smus": [
      "Friends have joined.",
      "Friends have joined Keith Harris family.",
      "Friends have joined the funeral in Blackpool.",
      "Friends have joined Keith Harris family at a funeral in Blackpool.",
      "A funeral took place in Blackpool."
    ]
  },
  {
    "instance_id": "pyrxsum-14",
    "summary": "Former Labour MP Bob Marshall - Andrews has defected to the Lib Dems after describing Jeremy Corbyn 's party as a \" political basket case \" .",
    "summary_trees": [
      "# ::snt Former Labour MP Bob Marshall - Andrews has defected to the Lib Dems after describing Jeremy Corbyn 's party as a \" political basket case \" .\n(d / defect-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Bob\"\n                  :op2 \"Marshall-Andrews\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (g / government-organization\n                        :name (n2 / name\n                              :op1 \"Parliament\"))\n                  :ARG2 (m / member)\n                  :time (f / former))\n            :ARG0-of (h2 / have-org-role-91\n                  :ARG1 (p2 / political-party\n                        :name (n3 / name\n                              :op1 \"Labour\"))))\n      :ARG1 (p3 / political-party\n            :name (n4 / name\n                  :op1 \"Liberal\"\n                  :op2 \"Democrat\"))\n      :time (a / after\n            :op1 (d2 / describe-01\n                  :ARG0 p\n                  :ARG1 (p4 / party\n                        :poss (p5 / person\n                              :name (n5 / name\n                                    :op1 \"Jeremy\"\n                                    :op2 \"Corbyn\")))\n                  :ARG2 (c / case\n                        :mod (b / basket)\n                        :mod (p6 / politics)))))"
    ],
    "tree": [
      "(d / defect-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Bob\"\n                     :op2 \"Marshall-Andrews\")))",
      "(d / defect-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Bob\"\n                     :op2 \"Marshall-Andrews\"))\n   :time (a / after\n            :op1 (d2 / describe-01\n                     :ARG0 p)))",
      "(d / defect-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Bob\"\n                     :op2 \"Marshall-Andrews\"))\n   :time (a / after\n            :op1 (d2 / describe-01\n                     :ARG1 (p4 / party\n                               :poss (p5 / person\n                                         :name (n5 / name\n                                                   :op1 \"Jeremy\"\n                                                   :op2 \"Corbyn\"))))))",
      "(d / defect-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Bob\"\n                     :op2 \"Marshall-Andrews\"))\n   :ARG1 (p3 / political-party\n             :name (n4 / name\n                       :op1 \"Liberal\"\n                       :op2 \"Democrat\"))\n   :time (a / after\n            :op1 (d2 / describe-01\n                     :ARG0 p)))",
      "(d / defect-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Bob\"\n                     :op2 \"Marshall-Andrews\"))\n   :ARG1 (p3 / political-party\n             :name (n4 / name\n                       :op1 \"Liberal\"\n                       :op2 \"Democrat\"))\n   :time (a / after\n            :op1 (d2 / describe-01\n                     :ARG1 (p4 / party\n                               :poss (p5 / person\n                                         :name (n5 / name\n                                                   :op1 \"Jeremy\"\n                                                   :op2 \"Corbyn\"))))))"
    ],
    "smus": [
      "Bob Marshall-Andrews defected.",
      "After describing, Bob Marshall-Andrews defected.",
      "After describing Jeremy Corbyn's party, Bob Marshall-Andrews defected.",
      "After describing, Bob Marshall-Andrews has defected to the Lib Dem party.",
      "After describing Jeremy Corbyn's party, Bob Marshall-Andrews has defected to the Lib Dem party."
    ]
  },
  {
    "instance_id": "pyrxsum-15",
    "summary": "Castleford Tigers beat local rivals Wakefield Trinity to clinch the League Leaders ' Shield .",
    "summary_trees": [
      "# ::snt Castleford Tigers beat local rivals Wakefield Trinity to clinch the League Leaders ' Shield .\n(b / beat-03\n      :ARG0 (t / team\n            :name (n / name\n                  :op1 \"Castleford\"\n                  :op2 \"Tigers\"))\n      :ARG1 (t2 / team\n            :name (n2 / name\n                  :op1 \"Wakefield\"\n                  :op2 \"Trinity\")\n            :ARG0-of (r / rival-01\n                  :ARG1 t)\n            :ARG1-of (l / local-02))\n      :purpose (c / clinch-01\n            :ARG0 t\n            :ARG1 (s / shield\n                  :name (n3 / name\n                        :op1 \"League\"\n                        :op2 \"Leaders\"\n                        :op3 \"Shield\"))))"
    ],
    "tree": [
      "(b / beat-03\n   :ARG1 (t2 / team\n             :name (n2 / name\n                       :op1 \"Wakefield\"\n                       :op2 \"Trinity\")))",
      "(b / beat-03\n   :purpose (c / clinch-01\n               :ARG1 (s / shield\n                        :name (n3 / name\n                                  :op1 \"League\"\n                                  :op2 \"Leaders\"\n                                  :op3 \"Shield\"))))",
      "(b / beat-03\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Castleford\"\n                     :op2 \"Tigers\"))\n   :ARG1 (t2 / team\n             :name (n2 / name\n                       :op1 \"Wakefield\"\n                       :op2 \"Trinity\"))\n   :purpose (c / clinch-01\n               :ARG0 t))",
      "(b / beat-03\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Castleford\"\n                     :op2 \"Tigers\"))\n   :ARG1 (t2 / team\n             :name (n2 / name\n                       :op1 \"Wakefield\"\n                       :op2 \"Trinity\"))\n   :purpose (c / clinch-01\n               :ARG1 (s / shield\n                        :name (n3 / name\n                                  :op1 \"League\"\n                                  :op2 \"Leaders\"\n                                  :op3 \"Shield\"))))",
      "(b / beat-03\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Castleford\"\n                     :op2 \"Tigers\"))\n   :ARG1 (t2 / team\n             :ARG0 (r / rival-01\n                      :ARG1 t))\n   :purpose (c / clinch-01\n               :ARG0 t))"
    ],
    "smus": [
      "beat Wakefield Trinity",
      "Beat to clinch the League Leaders shield.",
      "The Castleford Tigers beat Wakefield Trinity to clinch.",
      "The Castleford Tigers beat Wakefield Trinity to clinch the League Leaders shield.",
      "The Castleford Tigers beat their rivals to clinch."
    ]
  },
  {
    "instance_id": "pyrxsum-16",
    "summary": "At least 23 people have been killed in the north - eastern Nigerian town of Monguno after a Boko Haram bomb confiscated by vigilantes exploded , an MP and army source have told the BBC .",
    "summary_trees": [
      "# ::snt At least 23 people have been killed in the north - eastern Nigerian town of Monguno after a Boko Haram bomb confiscated by vigilantes exploded , an MP and army source have told the BBC .\n(t / tell-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :ARG0-of (h / have-org-role-91\n                        :ARG1 (p2 / parliament)\n                        :ARG2 (m / member)))\n            :op2 (s / source\n                  :mod (a2 / army)))\n      :ARG1 (k / kill-01\n            :ARG1 (p3 / person\n                  :quant (a3 / at-least\n                        :op1 23))\n            :location (t2 / town\n                  :name (n / name\n                        :op1 \"Monguno\")\n                  :location (n2 / northeast\n                        :part-of (c / country\n                              :name (n3 / name\n                                    :op1 \"Nigeria\"))))\n            :time (a4 / after\n                  :op1 (e / explode-01\n                        :ARG1 (b / bomb\n                              :poss (c2 / criminal-organization\n                                    :name (n4 / name\n                                          :op1 \"Boko\"\n                                          :op2 \"Harab\"))\n                              :ARG1-of (c3 / confiscate-01\n                                    :ARG0 (v / vigilante))))))\n      :ARG2 (p4 / publication\n            :name (n5 / name\n                  :op1 \"BBC\")))"
    ],
    "tree": [
      "(k / kill-01\n   :ARG1 (p3 / person\n             :quant (a3 / at-least\n                        :op1 23)))",
      "(k / kill-01\n   :ARG1 (p3 / person\n             :quant (a3 / at-least\n                        :op1 23))\n   :location (t2 / town\n                 :name (n / name\n                          :op1 \"Monguno\")))",
      "(k / kill-01\n   :ARG1 (p3 / person\n             :quant (a3 / at-least\n                        :op1 23))\n   :time (a4 / after\n             :op1 (e / explode-01\n                     :ARG1 (b / bomb\n                              :ARG1 (c3 / confiscate-01\n                                        :ARG0 (v / vigilante))))))",
      "(p3 / person\n    :quant (a3 / at-least\n               :op1 23))",
      "(a4 / after\n    :op1 (e / explode-01\n            :ARG1 (b / bomb\n                     :ARG1 (c3 / confiscate-01\n                               :ARG0 (v / vigilante)))))"
    ],
    "smus": [
      "At least 23 people were killed.",
      "At least 23 people were killed in the town of Monguno.",
      "At least 23 people were killed after a bomb confiscated by vigilantes exploded.",
      "At least 23 people.",
      "After a bomb that was confiscated by the vigilantes exploded."
    ]
  },
  {
    "instance_id": "pyrxsum-17",
    "summary": "The sports centre at Ravenscraig is a homage , a \" symphony in steel \" , say the architects .",
    "summary_trees": [
      "# ::snt The sports centre at Ravenscraig is a homage , a \" symphony in steel \" , say the architects .\n(s / say-01\n      :ARG0 (p / person\n            :ARG0-of (a / architect-01))\n      :ARG1 (a2 / and\n            :op1 (h / homage)\n            :op2 (s2 / symphony\n                  :location (s3 / steel))\n            :domain (c / center\n                  :mod (s4 / sport)\n                  :location (c2 / city\n                        :name (n / name\n                              :op1 \"Ravenscraig\")))))"
    ],
    "tree": [
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (a / architect-01)))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (a / architect-01))\n   :ARG1 (h / homage))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (a / architect-01))\n   :ARG1 (c / center\n            :mod (s4 / sport)))",
      "(a2 / and\n    :op1 (h / homage)\n    :domain (c / center\n               :mod (s4 / sport)))",
      "(a2 / and\n    :op1 (h / homage)\n    :op2 (s2 / symphony\n             :location (s3 / steel))\n    :domain (c / center\n               :mod (s4 / sport)))"
    ],
    "smus": [
      "Say architects.",
      "The architects would say homage.",
      "The architects would say a sports centre.",
      "The sports center is an homage.",
      "The sports center is an homage, a symphony in steel."
    ]
  },
  {
    "instance_id": "pyrxsum-18",
    "summary": "The winner of The Jump 2017 is Spencer Matthews .",
    "summary_trees": [
      "# ::snt The winner of The Jump 2017 is Spencer Matthews .\n(w / win-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Spencer\"\n                  :op2 \"Matthews\"))\n      :ARG1 (e / event\n            :name (n2 / name\n                  :op1 \"The\"\n                  :op2 \"Jump\")\n            :time (d / date-entity\n                  :year 2017)))"
    ],
    "tree": [
      "(w / win-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Spencer\"\n                     :op2 \"Matthews\")))",
      "(w / win-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Spencer\"\n                     :op2 \"Matthews\"))\n   :ARG1 (e / event\n            :name (n2 / name\n                      :op1 \"The\"\n                      :op2 \"Jump\")))",
      "(w / win-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Spencer\"\n                     :op2 \"Matthews\"))\n   :ARG1 (e / event\n            :time (d / date-entity\n                     :year 2017)))",
      "(p / person\n   :name (n / name\n            :op1 \"Spencer\"\n            :op2 \"Matthews\"))",
      "(e / event\n   :name (n2 / name\n             :op1 \"The\"\n             :op2 \"Jump\")\n   :time (d / date-entity\n            :year 2017))"
    ],
    "smus": [
      "Spencer Matthews won.",
      "Spencer Matthews won The Jump.",
      "Spencer Matthews won the 2017 event.",
      "Spencer Matthews",
      "The Jump 2017"
    ]
  },
  {
    "instance_id": "pyrxsum-19",
    "summary": "Fifa presidential candidate Gianni Infantino says Fifa presidential candidate Gianni Infantino would press for the World Cup to be held in a whole region rather than one or two countries .",
    "summary_trees": [
      "# ::snt Fifa presidential candidate Gianni Infantino says Fifa presidential candidate Gianni Infantino would press for the World Cup to be held in a whole region rather than one or two countries .\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Gianni\"\n                  :op2 \"Infantino\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (o / organization\n                        :name (n2 / name\n                              :op1 \"Fifa\"))\n                  :ARG2 (c / candidate\n                        :mod (p2 / president))))\n      :ARG1 (p3 / press-01\n            :ARG0 p\n            :ARG2 (h2 / hold-04\n                  :ARG1 (g / game\n                        :name (n3 / name\n                              :op1 \"World\"\n                              :op2 \"Cup\"))\n                  :location (r / region\n                        :mod (w / whole)\n                        :ARG1-of (ii / instead-of-91\n                              :ARG2 (h3 / hold-04\n                                    :ARG1 g\n                                    :location (c2 / country\n                                          :quant (o2 / or\n                                                :op1 1\n                                                :op2 2))))))))"
    ],
    "tree": [
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Gianni\"\n                     :op2 \"Infantino\"))\n   :ARG1 (p3 / press-01\n             :ARG2 (h2 / hold-04\n                       :location (r / region\n                                    :mod (w / whole)))))",
      "(p / person\n   :ARG0 (h / have-org-role-91\n            :ARG2 (c / candidate\n                     :mod (p2 / president))))",
      "(p3 / press-01\n    :ARG2 (h2 / hold-04\n              :location (r / region\n                           :mod (w / whole))))",
      "(p3 / press-01\n    :ARG2 (h2 / hold-04\n              :location (r / region\n                           :ARG1 (ii / instead-of-91\n                                     :ARG2 (h3 / hold-04\n                                               :location (c2 / country\n                                                             :quant (o2 / or\n                                                                        :op1 1)))))))",
      "(p3 / press-01\n    :ARG2 (h2 / hold-04\n              :location (r / region\n                           :ARG1 (ii / instead-of-91\n                                     :ARG2 (h3 / hold-04\n                                               :location (c2 / country\n                                                             :quant (o2 / or\n                                                                        :op2 2)))))))"
    ],
    "smus": [
      "Gianni Infantino says press for the holding in the whole region.",
      "President candidate",
      "Press for holding in the whole region.",
      "Press for holding in the region rather than in one country.",
      "Press for holding in the region rather than in two countries."
    ]
  },
  {
    "instance_id": "pyrxsum-20",
    "summary": "Finance Secretary John Swinney has warned of \" tough choices \" facing Scotland as he prepares to set out his budget .",
    "summary_trees": [
      "# ::snt Finance Secretary John Swinney has warned of \" tough choices \" facing Scotland as he prepares to set out his budget .\n(w / warn-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"John\"\n                  :op2 \"Swinney\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (s / secretary\n                        :topic (f / finance))))\n      :ARG1 (c / choose-01\n            :ARG0 (c2 / country\n                  :name (n2 / name\n                        :op1 \"Scotland\"))\n            :ARG1-of (t / tough-02)\n            :ARG1-of (f2 / face-01\n                  :ARG0 c2))\n      :time (p2 / prepare-02\n            :ARG0 p\n            :ARG1 (s2 / set-out-06\n                  :ARG0 p\n                  :ARG1 (b / budget\n                        :poss p))))"
    ],
    "tree": [
      "(w / warn-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\"\n                     :op2 \"Swinney\"))\n   :time (p2 / prepare-02\n             :ARG0 p))",
      "(w / warn-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\"\n                     :op2 \"Swinney\"))\n   :time (p2 / prepare-02\n             :ARG1 (s2 / set-out-06\n                       :ARG0 p)))",
      "(w / warn-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\"\n                     :op2 \"Swinney\"))\n   :time (p2 / prepare-02\n             :ARG1 (s2 / set-out-06\n                       :ARG1 (b / budget\n                                :poss p))))",
      "(w / warn-01\n   :ARG1 (c / choose-01\n            :ARG0 (c2 / country\n                      :name (n2 / name\n                                :op1 \"Scotland\")))\n   :time (p2 / prepare-02\n             :ARG0 (p / person :name (n / name :op1 \"John\" :op2 \"Swinney\")))))",
      "(w / warn-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\"\n                     :op2 \"Swinney\"))\n   :ARG1 (c / choose-01\n            :ARG1 (t / tough-02))\n   :time (p2 / prepare-02\n             :ARG1 (s2 / set-out-06\n                       :ARG1 (b / budget\n                                :poss p))))"
    ],
    "smus": [
      "John Swinney has warned as he prepares.",
      "John Swinney has warned as he prepares to set out.",
      "John Swinney has warned as his budget prepares to be set out.",
      "Scotland is being warned about its choices as John Swinney prepares.",
      "John Swinney has warned of tough choices as his budget prepares to be set out."
    ]
  },
  {
    "instance_id": "pyrxsum-21",
    "summary": "The judge leading the inquiry into the Grenfell Tower fire has written to the prime minister with recommendations for the inquiry into the Grenfell Tower fire terms of reference .",
    "summary_trees": [
      "# ::snt The judge leading the inquiry into the Grenfell Tower fire has written to the prime minister with recommendations for the inquiry into the Grenfell Tower fire terms of reference .\n(w / write-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG3 (j / judge-01))\n            :ARG0-of (l / lead-02\n                  :ARG2 (ii / inquire-01\n                        :ARG2 (f / fire\n                              :location (b / building\n                                    :name (n / name\n                                          :op1 \"Grenfell\"\n                                          :op2 \"Tower\"))))))\n      :ARG1 (r / recommend-01\n            :ARG0 p\n            :ARG4 (t / term\n                  :mod (r2 / refer-03\n                        :ARG1 ii)))\n      :ARG2 (p2 / person\n            :ARG0-of (h2 / have-org-role-91\n                  :ARG2 (m / minister\n                        :mod (p3 / prime)))))"
    ],
    "tree": [
      "(w / write-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG3 (j / judge-01)))\n   :ARG2 (p2 / person\n             :ARG0 (h2 / have-org-role-91\n                       :ARG2 (m / minister\n                                :mod (p3 / prime)))))",
      "(w / write-01\n   :ARG0 (p / person\n            :ARG0 (l / lead-02\n                     :ARG2 (ii / inquire-01\n                               :ARG2 (f / fire\n                                        :location (b / building\n                                                     :name (n / name\n                                                              :op1 \"Grenfell\"\n                                                              :op2 \"Tower\"))))))\n   :ARG2 (p2 / person\n             :ARG0 (h2 / have-org-role-91\n                       :ARG2 (m / minister\n                                :mod (p3 / prime)))))",
      "(w / write-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG3 (j / judge-01)))\n   :ARG1 (r / recommend-01\n            :ARG0 p))",
      "(w / write-01\n   :ARG0 (p / person\n            :ARG0 (l / lead-02\n                     :ARG2 (ii / inquire-01\n                               :ARG2 (f / fire\n                                        :location (b / building\n                                                     :name (n / name\n                                                              :op1 \"Grenfell\"\n                                                              :op2 \"Tower\"))))))\n   :ARG1 (r / recommend-01\n            :ARG0 p))",
      "(f / fire\n   :location (b / building\n                :name (n / name\n                         :op1 \"Grenfell\"\n                         :op2 \"Tower\")))"
    ],
    "smus": [
      "The judge has written to the prime minister.",
      "A leader in an inquiry into the fire at Glenfell Tower has written to the prime minister.",
      "The judge has written his recommendations.",
      "A person leading the inquiry into the fire at Glenfell Tower has written his recommendations.",
      "A fire broke out at Glenfell Tower."
    ]
  },
  {
    "instance_id": "pyrxsum-22",
    "summary": "Police in a small Alaska town mistakenly told a couple a couple son had been killed in a car crash , leading to an extraordinary reunion hours later .",
    "summary_trees": [
      "# ::snt Police in a small Alaska town mistakenly told a couple a couple son had been killed in a car crash , leading to an extraordinary reunion hours later .\n(l / lead-03\n      :ARG0 (t / tell-01\n            :ARG0 (p / police\n                  :location (t2 / town\n                        :mod (s / small)\n                        :location (s2 / state\n                              :name (n / name\n                                    :op1 \"Alaska\"))))\n            :ARG1 (k / kill-01\n                  :ARG1 (p2 / person\n                        :ARG0-of (h / have-rel-role-91\n                              :ARG1 (c / couple)\n                              :ARG2 (s3 / son)))\n                  :ARG1-of (c2 / cause-01\n                        :ARG0 (c3 / crash-01\n                              :ARG1 (c4 / car))))\n            :ARG2 (c5 / couple)\n            :ARG1-of (m / mistake-01))\n      :ARG2 (r / reunite-01\n            :mod (e / extraordinary)\n            :time (a / after\n                  :quant (m2 / multiple\n                        :op1 (t3 / temporal-quantity\n                              :quant 1\n                              :unit (h2 / hour))))))"
    ],
    "tree": [
      "(l / lead-03\n   :ARG2 (r / reunite-01\n            :time (a / after\n                     :quant (m2 / multiple\n                                :op1 (t3 / temporal-quantity\n                                         :unit (h2 / hour))))))",
      "(l / lead-03\n   :ARG0 (t / tell-01\n            :ARG1 (m / mistake-01))\n   :ARG2 (r / reunite-01\n            :time (a / after\n                     :quant (m2 / multiple\n                                :op1 (t3 / temporal-quantity\n                                         :unit (h2 / hour))))))",
      "(p / police\n   :location (t2 / town\n                 :mod (s / small)))",
      "(p / police\n   :location (t2 / town\n                 :location (s2 / state\n                               :name (n / name\n                                        :op1 \"Alaska\"))))",
      "(r / reunite-01\n   :mod (e / extraordinary)\n   :time (a / after\n            :quant (m2 / multiple\n                       :op1 (t3 / temporal-quantity\n                                :unit (h2 / hour)))))"
    ],
    "smus": [
      "leading to a reunification hours later.",
      "The mistaken information leading to a reunification hours later.",
      "Police in a small town.",
      "Police in a town in Alaska.",
      "The extraordinary reunification took place hours later."
    ]
  },
  {
    "instance_id": "pyrxsum-23",
    "summary": "South Africa 's prosecutors have sought permission to appeal against athlete Oscar Pistorius ' \" shockingly light \" sentence , court papers show .",
    "summary_trees": [
      "# ::snt South Africa 's prosecutors have sought permission to appeal against athlete Oscar Pistorius ' \" shockingly light \" sentence , court papers show .\n(s / show-01\n      :ARG0 (p / paper\n            :mod (c / court))\n      :ARG1 (s2 / seek-01\n            :ARG0 (p2 / person\n                  :ARG0-of (p3 / prosecute-01)\n                  :mod (c2 / country\n                        :name (n / name\n                              :op1 \"South\"\n                              :op2 \"Africa\")))\n            :ARG1 (p4 / permit-01\n                  :ARG1 (a / appeal-01\n                        :ARG0 p2\n                        :ARG1 (s3 / sentence-01\n                              :ARG1 (p5 / person\n                                    :name (n2 / name\n                                          :op1 \"Oscar\"\n                                          :op2 \"Pistorius\")\n                                    :mod (a2 / athlete))\n                              :ARG1-of (l / light-06\n                                    :ARG0-of (s4 / shock-01)))))))"
    ],
    "tree": [
      "(s / show-01\n   :ARG0 (p / paper\n            :mod (c / court))\n   :ARG1 (s2 / seek-01\n             :ARG1 (p4 / permit-01\n                       :ARG1 (a / appeal-01\n                                :ARG0 (p2 / person)))))",
      "(s / show-01\n   :ARG0 (p / paper\n            :mod (c / court))\n   :ARG1 (s2 / seek-01\n             :ARG1 (p4 / permit-01\n                       :ARG1 (a / appeal-01\n                                :ARG1 (s3 / sentence-01\n                                          :ARG1 (p5 / person\n                                                    :name (n2 / name\n                                                              :op1 \"Oscar\"\n                                                              :op2 \"Pistorius\")))))))",
      "(s2 / seek-01\n    :ARG0 (p2 / person\n              :ARG0 (p3 / prosecute-01))\n    :ARG1 (p4 / permit-01\n              :ARG1 (a / appeal-01\n                       :ARG0 p2)))",
      "(s2 / seek-01\n    :ARG0 (p2 / person\n              :ARG0 (p3 / prosecute-01))\n    :ARG1 (p4 / permit-01\n              :ARG1 (a / appeal-01\n                       :ARG1 (s3 / sentence-01\n                                 :ARG1 (p5 / person\n                                           :name (n2 / name\n                                                     :op1 \"Oscar\"\n                                                     :op2 \"Pistorius\"))))))",
      "(p5 / person\n    :name (n2 / name\n              :op1 \"Oscar\"\n              :op2 \"Pistorius\")\n    :mod (a2 / athlete))"
    ],
    "smus": [
      "Court papers show that permission to appeal was sought.",
      "Court papers show that permission was sought to appeal Oscar Pistorius' sentence.",
      "Prosecutors have sought permission to appeal.",
      "Prosecutors have sought permission to appeal Oscar Pistorius' sentence.",
      "Oscar Pistorius is an athlete."
    ]
  },
  {
    "instance_id": "pyrxsum-24",
    "summary": "The UK 's first maternity clinic for women who have been victims of rape and sexual assault has opened .",
    "summary_trees": [
      "# ::snt The UK 's first maternity clinic for women who have been victims of rape and sexual assault has opened .\n(o / open-01\n      :ARG1 (c / clinic\n            :mod (m / maternity)\n            :ord (o2 / ordinal-entity\n                  :value 1)\n            :location (c2 / country\n                  :name (n / name\n                        :op1 \"UK\"))\n            :beneficiary (w / woman\n                  :ARG1-of (v / victimize-01\n                        :ARG0 (a / and\n                              :op1 (r / rape-01\n                                    :ARG1 w)\n                              :op2 (a2 / assault-01\n                                    :ARG1 w\n                                    :manner (s / sex-01\n                                          :ARG1 w)))))))"
    ],
    "tree": [
      "(o / open-01\n   :ARG1 (c / clinic\n            :mod (m / maternity)))",
      "(o / open-01\n   :ARG1 (c / clinic\n            :location (c2 / country\n                          :name (n / name\n                                   :op1 \"UK\"))))",
      "(c / clinic\n   :mod (m / maternity)\n   :location (c2 / country\n                 :name (n / name\n                          :op1 \"UK\")))",
      "(c / clinic\n   :mod (m / maternity)\n   :location (c2 / country\n                 :name (n / name\n                          :op1 \"UK\"))\n   :beneficiary (w / woman\n                   :ARG1 (v / victimize-01\n                            :ARG0 (r / rape-01\n                                     :ARG1 w))))",
      "(c / clinic\n   :mod (m / maternity)\n   :location (c2 / country\n                 :name (n / name\n                          :op1 \"UK\"))\n   :beneficiary (w / woman\n                   :ARG1 (v / victimize-01\n                            :ARG0 (a2 / assault-01\n                                      :manner (s / sex-01\n                                                 :ARG1 w)))))"
    ],
    "smus": [
      "A maternity clinic has opened.",
      "A clinic has opened in the UK.",
      "There is a maternity clinic in the UK.",
      "There is a maternity clinic in the UK for women who have been rape victims.",
      "There is a maternity clinic in the UK for women who are victims of sexual assault."
    ]
  },
  {
    "instance_id": "pyrxsum-25",
    "summary": "The number of children referred to the NHS with gender identity issues has increased significantly in recent years , according to figures obtained by the BBC .",
    "summary_trees": [
      "# ::snt The number of children referred to the NHS with gender identity issues has increased significantly in recent years , according to figures obtained by the BBC .\n(s / say-01\n      :ARG0 (f / figure\n            :ARG1-of (o / obtain-01\n                  :ARG0 (p / publication\n                        :name (n / name\n                              :op1 \"BBC\"))))\n      :ARG1 (ii / increase-01\n            :ARG1 (n2 / number\n                  :quant-of (c / child\n                        :ARG1-of (r / refer-02\n                              :ARG0 (g / government-organization\n                                    :name (n3 / name\n                                          :op1 \"NHS\"))\n                              :ARG2 (ii2 / issue-02\n                                    :ARG0 (ii3 / identity\n                                          :mod (g2 / gender))\n                                    :ARG1 c))))\n            :ARG2 (s2 / significant-02)\n            :time (y / year\n                  :mod (r2 / recent))))"
    ],
    "tree": [
      "(s / say-01\n   :ARG1 (ii / increase-01\n             :time (y / year\n                      :mod (r2 / recent))))",
      "(s / say-01\n   :ARG0 (f / figure\n            :ARG1 (o / obtain-01\n                     :ARG0 (p / publication\n                              :name (n / name\n                                       :op1 \"BBC\"))))\n   :ARG1 (ii / increase-01\n             :ARG2 (s2 / significant-02)))",
      "(s / say-01\n   :ARG0 (f / figure\n            :ARG1 (o / obtain-01\n                     :ARG0 (p / publication\n                              :name (n / name\n                                       :op1 \"BBC\"))))\n   :ARG1 (ii / increase-01\n             :time (y / year\n                      :mod (r2 / recent))))",
      "(f / figure\n   :ARG1 (o / obtain-01\n            :ARG0 (p / publication\n                     :name (n / name\n                              :op1 \"BBC\"))))",
      "(o / obtain-01\n   :ARG0 (p / publication\n            :name (n / name\n                     :op1 \"BBC\")))"
    ],
    "smus": [
      "Increased in recent years.",
      "According to figures obtained by the BBC, the number has increased significantly.",
      "According to figures obtained by the BBC, the number has increased in recent years.",
      "Figures obtained by the BBC",
      "The BBC obtained."
    ]
  },
  {
    "instance_id": "pyrxsum-26",
    "summary": "The mayor of an east London borough has been accused of \" corrupt and illegal practices \" , at a special court hearing .",
    "summary_trees": [
      "# ::snt The mayor of an east London borough has been accused of \" corrupt and illegal practices \" , at a special court hearing .\n(a / accuse-01\n      :ARG1 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (b / borough\n                        :location (e / east\n                              :part-of (c / city\n                                    :name (n / name\n                                          :op1 \"London\"))))\n                  :ARG2 (m / mayor)))\n      :ARG2 (p2 / practice-01\n            :ARG0 p\n            :ARG1-of (c2 / corrupt-01)\n            :ARG1-of (l / legal-02\n                  :polarity -))\n      :time (h2 / hearing-02\n            :ARG0 (c3 / court)\n            :ARG1 p\n            :ARG1-of (s / special-02)))"
    ],
    "tree": [
      "(a / accuse-01\n   :ARG1 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (m / mayor))))",
      "(a / accuse-01\n   :ARG1 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (m / mayor)))\n   :ARG2 (p2 / practice-01\n             :ARG1 (c2 / corrupt-01)))",
      "(a / accuse-01\n   :ARG1 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (m / mayor)))\n   :ARG2 (p2 / practice-01\n             :ARG1 (l / legal-02\n                      :polarity -)))",
      "(a / accuse-01\n   :ARG1 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (m / mayor)))\n   :time (h2 / hearing-02\n             :ARG0 (c3 / court)))",
      "(a / accuse-01\n   :ARG1 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (m / mayor)))\n   :ARG2 (p2 / practice-01\n             :ARG1 (c2 / corrupt-01))\n   :time (h2 / hearing-02\n             :ARG0 (c3 / court)))"
    ],
    "smus": [
      "The mayor has been accused.",
      "The mayor has been accused of corrupt practices.",
      "The mayor has been accused of illegal practices.",
      "The mayor has been accused at a court hearing.",
      "The mayor has been accused of corruption practices at a court hearing."
    ]
  },
  {
    "instance_id": "pyrxsum-27",
    "summary": "A 21 - year - old man has appeared in court in County Clare charged over the fatal stabbing of Karl Haugh in Kilkee at the weekend .",
    "summary_trees": [
      "# ::snt A 21 - year - old man has appeared in court in County Clare charged over the fatal stabbing of Karl Haugh in Kilkee at the weekend .\n(a / appear-01\n      :ARG1 (m / man\n            :age (t / temporal-quantity\n                  :quant 21\n                  :unit (y / year))\n            :ARG1-of (c / charge-05\n                  :ARG2 (s / stab-01\n                        :ARG1 (p / person\n                              :name (n / name\n                                    :op1 \"Karl\"\n                                    :op2 \"Haugh\"))\n                        :mod (f / fatal)\n                        :location (c2 / city\n                              :name (n2 / name\n                                    :op1 \"Kilkee\"))\n                        :time (w / weekend))))\n      :location (c3 / court\n            :location (c4 / county\n                  :name (n3 / name\n                        :op1 \"Clare\"))))"
    ],
    "tree": [
      "(s / stab-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Karl\"\n                     :op2 \"Haugh\")))",
      "(s / stab-01\n   :mod (f / fatal)\n   :location (c2 / city\n                 :name (n2 / name\n                           :op1 \"Kilkee\")))",
      "(s / stab-01\n   :mod (f / fatal)\n   :time (w / weekend))",
      "(s / stab-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Karl\"\n                     :op2 \"Haugh\"))\n   :location (c2 / city\n                 :name (n2 / name\n                           :op1 \"Kilkee\"))\n   :time (w / weekend))",
      "(s / stab-01\n   :mod (f / fatal)\n   :location (c2 / city\n                 :name (n2 / name\n                           :op1 \"Kilkee\"))\n   :time (w / weekend))"
    ],
    "smus": [
      "Karl Haugh got stabbed",
      "A fatal stabbing occurred in Kilkee.",
      "A fatal stabbing occurred over the weekend.",
      "Karl Haugh was stabbed in Kilkee over the weekend.",
      "A fatal stabbing occurred in Kilkee over the weekend."
    ]
  },
  {
    "instance_id": "pyrxsum-28",
    "summary": "Post Office workers will stage five days of strikes from Monday in a continuing dispute over jobs , pensions and branch closures , Post Office workers union says .",
    "summary_trees": [
      "# ::snt Post Office workers will stage five days of strikes from Monday in a continuing dispute over jobs , pensions and branch closures , Post Office workers union says .\n(s / say-01\n      :ARG0 (u / union\n            :mod (p / person\n                  :ARG0-of (w / work-01\n                        :ARG2 (g / government-organization\n                              :name (n / name\n                                    :op1 \"Post\"\n                                    :op2 \"Office\")))))\n      :ARG1 (s2 / strike-02\n            :ARG0 (p2 / person\n                  :ARG0-of (w2 / work-01\n                        :ARG2 g))\n            :duration (t / temporal-quantity\n                  :quant 5\n                  :unit (d / day))\n            :time (f / from\n                  :op1 (d2 / date-entity\n                        :weekday (m / monday)))\n            :ARG1-of (c / cause-01\n                  :ARG0 (d3 / dispute-01\n                        :ARG2 (a / and\n                              :op1 (j / job)\n                              :op2 (p3 / pension)\n                              :op3 (c2 / close-01\n                                    :ARG1 (b / branch)))\n                        :ARG1-of (c3 / continue-01)))))"
    ],
    "tree": [
      "(s / say-01\n   :ARG0 (u / union\n            :mod (p / person\n                    :ARG0 (w / work-01\n                             :ARG2 (g / government-organization\n                                      :name (n / name\n                                               :op1 \"Post\"\n                                               :op2 \"Office\")))))\n   :ARG1 (s2 / strike-02\n             :time (f / from\n                      :op1 (d2 / date-entity\n                               :weekday (m / monday)))))",
      "(s / say-01\n   :ARG0 (u / union\n            :mod (p / person\n                    :ARG0 (w / work-01\n                             :ARG2 (g / government-organization\n                                      :name (n / name\n                                               :op1 \"Post\"\n                                               :op2 \"Office\")))))\n   :ARG1 (s2 / strike-02\n             :ARG1 (c / cause-01\n                      :ARG0 (d3 / dispute-01\n                                :ARG2 (j / job)))))",
      "(w / work-01\n   :ARG2 (g / government-organization\n            :name (n / name\n                     :op1 \"Post\"\n                     :op2 \"Office\")))",
      "(s2 / strike-02\n    :ARG0 (p2 / person\n              :ARG0 (w2 / work-01\n                        :ARG2 (g / government-organization :name (n / name :op1 \"Post\" :op2 \"Office\"))))\n    :duration (t / temporal-quantity\n                 :quant 5)\n    :time (f / from\n             :op1 (d2 / date-entity\n                      :weekday (m / monday)))\n    :ARG1 (c / cause-01\n             :ARG0 (d3 / dispute-01\n                       :ARG1 (c3 / continue-01))))",
      "(a / and\n   :op1 (j / job)\n   :op2 (p3 / pension))"
    ],
    "smus": [
      "The Post Office workers union says strikes will take place from Monday.",
      "The Post Office workers union says there are strikes over a jobs dispute.",
      "Works for the Post Office.",
      "From Monday, Post Office workers will strike for five days over a continuing dispute.",
      "Jobs and pensions."
    ]
  },
  {
    "instance_id": "pyrxsum-29",
    "summary": "Wales ' youth workers will be regulated by the Education Workforce Council for the first time from 1 April .",
    "summary_trees": [
      "# ::snt Wales ' youth workers will be regulated by the Education Workforce Council for the first time from 1 April .\n(r / regulate-01\n      :ARG0 (g / government-organization\n            :name (n / name\n                  :op1 \"Education\"\n                  :op2 \"Workforce\"\n                  :op3 \"Council\"))\n      :ARG1 (p / person\n            :ARG0-of (w / work-01\n                  :ARG1 (y / youth))\n            :location (c / country\n                  :name (n2 / name\n                        :op1 \"Wales\")))\n      :ord (o / ordinal-entity\n            :value 1)\n      :time (f / from\n            :op1 (d / date-entity\n                  :month 4\n                  :day 1)))"
    ],
    "tree": [
      "(r / regulate-01\n   :ARG0 (g / government-organization\n            :name (n / name\n                     :op1 \"Education\"\n                     :op2 \"Workforce\"\n                     :op3 \"Council\"))\n   :ARG1 (p / person\n            :ARG0 (w / work-01\n                     :ARG1 (y / youth))))",
      "(r / regulate-01\n   :ARG1 (p / person\n            :ARG0 (w / work-01\n                     :ARG1 (y / youth)))\n   :time (f / from\n            :op1 (d / date-entity\n                    :month 4)))",
      "(r / regulate-01\n   :ARG0 (g / government-organization\n            :name (n / name\n                     :op1 \"Education\"\n                     :op2 \"Workforce\"\n                     :op3 \"Council\"))\n   :ARG1 (p / person\n            :ARG0 (w / work-01\n                     :ARG1 (y / youth)))\n   :time (f / from\n            :op1 (d / date-entity\n                    :month 4)))",
      "(r / regulate-01\n   :ARG0 (g / government-organization\n            :name (n / name\n                     :op1 \"Education\"\n                     :op2 \"Workforce\"\n                     :op3 \"Council\"))\n   :ARG1 (p / person\n            :ARG0 (w / work-01\n                     :ARG1 (y / youth)))\n   :time (f / from\n            :op1 (d / date-entity\n                    :day 1)))",
      "(r / regulate-01\n   :ARG0 (g / government-organization\n            :name (n / name\n                     :op1 \"Education\"\n                     :op2 \"Workforce\"\n                     :op3 \"Council\"))\n   :ARG1 (p / person\n            :location (c / country\n                         :name (n2 / name\n                                   :op1 \"Wales\")))\n   :time (f / from\n            :op1 (d / date-entity\n                    :day 1)))"
    ],
    "smus": [
      "Youth workers are regulated by the Education Workforce Council.",
      "Youth workers are regulated from April.",
      "Youth workers are regulated by the Education Workforce Council from April.",
      "Youth workers will be regulated by the Education Workforce Council from the 1st.",
      "From the 1st, people in Wales will be regulated by the Education Workforce Council."
    ]
  },
  {
    "instance_id": "pyrxsum-30",
    "summary": "Liberal Democrat leader Tim Farron says Liberal Democrat leader Tim Farron does not believe gay sex is a sin , following questions about Liberal Democrat leader Tim Farron views on gay sex .",
    "summary_trees": [
      "# ::snt Liberal Democrat leader Tim Farron says Liberal Democrat leader Tim Farron does not believe gay sex is a sin , following questions about Liberal Democrat leader Tim Farron views on gay sex .\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Tim\"\n                  :op2 \"Farron\")\n            :ARG0-of (l / lead-02\n                  :ARG1 (p2 / political-party\n                        :name (n2 / name\n                              :op1 \"Liberal\"\n                              :op2 \"Democrat\"))))\n      :ARG1 (b / believe-01\n            :polarity -\n            :ARG0 p\n            :ARG1 (s2 / sin\n                  :domain (s3 / sex-01\n                        :mod (g / gay-01))))\n      :ARG1-of (f / follow-01\n            :ARG2 (q / question-01\n                  :ARG1 (v / view-02\n                        :ARG0 p\n                        :ARG1 s3))))"
    ],
    "tree": [
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (l / lead-02\n                     :ARG1 (p2 / political-party\n                               :name (n2 / name\n                                         :op1 \"Liberal\"\n                                         :op2 \"Democrat\")))))",
      "(p / person\n   :name (n / name\n            :op1 \"Tim\"\n            :op2 \"Farron\"))",
      "(p / person\n   :ARG0 (l / lead-02\n            :ARG1 (p2 / political-party\n                      :name (n2 / name\n                                :op1 \"Liberal\"\n                                :op2 \"Democrat\"))))",
      "(p / person\n   :name (n / name\n            :op1 \"Tim\"\n            :op2 \"Farron\")\n   :ARG0 (l / lead-02\n            :ARG1 (p2 / political-party\n                      :name (n2 / name\n                                :op1 \"Liberal\"\n                                :op2 \"Democrat\"))))",
      "(p2 / political-party\n    :name (n2 / name\n              :op1 \"Liberal\"\n              :op2 \"Democrat\"))"
    ],
    "smus": [
      "According to the leader of the Liberal Democrats,",
      "Tim Farron",
      "The leader of the Liberal Democrats.",
      "Tim Farron is the leader of the Liberal Democrats.",
      "Liberal Democrat."
    ]
  },
  {
    "instance_id": "pyrxsum-31",
    "summary": "Paint has been thrown over an Orange hall in north Belfast .",
    "summary_trees": [
      "# ::snt Paint has been thrown over an Orange hall in north Belfast .\n(t / throw-01\n      :ARG1 (p / paint)\n      :ARG2 (o / over\n            :op1 (h / hall\n                  :mod (o2 / organization\n                        :name (n / name\n                              :op1 \"Society\"\n                              :op2 \"of\"\n                              :op3 \"Orange\"))\n                  :location (n2 / north\n                        :part-of (c / city\n                              :name (n3 / name\n                                    :op1 \"Belfast\"))))))"
    ],
    "tree": [
      "(t / throw-01\n   :ARG2 (o / over\n            :op1 (h / hall\n                    :location (n2 / north\n                                  :part (c / city\n                                           :name (n3 / name\n                                                     :op1 \"Belfast\"))))))",
      "(t / throw-01\n   :ARG1 (p / paint)\n   :ARG2 (o / over\n            :op1 (h / hall\n                    :mod (o2 / organization\n                             :name (n / name\n                                      :op1 \"Society\"\n                                      :op2 \"of\"\n                                      :op3 \"Orange\")))))",
      "(t / throw-01\n   :ARG1 (p / paint)\n   :ARG2 (o / over\n            :op1 (h / hall\n                    :location (n2 / north\n                                  :part (c / city\n                                           :name (n3 / name\n                                                     :op1 \"Belfast\"))))))",
      "(o / over\n   :op1 (h / hall\n           :location (n2 / north\n                         :part (c / city\n                                  :name (n3 / name\n                                            :op1 \"Belfast\")))))",
      "(h / hall\n   :location (n2 / north\n                 :part (c / city\n                          :name (n3 / name\n                                    :op1 \"Belfast\"))))"
    ],
    "smus": [
      "Thrown over the hall in northern Belfast.",
      "Paint was thrown over the Orange Hall.",
      "Paint thrown over the hall in northern Belfast.",
      "over the hall in northern Belfast.",
      "The hall is in northern Belfast."
    ]
  },
  {
    "instance_id": "pyrxsum-32",
    "summary": "Liverpool boss Jurgen Klopp defended under - fire goalkeeper Simon Mignolet after under - fire goalkeeper Simon Mignolet latest uncertain display in the draw with Arsenal at Anfield .",
    "summary_trees": [
      "# ::snt Liverpool boss Jurgen Klopp defended under - fire goalkeeper Simon Mignolet after under - fire goalkeeper Simon Mignolet latest uncertain display in the draw with Arsenal at Anfield .\n(d / defend-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jurgen\"\n                  :op2 \"Klopp\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (t / team\n                        :name (n2 / name\n                              :op1 \"Liverpool\"))\n                  :ARG2 (b / boss)))\n      :ARG1 (p2 / person\n            :name (n3 / name\n                  :op1 \"Simon\"\n                  :op2 \"Mignolet\")\n            :ARG0-of (h2 / have-org-role-91\n                  :ARG2 (g / goalkeeper))\n            :ARG1-of (f / fire-01\n                  :mod (u / under)))\n      :time (a / after\n            :op1 (d2 / display-01\n                  :ARG0 p2\n                  :ARG1 (t2 / thing\n                        :ARG1-of (k / know-01\n                              :polarity -))\n                  :time (d3 / draw-01\n                        :ARG0 t\n                        :ARG3 (t3 / team\n                              :name (n4 / name\n                                    :op1 \"Arsenal\"))\n                        :location (s / sports-facility\n                              :name (n5 / name\n                                    :op1 \"Anfield\")))\n                  :mod (l / last))))"
    ],
    "tree": [
      "(d / defend-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jurgen\"\n                     :op2 \"Klopp\")))",
      "(d / defend-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (b / boss))))",
      "(d / defend-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (b / boss)))\n   :ARG1 (p2 / person\n             :ARG0 (h2 / have-org-role-91\n                       :ARG2 (g / goalkeeper)))\n   :time (a / after\n            :op1 (d2 / display-01\n                     :time (d3 / draw-01\n                               :location (s / sports-facility\n                                            :name (n5 / name\n                                                      :op1 \"Anfield\"))))))",
      "(p / person\n   :name (n / name\n            :op1 \"Jurgen\"\n            :op2 \"Klopp\")\n   :ARG0 (h / have-org-role-91\n            :ARG1 (t / team\n                     :name (n2 / name\n                               :op1 \"Liverpool\"))))",
      "(p / person\n   :name (n / name\n            :op1 \"Jurgen\"\n            :op2 \"Klopp\")\n   :ARG0 (h / have-org-role-91\n            :ARG2 (b / boss)))"
    ],
    "smus": [
      "Jurgen Klopp defended.",
      "The boss defended.",
      "After a display at the draw at Anfield, the boss defended the goalkeeper.",
      "Liverpool's Jurgen Klopp",
      "The boss is Jurgen Klopp."
    ]
  },
  {
    "instance_id": "pyrxsum-33",
    "summary": "Thousands of people have been leaving besieged , rebel - held eastern districts of the Syrian city of Aleppo following the resumption of evacuations agreed as part of a ceasefire deal last week .",
    "summary_trees": [
      "# ::snt Thousands of people have been leaving besieged , rebel - held eastern districts of the Syrian city of Aleppo following the resumption of evacuations agreed as part of a ceasefire deal last week .\n(l / leave-11\n      :ARG0 (p / person\n            :quant (m / multiple\n                  :op1 1000))\n      :ARG1 (d / district\n            :location (e / east)\n            :ARG1-of (b / besiege-01)\n            :ARG1-of (h / hold-01\n                  :ARG0 (p2 / person\n                        :ARG0-of (r / rebel-01)))\n            :part-of (c / city\n                  :name (n / name\n                        :op1 \"Aleppo\")\n                  :location (c2 / country\n                        :name (n2 / name\n                              :op1 \"Syria\"))))\n      :ARG1-of (f / follow-01\n            :ARG2 (r2 / resume-01\n                  :ARG1 (e2 / evacuate-01\n                        :ARG1-of (a / agree-01\n                              :part-of (d2 / deal-01\n                                    :ARG2 (c3 / cease-01\n                                          :ARG1 (f2 / fire-01))\n                                    :time (w / week\n                                          :mod (l2 / last))))))))"
    ],
    "tree": [
      "(l / leave-11\n   :ARG0 (p / person\n            :quant (m / multiple\n                      :op1 1000)))",
      "(l / leave-11\n   :ARG0 (p / person\n            :quant (m / multiple\n                      :op1 1000))\n   :ARG1 (d / district\n            :ARG1 (b / besiege-01)))",
      "(l / leave-11\n   :ARG0 (p / person\n            :quant (m / multiple\n                      :op1 1000))\n   :ARG1 (d / district\n            :part (c / city\n                     :location (c2 / country\n                                   :name (n2 / name\n                                             :op1 \"Syria\")))))",
      "(c / city\n   :name (n / name\n            :op1 \"Aleppo\"))",
      "(d2 / deal-01\n    :ARG2 (c3 / cease-01\n              :ARG1 (f2 / fire-01))\n    :time (w / week\n             :mod (l2 / last)))"
    ],
    "smus": [
      "Thousands of people are leaving.",
      "Thousands of people are leaving besieged districts.",
      "Thousands are leaving districts of a Syrian city.",
      "Aleppo is a city.",
      "A cease fire deal was struck last week."
    ]
  },
  {
    "instance_id": "pyrxsum-34",
    "summary": "Thousands of people have marched in opposition to plans to downgrade Stafford Hospital 's services .",
    "summary_trees": [
      "# ::snt Thousands of people have marched in opposition to plans to downgrade Stafford Hospital 's services .\n(m / march-01\n      :ARG0 (p / person\n            :quant (m2 / multiple\n                  :op1 1000))\n      :purpose (o / oppose-01\n            :ARG0 p\n            :ARG1 (p2 / plan-01\n                  :ARG1 (d / downgrade-02\n                        :ARG1 (s / service\n                              :poss (h / hospital\n                                    :name (n / name\n                                          :op1 \"Stafford\"\n                                          :op2 \"Hospital\")))))))"
    ],
    "tree": [
      "(m / march-01\n   :ARG0 (p / person\n            :quant (m2 / multiple\n                       :op1 1000)))",
      "(m / march-01\n   :purpose (o / oppose-01\n               :ARG1 (p2 / plan-01\n                         :ARG1 (d / downgrade-02\n                                  :ARG1 (s / service\n                                           :poss (h / hospital\n                                                    :name (n / name\n                                                             :op1 \"Stafford\"\n                                                             :op2 \"Hospital\")))))))",
      "(m / march-01\n   :ARG0 (p / person\n            :quant (m2 / multiple\n                       :op1 1000))\n   :purpose (o / oppose-01\n               :ARG0 p))",
      "(m / march-01\n   :ARG0 (p / person\n            :quant (m2 / multiple\n                       :op1 1000))\n   :purpose (o / oppose-01\n               :ARG1 (p2 / plan-01\n                         :ARG1 (d / downgrade-02\n                                  :ARG1 (s / service\n                                           :poss (h / hospital\n                                                    :name (n / name\n                                                             :op1 \"Stafford\"\n                                                             :op2 \"Hospital\")))))))",
      "(o / oppose-01\n   :ARG1 (p2 / plan-01\n             :ARG1 (d / downgrade-02\n                      :ARG1 (s / service\n                               :poss (h / hospital\n                                        :name (n / name\n                                                 :op1 \"Stafford\"\n                                                 :op2 \"Hospital\"))))))"
    ],
    "smus": [
      "Thousands marched.",
      "Marched in opposition to plans to downgrade Stafford Hospital's services.",
      "Thousands marched in opposition.",
      "Thousands marched in opposition to plans to downgrade Stafford Hospital's services.",
      "There was opposition to plans to downgrade Stafford Hospital's services."
    ]
  },
  {
    "instance_id": "pyrxsum-35",
    "summary": "Filled with goodwill , unfathomable optimism and a slightly heavy heart , you embark on a health kick .",
    "summary_trees": [
      "# ::snt Filled with goodwill , unfathomable optimism and a slightly heavy heart , you embark on a health kick .\n(e / embark-01\n      :ARG0 (y / you\n            :ARG1-of (f / fill-01\n                  :ARG2 (a / and\n                        :op1 (g / goodwill)\n                        :op2 (o / optimism\n                              :ARG1-of (c / conceive-01\n                                    :polarity -))\n                        :op3 (h / heart\n                              :mod (h2 / heavy\n                                    :degree (s / slight))))))\n      :ARG1 (k / kick-01\n            :ARG0 y\n            :ARG1 (h3 / health)))"
    ],
    "tree": [
      "(e / embark-01\n   :ARG1 (k / kick-01\n            :ARG0 (y / you)))",
      "(e / embark-01\n   :ARG0 (y / you\n            :ARG1 (f / fill-01\n                     :ARG2 (g / goodwill)))\n   :ARG1 (k / kick-01\n            :ARG0 y))",
      "(e / embark-01\n   :ARG0 (y / you\n            :ARG1 (f / fill-01\n                     :ARG2 (g / goodwill)))\n   :ARG1 (k / kick-01\n            :ARG1 (h3 / health)))",
      "(e / embark-01\n   :ARG0 (y / you\n            :ARG1 (f / fill-01\n                     :ARG2 (h / heart\n                              :mod (h2 / heavy\n                                       :degree (s / slight)))))\n   :ARG1 (k / kick-01\n            :ARG1 (h3 / health)))",
      "(y / you\n   :ARG1 (f / fill-01\n            :ARG2 (h / heart\n                     :mod (h2 / heavy\n                              :degree (s / slight)))))"
    ],
    "smus": [
      "You embark on a kick.",
      "You embark on a kick, full of goodwill.",
      "You embark on a health kick, full of goodwill.",
      "You embark on a health kick, filled with a slightly heavy heart.",
      "You are filled with a slightly heavy heart."
    ]
  },
  {
    "instance_id": "pyrxsum-36",
    "summary": "Russia and Qatar may have had to pay bribes to secure Russia and Qatar World Cups , Sepp Blatter 's former special advisor has suggested .",
    "summary_trees": [
      "# ::snt Russia and Qatar may have had to pay bribes to secure Russia and Qatar World Cups , Sepp Blatter 's former special advisor has suggested .\n(s / suggest-01\n      :ARG0 (p / person\n            :ARG0-of (a / advise-01\n                  :ARG1 (p2 / person\n                        :name (n / name\n                              :op1 \"Sepp\"\n                              :op2 \"Blatter\"))\n                  :time (f / former)\n                  :ARG1-of (s2 / special-02)))\n      :ARG1 (p3 / possible-01\n            :ARG1 (o / obligate-01\n                  :ARG1 (a2 / and\n                        :op1 (c / country\n                              :name (n2 / name\n                                    :op1 \"Russia\"))\n                        :op2 (c2 / country\n                              :name (n3 / name\n                                    :op1 \"Qatar\")))\n                  :ARG2 (p4 / pay-01\n                        :ARG0 a2\n                        :ARG1 (b / bribe-01)\n                        :purpose (s3 / secure-02\n                              :ARG0 a2\n                              :ARG1 (a3 / and\n                                    :op1 (g / game\n                                          :name (n4 / name\n                                                :op1 \"Russia\"\n                                                :op2 \"World\"\n                                                :op3 \"Cup\"))\n                                    :op2 (g2 / game\n                                          :name (n5 / name\n                                                :op1 \"Qatar\"\n                                                :op2 \"World\"\n                                                :op3 \"Cup\"))))))))"
    ],
    "tree": [
      "(s / suggest-01\n   :ARG0 (p / person\n            :ARG0 (a / advise-01\n                     :time (f / former))))",
      "(s / suggest-01\n   :ARG1 (p3 / possible-01\n             :ARG1 (o / obligate-01\n                      :ARG1 (c / country\n                               :name (n2 / name\n                                         :op1 \"Russia\")))))",
      "(s / suggest-01\n   :ARG1 (p3 / possible-01\n             :ARG1 (o / obligate-01\n                      :ARG2 (p4 / pay-01\n                                :ARG0 (a2 / and)))))",
      "(s / suggest-01\n   :ARG1 (p3 / possible-01\n             :ARG1 (o / obligate-01\n                      :ARG2 (p4 / pay-01\n                                :ARG1 (b / bribe-01)))))",
      "(s / suggest-01\n   :ARG0 (p / person\n            :ARG0 (a / advise-01\n                     :time (f / former)))\n   :ARG1 (p3 / possible-01\n             :ARG1 (o / obligate-01\n                      :ARG1 (c / country\n                               :name (n2 / name\n                                         :op1 \"Russia\")))))"
    ],
    "smus": [
      "As suggested by a former adviser.",
      "It is suggested that Russia may have to.",
      "It is suggested that the parties may have to pay.",
      "It is suggested that bribes may have to be paid.",
      "A former adviser has suggested that Russia may have to."
    ]
  },
  {
    "instance_id": "pyrxsum-37",
    "summary": "The High Court has begun hearing the legal challenge of a terminally ill UK man who wants the right to die .",
    "summary_trees": [
      "# ::snt The High Court has begun hearing the legal challenge of a terminally ill UK man who wants the right to die .\n(b / begin-01\n      :ARG0 (g / government-organization\n            :name (n / name\n                  :op1 \"High\"\n                  :op2 \"Court\"))\n      :ARG1 (h / hear-01\n            :ARG0 g\n            :ARG1 (c / challenge-01\n                  :ARG0 (m / man\n                        :ARG1-of (ii / ill-01\n                              :mod (t / terminal))\n                        :mod (c2 / country\n                              :name (n2 / name\n                                    :op1 \"UK\"))\n                        :ARG0-of (w / want-01\n                              :ARG1 (r / right-05\n                                    :ARG1 m\n                                    :ARG2 (d / die-01\n                                          :ARG1 m))))\n                  :ARG1-of (l / legal-02))))"
    ],
    "tree": [
      "(b / begin-01\n   :ARG0 (g / government-organization\n            :name (n / name\n                     :op1 \"High\"\n                     :op2 \"Court\")))",
      "(b / begin-01\n   :ARG1 (h / hear-01\n            :ARG0 (g / government-organization :name (n / name :op1 \"High\" :op2 \"Court\"))))",
      "(b / begin-01\n   :ARG1 (h / hear-01\n            :ARG1 (c / challenge-01\n                     :ARG0 (m / man\n                              :ARG0 (w / want-01\n                                       :ARG1 (r / right-05\n                                                :ARG2 (d / die-01\n                                                         :ARG1 m)))))))",
      "(b / begin-01\n   :ARG0 (g / government-organization\n            :name (n / name\n                     :op1 \"High\"\n                     :op2 \"Court\"))\n   :ARG1 (h / hear-01\n            :ARG1 (c / challenge-01\n                     :ARG1 (l / legal-02))))"
    ],
    "smus": [
      "The High Court has begun.",
      "The High Court has begun hearing.",
      "Hearing the challenge of a man who wants the right to die, began.",
      "The High Court has begun hearing a legal challenge."
    ]
  },
  {
    "instance_id": "pyrxsum-38",
    "summary": "An online appeal set up to help the family of a five - year - old girl who died when a five - year - old girl who died when her head became stuck in a lift in Dorset head became stuck in a lift in Dorset has raised more than \u00a3 12,000 .",
    "summary_trees": [
      "# ::snt An online appeal set up to help the family of a five - year - old girl who died when a five - year - old girl who died when her head became stuck in a lift in Dorset head became stuck in a lift in Dorset has raised more than \u00a3 12,000 .\n(r / raise-02\n      :ARG0 (a / appeal-02\n            :mod (o / online)\n            :ARG1-of (s / set-up-03\n                  :purpose (h / help-01\n                        :ARG0 a\n                        :ARG1 (f / family\n                              :poss (g / girl\n                                    :age (t / temporal-quantity\n                                          :quant 5\n                                          :unit (y / year))\n                                    :ARG1-of (d / die-01\n                                          :ARG1-of (c / cause-01\n                                                :ARG0 (b / become-01\n                                                      :ARG1 (h2 / head\n                                                            :part-of (g2 / girl\n                                                                  :age (t2 / temporal-quantity\n                                                                        :quant 5\n                                                                        :unit (y2 / year))))\n                                                      :ARG2 (s2 / stick-01\n                                                            :ARG1 h2\n                                                            :ARG2 (l / lift)\n                                                            :location (c2 / county\n                                                                  :name (n / name\n                                                                        :op1 \"Dorset\")))))))))))\n      :ARG1 (m / more-than\n            :op1 (m2 / monetary-quantity\n                  :quant 12000\n                  :unit (p / pound))))"
    ],
    "tree": [
      "(a / appeal-02\n   :mod (o / online)\n   :ARG1 (s / set-up-03\n            :purpose (h / help-01\n                        :ARG1 (f / family\n                                 :poss (g / girl\n                                          :ARG1 (d / die-01\n                                                   :ARG1 (c / cause-01\n                                                            :ARG0 (b / become-01\n                                                                     :ARG2 (s2 / stick-01\n                                                                               :ARG1 (h2 / head))))))))))",
      "(g / girl\n   :age (t / temporal-quantity\n           :quant 5))",
      "(g / girl\n   :age (t / temporal-quantity\n           :quant 5)\n   :ARG1 (d / die-01\n            :ARG1 (c / cause-01\n                     :ARG0 (b / become-01\n                              :ARG2 (s2 / stick-01\n                                        :ARG1 (h2 / head))))))",
      "(b / become-01\n   :ARG1 (h2 / head\n             :part (g2 / girl\n                       :age (t2 / temporal-quantity\n                                :quant 5)))\n   :ARG2 (s2 / stick-01\n             :ARG1 h2))",
      "(m / more-than\n   :op1 (m2 / monetary-quantity\n            :quant 12000))"
    ],
    "smus": [
      "There was an online appeal set up to help the family of the girl who died when her head became stuck.",
      "The girl is 5 years old.",
      "The 5 year old girl died because her head became stuck.",
      "The head of the 5-year-old girl became stuck.",
      "more than 2,000"
    ]
  },
  {
    "instance_id": "pyrxsum-39",
    "summary": "Game of Thrones star \" The Mountain \" has been beaten to Europe 's Strongest Man title by a man from Swindon .",
    "summary_trees": [
      "# ::snt Game of Thrones star \" The Mountain \" has been beaten to Europe 's Strongest Man title by a man from Swindon .\n(b / beat-03\n      :ARG0 (m / man\n            :source (c / city\n                  :name (n / name\n                        :op1 \"Swindon\")))\n      :ARG1 (b2 / broadcast-program\n            :name (n2 / name\n                  :op1 \"The\"\n                  :op2 \"Mountain\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (g / game\n                        :name (n3 / name\n                              :op1 \"Game\"\n                              :op2 \"of\"\n                              :op3 \"Thrones\"))))\n      :ARG2 (t / title-01\n            :ARG1 m\n            :ARG2 (s / strong-02\n                  :ARG2-of (h2 / have-degree-91\n                        :ARG1 m\n                        :ARG3 (m2 / most)\n                        :ARG5 (c2 / continent\n                              :name (n4 / name\n                                    :op1 \"Europe\"))))))"
    ],
    "tree": [
      "(b / beat-03\n   :ARG1 (b2 / broadcast-program\n             :name (n2 / name\n                       :op1 \"The\"\n                       :op2 \"Mountain\")))",
      "(b / beat-03\n   :ARG0 (m / man\n            :source (c / city\n                       :name (n / name\n                                :op1 \"Swindon\")))\n   :ARG1 (b2 / broadcast-program\n             :name (n2 / name\n                       :op1 \"The\"\n                       :op2 \"Mountain\")))",
      "(b / beat-03\n   :ARG0 (m / man\n            :source (c / city\n                       :name (n / name\n                                :op1 \"Swindon\")))\n   :ARG2 (t / title-01\n            :ARG2 (s / strong-02\n                     :ARG2 (h2 / have-degree-91\n                               :ARG3 (m2 / most)))))",
      "(b / beat-03\n   :ARG0 (m / man\n            :source (c / city\n                       :name (n / name\n                                :op1 \"Swindon\")))\n   :ARG1 (b2 / broadcast-program\n             :name (n2 / name\n                       :op1 \"The\"\n                       :op2 \"Mountain\"))\n   :ARG2 (t / title-01\n            :ARG1 m))",
      "(b / beat-03\n   :ARG0 (m / man\n            :source (c / city\n                       :name (n / name\n                                :op1 \"Swindon\")))\n   :ARG1 (b2 / broadcast-program\n             :name (n2 / name\n                       :op1 \"The\"\n                       :op2 \"Mountain\"))\n   :ARG2 (t / title-01\n            :ARG2 (s / strong-02\n                     :ARG2 (h2 / have-degree-91\n                               :ARG3 (m2 / most)))))"
    ],
    "smus": [
      "The Mountain was beaten.",
      "The Mountain was beaten by a Swindon man.",
      "The Swindon man has beaten the title of strongest.",
      "The Mountain was beaten to the title by a Swindon man.",
      "The Mountain was beaten by a Swindon man for the title of strongest."
    ]
  },
  {
    "instance_id": "pyrxsum-40",
    "summary": "Labour leadership contender Andy Burnham has told supporters Labour leadership contender Andy Burnham has an \" outside but realistic chance \" of winning the contest .",
    "summary_trees": [
      "# ::snt Labour leadership contender Andy Burnham has told supporters Labour leadership contender Andy Burnham has an \" outside but realistic chance \" of winning the contest .\n(t / tell-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Andy\"\n                  :op2 \"Burnham\")\n            :ARG0-of (c / contend-02\n                  :ARG1 (l / lead-02\n                        :ARG1 (p2 / political-party\n                              :name (n2 / name\n                                    :op1 \"Labour\")))))\n      :ARG1 (c2 / chance-02\n            :ARG0 p\n            :ARG1 (w / win-01\n                  :ARG0 p\n                  :ARG2 (c3 / contest-02))\n            :ARG2 (o / outside)\n            :ARG1-of (c4 / contrast-01\n                  :ARG2 (r / realistic-03\n                        :ARG1 c2)))\n      :ARG2 (p3 / person\n            :ARG0-of (s / support-01)))"
    ],
    "tree": [
      "(t / tell-01\n   :ARG1 (c2 / chance-02\n             :ARG1 (w / win-01\n                      :ARG2 (c3 / contest-02))))",
      "(t / tell-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Andy\"\n                     :op2 \"Burnham\"))\n   :ARG1 (c2 / chance-02\n             :ARG1 (w / win-01\n                      :ARG2 (c3 / contest-02))))",
      "(t / tell-01\n   :ARG1 (c2 / chance-02\n             :ARG2 (o / outside))\n   :ARG2 (p3 / person\n             :ARG0 (s / support-01)))",
      "(t / tell-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Andy\"\n                     :op2 \"Burnham\"))\n   :ARG1 (c2 / chance-02\n             :ARG2 (o / outside))\n   :ARG2 (p3 / person\n             :ARG0 (s / support-01)))",
      "(p / person\n   :name (n / name\n            :op1 \"Andy\"\n            :op2 \"Burnham\")\n   :ARG0 (c / contend-02\n            :ARG1 (l / lead-02\n                     :ARG1 (p2 / political-party\n                               :name (n2 / name\n                                         :op1 \"Labour\")))))"
    ],
    "smus": [
      "The chance of winning the contest is being told.",
      "Andy Burnham has told of the chance of winning the contest.",
      "Supporters were told there was an outside chance.",
      "Andy Burnham has told supporters there is an outside chance.",
      "Andy Burnham is the contending leader of Labour."
    ]
  },
  {
    "instance_id": "pyrxsum-41",
    "summary": "Belfast Giants have closed the gap on Elite League leaders Cardiff Devils to six points with this comfortable win over the Capitals at the SSE Arena .",
    "summary_trees": [
      "# ::snt Belfast Giants have closed the gap on Elite League leaders Cardiff Devils to six points with this comfortable win over the Capitals at the SSE Arena .\n(c / close-01\n      :ARG0 (t / team\n            :name (n / name\n                  :op1 \"Belfast\"\n                  :op2 \"Giants\"))\n      :ARG1 (g / gap)\n      :ARG4 (t2 / team\n            :name (n2 / name\n                  :op1 \"Cardiff\"\n                  :op2 \"Devils\")\n            :ARG0-of (l / lead-01\n                  :ARG1 (l2 / league\n                        :name (n3 / name\n                              :op1 \"Elite\"\n                              :op2 \"League\"))))\n      :extent (p / point\n            :quant 6)\n      :manner (w / win-01\n            :ARG0 t\n            :ARG4 (t3 / team\n                  :name (n4 / name\n                        :op1 \"Capitals\"))\n            :ARG0-of (c2 / comfortable-02)\n            :location (s / sports-facility\n                  :name (n5 / name\n                        :op1 \"SSE\"\n                        :op2 \"Arena\"))\n            :mod (t4 / this)))"
    ],
    "tree": [
      "(c / close-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Belfast\"\n                     :op2 \"Giants\"))\n   :ARG1 (g / gap))",
      "(c / close-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Belfast\"\n                     :op2 \"Giants\"))\n   :extent (p / point\n              :quant 6))",
      "(c / close-01\n   :ARG1 (g / gap)\n   :extent (p / point\n              :quant 6))",
      "(c / close-01\n   :extent (p / point\n              :quant 6)\n   :manner (w / win-01\n              :ARG0 (t / team :name (n / name :op1 \"Belfast\" :op2 \"Giants\"))\n              :ARG4 (t3 / team :name (n4 / name :op1 \"Capitals\"))\n              :ARG0 (c2 / comfortable-02)\n              :location (s / sports-facility :name (n5 / name :op1 \"SSE\" :op2 \"Arena\"))\n              :mod (t4 / this)))",
      "(c / close-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Belfast\"\n                     :op2 \"Giants\"))\n   :ARG1 (g / gap)\n   :manner (w / win-01\n              :ARG0 t\n              :ARG4 (t3 / team :name (n4 / name :op1 \"Capitals\"))\n              :ARG0 (c2 / comfortable-02)\n              :location (s / sports-facility :name (n5 / name :op1 \"SSE\" :op2 \"Arena\"))\n              :mod (t4 / this)))"
    ],
    "smus": [
      "The Belfast Giants have closed the gap.",
      "The Belfast Giants have closed the gap to six points.",
      "The gap has closed by six points.",
      "With this comfortable win over the Capitals at the SSE Arena, the Belfast Giants have closed the gap to six points.",
      "The Belfast Giants have closed the gap with this comfortable win over the Capitals at the SSE Arena."
    ]
  },
  {
    "instance_id": "pyrxsum-42",
    "summary": "Hayley Turner , Britain 's most successful female jockey , believes Hayley Turner , Britain 's most successful female jockey career has helped inspire other women to progress in the sport .",
    "summary_trees": [
      "# ::snt Hayley Turner , Britain 's most successful female jockey , believes Hayley Turner , Britain 's most successful female jockey career has helped inspire other women to progress in the sport .\n(b / believe-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Hayley\"\n                  :op2 \"Turner\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (j / jockey\n                        :mod (f / female)))\n            :ARG1-of (s / succeed-01\n                  :ARG2-of (h2 / have-degree-91\n                        :ARG1 (c / career\n                              :ARG3 (m / most)\n                              :ARG5 c\n                              :mod (j2 / jockey\n                                    :mod (f2 / female))\n                              :location (c2 / country\n                                    :name (n2 / name\n                                          :op1 \"Britain\"))\n                              :ARG1-of (s2 / succeed-01\n                                    :ARG2-of (h3 / have-degree-91\n                                          :ARG1 c\n                                          :ARG3 (m2 / most)))))))\n      :ARG1 (h4 / help-01\n            :ARG0 c\n            :ARG1 (ii / inspire-01\n                  :ARG0 c\n                  :ARG1 (w / woman\n                        :mod (o / other))\n                  :ARG2 (p2 / progress-01\n                        :ARG1 w\n                        :ARG4 (s3 / sport)))))"
    ],
    "tree": [
      "(b / believe-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (j / jockey\n                              :mod (f / female)))))",
      "(p / person\n   :name (n / name\n            :op1 \"Hayley\"\n            :op2 \"Turner\")\n   :ARG0 (h / have-org-role-91\n            :ARG2 (j / jockey\n                     :mod (f / female))))",
      "(p / person\n   :name (n / name\n            :op1 \"Hayley\"\n            :op2 \"Turner\")\n   :ARG1 (s / succeed-01\n            :ARG2 (h2 / have-degree-91\n                      :ARG1 (c / career\n                               :mod (j2 / jockey\n                                        :mod (f2 / female))))))",
      "(p / person\n   :name (n / name\n            :op1 \"Hayley\"\n            :op2 \"Turner\")\n   :ARG0 (h / have-org-role-91\n            :ARG2 (j / jockey\n                     :mod (f / female)))\n   :ARG1 (s / succeed-01\n            :ARG2 (h2 / have-degree-91\n                      :ARG1 (c / career\n                               :mod (j2 / jockey\n                                        :mod (f2 / female))))))",
      "(p / person\n   :name (n / name\n            :op1 \"Hayley\"\n            :op2 \"Turner\")\n   :ARG0 (h / have-org-role-91\n            :ARG2 (j / jockey\n                     :mod (f / female)))\n   :ARG1 (s / succeed-01\n            :ARG2 (h2 / have-degree-91\n                      :ARG1 (c / career\n                               :location (c2 / country\n                                             :name (n2 / name\n                                                       :op1 \"Britain\"))))))"
    ],
    "smus": [
      "The female jockey believes.",
      "Hayley Turner is a female jockey.",
      "Hayley Turner is a successful female jockey.",
      "Hayley Turner is a female jockey who has had a successful career as a jockey.",
      "Hayley Turner is a female jockey who has been successful in a career in Britain."
    ]
  },
  {
    "instance_id": "pyrxsum-43",
    "summary": "An elderly woman has died in a house fire in Enniskillen .",
    "summary_trees": [
      "# ::snt An elderly woman has died in a house fire in Enniskillen .\n(d / die-01\n      :ARG1 (w / woman\n            :mod (e / elderly))\n      :ARG1-of (c / cause-01\n            :ARG0 (f / fire\n                  :location (h / house)\n                  :location (c2 / city\n                        :name (n / name\n                              :op1 \"Enniskillen\")))))"
    ],
    "tree": [
      "(d / die-01\n   :ARG1 (w / woman\n            :mod (e / elderly)))",
      "(c / cause-01\n   :ARG0 (f / fire\n            :location (h / house)))",
      "(c / cause-01\n   :ARG0 (f / fire\n            :location (c2 / city\n                          :name (n / name\n                                   :op1 \"Enniskillen\"))))",
      "(c2 / city\n    :name (n / name\n             :op1 \"Enniskillen\"))"
    ],
    "smus": [
      "An elderly woman has died.",
      "Caused by a fire in the house.",
      "The fire in Enniskillen was caused.",
      "Enniskillen"
    ]
  },
  {
    "instance_id": "pyrxsum-44",
    "summary": "Championship side Fulham have signed striker Gohi Cyriac on loan until the end of the season from Belgian Pro League side KV Oostende .",
    "summary_trees": [
      "# ::snt Championship side Fulham have signed striker Gohi Cyriac on loan until the end of the season from Belgian Pro League side KV Oostende .\n(s / sign-02\n      :ARG0 (s2 / side\n            :name (n / name\n                  :op1 \"Fulham\")\n            :mod (c / championship))\n      :ARG1 (p / person\n            :name (n2 / name\n                  :op1 \"Gohi\"\n                  :op2 \"Cyriac\")\n            :ARG0-of (s3 / strike-02))\n      :ARG3 (s4 / side\n            :name (n3 / name\n                  :op1 \"KV\"\n                  :op2 \"Oostende\")\n            :mod (l / league\n                  :name (n4 / name\n                        :op1 \"Pro\"\n                        :op2 \"League\")\n                  :mod (c2 / country\n                        :name (n5 / name\n                              :op1 \"Belgium\"))))\n      :manner (l2 / loan)\n      :time (u / until\n            :op1 (e / end-01\n                  :ARG1 (s5 / season))))"
    ],
    "tree": [
      "(s / sign-02\n   :ARG0 (s2 / side\n             :name (n / name\n                      :op1 \"Fulham\")))",
      "(s / sign-02\n   :ARG0 (s2 / side\n             :name (n / name\n                      :op1 \"Fulham\"))\n   :ARG1 (p / person\n            :ARG0 (s3 / strike-02)))",
      "(s / sign-02\n   :ARG0 (s2 / side\n             :name (n / name\n                      :op1 \"Fulham\"))\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Gohi\"\n                      :op2 \"Cyriac\"))\n   :manner (l2 / loan))",
      "(s / sign-02\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Gohi\"\n                      :op2 \"Cyriac\"))\n   :manner (l2 / loan)\n   :time (u / until\n            :op1 (e / end-01\n                    :ARG1 (s5 / season))))",
      "(p / person\n   :name (n2 / name\n             :op1 \"Gohi\"\n             :op2 \"Cyriac\")\n   :ARG0 (s3 / strike-02))"
    ],
    "smus": [
      "Fulham have signed.",
      "Fulham have signed a striker.",
      "Fulham have signed Gohi Cyriac on loan.",
      "Gohi Cyriac was signed on loan until the end of the season.",
      "Gohi Cyriac, striker."
    ]
  },
  {
    "instance_id": "pyrxsum-45",
    "summary": "Wales started their 2018 World Cup qualifying campaign in confident fashion as Wales convincingly beat Moldova .",
    "summary_trees": [
      "# ::snt Wales started their 2018 World Cup qualifying campaign in confident fashion as Wales convincingly beat Moldova .\n(s / start-01\n      :ARG0 (t / team\n            :name (n / name\n                  :op1 \"Wales\"))\n      :ARG1 (c / campaign-01\n            :ARG0 t\n            :ARG1 (q / qualify-02\n                  :ARG1 t\n                  :ARG2 (g / game\n                        :name (n2 / name\n                              :op1 \"World\"\n                              :op2 \"Cup\")\n                        :time (d / date-entity\n                              :year 2018))))\n      :manner (c2 / confident-01\n            :ARG1 t)\n      :time (b / beat-03\n            :ARG0 t\n            :ARG1 (t2 / team\n                  :name (n3 / name\n                        :op1 \"Moldova\"))\n            :ARG0-of (c3 / convince-01)))"
    ],
    "tree": [
      "(s / start-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Wales\"))\n   :ARG1 (c / campaign-01\n            :ARG0 t))",
      "(s / start-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Wales\"))\n   :ARG1 (c / campaign-01\n            :ARG1 (q / qualify-02\n                     :ARG1 t)))",
      "(s / start-01\n   :ARG1 (c / campaign-01\n            :ARG0 (t / team :name (n / name :op1 \"Wales\")))\n   :time (b / beat-03\n            :ARG1 (t2 / team\n                      :name (n3 / name\n                                :op1 \"Moldova\"))))",
      "(s / start-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Wales\"))\n   :ARG1 (c / campaign-01\n            :ARG0 t)\n   :time (b / beat-03\n            :ARG1 (t2 / team\n                      :name (n3 / name\n                                :op1 \"Moldova\"))))",
      "(s / start-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Wales\"))\n   :ARG1 (c / campaign-01\n            :ARG1 (q / qualify-02\n                     :ARG1 t))\n   :time (b / beat-03\n            :ARG1 (t2 / team\n                      :name (n3 / name\n                                :op1 \"Moldova\"))))"
    ],
    "smus": [
      "Wales started the campaign.",
      "Wales started a qualifying campaign.",
      "Wales started their campaign when they beat Moldova.",
      "Wales started the campaign when they beat Moldova.",
      "Wales started their qualification campaign when they beat Moldova."
    ]
  },
  {
    "instance_id": "pyrxsum-46",
    "summary": "The BBC 's director general has accused the Iranian authorities of intimidating those working for The BBC 's Persian service .",
    "summary_trees": [
      "# ::snt The BBC 's director general has accused the Iranian authorities of intimidating those working for The BBC 's Persian service .\n(a / accuse-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (p2 / publication\n                        :name (n / name\n                              :op1 \"BBC\"))\n                  :ARG2 (d / director\n                        :mod (g / general))))\n      :ARG1 (a2 / authority\n            :mod (c / country\n                  :name (n2 / name\n                        :op1 \"Iran\")))\n      :ARG2 (ii / intimidate-01\n            :ARG0 a2\n            :ARG1 (p3 / person\n                  :ARG0-of (w / work-01\n                        :ARG2 (s / service\n                              :mod (l / language\n                                    :name (n3 / name\n                                          :op1 \"Persian\"))\n                              :poss p2)))))"
    ],
    "tree": [
      "(a / accuse-01\n   :ARG1 (a2 / authority\n             :mod (c / country\n                     :name (n2 / name\n                               :op1 \"Iran\"))))",
      "(a / accuse-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (p2 / publication\n                               :name (n / name\n                                        :op1 \"BBC\"))))\n   :ARG1 (a2 / authority\n             :mod (c / country\n                     :name (n2 / name\n                               :op1 \"Iran\"))))",
      "(a / accuse-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (d / director\n                              :mod (g / general))))\n   :ARG1 (a2 / authority\n             :mod (c / country\n                     :name (n2 / name\n                               :op1 \"Iran\"))))",
      "(a / accuse-01\n   :ARG1 (a2 / authority\n             :mod (c / country\n                     :name (n2 / name\n                               :op1 \"Iran\")))\n   :ARG2 (ii / intimidate-01\n             :ARG0 a2))",
      "(a / accuse-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (d / director\n                              :mod (g / general))))\n   :ARG1 (a2 / authority\n             :mod (c / country\n                     :name (n2 / name\n                               :op1 \"Iran\")))\n   :ARG2 (ii / intimidate-01\n             :ARG0 a2))"
    ],
    "smus": [
      "Iranian authorities are accused.",
      "The BBC has accused Iranian authorities.",
      "The director general has accused Iranian authorities.",
      "Iranian authorities have been accused of intimidating.",
      "The director general has accused Iranian authorities of intimidating."
    ]
  },
  {
    "instance_id": "pyrxsum-47",
    "summary": "A mother of six with an IQ of 70 should be sterilised for A mother of six with an IQ of 70 own safety , the Court of Protection has ruled .",
    "summary_trees": [
      "# ::snt A mother of six with an IQ of 70 should be sterilised for A mother of six with an IQ of 70 own safety , the Court of Protection has ruled .\n(r / rule-01\n      :ARG0 (g / government-organization\n            :name (n / name\n                  :op1 \"Court\"\n                  :op2 \"of\"\n                  :op3 \"Protection\"))\n      :ARG3 (r2 / recommend-01\n            :ARG1 (s / sterilize-01\n                  :ARG1 (p / person\n                        :ARG0-of (h / have-rel-role-91\n                              :ARG1 (p2 / person\n                                    :quant 6)\n                              :ARG2 (m / mother))\n                        :ARG0-of (h2 / have-03\n                              :ARG1 (q / quotient\n                                    :quant 70\n                                    :degree-of (ii / intelligent-01))))\n                  :purpose (s2 / safe-01\n                        :ARG1 p))))"
    ],
    "tree": [
      "(r / rule-01\n   :ARG3 (r2 / recommend-01\n             :ARG1 (s / sterilize-01\n                      :ARG1 (p / person\n                               :ARG0 (h / have-rel-role-91\n                                        :ARG2 (m / mother))))))",
      "(r / rule-01\n   :ARG0 (g / government-organization\n            :name (n / name\n                     :op1 \"Court\"\n                     :op2 \"of\"\n                     :op3 \"Protection\"))\n   :ARG3 (r2 / recommend-01\n             :ARG1 (s / sterilize-01\n                      :ARG1 (p / person\n                               :ARG0 (h / have-rel-role-91\n                                        :ARG2 (m / mother))))))",
      "(g / government-organization\n   :name (n / name\n            :op1 \"Court\"\n            :op2 \"of\"\n            :op3 \"Protection\"))",
      "(r2 / recommend-01\n    :ARG1 (s / sterilize-01\n             :ARG1 (p / person\n                      :ARG0 (h / have-rel-role-91\n                               :ARG2 (m / mother)))))",
      "(h / have-rel-role-91\n   :ARG1 (p2 / person\n             :quant 6))"
    ],
    "smus": [
      "Ruled that a mother should be sterilized.",
      "The Court of Protection has ruled that the mother should be sterilized.",
      "The Court of Protection.",
      "The mother should be sterilized.",
      "There are six."
    ]
  },
  {
    "instance_id": "pyrxsum-48",
    "summary": "China 's biggest privately - held conglomerate Fosun has joined a bidding war for the Portuguese hospital operator Espirito Santo Saude ( ESS ) .",
    "summary_trees": [
      "# ::snt China 's biggest privately - held conglomerate Fosun has joined a bidding war for the Portuguese hospital operator Espirito Santo Saude ( ESS ) .\n(j / join-01\n      :ARG0 (c / conglomerate\n            :name (n / name\n                  :op1 \"Fosun\")\n            :ARG1-of (h / have-degree-91\n                  :ARG2 (b / big)\n                  :ARG3 (m / most)\n                  :ARG5 (c2 / country\n                        :name (n2 / name\n                              :op1 \"China\")))\n            :ARG1-of (h2 / hold-01\n                  :ARG1-of (p / private-03)))\n      :ARG1 (w / war-01\n            :ARG2 (b2 / bid-01\n                  :ARG3 (c3 / company\n                        :name (n3 / name\n                              :op1 \"Espirito\"\n                              :op2 \"Santo\"\n                              :op3 \"Saude\")\n                        :ARG0-of (o / operate-01\n                              :ARG1 (h3 / hospital))\n                        :mod (c4 / country\n                              :name (n4 / name\n                                    :op1 \"Portugal\"))))))"
    ],
    "tree": [
      "(j / join-01\n   :ARG0 (c / conglomerate\n            :name (n / name\n                     :op1 \"Fosun\")))",
      "(j / join-01\n   :ARG0 (c / conglomerate\n            :ARG1 (h / have-degree-91\n                     :ARG2 (b / big))))",
      "(j / join-01\n   :ARG0 (c / conglomerate\n            :name (n / name\n                     :op1 \"Fosun\"))\n   :ARG1 (w / war-01\n            :ARG2 (b2 / bid-01\n                      :ARG3 (c3 / company\n                                :name (n3 / name\n                                          :op1 \"Espirito\"\n                                          :op2 \"Santo\"\n                                          :op3 \"Saude\")))))",
      "(j / join-01\n   :ARG0 (c / conglomerate\n            :ARG1 (h / have-degree-91\n                     :ARG2 (b / big)))\n   :ARG1 (w / war-01\n            :ARG2 (b2 / bid-01\n                      :ARG3 (c3 / company\n                                :name (n3 / name\n                                          :op1 \"Espirito\"\n                                          :op2 \"Santo\"\n                                          :op3 \"Saude\")))))",
      "(j / join-01\n   :ARG0 (c / conglomerate\n            :ARG1 (h2 / hold-01\n                      :ARG1 (p / private-03)))\n   :ARG1 (w / war-01\n            :ARG2 (b2 / bid-01\n                      :ARG3 (c3 / company\n                                :name (n3 / name\n                                          :op1 \"Espirito\"\n                                          :op2 \"Santo\"\n                                          :op3 \"Saude\")))))"
    ],
    "smus": [
      "The conglomerate of Fosun has joined.",
      "The big conglomerate has joined.",
      "The conglomerate Fosun has joined a war over a bid to Espirito Santo Saude.",
      "The big conglomerate has joined the war over the bid for Espirito Santo Saude.",
      "The privately held conglomerate has joined the war over the bid for Espirito Santo Saude."
    ]
  },
  {
    "instance_id": "pyrxsum-49",
    "summary": "Bosses have been urged not to indulge in invasive surveillance by reading their employees ' private messages .",
    "summary_trees": [
      "# ::snt Bosses have been urged not to indulge in invasive surveillance by reading their employees ' private messages .\n(u / urge-01\n      :ARG1 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (b / boss)))\n      :ARG2 (ii / indulge-01\n            :polarity -\n            :ARG0 p\n            :ARG1 (s / surveil-01\n                  :ARG0 p\n                  :ARG0-of (ii2 / invade-01))\n            :manner (r / read-01\n                  :ARG0 p\n                  :ARG1 (m / message-01\n                        :ARG0 (p2 / person\n                              :ARG1-of (e / employ-01\n                                    :ARG0 p))\n                        :ARG1-of (p3 / private-02)))))"
    ],
    "tree": [
      "(u / urge-01\n   :ARG2 (ii / indulge-01\n             :polarity -))",
      "(u / urge-01\n   :ARG1 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (b / boss)))\n   :ARG2 (ii / indulge-01\n             :polarity -))",
      "(ii / indulge-01\n    :ARG1 (s / surveil-01\n             :ARG0 (ii2 / invade-01))\n    :manner (r / read-01\n               :ARG0 (p / person)\n               :ARG1 (m / message-01)))",
      "(r / read-01\n   :ARG1 (m / message-01\n            :ARG1 (p3 / private-02)))",
      "(p2 / person\n    :ARG1 (e / employ-01\n             :ARG0 (p / person)))"
    ],
    "smus": [
      "Not to indulge is urged.",
      "Bosses are urged not to indulge.",
      "Invasion surveillance is indulgent, reading a message.",
      "Private message read.",
      "Employed."
    ]
  },
  {
    "instance_id": "pyrxsum-50",
    "summary": "Supermarket chain Morrisons has increased the cost of a jar of Marmite by 12.5 % , say retail industry experts .",
    "summary_trees": [
      "# ::snt Supermarket chain Morrisons has increased the cost of a jar of Marmite by 12.5 % , say retail industry experts .\n(s / say-01\n      :ARG0 (p / person\n            :ARG1-of (e / expert-01\n                  :ARG2 (ii / industry\n                        :mod (r / retail-01))))\n      :ARG1 (ii2 / increase-01\n            :ARG0 (c / chain\n                  :name (n / name\n                        :op1 \"Morrisons\")\n                  :mod (s2 / supermarket))\n            :ARG1 (c2 / cost-01\n                  :ARG1 (j / jar\n                        :consist-of (p2 / product\n                              :name (n2 / name\n                                    :op1 \"Mariane\"))))\n            :ARG2 (p3 / percentage-entity\n                  :value 12.5)))"
    ],
    "tree": [
      "(p / person\n   :ARG1 (e / expert-01\n            :ARG2 (ii / industry\n                      :mod (r / retail-01))))",
      "(ii2 / increase-01\n     :ARG2 (p3 / percentage-entity\n               :value 12.5))",
      "(c / chain\n   :name (n / name\n            :op1 \"Morrisons\"))",
      "(c / chain\n   :name (n / name\n            :op1 \"Morrisons\")\n   :mod (s2 / supermarket))"
    ],
    "smus": [
      "Retail industry experts",
      "increased by 12.5%",
      "The Morrisons chain.",
      "Morrisons supermarket chain"
    ]
  },
  {
    "instance_id": "pyrxsum-51",
    "summary": "More should be done to help deaf people into work in Wales , a charity has said .",
    "summary_trees": [
      "# ::snt More should be done to help deaf people into work in Wales , a charity has said .\n(s / say-01\n      :ARG0 (c / charity)\n      :ARG1 (r / recommend-01\n            :ARG1 (d / do-02\n                  :ARG1 (m / more)\n                  :ARG2 (h / help-01\n                        :ARG1 (w / work-01\n                              :ARG0 (p / person\n                                    :ARG0-of (d2 / deaf-02))\n                              :location (c2 / country\n                                    :name (n / name\n                                          :op1 \"Wales\")))\n                        :ARG2 p))))"
    ],
    "tree": [
      "(s / say-01\n   :ARG1 (r / recommend-01\n            :ARG1 (d / do-02\n                     :ARG1 (m / more))))",
      "(s / say-01\n   :ARG1 (r / recommend-01\n            :ARG1 (d / do-02\n                     :ARG2 (h / help-01\n                              :ARG2 (p / person\n                                       :ARG0 (d2 / deaf-02))))))",
      "(s / say-01\n   :ARG0 (c / charity)\n   :ARG1 (r / recommend-01\n            :ARG1 (d / do-02\n                     :ARG1 (m / more))))",
      "(s / say-01\n   :ARG0 (c / charity)\n   :ARG1 (r / recommend-01\n            :ARG1 (d / do-02\n                     :ARG2 (h / help-01\n                              :ARG2 (p / person\n                                       :ARG0 (d2 / deaf-02))))))",
      "(r / recommend-01\n   :ARG1 (d / do-02\n            :ARG1 (m / more)))"
    ],
    "smus": [
      "More should be done, it was said.",
      "It is said that help for the deaf should be done.",
      "Charity has said more should be done.",
      "The charity has said that something should be done to help the deaf.",
      "More should be done."
    ]
  },
  {
    "instance_id": "pyrxsum-52",
    "summary": "Five teenagers have been sentenced after admitting Five teenagers part in a \" riot \" which saw part of Newport city centre \" under siege \" .",
    "summary_trees": [
      "# ::snt Five teenagers have been sentenced after admitting Five teenagers part in a \" riot \" which saw part of Newport city centre \" under siege \" .\n(s / sentence-01\n      :ARG1 (t / teenager\n            :quant 5)\n      :time (a / after\n            :op1 (a2 / admit-01\n                  :ARG0 t\n                  :ARG1 (p / participate-01\n                        :ARG0 (t2 / teenager\n                              :quant 5)\n                        :ARG1 (r / riot-01\n                              :ARG0-of (s2 / see-01\n                                    :ARG1 (s3 / siege-01\n                                          :ARG1 (p2 / part\n                                                :part-of (c / center\n                                                      :part-of (c2 / city\n                                                            :name (n / name\n                                                                  :op1 \"Newport\")))))))))))"
    ],
    "tree": [
      "(s / sentence-01\n   :ARG1 (t / teenager\n            :quant 5))",
      "(s / sentence-01\n   :ARG1 (t / teenager\n            :quant 5)\n   :time (a / after\n            :op1 (a2 / admit-01\n                     :ARG0 t)))",
      "(p / participate-01\n   :ARG0 (t2 / teenager\n             :quant 5))",
      "(s2 / see-01\n    :ARG1 (s3 / siege-01\n              :ARG1 (p2 / part\n                        :part (c / center\n                                 :part (c2 / city\n                                           :name (n / name\n                                                    :op1 \"Newport\"))))))",
      "(s3 / siege-01\n    :ARG1 (p2 / part\n              :part (c / center\n                       :part (c2 / city\n                                 :name (n / name\n                                          :op1 \"Newport\")))))"
    ],
    "smus": [
      "Five teenagers were sentenced.",
      "Five teenagers were sentenced after admitting.",
      "Five teenagers took part.",
      "Part of the center of Newport was seen under siege.",
      "Part of the center of Newport was under siege."
    ]
  },
  {
    "instance_id": "pyrxsum-53",
    "summary": "Fetch , sit and roll over - all the kinds of normal things that you would say to your dog .",
    "summary_trees": [
      "# ::snt Fetch , sit and roll over - all the kinds of normal things that you would say to your dog .\n(a / and\n      :op1 (f / fetch-01\n            :mode imperative\n            :ARG0 (y / you)\n            :ARG2 (d / dog\n                  :poss y))\n      :op2 (s / sit-01\n            :mode imperative\n            :ARG1 y\n            :ARG2 d)\n      :op3 (r / roll-01\n            :mode imperative\n            :ARG0 y\n            :ARG2 (o / over))\n      :domain (t / thing\n            :ARG1-of (n / normal-02)\n            :mod (k / kind\n                  :mod (a2 / all))\n            :ARG1-of (s2 / say-01\n                  :ARG0 y\n                  :ARG2 d)))"
    ],
    "tree": [
      "(a / and\n   :op1 (f / fetch-01\n           :mode imperative)\n   :op2 (s / sit-01\n           :mode imperative)\n   :op3 (r / roll-01\n           :ARG2 (o / over))\n   :domain (t / thing\n              :ARG1 (n / normal-02)))",
      "(a / and\n   :op1 (f / fetch-01\n           :mode imperative)\n   :op2 (s / sit-01\n           :ARG1 (y / you))\n   :op3 (r / roll-01\n           :ARG2 (o / over))\n   :domain (t / thing\n              :ARG1 (n / normal-02)))",
      "(a / and\n   :op1 (f / fetch-01\n           :ARG2 (d / dog\n                    :poss (y / you)))\n   :op2 (s / sit-01\n           :ARG1 y)\n   :op3 (r / roll-01\n           :ARG2 (o / over))\n   :domain (t / thing\n              :ARG1 (s2 / say-01\n                        :ARG2 d)))",
      "(a / and\n   :op1 (f / fetch-01\n           :ARG2 (d / dog\n                    :poss (y / you)))\n   :op2 (s / sit-01\n           :ARG2 d)\n   :op3 (r / roll-01\n           :ARG0 y)\n   :domain (t / thing\n              :ARG1 (s2 / say-01\n                        :ARG2 d)))"
    ],
    "smus": [
      "Normal things are fetch, sit, roll over.",
      "Normal things are fetch, sit and roll over.",
      "Things to say to your dog are to fetch, sit and roll over.",
      "Things you would say to your dog are to fetch, sit and roll."
    ]
  },
  {
    "instance_id": "pyrxsum-54",
    "summary": "A grand jury has decided not to indict anyone in the case of Sandra Bland , who died in a Texas jail earlier this year .",
    "summary_trees": [
      "# ::snt A grand jury has decided not to indict anyone in the case of Sandra Bland , who died in a Texas jail earlier this year .\n(d / decide-01\n      :ARG0 (j / jury\n            :mod (g / grand))\n      :ARG1 (ii / indict-01\n            :polarity -\n            :ARG0 j\n            :ARG1 (a / anyone)\n            :topic (c / case-04\n                  :ARG1 (p / person\n                        :name (n / name\n                              :op1 \"Sandra\"\n                              :op2 \"Bland\")\n                        :ARG1-of (d2 / die-01\n                              :location (j2 / jail\n                                    :location (s / state\n                                          :name (n2 / name\n                                                :op1 \"Texas\")))\n                              :time (b / before)\n                              :time (y / year\n                                    :mod (t / this)))))))"
    ],
    "tree": [
      "(d / decide-01\n   :ARG1 (ii / indict-01\n             :polarity -))",
      "(d / decide-01\n   :ARG0 (j / jury\n            :mod (g / grand))\n   :ARG1 (ii / indict-01\n             :polarity -))",
      "(d / decide-01\n   :ARG0 (j / jury\n            :mod (g / grand))\n   :ARG1 (ii / indict-01\n             :ARG1 (a / anyone)))",
      "(c / case-04\n   :ARG1 (p / person\n            :ARG1 (d2 / die-01\n                      :location (j2 / jail\n                                    :location (s / state\n                                                 :name (n2 / name\n                                                           :op1 \"Texas\"))))))",
      "(p / person\n   :name (n / name\n            :op1 \"Sandra\"\n            :op2 \"Bland\")\n   :ARG1 (d2 / die-01\n             :time (y / year\n                      :mod (t / this))))"
    ],
    "smus": [
      "It was decided not to indict.",
      "The grand jury has decided not to indict.",
      "The grand jury has decided not to indict anyone.",
      "In the case of the person who died in jail in Texas.",
      "Sandra Land died this year."
    ]
  },
  {
    "instance_id": "pyrxsum-55",
    "summary": "A man was limp \" like a teddy bear \" after A man was restrained by bouncers on the ground outside an Aberdeen bar , a murder trial has heard .",
    "summary_trees": [
      "# ::snt A man was limp \" like a teddy bear \" after A man was restrained by bouncers on the ground outside an Aberdeen bar , a murder trial has heard .\n(h / hear-01\n      :ARG0 (t / try-02\n            :ARG1 (m / murder-01))\n      :ARG1 (l / limp-01\n            :ARG1 (m2 / man)\n            :ARG1-of (r / resemble-01\n                  :ARG2 (b / bear\n                        :mod (t2 / teddy)))\n            :time (a / after\n                  :op1 (r2 / restrain-01\n                        :ARG0 (p / person\n                              :ARG0-of (h2 / have-org-role-91\n                                    :ARG2 (b2 / bouncer)))\n                        :ARG1 (m3 / man)\n                        :location (g / ground\n                              :location (o / outside\n                                    :op1 (b3 / bar\n                                          :location (c / city\n                                                :name (n / name\n                                                      :op1 \"Aberdeen\")))))))))"
    ],
    "tree": [
      "(l / limp-01\n   :ARG1 (m2 / man)\n   :time (a / after\n            :op1 (r2 / restrain-01\n                     :ARG0 (p / person\n                              :ARG0 (h2 / have-org-role-91\n                                        :ARG2 (b2 / bouncer))))))",
      "(l / limp-01\n   :ARG1 (m2 / man)\n   :time (a / after\n            :op1 (r2 / restrain-01\n                     :ARG1 (m3 / man))))",
      "(l / limp-01\n   :ARG1 (m2 / man)\n   :time (a / after\n            :op1 (r2 / restrain-01\n                     :location (g / ground\n                                  :location (o / outside\n                                               :op1 (b3 / bar\n                                                        :location (c / city\n                                                                     :name (n / name\n                                                                              :op1 \"Aberdeen\"))))))))",
      "(a / after\n   :op1 (r2 / restrain-01\n            :location (g / ground\n                         :location (o / outside\n                                      :op1 (b3 / bar\n                                               :location (c / city\n                                                            :name (n / name\n                                                                     :op1 \"Aberdeen\")))))))",
      "(r2 / restrain-01\n    :ARG1 (m3 / man)\n    :location (g / ground\n                 :location (o / outside\n                              :op1 (b3 / bar\n                                       :location (c / city\n                                                    :name (n / name\n                                                             :op1 \"Aberdeen\"))))))"
    ],
    "smus": [
      "The man was limping after being restrained by bouncers.",
      "The man was limping after being restrained.",
      "The man was limping after being restrained on the ground outside an Aberdeen bar.",
      "After being restrained on the ground outside an Aberdeen bar.",
      "The man was restrained on the ground outside an Aberdeen bar."
    ]
  },
  {
    "instance_id": "pyrxsum-56",
    "summary": "A bagpipe - playing busker has been convicted of duping people in Liverpool into thinking A bagpipe - playing busker was collecting for a Hillsborough charity .",
    "summary_trees": [
      "# ::snt A bagpipe - playing busker has been convicted of duping people in Liverpool into thinking A bagpipe - playing busker was collecting for a Hillsborough charity .\n(c / convict-01\n      :ARG1 (b / busker\n            :ARG0-of (p / play-11\n                  :ARG2 (b2 / bagpipe)))\n      :ARG2 (d / dupe-01\n            :ARG0 b\n            :ARG1 (p2 / person\n                  :location (c2 / city\n                        :name (n / name\n                              :op1 \"Liverpool\")))\n            :ARG2 (t / think-01\n                  :ARG0 p2\n                  :ARG1 (c3 / collect-01\n                        :ARG0 b\n                        :ARG3 (c4 / charity\n                              :mod (e / event\n                                    :name (n2 / name\n                                          :op1 \"Hillsborough\")))))))"
    ],
    "tree": [
      "(c / convict-01\n   :ARG1 (b / busker\n            :ARG0 (p / play-11\n                     :ARG2 (b2 / bagpipe))))",
      "(c / convict-01\n   :ARG2 (d / dupe-01\n            :ARG2 (t / think-01\n                     :ARG0 (p2 / person))))",
      "(c / convict-01\n   :ARG1 (b / busker\n            :ARG0 (p / play-11\n                     :ARG2 (b2 / bagpipe)))\n   :ARG2 (d / dupe-01\n            :ARG0 b))",
      "(c / convict-01\n   :ARG1 (b / busker\n            :ARG0 (p / play-11\n                     :ARG2 (b2 / bagpipe)))\n   :ARG2 (d / dupe-01\n            :ARG2 (t / think-01\n                     :ARG0 (p2 / person))))",
      "(d / dupe-01\n   :ARG1 (p2 / person\n             :location (c2 / city\n                           :name (n / name\n                                    :op1 \"Liverpool\")))\n   :ARG2 (t / think-01\n            :ARG1 (c3 / collect-01\n                      :ARG0 (b / busker))))"
    ],
    "smus": [
      "A busker playing the bagpipe was convicted.",
      "Convicted for duping people into thinking.",
      "A busker playing the bagpipe was convicted of duping.",
      "A busker playing the bagpipe was convicted of duping people into thinking.",
      "Duping Liverpool people into thinking the busker was collecting."
    ]
  },
  {
    "instance_id": "pyrxsum-57",
    "summary": "New Morocco coach Herve Renard begins New Morocco coach Herve Renard quest for a record - equalling third Africa Cup of Nations as qualifying for the 2017 tournament resumes this week .",
    "summary_trees": [
      "# ::snt New Morocco coach Herve Renard begins New Morocco coach Herve Renard quest for a record - equalling third Africa Cup of Nations as qualifying for the 2017 tournament resumes this week .\n(b / begin-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Herve\"\n                  :op2 \"Renard\")\n            :ARG0-of (c / coach-01\n                  :ARG1 (t / team\n                        :name (n2 / name\n                              :op1 \"New\"\n                              :op2 \"Morocco\"))))\n      :ARG1 (q / quest-01\n            :ARG0 p\n            :ARG1 (e / equal-01\n                  :ARG1 (r / record)\n                  :ARG2 (g / game\n                        :name (n3 / name\n                              :op1 \"Africa\"\n                              :op2 \"Cup\"\n                              :op3 \"of\"\n                              :op4 \"Nations\")\n                        :ord (o / ordinal-entity\n                              :value 3))))\n      :time (r2 / resume-01\n            :ARG1 (q2 / qualify-02\n                  :ARG2 g\n                  :time (d / date-entity\n                        :year 2017))\n            :time (w / week\n                  :mod (t2 / this))))"
    ],
    "tree": [
      "(b / begin-01\n   :ARG0 (p / person\n            :ARG0 (c / coach-01\n                     :ARG1 (t / team\n                              :name (n2 / name\n                                        :op1 \"New\"\n                                        :op2 \"Morocco\")))))",
      "(b / begin-01\n   :time (r2 / resume-01\n             :ARG1 (q2 / qualify-02\n                       :ARG2 (g / game\n                                :name (n3 / name\n                                          :op1 \"Africa\"\n                                          :op2 \"Cup\"\n                                          :op3 \"of\"\n                                          :op4 \"Nations\")))))",
      "(r2 / resume-01\n    :ARG1 (q2 / qualify-02\n              :ARG2 (g / game :name (n3 / name :op1 \"Africa\" :op2 \"Cup\" :op3 \"of\" :op4 \"Nations\")))))",
      "(r2 / resume-01\n    :ARG1 (q2 / qualify-02\n              :ARG2 (g / game :name (n3 / name :op1 \"Africa\" :op2 \"Cup\" :op3 \"of\" :op4 \"Nations\"))))\n    :time (w / week\n             :mod (t2 / this)))",
      "(r2 / resume-01\n    :ARG1 (q2 / qualify-02\n              :time (d / date-entity\n                       :year 2017))\n    :time (w / week\n             :mod (t2 / this)))"
    ],
    "smus": [
      "New Morocco coach begins.",
      "Qualification for the Africa Cup of Nations resumes.",
      "Qualifying for the Africa Cup of Nations resumes.",
      "Qualifying for the Africa Cup of Nations resumes this week.",
      "Qualifying for 2017 resumes this week."
    ]
  },
  {
    "instance_id": "pyrxsum-58",
    "summary": "Soul singer Ray BLK has topped the BBC 's Sound Of 2017 list , which aims to predict the most exciting new music for the year ahead .",
    "summary_trees": [
      "# ::snt Soul singer Ray BLK has topped the BBC 's Sound Of 2017 list , which aims to predict the most exciting new music for the year ahead .\n(t / top-01\n      :ARG1 (l / list\n            :name (n / name\n                  :op1 \"Sound\"\n                  :op2 \"Of\"\n                  :op3 \"2017\")\n            :poss (p / publication\n                  :name (n2 / name\n                        :op1 \"BBC\"))\n            :ARG0-of (a / aim-01\n                  :ARG1 (p2 / predict-01\n                        :ARG1 (m / music\n                              :ARG1-of (n3 / new-01)\n                              :ARG1-of (h / have-degree-91\n                                    :ARG2 (e / excite-01\n                                          :ARG0 m)\n                                    :ARG3 (m2 / most))\n                              :time (y / year\n                                    :mod (a2 / ahead))))))\n      :ARG2 (p3 / person\n            :name (n4 / name\n                  :op1 \"Ray\"\n                  :op2 \"BlK\")\n            :ARG0-of (s / sing-01\n                  :ARG1 (s2 / soul))))"
    ],
    "tree": [
      "(l / list\n   :ARG0 (a / aim-01\n            :ARG1 (p2 / predict-01\n                      :ARG1 (m / music\n                               :ARG1 (n3 / new-01)))))",
      "(l / list\n   :name (n / name\n            :op1 \"Sound\"\n            :op2 \"Of\"\n            :op3 \"2017\")\n   :ARG0 (a / aim-01\n            :ARG1 (p2 / predict-01\n                      :ARG1 (m / music\n                               :ARG1 (n3 / new-01)))))",
      "(l / list\n   :poss (p / publication\n            :name (n2 / name\n                      :op1 \"BBC\"))\n   :ARG0 (a / aim-01\n            :ARG1 (p2 / predict-01\n                      :ARG1 (m / music\n                               :ARG1 (n3 / new-01)))))",
      "(l / list\n   :name (n / name\n            :op1 \"Sound\"\n            :op2 \"Of\"\n            :op3 \"2017\")\n   :poss (p / publication\n            :name (n2 / name\n                      :op1 \"BBC\"))\n   :ARG0 (a / aim-01\n            :ARG1 (p2 / predict-01\n                      :ARG1 (m / music\n                               :ARG1 (n3 / new-01)))))",
      "(l / list\n   :name (n / name\n            :op1 \"Sound\"\n            :op2 \"Of\"\n            :op3 \"2017\")\n   :poss (p / publication\n            :name (n2 / name\n                      :op1 \"BBC\"))\n   :ARG0 (a / aim-01\n            :ARG1 (p2 / predict-01\n                      :ARG1 (m / music\n                               :ARG1 (h / have-degree-91\n                                        :ARG2 (e / excite-01\n                                                 :ARG0 m))))))"
    ],
    "smus": [
      "a list that aims to predict new music",
      "The Sound of 2017 list aims to predict new music.",
      "The BBC list aims to predict new music",
      "The BBC's Sound of 2017 list aims to predict new music.",
      "The BBC's Sound of 2017 list aims to predict what music is going to be exciting."
    ]
  },
  {
    "instance_id": "pyrxsum-59",
    "summary": "Hundreds of protesters in Kabul have accused Iran of stopping fuel tankers from crossing the border into Afghanistan .",
    "summary_trees": [
      "# ::snt Hundreds of protesters in Kabul have accused Iran of stopping fuel tankers from crossing the border into Afghanistan .\n(a / accuse-01\n      :ARG0 (p / person\n            :ARG0-of (p2 / protest-01)\n            :quant (m / multiple\n                  :op1 100)\n            :location (c / city\n                  :name (n / name\n                        :op1 \"Kabul\")))\n      :ARG1 (c2 / country\n            :name (n2 / name\n                  :op1 \"Iran\"))\n      :ARG2 (s / stop-03\n            :ARG0 c2\n            :ARG1 (t / tanker\n                  :mod (f / fuel))\n            :ARG2 (c3 / cross-02\n                  :ARG0 t\n                  :ARG1 (b / border-01\n                        :ARG2 (c4 / country\n                              :name (n3 / name\n                                    :op1 \"Afghanistan\"))))))"
    ],
    "tree": [
      "(a / accuse-01\n   :ARG1 (c2 / country\n             :name (n2 / name\n                       :op1 \"Iran\")))",
      "(a / accuse-01\n   :ARG0 (p / person\n            :ARG0 (p2 / protest-01))\n   :ARG1 (c2 / country\n             :name (n2 / name\n                       :op1 \"Iran\")))",
      "(a / accuse-01\n   :ARG0 (p / person\n            :quant (m / multiple\n                      :op1 100))\n   :ARG1 (c2 / country\n             :name (n2 / name\n                       :op1 \"Iran\")))",
      "(a / accuse-01\n   :ARG1 (c2 / country\n             :name (n2 / name\n                       :op1 \"Iran\"))\n   :ARG2 (s / stop-03\n            :ARG1 (t / tanker\n                     :mod (f / fuel))))",
      "(a / accuse-01\n   :ARG0 (p / person\n            :ARG0 (p2 / protest-01))\n   :ARG1 (c2 / country\n             :name (n2 / name\n                       :op1 \"Iran\"))\n   :ARG2 (s / stop-03\n            :ARG1 (t / tanker\n                     :mod (f / fuel))))"
    ],
    "smus": [
      "Iran is accused.",
      "The protesters have accused Iran.",
      "Hundreds have accused Iran.",
      "Iran is accused of stopping fuel tankers.",
      "Protestors have accused Iran of stopping fuel tanks."
    ]
  },
  {
    "instance_id": "pyrxsum-60",
    "summary": "Some police forces are putting the public at risk by rationing Some police forces response as Some police forces struggle with cutbacks , the police standards watchdog has warned .",
    "summary_trees": [
      "# ::snt Some police forces are putting the public at risk by rationing Some police forces response as Some police forces struggle with cutbacks , the police standards watchdog has warned .\n(w / warn-01\n      :ARG0 (w2 / watchdog\n            :mod (s / standard\n                  :mod (p / police)))\n      :ARG1 (e / endanger-01\n            :ARG0 (f / force\n                  :quant (s2 / some)\n                  :mod p)\n            :ARG1 (p2 / public)\n            :manner (r / ration-01\n                  :ARG0 f\n                  :ARG1 (t / thing\n                        :ARG2-of (r2 / respond-01\n                              :ARG0 f))\n                  :time (s3 / struggle-01\n                        :ARG0 f\n                        :ARG1 (c / cut-back-05\n                              :ARG0 f)))))"
    ],
    "tree": [
      "(w / warn-01\n   :ARG0 (w2 / watchdog\n             :mod (s / standard\n                     :mod (p / police))))",
      "(w / warn-01\n   :ARG0 (w2 / watchdog\n             :mod (s / standard\n                     :mod (p / police)))\n   :ARG1 (e / endanger-01\n            :manner (r / ration-01\n                       :ARG0 (f / force))))",
      "(w / warn-01\n   :ARG0 (w2 / watchdog\n             :mod (s / standard\n                     :mod (p / police)))\n   :ARG1 (e / endanger-01\n            :manner (r / ration-01\n                       :time (s3 / struggle-01\n                                 :ARG0 (f / force)))))",
      "(w / warn-01\n   :ARG0 (w2 / watchdog\n             :mod (s / standard\n                     :mod (p / police)))\n   :ARG1 (e / endanger-01\n            :manner (r / ration-01\n                       :time (s3 / struggle-01\n                                 :ARG1 (c / cut-back-05\n                                          :ARG0 (f / force))))))",
      "(e / endanger-01\n   :ARG0 (f / force\n            :quant (s2 / some))\n   :ARG1 (p2 / public))"
    ],
    "smus": [
      "A watchdog with police standards was warned.",
      "A police standards watchdog has warned of dangers from forces rationing.",
      "A police standards watchdog has warned of dangers of rationing as forces struggle.",
      "A police standards watchdog has warned of dangers of rationing as forces struggle to cut back.",
      "Some forces are putting the public in danger."
    ]
  },
  {
    "instance_id": "pyrxsum-61",
    "summary": "Pace bowler Jake Ball has made a \" lively \" return following a winter playing for England Lions , says Nottinghamshire captain Chris Read .",
    "summary_trees": [
      "# ::snt Pace bowler Jake Ball has made a \" lively \" return following a winter playing for England Lions , says Nottinghamshire captain Chris Read .\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Chris\"\n                  :op2 \"Read\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (t / team\n                        :name (n2 / name\n                              :op1 \"Nottinghamshire\"))\n                  :ARG2 (c / captain)))\n      :ARG1 (r / return-01\n            :ARG1 (p2 / person\n                  :name (n3 / name\n                        :op1 \"Jake\"\n                        :op2 \"Ball\")\n                  :ARG0-of (b / bowl-01\n                        :manner (p3 / pace-01)))\n            :manner (l / lively)\n            :ARG1-of (f / follow-01\n                  :ARG2 (p4 / play-01\n                        :ARG0 p2\n                        :ARG3 (t2 / team\n                              :name (n4 / name\n                                    :op1 \"England\"\n                                    :op2 \"Lions\"))\n                        :time (d / date-entity\n                              :season (w / winter))))))"
    ],
    "tree": [
      "(s / say-01\n   :ARG1 (r / return-01\n            :ARG1 (p2 / person\n                      :name (n3 / name\n                                :op1 \"Jake\"\n                                :op2 \"Ball\"))))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Chris\"\n                     :op2 \"Read\"))\n   :ARG1 (r / return-01\n            :manner (l / lively)))",
      "(p2 / person\n    :name (n3 / name\n              :op1 \"Jake\"\n              :op2 \"Ball\"))",
      "(p2 / person\n    :name (n3 / name\n              :op1 \"Jake\"\n              :op2 \"Ball\")\n    :ARG0 (b / bowl-01\n             :manner (p3 / pace-01)))",
      "(p4 / play-01\n    :ARG3 (t2 / team\n              :name (n4 / name\n                        :op1 \"England\"\n                        :op2 \"Lions\"))\n    :time (d / date-entity\n             :season (w / winter)))"
    ],
    "smus": [
      "Jake Ball returns.",
      "\"A lively return,\" says Chris Read.",
      "Jake Ball",
      "Jake Ball, pace bowler",
      "England Lions play in winter."
    ]
  },
  {
    "instance_id": "pyrxsum-62",
    "summary": "A serial robber who threatened an 18 - year - old shop worker with a knife was caught after A serial robber who threatened an 18 - year - old shop worker with a knife streak of grey hair was recognised in CCTV footage .",
    "summary_trees": [
      "# ::snt A serial robber who threatened an 18 - year - old shop worker with a knife was caught after A serial robber who threatened an 18 - year - old shop worker with a knife streak of grey hair was recognised in CCTV footage .\n(c / catch-01\n      :ARG1 (p / person\n            :ARG0-of (r / rob-01\n                  :mod (s / serial))\n            :ARG0-of (t / threaten-01\n                  :ARG1 (p2 / person\n                        :ARG0-of (w / work-01\n                              :ARG2 (s2 / shop))\n                        :age (t2 / temporal-quantity\n                              :quant 18\n                              :unit (y / year)))\n                  :ARG2 (k / knife)))\n      :time (a / after\n            :op1 (r2 / recognize-02\n                  :ARG1 p\n                  :location (f / footage\n                        :mod (t3 / television\n                              :mod (c2 / circuit\n                                    :ARG1-of (c3 / close-01))))))\n      :instrument (s3 / streak-01\n            :ARG1 (h / hair\n                  :ARG1-of (g / gray-02))\n            :ARG2 (k2 / knife)))"
    ],
    "tree": [
      "(c / catch-01\n   :ARG1 (p / person\n            :ARG0 (t / threaten-01\n                     :ARG1 (p2 / person\n                               :ARG0 (w / work-01\n                                        :ARG2 (s2 / shop))))))",
      "(t / threaten-01\n   :ARG1 (p2 / person\n             :ARG0 (w / work-01\n                      :ARG2 (s2 / shop))))",
      "(t / threaten-01\n   :ARG1 (p2 / person\n             :age (t2 / temporal-quantity\n                      :quant 18)))",
      "(t / threaten-01\n   :ARG1 (p2 / person\n             :age (t2 / temporal-quantity\n                      :unit (y / year))))",
      "(p2 / person\n    :ARG0 (w / work-01\n             :ARG2 (s2 / shop))\n    :age (t2 / temporal-quantity\n             :quant 18))"
    ],
    "smus": [
      "The person who threatened the shop worker was caught.",
      "The shop worker threatened.",
      "The 18-year-old was threatened.",
      "The year old was threatened.",
      "A shop worker was 18 years old."
    ]
  },
  {
    "instance_id": "pyrxsum-63",
    "summary": "A British man has survived a fall from the 15th floor of a building in New Zealand , local media report .",
    "summary_trees": [
      "# ::snt A British man has survived a fall from the 15th floor of a building in New Zealand , local media report .\n(r / report-01\n      :ARG0 (m / media\n            :ARG1-of (l / local-02))\n      :ARG1 (s / survive-01\n            :ARG0 (m2 / man\n                  :mod (c / country\n                        :name (n / name\n                              :op1 \"Britain\")))\n            :ARG1 (f / fall-01\n                  :ARG1 m2\n                  :ARG3 (f2 / floor\n                        :ord (o / ordinal-entity\n                              :value 15)\n                        :part-of (b / building\n                              :location (c2 / country\n                                    :name (n2 / name\n                                          :op1 \"New\"\n                                          :op2 \"Zealand\")))))))"
    ],
    "tree": [
      "(r / report-01\n   :ARG1 (s / survive-01\n            :ARG1 (f / fall-01\n                     :ARG1 (m2 / man))))",
      "(r / report-01\n   :ARG0 (m / media\n            :ARG1 (l / local-02))\n   :ARG1 (s / survive-01\n            :ARG0 (m2 / man\n                      :mod (c / country\n                              :name (n / name\n                                       :op1 \"Britain\")))))",
      "(r / report-01\n   :ARG0 (m / media\n            :ARG1 (l / local-02))\n   :ARG1 (s / survive-01\n            :ARG1 (f / fall-01\n                     :ARG1 (m2 / man))))",
      "(s / survive-01\n   :ARG1 (f / fall-01\n            :ARG1 (m2 / man)))",
      "(s / survive-01\n   :ARG0 (m2 / man\n             :mod (c / country\n                     :name (n / name\n                              :op1 \"Britain\")))\n   :ARG1 (f / fall-01\n            :ARG3 (f2 / floor\n                      :ord (o / ordinal-entity\n                              :value 15))))"
    ],
    "smus": [
      "Reports of a man having survived the fall.",
      "Local media reports that a British man has survived.",
      "Local media report that the man survived the fall.",
      "The man survived the fall.",
      "A British man has survived the fall from the 15th floor."
    ]
  },
  {
    "instance_id": "pyrxsum-64",
    "summary": "The Royal Navy has released an image of planned improvements to a jetty at Portsmouth Naval Base .",
    "summary_trees": [
      "# ::snt The Royal Navy has released an image of planned improvements to a jetty at Portsmouth Naval Base .\n(r / release-01\n      :ARG0 (m / military\n            :name (n / name\n                  :op1 \"Royal\"\n                  :op2 \"Navy\"))\n      :ARG1 (ii / image\n            :topic (ii2 / improve-01\n                  :ARG1 (j / jetty\n                        :location (f / facility\n                              :name (n2 / name\n                                    :op1 \"Portsmouth\"\n                                    :op2 \"Navy\"\n                                    :op3 \"Base\")))\n                  :ARG1-of (p / plan-01))))"
    ],
    "tree": [
      "(r / release-01\n   :ARG0 (m / military\n            :name (n / name\n                     :op1 \"Royal\"\n                     :op2 \"Navy\")))",
      "(r / release-01\n   :ARG1 (ii / image\n             :topic (ii2 / improve-01\n                         :ARG1 (j / jetty\n                                  :location (f / facility\n                                               :name (n2 / name\n                                                         :op1 \"Portsmouth\"\n                                                         :op2 \"Navy\"\n                                                         :op3 \"Base\"))))))",
      "(r / release-01\n   :ARG1 (ii / image\n             :topic (ii2 / improve-01\n                         :ARG1 (p / plan-01))))",
      "(r / release-01\n   :ARG0 (m / military\n            :name (n / name\n                     :op1 \"Royal\"\n                     :op2 \"Navy\"))\n   :ARG1 (ii / image\n             :topic (ii2 / improve-01\n                         :ARG1 (j / jetty\n                                  :location (f / facility\n                                               :name (n2 / name\n                                                         :op1 \"Portsmouth\"\n                                                         :op2 \"Navy\"\n                                                         :op3 \"Base\"))))))",
      "(r / release-01\n   :ARG0 (m / military\n            :name (n / name\n                     :op1 \"Royal\"\n                     :op2 \"Navy\"))\n   :ARG1 (ii / image\n             :topic (ii2 / improve-01\n                         :ARG1 (p / plan-01))))"
    ],
    "smus": [
      "The Royal Navy has released.",
      "Image released of improvements to the jetty at Portsmouth Navy Base.",
      "The image was released of planned improvements.",
      "The Royal Navy has released an image of improvements to the jetty at Portsmouth Naval Base.",
      "The Royal Navy has released an image of planned improvements."
    ]
  },
  {
    "instance_id": "pyrxsum-65",
    "summary": "China has said Japan is endangering peace in the region after Japan passed controversial laws expanding the role of Japan military abroad .",
    "summary_trees": [
      "# ::snt China has said Japan is endangering peace in the region after Japan passed controversial laws expanding the role of Japan military abroad .\n(s / say-01\n      :ARG0 (c / country\n            :name (n / name\n                  :op1 \"China\"))\n      :ARG1 (e / endanger-01\n            :ARG0 (c2 / country\n                  :name (n2 / name\n                        :op1 \"Japan\"))\n            :ARG1 (p / peace\n                  :location (r / region)))\n      :time (a / after\n            :op1 (p2 / pass-01\n                  :ARG0 c2\n                  :ARG2 (l / law\n                        :mod (c3 / controversy)\n                        :ARG0-of (e2 / expand-01\n                              :ARG1 (r2 / role\n                                    :poss (m / military\n                                          :mod c2)\n                                    :location (a2 / abroad)))))))"
    ],
    "tree": [
      "(s / say-01\n   :ARG0 (c / country\n            :name (n / name\n                     :op1 \"China\"))\n   :time (a / after\n            :op1 (p2 / pass-01\n                     :ARG0 (c2 / country :name (n2 / name :op1 \"Japan\")))))",
      "(s / say-01\n   :ARG0 (c / country\n            :name (n / name\n                     :op1 \"China\"))\n   :time (a / after\n            :op1 (p2 / pass-01\n                     :ARG2 (l / law\n                              :mod (c3 / controversy)))))",
      "(s / say-01\n   :ARG0 (c / country\n            :name (n / name\n                     :op1 \"China\"))\n   :time (a / after\n            :op1 (p2 / pass-01\n                     :ARG2 (l / law\n                              :ARG0 (e2 / expand-01\n                                        :ARG1 (r2 / role\n                                                  :poss (m / military\n                                                           :mod (c2 / country :name (n2 / name :op1 \"Japan\")))))))))",
      "(s / say-01\n   :ARG0 (c / country\n            :name (n / name\n                     :op1 \"China\"))\n   :time (a / after\n            :op1 (p2 / pass-01\n                     :ARG2 (l / law\n                              :ARG0 (e2 / expand-01\n                                        :ARG1 (r2 / role\n                                                  :location (a2 / abroad)))))))",
      "(s / say-01\n   :ARG0 (c / country\n            :name (n / name\n                     :op1 \"China\"))\n   :ARG1 (e / endanger-01\n            :ARG1 (p / peace\n                     :location (r / region)))\n   :time (a / after\n            :op1 (p2 / pass-01\n                     :ARG0 (c2 / country :name (n2 / name :op1 \"Japan\")))))"
    ],
    "smus": [
      "China said after Japan passed.",
      "China said after controversial laws passed.",
      "China said after laws expanding the role of the Japanese military passed.",
      "China said after laws expanding the role abroad passed.",
      "After Japan passed, China has said that the peace in the region is in danger."
    ]
  },
  {
    "instance_id": "pyrxsum-66",
    "summary": "Celtic restored Celtic 10 - point lead at the top of the table after overcoming Inverness Caledonian Thistle .",
    "summary_trees": [
      "# ::snt Celtic restored Celtic 10 - point lead at the top of the table after overcoming Inverness Caledonian Thistle .\n(r / restore-01\n      :ARG0 (t / team\n            :name (n / name\n                  :op1 \"Celtic\"))\n      :ARG1 (l / lead-01\n            :ARG0 t\n            :ARG2 (p / point\n                  :quant 10)\n            :location (t2 / top\n                  :part-of (t3 / table)))\n      :time (a / after\n            :op1 (o / overcome-01\n                  :ARG0 t\n                  :ARG1 (t4 / team\n                        :name (n2 / name\n                              :op1 \"Inverness\"\n                              :op2 \"Cedonian\"\n                              :op3 \"Thistle\")))))"
    ],
    "tree": [
      "(r / restore-01\n   :ARG1 (l / lead-01\n            :ARG2 (p / point\n                     :quant 10)))",
      "(r / restore-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Celtic\"))\n   :ARG1 (l / lead-01\n            :ARG2 (p / point\n                     :quant 10)))",
      "(r / restore-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Celtic\"))\n   :ARG1 (l / lead-01\n            :ARG2 (p / point\n                     :quant 10))\n   :time (a / after\n            :op1 (o / overcome-01\n                    :ARG0 t)))",
      "(r / restore-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Celtic\"))\n   :ARG1 (l / lead-01\n            :ARG2 (p / point\n                     :quant 10))\n   :time (a / after\n            :op1 (o / overcome-01\n                    :ARG1 (t4 / team\n                              :name (n2 / name\n                                        :op1 \"Inverness\"\n                                        :op2 \"Cedonian\"\n                                        :op3 \"Thistle\")))))",
      "(r / restore-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Celtic\"))\n   :ARG1 (l / lead-01\n            :location (t2 / top\n                          :part (t3 / table)))\n   :time (a / after\n            :op1 (o / overcome-01\n                    :ARG0 t)))"
    ],
    "smus": [
      "The lead was restored to 10 points.",
      "Celtic restored a 10 point lead.",
      "After overcoming, Celtic restored the 10 point lead.",
      "After defeating Inverness Celtic Thistle, Celtic restored a 10 point lead.",
      "After overcoming, Celtic restored the lead at the top of the table."
    ]
  },
  {
    "instance_id": "pyrxsum-67",
    "summary": "England captain Sean O'Loughlin says England captain Sean O'Loughlin would have preferred an Englishman in charge of the national team , but is looking forward to working with Australian Wayne Bennett .",
    "summary_trees": [
      "# ::snt England captain Sean O'Loughlin says England captain Sean O'Loughlin would have preferred an Englishman in charge of the national team , but is looking forward to working with Australian Wayne Bennett .\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Sean\"\n                  :op2 \"O'Loughlin\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (t / team\n                        :name (n2 / name\n                              :op1 \"England\"))\n                  :ARG2 (c / captain)))\n      :ARG1 (c2 / contrast-01\n            :ARG1 (p2 / prefer-01\n                  :ARG0 (p3 / person\n                        :name (n3 / name\n                              :op1 \"Sean\"\n                              :op2 \"O'Loughlin\")\n                        :ARG0-of (h2 / have-org-role-91\n                              :ARG1 t\n                              :ARG2 (c3 / captain)))\n                  :ARG1 (c4 / charge-08\n                        :ARG1 (m / man\n                              :mod (c5 / country)\n                              :ARG2 (t2 / team\n                                    :mod (n4 / nation))))\n                  :ARG2 (l / look-forward-03\n                        :ARG0 p3\n                        :ARG1 (w / work-01\n                              :ARG3 (p4 / person\n                                    :name (n5 / name\n                                          :op1 \"Wayne\"\n                                          :op2 \"Bennett\")\n                                    :mod c5\n                                    :name (n6 / name\n                                          :op1 \"Australia\")))))))"
    ],
    "tree": [
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sean\"\n                     :op2 \"O'Loughlin\"))\n   :ARG1 (c2 / contrast-01\n             :ARG1 (p2 / prefer-01\n                       :ARG0 (p3 / person\n                                 :name (n3 / name\n                                           :op1 \"Sean\"\n                                           :op2 \"O'Loughlin\")))))",
      "(p / person\n   :name (n / name\n            :op1 \"Sean\"\n            :op2 \"O'Loughlin\")\n   :ARG0 (h / have-org-role-91\n            :ARG1 (t / team\n                     :name (n2 / name\n                               :op1 \"England\"))))",
      "(p / person\n   :name (n / name\n            :op1 \"Sean\"\n            :op2 \"O'Loughlin\")\n   :ARG0 (h / have-org-role-91\n            :ARG2 (c / captain)))"
    ],
    "smus": [
      "Sean O'Loughlin says Sean O'Loughlin would have preferred.",
      "England's Sean O'Loughlin",
      "Captain Sean O'Loughlin"
    ]
  },
  {
    "instance_id": "pyrxsum-68",
    "summary": "Promotion - chasing Stevenage were held to a by Cambridge in League Two .",
    "summary_trees": [
      "# ::snt Promotion - chasing Stevenage were held to a by Cambridge in League Two .\n(h / hold-04\n      :ARG0 (u / university\n            :name (n / name\n                  :op1 \"Cambridge\"))\n      :ARG1 (t / team\n            :name (n2 / name\n                  :op1 \"Stevenage\")\n            :ARG0-of (c / chase-01\n                  :ARG1 (p / promote-01\n                        :ARG1 t)))\n      :location (l / league\n            :name (n3 / name\n                  :op1 \"League\"\n                  :op2 \"Two\")))"
    ],
    "tree": [
      "(h / hold-04\n   :ARG1 (t / team\n            :name (n2 / name\n                      :op1 \"Stevenage\")))",
      "(h / hold-04\n   :location (l / league\n                :name (n3 / name\n                          :op1 \"League\"\n                          :op2 \"Two\")))",
      "(h / hold-04\n   :ARG1 (t / team\n            :name (n2 / name\n                      :op1 \"Stevenage\"))\n   :location (l / league\n                :name (n3 / name\n                          :op1 \"League\"\n                          :op2 \"Two\")))",
      "(h / hold-04\n   :ARG0 (u / university\n            :name (n / name\n                     :op1 \"Cambridge\"))\n   :ARG1 (t / team\n            :name (n2 / name\n                      :op1 \"Stevenage\"))\n   :location (l / league\n                :name (n3 / name\n                          :op1 \"League\"\n                          :op2 \"Two\")))",
      "(t / team\n   :name (n2 / name\n             :op1 \"Stevenage\")\n   :ARG0 (c / chase-01\n            :ARG1 (p / promote-01\n                     :ARG1 t)))"
    ],
    "smus": [
      "Stevenage are held.",
      "held in League Two.",
      "Stevenage are held in the League Two.",
      "Cambridge has held Stevenage in the League Two.",
      "Stevenage are chasing promotion."
    ]
  },
  {
    "instance_id": "pyrxsum-69",
    "summary": "Yet again , we are looking at shocking pictures of a plane crash .",
    "summary_trees": [
      "# ::snt Yet again , we are looking at shocking pictures of a plane crash .\n(l / look-01\n      :ARG0 (w / we)\n      :ARG1 (p / picture\n            :topic (c / crash-01\n                  :ARG1 (p2 / plane))\n            :ARG0-of (s / shock-01))\n      :mod (a / again\n            :mod (y / yet)))"
    ],
    "tree": [
      "(l / look-01\n   :mod (a / again\n           :mod (y / yet)))",
      "(l / look-01\n   :ARG0 (w / we)\n   :ARG1 (p / picture\n            :ARG0 (s / shock-01)))",
      "(l / look-01\n   :ARG0 (w / we)\n   :mod (a / again\n           :mod (y / yet)))",
      "(l / look-01\n   :ARG1 (p / picture\n            :topic (c / crash-01\n                      :ARG1 (p2 / plane)))\n   :mod (a / again\n           :mod (y / yet)))",
      "(l / look-01\n   :ARG0 (w / we)\n   :ARG1 (p / picture\n            :ARG0 (s / shock-01))\n   :mod (a / again\n           :mod (y / yet)))"
    ],
    "smus": [
      "Looking yet again.",
      "We're looking at shocking pictures.",
      "We are looking yet again.",
      "Looking at the pictures of the plane crash yet again.",
      "Yet again, we are looking at shocking pictures."
    ]
  },
  {
    "instance_id": "pyrxsum-70",
    "summary": "Prime Minister David Cameron will later attempt to halt the civil war in Prime Minister David Cameron party caused by Iain Duncan Smith 's resignation from the cabinet .",
    "summary_trees": [
      "# ::snt Prime Minister David Cameron will later attempt to halt the civil war in Prime Minister David Cameron party caused by Iain Duncan Smith 's resignation from the cabinet .\n(a / attempt-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"David\"\n                  :op2 \"Cameron\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (m / minister\n                        :mod (p2 / prime))))\n      :ARG1 (h2 / halt-01\n            :ARG0 p\n            :ARG1 (w / war-01\n                  :mod (c / civil)\n                  :mod (p3 / political-party\n                        :name (n2 / name\n                              :op1 \"David\"\n                              :op2 \"Cameron\"))\n                  :ARG1-of (c2 / cause-01\n                        :ARG0 (r / resign-01\n                              :ARG0 (p4 / person\n                                    :name (n3 / name\n                                          :op1 \"Iain\"\n                                          :op2 \"Duncan\"\n                                          :op3 \"Smith\"))\n                              :ARG1 (c3 / cabinet)))))\n      :time (a2 / after))"
    ],
    "tree": [
      "(a / attempt-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"David\"\n                     :op2 \"Cameron\"))\n   :ARG1 (h2 / halt-01\n             :ARG1 (w / war-01\n                      :mod (c / civil))))",
      "(a / attempt-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"David\"\n                     :op2 \"Cameron\"))\n   :time (a2 / after))",
      "(a / attempt-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (m / minister\n                              :mod (p2 / prime))))\n   :time (a2 / after))",
      "(a / attempt-01\n   :ARG1 (h2 / halt-01\n             :ARG0 (p / person :name (n / name :op1 \"David\" :op2 \"Cameron\"))))\n   :time (a2 / after))",
      "(p / person\n   :name (n / name\n            :op1 \"David\"\n            :op2 \"Cameron\")\n   :ARG0 (h / have-org-role-91\n            :ARG2 (m / minister\n                     :mod (p2 / prime))))"
    ],
    "smus": [
      "David Cameron will attempt to halt the civil war.",
      "David Cameron will attempt later.",
      "The Prime Minister will later attempt.",
      "Later, David Cameron will attempt to halt.",
      "Prime Minister David Cameron"
    ]
  },
  {
    "instance_id": "pyrxsum-71",
    "summary": "The percentage of Americans living in poverty is statistically unchanged from 2010 's record high , even as household income fell , a US Census report says .",
    "summary_trees": [
      "# ::snt The percentage of Americans living in poverty is statistically unchanged from 2010 's record high , even as household income fell , a US Census report says .\n(s / say-01\n      :ARG0 (r / report-01\n            :ARG0 (g / government-organization\n                  :name (n / name\n                        :op1 \"US\"\n                        :op2 \"Census\")))\n      :ARG1 (c / change-01\n            :polarity -\n            :ARG1 (p / percentage\n                  :quant-of (p2 / person\n                        :mod (c2 / country\n                              :name (n2 / name\n                                    :op1 \"America\"))\n                        :ARG0-of (l / live-01\n                              :manner (p3 / poor))))\n            :ARG2 (h / high-02\n                  :ARG1 p\n                  :mod (r2 / record)\n                  :time (d / date-entity\n                        :year 2010))\n            :mod (s2 / statistical)\n            :concession (e / even-as\n                  :op1 (f / fall-01\n                        :ARG1 (ii / income\n                              :mod (h2 / household))))))"
    ],
    "tree": [
      "(p / percentage\n   :quant (p2 / person\n              :mod (c2 / country\n                       :name (n2 / name\n                                 :op1 \"America\"))))",
      "(p / percentage\n   :quant (p2 / person\n              :ARG0 (l / live-01\n                       :manner (p3 / poor))))",
      "(p2 / person\n    :mod (c2 / country\n             :name (n2 / name\n                       :op1 \"America\"))\n    :ARG0 (l / live-01\n             :manner (p3 / poor)))",
      "(h / high-02\n   :mod (r2 / record)\n   :time (d / date-entity\n            :year 2010))",
      "(f / fall-01\n   :ARG1 (ii / income\n             :mod (h2 / household)))"
    ],
    "smus": [
      "A percentage of Americans.",
      "A percentage of people living in poverty.",
      "Americans living in poverty.",
      "2010 was a record high.",
      "household income fell."
    ]
  },
  {
    "instance_id": "pyrxsum-72",
    "summary": "A 34 - year - old woman who was injured in an attack by a knifeman on a Swiss train has died in hospital , police say .",
    "summary_trees": [
      "# ::snt A 34 - year - old woman who was injured in an attack by a knifeman on a Swiss train has died in hospital , police say .\n(s / say-01\n      :ARG0 (p / police)\n      :ARG1 (d / die-01\n            :ARG1 (w / woman\n                  :age (t / temporal-quantity\n                        :quant 34\n                        :unit (y / year))\n                  :ARG1-of (ii / injure-01\n                        :ARG0 (a / attack-01\n                              :ARG0 (k / knifeman)\n                              :ARG1 w\n                              :location (t2 / train\n                                    :mod (c / country\n                                          :name (n / name\n                                                :op1 \"Switzerland\"))))))\n            :location (h / hospital)))"
    ],
    "tree": [
      "(d / die-01\n   :ARG1 (w / woman\n            :age (t / temporal-quantity\n                    :quant 34)))",
      "(d / die-01\n   :ARG1 (w / woman\n            :age (t / temporal-quantity\n                    :quant 34))\n   :location (h / hospital))",
      "(d / die-01\n   :ARG1 (w / woman\n            :ARG1 (ii / injure-01\n                      :ARG0 (a / attack-01\n                               :ARG1 w)))\n   :location (h / hospital))",
      "(d / die-01\n   :ARG1 (w / woman\n            :ARG1 (ii / injure-01\n                      :ARG0 (a / attack-01\n                               :location (t2 / train\n                                             :mod (c / country\n                                                     :name (n / name\n                                                              :op1 \"Switzerland\"))))))\n   :location (h / hospital))",
      "(w / woman\n   :ARG1 (ii / injure-01\n             :ARG0 (a / attack-01\n                      :location (t2 / train\n                                    :mod (c / country\n                                            :name (n / name\n                                                     :op1 \"Switzerland\"))))))"
    ],
    "smus": [
      "The 34-year-old woman died.",
      "The 34-year-old woman died in hospital.",
      "The woman who was injured in the attack died in hospital.",
      "A woman who was injured in the attack on a Swiss train died in hospital.",
      "A woman was injured in the attack on a Swiss train."
    ]
  },
  {
    "instance_id": "pyrxsum-73",
    "summary": "Boeing has shown off Boeing \" space bins \" that can hold 50 % more luggage than existing designs .",
    "summary_trees": [
      "# ::snt Boeing has shown off Boeing \" space bins \" that can hold 50 % more luggage than existing designs .\n(s / show-off-03\n      :ARG0 (c / company\n            :name (n / name\n                  :op1 \"Boeing\"))\n      :ARG1 (b / bin\n            :mod (s2 / space)\n            :poss c\n            :ARG0-of (h / hold-01\n                  :ARG1 (l / luggage\n                        :ARG1-of (h2 / have-quant-91\n                              :ARG3 (m / more\n                                    :quant (p / percentage-entity\n                                          :value 50))\n                              :ARG4 (l2 / luggage\n                                    :ARG1-of (d / design-01\n                                          :ARG1-of (e / exist-01)))))\n                  :ARG1-of (p2 / possible-01))))"
    ],
    "tree": [
      "(s / show-off-03\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Boeing\")))",
      "(s / show-off-03\n   :ARG1 (b / bin\n            :mod (s2 / space)))",
      "(s / show-off-03\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Boeing\"))\n   :ARG1 (b / bin\n            :mod (s2 / space)))",
      "(b / bin\n   :mod (s2 / space)\n   :ARG0 (h / hold-01\n            :ARG1 (l / luggage\n                     :ARG1 (h2 / have-quant-91\n                               :ARG3 (m / more\n                                        :quant (p / percentage-entity\n                                                  :value 50))))))",
      "(h / hold-01\n   :ARG1 (l / luggage\n            :ARG1 (h2 / have-quant-91\n                      :ARG3 (m / more\n                               :quant (p / percentage-entity\n                                         :value 50)))))"
    ],
    "smus": [
      "Boeing has shown off.",
      "Space bins are shown off.",
      "Boeing has shown off space bins.",
      "There are space bins to hold 50 percent more luggage.",
      "Hold 50 percent more luggage."
    ]
  },
  {
    "instance_id": "pyrxsum-74",
    "summary": "Australia is a step closer to exporting live cattle to China , opening a new market for Australia farmers .",
    "summary_trees": [
      "# ::snt Australia is a step closer to exporting live cattle to China , opening a new market for Australia farmers .\n(c / close-06\n      :ARG1 (e / export-01\n            :ARG0 (c2 / country\n                  :name (n / name\n                        :op1 \"Australia\"))\n            :ARG1 (c3 / cattle\n                  :mod (l / live))\n            :ARG2 (c4 / country\n                  :name (n2 / name\n                        :op1 \"China\")))\n      :ARG2-of (h / have-degree-91\n            :ARG1 e\n            :ARG3 (m / more))\n      :ARG0-of (o / open-01\n            :ARG1 (m2 / market\n                  :ARG1-of (n3 / new-01))\n            :ARG3 (p / person\n                  :ARG0-of (f / farm-01)\n                  :mod c2))\n      :ARG4-of (s / step-01))"
    ],
    "tree": [
      "(c / close-06\n   :ARG1 (e / export-01\n            :ARG1 (c3 / cattle\n                      :mod (l / live)))\n   :ARG0 (o / open-01\n            :ARG1 (m2 / market\n                      :ARG1 (n3 / new-01))))",
      "(c / close-06\n   :ARG1 (e / export-01\n            :ARG1 (c3 / cattle\n                      :mod (l / live)))\n   :ARG2 (h / have-degree-91\n            :ARG3 (m / more)))",
      "(c / close-06\n   :ARG1 (e / export-01\n            :ARG2 (c4 / country\n                      :name (n2 / name\n                                :op1 \"China\")))\n   :ARG2 (h / have-degree-91\n            :ARG3 (m / more)))",
      "(o / open-01\n   :ARG3 (p / person\n            :ARG0 (f / farm-01)))",
      "(o / open-01\n   :ARG1 (m2 / market\n             :ARG1 (n3 / new-01))\n   :ARG3 (p / person\n            :ARG0 (f / farm-01)))"
    ],
    "smus": [
      "Exporting live cattle is close to opening a new market.",
      "Exporting live cattle is closer.",
      "Exporting to China is closer.",
      "Opening for farmers.",
      "Opening a new market for farmers."
    ]
  },
  {
    "instance_id": "pyrxsum-75",
    "summary": "Anthony Joshua 's world title bout with Wladimir Klitschko comes at the \" perfect time \" , says former undisputed heavyweight champion Lennox Lewis .",
    "summary_trees": [
      "# ::snt Anthony Joshua 's world title bout with Wladimir Klitschko comes at the \" perfect time \" , says former undisputed heavyweight champion Lennox Lewis .\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Lennox\"\n                  :op2 \"Lewis\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (c / champion\n                        :mod (h2 / heavyweight)\n                        :ARG1-of (d / dispute-01\n                              :polarity -))\n                  :time (f / former)))\n      :ARG1 (c2 / come-03\n            :ARG1 (b / bout-03\n                  :ARG0 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Anthony\"\n                              :op2 \"Joshua\"))\n                  :ARG1 (p3 / person\n                        :name (n3 / name\n                              :op1 \"Wladimir\"\n                              :op2 \"Klitschko\"))\n                  :ARG3 (t / title\n                        :mod (w / world)))\n            :ARG2 (t2 / time\n                  :ARG1-of (p4 / perfect-02))))"
    ],
    "tree": [
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lennox\"\n                     :op2 \"Lewis\"))\n   :ARG1 (c2 / come-03\n             :ARG2 (t2 / time\n                       :ARG1 (p4 / perfect-02))))",
      "(p / person\n   :name (n / name\n            :op1 \"Lennox\"\n            :op2 \"Lewis\"))",
      "(c2 / come-03\n    :ARG1 (b / bout-03\n             :ARG0 (p2 / person\n                       :name (n2 / name\n                                 :op1 \"Anthony\"\n                                 :op2 \"Joshua\")))\n    :ARG2 (t2 / time\n              :ARG1 (p4 / perfect-02)))",
      "(c2 / come-03\n    :ARG1 (b / bout-03\n             :ARG3 (t / title\n                      :mod (w / world)))\n    :ARG2 (t2 / time\n              :ARG1 (p4 / perfect-02)))",
      "(b / bout-03\n   :ARG3 (t / title\n            :mod (w / world)))"
    ],
    "smus": [
      "\"It comes to the perfect time,\" says Lenox Lewis.",
      "Lenox Lewis",
      "Anthony Joshua's bout comes at a perfect time.",
      "The bout for the world title comes at a perfect time.",
      "A bout for the world title."
    ]
  },
  {
    "instance_id": "pyrxsum-76",
    "summary": "People with hidden health conditions are being offered \" Please offer me a seat \" badges in a bid to help ease People with hidden health conditions suffering on London transport .",
    "summary_trees": [
      "# ::snt People with hidden health conditions are being offered \" Please offer me a seat \" badges in a bid to help ease People with hidden health conditions suffering on London transport .\n(o / offer-01\n      :ARG1 (b / badge\n            :mod (o2 / offer-01\n                  :mode imperative\n                  :polite +\n                  :ARG0 (y / you)\n                  :ARG1 (s / seat)\n                  :ARG3 (p / person\n                        :ARG0-of (h / have-03\n                              :ARG1 (c / condition\n                                    :mod (h2 / health)\n                                    :ARG1-of (h3 / hide-01))))))\n      :ARG3 p\n      :purpose (b2 / bid-01\n            :ARG1 (h4 / help-01\n                  :ARG0 o\n                  :ARG1 (e / ease-02\n                        :ARG0 o\n                        :ARG1 (s2 / suffer-01\n                              :ARG0 (p2 / person\n                                    :ARG0-of h\n                                    :ARG1 c)\n                              :ARG1 (t / transport-01\n                                    :location (c2 / city\n                                          :name (n / name\n                                                :op1 \"London\"))))))))"
    ],
    "tree": [
      "(o / offer-01\n   :ARG1 (b / badge\n            :mod (o2 / offer-01\n                     :ARG0 (y / you)))\n   :purpose (b2 / bid-01\n                :ARG1 (h4 / help-01\n                          :ARG1 (e / ease-02\n                                   :ARG1 (s2 / suffer-01\n                                             :ARG1 (t / transport-01\n                                                      :location (c2 / city\n                                                                    :name (n / name\n                                                                             :op1 \"London\"))))))))",
      "(o / offer-01\n   :ARG1 (b / badge\n            :mod (o2 / offer-01\n                     :ARG3 (p / person\n                              :ARG0 (h / have-03\n                                       :ARG1 (c / condition)))))\n   :purpose (b2 / bid-01\n                :ARG1 (h4 / help-01\n                          :ARG1 (e / ease-02\n                                   :ARG1 (s2 / suffer-01\n                                             :ARG1 (t / transport-01\n                                                      :location (c2 / city\n                                                                    :name (n / name\n                                                                             :op1 \"London\"))))))))",
      "(p / person\n   :ARG0 (h / have-03\n            :ARG1 (c / condition\n                     :mod (h2 / health))))",
      "(h / have-03\n   :ARG1 (c / condition\n            :mod (h2 / health)))"
    ],
    "smus": [
      "Offer badges to help ease the suffering of London transport.",
      "Offer badges to people with conditions in bid to help ease the suffering of London transport.",
      "People with health conditions.",
      "have health conditions."
    ]
  },
  {
    "instance_id": "pyrxsum-77",
    "summary": "Leicester Tigers have signed new England loose - head prop Ellis Genge from newly - promoted Bristol .",
    "summary_trees": [
      "# ::snt Leicester Tigers have signed new England loose - head prop Ellis Genge from newly - promoted Bristol .\n(s / sign-02\n      :ARG0 (t / team\n            :name (n / name\n                  :op1 \"Leicester\"\n                  :op2 \"Tigers\"))\n      :ARG1 (p / person\n            :name (n2 / name\n                  :op1 \"Ellis\"\n                  :op2 \"Genge\")\n            :ARG0-of (p2 / prop-01)\n            :ARG1-of (n3 / new-01)\n            :mod (t2 / team\n                  :name (n4 / name\n                        :op1 \"England\"))\n            :part (h / head\n                  :ARG1-of (l / loose-04)))\n      :ARG3 (t3 / team\n            :name (n5 / name\n                  :op1 \"Bristol\")\n            :ARG1-of (p3 / promote-01\n                  :ARG1-of (n6 / new-01))))"
    ],
    "tree": [
      "(s / sign-02\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Leicester\"\n                     :op2 \"Tigers\")))",
      "(s / sign-02\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Ellis\"\n                      :op2 \"Genge\")))",
      "(s / sign-02\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Leicester\"\n                     :op2 \"Tigers\"))\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Ellis\"\n                      :op2 \"Genge\")))",
      "(s / sign-02\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Leicester\"\n                     :op2 \"Tigers\"))\n   :ARG1 (p / person\n            :ARG0 (p2 / prop-01)))",
      "(s / sign-02\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Leicester\"\n                     :op2 \"Tigers\"))\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Ellis\"\n                      :op2 \"Genge\"))\n   :ARG3 (t3 / team\n             :name (n5 / name\n                       :op1 \"Bristol\")))"
    ],
    "smus": [
      "Leicester Tigers have signed",
      "Ellis Genge was signed.",
      "Leicester Tigers have signed Ellis Genge.",
      "Leicester Tigers have signed a prop.",
      "Leicester Tigers have signed Ellis Genge from Bristol."
    ]
  },
  {
    "instance_id": "pyrxsum-78",
    "summary": "Keith Farmer followed up Keith Farmer double at Knockhill by winning the Supersport sprint race at Snetterton on Saturday .",
    "summary_trees": [
      "# ::snt Keith Farmer followed up Keith Farmer double at Knockhill by winning the Supersport sprint race at Snetterton on Saturday .\n(f / follow-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Keith\"\n                  :op2 \"Farmer\"))\n      :ARG1 (w / win-01\n            :ARG0 p\n            :ARG2 (r / race-02\n                  :name (n2 / name\n                        :op1 \"Supersport\")\n                  :mod (s / sprint)\n                  :location (c / city-district\n                        :name (n3 / name\n                              :op1 \"Snetterton\")))\n            :time (d / date-entity\n                  :weekday (s2 / saturday)))\n      :ARG4 (d2 / double-01\n            :ARG0 p\n            :location (l / location\n                  :name (n4 / name\n                        :op1 \"Knockhill\"))))"
    ],
    "tree": [
      "(f / follow-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Keith\"\n                     :op2 \"Farmer\"))\n   :ARG1 (w / win-01\n            :ARG2 (r / race-02\n                     :name (n2 / name\n                               :op1 \"Supersport\"))))",
      "(f / follow-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Keith\"\n                     :op2 \"Farmer\"))\n   :ARG1 (w / win-01\n            :ARG2 (r / race-02\n                     :mod (s / sprint))))",
      "(f / follow-01\n   :ARG1 (w / win-01\n            :ARG2 (r / race-02\n                     :location (c / city-district\n                                  :name (n3 / name\n                                            :op1 \"Snetterton\"))))\n   :ARG4 (d2 / double-01\n             :ARG0 (p / person :name (n / name :op1 \"Keith\" :op2 \"Farmer\"))))",
      "(r / race-02\n   :location (c / city-district\n                :name (n3 / name\n                          :op1 \"Snetterton\")))",
      "(r / race-02\n   :mod (s / sprint)\n   :location (c / city-district\n                :name (n3 / name\n                          :op1 \"Snetterton\")))"
    ],
    "smus": [
      "Keith Farmer followed up by winning the Supersport race.",
      "Keith Farmer followed by winning the sprint race.",
      "The win in Snetterton followed a double by Keith Farmer.",
      "The race took place in Snetterton.",
      "The sprint race took place in Snetterton."
    ]
  },
  {
    "instance_id": "pyrxsum-79",
    "summary": "Northern Ireland striker Conor Washington counts Northern Ireland striker Conor Washington a lucky man as Northern Ireland striker Conor Washington prepares to head to Euro 2016 .",
    "summary_trees": [
      "# ::snt Northern Ireland striker Conor Washington counts Northern Ireland striker Conor Washington a lucky man as Northern Ireland striker Conor Washington prepares to head to Euro 2016 .\n(c / count-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Conor\"\n                  :op2 \"Washington\")\n            :ARG0-of (s / strike-02\n                  :ARG1 (t / team\n                        :name (n2 / name\n                              :op1 \"Northern\"\n                              :op2 \"Ireland\"))))\n      :ARG1 (l / lucky\n            :domain p)\n      :time (p2 / prepare-02\n            :ARG1 p\n            :ARG2 (h / head-02\n                  :ARG0 p\n                  :ARG1 (o / organization\n                        :name (n3 / name\n                              :op1 \"Euro\"\n                              :op2 \"2016\")))))"
    ],
    "tree": [
      "(c / count-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Conor\"\n                     :op2 \"Washington\")))",
      "(c / count-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Conor\"\n                     :op2 \"Washington\"))\n   :time (p2 / prepare-02\n             :ARG2 (h / head-02\n                      :ARG1 (o / organization\n                               :name (n3 / name\n                                         :op1 \"Euro\"\n                                         :op2 \"2016\")))))",
      "(c / count-02\n   :ARG0 (p / person\n            :ARG0 (s / strike-02\n                     :ARG1 (t / team\n                              :name (n2 / name\n                                        :op1 \"Northern\"\n                                        :op2 \"Ireland\"))))\n   :time (p2 / prepare-02\n             :ARG2 (h / head-02\n                      :ARG0 p)))",
      "(c / count-02\n   :ARG1 (l / lucky\n            :domain (p / person :name (n / name :op1 \"Conor\" :op2 \"Washington\"))))\n   :time (p2 / prepare-02\n             :ARG2 (h / head-02\n                      :ARG0 p)))",
      "(p2 / prepare-02\n    :ARG2 (h / head-02\n             :ARG0 (p / person :name (n / name :op1 \"Conor\" :op2 \"Washington\")))))"
    ],
    "smus": [
      "Conor Washington counts.",
      "Conor Washington counts as he prepares to head Euro 2016.",
      "Northern Ireland striker counts as he prepares to head.",
      "As he prepares to head, it counts Conor Washington as lucky.",
      "As Conor Washington prepares to head"
    ]
  },
  {
    "instance_id": "pyrxsum-80",
    "summary": "The Reality Check team answers more of your questions about the implications of the UK 's vote to leave the European Union .",
    "summary_trees": [
      "# ::snt The Reality Check team answers more of your questions about the implications of the UK 's vote to leave the European Union .\n(a / answer-01\n      :ARG0 (t / team\n            :ARG0-of (c / check-01\n                  :ARG1 (r / reality)))\n      :ARG1 (q / question-01\n            :ARG0 (y / you)\n            :ARG1 (ii / implicate-01\n                  :ARG2 (v / vote-01\n                        :ARG0 (c2 / country\n                              :name (n / name\n                                    :op1 \"UK\"))\n                        :ARG1 (l / leave-15\n                              :ARG0 c2\n                              :ARG1 (o / organization\n                                    :name (n2 / name\n                                          :op1 \"European\"\n                                          :op2 \"Union\")))))\n            :quant (m / more)))"
    ],
    "tree": [
      "(a / answer-01\n   :ARG0 (t / team\n            :ARG0 (c / check-01\n                     :ARG1 (r / reality))))",
      "(a / answer-01\n   :ARG0 (t / team\n            :ARG0 (c / check-01\n                     :ARG1 (r / reality)))\n   :ARG1 (q / question-01\n            :ARG0 (y / you)))",
      "(a / answer-01\n   :ARG0 (t / team\n            :ARG0 (c / check-01\n                     :ARG1 (r / reality)))\n   :ARG1 (q / question-01\n            :ARG1 (ii / implicate-01\n                      :ARG2 (v / vote-01\n                               :ARG0 (c2 / country\n                                         :name (n / name\n                                                  :op1 \"UK\"))))))",
      "(a / answer-01\n   :ARG0 (t / team\n            :ARG0 (c / check-01\n                     :ARG1 (r / reality)))\n   :ARG1 (q / question-01\n            :quant (m / more)))",
      "(v / vote-01\n   :ARG0 (c2 / country\n             :name (n / name\n                      :op1 \"UK\"))\n   :ARG1 (l / leave-15\n            :ARG1 (o / organization\n                     :name (n2 / name\n                               :op1 \"European\"\n                               :op2 \"Union\"))))"
    ],
    "smus": [
      "The reality check team answers.",
      "Reality check team answers your questions.",
      "Reality check team answers questions about the implications of the UK vote.",
      "Reality check team answers more questions.",
      "The UK voted to leave the European Union."
    ]
  },
  {
    "instance_id": "pyrxsum-81",
    "summary": "Principality Stadium chief executive Martyn Phillips would relish the chance to host an Anthony Joshua bout at Principality Stadium .",
    "summary_trees": [
      "# ::snt Principality Stadium chief executive Martyn Phillips would relish the chance to host an Anthony Joshua bout at Principality Stadium .\n(r / relish-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Martyn\"\n                  :op2 \"Phillips\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (s / sports-facility\n                        :name (n2 / name\n                              :op1 \"Principality\"\n                              :op2 \"Stadium\"))\n                  :ARG2 (e / executive\n                        :mod (c / chief))))\n      :ARG1 (c2 / chance-02\n            :ARG0 p\n            :ARG1 (h2 / host-01\n                  :ARG0 p\n                  :ARG1 (b / bout\n                        :mod (p2 / person\n                              :name (n3 / name\n                                    :op1 \"Anthony\"\n                                    :op2 \"Joshua\")))\n                  :location s)))"
    ],
    "tree": [
      "(r / relish-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (e / executive\n                              :mod (c / chief)))))",
      "(r / relish-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Martyn\"\n                     :op2 \"Phillips\"))\n   :ARG1 (c2 / chance-02\n             :ARG1 (h2 / host-01\n                       :ARG0 p)))",
      "(r / relish-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (e / executive\n                              :mod (c / chief))))\n   :ARG1 (c2 / chance-02\n             :ARG0 p))",
      "(r / relish-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (e / executive\n                              :mod (c / chief))))\n   :ARG1 (c2 / chance-02\n             :ARG1 (h2 / host-01\n                       :ARG0 p)))",
      "(r / relish-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (e / executive\n                              :mod (c / chief))))\n   :ARG1 (c2 / chance-02\n             :ARG1 (h2 / host-01\n                       :ARG1 (b / bout\n                                :mod (p2 / person\n                                         :name (n3 / name\n                                                   :op1 \"Anthony\"\n                                                   :op2 \"Joshua\"))))))"
    ],
    "smus": [
      "The chief executive would relish.",
      "Martyn Phillips would relish the chance to host.",
      "The chief executive would relish the chance.",
      "The chief executive would relish the chance to host.",
      "The chief executive would relish the chance to host an Anthony Joshua bout."
    ]
  },
  {
    "instance_id": "pyrxsum-82",
    "summary": "Google 's net income rose 17 % to $ 3.93bn in the three months to June from the quarter last year , boosted by an 11 % rise in revenues to $ 17.7bn .",
    "summary_trees": [
      "# ::snt Google 's net income rose 17 % to $ 3.93bn in the three months to June from the quarter last year , boosted by an 11 % rise in revenues to $ 17.7bn .\n(r / rise-01\n      :ARG1 (ii / income\n            :mod (n / net)\n            :poss (c / company\n                  :name (n2 / name\n                        :op1 \"Google\")))\n      :ARG2 (p / percentage-entity\n            :value 17)\n      :ARG4 (m / monetary-quantity\n            :quant 3393000000000\n            :unit (d / dollar))\n      :time (d2 / date-entity\n            :month 6)\n      :time (q / quarter\n            :mod (l / last))\n      :ARG1-of (b / boost-01\n            :ARG0 (r2 / rise-01\n                  :ARG1 (r3 / revenue\n                        :poss c)\n                  :ARG2 (p2 / percentage-entity\n                        :value 11)\n                  :ARG4 (m2 / monetary-quantity\n                        :quant 17700000\n                        :unit (d3 / dollar)))))"
    ],
    "tree": [
      "(r / rise-01\n   :ARG1 (ii / income\n             :mod (n / net)))",
      "(r / rise-01\n   :ARG2 (p / percentage-entity\n            :value 17))",
      "(r / rise-01\n   :ARG1 (ii / income\n             :mod (n / net))\n   :ARG2 (p / percentage-entity\n            :value 17))",
      "(r2 / rise-01\n    :ARG1 (r3 / revenue\n              :poss (c / company :name (n2 / name :op1 \"Google\"))))",
      "(r2 / rise-01\n    :ARG1 (r3 / revenue\n              :poss (c / company :name (n2 / name :op1 \"Google\")))\n    :ARG2 (p2 / percentage-entity\n              :value 11))"
    ],
    "smus": [
      "Net income rose.",
      "A 17% rise.",
      "Net income rose 17%.",
      "Google's revenues have seen a rise.",
      "Google's revenues rose 11%."
    ]
  },
  {
    "instance_id": "pyrxsum-83",
    "summary": "Pregnant women should visit countries with a risk of malaria only if their trip is essential , experts are warning .",
    "summary_trees": [
      "# ::snt Pregnant women should visit countries with a risk of malaria only if their trip is essential , experts are warning .\n(w / warn-01\n      :ARG0 (p / person\n            :ARG1-of (e / expert-01))\n      :ARG1 (r / recommend-01\n            :ARG1 (v / visit-01\n                  :ARG0 (w2 / woman\n                        :ARG1-of (ii / impregnate-01))\n                  :ARG1 (c / country\n                        :ARG1-of (r2 / risk-01\n                              :ARG2 (m / malaria)))\n                  :condition (e2 / essential\n                        :mod (o / only))\n                  :domain-of e2)))"
    ],
    "tree": [
      "(w / warn-01\n   :ARG0 (p / person\n            :ARG1 (e / expert-01)))",
      "(w / warn-01\n   :ARG0 (p / person\n            :ARG1 (e / expert-01))\n   :ARG1 (r / recommend-01\n            :ARG1 (v / visit-01\n                     :condition (e2 / essential\n                                    :mod (o / only)))))",
      "(v / visit-01\n   :condition (e2 / essential\n                  :mod (o / only)))",
      "(v / visit-01\n   :ARG1 (c / country\n            :ARG1 (r2 / risk-01\n                      :ARG2 (m / malaria)))\n   :condition (e2 / essential\n                  :domain v))",
      "(v / visit-01\n   :ARG0 (w2 / woman\n             :ARG1 (ii / impregnate-01))\n   :ARG1 (c / country\n            :ARG1 (r2 / risk-01\n                      :ARG2 (m / malaria)))\n   :condition (e2 / essential\n                  :mod (o / only)))"
    ],
    "smus": [
      "Experts are warning.",
      "Experts are warning that only if essential should visit.",
      "Visit only if essential.",
      "If essential, visit countries at risk of malaria.",
      "Only if essential will pregnant women visit countries at risk of malaria."
    ]
  },
  {
    "instance_id": "pyrxsum-84",
    "summary": "In Africa 's schools , old - fashioned , dusty textbooks are gradually being replaced by tablets , computers and mobile phones .",
    "summary_trees": [
      "# ::snt In Africa 's schools , old - fashioned , dusty textbooks are gradually being replaced by tablets , computers and mobile phones .\n(r / replace-01\n      :ARG1 (t / textbook\n            :mod (f / fashion\n                  :mod (o / old))\n            :mod (d / dusty))\n      :ARG2 (a / and\n            :op1 (t2 / tablet)\n            :op2 (c / computer)\n            :op3 (p / phone\n                  :ARG1-of (m / mobile-02)))\n      :manner (g / gradual)\n      :location (s / school\n            :location (c2 / continent\n                  :name (n / name\n                        :op1 \"Africa\"))))"
    ],
    "tree": [
      "(r / replace-01\n   :ARG1 (t / textbook\n            :mod (f / fashion\n                    :mod (o / old)))\n   :manner (g / gradual))",
      "(r / replace-01\n   :ARG1 (t / textbook\n            :mod (f / fashion\n                    :mod (o / old)))\n   :ARG2 (t2 / tablet)\n   :manner (g / gradual))",
      "(r / replace-01\n   :ARG1 (t / textbook\n            :mod (d / dusty))\n   :manner (g / gradual)\n   :location (s / school\n                :location (c2 / continent\n                              :name (n / name\n                                       :op1 \"Africa\"))))",
      "(r / replace-01\n   :ARG1 (t / textbook\n            :mod (f / fashion\n                    :mod (o / old)))\n   :ARG2 (t2 / tablet)\n   :manner (g / gradual)\n   :location (s / school\n                :location (c2 / continent\n                              :name (n / name\n                                       :op1 \"Africa\"))))",
      "(r / replace-01\n   :ARG1 (t / textbook\n            :mod (d / dusty))\n   :ARG2 (t2 / tablet)\n   :manner (g / gradual)\n   :location (s / school\n                :location (c2 / continent\n                              :name (n / name\n                                       :op1 \"Africa\"))))"
    ],
    "smus": [
      "Old-fashioned textbooks are gradually being replaced.",
      "Old-fashioned textbooks are gradually being replaced by tablets.",
      "Dusty textbooks are gradually being replaced in African schools.",
      "In African schools, old-fashioned textbooks are gradually replaced with tablets.",
      "Dusty textbooks are gradually replaced by tablets in African schools."
    ]
  },
  {
    "instance_id": "pyrxsum-85",
    "summary": "More than half of Scots have run out of money before pay day , according to a new report .",
    "summary_trees": [
      "# ::snt More than half of Scots have run out of money before pay day , according to a new report .\n(s / say-01\n      :ARG0 (r / report\n            :ARG1-of (n / new-01))\n      :ARG1 (r2 / run-out-05\n            :ARG1 (m / money)\n            :ARG2 (p / person\n                  :mod (c / country\n                        :name (n2 / name\n                              :op1 \"Scotland\"))\n                  :quant (m2 / more-than\n                        :op1 \"1/2\"))\n            :time (b / before\n                  :op1 (d / day\n                        :time-of (p2 / pay-01)))))"
    ],
    "tree": [
      "(s / say-01\n   :ARG1 (r2 / run-out-05\n             :ARG2 (p / person\n                      :quant (m2 / more-than\n                                 :op1 \"1/2\"))))",
      "(s / say-01\n   :ARG0 (r / report\n            :ARG1 (n / new-01))\n   :ARG1 (r2 / run-out-05\n             :ARG2 (p / person\n                      :quant (m2 / more-than\n                                 :op1 \"1/2\"))))",
      "(r2 / run-out-05\n    :ARG2 (p / person\n             :quant (m2 / more-than\n                        :op1 \"1/2\")))",
      "(r2 / run-out-05\n    :ARG1 (m / money)\n    :ARG2 (p / person\n             :quant (m2 / more-than\n                        :op1 \"1/2\")))",
      "(p / person\n   :quant (m2 / more-than\n              :op1 \"1/2\"))"
    ],
    "smus": [
      "More than half are out.",
      "More than half have run out, according to the new report.",
      "More than half have run out.",
      "More than half ran out of money.",
      "More than half."
    ]
  },
  {
    "instance_id": "pyrxsum-86",
    "summary": "The Taliban 's capture of the strategically - located Sangin , once considered the deadliest battlefield for US and British troops in Afghanistan , will increase The Taliban 's mobility in the north of the province and give The Taliban 's control of an important supply line with the provincial capital Lashkar Gah",
    "summary_trees": [
      "# ::snt The Taliban 's capture of the strategically - located Sangin , once considered the deadliest battlefield for US and British troops in Afghanistan , will increase The Taliban 's mobility in the north of the province and give The Taliban 's control of an important supply line with the provincial capital Lashkar Gah\n(a / and\n      :op1 (ii / increase-01\n            :ARG0 (c / capture-01\n                  :ARG0 (c2 / criminal-organization\n                        :name (n / name\n                              :op1 \"Taliban\"))\n                  :ARG1 (c3 / city\n                        :name (n2 / name\n                              :op1 \"Sangin\")\n                        :ARG1-of (l / locate-01\n                              :manner (s / strategic))\n                        :ARG1-of (c4 / consider-02\n                              :ARG2 (b / battlefield\n                                    :location (c5 / country\n                                          :name (n3 / name\n                                                :op1 \"Afghanistan\")\n                                          :part (n4 / north))\n                                    :beneficiary (a2 / and\n                                          :op1 (t / troop\n                                                :mod (c6 / country\n                                                      :name (n5 / name\n                                                            :op1 \"United\"\n                                                            :op2 \"States\")))\n                                          :op2 (t2 / troop\n                                                :mod (c7 / country\n                                                      :name (n6 / name\n                                                            :op1 \"Britain\"))))\n                                    :ARG1-of (h / have-degree-91\n                                          :ARG2 (k / kill-01\n                                                :ARG0 b)\n                                          :ARG3 (m / most)))\n                              :time (o / once))))\n            :ARG1 (m2 / mobility\n                  :poss c2\n                  :location n4))\n      :op2 (g / give-01\n            :ARG0 c\n            :ARG1 (c8 / control-01\n                  :ARG0 c2\n                  :ARG1 (l2 / line\n                        :ARG1-of (ii2 / important-01)\n                        :ARG3-of (s2 / supply-01\n                              :ARG2 c3\n                              :name (n7 / name\n                                    :op1 \"Lashkar\"\n                                    :op2 \"Gah\")\n                              :ARG0-of (h2 / have-org-role-91\n                                    :ARG1 (p / province\n                                          :ARG2 (c9 / capital)))))\n                  :ARG2 c2)))"
    ],
    "tree": [
      "(c4 / consider-02\n    :ARG2 (b / battlefield\n             :location (c5 / country\n                           :name (n3 / name\n                                     :op1 \"Afghanistan\"))))",
      "(b / battlefield\n   :location (c5 / country\n                 :name (n3 / name\n                           :op1 \"Afghanistan\"))\n   :beneficiary (t / troop\n                   :mod (c6 / country\n                            :name (n5 / name\n                                      :op1 \"United\"\n                                      :op2 \"States\"))))",
      "(b / battlefield\n   :location (c5 / country\n                 :name (n3 / name\n                           :op1 \"Afghanistan\"))\n   :beneficiary (t2 / troop\n                    :mod (c7 / country\n                             :name (n6 / name\n                                       :op1 \"Britain\"))))",
      "(b / battlefield\n   :location (c5 / country\n                 :name (n3 / name\n                           :op1 \"Afghanistan\"))\n   :ARG1 (h / have-degree-91\n            :ARG2 (k / kill-01\n                     :ARG0 b)))",
      "(c5 / country\n    :name (n3 / name\n              :op1 \"Afghanistan\"))"
    ],
    "smus": [
      "Considered a battlefield in Afghanistan.",
      "A battlefield in Afghanistan for American troops",
      "A battlefield in Afghanistan for British troops",
      "There is a battlefield in Afghanistan where it is deadly.",
      "Afghanistan (AF)"
    ]
  },
  {
    "instance_id": "pyrxsum-87",
    "summary": "Western Sahara is a sparsely - populated area of mostly desert situated on the northwest coast of Africa .",
    "summary_trees": [
      "# ::snt Western Sahara is a sparsely - populated area of mostly desert situated on the northwest coast of Africa .\n(a / area\n      :ARG1-of (p / populate-01\n            :manner (s / sparse))\n      :consist-of (d / desert\n            :quant (m / most))\n      :domain (c / country-region\n            :name (n / name\n                  :op1 \"Western\"\n                  :op2 \"Sahara\"))\n      :ARG1-of (s2 / sit-01\n            :ARG2 (c2 / coast\n                  :mod (n2 / northwest)\n                  :part-of (c3 / continent\n                        :name (n3 / name\n                              :op1 \"Africa\")))))"
    ],
    "tree": [
      "(a / area\n   :consist-of (d / desert\n                  :quant (m / most)))",
      "(a / area\n   :domain (c / country-region\n              :name (n / name\n                       :op1 \"Western\"\n                       :op2 \"Sahara\")))",
      "(a / area\n   :ARG1 (p / populate-01\n            :manner (s / sparse))\n   :domain (c / country-region\n              :name (n / name\n                       :op1 \"Western\"\n                       :op2 \"Sahara\")))",
      "(a / area\n   :consist-of (d / desert\n                  :quant (m / most))\n   :domain (c / country-region\n              :name (n / name\n                       :op1 \"Western\"\n                       :op2 \"Sahara\")))",
      "(s2 / sit-01\n    :ARG2 (c2 / coast\n              :mod (n2 / northwest)))"
    ],
    "smus": [
      "The area is mostly desert.",
      "Western Sahara is an area.",
      "Western Sahara is a sparsely populated area.",
      "Western Sahara is mostly a desert area.",
      "sits on the northwest coast."
    ]
  },
  {
    "instance_id": "pyrxsum-88",
    "summary": "Deputy First Minister John Swinney will give MSPs Deputy First Minister John Swinney response to a report into the death of Aberdeen schoolboy Bailey Gwynne next week .",
    "summary_trees": [
      "# ::snt Deputy First Minister John Swinney will give MSPs Deputy First Minister John Swinney response to a report into the death of Aberdeen schoolboy Bailey Gwynne next week .\n(g / give-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"John\"\n                  :op2 \"Swinney\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (m / minister\n                        :mod (d / deputy)\n                        :mod (f / first))))\n      :ARG1 (r / respond-01\n            :ARG0 p\n            :ARG1 (r2 / report-01\n                  :ARG1 (d2 / die-01\n                        :ARG1 (s / schoolboy\n                              :name (n2 / name\n                                    :op1 \"Bailey\"\n                                    :op2 \"Gwynne\")\n                              :mod (c / city\n                                    :name (n3 / name\n                                          :op1 \"Aberdeen\"))))))\n      :ARG2 (p2 / person\n            :ARG0-of (h2 / have-org-role-91\n                  :ARG1 (g2 / government-organization\n                        :name (n4 / name\n                              :op1 \"MSP\"))\n                  :ARG2 (m2 / minister\n                        :mod (d3 / deputy)\n                        :mod f)))\n      :time (w / week\n            :mod (n5 / next)))"
    ],
    "tree": [
      "(g / give-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\"\n                     :op2 \"Swinney\"))\n   :time (w / week\n            :mod (n5 / next)))",
      "(g / give-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\"\n                     :op2 \"Swinney\"))\n   :ARG1 (r / respond-01\n            :ARG1 (r2 / report-01\n                      :ARG1 (d2 / die-01\n                                :ARG1 (s / schoolboy\n                                         :mod (c / city\n                                                 :name (n3 / name\n                                                           :op1 \"Aberdeen\"))))))\n   :time (w / week\n            :mod (n5 / next)))",
      "(g / give-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (m / minister\n                              :mod (d / deputy))))\n   :ARG1 (r / respond-01\n            :ARG1 (r2 / report-01\n                      :ARG1 (d2 / die-01\n                                :ARG1 (s / schoolboy\n                                         :mod (c / city\n                                                 :name (n3 / name\n                                                           :op1 \"Aberdeen\"))))))\n   :time (w / week\n            :mod (n5 / next)))",
      "(d2 / die-01\n    :ARG1 (s / schoolboy\n             :name (n2 / name\n                       :op1 \"Bailey\"\n                       :op2 \"Gwynne\")))",
      "(s / schoolboy\n   :name (n2 / name\n             :op1 \"Bailey\"\n             :op2 \"Gwynne\"))"
    ],
    "smus": [
      "John Swinney will give next week.",
      "John Swinney will give a response next week to the report of the death of an Aberdeen schoolboy.",
      "The Deputy Minister will give response next week to the report of the death of an Aberdeen schoolboy.",
      "Bailey Gwynne, a schoolboy, died.",
      "Bailey Gwynne is a schoolboy."
    ]
  },
  {
    "instance_id": "pyrxsum-89",
    "summary": "Police at the Download Festival have kept Police at the Download Festival promise and have been posing for fan photos despite extra security .",
    "summary_trees": [
      "# ::snt Police at the Download Festival have kept Police at the Download Festival promise and have been posing for fan photos despite extra security .\n(a / and\n      :op1 (k / keep-01\n            :ARG0 (p / police\n                  :location (f / festival\n                        :name (n / name\n                              :op1 \"Download\"\n                              :op2 \"Festival\")))\n            :ARG1 (p2 / promise-01\n                  :ARG0 p))\n      :op2 (p3 / pose-01\n            :ARG0 p\n            :ARG1 (p4 / photo\n                  :mod (f2 / fan))\n            :concession (s / security\n                  :mod (e / extra))))"
    ],
    "tree": [
      "(a / and\n   :op1 (k / keep-01\n           :ARG1 (p2 / promise-01\n                     :ARG0 (p / police))))",
      "(a / and\n   :op1 (k / keep-01\n           :ARG1 (p2 / promise-01\n                     :ARG0 (p / police\n                              :location (f / festival\n                                           :name (n / name\n                                                    :op1 \"Download\"\n                                                    :op2 \"Festival\")))))\n   :op2 (p3 / pose-01\n            :ARG0 p))",
      "(k / keep-01\n   :ARG0 (p / police\n            :location (f / festival\n                         :name (n / name\n                                  :op1 \"Download\"\n                                  :op2 \"Festival\"))))",
      "(k / keep-01\n   :ARG0 (p / police\n            :location (f / festival\n                         :name (n / name\n                                  :op1 \"Download\"\n                                  :op2 \"Festival\")))\n   :ARG1 (p2 / promise-01\n             :ARG0 p))",
      "(p3 / pose-01\n    :concession (s / security\n                   :mod (e / extra)))"
    ],
    "smus": [
      "And the police have kept their promise.",
      "Police at the Download Festival have kept their promise and are posing.",
      "Police at the Download Festival have kept.",
      "Police at the Download Festival have kept their promise.",
      "Posing despite extra security."
    ]
  },
  {
    "instance_id": "pyrxsum-90",
    "summary": "Competition for nesting sites could explain why some birds and bumblebees are declining faster than others .",
    "summary_trees": [
      "# ::snt Competition for nesting sites could explain why some birds and bumblebees are declining faster than others .\n(p / possible-01\n      :ARG1 (e / explain-01\n            :ARG0 (c / compete-01\n                  :ARG2 (s / site\n                        :location-of (n / nest-01)))\n            :ARG1 (t / thing\n                  :ARG0-of (c2 / cause-01\n                        :ARG1 (d / decline-01\n                              :ARG1 (a / and\n                                    :op1 (b / bird\n                                          :mod (s2 / some))\n                                    :op2 (b2 / bee\n                                          :mod s2))\n                              :ARG1-of (h / have-degree-91\n                                    :ARG2 (f / fast-02)\n                                    :ARG3 (m / more)\n                                    :ARG4 (o / other)))))))"
    ],
    "tree": [
      "(p / possible-01\n   :ARG1 (e / explain-01\n            :ARG0 (c / compete-01\n                     :ARG2 (s / site\n                              :location (n / nest-01)))))",
      "(e / explain-01\n   :ARG1 (t / thing\n            :ARG0 (c2 / cause-01\n                      :ARG1 (d / decline-01\n                               :ARG1 (b / bird\n                                        :mod (s2 / some))))))",
      "(c / compete-01\n   :ARG2 (s / site\n            :location (n / nest-01)))",
      "(d / decline-01\n   :ARG1 (b / bird\n            :mod (s2 / some)))",
      "(a / and\n   :op1 (b / bird\n           :mod (s2 / some))\n   :op2 (b2 / bee\n            :mod s2))"
    ],
    "smus": [
      "Competition for nest sites can explain this.",
      "Explain why some birds are declining.",
      "Competition for nest sites.",
      "Some birds are declining.",
      "Some birds and some bees."
    ]
  },
  {
    "instance_id": "pyrxsum-91",
    "summary": "The UK should not have to pay \" large \" sums to the EU to trade with the EU after Brexit , Boris Johnson has said .",
    "summary_trees": [
      "# ::snt The UK should not have to pay \" large \" sums to the EU to trade with the EU after Brexit , Boris Johnson has said .\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Boris\"\n                  :op2 \"Johnson\"))\n      :ARG1 (r / recommend-01\n            :ARG1 (o / obligate-01\n                  :polarity -\n                  :ARG1 (c / country\n                        :name (n2 / name\n                              :op1 \"UK\"))\n                  :ARG2 (p2 / pay-01\n                        :ARG0 c\n                        :ARG1 (s2 / sum\n                              :mod (l / large))\n                        :ARG2 (o2 / organization\n                              :name (n3 / name\n                                    :op1 \"EU\"))\n                        :purpose (t / trade-01\n                              :ARG0 c\n                              :ARG2 o2\n                              :time (a / after\n                                    :op1 (l2 / leave-15\n                                          :ARG0 c\n                                          :ARG1 o2)))))))"
    ],
    "tree": [
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Boris\"\n                     :op2 \"Johnson\"))\n   :ARG1 (r / recommend-01\n            :ARG1 (o / obligate-01\n                     :polarity -)))",
      "(p / person\n   :name (n / name\n            :op1 \"Boris\"\n            :op2 \"Johnson\"))",
      "(p2 / pay-01\n    :ARG1 (s2 / sum\n              :mod (l / large))\n    :ARG2 (o2 / organization\n              :name (n3 / name\n                        :op1 \"EU\"))\n    :purpose (t / trade-01\n                :ARG2 o2))",
      "(a / after\n   :op1 (l2 / leave-15\n            :ARG0 (c / country :name (n2 / name :op1 \"UK\"))))",
      "(a / after\n   :op1 (l2 / leave-15\n            :ARG1 (o2 / organization :name (n3 / name :op1 \"EU\"))))"
    ],
    "smus": [
      "Boris Johnson has said that it should not.",
      "Boris Johnson",
      "Large sums are paid to the EU for trade purposes.",
      "After the UK leaves.",
      "After leaving the EU."
    ]
  },
  {
    "instance_id": "pyrxsum-92",
    "summary": "A grizzly bear has attacked and killed a cyclist just outside the Glacier National Park in the northern US state of Montana , police say .",
    "summary_trees": [
      "# ::snt A grizzly bear has attacked and killed a cyclist just outside the Glacier National Park in the northern US state of Montana , police say .\n(s / say-01\n      :ARG0 (p / police)\n      :ARG1 (a / and\n            :op1 (a2 / attack-01\n                  :ARG0 (b / bear\n                        :mod (g / grizzly))\n                  :ARG1 (p2 / person\n                        :ARG0-of (c / cycle-01)))\n            :op2 (k / kill-01\n                  :ARG0 b\n                  :ARG1 p2)\n            :location (o / outside\n                  :op1 (p3 / park\n                        :name (n / name\n                              :op1 \"Glacier\"\n                              :op2 \"National\"\n                              :op3 \"Park\")\n                        :location (s2 / state\n                              :name (n2 / name\n                                    :op1 \"Montana\")\n                              :location (n3 / north\n                                    :part-of (c2 / country\n                                          :name (n4 / name\n                                                :op1 \"US\")))))\n                  :mod (j / just))))"
    ],
    "tree": [
      "(s / say-01\n   :ARG0 (p / police)\n   :ARG1 (a2 / attack-01\n             :ARG0 (b / bear\n                      :mod (g / grizzly))))",
      "(s / say-01\n   :ARG0 (p / police)\n   :ARG1 (a2 / attack-01\n             :ARG1 (p2 / person\n                       :ARG0 (c / cycle-01))))",
      "(a / and\n   :op1 (a2 / attack-01\n            :ARG0 (b / bear\n                     :mod (g / grizzly)))\n   :op2 (k / kill-01\n           :ARG1 (p2 / person\n                     :ARG0 (c / cycle-01))))",
      "(a / and\n   :op1 (a2 / attack-01\n            :ARG1 (p2 / person\n                      :ARG0 (c / cycle-01)))\n   :op2 (k / kill-01\n           :ARG1 p2)\n   :location (o / outside\n                :mod (j / just)))",
      "(a2 / attack-01\n    :ARG0 (b / bear\n             :mod (g / grizzly))\n    :ARG1 (p2 / person\n              :ARG0 (c / cycle-01)))"
    ],
    "smus": [
      "Police say a grizzly bear attacked.",
      "Police say a cyclist was attacked.",
      "A grizzly bear attacked and killed a cyclist.",
      "Just outside, a cyclist was attacked and killed.",
      "A grizzly bear attacked a cyclist."
    ]
  },
  {
    "instance_id": "pyrxsum-93",
    "summary": "A man has been arrested over the \" violent assault \" and rape of a woman in a railway station car park , police have said .",
    "summary_trees": [
      "# ::snt A man has been arrested over the \" violent assault \" and rape of a woman in a railway station car park , police have said .\n(s / say-01\n      :ARG0 (p / police)\n      :ARG1 (a / arrest-01\n            :ARG1 (m / man)\n            :ARG2 (a2 / and\n                  :op1 (a3 / assault-01\n                        :ARG0 m\n                        :ARG1 (w / woman)\n                        :mod (v / violent))\n                  :op2 (r / rape-01\n                        :ARG0 m\n                        :ARG1 w)\n                  :location (p2 / park\n                        :mod (c / car)\n                        :mod (s2 / station\n                              :mod (r2 / railway))))))"
    ],
    "tree": [
      "(s / say-01\n   :ARG0 (p / police)\n   :ARG1 (a / arrest-01\n            :ARG1 (m / man)))",
      "(a2 / and\n    :op1 (a3 / assault-01\n             :ARG1 (w / woman))\n    :op2 (r / rape-01\n            :ARG1 w))",
      "(a2 / and\n    :op1 (a3 / assault-01\n             :mod (v / violent))\n    :location (p2 / park\n                  :mod (c / car)))",
      "(a2 / and\n    :op1 (a3 / assault-01\n             :mod (v / violent))\n    :location (p2 / park\n                  :mod (s2 / station\n                           :mod (r2 / railway))))",
      "(a2 / and\n    :op1 (a3 / assault-01\n             :ARG1 (w / woman))\n    :op2 (r / rape-01\n            :ARG1 w)\n    :location (p2 / park\n                  :mod (c / car)))"
    ],
    "smus": [
      "Police said the man was arrested.",
      "A woman was assaulted and raped.",
      "And there was a violent assault in a car park.",
      "And there was a violent assault in the railway station park.",
      "A woman was assaulted and raped in a car park."
    ]
  },
  {
    "instance_id": "pyrxsum-94",
    "summary": "A diabetic MP who asked Coca - Cola not to take Coca - Cola Christmas truck to Leicester has been accused of hypocrisy for opening a sweet shop in Leicester .",
    "summary_trees": [
      "# ::snt A diabetic MP who asked Coca - Cola not to take Coca - Cola Christmas truck to Leicester has been accused of hypocrisy for opening a sweet shop in Leicester .\n(a / accuse-01\n      :ARG1 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (p2 / parliament)\n                  :ARG2 (m / member\n                        :mod (d / diabetes)))\n            :ARG0-of (a2 / ask-02\n                  :ARG1 (t / take-01\n                        :polarity -\n                        :ARG0 (c / company\n                              :name (n / name\n                                    :op1 \"Coke-Cola\"))\n                        :ARG1 (t2 / truck\n                              :mod (f / festival\n                                    :name (n2 / name\n                                          :op1 \"Christmas\")))\n                        :ARG3 (c2 / city\n                              :name (n3 / name\n                                    :op1 \"Leicester\")))\n                  :ARG2 c))\n      :ARG2 (h2 / hypocrisy)\n      :ARG1-of (c3 / cause-01\n            :ARG0 (o / open-01\n                  :ARG0 p\n                  :ARG1 (s / shop\n                        :mod (s2 / sweet))\n                  :location c2)))"
    ],
    "tree": [
      "(a / accuse-01\n   :ARG1 (p / person\n            :ARG0 (a2 / ask-02\n                      :ARG1 (t / take-01\n                               :polarity -))))",
      "(a / accuse-01\n   :ARG1 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (m / member\n                              :mod (d / diabetes)))))",
      "(p / person\n   :ARG0 (h / have-org-role-91\n            :ARG1 (p2 / parliament)))",
      "(h / have-org-role-91\n   :ARG1 (p2 / parliament)\n   :ARG2 (m / member\n            :mod (d / diabetes)))",
      "(o / open-01\n   :ARG1 (s / shop\n            :mod (s2 / sweet)))"
    ],
    "smus": [
      "The person who asked not to take was accused.",
      "The person who has been accused is a diabetic.",
      "Parliamentarians.",
      "Parliament has a diabetes member.",
      "Sweet shop open."
    ]
  },
  {
    "instance_id": "pyrxsum-95",
    "summary": "An Orlando mother who was found not guilty of murdering An Orlando mother who was found not guilty of murdering her two - year old daughter Caylee two - year old daughter Caylee has broken An Orlando mother who was found not guilty of murdering her two - year old daughter Caylee silence six years later .",
    "summary_trees": [
      "# ::snt An Orlando mother who was found not guilty of murdering An Orlando mother who was found not guilty of murdering her two - year old daughter Caylee two - year old daughter Caylee has broken An Orlando mother who was found not guilty of murdering her two - year old daughter Caylee silence six years later .\n(b / break-13\n      :ARG0 (p / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG2 (m / mother))\n            :location (c / city\n                  :name (n / name\n                        :op1 \"Orlando\"))\n            :ARG0-of (f / find-02\n                  :ARG1 (g / guilty-01\n                        :polarity -\n                        :ARG1 p\n                        :ARG2 (m2 / murder-01\n                              :ARG0 p\n                              :ARG1 (p2 / person\n                                    :name (n2 / name\n                                          :op1 \"Caylee\")\n                                    :ARG0-of (h2 / have-rel-role-91\n                                          :ARG1 p\n                                          :ARG2 (d / daughter))\n                                    :age (t / temporal-quantity\n                                          :quant 2\n                                          :unit (y / year)))))))\n      :ARG1 (s / silence)\n      :time (a / after\n            :quant (t2 / temporal-quantity\n                  :quant 6\n                  :unit (y2 / year))))"
    ],
    "tree": [
      "(b / break-13\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (m / mother)))\n   :ARG1 (s / silence))",
      "(p2 / person\n    :name (n2 / name\n              :op1 \"Caylee\")\n    :ARG0 (h2 / have-rel-role-91\n              :ARG2 (d / daughter)))",
      "(p2 / person\n    :name (n2 / name\n              :op1 \"Caylee\")\n    :age (t / temporal-quantity\n            :quant 2))",
      "(p2 / person\n    :ARG0 (h2 / have-rel-role-91\n              :ARG2 (d / daughter))\n    :age (t / temporal-quantity\n            :quant 2))",
      "(p2 / person\n    :name (n2 / name\n              :op1 \"Caylee\")\n    :ARG0 (h2 / have-rel-role-91\n              :ARG1 (p / person))\n    :age (t / temporal-quantity\n            :quant 2))"
    ],
    "smus": [
      "The mother has broken the silence.",
      "Caylee has a daughter.",
      "Kaylee is 2 years old.",
      "The daughter has been 2 years old.",
      "Caylee is a two-year-old."
    ]
  },
  {
    "instance_id": "pyrxsum-96",
    "summary": "The devolution settlement for Wales is less fair than those offered to Scotland and Northern Ireland , the Archbishop of Wales has said .",
    "summary_trees": [
      "# ::snt The devolution settlement for Wales is less fair than those offered to Scotland and Northern Ireland , the Archbishop of Wales has said .\n(s / say-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (c / country\n                        :name (n / name\n                              :op1 \"Wales\"))\n                  :ARG2 (a / archbishop)))\n      :ARG1 (f / fair-01\n            :ARG1 (s2 / settle-02\n                  :ARG0 c\n                  :ARG3 (d / devolve-01\n                        :ARG0 c))\n            :ARG2-of (h2 / have-degree-91\n                  :ARG1 s2\n                  :ARG3 (l / less)\n                  :ARG4 (s3 / settle-02\n                        :ARG1-of (o / offer-01\n                              :ARG3 (a2 / and\n                                    :op1 (c2 / country\n                                          :name (n2 / name\n                                                :op1 \"Scotland\"))\n                                    :op2 (c3 / country\n                                          :name (n3 / name\n                                                :op1 \"Northern\"\n                                                :op2 \"Ireland\"))))))))"
    ],
    "tree": [
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (a / archbishop)))\n   :ARG1 (f / fair-01\n            :ARG2 (h2 / have-degree-91\n                      :ARG3 (l / less))))",
      "(p / person\n   :ARG0 (h / have-org-role-91\n            :ARG2 (a / archbishop)))",
      "(f / fair-01\n   :ARG1 (s2 / settle-02\n             :ARG3 (d / devolve-01\n                      :ARG0 (c / country :name (n / name :op1 \"Wales\"))))\n   :ARG2 (h2 / have-degree-91\n             :ARG3 (l / less)))",
      "(h2 / have-degree-91\n    :ARG3 (l / less)\n    :ARG4 (s3 / settle-02\n              :ARG1 (o / offer-01\n                       :ARG3 (c2 / country\n                                 :name (n2 / name\n                                           :op1 \"Scotland\")))))",
      "(a2 / and\n    :op2 (c3 / country\n             :name (n3 / name\n                       :op1 \"Northern\"\n                       :op2 \"Ireland\")))"
    ],
    "smus": [
      "The Archbishop has said it is less fair.",
      "Archbishop",
      "The settlement of Wales devolution is less fair.",
      "Less settled than Scotland was offered.",
      "and Northern Ireland."
    ]
  },
  {
    "instance_id": "pyrxsum-97",
    "summary": "Labour will keep Labour election promises despite uncertainty over Brexit , but cuts to some services are inevitable , the first minister has warned .",
    "summary_trees": [
      "# ::snt Labour will keep Labour election promises despite uncertainty over Brexit , but cuts to some services are inevitable , the first minister has warned .\n(w / warn-01\n      :ARG0 (m / minister\n            :ord (o / ordinal-entity\n                  :value 1))\n      :ARG1 (h / have-concession-91\n            :ARG1 (p / possible-01\n                  :polarity -\n                  :ARG1 (a / avoid-01\n                        :ARG1 (c / cut-02\n                              :ARG1 (s / service\n                                    :mod (s2 / some)))))\n            :ARG2 (k / keep-01\n                  :ARG0 (p2 / political-party\n                        :name (n / name\n                              :op1 \"Labour\"))\n                  :ARG1 (p3 / promise-01\n                        :ARG0 p2\n                        :mod (e / elect-01))\n                  :concession (c2 / certain\n                        :polarity -\n                        :domain (l / leave-15\n                              :ARG1 (c3 / country\n                                    :name (n2 / name\n                                          :op1 \"Great\"\n                                          :op2 \"Britain\")))))))"
    ],
    "tree": [
      "(w / warn-01\n   :ARG0 (m / minister\n            :ord (o / ordinal-entity\n                    :value 1)))",
      "(m / minister\n   :ord (o / ordinal-entity\n           :value 1))",
      "(h / have-concession-91\n   :ARG2 (k / keep-01\n            :concession (c2 / certain\n                            :polarity -)))",
      "(k / keep-01\n   :concession (c2 / certain\n                   :polarity -))",
      "(k / keep-01\n   :ARG0 (p2 / political-party\n             :name (n / name\n                      :op1 \"Labour\"))\n   :ARG1 (p3 / promise-01\n             :mod (e / elect-01)))"
    ],
    "smus": [
      "The first minister has warned.",
      "First minister.",
      "Keep, despite uncertainty.",
      "Keep despite uncertainty.",
      "Labour will keep its election promises."
    ]
  },
  {
    "instance_id": "pyrxsum-98",
    "summary": "A convicted fraudster used an \" ingenious \" escape plot to trick prison wardens into letting A convicted fraudster go free , a court has heard .",
    "summary_trees": [
      "# ::snt A convicted fraudster used an \" ingenious \" escape plot to trick prison wardens into letting A convicted fraudster go free , a court has heard .\n(h / hear-01\n      :ARG0 (c / court)\n      :ARG1 (u / use-01\n            :ARG0 (p / person\n                  :ARG0-of (d / defraud-01)\n                  :ARG1-of (c2 / convict-01))\n            :ARG1 (p2 / plot-01\n                  :ARG0 p\n                  :ARG1 (e / escape-01\n                        :ARG0 p)\n                  :mod (ii / ingenious))\n            :ARG2 (t / trick-01\n                  :ARG0 p\n                  :ARG1 (w / wardens\n                        :mod (p3 / prison))\n                  :ARG2 (l / let-01\n                        :ARG0 w\n                        :ARG1 (f / free-01\n                              :ARG1 p)))))"
    ],
    "tree": [
      "(h / hear-01\n   :ARG1 (u / use-01\n            :ARG1 (p2 / plot-01\n                      :mod (ii / ingenious))))",
      "(u / use-01\n   :ARG1 (p2 / plot-01\n             :ARG0 (p / person)))",
      "(u / use-01\n   :ARG0 (p / person\n            :ARG0 (d / defraud-01))\n   :ARG1 (p2 / plot-01\n             :ARG0 p))",
      "(u / use-01\n   :ARG0 (p / person\n            :ARG1 (c2 / convict-01))\n   :ARG1 (p2 / plot-01\n             :ARG0 p))",
      "(p / person\n   :ARG0 (d / defraud-01)\n   :ARG1 (c2 / convict-01))"
    ],
    "smus": [
      "It was heard that an ingenious plot was used.",
      "People used a plot.",
      "The fraudster used a plot.",
      "The convicted used a plot.",
      "Fraudsters get convicted."
    ]
  },
  {
    "instance_id": "pyrxsum-99",
    "summary": "The M6 motorway between Wolverhampton and Walsall has reopened after a fatal crash .",
    "summary_trees": [
      "# ::snt The M6 motorway between Wolverhampton and Walsall has reopened after a fatal crash .\n(r / reopen-01\n      :ARG1 (r2 / road\n            :name (n / name\n                  :op1 \"M6\")\n            :location (b / between\n                  :op1 (c / city\n                        :name (n2 / name\n                              :op1 \"Wolverhampton\"))\n                  :op2 (c2 / city\n                        :name (n3 / name\n                              :op1 \"Walsall\")))\n            :mod (m / motorway))\n      :time (a / after\n            :op1 (c3 / crash-01\n                  :mod (f / fatal))))"
    ],
    "tree": [
      "(r / reopen-01\n   :ARG1 (r2 / road\n             :name (n / name\n                      :op1 \"M6\")))",
      "(r / reopen-01\n   :time (a / after\n            :op1 (c3 / crash-01\n                     :mod (f / fatal))))",
      "(r / reopen-01\n   :ARG1 (r2 / road\n             :name (n / name\n                      :op1 \"M6\"))\n   :time (a / after\n            :op1 (c3 / crash-01\n                     :mod (f / fatal))))",
      "(r2 / road\n    :name (n / name\n             :op1 \"M6\")\n    :mod (m / motorway))",
      "(a / after\n   :op1 (c3 / crash-01\n            :mod (f / fatal)))"
    ],
    "smus": [
      "The M6 has been reopened.",
      "Reopened after fatal crash",
      "The M6 was reopened after a fatal crash.",
      "The M6 motorway",
      "After a fatal crash."
    ]
  }
]